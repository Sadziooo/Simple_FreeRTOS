
Simple_FreeRTOS_Appli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002b0  70000000  70000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014938  700002b0  700002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002868  70014be8  70014be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  70017450  70017450  00019090  2**0
                  CONTENTS
  4 .ARM          00000008  70017450  70017450  00018450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  70017458  70017458  00019090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  70017458  70017458  00018458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  7001745c  7001745c  0001845c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  24000000  70017460  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000085a4  24000090  700174f0  00019090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  20000000  00001000  2**0
                  ALLOC
 11 .lwip_sec     0001ac4f  24008634  24008634  00000634  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00019090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031a92  00000000  00000000  000190be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000074be  00000000  00000000  0004ab50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024a0  00000000  00000000  00052010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001cca  00000000  00000000  000544b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010a8f  00000000  00000000  0005617a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003ca81  00000000  00000000  00066c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00164e70  00000000  00000000  000a368a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  002084fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a184  00000000  00000000  00208540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  002126c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

700002b0 <__do_global_dtors_aux>:
700002b0:	b510      	push	{r4, lr}
700002b2:	4c05      	ldr	r4, [pc, #20]	@ (700002c8 <__do_global_dtors_aux+0x18>)
700002b4:	7823      	ldrb	r3, [r4, #0]
700002b6:	b933      	cbnz	r3, 700002c6 <__do_global_dtors_aux+0x16>
700002b8:	4b04      	ldr	r3, [pc, #16]	@ (700002cc <__do_global_dtors_aux+0x1c>)
700002ba:	b113      	cbz	r3, 700002c2 <__do_global_dtors_aux+0x12>
700002bc:	4804      	ldr	r0, [pc, #16]	@ (700002d0 <__do_global_dtors_aux+0x20>)
700002be:	f3af 8000 	nop.w
700002c2:	2301      	movs	r3, #1
700002c4:	7023      	strb	r3, [r4, #0]
700002c6:	bd10      	pop	{r4, pc}
700002c8:	24000090 	.word	0x24000090
700002cc:	00000000 	.word	0x00000000
700002d0:	70014bd0 	.word	0x70014bd0

700002d4 <frame_dummy>:
700002d4:	b508      	push	{r3, lr}
700002d6:	4b03      	ldr	r3, [pc, #12]	@ (700002e4 <frame_dummy+0x10>)
700002d8:	b11b      	cbz	r3, 700002e2 <frame_dummy+0xe>
700002da:	4903      	ldr	r1, [pc, #12]	@ (700002e8 <frame_dummy+0x14>)
700002dc:	4803      	ldr	r0, [pc, #12]	@ (700002ec <frame_dummy+0x18>)
700002de:	f3af 8000 	nop.w
700002e2:	bd08      	pop	{r3, pc}
700002e4:	00000000 	.word	0x00000000
700002e8:	24000094 	.word	0x24000094
700002ec:	70014bd0 	.word	0x70014bd0

700002f0 <memchr>:
700002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
700002f4:	2a10      	cmp	r2, #16
700002f6:	db2b      	blt.n	70000350 <memchr+0x60>
700002f8:	f010 0f07 	tst.w	r0, #7
700002fc:	d008      	beq.n	70000310 <memchr+0x20>
700002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
70000302:	3a01      	subs	r2, #1
70000304:	428b      	cmp	r3, r1
70000306:	d02d      	beq.n	70000364 <memchr+0x74>
70000308:	f010 0f07 	tst.w	r0, #7
7000030c:	b342      	cbz	r2, 70000360 <memchr+0x70>
7000030e:	d1f6      	bne.n	700002fe <memchr+0xe>
70000310:	b4f0      	push	{r4, r5, r6, r7}
70000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
70000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
7000031a:	f022 0407 	bic.w	r4, r2, #7
7000031e:	f07f 0700 	mvns.w	r7, #0
70000322:	2300      	movs	r3, #0
70000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
70000328:	3c08      	subs	r4, #8
7000032a:	ea85 0501 	eor.w	r5, r5, r1
7000032e:	ea86 0601 	eor.w	r6, r6, r1
70000332:	fa85 f547 	uadd8	r5, r5, r7
70000336:	faa3 f587 	sel	r5, r3, r7
7000033a:	fa86 f647 	uadd8	r6, r6, r7
7000033e:	faa5 f687 	sel	r6, r5, r7
70000342:	b98e      	cbnz	r6, 70000368 <memchr+0x78>
70000344:	d1ee      	bne.n	70000324 <memchr+0x34>
70000346:	bcf0      	pop	{r4, r5, r6, r7}
70000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
7000034c:	f002 0207 	and.w	r2, r2, #7
70000350:	b132      	cbz	r2, 70000360 <memchr+0x70>
70000352:	f810 3b01 	ldrb.w	r3, [r0], #1
70000356:	3a01      	subs	r2, #1
70000358:	ea83 0301 	eor.w	r3, r3, r1
7000035c:	b113      	cbz	r3, 70000364 <memchr+0x74>
7000035e:	d1f8      	bne.n	70000352 <memchr+0x62>
70000360:	2000      	movs	r0, #0
70000362:	4770      	bx	lr
70000364:	3801      	subs	r0, #1
70000366:	4770      	bx	lr
70000368:	2d00      	cmp	r5, #0
7000036a:	bf06      	itte	eq
7000036c:	4635      	moveq	r5, r6
7000036e:	3803      	subeq	r0, #3
70000370:	3807      	subne	r0, #7
70000372:	f015 0f01 	tst.w	r5, #1
70000376:	d107      	bne.n	70000388 <memchr+0x98>
70000378:	3001      	adds	r0, #1
7000037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
7000037e:	bf02      	ittt	eq
70000380:	3001      	addeq	r0, #1
70000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
70000386:	3001      	addeq	r0, #1
70000388:	bcf0      	pop	{r4, r5, r6, r7}
7000038a:	3801      	subs	r0, #1
7000038c:	4770      	bx	lr
7000038e:	bf00      	nop

70000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
70000390:	b580      	push	{r7, lr}
70000392:	b084      	sub	sp, #16
70000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
70000396:	f000 f933 	bl	70000600 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
7000039a:	4b3f      	ldr	r3, [pc, #252]	@ (70000498 <main+0x108>)
7000039c:	695b      	ldr	r3, [r3, #20]
7000039e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
700003a2:	2b00      	cmp	r3, #0
700003a4:	d11b      	bne.n	700003de <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
700003a6:	f3bf 8f4f 	dsb	sy
}
700003aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
700003ac:	f3bf 8f6f 	isb	sy
}
700003b0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
700003b2:	4b39      	ldr	r3, [pc, #228]	@ (70000498 <main+0x108>)
700003b4:	2200      	movs	r2, #0
700003b6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
700003ba:	f3bf 8f4f 	dsb	sy
}
700003be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
700003c0:	f3bf 8f6f 	isb	sy
}
700003c4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
700003c6:	4b34      	ldr	r3, [pc, #208]	@ (70000498 <main+0x108>)
700003c8:	695b      	ldr	r3, [r3, #20]
700003ca:	4a33      	ldr	r2, [pc, #204]	@ (70000498 <main+0x108>)
700003cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
700003d0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
700003d2:	f3bf 8f4f 	dsb	sy
}
700003d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
700003d8:	f3bf 8f6f 	isb	sy
}
700003dc:	e000      	b.n	700003e0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
700003de:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
700003e0:	4b2d      	ldr	r3, [pc, #180]	@ (70000498 <main+0x108>)
700003e2:	695b      	ldr	r3, [r3, #20]
700003e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
700003e8:	2b00      	cmp	r3, #0
700003ea:	d138      	bne.n	7000045e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
700003ec:	4b2a      	ldr	r3, [pc, #168]	@ (70000498 <main+0x108>)
700003ee:	2200      	movs	r2, #0
700003f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
700003f4:	f3bf 8f4f 	dsb	sy
}
700003f8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
700003fa:	4b27      	ldr	r3, [pc, #156]	@ (70000498 <main+0x108>)
700003fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
70000400:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
70000402:	68fb      	ldr	r3, [r7, #12]
70000404:	0b5b      	lsrs	r3, r3, #13
70000406:	f3c3 030e 	ubfx	r3, r3, #0, #15
7000040a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
7000040c:	68fb      	ldr	r3, [r7, #12]
7000040e:	08db      	lsrs	r3, r3, #3
70000410:	f3c3 0309 	ubfx	r3, r3, #0, #10
70000414:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
70000416:	68bb      	ldr	r3, [r7, #8]
70000418:	015a      	lsls	r2, r3, #5
7000041a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
7000041e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
70000420:	687a      	ldr	r2, [r7, #4]
70000422:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
70000424:	491c      	ldr	r1, [pc, #112]	@ (70000498 <main+0x108>)
70000426:	4313      	orrs	r3, r2
70000428:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
7000042c:	687b      	ldr	r3, [r7, #4]
7000042e:	1e5a      	subs	r2, r3, #1
70000430:	607a      	str	r2, [r7, #4]
70000432:	2b00      	cmp	r3, #0
70000434:	d1ef      	bne.n	70000416 <main+0x86>
    } while(sets-- != 0U);
70000436:	68bb      	ldr	r3, [r7, #8]
70000438:	1e5a      	subs	r2, r3, #1
7000043a:	60ba      	str	r2, [r7, #8]
7000043c:	2b00      	cmp	r3, #0
7000043e:	d1e5      	bne.n	7000040c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
70000440:	f3bf 8f4f 	dsb	sy
}
70000444:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
70000446:	4b14      	ldr	r3, [pc, #80]	@ (70000498 <main+0x108>)
70000448:	695b      	ldr	r3, [r3, #20]
7000044a:	4a13      	ldr	r2, [pc, #76]	@ (70000498 <main+0x108>)
7000044c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70000450:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
70000452:	f3bf 8f4f 	dsb	sy
}
70000456:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
70000458:	f3bf 8f6f 	isb	sy
}
7000045c:	e000      	b.n	70000460 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
7000045e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Update SystemCoreClock variable according to RCC registers values. */
  SystemCoreClockUpdate();
70000460:	f000 fb0a 	bl	70000a78 <SystemCoreClockUpdate>

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
70000464:	f000 fdca 	bl	70000ffc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
70000468:	f000 f824 	bl	700004b4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
7000046c:	f005 f964 	bl	70005738 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(Start_Default_Task, NULL, &defaultTask_attributes);
70000470:	4a0a      	ldr	r2, [pc, #40]	@ (7000049c <main+0x10c>)
70000472:	2100      	movs	r1, #0
70000474:	480a      	ldr	r0, [pc, #40]	@ (700004a0 <main+0x110>)
70000476:	f005 f9c3 	bl	70005800 <osThreadNew>
7000047a:	4603      	mov	r3, r0
7000047c:	4a09      	ldr	r2, [pc, #36]	@ (700004a4 <main+0x114>)
7000047e:	6013      	str	r3, [r2, #0]

  /* creation of LedBlinker */
  LedBlinkerHandle = osThreadNew(Start_LedBlinker_Task, NULL, &LedBlinker_attributes);
70000480:	4a09      	ldr	r2, [pc, #36]	@ (700004a8 <main+0x118>)
70000482:	2100      	movs	r1, #0
70000484:	4809      	ldr	r0, [pc, #36]	@ (700004ac <main+0x11c>)
70000486:	f005 f9bb 	bl	70005800 <osThreadNew>
7000048a:	4603      	mov	r3, r0
7000048c:	4a08      	ldr	r2, [pc, #32]	@ (700004b0 <main+0x120>)
7000048e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
70000490:	f005 f978 	bl	70005784 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
70000494:	bf00      	nop
70000496:	e7fd      	b.n	70000494 <main+0x104>
70000498:	e000ed00 	.word	0xe000ed00
7000049c:	700171f8 	.word	0x700171f8
700004a0:	70000599 	.word	0x70000599
700004a4:	240000ac 	.word	0x240000ac
700004a8:	7001721c 	.word	0x7001721c
700004ac:	700005bd 	.word	0x700005bd
700004b0:	240000b0 	.word	0x240000b0

700004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
700004b4:	b580      	push	{r7, lr}
700004b6:	b08a      	sub	sp, #40	@ 0x28
700004b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
700004ba:	f107 0314 	add.w	r3, r7, #20
700004be:	2200      	movs	r2, #0
700004c0:	601a      	str	r2, [r3, #0]
700004c2:	605a      	str	r2, [r3, #4]
700004c4:	609a      	str	r2, [r3, #8]
700004c6:	60da      	str	r2, [r3, #12]
700004c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
700004ca:	4b30      	ldr	r3, [pc, #192]	@ (7000058c <MX_GPIO_Init+0xd8>)
700004cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
700004d0:	4a2e      	ldr	r2, [pc, #184]	@ (7000058c <MX_GPIO_Init+0xd8>)
700004d2:	f043 0302 	orr.w	r3, r3, #2
700004d6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
700004da:	4b2c      	ldr	r3, [pc, #176]	@ (7000058c <MX_GPIO_Init+0xd8>)
700004dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
700004e0:	613b      	str	r3, [r7, #16]
700004e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
700004e4:	4b29      	ldr	r3, [pc, #164]	@ (7000058c <MX_GPIO_Init+0xd8>)
700004e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
700004ea:	4a28      	ldr	r2, [pc, #160]	@ (7000058c <MX_GPIO_Init+0xd8>)
700004ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
700004f0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
700004f4:	4b25      	ldr	r3, [pc, #148]	@ (7000058c <MX_GPIO_Init+0xd8>)
700004f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
700004fa:	60fb      	str	r3, [r7, #12]
700004fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
700004fe:	4b23      	ldr	r3, [pc, #140]	@ (7000058c <MX_GPIO_Init+0xd8>)
70000500:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
70000504:	4a21      	ldr	r2, [pc, #132]	@ (7000058c <MX_GPIO_Init+0xd8>)
70000506:	f043 0301 	orr.w	r3, r3, #1
7000050a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
7000050e:	4b1f      	ldr	r3, [pc, #124]	@ (7000058c <MX_GPIO_Init+0xd8>)
70000510:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
70000514:	60bb      	str	r3, [r7, #8]
70000516:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
70000518:	4b1c      	ldr	r3, [pc, #112]	@ (7000058c <MX_GPIO_Init+0xd8>)
7000051a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
7000051e:	4a1b      	ldr	r2, [pc, #108]	@ (7000058c <MX_GPIO_Init+0xd8>)
70000520:	f043 0308 	orr.w	r3, r3, #8
70000524:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
70000528:	4b18      	ldr	r3, [pc, #96]	@ (7000058c <MX_GPIO_Init+0xd8>)
7000052a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
7000052e:	607b      	str	r3, [r7, #4]
70000530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_RED_GPIO_Port, LD3_RED_Pin, GPIO_PIN_RESET);
70000532:	2200      	movs	r2, #0
70000534:	2180      	movs	r1, #128	@ 0x80
70000536:	4816      	ldr	r0, [pc, #88]	@ (70000590 <MX_GPIO_Init+0xdc>)
70000538:	f002 fdd2 	bl	700030e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD2_YELLOW_Pin|LD1_GREEN_Pin, GPIO_PIN_RESET);
7000053c:	2200      	movs	r2, #0
7000053e:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
70000542:	4814      	ldr	r0, [pc, #80]	@ (70000594 <MX_GPIO_Init+0xe0>)
70000544:	f002 fdcc 	bl	700030e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_RED_Pin */
  GPIO_InitStruct.Pin = LD3_RED_Pin;
70000548:	2380      	movs	r3, #128	@ 0x80
7000054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
7000054c:	2301      	movs	r3, #1
7000054e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
70000550:	2300      	movs	r3, #0
70000552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
70000554:	2300      	movs	r3, #0
70000556:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_RED_GPIO_Port, &GPIO_InitStruct);
70000558:	f107 0314 	add.w	r3, r7, #20
7000055c:	4619      	mov	r1, r3
7000055e:	480c      	ldr	r0, [pc, #48]	@ (70000590 <MX_GPIO_Init+0xdc>)
70000560:	f002 fc68 	bl	70002e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_YELLOW_Pin LD1_GREEN_Pin */
  GPIO_InitStruct.Pin = LD2_YELLOW_Pin|LD1_GREEN_Pin;
70000564:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
70000568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
7000056a:	2301      	movs	r3, #1
7000056c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
7000056e:	2300      	movs	r3, #0
70000570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
70000572:	2300      	movs	r3, #0
70000574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
70000576:	f107 0314 	add.w	r3, r7, #20
7000057a:	4619      	mov	r1, r3
7000057c:	4805      	ldr	r0, [pc, #20]	@ (70000594 <MX_GPIO_Init+0xe0>)
7000057e:	f002 fc59 	bl	70002e34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
70000582:	bf00      	nop
70000584:	3728      	adds	r7, #40	@ 0x28
70000586:	46bd      	mov	sp, r7
70000588:	bd80      	pop	{r7, pc}
7000058a:	bf00      	nop
7000058c:	58024400 	.word	0x58024400
70000590:	58020400 	.word	0x58020400
70000594:	58020c00 	.word	0x58020c00

70000598 <Start_Default_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Default_Task */
void Start_Default_Task(void *argument)
{
70000598:	b580      	push	{r7, lr}
7000059a:	b082      	sub	sp, #8
7000059c:	af00      	add	r7, sp, #0
7000059e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  MX_LWIP_Init();
700005a0:	f004 fa04 	bl	700049ac <MX_LWIP_Init>
  /* Infinite loop */
  for(;;)
  {
	osThreadTerminate(defaultTaskHandle);
700005a4:	4b04      	ldr	r3, [pc, #16]	@ (700005b8 <Start_Default_Task+0x20>)
700005a6:	681b      	ldr	r3, [r3, #0]
700005a8:	4618      	mov	r0, r3
700005aa:	f005 f9bb 	bl	70005924 <osThreadTerminate>
	osDelay(1);
700005ae:	2001      	movs	r0, #1
700005b0:	f005 f9e4 	bl	7000597c <osDelay>
	osThreadTerminate(defaultTaskHandle);
700005b4:	bf00      	nop
700005b6:	e7f5      	b.n	700005a4 <Start_Default_Task+0xc>
700005b8:	240000ac 	.word	0x240000ac

700005bc <Start_LedBlinker_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LedBlinker_Task */
void Start_LedBlinker_Task(void *argument)
{
700005bc:	b580      	push	{r7, lr}
700005be:	b082      	sub	sp, #8
700005c0:	af00      	add	r7, sp, #0
700005c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LedBlinker_Task */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GREEN_GPIO_Port, LD1_GREEN_Pin);
700005c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
700005c8:	480b      	ldr	r0, [pc, #44]	@ (700005f8 <Start_LedBlinker_Task+0x3c>)
700005ca:	f002 fda1 	bl	70003110 <HAL_GPIO_TogglePin>
    osDelay(200);
700005ce:	20c8      	movs	r0, #200	@ 0xc8
700005d0:	f005 f9d4 	bl	7000597c <osDelay>
	HAL_GPIO_TogglePin(LD2_YELLOW_GPIO_Port, LD2_YELLOW_Pin);
700005d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
700005d8:	4807      	ldr	r0, [pc, #28]	@ (700005f8 <Start_LedBlinker_Task+0x3c>)
700005da:	f002 fd99 	bl	70003110 <HAL_GPIO_TogglePin>
    osDelay(200);
700005de:	20c8      	movs	r0, #200	@ 0xc8
700005e0:	f005 f9cc 	bl	7000597c <osDelay>
	HAL_GPIO_TogglePin(LD3_RED_GPIO_Port, LD3_RED_Pin);
700005e4:	2180      	movs	r1, #128	@ 0x80
700005e6:	4805      	ldr	r0, [pc, #20]	@ (700005fc <Start_LedBlinker_Task+0x40>)
700005e8:	f002 fd92 	bl	70003110 <HAL_GPIO_TogglePin>
    osDelay(200);
700005ec:	20c8      	movs	r0, #200	@ 0xc8
700005ee:	f005 f9c5 	bl	7000597c <osDelay>
	HAL_GPIO_TogglePin(LD1_GREEN_GPIO_Port, LD1_GREEN_Pin);
700005f2:	bf00      	nop
700005f4:	e7e6      	b.n	700005c4 <Start_LedBlinker_Task+0x8>
700005f6:	bf00      	nop
700005f8:	58020c00 	.word	0x58020c00
700005fc:	58020400 	.word	0x58020400

70000600 <MPU_Config>:
}

 /* MPU Configuration */

static void MPU_Config(void)
{
70000600:	b580      	push	{r7, lr}
70000602:	b084      	sub	sp, #16
70000604:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
70000606:	463b      	mov	r3, r7
70000608:	2200      	movs	r2, #0
7000060a:	601a      	str	r2, [r3, #0]
7000060c:	605a      	str	r2, [r3, #4]
7000060e:	609a      	str	r2, [r3, #8]
70000610:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
70000612:	f000 fe43 	bl	7000129c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
70000616:	2301      	movs	r3, #1
70000618:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
7000061a:	2300      	movs	r3, #0
7000061c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
7000061e:	2300      	movs	r3, #0
70000620:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
70000622:	231f      	movs	r3, #31
70000624:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
70000626:	2387      	movs	r3, #135	@ 0x87
70000628:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
7000062a:	2300      	movs	r3, #0
7000062c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
7000062e:	2300      	movs	r3, #0
70000630:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
70000632:	2301      	movs	r3, #1
70000634:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
70000636:	2300      	movs	r3, #0
70000638:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
7000063a:	2300      	movs	r3, #0
7000063c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
7000063e:	2300      	movs	r3, #0
70000640:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
70000642:	463b      	mov	r3, r7
70000644:	4618      	mov	r0, r3
70000646:	f000 fe47 	bl	700012d8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
7000064a:	2301      	movs	r3, #1
7000064c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x70000000;
7000064e:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
70000652:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
70000654:	231a      	movs	r3, #26
70000656:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
70000658:	2300      	movs	r3, #0
7000065a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
7000065c:	2301      	movs	r3, #1
7000065e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
70000660:	2303      	movs	r3, #3
70000662:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
70000664:	2300      	movs	r3, #0
70000666:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
70000668:	2301      	movs	r3, #1
7000066a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
7000066c:	2301      	movs	r3, #1
7000066e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
70000670:	2301      	movs	r3, #1
70000672:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
70000674:	463b      	mov	r3, r7
70000676:	4618      	mov	r0, r3
70000678:	f000 fe2e 	bl	700012d8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
7000067c:	2302      	movs	r3, #2
7000067e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24020000;
70000680:	4b18      	ldr	r3, [pc, #96]	@ (700006e4 <MPU_Config+0xe4>)
70000682:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
70000684:	230d      	movs	r3, #13
70000686:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
70000688:	2300      	movs	r3, #0
7000068a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
7000068c:	2300      	movs	r3, #0
7000068e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
70000690:	2300      	movs	r3, #0
70000692:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
70000694:	463b      	mov	r3, r7
70000696:	4618      	mov	r0, r3
70000698:	f000 fe1e 	bl	700012d8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
7000069c:	2303      	movs	r3, #3
7000069e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
700006a0:	2307      	movs	r3, #7
700006a2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
700006a4:	2300      	movs	r3, #0
700006a6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
700006a8:	2301      	movs	r3, #1
700006aa:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
700006ac:	463b      	mov	r3, r7
700006ae:	4618      	mov	r0, r3
700006b0:	f000 fe12 	bl	700012d8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
700006b4:	2304      	movs	r3, #4
700006b6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24040000;
700006b8:	4b0b      	ldr	r3, [pc, #44]	@ (700006e8 <MPU_Config+0xe8>)
700006ba:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
700006bc:	230d      	movs	r3, #13
700006be:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
700006c0:	2301      	movs	r3, #1
700006c2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
700006c4:	2301      	movs	r3, #1
700006c6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
700006c8:	2300      	movs	r3, #0
700006ca:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
700006cc:	463b      	mov	r3, r7
700006ce:	4618      	mov	r0, r3
700006d0:	f000 fe02 	bl	700012d8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
700006d4:	2004      	movs	r0, #4
700006d6:	f000 fdbf 	bl	70001258 <HAL_MPU_Enable>

}
700006da:	bf00      	nop
700006dc:	3710      	adds	r7, #16
700006de:	46bd      	mov	sp, r7
700006e0:	bd80      	pop	{r7, pc}
700006e2:	bf00      	nop
700006e4:	24020000 	.word	0x24020000
700006e8:	24040000 	.word	0x24040000

700006ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
700006ec:	b580      	push	{r7, lr}
700006ee:	b082      	sub	sp, #8
700006f0:	af00      	add	r7, sp, #0
700006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
700006f4:	687b      	ldr	r3, [r7, #4]
700006f6:	681b      	ldr	r3, [r3, #0]
700006f8:	4a04      	ldr	r2, [pc, #16]	@ (7000070c <HAL_TIM_PeriodElapsedCallback+0x20>)
700006fa:	4293      	cmp	r3, r2
700006fc:	d101      	bne.n	70000702 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
700006fe:	f000 fc95 	bl	7000102c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
70000702:	bf00      	nop
70000704:	3708      	adds	r7, #8
70000706:	46bd      	mov	sp, r7
70000708:	bd80      	pop	{r7, pc}
7000070a:	bf00      	nop
7000070c:	40001000 	.word	0x40001000

70000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
70000710:	b480      	push	{r7}
70000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
70000714:	b672      	cpsid	i
}
70000716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
70000718:	bf00      	nop
7000071a:	e7fd      	b.n	70000718 <Error_Handler+0x8>

7000071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
7000071c:	b580      	push	{r7, lr}
7000071e:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
70000720:	2200      	movs	r2, #0
70000722:	210f      	movs	r1, #15
70000724:	f06f 0001 	mvn.w	r0, #1
70000728:	f000 fd6e 	bl	70001208 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
7000072c:	bf00      	nop
7000072e:	bd80      	pop	{r7, pc}

70000730 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
70000730:	b580      	push	{r7, lr}
70000732:	b090      	sub	sp, #64	@ 0x40
70000734:	af00      	add	r7, sp, #0
70000736:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     Status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
70000738:	4b41      	ldr	r3, [pc, #260]	@ (70000840 <HAL_InitTick+0x110>)
7000073a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
7000073e:	4a40      	ldr	r2, [pc, #256]	@ (70000840 <HAL_InitTick+0x110>)
70000740:	f043 0310 	orr.w	r3, r3, #16
70000744:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
70000748:	4b3d      	ldr	r3, [pc, #244]	@ (70000840 <HAL_InitTick+0x110>)
7000074a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
7000074e:	60bb      	str	r3, [r7, #8]
70000750:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
70000752:	f107 020c 	add.w	r2, r7, #12
70000756:	f107 0310 	add.w	r3, r7, #16
7000075a:	4611      	mov	r1, r2
7000075c:	4618      	mov	r0, r3
7000075e:	f002 fe9b 	bl	70003498 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
70000762:	6a3b      	ldr	r3, [r7, #32]
70000764:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_APB1_DIV1)
70000766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70000768:	2b00      	cmp	r3, #0
7000076a:	d103      	bne.n	70000774 <HAL_InitTick+0x44>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
7000076c:	f002 fe78 	bl	70003460 <HAL_RCC_GetPCLK1Freq>
70000770:	63f8      	str	r0, [r7, #60]	@ 0x3c
70000772:	e019      	b.n	700007a8 <HAL_InitTick+0x78>
  }
  else if (uwAPB1Prescaler == RCC_APB1_DIV2)
70000774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70000776:	2b04      	cmp	r3, #4
70000778:	d105      	bne.n	70000786 <HAL_InitTick+0x56>
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
7000077a:	f002 fe71 	bl	70003460 <HAL_RCC_GetPCLK1Freq>
7000077e:	4603      	mov	r3, r0
70000780:	005b      	lsls	r3, r3, #1
70000782:	63fb      	str	r3, [r7, #60]	@ 0x3c
70000784:	e010      	b.n	700007a8 <HAL_InitTick+0x78>
  }
  else
  {
    if (__HAL_RCC_GET_TIMCLKPRESCALER() == RCC_TIMPRES_DISABLE)
70000786:	4b2e      	ldr	r3, [pc, #184]	@ (70000840 <HAL_InitTick+0x110>)
70000788:	691b      	ldr	r3, [r3, #16]
7000078a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
7000078e:	2b00      	cmp	r3, #0
70000790:	d105      	bne.n	7000079e <HAL_InitTick+0x6e>
    {
      uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
70000792:	f002 fe65 	bl	70003460 <HAL_RCC_GetPCLK1Freq>
70000796:	4603      	mov	r3, r0
70000798:	005b      	lsls	r3, r3, #1
7000079a:	63fb      	str	r3, [r7, #60]	@ 0x3c
7000079c:	e004      	b.n	700007a8 <HAL_InitTick+0x78>
    }
    else
    {
      uwTimclock = 4UL * HAL_RCC_GetPCLK1Freq();
7000079e:	f002 fe5f 	bl	70003460 <HAL_RCC_GetPCLK1Freq>
700007a2:	4603      	mov	r3, r0
700007a4:	009b      	lsls	r3, r3, #2
700007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to TIM_CNT_FREQ */
  uwPrescalerValue = (uint32_t)((uwTimclock / TIM_CNT_FREQ) - 1U);
700007a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
700007aa:	4a26      	ldr	r2, [pc, #152]	@ (70000844 <HAL_InitTick+0x114>)
700007ac:	fba2 2303 	umull	r2, r3, r2, r3
700007b0:	0c9b      	lsrs	r3, r3, #18
700007b2:	3b01      	subs	r3, #1
700007b4:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
700007b6:	4b24      	ldr	r3, [pc, #144]	@ (70000848 <HAL_InitTick+0x118>)
700007b8:	4a24      	ldr	r2, [pc, #144]	@ (7000084c <HAL_InitTick+0x11c>)
700007ba:	601a      	str	r2, [r3, #0]
  + Period = [uwTickFreq * (TIM_CNT_FREQ/TIM_FREQ) - 1]. to have a (uwTickFreq/TIM_FREQ) s time base.
  + Prescaler = (uwTimclock/TIM_CNT_FREQ - 1) to have a TIM_CNT_FREQ counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = ((uint32_t)uwTickFreq  * (TIM_CNT_FREQ / TIM_FREQ)) - 1U;
700007bc:	4b24      	ldr	r3, [pc, #144]	@ (70000850 <HAL_InitTick+0x120>)
700007be:	781b      	ldrb	r3, [r3, #0]
700007c0:	461a      	mov	r2, r3
700007c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
700007c6:	fb02 f303 	mul.w	r3, r2, r3
700007ca:	3b01      	subs	r3, #1
700007cc:	4a1e      	ldr	r2, [pc, #120]	@ (70000848 <HAL_InitTick+0x118>)
700007ce:	60d3      	str	r3, [r2, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
700007d0:	4a1d      	ldr	r2, [pc, #116]	@ (70000848 <HAL_InitTick+0x118>)
700007d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700007d4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
700007d6:	4b1c      	ldr	r3, [pc, #112]	@ (70000848 <HAL_InitTick+0x118>)
700007d8:	2200      	movs	r2, #0
700007da:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
700007dc:	4b1a      	ldr	r3, [pc, #104]	@ (70000848 <HAL_InitTick+0x118>)
700007de:	2200      	movs	r2, #0
700007e0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
700007e2:	4b19      	ldr	r3, [pc, #100]	@ (70000848 <HAL_InitTick+0x118>)
700007e4:	2200      	movs	r2, #0
700007e6:	619a      	str	r2, [r3, #24]
  Status = HAL_TIM_Base_Init(&htim6);
700007e8:	4817      	ldr	r0, [pc, #92]	@ (70000848 <HAL_InitTick+0x118>)
700007ea:	f003 fd9b 	bl	70004324 <HAL_TIM_Base_Init>
700007ee:	4603      	mov	r3, r0
700007f0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (Status == HAL_OK)
700007f4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
700007f8:	2b00      	cmp	r3, #0
700007fa:	d11b      	bne.n	70000834 <HAL_InitTick+0x104>
  {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1U)
    HAL_TIM_RegisterCallback(&htim6, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    /* Start the TIM time Base generation in interrupt mode */
    Status = HAL_TIM_Base_Start_IT(&htim6);
700007fc:	4812      	ldr	r0, [pc, #72]	@ (70000848 <HAL_InitTick+0x118>)
700007fe:	f003 fdf3 	bl	700043e8 <HAL_TIM_Base_Start_IT>
70000802:	4603      	mov	r3, r0
70000804:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    if (Status == HAL_OK)
70000808:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
7000080c:	2b00      	cmp	r3, #0
7000080e:	d111      	bne.n	70000834 <HAL_InitTick+0x104>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
70000810:	687b      	ldr	r3, [r7, #4]
70000812:	2b0f      	cmp	r3, #15
70000814:	d80b      	bhi.n	7000082e <HAL_InitTick+0xfe>
      {
        /* Configure the TIM6 global Interrupt priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0);
70000816:	2200      	movs	r2, #0
70000818:	6879      	ldr	r1, [r7, #4]
7000081a:	2037      	movs	r0, #55	@ 0x37
7000081c:	f000 fcf4 	bl	70001208 <HAL_NVIC_SetPriority>

        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
70000820:	2037      	movs	r0, #55	@ 0x37
70000822:	f000 fd0b 	bl	7000123c <HAL_NVIC_EnableIRQ>

        uwTickPrio = TickPriority;
70000826:	4a0b      	ldr	r2, [pc, #44]	@ (70000854 <HAL_InitTick+0x124>)
70000828:	687b      	ldr	r3, [r7, #4]
7000082a:	6013      	str	r3, [r2, #0]
7000082c:	e002      	b.n	70000834 <HAL_InitTick+0x104>
      }
      else
      {
        Status = HAL_ERROR;
7000082e:	2301      	movs	r3, #1
70000830:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      }
    }
  }

  /* Return function status */
  return Status;
70000834:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
70000838:	4618      	mov	r0, r3
7000083a:	3740      	adds	r7, #64	@ 0x40
7000083c:	46bd      	mov	sp, r7
7000083e:	bd80      	pop	{r7, pc}
70000840:	58024400 	.word	0x58024400
70000844:	431bde83 	.word	0x431bde83
70000848:	240000b4 	.word	0x240000b4
7000084c:	40001000 	.word	0x40001000
70000850:	24000008 	.word	0x24000008
70000854:	24000004 	.word	0x24000004

70000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
70000858:	b480      	push	{r7}
7000085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
7000085c:	bf00      	nop
7000085e:	e7fd      	b.n	7000085c <NMI_Handler+0x4>

70000860 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
70000860:	b480      	push	{r7}
70000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
70000864:	bf00      	nop
70000866:	e7fd      	b.n	70000864 <HardFault_Handler+0x4>

70000868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
70000868:	b480      	push	{r7}
7000086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
7000086c:	bf00      	nop
7000086e:	e7fd      	b.n	7000086c <MemManage_Handler+0x4>

70000870 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
70000870:	b480      	push	{r7}
70000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
70000874:	bf00      	nop
70000876:	e7fd      	b.n	70000874 <BusFault_Handler+0x4>

70000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
70000878:	b480      	push	{r7}
7000087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
7000087c:	bf00      	nop
7000087e:	e7fd      	b.n	7000087c <UsageFault_Handler+0x4>

70000880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
70000880:	b480      	push	{r7}
70000882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
70000884:	bf00      	nop
70000886:	46bd      	mov	sp, r7
70000888:	f85d 7b04 	ldr.w	r7, [sp], #4
7000088c:	4770      	bx	lr
	...

70000890 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
70000890:	b580      	push	{r7, lr}
70000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
70000894:	4802      	ldr	r0, [pc, #8]	@ (700008a0 <TIM6_IRQHandler+0x10>)
70000896:	f003 fe1d 	bl	700044d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
7000089a:	bf00      	nop
7000089c:	bd80      	pop	{r7, pc}
7000089e:	bf00      	nop
700008a0:	240000b4 	.word	0x240000b4

700008a4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
700008a4:	b580      	push	{r7, lr}
700008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
700008a8:	4802      	ldr	r0, [pc, #8]	@ (700008b4 <ETH_IRQHandler+0x10>)
700008aa:	f001 f92d 	bl	70001b08 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
700008ae:	bf00      	nop
700008b0:	bd80      	pop	{r7, pc}
700008b2:	bf00      	nop
700008b4:	24000188 	.word	0x24000188

700008b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
700008b8:	b480      	push	{r7}
700008ba:	af00      	add	r7, sp, #0
  return 1;
700008bc:	2301      	movs	r3, #1
}
700008be:	4618      	mov	r0, r3
700008c0:	46bd      	mov	sp, r7
700008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
700008c6:	4770      	bx	lr

700008c8 <_kill>:

int _kill(int pid, int sig)
{
700008c8:	b480      	push	{r7}
700008ca:	b083      	sub	sp, #12
700008cc:	af00      	add	r7, sp, #0
700008ce:	6078      	str	r0, [r7, #4]
700008d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
700008d2:	4b05      	ldr	r3, [pc, #20]	@ (700008e8 <_kill+0x20>)
700008d4:	2216      	movs	r2, #22
700008d6:	601a      	str	r2, [r3, #0]
  return -1;
700008d8:	f04f 33ff 	mov.w	r3, #4294967295
}
700008dc:	4618      	mov	r0, r3
700008de:	370c      	adds	r7, #12
700008e0:	46bd      	mov	sp, r7
700008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
700008e6:	4770      	bx	lr
700008e8:	24008624 	.word	0x24008624

700008ec <_exit>:

void _exit (int status)
{
700008ec:	b580      	push	{r7, lr}
700008ee:	b082      	sub	sp, #8
700008f0:	af00      	add	r7, sp, #0
700008f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
700008f4:	f04f 31ff 	mov.w	r1, #4294967295
700008f8:	6878      	ldr	r0, [r7, #4]
700008fa:	f7ff ffe5 	bl	700008c8 <_kill>
  while (1) {}    /* Make sure we hang here */
700008fe:	bf00      	nop
70000900:	e7fd      	b.n	700008fe <_exit+0x12>

70000902 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
70000902:	b580      	push	{r7, lr}
70000904:	b086      	sub	sp, #24
70000906:	af00      	add	r7, sp, #0
70000908:	60f8      	str	r0, [r7, #12]
7000090a:	60b9      	str	r1, [r7, #8]
7000090c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
7000090e:	2300      	movs	r3, #0
70000910:	617b      	str	r3, [r7, #20]
70000912:	e00a      	b.n	7000092a <_read+0x28>
  {
    *ptr++ = __io_getchar();
70000914:	f3af 8000 	nop.w
70000918:	4601      	mov	r1, r0
7000091a:	68bb      	ldr	r3, [r7, #8]
7000091c:	1c5a      	adds	r2, r3, #1
7000091e:	60ba      	str	r2, [r7, #8]
70000920:	b2ca      	uxtb	r2, r1
70000922:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
70000924:	697b      	ldr	r3, [r7, #20]
70000926:	3301      	adds	r3, #1
70000928:	617b      	str	r3, [r7, #20]
7000092a:	697a      	ldr	r2, [r7, #20]
7000092c:	687b      	ldr	r3, [r7, #4]
7000092e:	429a      	cmp	r2, r3
70000930:	dbf0      	blt.n	70000914 <_read+0x12>
  }

  return len;
70000932:	687b      	ldr	r3, [r7, #4]
}
70000934:	4618      	mov	r0, r3
70000936:	3718      	adds	r7, #24
70000938:	46bd      	mov	sp, r7
7000093a:	bd80      	pop	{r7, pc}

7000093c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
7000093c:	b580      	push	{r7, lr}
7000093e:	b086      	sub	sp, #24
70000940:	af00      	add	r7, sp, #0
70000942:	60f8      	str	r0, [r7, #12]
70000944:	60b9      	str	r1, [r7, #8]
70000946:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
70000948:	2300      	movs	r3, #0
7000094a:	617b      	str	r3, [r7, #20]
7000094c:	e009      	b.n	70000962 <_write+0x26>
  {
    __io_putchar(*ptr++);
7000094e:	68bb      	ldr	r3, [r7, #8]
70000950:	1c5a      	adds	r2, r3, #1
70000952:	60ba      	str	r2, [r7, #8]
70000954:	781b      	ldrb	r3, [r3, #0]
70000956:	4618      	mov	r0, r3
70000958:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
7000095c:	697b      	ldr	r3, [r7, #20]
7000095e:	3301      	adds	r3, #1
70000960:	617b      	str	r3, [r7, #20]
70000962:	697a      	ldr	r2, [r7, #20]
70000964:	687b      	ldr	r3, [r7, #4]
70000966:	429a      	cmp	r2, r3
70000968:	dbf1      	blt.n	7000094e <_write+0x12>
  }
  return len;
7000096a:	687b      	ldr	r3, [r7, #4]
}
7000096c:	4618      	mov	r0, r3
7000096e:	3718      	adds	r7, #24
70000970:	46bd      	mov	sp, r7
70000972:	bd80      	pop	{r7, pc}

70000974 <_close>:

int _close(int file)
{
70000974:	b480      	push	{r7}
70000976:	b083      	sub	sp, #12
70000978:	af00      	add	r7, sp, #0
7000097a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
7000097c:	f04f 33ff 	mov.w	r3, #4294967295
}
70000980:	4618      	mov	r0, r3
70000982:	370c      	adds	r7, #12
70000984:	46bd      	mov	sp, r7
70000986:	f85d 7b04 	ldr.w	r7, [sp], #4
7000098a:	4770      	bx	lr

7000098c <_fstat>:


int _fstat(int file, struct stat *st)
{
7000098c:	b480      	push	{r7}
7000098e:	b083      	sub	sp, #12
70000990:	af00      	add	r7, sp, #0
70000992:	6078      	str	r0, [r7, #4]
70000994:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
70000996:	683b      	ldr	r3, [r7, #0]
70000998:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
7000099c:	605a      	str	r2, [r3, #4]
  return 0;
7000099e:	2300      	movs	r3, #0
}
700009a0:	4618      	mov	r0, r3
700009a2:	370c      	adds	r7, #12
700009a4:	46bd      	mov	sp, r7
700009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
700009aa:	4770      	bx	lr

700009ac <_isatty>:

int _isatty(int file)
{
700009ac:	b480      	push	{r7}
700009ae:	b083      	sub	sp, #12
700009b0:	af00      	add	r7, sp, #0
700009b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
700009b4:	2301      	movs	r3, #1
}
700009b6:	4618      	mov	r0, r3
700009b8:	370c      	adds	r7, #12
700009ba:	46bd      	mov	sp, r7
700009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
700009c0:	4770      	bx	lr

700009c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
700009c2:	b480      	push	{r7}
700009c4:	b085      	sub	sp, #20
700009c6:	af00      	add	r7, sp, #0
700009c8:	60f8      	str	r0, [r7, #12]
700009ca:	60b9      	str	r1, [r7, #8]
700009cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
700009ce:	2300      	movs	r3, #0
}
700009d0:	4618      	mov	r0, r3
700009d2:	3714      	adds	r7, #20
700009d4:	46bd      	mov	sp, r7
700009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
700009da:	4770      	bx	lr

700009dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
700009dc:	b480      	push	{r7}
700009de:	b087      	sub	sp, #28
700009e0:	af00      	add	r7, sp, #0
700009e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
700009e4:	4a14      	ldr	r2, [pc, #80]	@ (70000a38 <_sbrk+0x5c>)
700009e6:	4b15      	ldr	r3, [pc, #84]	@ (70000a3c <_sbrk+0x60>)
700009e8:	1ad3      	subs	r3, r2, r3
700009ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
700009ec:	697b      	ldr	r3, [r7, #20]
700009ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
700009f0:	4b13      	ldr	r3, [pc, #76]	@ (70000a40 <_sbrk+0x64>)
700009f2:	681b      	ldr	r3, [r3, #0]
700009f4:	2b00      	cmp	r3, #0
700009f6:	d102      	bne.n	700009fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
700009f8:	4b11      	ldr	r3, [pc, #68]	@ (70000a40 <_sbrk+0x64>)
700009fa:	4a12      	ldr	r2, [pc, #72]	@ (70000a44 <_sbrk+0x68>)
700009fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
700009fe:	4b10      	ldr	r3, [pc, #64]	@ (70000a40 <_sbrk+0x64>)
70000a00:	681a      	ldr	r2, [r3, #0]
70000a02:	687b      	ldr	r3, [r7, #4]
70000a04:	4413      	add	r3, r2
70000a06:	693a      	ldr	r2, [r7, #16]
70000a08:	429a      	cmp	r2, r3
70000a0a:	d205      	bcs.n	70000a18 <_sbrk+0x3c>
  {
    errno = ENOMEM;
70000a0c:	4b0e      	ldr	r3, [pc, #56]	@ (70000a48 <_sbrk+0x6c>)
70000a0e:	220c      	movs	r2, #12
70000a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
70000a12:	f04f 33ff 	mov.w	r3, #4294967295
70000a16:	e009      	b.n	70000a2c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
70000a18:	4b09      	ldr	r3, [pc, #36]	@ (70000a40 <_sbrk+0x64>)
70000a1a:	681b      	ldr	r3, [r3, #0]
70000a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
70000a1e:	4b08      	ldr	r3, [pc, #32]	@ (70000a40 <_sbrk+0x64>)
70000a20:	681a      	ldr	r2, [r3, #0]
70000a22:	687b      	ldr	r3, [r7, #4]
70000a24:	4413      	add	r3, r2
70000a26:	4a06      	ldr	r2, [pc, #24]	@ (70000a40 <_sbrk+0x64>)
70000a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
70000a2a:	68fb      	ldr	r3, [r7, #12]
}
70000a2c:	4618      	mov	r0, r3
70000a2e:	371c      	adds	r7, #28
70000a30:	46bd      	mov	sp, r7
70000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
70000a36:	4770      	bx	lr
70000a38:	20010000 	.word	0x20010000
70000a3c:	00000400 	.word	0x00000400
70000a40:	24000100 	.word	0x24000100
70000a44:	20000000 	.word	0x20000000
70000a48:	24008624 	.word	0x24008624

70000a4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
70000a4c:	b480      	push	{r7}
70000a4e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = INTVECT_START;
70000a50:	4b07      	ldr	r3, [pc, #28]	@ (70000a70 <SystemInit+0x24>)
70000a52:	4a08      	ldr	r2, [pc, #32]	@ (70000a74 <SystemInit+0x28>)
70000a54:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
70000a56:	4b06      	ldr	r3, [pc, #24]	@ (70000a70 <SystemInit+0x24>)
70000a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
70000a5c:	4a04      	ldr	r2, [pc, #16]	@ (70000a70 <SystemInit+0x24>)
70000a5e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
70000a62:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
70000a66:	bf00      	nop
70000a68:	46bd      	mov	sp, r7
70000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
70000a6e:	4770      	bx	lr
70000a70:	e000ed00 	.word	0xe000ed00
70000a74:	70000000 	.word	0x70000000

70000a78 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
70000a78:	b480      	push	{r7}
70000a7a:	b089      	sub	sp, #36	@ 0x24
70000a7c:	af00      	add	r7, sp, #0
  uint32_t sysclk, hsivalue, pllsource, pllm, pllp, core_presc;
  float_t pllfracn, pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
70000a7e:	4b92      	ldr	r3, [pc, #584]	@ (70000cc8 <SystemCoreClockUpdate+0x250>)
70000a80:	691b      	ldr	r3, [r3, #16]
70000a82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
70000a86:	2b18      	cmp	r3, #24
70000a88:	f200 80fb 	bhi.w	70000c82 <SystemCoreClockUpdate+0x20a>
70000a8c:	a201      	add	r2, pc, #4	@ (adr r2, 70000a94 <SystemCoreClockUpdate+0x1c>)
70000a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70000a92:	bf00      	nop
70000a94:	70000af9 	.word	0x70000af9
70000a98:	70000c83 	.word	0x70000c83
70000a9c:	70000c83 	.word	0x70000c83
70000aa0:	70000c83 	.word	0x70000c83
70000aa4:	70000c83 	.word	0x70000c83
70000aa8:	70000c83 	.word	0x70000c83
70000aac:	70000c83 	.word	0x70000c83
70000ab0:	70000c83 	.word	0x70000c83
70000ab4:	70000b0d 	.word	0x70000b0d
70000ab8:	70000c83 	.word	0x70000c83
70000abc:	70000c83 	.word	0x70000c83
70000ac0:	70000c83 	.word	0x70000c83
70000ac4:	70000c83 	.word	0x70000c83
70000ac8:	70000c83 	.word	0x70000c83
70000acc:	70000c83 	.word	0x70000c83
70000ad0:	70000c83 	.word	0x70000c83
70000ad4:	70000b13 	.word	0x70000b13
70000ad8:	70000c83 	.word	0x70000c83
70000adc:	70000c83 	.word	0x70000c83
70000ae0:	70000c83 	.word	0x70000c83
70000ae4:	70000c83 	.word	0x70000c83
70000ae8:	70000c83 	.word	0x70000c83
70000aec:	70000c83 	.word	0x70000c83
70000af0:	70000c83 	.word	0x70000c83
70000af4:	70000b19 	.word	0x70000b19
  {
  case 0x00:  /* HSI used as system clock source (default after reset) */
    sysclk = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos));
70000af8:	4b73      	ldr	r3, [pc, #460]	@ (70000cc8 <SystemCoreClockUpdate+0x250>)
70000afa:	681b      	ldr	r3, [r3, #0]
70000afc:	08db      	lsrs	r3, r3, #3
70000afe:	f003 0303 	and.w	r3, r3, #3
70000b02:	4a72      	ldr	r2, [pc, #456]	@ (70000ccc <SystemCoreClockUpdate+0x254>)
70000b04:	fa22 f303 	lsr.w	r3, r2, r3
70000b08:	61fb      	str	r3, [r7, #28]
    break;
70000b0a:	e0c4      	b.n	70000c96 <SystemCoreClockUpdate+0x21e>

  case 0x08:  /* CSI used as system clock source */
    sysclk = CSI_VALUE;
70000b0c:	4b70      	ldr	r3, [pc, #448]	@ (70000cd0 <SystemCoreClockUpdate+0x258>)
70000b0e:	61fb      	str	r3, [r7, #28]
    break;
70000b10:	e0c1      	b.n	70000c96 <SystemCoreClockUpdate+0x21e>

  case 0x10:  /* HSE used as system clock source */
    sysclk = HSE_VALUE;
70000b12:	4b70      	ldr	r3, [pc, #448]	@ (70000cd4 <SystemCoreClockUpdate+0x25c>)
70000b14:	61fb      	str	r3, [r7, #28]
    break;
70000b16:	e0be      	b.n	70000c96 <SystemCoreClockUpdate+0x21e>

  case 0x18:  /* PLL1 used as system clock  source */
    /* PLL1_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL1_VCO / PLL1R
       */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
70000b18:	4b6b      	ldr	r3, [pc, #428]	@ (70000cc8 <SystemCoreClockUpdate+0x250>)
70000b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70000b1c:	f003 0303 	and.w	r3, r3, #3
70000b20:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
70000b22:	4b69      	ldr	r3, [pc, #420]	@ (70000cc8 <SystemCoreClockUpdate+0x250>)
70000b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70000b26:	091b      	lsrs	r3, r3, #4
70000b28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
70000b2c:	60fb      	str	r3, [r7, #12]
    if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) != 0U)
70000b2e:	4b66      	ldr	r3, [pc, #408]	@ (70000cc8 <SystemCoreClockUpdate+0x250>)
70000b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70000b32:	f003 0301 	and.w	r3, r3, #1
70000b36:	2b00      	cmp	r3, #0
70000b38:	d00b      	beq.n	70000b52 <SystemCoreClockUpdate+0xda>
    {
      pllfracn = (float_t)(uint32_t)(((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN)>> RCC_PLL1FRACR_FRACN_Pos));
70000b3a:	4b63      	ldr	r3, [pc, #396]	@ (70000cc8 <SystemCoreClockUpdate+0x250>)
70000b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
70000b3e:	08db      	lsrs	r3, r3, #3
70000b40:	f3c3 030c 	ubfx	r3, r3, #0, #13
70000b44:	ee07 3a90 	vmov	s15, r3
70000b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
70000b4c:	edc7 7a06 	vstr	s15, [r7, #24]
70000b50:	e002      	b.n	70000b58 <SystemCoreClockUpdate+0xe0>
    }
    else
    {
      pllfracn = (float_t)0U;
70000b52:	f04f 0300 	mov.w	r3, #0
70000b56:	61bb      	str	r3, [r7, #24]
    }

    if (pllm != 0U)
70000b58:	68fb      	ldr	r3, [r7, #12]
70000b5a:	2b00      	cmp	r3, #0
70000b5c:	f000 808e 	beq.w	70000c7c <SystemCoreClockUpdate+0x204>
70000b60:	693b      	ldr	r3, [r7, #16]
70000b62:	2b01      	cmp	r3, #1
70000b64:	d024      	beq.n	70000bb0 <SystemCoreClockUpdate+0x138>
70000b66:	693b      	ldr	r3, [r7, #16]
70000b68:	2b02      	cmp	r3, #2
70000b6a:	d143      	bne.n	70000bf4 <SystemCoreClockUpdate+0x17c>
    {
      switch (pllsource)
      {
      case 0x02:  /* HSE used as PLL1 clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (pllfracn/(float_t)0x2000) +(float_t)1 );
70000b6c:	68fb      	ldr	r3, [r7, #12]
70000b6e:	ee07 3a90 	vmov	s15, r3
70000b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
70000b76:	eddf 6a58 	vldr	s13, [pc, #352]	@ 70000cd8 <SystemCoreClockUpdate+0x260>
70000b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70000b7e:	4b52      	ldr	r3, [pc, #328]	@ (70000cc8 <SystemCoreClockUpdate+0x250>)
70000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70000b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
70000b86:	ee07 3a90 	vmov	s15, r3
70000b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
70000b8e:	ed97 6a06 	vldr	s12, [r7, #24]
70000b92:	eddf 5a52 	vldr	s11, [pc, #328]	@ 70000cdc <SystemCoreClockUpdate+0x264>
70000b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
70000b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
70000b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70000ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
70000ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
70000baa:	edc7 7a05 	vstr	s15, [r7, #20]
        break;
70000bae:	e04f      	b.n	70000c50 <SystemCoreClockUpdate+0x1d8>

      case 0x01:  /* CSI used as PLL1 clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (pllfracn/(float_t)0x2000) +(float_t)1 );
70000bb0:	68fb      	ldr	r3, [r7, #12]
70000bb2:	ee07 3a90 	vmov	s15, r3
70000bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
70000bba:	eddf 6a49 	vldr	s13, [pc, #292]	@ 70000ce0 <SystemCoreClockUpdate+0x268>
70000bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70000bc2:	4b41      	ldr	r3, [pc, #260]	@ (70000cc8 <SystemCoreClockUpdate+0x250>)
70000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70000bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
70000bca:	ee07 3a90 	vmov	s15, r3
70000bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
70000bd2:	ed97 6a06 	vldr	s12, [r7, #24]
70000bd6:	eddf 5a41 	vldr	s11, [pc, #260]	@ 70000cdc <SystemCoreClockUpdate+0x264>
70000bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
70000bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
70000be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70000be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
70000bea:	ee67 7a27 	vmul.f32	s15, s14, s15
70000bee:	edc7 7a05 	vstr	s15, [r7, #20]
        break;
70000bf2:	e02d      	b.n	70000c50 <SystemCoreClockUpdate+0x1d8>

      case 0x00:  /* HSI used as PLL1 clock source */
      default:
        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos));
70000bf4:	4b34      	ldr	r3, [pc, #208]	@ (70000cc8 <SystemCoreClockUpdate+0x250>)
70000bf6:	681b      	ldr	r3, [r3, #0]
70000bf8:	08db      	lsrs	r3, r3, #3
70000bfa:	f003 0303 	and.w	r3, r3, #3
70000bfe:	4a33      	ldr	r2, [pc, #204]	@ (70000ccc <SystemCoreClockUpdate+0x254>)
70000c00:	fa22 f303 	lsr.w	r3, r2, r3
70000c04:	60bb      	str	r3, [r7, #8]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (pllfracn/(float_t)0x2000) +(float_t)1 );
70000c06:	68bb      	ldr	r3, [r7, #8]
70000c08:	ee07 3a90 	vmov	s15, r3
70000c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
70000c10:	68fb      	ldr	r3, [r7, #12]
70000c12:	ee07 3a90 	vmov	s15, r3
70000c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
70000c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70000c1e:	4b2a      	ldr	r3, [pc, #168]	@ (70000cc8 <SystemCoreClockUpdate+0x250>)
70000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70000c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
70000c26:	ee07 3a90 	vmov	s15, r3
70000c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
70000c2e:	ed97 6a06 	vldr	s12, [r7, #24]
70000c32:	eddf 5a2a 	vldr	s11, [pc, #168]	@ 70000cdc <SystemCoreClockUpdate+0x264>
70000c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
70000c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
70000c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70000c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
70000c46:	ee67 7a27 	vmul.f32	s15, s14, s15
70000c4a:	edc7 7a05 	vstr	s15, [r7, #20]
        break;
70000c4e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U ) ;
70000c50:	4b1d      	ldr	r3, [pc, #116]	@ (70000cc8 <SystemCoreClockUpdate+0x250>)
70000c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70000c54:	0a5b      	lsrs	r3, r3, #9
70000c56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
70000c5a:	3301      	adds	r3, #1
70000c5c:	607b      	str	r3, [r7, #4]
      sysclk =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
70000c5e:	687b      	ldr	r3, [r7, #4]
70000c60:	ee07 3a90 	vmov	s15, r3
70000c64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
70000c68:	edd7 6a05 	vldr	s13, [r7, #20]
70000c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
70000c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
70000c74:	ee17 3a90 	vmov	r3, s15
70000c78:	61fb      	str	r3, [r7, #28]
    }
    else
    {
      sysclk = 0U;
    }
    break;
70000c7a:	e00c      	b.n	70000c96 <SystemCoreClockUpdate+0x21e>
      sysclk = 0U;
70000c7c:	2300      	movs	r3, #0
70000c7e:	61fb      	str	r3, [r7, #28]
    break;
70000c80:	e009      	b.n	70000c96 <SystemCoreClockUpdate+0x21e>

  default:  /* Unexpected, default to HSI used as system clock source (default after reset) */
    sysclk = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos));
70000c82:	4b11      	ldr	r3, [pc, #68]	@ (70000cc8 <SystemCoreClockUpdate+0x250>)
70000c84:	681b      	ldr	r3, [r3, #0]
70000c86:	08db      	lsrs	r3, r3, #3
70000c88:	f003 0303 	and.w	r3, r3, #3
70000c8c:	4a0f      	ldr	r2, [pc, #60]	@ (70000ccc <SystemCoreClockUpdate+0x254>)
70000c8e:	fa22 f303 	lsr.w	r3, r2, r3
70000c92:	61fb      	str	r3, [r7, #28]
    break;
70000c94:	bf00      	nop
  }

  /* system clock frequency : CM7 CPU frequency  */
  core_presc = (RCC->CDCFGR & RCC_CDCFGR_CPRE);
70000c96:	4b0c      	ldr	r3, [pc, #48]	@ (70000cc8 <SystemCoreClockUpdate+0x250>)
70000c98:	699b      	ldr	r3, [r3, #24]
70000c9a:	f003 030f 	and.w	r3, r3, #15
70000c9e:	603b      	str	r3, [r7, #0]
  if (core_presc >= 8U)
70000ca0:	683b      	ldr	r3, [r7, #0]
70000ca2:	2b07      	cmp	r3, #7
70000ca4:	d907      	bls.n	70000cb6 <SystemCoreClockUpdate+0x23e>
  {
    SystemCoreClock = (sysclk >> (core_presc - RCC_CDCFGR_CPRE_3 + 1U));
70000ca6:	683b      	ldr	r3, [r7, #0]
70000ca8:	3b07      	subs	r3, #7
70000caa:	69fa      	ldr	r2, [r7, #28]
70000cac:	fa22 f303 	lsr.w	r3, r2, r3
70000cb0:	4a0c      	ldr	r2, [pc, #48]	@ (70000ce4 <SystemCoreClockUpdate+0x26c>)
70000cb2:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock = sysclk;
  }
}
70000cb4:	e002      	b.n	70000cbc <SystemCoreClockUpdate+0x244>
    SystemCoreClock = sysclk;
70000cb6:	4a0b      	ldr	r2, [pc, #44]	@ (70000ce4 <SystemCoreClockUpdate+0x26c>)
70000cb8:	69fb      	ldr	r3, [r7, #28]
70000cba:	6013      	str	r3, [r2, #0]
}
70000cbc:	bf00      	nop
70000cbe:	3724      	adds	r7, #36	@ 0x24
70000cc0:	46bd      	mov	sp, r7
70000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
70000cc6:	4770      	bx	lr
70000cc8:	58024400 	.word	0x58024400
70000ccc:	03d09000 	.word	0x03d09000
70000cd0:	003d0900 	.word	0x003d0900
70000cd4:	016e3600 	.word	0x016e3600
70000cd8:	4bb71b00 	.word	0x4bb71b00
70000cdc:	46000000 	.word	0x46000000
70000ce0:	4a742400 	.word	0x4a742400
70000ce4:	24000000 	.word	0x24000000

70000ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
70000ce8:	480d      	ldr	r0, [pc, #52]	@ (70000d20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
70000cea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
70000cec:	f7ff feae 	bl	70000a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
70000cf0:	480c      	ldr	r0, [pc, #48]	@ (70000d24 <LoopForever+0x6>)
  ldr r1, =_edata
70000cf2:	490d      	ldr	r1, [pc, #52]	@ (70000d28 <LoopForever+0xa>)
  ldr r2, =_sidata
70000cf4:	4a0d      	ldr	r2, [pc, #52]	@ (70000d2c <LoopForever+0xe>)
  movs r3, #0
70000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
70000cf8:	e002      	b.n	70000d00 <LoopCopyDataInit>

70000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
70000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
70000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
70000cfe:	3304      	adds	r3, #4

70000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
70000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
70000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
70000d04:	d3f9      	bcc.n	70000cfa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
70000d06:	4a0a      	ldr	r2, [pc, #40]	@ (70000d30 <LoopForever+0x12>)
  ldr r4, =_ebss
70000d08:	4c0a      	ldr	r4, [pc, #40]	@ (70000d34 <LoopForever+0x16>)
  movs r3, #0
70000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
70000d0c:	e001      	b.n	70000d12 <LoopFillZerobss>

70000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
70000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
70000d10:	3204      	adds	r2, #4

70000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
70000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
70000d14:	d3fb      	bcc.n	70000d0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
70000d16:	f013 f905 	bl	70013f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
70000d1a:	f7ff fb39 	bl	70000390 <main>

70000d1e <LoopForever>:

LoopForever:
  b LoopForever
70000d1e:	e7fe      	b.n	70000d1e <LoopForever>
  ldr   r0, =_estack
70000d20:	20010000 	.word	0x20010000
  ldr r0, =_sdata
70000d24:	24000000 	.word	0x24000000
  ldr r1, =_edata
70000d28:	24000090 	.word	0x24000090
  ldr r2, =_sidata
70000d2c:	70017460 	.word	0x70017460
  ldr r2, =_sbss
70000d30:	24000090 	.word	0x24000090
  ldr r4, =_ebss
70000d34:	24008634 	.word	0x24008634

70000d38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
70000d38:	e7fe      	b.n	70000d38 <ADC1_2_IRQHandler>

70000d3a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
70000d3a:	b480      	push	{r7}
70000d3c:	b083      	sub	sp, #12
70000d3e:	af00      	add	r7, sp, #0
70000d40:	6078      	str	r0, [r7, #4]
70000d42:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
70000d44:	687b      	ldr	r3, [r7, #4]
70000d46:	2b00      	cmp	r3, #0
70000d48:	d00b      	beq.n	70000d62 <LAN8742_RegisterBusIO+0x28>
70000d4a:	683b      	ldr	r3, [r7, #0]
70000d4c:	68db      	ldr	r3, [r3, #12]
70000d4e:	2b00      	cmp	r3, #0
70000d50:	d007      	beq.n	70000d62 <LAN8742_RegisterBusIO+0x28>
70000d52:	683b      	ldr	r3, [r7, #0]
70000d54:	689b      	ldr	r3, [r3, #8]
70000d56:	2b00      	cmp	r3, #0
70000d58:	d003      	beq.n	70000d62 <LAN8742_RegisterBusIO+0x28>
70000d5a:	683b      	ldr	r3, [r7, #0]
70000d5c:	691b      	ldr	r3, [r3, #16]
70000d5e:	2b00      	cmp	r3, #0
70000d60:	d102      	bne.n	70000d68 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
70000d62:	f04f 33ff 	mov.w	r3, #4294967295
70000d66:	e014      	b.n	70000d92 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
70000d68:	683b      	ldr	r3, [r7, #0]
70000d6a:	681a      	ldr	r2, [r3, #0]
70000d6c:	687b      	ldr	r3, [r7, #4]
70000d6e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
70000d70:	683b      	ldr	r3, [r7, #0]
70000d72:	685a      	ldr	r2, [r3, #4]
70000d74:	687b      	ldr	r3, [r7, #4]
70000d76:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
70000d78:	683b      	ldr	r3, [r7, #0]
70000d7a:	68da      	ldr	r2, [r3, #12]
70000d7c:	687b      	ldr	r3, [r7, #4]
70000d7e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
70000d80:	683b      	ldr	r3, [r7, #0]
70000d82:	689a      	ldr	r2, [r3, #8]
70000d84:	687b      	ldr	r3, [r7, #4]
70000d86:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
70000d88:	683b      	ldr	r3, [r7, #0]
70000d8a:	691a      	ldr	r2, [r3, #16]
70000d8c:	687b      	ldr	r3, [r7, #4]
70000d8e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
70000d90:	2300      	movs	r3, #0
}
70000d92:	4618      	mov	r0, r3
70000d94:	370c      	adds	r7, #12
70000d96:	46bd      	mov	sp, r7
70000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
70000d9c:	4770      	bx	lr

70000d9e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
70000d9e:	b580      	push	{r7, lr}
70000da0:	b086      	sub	sp, #24
70000da2:	af00      	add	r7, sp, #0
70000da4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
70000da6:	2300      	movs	r3, #0
70000da8:	60fb      	str	r3, [r7, #12]
70000daa:	2300      	movs	r3, #0
70000dac:	60bb      	str	r3, [r7, #8]
70000dae:	2300      	movs	r3, #0
70000db0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
70000db2:	2300      	movs	r3, #0
70000db4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
70000db6:	687b      	ldr	r3, [r7, #4]
70000db8:	685b      	ldr	r3, [r3, #4]
70000dba:	2b00      	cmp	r3, #0
70000dbc:	d17c      	bne.n	70000eb8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
70000dbe:	687b      	ldr	r3, [r7, #4]
70000dc0:	689b      	ldr	r3, [r3, #8]
70000dc2:	2b00      	cmp	r3, #0
70000dc4:	d002      	beq.n	70000dcc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
70000dc6:	687b      	ldr	r3, [r7, #4]
70000dc8:	689b      	ldr	r3, [r3, #8]
70000dca:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
70000dcc:	687b      	ldr	r3, [r7, #4]
70000dce:	2220      	movs	r2, #32
70000dd0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
70000dd2:	2300      	movs	r3, #0
70000dd4:	617b      	str	r3, [r7, #20]
70000dd6:	e01c      	b.n	70000e12 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
70000dd8:	687b      	ldr	r3, [r7, #4]
70000dda:	695b      	ldr	r3, [r3, #20]
70000ddc:	f107 0208 	add.w	r2, r7, #8
70000de0:	2112      	movs	r1, #18
70000de2:	6978      	ldr	r0, [r7, #20]
70000de4:	4798      	blx	r3
70000de6:	4603      	mov	r3, r0
70000de8:	2b00      	cmp	r3, #0
70000dea:	da03      	bge.n	70000df4 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
70000dec:	f06f 0304 	mvn.w	r3, #4
70000df0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
70000df2:	e00b      	b.n	70000e0c <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
70000df4:	68bb      	ldr	r3, [r7, #8]
70000df6:	f003 031f 	and.w	r3, r3, #31
70000dfa:	697a      	ldr	r2, [r7, #20]
70000dfc:	429a      	cmp	r2, r3
70000dfe:	d105      	bne.n	70000e0c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
70000e00:	687b      	ldr	r3, [r7, #4]
70000e02:	697a      	ldr	r2, [r7, #20]
70000e04:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
70000e06:	2300      	movs	r3, #0
70000e08:	613b      	str	r3, [r7, #16]
         break;
70000e0a:	e005      	b.n	70000e18 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
70000e0c:	697b      	ldr	r3, [r7, #20]
70000e0e:	3301      	adds	r3, #1
70000e10:	617b      	str	r3, [r7, #20]
70000e12:	697b      	ldr	r3, [r7, #20]
70000e14:	2b1f      	cmp	r3, #31
70000e16:	d9df      	bls.n	70000dd8 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
70000e18:	687b      	ldr	r3, [r7, #4]
70000e1a:	681b      	ldr	r3, [r3, #0]
70000e1c:	2b1f      	cmp	r3, #31
70000e1e:	d902      	bls.n	70000e26 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
70000e20:	f06f 0302 	mvn.w	r3, #2
70000e24:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
70000e26:	693b      	ldr	r3, [r7, #16]
70000e28:	2b00      	cmp	r3, #0
70000e2a:	d145      	bne.n	70000eb8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
70000e2c:	687b      	ldr	r3, [r7, #4]
70000e2e:	691b      	ldr	r3, [r3, #16]
70000e30:	687a      	ldr	r2, [r7, #4]
70000e32:	6810      	ldr	r0, [r2, #0]
70000e34:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
70000e38:	2100      	movs	r1, #0
70000e3a:	4798      	blx	r3
70000e3c:	4603      	mov	r3, r0
70000e3e:	2b00      	cmp	r3, #0
70000e40:	db37      	blt.n	70000eb2 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
70000e42:	687b      	ldr	r3, [r7, #4]
70000e44:	695b      	ldr	r3, [r3, #20]
70000e46:	687a      	ldr	r2, [r7, #4]
70000e48:	6810      	ldr	r0, [r2, #0]
70000e4a:	f107 0208 	add.w	r2, r7, #8
70000e4e:	2100      	movs	r1, #0
70000e50:	4798      	blx	r3
70000e52:	4603      	mov	r3, r0
70000e54:	2b00      	cmp	r3, #0
70000e56:	db28      	blt.n	70000eaa <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
70000e58:	687b      	ldr	r3, [r7, #4]
70000e5a:	699b      	ldr	r3, [r3, #24]
70000e5c:	4798      	blx	r3
70000e5e:	4603      	mov	r3, r0
70000e60:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
70000e62:	e01c      	b.n	70000e9e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
70000e64:	687b      	ldr	r3, [r7, #4]
70000e66:	699b      	ldr	r3, [r3, #24]
70000e68:	4798      	blx	r3
70000e6a:	4603      	mov	r3, r0
70000e6c:	461a      	mov	r2, r3
70000e6e:	68fb      	ldr	r3, [r7, #12]
70000e70:	1ad3      	subs	r3, r2, r3
70000e72:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
70000e76:	d80e      	bhi.n	70000e96 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
70000e78:	687b      	ldr	r3, [r7, #4]
70000e7a:	695b      	ldr	r3, [r3, #20]
70000e7c:	687a      	ldr	r2, [r7, #4]
70000e7e:	6810      	ldr	r0, [r2, #0]
70000e80:	f107 0208 	add.w	r2, r7, #8
70000e84:	2100      	movs	r1, #0
70000e86:	4798      	blx	r3
70000e88:	4603      	mov	r3, r0
70000e8a:	2b00      	cmp	r3, #0
70000e8c:	da07      	bge.n	70000e9e <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
70000e8e:	f06f 0304 	mvn.w	r3, #4
70000e92:	613b      	str	r3, [r7, #16]
                 break;
70000e94:	e010      	b.n	70000eb8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
70000e96:	f06f 0301 	mvn.w	r3, #1
70000e9a:	613b      	str	r3, [r7, #16]
               break;
70000e9c:	e00c      	b.n	70000eb8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
70000e9e:	68bb      	ldr	r3, [r7, #8]
70000ea0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
70000ea4:	2b00      	cmp	r3, #0
70000ea6:	d1dd      	bne.n	70000e64 <LAN8742_Init+0xc6>
70000ea8:	e006      	b.n	70000eb8 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
70000eaa:	f06f 0304 	mvn.w	r3, #4
70000eae:	613b      	str	r3, [r7, #16]
70000eb0:	e002      	b.n	70000eb8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
70000eb2:	f06f 0303 	mvn.w	r3, #3
70000eb6:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
70000eb8:	693b      	ldr	r3, [r7, #16]
70000eba:	2b00      	cmp	r3, #0
70000ebc:	d112      	bne.n	70000ee4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
70000ebe:	687b      	ldr	r3, [r7, #4]
70000ec0:	699b      	ldr	r3, [r3, #24]
70000ec2:	4798      	blx	r3
70000ec4:	4603      	mov	r3, r0
70000ec6:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
70000ec8:	bf00      	nop
70000eca:	687b      	ldr	r3, [r7, #4]
70000ecc:	699b      	ldr	r3, [r3, #24]
70000ece:	4798      	blx	r3
70000ed0:	4603      	mov	r3, r0
70000ed2:	461a      	mov	r2, r3
70000ed4:	68fb      	ldr	r3, [r7, #12]
70000ed6:	1ad3      	subs	r3, r2, r3
70000ed8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
70000edc:	d9f5      	bls.n	70000eca <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
70000ede:	687b      	ldr	r3, [r7, #4]
70000ee0:	2201      	movs	r2, #1
70000ee2:	605a      	str	r2, [r3, #4]
   }

   return status;
70000ee4:	693b      	ldr	r3, [r7, #16]
 }
70000ee6:	4618      	mov	r0, r3
70000ee8:	3718      	adds	r7, #24
70000eea:	46bd      	mov	sp, r7
70000eec:	bd80      	pop	{r7, pc}

70000eee <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
70000eee:	b580      	push	{r7, lr}
70000ef0:	b084      	sub	sp, #16
70000ef2:	af00      	add	r7, sp, #0
70000ef4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
70000ef6:	2300      	movs	r3, #0
70000ef8:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
70000efa:	687b      	ldr	r3, [r7, #4]
70000efc:	695b      	ldr	r3, [r3, #20]
70000efe:	687a      	ldr	r2, [r7, #4]
70000f00:	6810      	ldr	r0, [r2, #0]
70000f02:	f107 020c 	add.w	r2, r7, #12
70000f06:	2101      	movs	r1, #1
70000f08:	4798      	blx	r3
70000f0a:	4603      	mov	r3, r0
70000f0c:	2b00      	cmp	r3, #0
70000f0e:	da02      	bge.n	70000f16 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
70000f10:	f06f 0304 	mvn.w	r3, #4
70000f14:	e06e      	b.n	70000ff4 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
70000f16:	687b      	ldr	r3, [r7, #4]
70000f18:	695b      	ldr	r3, [r3, #20]
70000f1a:	687a      	ldr	r2, [r7, #4]
70000f1c:	6810      	ldr	r0, [r2, #0]
70000f1e:	f107 020c 	add.w	r2, r7, #12
70000f22:	2101      	movs	r1, #1
70000f24:	4798      	blx	r3
70000f26:	4603      	mov	r3, r0
70000f28:	2b00      	cmp	r3, #0
70000f2a:	da02      	bge.n	70000f32 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
70000f2c:	f06f 0304 	mvn.w	r3, #4
70000f30:	e060      	b.n	70000ff4 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
70000f32:	68fb      	ldr	r3, [r7, #12]
70000f34:	f003 0304 	and.w	r3, r3, #4
70000f38:	2b00      	cmp	r3, #0
70000f3a:	d101      	bne.n	70000f40 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
70000f3c:	2301      	movs	r3, #1
70000f3e:	e059      	b.n	70000ff4 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
70000f40:	687b      	ldr	r3, [r7, #4]
70000f42:	695b      	ldr	r3, [r3, #20]
70000f44:	687a      	ldr	r2, [r7, #4]
70000f46:	6810      	ldr	r0, [r2, #0]
70000f48:	f107 020c 	add.w	r2, r7, #12
70000f4c:	2100      	movs	r1, #0
70000f4e:	4798      	blx	r3
70000f50:	4603      	mov	r3, r0
70000f52:	2b00      	cmp	r3, #0
70000f54:	da02      	bge.n	70000f5c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
70000f56:	f06f 0304 	mvn.w	r3, #4
70000f5a:	e04b      	b.n	70000ff4 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
70000f5c:	68fb      	ldr	r3, [r7, #12]
70000f5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
70000f62:	2b00      	cmp	r3, #0
70000f64:	d11b      	bne.n	70000f9e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
70000f66:	68fb      	ldr	r3, [r7, #12]
70000f68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
70000f6c:	2b00      	cmp	r3, #0
70000f6e:	d006      	beq.n	70000f7e <LAN8742_GetLinkState+0x90>
70000f70:	68fb      	ldr	r3, [r7, #12]
70000f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
70000f76:	2b00      	cmp	r3, #0
70000f78:	d001      	beq.n	70000f7e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
70000f7a:	2302      	movs	r3, #2
70000f7c:	e03a      	b.n	70000ff4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
70000f7e:	68fb      	ldr	r3, [r7, #12]
70000f80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
70000f84:	2b00      	cmp	r3, #0
70000f86:	d001      	beq.n	70000f8c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
70000f88:	2303      	movs	r3, #3
70000f8a:	e033      	b.n	70000ff4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
70000f8c:	68fb      	ldr	r3, [r7, #12]
70000f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
70000f92:	2b00      	cmp	r3, #0
70000f94:	d001      	beq.n	70000f9a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
70000f96:	2304      	movs	r3, #4
70000f98:	e02c      	b.n	70000ff4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
70000f9a:	2305      	movs	r3, #5
70000f9c:	e02a      	b.n	70000ff4 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
70000f9e:	687b      	ldr	r3, [r7, #4]
70000fa0:	695b      	ldr	r3, [r3, #20]
70000fa2:	687a      	ldr	r2, [r7, #4]
70000fa4:	6810      	ldr	r0, [r2, #0]
70000fa6:	f107 020c 	add.w	r2, r7, #12
70000faa:	211f      	movs	r1, #31
70000fac:	4798      	blx	r3
70000fae:	4603      	mov	r3, r0
70000fb0:	2b00      	cmp	r3, #0
70000fb2:	da02      	bge.n	70000fba <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
70000fb4:	f06f 0304 	mvn.w	r3, #4
70000fb8:	e01c      	b.n	70000ff4 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
70000fba:	68fb      	ldr	r3, [r7, #12]
70000fbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
70000fc0:	2b00      	cmp	r3, #0
70000fc2:	d101      	bne.n	70000fc8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
70000fc4:	2306      	movs	r3, #6
70000fc6:	e015      	b.n	70000ff4 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
70000fc8:	68fb      	ldr	r3, [r7, #12]
70000fca:	f003 031c 	and.w	r3, r3, #28
70000fce:	2b18      	cmp	r3, #24
70000fd0:	d101      	bne.n	70000fd6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
70000fd2:	2302      	movs	r3, #2
70000fd4:	e00e      	b.n	70000ff4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
70000fd6:	68fb      	ldr	r3, [r7, #12]
70000fd8:	f003 031c 	and.w	r3, r3, #28
70000fdc:	2b08      	cmp	r3, #8
70000fde:	d101      	bne.n	70000fe4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
70000fe0:	2303      	movs	r3, #3
70000fe2:	e007      	b.n	70000ff4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
70000fe4:	68fb      	ldr	r3, [r7, #12]
70000fe6:	f003 031c 	and.w	r3, r3, #28
70000fea:	2b14      	cmp	r3, #20
70000fec:	d101      	bne.n	70000ff2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
70000fee:	2304      	movs	r3, #4
70000ff0:	e000      	b.n	70000ff4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
70000ff2:	2305      	movs	r3, #5
    }
  }
}
70000ff4:	4618      	mov	r0, r3
70000ff6:	3710      	adds	r7, #16
70000ff8:	46bd      	mov	sp, r7
70000ffa:	bd80      	pop	{r7, pc}

70000ffc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
70000ffc:	b580      	push	{r7, lr}
70000ffe:	b082      	sub	sp, #8
70001000:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
70001002:	2300      	movs	r3, #0
70001004:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
70001006:	2003      	movs	r0, #3
70001008:	f000 f8f3 	bl	700011f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
7000100c:	2004      	movs	r0, #4
7000100e:	f7ff fb8f 	bl	70000730 <HAL_InitTick>
70001012:	4603      	mov	r3, r0
70001014:	2b00      	cmp	r3, #0
70001016:	d002      	beq.n	7000101e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
70001018:	2301      	movs	r3, #1
7000101a:	71fb      	strb	r3, [r7, #7]
7000101c:	e001      	b.n	70001022 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
7000101e:	f7ff fb7d 	bl	7000071c <HAL_MspInit>
  }

  /* Return function status */
  return status;
70001022:	79fb      	ldrb	r3, [r7, #7]
}
70001024:	4618      	mov	r0, r3
70001026:	3708      	adds	r7, #8
70001028:	46bd      	mov	sp, r7
7000102a:	bd80      	pop	{r7, pc}

7000102c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
7000102c:	b480      	push	{r7}
7000102e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
70001030:	4b06      	ldr	r3, [pc, #24]	@ (7000104c <HAL_IncTick+0x20>)
70001032:	781b      	ldrb	r3, [r3, #0]
70001034:	461a      	mov	r2, r3
70001036:	4b06      	ldr	r3, [pc, #24]	@ (70001050 <HAL_IncTick+0x24>)
70001038:	681b      	ldr	r3, [r3, #0]
7000103a:	4413      	add	r3, r2
7000103c:	4a04      	ldr	r2, [pc, #16]	@ (70001050 <HAL_IncTick+0x24>)
7000103e:	6013      	str	r3, [r2, #0]
}
70001040:	bf00      	nop
70001042:	46bd      	mov	sp, r7
70001044:	f85d 7b04 	ldr.w	r7, [sp], #4
70001048:	4770      	bx	lr
7000104a:	bf00      	nop
7000104c:	24000008 	.word	0x24000008
70001050:	24000104 	.word	0x24000104

70001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
70001054:	b480      	push	{r7}
70001056:	af00      	add	r7, sp, #0
  return uwTick;
70001058:	4b03      	ldr	r3, [pc, #12]	@ (70001068 <HAL_GetTick+0x14>)
7000105a:	681b      	ldr	r3, [r3, #0]
}
7000105c:	4618      	mov	r0, r3
7000105e:	46bd      	mov	sp, r7
70001060:	f85d 7b04 	ldr.w	r7, [sp], #4
70001064:	4770      	bx	lr
70001066:	bf00      	nop
70001068:	24000104 	.word	0x24000104

7000106c <HAL_SBS_ConfigEthernetPHY>:
  *            @arg SBS_ETHERNET_PHY_GMII_OR_MII GMMI or MII selection
  *            @arg SBS_ETHERNET_PHY_RMII RMII selection
  * @retval None
  */
void HAL_SBS_ConfigEthernetPHY(uint32_t Config)
{
7000106c:	b480      	push	{r7}
7000106e:	b083      	sub	sp, #12
70001070:	af00      	add	r7, sp, #0
70001072:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_PHY(Config));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_PHYSEL, Config);
70001074:	4b07      	ldr	r3, [pc, #28]	@ (70001094 <HAL_SBS_ConfigEthernetPHY+0x28>)
70001076:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
7000107a:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
7000107e:	4905      	ldr	r1, [pc, #20]	@ (70001094 <HAL_SBS_ConfigEthernetPHY+0x28>)
70001080:	687b      	ldr	r3, [r7, #4]
70001082:	4313      	orrs	r3, r2
70001084:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
}
70001088:	bf00      	nop
7000108a:	370c      	adds	r7, #12
7000108c:	46bd      	mov	sp, r7
7000108e:	f85d 7b04 	ldr.w	r7, [sp], #4
70001092:	4770      	bx	lr
70001094:	58000400 	.word	0x58000400

70001098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
70001098:	b480      	push	{r7}
7000109a:	b085      	sub	sp, #20
7000109c:	af00      	add	r7, sp, #0
7000109e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
700010a0:	687b      	ldr	r3, [r7, #4]
700010a2:	f003 0307 	and.w	r3, r3, #7
700010a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
700010a8:	4b0b      	ldr	r3, [pc, #44]	@ (700010d8 <__NVIC_SetPriorityGrouping+0x40>)
700010aa:	68db      	ldr	r3, [r3, #12]
700010ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
700010ae:	68ba      	ldr	r2, [r7, #8]
700010b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
700010b4:	4013      	ands	r3, r2
700010b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
700010b8:	68fb      	ldr	r3, [r7, #12]
700010ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
700010bc:	68bb      	ldr	r3, [r7, #8]
700010be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
700010c0:	4b06      	ldr	r3, [pc, #24]	@ (700010dc <__NVIC_SetPriorityGrouping+0x44>)
700010c2:	4313      	orrs	r3, r2
700010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
700010c6:	4a04      	ldr	r2, [pc, #16]	@ (700010d8 <__NVIC_SetPriorityGrouping+0x40>)
700010c8:	68bb      	ldr	r3, [r7, #8]
700010ca:	60d3      	str	r3, [r2, #12]
}
700010cc:	bf00      	nop
700010ce:	3714      	adds	r7, #20
700010d0:	46bd      	mov	sp, r7
700010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
700010d6:	4770      	bx	lr
700010d8:	e000ed00 	.word	0xe000ed00
700010dc:	05fa0000 	.word	0x05fa0000

700010e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
700010e0:	b480      	push	{r7}
700010e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
700010e4:	4b04      	ldr	r3, [pc, #16]	@ (700010f8 <__NVIC_GetPriorityGrouping+0x18>)
700010e6:	68db      	ldr	r3, [r3, #12]
700010e8:	0a1b      	lsrs	r3, r3, #8
700010ea:	f003 0307 	and.w	r3, r3, #7
}
700010ee:	4618      	mov	r0, r3
700010f0:	46bd      	mov	sp, r7
700010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
700010f6:	4770      	bx	lr
700010f8:	e000ed00 	.word	0xe000ed00

700010fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
700010fc:	b480      	push	{r7}
700010fe:	b083      	sub	sp, #12
70001100:	af00      	add	r7, sp, #0
70001102:	4603      	mov	r3, r0
70001104:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
70001106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
7000110a:	2b00      	cmp	r3, #0
7000110c:	db0b      	blt.n	70001126 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
7000110e:	88fb      	ldrh	r3, [r7, #6]
70001110:	f003 021f 	and.w	r2, r3, #31
70001114:	4907      	ldr	r1, [pc, #28]	@ (70001134 <__NVIC_EnableIRQ+0x38>)
70001116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
7000111a:	095b      	lsrs	r3, r3, #5
7000111c:	2001      	movs	r0, #1
7000111e:	fa00 f202 	lsl.w	r2, r0, r2
70001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
70001126:	bf00      	nop
70001128:	370c      	adds	r7, #12
7000112a:	46bd      	mov	sp, r7
7000112c:	f85d 7b04 	ldr.w	r7, [sp], #4
70001130:	4770      	bx	lr
70001132:	bf00      	nop
70001134:	e000e100 	.word	0xe000e100

70001138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
70001138:	b480      	push	{r7}
7000113a:	b083      	sub	sp, #12
7000113c:	af00      	add	r7, sp, #0
7000113e:	4603      	mov	r3, r0
70001140:	6039      	str	r1, [r7, #0]
70001142:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
70001144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70001148:	2b00      	cmp	r3, #0
7000114a:	db0a      	blt.n	70001162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
7000114c:	683b      	ldr	r3, [r7, #0]
7000114e:	b2da      	uxtb	r2, r3
70001150:	490c      	ldr	r1, [pc, #48]	@ (70001184 <__NVIC_SetPriority+0x4c>)
70001152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70001156:	0112      	lsls	r2, r2, #4
70001158:	b2d2      	uxtb	r2, r2
7000115a:	440b      	add	r3, r1
7000115c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
70001160:	e00a      	b.n	70001178 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
70001162:	683b      	ldr	r3, [r7, #0]
70001164:	b2da      	uxtb	r2, r3
70001166:	4908      	ldr	r1, [pc, #32]	@ (70001188 <__NVIC_SetPriority+0x50>)
70001168:	88fb      	ldrh	r3, [r7, #6]
7000116a:	f003 030f 	and.w	r3, r3, #15
7000116e:	3b04      	subs	r3, #4
70001170:	0112      	lsls	r2, r2, #4
70001172:	b2d2      	uxtb	r2, r2
70001174:	440b      	add	r3, r1
70001176:	761a      	strb	r2, [r3, #24]
}
70001178:	bf00      	nop
7000117a:	370c      	adds	r7, #12
7000117c:	46bd      	mov	sp, r7
7000117e:	f85d 7b04 	ldr.w	r7, [sp], #4
70001182:	4770      	bx	lr
70001184:	e000e100 	.word	0xe000e100
70001188:	e000ed00 	.word	0xe000ed00

7000118c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
7000118c:	b480      	push	{r7}
7000118e:	b089      	sub	sp, #36	@ 0x24
70001190:	af00      	add	r7, sp, #0
70001192:	60f8      	str	r0, [r7, #12]
70001194:	60b9      	str	r1, [r7, #8]
70001196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
70001198:	68fb      	ldr	r3, [r7, #12]
7000119a:	f003 0307 	and.w	r3, r3, #7
7000119e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
700011a0:	69fb      	ldr	r3, [r7, #28]
700011a2:	f1c3 0307 	rsb	r3, r3, #7
700011a6:	2b04      	cmp	r3, #4
700011a8:	bf28      	it	cs
700011aa:	2304      	movcs	r3, #4
700011ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
700011ae:	69fb      	ldr	r3, [r7, #28]
700011b0:	3304      	adds	r3, #4
700011b2:	2b06      	cmp	r3, #6
700011b4:	d902      	bls.n	700011bc <NVIC_EncodePriority+0x30>
700011b6:	69fb      	ldr	r3, [r7, #28]
700011b8:	3b03      	subs	r3, #3
700011ba:	e000      	b.n	700011be <NVIC_EncodePriority+0x32>
700011bc:	2300      	movs	r3, #0
700011be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
700011c0:	f04f 32ff 	mov.w	r2, #4294967295
700011c4:	69bb      	ldr	r3, [r7, #24]
700011c6:	fa02 f303 	lsl.w	r3, r2, r3
700011ca:	43da      	mvns	r2, r3
700011cc:	68bb      	ldr	r3, [r7, #8]
700011ce:	401a      	ands	r2, r3
700011d0:	697b      	ldr	r3, [r7, #20]
700011d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
700011d4:	f04f 31ff 	mov.w	r1, #4294967295
700011d8:	697b      	ldr	r3, [r7, #20]
700011da:	fa01 f303 	lsl.w	r3, r1, r3
700011de:	43d9      	mvns	r1, r3
700011e0:	687b      	ldr	r3, [r7, #4]
700011e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
700011e4:	4313      	orrs	r3, r2
         );
}
700011e6:	4618      	mov	r0, r3
700011e8:	3724      	adds	r7, #36	@ 0x24
700011ea:	46bd      	mov	sp, r7
700011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
700011f0:	4770      	bx	lr

700011f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
700011f2:	b580      	push	{r7, lr}
700011f4:	b082      	sub	sp, #8
700011f6:	af00      	add	r7, sp, #0
700011f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
700011fa:	6878      	ldr	r0, [r7, #4]
700011fc:	f7ff ff4c 	bl	70001098 <__NVIC_SetPriorityGrouping>
}
70001200:	bf00      	nop
70001202:	3708      	adds	r7, #8
70001204:	46bd      	mov	sp, r7
70001206:	bd80      	pop	{r7, pc}

70001208 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
70001208:	b580      	push	{r7, lr}
7000120a:	b086      	sub	sp, #24
7000120c:	af00      	add	r7, sp, #0
7000120e:	4603      	mov	r3, r0
70001210:	60b9      	str	r1, [r7, #8]
70001212:	607a      	str	r2, [r7, #4]
70001214:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
70001216:	f7ff ff63 	bl	700010e0 <__NVIC_GetPriorityGrouping>
7000121a:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
7000121c:	687a      	ldr	r2, [r7, #4]
7000121e:	68b9      	ldr	r1, [r7, #8]
70001220:	6978      	ldr	r0, [r7, #20]
70001222:	f7ff ffb3 	bl	7000118c <NVIC_EncodePriority>
70001226:	4602      	mov	r2, r0
70001228:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
7000122c:	4611      	mov	r1, r2
7000122e:	4618      	mov	r0, r3
70001230:	f7ff ff82 	bl	70001138 <__NVIC_SetPriority>
}
70001234:	bf00      	nop
70001236:	3718      	adds	r7, #24
70001238:	46bd      	mov	sp, r7
7000123a:	bd80      	pop	{r7, pc}

7000123c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32h7rsxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
7000123c:	b580      	push	{r7, lr}
7000123e:	b082      	sub	sp, #8
70001240:	af00      	add	r7, sp, #0
70001242:	4603      	mov	r3, r0
70001244:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
70001246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
7000124a:	4618      	mov	r0, r3
7000124c:	f7ff ff56 	bl	700010fc <__NVIC_EnableIRQ>
}
70001250:	bf00      	nop
70001252:	3708      	adds	r7, #8
70001254:	46bd      	mov	sp, r7
70001256:	bd80      	pop	{r7, pc}

70001258 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
70001258:	b480      	push	{r7}
7000125a:	b083      	sub	sp, #12
7000125c:	af00      	add	r7, sp, #0
7000125e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
70001260:	f3bf 8f5f 	dmb	sy
}
70001264:	bf00      	nop
  /* Force any outstanding transfers to complete before enabling MPU */
  __DMB();

  /* Enable the MPU */
  MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
70001266:	4a0b      	ldr	r2, [pc, #44]	@ (70001294 <HAL_MPU_Enable+0x3c>)
70001268:	687b      	ldr	r3, [r7, #4]
7000126a:	f043 0301 	orr.w	r3, r3, #1
7000126e:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
70001270:	4b09      	ldr	r3, [pc, #36]	@ (70001298 <HAL_MPU_Enable+0x40>)
70001272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70001274:	4a08      	ldr	r2, [pc, #32]	@ (70001298 <HAL_MPU_Enable+0x40>)
70001276:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
7000127a:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
7000127c:	f3bf 8f4f 	dsb	sy
}
70001280:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
70001282:	f3bf 8f6f 	isb	sy
}
70001286:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
70001288:	bf00      	nop
7000128a:	370c      	adds	r7, #12
7000128c:	46bd      	mov	sp, r7
7000128e:	f85d 7b04 	ldr.w	r7, [sp], #4
70001292:	4770      	bx	lr
70001294:	e000ed90 	.word	0xe000ed90
70001298:	e000ed00 	.word	0xe000ed00

7000129c <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
7000129c:	b480      	push	{r7}
7000129e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
700012a0:	f3bf 8f5f 	dmb	sy
}
700012a4:	bf00      	nop
  /* Force any outstanding transfers to complete before disabling MPU */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
700012a6:	4b0a      	ldr	r3, [pc, #40]	@ (700012d0 <HAL_MPU_Disable+0x34>)
700012a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700012aa:	4a09      	ldr	r2, [pc, #36]	@ (700012d0 <HAL_MPU_Disable+0x34>)
700012ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
700012b0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register */
  MPU->CTRL = 0U;
700012b2:	4b08      	ldr	r3, [pc, #32]	@ (700012d4 <HAL_MPU_Disable+0x38>)
700012b4:	2200      	movs	r2, #0
700012b6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
700012b8:	f3bf 8f4f 	dsb	sy
}
700012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
700012be:	f3bf 8f6f 	isb	sy
}
700012c2:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
700012c4:	bf00      	nop
700012c6:	46bd      	mov	sp, r7
700012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
700012cc:	4770      	bx	lr
700012ce:	bf00      	nop
700012d0:	e000ed00 	.word	0xe000ed00
700012d4:	e000ed90 	.word	0xe000ed90

700012d8 <HAL_MPU_ConfigRegion>:
  *                  the initialization and configuration information.
  * @note   The region base address must be aligned to the size of the region.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *pMPU_RegionInit)
{
700012d8:	b480      	push	{r7}
700012da:	b083      	sub	sp, #12
700012dc:	af00      	add	r7, sp, #0
700012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(pMPU_RegionInit->Number));
  assert_param(IS_MPU_REGION_ENABLE(pMPU_RegionInit->Enable));

  /* Set the Region number */
  MPU->RNR = pMPU_RegionInit->Number;
700012e0:	687b      	ldr	r3, [r7, #4]
700012e2:	785a      	ldrb	r2, [r3, #1]
700012e4:	4b1e      	ldr	r3, [pc, #120]	@ (70001360 <HAL_MPU_ConfigRegion+0x88>)
700012e6:	609a      	str	r2, [r3, #8]
  assert_param(IS_MPU_SUB_REGION_DISABLE(pMPU_RegionInit->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(pMPU_RegionInit->Size));
  assert_param(IS_MPU_ADDRESS_MULTIPLE_SIZE(pMPU_RegionInit->BaseAddress, pMPU_RegionInit->Size));

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
700012e8:	4b1d      	ldr	r3, [pc, #116]	@ (70001360 <HAL_MPU_ConfigRegion+0x88>)
700012ea:	691b      	ldr	r3, [r3, #16]
700012ec:	4a1c      	ldr	r2, [pc, #112]	@ (70001360 <HAL_MPU_ConfigRegion+0x88>)
700012ee:	f023 0301 	bic.w	r3, r3, #1
700012f2:	6113      	str	r3, [r2, #16]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
700012f4:	4b1a      	ldr	r3, [pc, #104]	@ (70001360 <HAL_MPU_ConfigRegion+0x88>)
700012f6:	691b      	ldr	r3, [r3, #16]
700012f8:	4a19      	ldr	r2, [pc, #100]	@ (70001360 <HAL_MPU_ConfigRegion+0x88>)
700012fa:	f023 0301 	bic.w	r3, r3, #1
700012fe:	6113      	str	r3, [r2, #16]
  MPU->RBAR = pMPU_RegionInit->BaseAddress;
70001300:	4a17      	ldr	r2, [pc, #92]	@ (70001360 <HAL_MPU_ConfigRegion+0x88>)
70001302:	687b      	ldr	r3, [r7, #4]
70001304:	685b      	ldr	r3, [r3, #4]
70001306:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
70001308:	687b      	ldr	r3, [r7, #4]
7000130a:	7b1b      	ldrb	r3, [r3, #12]
7000130c:	071a      	lsls	r2, r3, #28
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
7000130e:	687b      	ldr	r3, [r7, #4]
70001310:	7adb      	ldrb	r3, [r3, #11]
70001312:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
70001314:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
70001316:	687b      	ldr	r3, [r7, #4]
70001318:	7a9b      	ldrb	r3, [r3, #10]
7000131a:	04db      	lsls	r3, r3, #19
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
7000131c:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
7000131e:	687b      	ldr	r3, [r7, #4]
70001320:	7b5b      	ldrb	r3, [r3, #13]
70001322:	049b      	lsls	r3, r3, #18
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
70001324:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
70001326:	687b      	ldr	r3, [r7, #4]
70001328:	7b9b      	ldrb	r3, [r3, #14]
7000132a:	045b      	lsls	r3, r3, #17
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
7000132c:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
7000132e:	687b      	ldr	r3, [r7, #4]
70001330:	7bdb      	ldrb	r3, [r3, #15]
70001332:	041b      	lsls	r3, r3, #16
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
70001334:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
70001336:	687b      	ldr	r3, [r7, #4]
70001338:	7a5b      	ldrb	r3, [r3, #9]
7000133a:	021b      	lsls	r3, r3, #8
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
7000133c:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
7000133e:	687b      	ldr	r3, [r7, #4]
70001340:	7a1b      	ldrb	r3, [r3, #8]
70001342:	005b      	lsls	r3, r3, #1
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
70001344:	4313      	orrs	r3, r2
              ((uint32_t)pMPU_RegionInit->Enable           << MPU_RASR_ENABLE_Pos);
70001346:	687a      	ldr	r2, [r7, #4]
70001348:	7812      	ldrb	r2, [r2, #0]
7000134a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
7000134c:	4a04      	ldr	r2, [pc, #16]	@ (70001360 <HAL_MPU_ConfigRegion+0x88>)
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
7000134e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
70001350:	6113      	str	r3, [r2, #16]
}
70001352:	bf00      	nop
70001354:	370c      	adds	r7, #12
70001356:	46bd      	mov	sp, r7
70001358:	f85d 7b04 	ldr.w	r7, [sp], #4
7000135c:	4770      	bx	lr
7000135e:	bf00      	nop
70001360:	e000ed90 	.word	0xe000ed90

70001364 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
70001364:	b580      	push	{r7, lr}
70001366:	b084      	sub	sp, #16
70001368:	af00      	add	r7, sp, #0
7000136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
7000136c:	687b      	ldr	r3, [r7, #4]
7000136e:	2b00      	cmp	r3, #0
70001370:	d101      	bne.n	70001376 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
70001372:	2301      	movs	r3, #1
70001374:	e0e2      	b.n	7000153c <HAL_ETH_Init+0x1d8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
70001376:	687b      	ldr	r3, [r7, #4]
70001378:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
7000137c:	2b00      	cmp	r3, #0
7000137e:	d106      	bne.n	7000138e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
70001380:	687b      	ldr	r3, [r7, #4]
70001382:	2223      	movs	r2, #35	@ 0x23
70001384:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
70001388:	6878      	ldr	r0, [r7, #4]
7000138a:	f003 ff1b 	bl	700051c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
7000138e:	4b6d      	ldr	r3, [pc, #436]	@ (70001544 <HAL_ETH_Init+0x1e0>)
70001390:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
70001394:	4a6b      	ldr	r2, [pc, #428]	@ (70001544 <HAL_ETH_Init+0x1e0>)
70001396:	f043 0302 	orr.w	r3, r3, #2
7000139a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
7000139e:	4b69      	ldr	r3, [pc, #420]	@ (70001544 <HAL_ETH_Init+0x1e0>)
700013a0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
700013a4:	60bb      	str	r3, [r7, #8]
700013a6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
700013a8:	687b      	ldr	r3, [r7, #4]
700013aa:	7a1b      	ldrb	r3, [r3, #8]
700013ac:	2b00      	cmp	r3, #0
700013ae:	d103      	bne.n	700013b8 <HAL_ETH_Init+0x54>
  {
    HAL_SBS_ConfigEthernetPHY(SBS_ETHERNET_PHY_GMII_OR_MII);
700013b0:	2000      	movs	r0, #0
700013b2:	f7ff fe5b 	bl	7000106c <HAL_SBS_ConfigEthernetPHY>
700013b6:	e003      	b.n	700013c0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SBS_ConfigEthernetPHY(SBS_ETHERNET_PHY_RMII);
700013b8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
700013bc:	f7ff fe56 	bl	7000106c <HAL_SBS_ConfigEthernetPHY>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
700013c0:	4b61      	ldr	r3, [pc, #388]	@ (70001548 <HAL_ETH_Init+0x1e4>)
700013c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
700013c6:	687b      	ldr	r3, [r7, #4]
700013c8:	681b      	ldr	r3, [r3, #0]
700013ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
700013ce:	681b      	ldr	r3, [r3, #0]
700013d0:	687a      	ldr	r2, [r7, #4]
700013d2:	6812      	ldr	r2, [r2, #0]
700013d4:	f043 0301 	orr.w	r3, r3, #1
700013d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
700013dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
700013de:	f7ff fe39 	bl	70001054 <HAL_GetTick>
700013e2:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
700013e4:	e011      	b.n	7000140a <HAL_ETH_Init+0xa6>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
700013e6:	f7ff fe35 	bl	70001054 <HAL_GetTick>
700013ea:	4602      	mov	r2, r0
700013ec:	68fb      	ldr	r3, [r7, #12]
700013ee:	1ad3      	subs	r3, r2, r3
700013f0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
700013f4:	d909      	bls.n	7000140a <HAL_ETH_Init+0xa6>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
700013f6:	687b      	ldr	r3, [r7, #4]
700013f8:	2204      	movs	r2, #4
700013fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
700013fe:	687b      	ldr	r3, [r7, #4]
70001400:	22e0      	movs	r2, #224	@ 0xe0
70001402:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
70001406:	2301      	movs	r3, #1
70001408:	e098      	b.n	7000153c <HAL_ETH_Init+0x1d8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
7000140a:	687b      	ldr	r3, [r7, #4]
7000140c:	681b      	ldr	r3, [r3, #0]
7000140e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001412:	681b      	ldr	r3, [r3, #0]
70001414:	f003 0301 	and.w	r3, r3, #1
70001418:	2b00      	cmp	r3, #0
7000141a:	d1e4      	bne.n	700013e6 <HAL_ETH_Init+0x82>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
7000141c:	6878      	ldr	r0, [r7, #4]
7000141e:	f000 ff1d 	bl	7000225c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
70001422:	f001 fff5 	bl	70003410 <HAL_RCC_GetHCLKFreq>
70001426:	4603      	mov	r3, r0
70001428:	4a48      	ldr	r2, [pc, #288]	@ (7000154c <HAL_ETH_Init+0x1e8>)
7000142a:	fba2 2303 	umull	r2, r3, r2, r3
7000142e:	0c9a      	lsrs	r2, r3, #18
70001430:	687b      	ldr	r3, [r7, #4]
70001432:	681b      	ldr	r3, [r3, #0]
70001434:	3a01      	subs	r2, #1
70001436:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
7000143a:	6878      	ldr	r0, [r7, #4]
7000143c:	f001 f91a 	bl	70002674 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
70001440:	687b      	ldr	r3, [r7, #4]
70001442:	681b      	ldr	r3, [r3, #0]
70001444:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001448:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
7000144c:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
70001450:	687a      	ldr	r2, [r7, #4]
70001452:	6812      	ldr	r2, [r2, #0]
70001454:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
70001458:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
7000145c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
70001460:	687b      	ldr	r3, [r7, #4]
70001462:	695b      	ldr	r3, [r3, #20]
70001464:	f003 0303 	and.w	r3, r3, #3
70001468:	2b00      	cmp	r3, #0
7000146a:	d009      	beq.n	70001480 <HAL_ETH_Init+0x11c>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
7000146c:	687b      	ldr	r3, [r7, #4]
7000146e:	2201      	movs	r2, #1
70001470:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
70001474:	687b      	ldr	r3, [r7, #4]
70001476:	22e0      	movs	r2, #224	@ 0xe0
70001478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
7000147c:	2301      	movs	r3, #1
7000147e:	e05d      	b.n	7000153c <HAL_ETH_Init+0x1d8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
70001480:	687b      	ldr	r3, [r7, #4]
70001482:	681b      	ldr	r3, [r3, #0]
70001484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001488:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
7000148c:	4b30      	ldr	r3, [pc, #192]	@ (70001550 <HAL_ETH_Init+0x1ec>)
7000148e:	4013      	ands	r3, r2
70001490:	687a      	ldr	r2, [r7, #4]
70001492:	6952      	ldr	r2, [r2, #20]
70001494:	0051      	lsls	r1, r2, #1
70001496:	687a      	ldr	r2, [r7, #4]
70001498:	6812      	ldr	r2, [r2, #0]
7000149a:	430b      	orrs	r3, r1
7000149c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
700014a0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
700014a4:	6878      	ldr	r0, [r7, #4]
700014a6:	f001 f982 	bl	700027ae <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
700014aa:	6878      	ldr	r0, [r7, #4]
700014ac:	f001 f9c8 	bl	70002840 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
700014b0:	687b      	ldr	r3, [r7, #4]
700014b2:	685b      	ldr	r3, [r3, #4]
700014b4:	3305      	adds	r3, #5
700014b6:	781b      	ldrb	r3, [r3, #0]
700014b8:	021a      	lsls	r2, r3, #8
700014ba:	687b      	ldr	r3, [r7, #4]
700014bc:	685b      	ldr	r3, [r3, #4]
700014be:	3304      	adds	r3, #4
700014c0:	781b      	ldrb	r3, [r3, #0]
700014c2:	4619      	mov	r1, r3
700014c4:	687b      	ldr	r3, [r7, #4]
700014c6:	681b      	ldr	r3, [r3, #0]
700014c8:	430a      	orrs	r2, r1
700014ca:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
700014ce:	687b      	ldr	r3, [r7, #4]
700014d0:	685b      	ldr	r3, [r3, #4]
700014d2:	3303      	adds	r3, #3
700014d4:	781b      	ldrb	r3, [r3, #0]
700014d6:	061a      	lsls	r2, r3, #24
700014d8:	687b      	ldr	r3, [r7, #4]
700014da:	685b      	ldr	r3, [r3, #4]
700014dc:	3302      	adds	r3, #2
700014de:	781b      	ldrb	r3, [r3, #0]
700014e0:	041b      	lsls	r3, r3, #16
700014e2:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
700014e4:	687b      	ldr	r3, [r7, #4]
700014e6:	685b      	ldr	r3, [r3, #4]
700014e8:	3301      	adds	r3, #1
700014ea:	781b      	ldrb	r3, [r3, #0]
700014ec:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
700014ee:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
700014f0:	687b      	ldr	r3, [r7, #4]
700014f2:	685b      	ldr	r3, [r3, #4]
700014f4:	781b      	ldrb	r3, [r3, #0]
700014f6:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
700014f8:	687b      	ldr	r3, [r7, #4]
700014fa:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
700014fc:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
700014fe:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
70001502:	687b      	ldr	r3, [r7, #4]
70001504:	681b      	ldr	r3, [r3, #0]
70001506:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
7000150a:	687b      	ldr	r3, [r7, #4]
7000150c:	681a      	ldr	r2, [r3, #0]
7000150e:	4b11      	ldr	r3, [pc, #68]	@ (70001554 <HAL_ETH_Init+0x1f0>)
70001510:	430b      	orrs	r3, r1
70001512:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
70001516:	687b      	ldr	r3, [r7, #4]
70001518:	681b      	ldr	r3, [r3, #0]
7000151a:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
7000151e:	687b      	ldr	r3, [r7, #4]
70001520:	681a      	ldr	r2, [r3, #0]
70001522:	4b0d      	ldr	r3, [pc, #52]	@ (70001558 <HAL_ETH_Init+0x1f4>)
70001524:	430b      	orrs	r3, r1
70001526:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
7000152a:	687b      	ldr	r3, [r7, #4]
7000152c:	2200      	movs	r2, #0
7000152e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
70001532:	687b      	ldr	r3, [r7, #4]
70001534:	2210      	movs	r2, #16
70001536:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
7000153a:	2300      	movs	r3, #0
}
7000153c:	4618      	mov	r0, r3
7000153e:	3710      	adds	r7, #16
70001540:	46bd      	mov	sp, r7
70001542:	bd80      	pop	{r7, pc}
70001544:	58024400 	.word	0x58024400
70001548:	58000400 	.word	0x58000400
7000154c:	431bde83 	.word	0x431bde83
70001550:	ffff8001 	.word	0xffff8001
70001554:	0c020060 	.word	0x0c020060
70001558:	0c20c000 	.word	0x0c20c000

7000155c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
7000155c:	b580      	push	{r7, lr}
7000155e:	b082      	sub	sp, #8
70001560:	af00      	add	r7, sp, #0
70001562:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
70001564:	687b      	ldr	r3, [r7, #4]
70001566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
7000156a:	2b10      	cmp	r3, #16
7000156c:	d165      	bne.n	7000163a <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
7000156e:	687b      	ldr	r3, [r7, #4]
70001570:	2223      	movs	r2, #35	@ 0x23
70001572:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
70001576:	687b      	ldr	r3, [r7, #4]
70001578:	2201      	movs	r2, #1
7000157a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
7000157c:	687b      	ldr	r3, [r7, #4]
7000157e:	2204      	movs	r2, #4
70001580:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
70001582:	6878      	ldr	r0, [r7, #4]
70001584:	f000 f9e4 	bl	70001950 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
70001588:	687b      	ldr	r3, [r7, #4]
7000158a:	681b      	ldr	r3, [r3, #0]
7000158c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001590:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
70001594:	687a      	ldr	r2, [r7, #4]
70001596:	6812      	ldr	r2, [r2, #0]
70001598:	f043 0301 	orr.w	r3, r3, #1
7000159c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
700015a0:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
700015a4:	687b      	ldr	r3, [r7, #4]
700015a6:	681b      	ldr	r3, [r3, #0]
700015a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
700015ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
700015b0:	687a      	ldr	r2, [r7, #4]
700015b2:	6812      	ldr	r2, [r2, #0]
700015b4:	f043 0301 	orr.w	r3, r3, #1
700015b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
700015bc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
700015c0:	687b      	ldr	r3, [r7, #4]
700015c2:	681b      	ldr	r3, [r3, #0]
700015c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
700015c8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
700015cc:	687a      	ldr	r2, [r7, #4]
700015ce:	6812      	ldr	r2, [r2, #0]
700015d0:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
700015d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
700015d8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
700015dc:	687b      	ldr	r3, [r7, #4]
700015de:	681b      	ldr	r3, [r3, #0]
700015e0:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
700015e4:	687b      	ldr	r3, [r7, #4]
700015e6:	681b      	ldr	r3, [r3, #0]
700015e8:	f042 0201 	orr.w	r2, r2, #1
700015ec:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
700015f0:	687b      	ldr	r3, [r7, #4]
700015f2:	681b      	ldr	r3, [r3, #0]
700015f4:	681a      	ldr	r2, [r3, #0]
700015f6:	687b      	ldr	r3, [r7, #4]
700015f8:	681b      	ldr	r3, [r3, #0]
700015fa:	f042 0202 	orr.w	r2, r2, #2
700015fe:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
70001600:	687b      	ldr	r3, [r7, #4]
70001602:	681b      	ldr	r3, [r3, #0]
70001604:	681a      	ldr	r2, [r3, #0]
70001606:	687b      	ldr	r3, [r7, #4]
70001608:	681b      	ldr	r3, [r3, #0]
7000160a:	f042 0201 	orr.w	r2, r2, #1
7000160e:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
70001610:	687b      	ldr	r3, [r7, #4]
70001612:	681b      	ldr	r3, [r3, #0]
70001614:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001618:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
7000161c:	687b      	ldr	r3, [r7, #4]
7000161e:	681a      	ldr	r2, [r3, #0]
70001620:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
70001624:	430b      	orrs	r3, r1
70001626:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
7000162a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
7000162e:	687b      	ldr	r3, [r7, #4]
70001630:	2223      	movs	r2, #35	@ 0x23
70001632:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
70001636:	2300      	movs	r3, #0
70001638:	e000      	b.n	7000163c <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
7000163a:	2301      	movs	r3, #1
  }
}
7000163c:	4618      	mov	r0, r3
7000163e:	3708      	adds	r7, #8
70001640:	46bd      	mov	sp, r7
70001642:	bd80      	pop	{r7, pc}

70001644 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
70001644:	b480      	push	{r7}
70001646:	b085      	sub	sp, #20
70001648:	af00      	add	r7, sp, #0
7000164a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
7000164c:	687b      	ldr	r3, [r7, #4]
7000164e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
70001652:	2b23      	cmp	r3, #35	@ 0x23
70001654:	d165      	bne.n	70001722 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
70001656:	687b      	ldr	r3, [r7, #4]
70001658:	2223      	movs	r2, #35	@ 0x23
7000165a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
7000165e:	687b      	ldr	r3, [r7, #4]
70001660:	681b      	ldr	r3, [r3, #0]
70001662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001666:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
7000166a:	687b      	ldr	r3, [r7, #4]
7000166c:	681a      	ldr	r2, [r3, #0]
7000166e:	4b30      	ldr	r3, [pc, #192]	@ (70001730 <HAL_ETH_Stop_IT+0xec>)
70001670:	400b      	ands	r3, r1
70001672:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
70001676:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
7000167a:	687b      	ldr	r3, [r7, #4]
7000167c:	681b      	ldr	r3, [r3, #0]
7000167e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001682:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
70001686:	687a      	ldr	r2, [r7, #4]
70001688:	6812      	ldr	r2, [r2, #0]
7000168a:	f023 0301 	bic.w	r3, r3, #1
7000168e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
70001692:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
70001696:	687b      	ldr	r3, [r7, #4]
70001698:	681b      	ldr	r3, [r3, #0]
7000169a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
7000169e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
700016a2:	687a      	ldr	r2, [r7, #4]
700016a4:	6812      	ldr	r2, [r2, #0]
700016a6:	f023 0301 	bic.w	r3, r3, #1
700016aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
700016ae:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
700016b2:	687b      	ldr	r3, [r7, #4]
700016b4:	681b      	ldr	r3, [r3, #0]
700016b6:	681a      	ldr	r2, [r3, #0]
700016b8:	687b      	ldr	r3, [r7, #4]
700016ba:	681b      	ldr	r3, [r3, #0]
700016bc:	f022 0201 	bic.w	r2, r2, #1
700016c0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
700016c2:	687b      	ldr	r3, [r7, #4]
700016c4:	681b      	ldr	r3, [r3, #0]
700016c6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
700016ca:	687b      	ldr	r3, [r7, #4]
700016cc:	681b      	ldr	r3, [r3, #0]
700016ce:	f042 0201 	orr.w	r2, r2, #1
700016d2:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
700016d6:	687b      	ldr	r3, [r7, #4]
700016d8:	681b      	ldr	r3, [r3, #0]
700016da:	681a      	ldr	r2, [r3, #0]
700016dc:	687b      	ldr	r3, [r7, #4]
700016de:	681b      	ldr	r3, [r3, #0]
700016e0:	f022 0202 	bic.w	r2, r2, #2
700016e4:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
700016e6:	2300      	movs	r3, #0
700016e8:	60fb      	str	r3, [r7, #12]
700016ea:	e00e      	b.n	7000170a <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
700016ec:	687b      	ldr	r3, [r7, #4]
700016ee:	68fa      	ldr	r2, [r7, #12]
700016f0:	3212      	adds	r2, #18
700016f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
700016f6:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
700016f8:	68bb      	ldr	r3, [r7, #8]
700016fa:	68db      	ldr	r3, [r3, #12]
700016fc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
70001700:	68bb      	ldr	r3, [r7, #8]
70001702:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
70001704:	68fb      	ldr	r3, [r7, #12]
70001706:	3301      	adds	r3, #1
70001708:	60fb      	str	r3, [r7, #12]
7000170a:	68fb      	ldr	r3, [r7, #12]
7000170c:	2b03      	cmp	r3, #3
7000170e:	d9ed      	bls.n	700016ec <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
70001710:	687b      	ldr	r3, [r7, #4]
70001712:	2200      	movs	r2, #0
70001714:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
70001716:	687b      	ldr	r3, [r7, #4]
70001718:	2210      	movs	r2, #16
7000171a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
7000171e:	2300      	movs	r3, #0
70001720:	e000      	b.n	70001724 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
70001722:	2301      	movs	r3, #1
  }
}
70001724:	4618      	mov	r0, r3
70001726:	3714      	adds	r7, #20
70001728:	46bd      	mov	sp, r7
7000172a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000172e:	4770      	bx	lr
70001730:	ffff2f3e 	.word	0xffff2f3e

70001734 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
70001734:	b580      	push	{r7, lr}
70001736:	b082      	sub	sp, #8
70001738:	af00      	add	r7, sp, #0
7000173a:	6078      	str	r0, [r7, #4]
7000173c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
7000173e:	683b      	ldr	r3, [r7, #0]
70001740:	2b00      	cmp	r3, #0
70001742:	d109      	bne.n	70001758 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
70001744:	687b      	ldr	r3, [r7, #4]
70001746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
7000174a:	f043 0201 	orr.w	r2, r3, #1
7000174e:	687b      	ldr	r3, [r7, #4]
70001750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
70001754:	2301      	movs	r3, #1
70001756:	e03a      	b.n	700017ce <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
70001758:	687b      	ldr	r3, [r7, #4]
7000175a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
7000175e:	2b23      	cmp	r3, #35	@ 0x23
70001760:	d134      	bne.n	700017cc <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
70001762:	683b      	ldr	r3, [r7, #0]
70001764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
70001766:	687b      	ldr	r3, [r7, #4]
70001768:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
7000176a:	2201      	movs	r2, #1
7000176c:	6839      	ldr	r1, [r7, #0]
7000176e:	6878      	ldr	r0, [r7, #4]
70001770:	f001 f8c4 	bl	700028fc <ETH_Prepare_Tx_Descriptors>
70001774:	4603      	mov	r3, r0
70001776:	2b00      	cmp	r3, #0
70001778:	d009      	beq.n	7000178e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
7000177a:	687b      	ldr	r3, [r7, #4]
7000177c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
70001780:	f043 0202 	orr.w	r2, r3, #2
70001784:	687b      	ldr	r3, [r7, #4]
70001786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
7000178a:	2301      	movs	r3, #1
7000178c:	e01f      	b.n	700017ce <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
7000178e:	f3bf 8f4f 	dsb	sy
}
70001792:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
70001794:	687b      	ldr	r3, [r7, #4]
70001796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70001798:	1c5a      	adds	r2, r3, #1
7000179a:	687b      	ldr	r3, [r7, #4]
7000179c:	629a      	str	r2, [r3, #40]	@ 0x28
7000179e:	687b      	ldr	r3, [r7, #4]
700017a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
700017a2:	2b03      	cmp	r3, #3
700017a4:	d904      	bls.n	700017b0 <HAL_ETH_Transmit_IT+0x7c>
700017a6:	687b      	ldr	r3, [r7, #4]
700017a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
700017aa:	1f1a      	subs	r2, r3, #4
700017ac:	687b      	ldr	r3, [r7, #4]
700017ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
700017b0:	687b      	ldr	r3, [r7, #4]
700017b2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
700017b4:	687b      	ldr	r3, [r7, #4]
700017b6:	681a      	ldr	r2, [r3, #0]
700017b8:	687b      	ldr	r3, [r7, #4]
700017ba:	3106      	adds	r1, #6
700017bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
700017c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
700017c4:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
700017c8:	2300      	movs	r3, #0
700017ca:	e000      	b.n	700017ce <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
700017cc:	2301      	movs	r3, #1
  }
}
700017ce:	4618      	mov	r0, r3
700017d0:	3708      	adds	r7, #8
700017d2:	46bd      	mov	sp, r7
700017d4:	bd80      	pop	{r7, pc}

700017d6 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
700017d6:	b580      	push	{r7, lr}
700017d8:	b088      	sub	sp, #32
700017da:	af00      	add	r7, sp, #0
700017dc:	6078      	str	r0, [r7, #4]
700017de:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
700017e0:	2300      	movs	r3, #0
700017e2:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
700017e4:	2300      	movs	r3, #0
700017e6:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
700017e8:	683b      	ldr	r3, [r7, #0]
700017ea:	2b00      	cmp	r3, #0
700017ec:	d109      	bne.n	70001802 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
700017ee:	687b      	ldr	r3, [r7, #4]
700017f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
700017f4:	f043 0201 	orr.w	r2, r3, #1
700017f8:	687b      	ldr	r3, [r7, #4]
700017fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
700017fe:	2301      	movs	r3, #1
70001800:	e0a2      	b.n	70001948 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
70001802:	687b      	ldr	r3, [r7, #4]
70001804:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
70001808:	2b23      	cmp	r3, #35	@ 0x23
7000180a:	d001      	beq.n	70001810 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
7000180c:	2301      	movs	r3, #1
7000180e:	e09b      	b.n	70001948 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
70001810:	687b      	ldr	r3, [r7, #4]
70001812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
70001814:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
70001816:	687b      	ldr	r3, [r7, #4]
70001818:	69fa      	ldr	r2, [r7, #28]
7000181a:	3212      	adds	r2, #18
7000181c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70001820:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
70001822:	687b      	ldr	r3, [r7, #4]
70001824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70001826:	f1c3 0304 	rsb	r3, r3, #4
7000182a:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
7000182c:	e064      	b.n	700018f8 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
7000182e:	69bb      	ldr	r3, [r7, #24]
70001830:	68db      	ldr	r3, [r3, #12]
70001832:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
70001836:	2b00      	cmp	r3, #0
70001838:	d007      	beq.n	7000184a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
7000183a:	69bb      	ldr	r3, [r7, #24]
7000183c:	685a      	ldr	r2, [r3, #4]
7000183e:	687b      	ldr	r3, [r7, #4]
70001840:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
70001842:	69bb      	ldr	r3, [r7, #24]
70001844:	681a      	ldr	r2, [r3, #0]
70001846:	687b      	ldr	r3, [r7, #4]
70001848:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
7000184a:	69bb      	ldr	r3, [r7, #24]
7000184c:	68db      	ldr	r3, [r3, #12]
7000184e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
70001852:	2b00      	cmp	r3, #0
70001854:	d103      	bne.n	7000185e <HAL_ETH_ReadData+0x88>
70001856:	687b      	ldr	r3, [r7, #4]
70001858:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
7000185a:	2b00      	cmp	r3, #0
7000185c:	d03a      	beq.n	700018d4 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
7000185e:	69bb      	ldr	r3, [r7, #24]
70001860:	68db      	ldr	r3, [r3, #12]
70001862:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
70001866:	2b00      	cmp	r3, #0
70001868:	d005      	beq.n	70001876 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
7000186a:	687b      	ldr	r3, [r7, #4]
7000186c:	2200      	movs	r2, #0
7000186e:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
70001870:	687b      	ldr	r3, [r7, #4]
70001872:	2200      	movs	r2, #0
70001874:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
70001876:	69bb      	ldr	r3, [r7, #24]
70001878:	68db      	ldr	r3, [r3, #12]
7000187a:	f3c3 020e 	ubfx	r2, r3, #0, #15
7000187e:	687b      	ldr	r3, [r7, #4]
70001880:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
70001882:	1ad3      	subs	r3, r2, r3
70001884:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
70001886:	69bb      	ldr	r3, [r7, #24]
70001888:	68db      	ldr	r3, [r3, #12]
7000188a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
7000188e:	2b00      	cmp	r3, #0
70001890:	d005      	beq.n	7000189e <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
70001892:	69bb      	ldr	r3, [r7, #24]
70001894:	68da      	ldr	r2, [r3, #12]
70001896:	687b      	ldr	r3, [r7, #4]
70001898:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
7000189a:	2301      	movs	r3, #1
7000189c:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
7000189e:	687b      	ldr	r3, [r7, #4]
700018a0:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
700018a4:	687b      	ldr	r3, [r7, #4]
700018a6:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
700018aa:	69bb      	ldr	r3, [r7, #24]
700018ac:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
700018ae:	461a      	mov	r2, r3
700018b0:	68bb      	ldr	r3, [r7, #8]
700018b2:	b29b      	uxth	r3, r3
700018b4:	f003 fe62 	bl	7000557c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
700018b8:	687b      	ldr	r3, [r7, #4]
700018ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
700018bc:	1c5a      	adds	r2, r3, #1
700018be:	687b      	ldr	r3, [r7, #4]
700018c0:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
700018c2:	687b      	ldr	r3, [r7, #4]
700018c4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
700018c6:	68bb      	ldr	r3, [r7, #8]
700018c8:	441a      	add	r2, r3
700018ca:	687b      	ldr	r3, [r7, #4]
700018cc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
700018ce:	69bb      	ldr	r3, [r7, #24]
700018d0:	2200      	movs	r2, #0
700018d2:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
700018d4:	69fb      	ldr	r3, [r7, #28]
700018d6:	3301      	adds	r3, #1
700018d8:	61fb      	str	r3, [r7, #28]
700018da:	69fb      	ldr	r3, [r7, #28]
700018dc:	2b03      	cmp	r3, #3
700018de:	d902      	bls.n	700018e6 <HAL_ETH_ReadData+0x110>
700018e0:	69fb      	ldr	r3, [r7, #28]
700018e2:	3b04      	subs	r3, #4
700018e4:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
700018e6:	687b      	ldr	r3, [r7, #4]
700018e8:	69fa      	ldr	r2, [r7, #28]
700018ea:	3212      	adds	r2, #18
700018ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
700018f0:	61bb      	str	r3, [r7, #24]
    desccnt++;
700018f2:	697b      	ldr	r3, [r7, #20]
700018f4:	3301      	adds	r3, #1
700018f6:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
700018f8:	69bb      	ldr	r3, [r7, #24]
700018fa:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
700018fc:	2b00      	cmp	r3, #0
700018fe:	db06      	blt.n	7000190e <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
70001900:	697a      	ldr	r2, [r7, #20]
70001902:	68fb      	ldr	r3, [r7, #12]
70001904:	429a      	cmp	r2, r3
70001906:	d202      	bcs.n	7000190e <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
70001908:	7cfb      	ldrb	r3, [r7, #19]
7000190a:	2b00      	cmp	r3, #0
7000190c:	d08f      	beq.n	7000182e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
7000190e:	687b      	ldr	r3, [r7, #4]
70001910:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
70001912:	697b      	ldr	r3, [r7, #20]
70001914:	441a      	add	r2, r3
70001916:	687b      	ldr	r3, [r7, #4]
70001918:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
7000191a:	687b      	ldr	r3, [r7, #4]
7000191c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7000191e:	2b00      	cmp	r3, #0
70001920:	d002      	beq.n	70001928 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
70001922:	6878      	ldr	r0, [r7, #4]
70001924:	f000 f814 	bl	70001950 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
70001928:	687b      	ldr	r3, [r7, #4]
7000192a:	69fa      	ldr	r2, [r7, #28]
7000192c:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
7000192e:	7cfb      	ldrb	r3, [r7, #19]
70001930:	2b01      	cmp	r3, #1
70001932:	d108      	bne.n	70001946 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
70001934:	687b      	ldr	r3, [r7, #4]
70001936:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
70001938:	683b      	ldr	r3, [r7, #0]
7000193a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
7000193c:	687b      	ldr	r3, [r7, #4]
7000193e:	2200      	movs	r2, #0
70001940:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
70001942:	2300      	movs	r3, #0
70001944:	e000      	b.n	70001948 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
70001946:	2301      	movs	r3, #1
}
70001948:	4618      	mov	r0, r3
7000194a:	3720      	adds	r7, #32
7000194c:	46bd      	mov	sp, r7
7000194e:	bd80      	pop	{r7, pc}

70001950 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
70001950:	b580      	push	{r7, lr}
70001952:	b088      	sub	sp, #32
70001954:	af00      	add	r7, sp, #0
70001956:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
70001958:	2300      	movs	r3, #0
7000195a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
7000195c:	2301      	movs	r3, #1
7000195e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
70001960:	687b      	ldr	r3, [r7, #4]
70001962:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
70001964:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
70001966:	687b      	ldr	r3, [r7, #4]
70001968:	69fa      	ldr	r2, [r7, #28]
7000196a:	3212      	adds	r2, #18
7000196c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70001970:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
70001972:	687b      	ldr	r3, [r7, #4]
70001974:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70001976:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
70001978:	e038      	b.n	700019ec <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
7000197a:	697b      	ldr	r3, [r7, #20]
7000197c:	691b      	ldr	r3, [r3, #16]
7000197e:	2b00      	cmp	r3, #0
70001980:	d112      	bne.n	700019a8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
70001982:	f107 0308 	add.w	r3, r7, #8
70001986:	4618      	mov	r0, r3
70001988:	f003 fdc8 	bl	7000551c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
7000198c:	68bb      	ldr	r3, [r7, #8]
7000198e:	2b00      	cmp	r3, #0
70001990:	d102      	bne.n	70001998 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
70001992:	2300      	movs	r3, #0
70001994:	74fb      	strb	r3, [r7, #19]
70001996:	e007      	b.n	700019a8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
70001998:	68bb      	ldr	r3, [r7, #8]
7000199a:	461a      	mov	r2, r3
7000199c:	697b      	ldr	r3, [r7, #20]
7000199e:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
700019a0:	68bb      	ldr	r3, [r7, #8]
700019a2:	461a      	mov	r2, r3
700019a4:	697b      	ldr	r3, [r7, #20]
700019a6:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
700019a8:	7cfb      	ldrb	r3, [r7, #19]
700019aa:	2b00      	cmp	r3, #0
700019ac:	d01e      	beq.n	700019ec <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
700019ae:	687b      	ldr	r3, [r7, #4]
700019b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
700019b2:	2b00      	cmp	r3, #0
700019b4:	d004      	beq.n	700019c0 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
700019b6:	697b      	ldr	r3, [r7, #20]
700019b8:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
700019bc:	60da      	str	r2, [r3, #12]
700019be:	e003      	b.n	700019c8 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
700019c0:	697b      	ldr	r3, [r7, #20]
700019c2:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
700019c6:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
700019c8:	69fb      	ldr	r3, [r7, #28]
700019ca:	3301      	adds	r3, #1
700019cc:	61fb      	str	r3, [r7, #28]
700019ce:	69fb      	ldr	r3, [r7, #28]
700019d0:	2b03      	cmp	r3, #3
700019d2:	d902      	bls.n	700019da <ETH_UpdateDescriptor+0x8a>
700019d4:	69fb      	ldr	r3, [r7, #28]
700019d6:	3b04      	subs	r3, #4
700019d8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
700019da:	687b      	ldr	r3, [r7, #4]
700019dc:	69fa      	ldr	r2, [r7, #28]
700019de:	3212      	adds	r2, #18
700019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
700019e4:	617b      	str	r3, [r7, #20]
      desccount--;
700019e6:	69bb      	ldr	r3, [r7, #24]
700019e8:	3b01      	subs	r3, #1
700019ea:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
700019ec:	69bb      	ldr	r3, [r7, #24]
700019ee:	2b00      	cmp	r3, #0
700019f0:	d002      	beq.n	700019f8 <ETH_UpdateDescriptor+0xa8>
700019f2:	7cfb      	ldrb	r3, [r7, #19]
700019f4:	2b00      	cmp	r3, #0
700019f6:	d1c0      	bne.n	7000197a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
700019f8:	687b      	ldr	r3, [r7, #4]
700019fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
700019fc:	69ba      	ldr	r2, [r7, #24]
700019fe:	429a      	cmp	r2, r3
70001a00:	d01b      	beq.n	70001a3a <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
70001a02:	69fb      	ldr	r3, [r7, #28]
70001a04:	3301      	adds	r3, #1
70001a06:	f003 0303 	and.w	r3, r3, #3
70001a0a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
70001a0c:	f3bf 8f5f 	dmb	sy
}
70001a10:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
70001a12:	687b      	ldr	r3, [r7, #4]
70001a14:	6919      	ldr	r1, [r3, #16]
70001a16:	68fa      	ldr	r2, [r7, #12]
70001a18:	4613      	mov	r3, r2
70001a1a:	005b      	lsls	r3, r3, #1
70001a1c:	4413      	add	r3, r2
70001a1e:	00db      	lsls	r3, r3, #3
70001a20:	18ca      	adds	r2, r1, r3
70001a22:	687b      	ldr	r3, [r7, #4]
70001a24:	681b      	ldr	r3, [r3, #0]
70001a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001a2a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
70001a2e:	687b      	ldr	r3, [r7, #4]
70001a30:	69fa      	ldr	r2, [r7, #28]
70001a32:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
70001a34:	687b      	ldr	r3, [r7, #4]
70001a36:	69ba      	ldr	r2, [r7, #24]
70001a38:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
70001a3a:	bf00      	nop
70001a3c:	3720      	adds	r7, #32
70001a3e:	46bd      	mov	sp, r7
70001a40:	bd80      	pop	{r7, pc}

70001a42 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
70001a42:	b580      	push	{r7, lr}
70001a44:	b086      	sub	sp, #24
70001a46:	af00      	add	r7, sp, #0
70001a48:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
70001a4a:	687b      	ldr	r3, [r7, #4]
70001a4c:	3318      	adds	r3, #24
70001a4e:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
70001a50:	68bb      	ldr	r3, [r7, #8]
70001a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70001a54:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
70001a56:	68bb      	ldr	r3, [r7, #8]
70001a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70001a5a:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
70001a5c:	2301      	movs	r3, #1
70001a5e:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
70001a60:	e047      	b.n	70001af2 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
70001a62:	2301      	movs	r3, #1
70001a64:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
70001a66:	697b      	ldr	r3, [r7, #20]
70001a68:	3b01      	subs	r3, #1
70001a6a:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
70001a6c:	68ba      	ldr	r2, [r7, #8]
70001a6e:	693b      	ldr	r3, [r7, #16]
70001a70:	3304      	adds	r3, #4
70001a72:	009b      	lsls	r3, r3, #2
70001a74:	4413      	add	r3, r2
70001a76:	685b      	ldr	r3, [r3, #4]
70001a78:	2b00      	cmp	r3, #0
70001a7a:	d10a      	bne.n	70001a92 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
70001a7c:	693b      	ldr	r3, [r7, #16]
70001a7e:	3301      	adds	r3, #1
70001a80:	613b      	str	r3, [r7, #16]
70001a82:	693b      	ldr	r3, [r7, #16]
70001a84:	2b03      	cmp	r3, #3
70001a86:	d902      	bls.n	70001a8e <HAL_ETH_ReleaseTxPacket+0x4c>
70001a88:	693b      	ldr	r3, [r7, #16]
70001a8a:	3b04      	subs	r3, #4
70001a8c:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
70001a8e:	2300      	movs	r3, #0
70001a90:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
70001a92:	7bbb      	ldrb	r3, [r7, #14]
70001a94:	2b00      	cmp	r3, #0
70001a96:	d02c      	beq.n	70001af2 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
70001a98:	687b      	ldr	r3, [r7, #4]
70001a9a:	68d9      	ldr	r1, [r3, #12]
70001a9c:	693a      	ldr	r2, [r7, #16]
70001a9e:	4613      	mov	r3, r2
70001aa0:	005b      	lsls	r3, r3, #1
70001aa2:	4413      	add	r3, r2
70001aa4:	00db      	lsls	r3, r3, #3
70001aa6:	440b      	add	r3, r1
70001aa8:	68db      	ldr	r3, [r3, #12]
70001aaa:	2b00      	cmp	r3, #0
70001aac:	db1f      	blt.n	70001aee <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
70001aae:	68ba      	ldr	r2, [r7, #8]
70001ab0:	693b      	ldr	r3, [r7, #16]
70001ab2:	3304      	adds	r3, #4
70001ab4:	009b      	lsls	r3, r3, #2
70001ab6:	4413      	add	r3, r2
70001ab8:	685b      	ldr	r3, [r3, #4]
70001aba:	4618      	mov	r0, r3
70001abc:	f003 fdc6 	bl	7000564c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
70001ac0:	68ba      	ldr	r2, [r7, #8]
70001ac2:	693b      	ldr	r3, [r7, #16]
70001ac4:	3304      	adds	r3, #4
70001ac6:	009b      	lsls	r3, r3, #2
70001ac8:	4413      	add	r3, r2
70001aca:	2200      	movs	r2, #0
70001acc:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
70001ace:	693b      	ldr	r3, [r7, #16]
70001ad0:	3301      	adds	r3, #1
70001ad2:	613b      	str	r3, [r7, #16]
70001ad4:	693b      	ldr	r3, [r7, #16]
70001ad6:	2b03      	cmp	r3, #3
70001ad8:	d902      	bls.n	70001ae0 <HAL_ETH_ReleaseTxPacket+0x9e>
70001ada:	693b      	ldr	r3, [r7, #16]
70001adc:	3b04      	subs	r3, #4
70001ade:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
70001ae0:	68bb      	ldr	r3, [r7, #8]
70001ae2:	697a      	ldr	r2, [r7, #20]
70001ae4:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
70001ae6:	68bb      	ldr	r3, [r7, #8]
70001ae8:	693a      	ldr	r2, [r7, #16]
70001aea:	62da      	str	r2, [r3, #44]	@ 0x2c
70001aec:	e001      	b.n	70001af2 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
70001aee:	2300      	movs	r3, #0
70001af0:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
70001af2:	697b      	ldr	r3, [r7, #20]
70001af4:	2b00      	cmp	r3, #0
70001af6:	d002      	beq.n	70001afe <HAL_ETH_ReleaseTxPacket+0xbc>
70001af8:	7bfb      	ldrb	r3, [r7, #15]
70001afa:	2b00      	cmp	r3, #0
70001afc:	d1b1      	bne.n	70001a62 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
70001afe:	2300      	movs	r3, #0
}
70001b00:	4618      	mov	r0, r3
70001b02:	3718      	adds	r7, #24
70001b04:	46bd      	mov	sp, r7
70001b06:	bd80      	pop	{r7, pc}

70001b08 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
70001b08:	b580      	push	{r7, lr}
70001b0a:	b086      	sub	sp, #24
70001b0c:	af00      	add	r7, sp, #0
70001b0e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
70001b10:	687b      	ldr	r3, [r7, #4]
70001b12:	681b      	ldr	r3, [r3, #0]
70001b14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
70001b18:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
70001b1a:	687b      	ldr	r3, [r7, #4]
70001b1c:	681b      	ldr	r3, [r3, #0]
70001b1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001b22:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
70001b26:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
70001b28:	687b      	ldr	r3, [r7, #4]
70001b2a:	681b      	ldr	r3, [r3, #0]
70001b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001b30:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
70001b34:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR2);
70001b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70001b3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
70001b3e:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
70001b40:	693b      	ldr	r3, [r7, #16]
70001b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
70001b46:	2b00      	cmp	r3, #0
70001b48:	d010      	beq.n	70001b6c <HAL_ETH_IRQHandler+0x64>
70001b4a:	68fb      	ldr	r3, [r7, #12]
70001b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
70001b50:	2b00      	cmp	r3, #0
70001b52:	d00b      	beq.n	70001b6c <HAL_ETH_IRQHandler+0x64>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
70001b54:	687b      	ldr	r3, [r7, #4]
70001b56:	681b      	ldr	r3, [r3, #0]
70001b58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001b5c:	461a      	mov	r2, r3
70001b5e:	f248 0340 	movw	r3, #32832	@ 0x8040
70001b62:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
70001b66:	6878      	ldr	r0, [r7, #4]
70001b68:	f003 f86c 	bl	70004c44 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
70001b6c:	693b      	ldr	r3, [r7, #16]
70001b6e:	f003 0301 	and.w	r3, r3, #1
70001b72:	2b00      	cmp	r3, #0
70001b74:	d010      	beq.n	70001b98 <HAL_ETH_IRQHandler+0x90>
70001b76:	68fb      	ldr	r3, [r7, #12]
70001b78:	f003 0301 	and.w	r3, r3, #1
70001b7c:	2b00      	cmp	r3, #0
70001b7e:	d00b      	beq.n	70001b98 <HAL_ETH_IRQHandler+0x90>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
70001b80:	687b      	ldr	r3, [r7, #4]
70001b82:	681b      	ldr	r3, [r3, #0]
70001b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001b88:	461a      	mov	r2, r3
70001b8a:	f248 0301 	movw	r3, #32769	@ 0x8001
70001b8e:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
70001b92:	6878      	ldr	r0, [r7, #4]
70001b94:	f003 f866 	bl	70004c64 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
70001b98:	693b      	ldr	r3, [r7, #16]
70001b9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
70001b9e:	2b00      	cmp	r3, #0
70001ba0:	d047      	beq.n	70001c32 <HAL_ETH_IRQHandler+0x12a>
70001ba2:	68fb      	ldr	r3, [r7, #12]
70001ba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
70001ba8:	2b00      	cmp	r3, #0
70001baa:	d042      	beq.n	70001c32 <HAL_ETH_IRQHandler+0x12a>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
70001bac:	687b      	ldr	r3, [r7, #4]
70001bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
70001bb2:	f043 0208 	orr.w	r2, r3, #8
70001bb6:	687b      	ldr	r3, [r7, #4]
70001bb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
70001bbc:	693b      	ldr	r3, [r7, #16]
70001bbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
70001bc2:	2b00      	cmp	r3, #0
70001bc4:	d01e      	beq.n	70001c04 <HAL_ETH_IRQHandler+0xfc>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
70001bc6:	687b      	ldr	r3, [r7, #4]
70001bc8:	681b      	ldr	r3, [r3, #0]
70001bca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001bce:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
70001bd2:	f241 1302 	movw	r3, #4354	@ 0x1102
70001bd6:	4013      	ands	r3, r2
70001bd8:	687a      	ldr	r2, [r7, #4]
70001bda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
70001bde:	687b      	ldr	r3, [r7, #4]
70001be0:	681b      	ldr	r3, [r3, #0]
70001be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001be6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
70001bea:	687a      	ldr	r2, [r7, #4]
70001bec:	6812      	ldr	r2, [r2, #0]
70001bee:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
70001bf2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
70001bf6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
70001bfa:	687b      	ldr	r3, [r7, #4]
70001bfc:	22e0      	movs	r2, #224	@ 0xe0
70001bfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
70001c02:	e013      	b.n	70001c2c <HAL_ETH_IRQHandler+0x124>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
70001c04:	687b      	ldr	r3, [r7, #4]
70001c06:	681b      	ldr	r3, [r3, #0]
70001c08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001c0c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
70001c10:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
70001c14:	687b      	ldr	r3, [r7, #4]
70001c16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
70001c1a:	687b      	ldr	r3, [r7, #4]
70001c1c:	681b      	ldr	r3, [r3, #0]
70001c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001c22:	461a      	mov	r2, r3
70001c24:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
70001c28:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
70001c2c:	6878      	ldr	r0, [r7, #4]
70001c2e:	f003 f829 	bl	70004c84 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
70001c32:	697b      	ldr	r3, [r7, #20]
70001c34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
70001c38:	2b00      	cmp	r3, #0
70001c3a:	d104      	bne.n	70001c46 <HAL_ETH_IRQHandler+0x13e>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
70001c3c:	697b      	ldr	r3, [r7, #20]
70001c3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
70001c42:	2b00      	cmp	r3, #0
70001c44:	d019      	beq.n	70001c7a <HAL_ETH_IRQHandler+0x172>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
70001c46:	687b      	ldr	r3, [r7, #4]
70001c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
70001c4c:	f043 0210 	orr.w	r2, r3, #16
70001c50:	687b      	ldr	r3, [r7, #4]
70001c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
70001c56:	687b      	ldr	r3, [r7, #4]
70001c58:	681b      	ldr	r3, [r3, #0]
70001c5a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
70001c5e:	687b      	ldr	r3, [r7, #4]
70001c60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
70001c64:	687b      	ldr	r3, [r7, #4]
70001c66:	22e0      	movs	r2, #224	@ 0xe0
70001c68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
70001c6c:	6878      	ldr	r0, [r7, #4]
70001c6e:	f003 f809 	bl	70004c84 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
70001c72:	687b      	ldr	r3, [r7, #4]
70001c74:	2200      	movs	r2, #0
70001c76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
70001c7a:	697b      	ldr	r3, [r7, #20]
70001c7c:	f003 0310 	and.w	r3, r3, #16
70001c80:	2b00      	cmp	r3, #0
70001c82:	d00f      	beq.n	70001ca4 <HAL_ETH_IRQHandler+0x19c>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
70001c84:	687b      	ldr	r3, [r7, #4]
70001c86:	681b      	ldr	r3, [r3, #0]
70001c88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
70001c8c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
70001c90:	687b      	ldr	r3, [r7, #4]
70001c92:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
70001c96:	6878      	ldr	r0, [r7, #4]
70001c98:	f000 f82b 	bl	70001cf2 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
70001c9c:	687b      	ldr	r3, [r7, #4]
70001c9e:	2200      	movs	r2, #0
70001ca0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
70001ca4:	697b      	ldr	r3, [r7, #20]
70001ca6:	f003 0320 	and.w	r3, r3, #32
70001caa:	2b00      	cmp	r3, #0
70001cac:	d00f      	beq.n	70001cce <HAL_ETH_IRQHandler+0x1c6>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
70001cae:	687b      	ldr	r3, [r7, #4]
70001cb0:	681b      	ldr	r3, [r3, #0]
70001cb2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
70001cb6:	f003 020f 	and.w	r2, r3, #15
70001cba:	687b      	ldr	r3, [r7, #4]
70001cbc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
70001cc0:	6878      	ldr	r0, [r7, #4]
70001cc2:	f000 f820 	bl	70001d06 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
70001cc6:	687b      	ldr	r3, [r7, #4]
70001cc8:	2200      	movs	r2, #0
70001cca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
70001cce:	68bb      	ldr	r3, [r7, #8]
70001cd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
70001cd4:	2b00      	cmp	r3, #0
70001cd6:	d008      	beq.n	70001cea <HAL_ETH_IRQHandler+0x1e2>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
70001cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70001cdc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
70001ce0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
70001ce4:	6878      	ldr	r0, [r7, #4]
70001ce6:	f000 f818 	bl	70001d1a <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
70001cea:	bf00      	nop
70001cec:	3718      	adds	r7, #24
70001cee:	46bd      	mov	sp, r7
70001cf0:	bd80      	pop	{r7, pc}

70001cf2 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
70001cf2:	b480      	push	{r7}
70001cf4:	b083      	sub	sp, #12
70001cf6:	af00      	add	r7, sp, #0
70001cf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
70001cfa:	bf00      	nop
70001cfc:	370c      	adds	r7, #12
70001cfe:	46bd      	mov	sp, r7
70001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
70001d04:	4770      	bx	lr

70001d06 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
70001d06:	b480      	push	{r7}
70001d08:	b083      	sub	sp, #12
70001d0a:	af00      	add	r7, sp, #0
70001d0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
70001d0e:	bf00      	nop
70001d10:	370c      	adds	r7, #12
70001d12:	46bd      	mov	sp, r7
70001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
70001d18:	4770      	bx	lr

70001d1a <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
70001d1a:	b480      	push	{r7}
70001d1c:	b083      	sub	sp, #12
70001d1e:	af00      	add	r7, sp, #0
70001d20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
70001d22:	bf00      	nop
70001d24:	370c      	adds	r7, #12
70001d26:	46bd      	mov	sp, r7
70001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
70001d2c:	4770      	bx	lr

70001d2e <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
70001d2e:	b580      	push	{r7, lr}
70001d30:	b086      	sub	sp, #24
70001d32:	af00      	add	r7, sp, #0
70001d34:	60f8      	str	r0, [r7, #12]
70001d36:	60b9      	str	r1, [r7, #8]
70001d38:	607a      	str	r2, [r7, #4]
70001d3a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
70001d3c:	68fb      	ldr	r3, [r7, #12]
70001d3e:	681b      	ldr	r3, [r3, #0]
70001d40:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
70001d44:	f003 0301 	and.w	r3, r3, #1
70001d48:	2b00      	cmp	r3, #0
70001d4a:	d001      	beq.n	70001d50 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
70001d4c:	2301      	movs	r3, #1
70001d4e:	e03e      	b.n	70001dce <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
70001d50:	68fb      	ldr	r3, [r7, #12]
70001d52:	681b      	ldr	r3, [r3, #0]
70001d54:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
70001d58:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
70001d5a:	697b      	ldr	r3, [r7, #20]
70001d5c:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
70001d60:	68bb      	ldr	r3, [r7, #8]
70001d62:	055b      	lsls	r3, r3, #21
70001d64:	4313      	orrs	r3, r2
70001d66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
70001d68:	697b      	ldr	r3, [r7, #20]
70001d6a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
70001d6e:	687b      	ldr	r3, [r7, #4]
70001d70:	041b      	lsls	r3, r3, #16
70001d72:	4313      	orrs	r3, r2
70001d74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
70001d76:	697b      	ldr	r3, [r7, #20]
70001d78:	f043 030c 	orr.w	r3, r3, #12
70001d7c:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
70001d7e:	697b      	ldr	r3, [r7, #20]
70001d80:	f043 0301 	orr.w	r3, r3, #1
70001d84:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
70001d86:	68fb      	ldr	r3, [r7, #12]
70001d88:	681b      	ldr	r3, [r3, #0]
70001d8a:	697a      	ldr	r2, [r7, #20]
70001d8c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
70001d90:	f7ff f960 	bl	70001054 <HAL_GetTick>
70001d94:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
70001d96:	e009      	b.n	70001dac <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
70001d98:	f7ff f95c 	bl	70001054 <HAL_GetTick>
70001d9c:	4602      	mov	r2, r0
70001d9e:	693b      	ldr	r3, [r7, #16]
70001da0:	1ad3      	subs	r3, r2, r3
70001da2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
70001da6:	d901      	bls.n	70001dac <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
70001da8:	2301      	movs	r3, #1
70001daa:	e010      	b.n	70001dce <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
70001dac:	68fb      	ldr	r3, [r7, #12]
70001dae:	681b      	ldr	r3, [r3, #0]
70001db0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
70001db4:	f003 0301 	and.w	r3, r3, #1
70001db8:	2b00      	cmp	r3, #0
70001dba:	d1ed      	bne.n	70001d98 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
70001dbc:	68fb      	ldr	r3, [r7, #12]
70001dbe:	681b      	ldr	r3, [r3, #0]
70001dc0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
70001dc4:	b29b      	uxth	r3, r3
70001dc6:	461a      	mov	r2, r3
70001dc8:	683b      	ldr	r3, [r7, #0]
70001dca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
70001dcc:	2300      	movs	r3, #0
}
70001dce:	4618      	mov	r0, r3
70001dd0:	3718      	adds	r7, #24
70001dd2:	46bd      	mov	sp, r7
70001dd4:	bd80      	pop	{r7, pc}
	...

70001dd8 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
70001dd8:	b580      	push	{r7, lr}
70001dda:	b086      	sub	sp, #24
70001ddc:	af00      	add	r7, sp, #0
70001dde:	60f8      	str	r0, [r7, #12]
70001de0:	60b9      	str	r1, [r7, #8]
70001de2:	607a      	str	r2, [r7, #4]
70001de4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
70001de6:	68fb      	ldr	r3, [r7, #12]
70001de8:	681b      	ldr	r3, [r3, #0]
70001dea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
70001dee:	f003 0301 	and.w	r3, r3, #1
70001df2:	2b00      	cmp	r3, #0
70001df4:	d001      	beq.n	70001dfa <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
70001df6:	2301      	movs	r3, #1
70001df8:	e03c      	b.n	70001e74 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
70001dfa:	68fb      	ldr	r3, [r7, #12]
70001dfc:	681b      	ldr	r3, [r3, #0]
70001dfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
70001e02:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
70001e04:	697b      	ldr	r3, [r7, #20]
70001e06:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
70001e0a:	68bb      	ldr	r3, [r7, #8]
70001e0c:	055b      	lsls	r3, r3, #21
70001e0e:	4313      	orrs	r3, r2
70001e10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
70001e12:	697b      	ldr	r3, [r7, #20]
70001e14:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
70001e18:	687b      	ldr	r3, [r7, #4]
70001e1a:	041b      	lsls	r3, r3, #16
70001e1c:	4313      	orrs	r3, r2
70001e1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
70001e20:	697b      	ldr	r3, [r7, #20]
70001e22:	f023 030c 	bic.w	r3, r3, #12
70001e26:	f043 0304 	orr.w	r3, r3, #4
70001e2a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
70001e2c:	697b      	ldr	r3, [r7, #20]
70001e2e:	f043 0301 	orr.w	r3, r3, #1
70001e32:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
70001e34:	683b      	ldr	r3, [r7, #0]
70001e36:	b29a      	uxth	r2, r3
70001e38:	4b10      	ldr	r3, [pc, #64]	@ (70001e7c <HAL_ETH_WritePHYRegister+0xa4>)
70001e3a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
70001e3e:	4a0f      	ldr	r2, [pc, #60]	@ (70001e7c <HAL_ETH_WritePHYRegister+0xa4>)
70001e40:	697b      	ldr	r3, [r7, #20]
70001e42:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
70001e46:	f7ff f905 	bl	70001054 <HAL_GetTick>
70001e4a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
70001e4c:	e009      	b.n	70001e62 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
70001e4e:	f7ff f901 	bl	70001054 <HAL_GetTick>
70001e52:	4602      	mov	r2, r0
70001e54:	693b      	ldr	r3, [r7, #16]
70001e56:	1ad3      	subs	r3, r2, r3
70001e58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
70001e5c:	d901      	bls.n	70001e62 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
70001e5e:	2301      	movs	r3, #1
70001e60:	e008      	b.n	70001e74 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
70001e62:	68fb      	ldr	r3, [r7, #12]
70001e64:	681b      	ldr	r3, [r3, #0]
70001e66:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
70001e6a:	f003 0301 	and.w	r3, r3, #1
70001e6e:	2b00      	cmp	r3, #0
70001e70:	d1ed      	bne.n	70001e4e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
70001e72:	2300      	movs	r3, #0
}
70001e74:	4618      	mov	r0, r3
70001e76:	3718      	adds	r7, #24
70001e78:	46bd      	mov	sp, r7
70001e7a:	bd80      	pop	{r7, pc}
70001e7c:	40028000 	.word	0x40028000

70001e80 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
70001e80:	b480      	push	{r7}
70001e82:	b083      	sub	sp, #12
70001e84:	af00      	add	r7, sp, #0
70001e86:	6078      	str	r0, [r7, #4]
70001e88:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
70001e8a:	683b      	ldr	r3, [r7, #0]
70001e8c:	2b00      	cmp	r3, #0
70001e8e:	d101      	bne.n	70001e94 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
70001e90:	2301      	movs	r3, #1
70001e92:	e1c3      	b.n	7000221c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
70001e94:	687b      	ldr	r3, [r7, #4]
70001e96:	681b      	ldr	r3, [r3, #0]
70001e98:	681b      	ldr	r3, [r3, #0]
70001e9a:	f003 020c 	and.w	r2, r3, #12
70001e9e:	683b      	ldr	r3, [r7, #0]
70001ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
70001ea2:	687b      	ldr	r3, [r7, #4]
70001ea4:	681b      	ldr	r3, [r3, #0]
70001ea6:	681b      	ldr	r3, [r3, #0]
70001ea8:	f003 0310 	and.w	r3, r3, #16
70001eac:	2b00      	cmp	r3, #0
70001eae:	bf14      	ite	ne
70001eb0:	2301      	movne	r3, #1
70001eb2:	2300      	moveq	r3, #0
70001eb4:	b2db      	uxtb	r3, r3
70001eb6:	461a      	mov	r2, r3
70001eb8:	683b      	ldr	r3, [r7, #0]
70001eba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
70001ebe:	687b      	ldr	r3, [r7, #4]
70001ec0:	681b      	ldr	r3, [r3, #0]
70001ec2:	681b      	ldr	r3, [r3, #0]
70001ec4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
70001ec8:	683b      	ldr	r3, [r7, #0]
70001eca:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
70001ecc:	687b      	ldr	r3, [r7, #4]
70001ece:	681b      	ldr	r3, [r3, #0]
70001ed0:	681b      	ldr	r3, [r3, #0]
70001ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
70001ed6:	2b00      	cmp	r3, #0
70001ed8:	bf0c      	ite	eq
70001eda:	2301      	moveq	r3, #1
70001edc:	2300      	movne	r3, #0
70001ede:	b2db      	uxtb	r3, r3
70001ee0:	461a      	mov	r2, r3
70001ee2:	683b      	ldr	r3, [r7, #0]
70001ee4:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
70001ee8:	687b      	ldr	r3, [r7, #4]
70001eea:	681b      	ldr	r3, [r3, #0]
70001eec:	681b      	ldr	r3, [r3, #0]
70001eee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
70001ef2:	2b00      	cmp	r3, #0
70001ef4:	bf14      	ite	ne
70001ef6:	2301      	movne	r3, #1
70001ef8:	2300      	moveq	r3, #0
70001efa:	b2db      	uxtb	r3, r3
70001efc:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
70001efe:	683b      	ldr	r3, [r7, #0]
70001f00:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
70001f02:	687b      	ldr	r3, [r7, #4]
70001f04:	681b      	ldr	r3, [r3, #0]
70001f06:	681b      	ldr	r3, [r3, #0]
70001f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
70001f0c:	2b00      	cmp	r3, #0
70001f0e:	bf0c      	ite	eq
70001f10:	2301      	moveq	r3, #1
70001f12:	2300      	movne	r3, #0
70001f14:	b2db      	uxtb	r3, r3
70001f16:	461a      	mov	r2, r3
70001f18:	683b      	ldr	r3, [r7, #0]
70001f1a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
70001f1c:	687b      	ldr	r3, [r7, #4]
70001f1e:	681b      	ldr	r3, [r3, #0]
70001f20:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
70001f22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
70001f26:	2b00      	cmp	r3, #0
70001f28:	bf14      	ite	ne
70001f2a:	2301      	movne	r3, #1
70001f2c:	2300      	moveq	r3, #0
70001f2e:	b2db      	uxtb	r3, r3
70001f30:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
70001f32:	683b      	ldr	r3, [r7, #0]
70001f34:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
70001f36:	687b      	ldr	r3, [r7, #4]
70001f38:	681b      	ldr	r3, [r3, #0]
70001f3a:	681b      	ldr	r3, [r3, #0]
70001f3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
70001f40:	2b00      	cmp	r3, #0
70001f42:	bf14      	ite	ne
70001f44:	2301      	movne	r3, #1
70001f46:	2300      	moveq	r3, #0
70001f48:	b2db      	uxtb	r3, r3
70001f4a:	461a      	mov	r2, r3
70001f4c:	683b      	ldr	r3, [r7, #0]
70001f4e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
70001f50:	687b      	ldr	r3, [r7, #4]
70001f52:	681b      	ldr	r3, [r3, #0]
70001f54:	681b      	ldr	r3, [r3, #0]
70001f56:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
70001f5a:	683b      	ldr	r3, [r7, #0]
70001f5c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
70001f5e:	687b      	ldr	r3, [r7, #4]
70001f60:	681b      	ldr	r3, [r3, #0]
70001f62:	681b      	ldr	r3, [r3, #0]
70001f64:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
70001f68:	683b      	ldr	r3, [r7, #0]
70001f6a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
70001f6c:	687b      	ldr	r3, [r7, #4]
70001f6e:	681b      	ldr	r3, [r3, #0]
70001f70:	681b      	ldr	r3, [r3, #0]
70001f72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
70001f76:	2b00      	cmp	r3, #0
70001f78:	bf14      	ite	ne
70001f7a:	2301      	movne	r3, #1
70001f7c:	2300      	moveq	r3, #0
70001f7e:	b2db      	uxtb	r3, r3
70001f80:	461a      	mov	r2, r3
70001f82:	683b      	ldr	r3, [r7, #0]
70001f84:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
70001f86:	687b      	ldr	r3, [r7, #4]
70001f88:	681b      	ldr	r3, [r3, #0]
70001f8a:	681b      	ldr	r3, [r3, #0]
70001f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
70001f90:	2b00      	cmp	r3, #0
70001f92:	bf0c      	ite	eq
70001f94:	2301      	moveq	r3, #1
70001f96:	2300      	movne	r3, #0
70001f98:	b2db      	uxtb	r3, r3
70001f9a:	461a      	mov	r2, r3
70001f9c:	683b      	ldr	r3, [r7, #0]
70001f9e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
70001fa0:	687b      	ldr	r3, [r7, #4]
70001fa2:	681b      	ldr	r3, [r3, #0]
70001fa4:	681b      	ldr	r3, [r3, #0]
70001fa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
70001faa:	2b00      	cmp	r3, #0
70001fac:	bf0c      	ite	eq
70001fae:	2301      	moveq	r3, #1
70001fb0:	2300      	movne	r3, #0
70001fb2:	b2db      	uxtb	r3, r3
70001fb4:	461a      	mov	r2, r3
70001fb6:	683b      	ldr	r3, [r7, #0]
70001fb8:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
70001fba:	687b      	ldr	r3, [r7, #4]
70001fbc:	681b      	ldr	r3, [r3, #0]
70001fbe:	681b      	ldr	r3, [r3, #0]
70001fc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
70001fc4:	2b00      	cmp	r3, #0
70001fc6:	bf14      	ite	ne
70001fc8:	2301      	movne	r3, #1
70001fca:	2300      	moveq	r3, #0
70001fcc:	b2db      	uxtb	r3, r3
70001fce:	461a      	mov	r2, r3
70001fd0:	683b      	ldr	r3, [r7, #0]
70001fd2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
70001fd4:	687b      	ldr	r3, [r7, #4]
70001fd6:	681b      	ldr	r3, [r3, #0]
70001fd8:	681b      	ldr	r3, [r3, #0]
70001fda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
70001fde:	2b00      	cmp	r3, #0
70001fe0:	bf14      	ite	ne
70001fe2:	2301      	movne	r3, #1
70001fe4:	2300      	moveq	r3, #0
70001fe6:	b2db      	uxtb	r3, r3
70001fe8:	461a      	mov	r2, r3
70001fea:	683b      	ldr	r3, [r7, #0]
70001fec:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
70001fee:	687b      	ldr	r3, [r7, #4]
70001ff0:	681b      	ldr	r3, [r3, #0]
70001ff2:	681b      	ldr	r3, [r3, #0]
70001ff4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
70001ff8:	2b00      	cmp	r3, #0
70001ffa:	bf14      	ite	ne
70001ffc:	2301      	movne	r3, #1
70001ffe:	2300      	moveq	r3, #0
70002000:	b2db      	uxtb	r3, r3
70002002:	461a      	mov	r2, r3
70002004:	683b      	ldr	r3, [r7, #0]
70002006:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
70002008:	687b      	ldr	r3, [r7, #4]
7000200a:	681b      	ldr	r3, [r3, #0]
7000200c:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
7000200e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
70002012:	2b00      	cmp	r3, #0
70002014:	bf14      	ite	ne
70002016:	2301      	movne	r3, #1
70002018:	2300      	moveq	r3, #0
7000201a:	b2db      	uxtb	r3, r3
7000201c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
7000201e:	683b      	ldr	r3, [r7, #0]
70002020:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
70002022:	687b      	ldr	r3, [r7, #4]
70002024:	681b      	ldr	r3, [r3, #0]
70002026:	681b      	ldr	r3, [r3, #0]
70002028:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
7000202c:	683b      	ldr	r3, [r7, #0]
7000202e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
70002030:	687b      	ldr	r3, [r7, #4]
70002032:	681b      	ldr	r3, [r3, #0]
70002034:	681b      	ldr	r3, [r3, #0]
70002036:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
7000203a:	2b00      	cmp	r3, #0
7000203c:	bf14      	ite	ne
7000203e:	2301      	movne	r3, #1
70002040:	2300      	moveq	r3, #0
70002042:	b2db      	uxtb	r3, r3
70002044:	461a      	mov	r2, r3
70002046:	683b      	ldr	r3, [r7, #0]
70002048:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
7000204a:	687b      	ldr	r3, [r7, #4]
7000204c:	681b      	ldr	r3, [r3, #0]
7000204e:	681b      	ldr	r3, [r3, #0]
70002050:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
70002054:	683b      	ldr	r3, [r7, #0]
70002056:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
70002058:	687b      	ldr	r3, [r7, #4]
7000205a:	681b      	ldr	r3, [r3, #0]
7000205c:	685b      	ldr	r3, [r3, #4]
7000205e:	f3c3 020d 	ubfx	r2, r3, #0, #14
70002062:	683b      	ldr	r3, [r7, #0]
70002064:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
70002066:	687b      	ldr	r3, [r7, #4]
70002068:	681b      	ldr	r3, [r3, #0]
7000206a:	685b      	ldr	r3, [r3, #4]
7000206c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
70002070:	2b00      	cmp	r3, #0
70002072:	bf0c      	ite	eq
70002074:	2301      	moveq	r3, #1
70002076:	2300      	movne	r3, #0
70002078:	b2db      	uxtb	r3, r3
7000207a:	461a      	mov	r2, r3
7000207c:	683b      	ldr	r3, [r7, #0]
7000207e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
70002082:	687b      	ldr	r3, [r7, #4]
70002084:	681b      	ldr	r3, [r3, #0]
70002086:	685b      	ldr	r3, [r3, #4]
70002088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
7000208c:	2b00      	cmp	r3, #0
7000208e:	bf14      	ite	ne
70002090:	2301      	movne	r3, #1
70002092:	2300      	moveq	r3, #0
70002094:	b2db      	uxtb	r3, r3
70002096:	461a      	mov	r2, r3
70002098:	683b      	ldr	r3, [r7, #0]
7000209a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
7000209e:	687b      	ldr	r3, [r7, #4]
700020a0:	681b      	ldr	r3, [r3, #0]
700020a2:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
700020a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
700020a8:	2b00      	cmp	r3, #0
700020aa:	bf14      	ite	ne
700020ac:	2301      	movne	r3, #1
700020ae:	2300      	moveq	r3, #0
700020b0:	b2db      	uxtb	r3, r3
700020b2:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
700020b4:	683b      	ldr	r3, [r7, #0]
700020b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
700020ba:	687b      	ldr	r3, [r7, #4]
700020bc:	681b      	ldr	r3, [r3, #0]
700020be:	685b      	ldr	r3, [r3, #4]
700020c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
700020c4:	2b00      	cmp	r3, #0
700020c6:	bf14      	ite	ne
700020c8:	2301      	movne	r3, #1
700020ca:	2300      	moveq	r3, #0
700020cc:	b2db      	uxtb	r3, r3
700020ce:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
700020d0:	683b      	ldr	r3, [r7, #0]
700020d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
700020d6:	687b      	ldr	r3, [r7, #4]
700020d8:	681b      	ldr	r3, [r3, #0]
700020da:	685b      	ldr	r3, [r3, #4]
700020dc:	0e5b      	lsrs	r3, r3, #25
700020de:	f003 021f 	and.w	r2, r3, #31
700020e2:	683b      	ldr	r3, [r7, #0]
700020e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
700020e6:	687b      	ldr	r3, [r7, #4]
700020e8:	681b      	ldr	r3, [r3, #0]
700020ea:	68db      	ldr	r3, [r3, #12]
700020ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
700020f0:	2b00      	cmp	r3, #0
700020f2:	bf14      	ite	ne
700020f4:	2301      	movne	r3, #1
700020f6:	2300      	moveq	r3, #0
700020f8:	b2db      	uxtb	r3, r3
700020fa:	461a      	mov	r2, r3
700020fc:	683b      	ldr	r3, [r7, #0]
700020fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
70002102:	687b      	ldr	r3, [r7, #4]
70002104:	681b      	ldr	r3, [r3, #0]
70002106:	68db      	ldr	r3, [r3, #12]
70002108:	f003 020f 	and.w	r2, r3, #15
7000210c:	683b      	ldr	r3, [r7, #0]
7000210e:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
70002110:	687b      	ldr	r3, [r7, #4]
70002112:	681b      	ldr	r3, [r3, #0]
70002114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70002116:	f003 0302 	and.w	r3, r3, #2
7000211a:	2b00      	cmp	r3, #0
7000211c:	bf14      	ite	ne
7000211e:	2301      	movne	r3, #1
70002120:	2300      	moveq	r3, #0
70002122:	b2db      	uxtb	r3, r3
70002124:	461a      	mov	r2, r3
70002126:	683b      	ldr	r3, [r7, #0]
70002128:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
7000212c:	687b      	ldr	r3, [r7, #4]
7000212e:	681b      	ldr	r3, [r3, #0]
70002130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70002132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
70002136:	2b00      	cmp	r3, #0
70002138:	bf0c      	ite	eq
7000213a:	2301      	moveq	r3, #1
7000213c:	2300      	movne	r3, #0
7000213e:	b2db      	uxtb	r3, r3
70002140:	461a      	mov	r2, r3
70002142:	683b      	ldr	r3, [r7, #0]
70002144:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
70002148:	687b      	ldr	r3, [r7, #4]
7000214a:	681b      	ldr	r3, [r3, #0]
7000214c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000214e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
70002152:	683b      	ldr	r3, [r7, #0]
70002154:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
70002156:	687b      	ldr	r3, [r7, #4]
70002158:	681b      	ldr	r3, [r3, #0]
7000215a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000215c:	0c1b      	lsrs	r3, r3, #16
7000215e:	b29a      	uxth	r2, r3
70002160:	683b      	ldr	r3, [r7, #0]
70002162:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
70002164:	687b      	ldr	r3, [r7, #4]
70002166:	681b      	ldr	r3, [r3, #0]
70002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
7000216c:	f003 0301 	and.w	r3, r3, #1
70002170:	2b00      	cmp	r3, #0
70002172:	bf14      	ite	ne
70002174:	2301      	movne	r3, #1
70002176:	2300      	moveq	r3, #0
70002178:	b2db      	uxtb	r3, r3
7000217a:	461a      	mov	r2, r3
7000217c:	683b      	ldr	r3, [r7, #0]
7000217e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
70002182:	687b      	ldr	r3, [r7, #4]
70002184:	681b      	ldr	r3, [r3, #0]
70002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
7000218a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
7000218e:	2b00      	cmp	r3, #0
70002190:	bf14      	ite	ne
70002192:	2301      	movne	r3, #1
70002194:	2300      	moveq	r3, #0
70002196:	b2db      	uxtb	r3, r3
70002198:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
7000219a:	683b      	ldr	r3, [r7, #0]
7000219c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
700021a0:	687b      	ldr	r3, [r7, #4]
700021a2:	681b      	ldr	r3, [r3, #0]
700021a4:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
700021a8:	f003 0272 	and.w	r2, r3, #114	@ 0x72
700021ac:	683b      	ldr	r3, [r7, #0]
700021ae:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
700021b0:	687b      	ldr	r3, [r7, #4]
700021b2:	681b      	ldr	r3, [r3, #0]
700021b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
700021b8:	f003 0223 	and.w	r2, r3, #35	@ 0x23
700021bc:	683b      	ldr	r3, [r7, #0]
700021be:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
700021c0:	687b      	ldr	r3, [r7, #4]
700021c2:	681b      	ldr	r3, [r3, #0]
700021c4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
700021c8:	f003 0308 	and.w	r3, r3, #8
700021cc:	2b00      	cmp	r3, #0
700021ce:	bf14      	ite	ne
700021d0:	2301      	movne	r3, #1
700021d2:	2300      	moveq	r3, #0
700021d4:	b2db      	uxtb	r3, r3
700021d6:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
700021d8:	683b      	ldr	r3, [r7, #0]
700021da:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
700021de:	687b      	ldr	r3, [r7, #4]
700021e0:	681b      	ldr	r3, [r3, #0]
700021e2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
700021e6:	f003 0310 	and.w	r3, r3, #16
700021ea:	2b00      	cmp	r3, #0
700021ec:	bf14      	ite	ne
700021ee:	2301      	movne	r3, #1
700021f0:	2300      	moveq	r3, #0
700021f2:	b2db      	uxtb	r3, r3
700021f4:	461a      	mov	r2, r3
700021f6:	683b      	ldr	r3, [r7, #0]
700021f8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
700021fc:	687b      	ldr	r3, [r7, #4]
700021fe:	681b      	ldr	r3, [r3, #0]
70002200:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
70002204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
70002208:	2b00      	cmp	r3, #0
7000220a:	bf0c      	ite	eq
7000220c:	2301      	moveq	r3, #1
7000220e:	2300      	movne	r3, #0
70002210:	b2db      	uxtb	r3, r3
70002212:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
70002214:	683b      	ldr	r3, [r7, #0]
70002216:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
7000221a:	2300      	movs	r3, #0
}
7000221c:	4618      	mov	r0, r3
7000221e:	370c      	adds	r7, #12
70002220:	46bd      	mov	sp, r7
70002222:	f85d 7b04 	ldr.w	r7, [sp], #4
70002226:	4770      	bx	lr

70002228 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
70002228:	b580      	push	{r7, lr}
7000222a:	b082      	sub	sp, #8
7000222c:	af00      	add	r7, sp, #0
7000222e:	6078      	str	r0, [r7, #4]
70002230:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
70002232:	683b      	ldr	r3, [r7, #0]
70002234:	2b00      	cmp	r3, #0
70002236:	d101      	bne.n	7000223c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
70002238:	2301      	movs	r3, #1
7000223a:	e00b      	b.n	70002254 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
7000223c:	687b      	ldr	r3, [r7, #4]
7000223e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
70002242:	2b10      	cmp	r3, #16
70002244:	d105      	bne.n	70002252 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
70002246:	6839      	ldr	r1, [r7, #0]
70002248:	6878      	ldr	r0, [r7, #4]
7000224a:	f000 f871 	bl	70002330 <ETH_SetMACConfig>

    return HAL_OK;
7000224e:	2300      	movs	r3, #0
70002250:	e000      	b.n	70002254 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
70002252:	2301      	movs	r3, #1
  }
}
70002254:	4618      	mov	r0, r3
70002256:	3708      	adds	r7, #8
70002258:	46bd      	mov	sp, r7
7000225a:	bd80      	pop	{r7, pc}

7000225c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
7000225c:	b580      	push	{r7, lr}
7000225e:	b084      	sub	sp, #16
70002260:	af00      	add	r7, sp, #0
70002262:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
70002264:	687b      	ldr	r3, [r7, #4]
70002266:	681b      	ldr	r3, [r3, #0]
70002268:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
7000226c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
7000226e:	68fb      	ldr	r3, [r7, #12]
70002270:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
70002274:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
70002276:	f001 f8cb 	bl	70003410 <HAL_RCC_GetHCLKFreq>
7000227a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
7000227c:	68bb      	ldr	r3, [r7, #8]
7000227e:	4a1a      	ldr	r2, [pc, #104]	@ (700022e8 <HAL_ETH_SetMDIOClockRange+0x8c>)
70002280:	4293      	cmp	r3, r2
70002282:	d804      	bhi.n	7000228e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
70002284:	68fb      	ldr	r3, [r7, #12]
70002286:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
7000228a:	60fb      	str	r3, [r7, #12]
7000228c:	e022      	b.n	700022d4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
7000228e:	68bb      	ldr	r3, [r7, #8]
70002290:	4a16      	ldr	r2, [pc, #88]	@ (700022ec <HAL_ETH_SetMDIOClockRange+0x90>)
70002292:	4293      	cmp	r3, r2
70002294:	d204      	bcs.n	700022a0 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
70002296:	68fb      	ldr	r3, [r7, #12]
70002298:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
7000229c:	60fb      	str	r3, [r7, #12]
7000229e:	e019      	b.n	700022d4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
700022a0:	68bb      	ldr	r3, [r7, #8]
700022a2:	4a13      	ldr	r2, [pc, #76]	@ (700022f0 <HAL_ETH_SetMDIOClockRange+0x94>)
700022a4:	4293      	cmp	r3, r2
700022a6:	d915      	bls.n	700022d4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
700022a8:	68bb      	ldr	r3, [r7, #8]
700022aa:	4a12      	ldr	r2, [pc, #72]	@ (700022f4 <HAL_ETH_SetMDIOClockRange+0x98>)
700022ac:	4293      	cmp	r3, r2
700022ae:	d804      	bhi.n	700022ba <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
700022b0:	68fb      	ldr	r3, [r7, #12]
700022b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
700022b6:	60fb      	str	r3, [r7, #12]
700022b8:	e00c      	b.n	700022d4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
700022ba:	68bb      	ldr	r3, [r7, #8]
700022bc:	4a0e      	ldr	r2, [pc, #56]	@ (700022f8 <HAL_ETH_SetMDIOClockRange+0x9c>)
700022be:	4293      	cmp	r3, r2
700022c0:	d804      	bhi.n	700022cc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
700022c2:	68fb      	ldr	r3, [r7, #12]
700022c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
700022c8:	60fb      	str	r3, [r7, #12]
700022ca:	e003      	b.n	700022d4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
700022cc:	68fb      	ldr	r3, [r7, #12]
700022ce:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
700022d2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
700022d4:	687b      	ldr	r3, [r7, #4]
700022d6:	681b      	ldr	r3, [r3, #0]
700022d8:	68fa      	ldr	r2, [r7, #12]
700022da:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
700022de:	bf00      	nop
700022e0:	3710      	adds	r7, #16
700022e2:	46bd      	mov	sp, r7
700022e4:	bd80      	pop	{r7, pc}
700022e6:	bf00      	nop
700022e8:	02160ebf 	.word	0x02160ebf
700022ec:	03938700 	.word	0x03938700
700022f0:	05f5e0ff 	.word	0x05f5e0ff
700022f4:	08f0d17f 	.word	0x08f0d17f
700022f8:	0ee6b27f 	.word	0x0ee6b27f

700022fc <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
700022fc:	b480      	push	{r7}
700022fe:	b083      	sub	sp, #12
70002300:	af00      	add	r7, sp, #0
70002302:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
70002304:	687b      	ldr	r3, [r7, #4]
70002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
7000230a:	4618      	mov	r0, r3
7000230c:	370c      	adds	r7, #12
7000230e:	46bd      	mov	sp, r7
70002310:	f85d 7b04 	ldr.w	r7, [sp], #4
70002314:	4770      	bx	lr

70002316 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
70002316:	b480      	push	{r7}
70002318:	b083      	sub	sp, #12
7000231a:	af00      	add	r7, sp, #0
7000231c:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
7000231e:	687b      	ldr	r3, [r7, #4]
70002320:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
70002324:	4618      	mov	r0, r3
70002326:	370c      	adds	r7, #12
70002328:	46bd      	mov	sp, r7
7000232a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000232e:	4770      	bx	lr

70002330 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
70002330:	b480      	push	{r7}
70002332:	b085      	sub	sp, #20
70002334:	af00      	add	r7, sp, #0
70002336:	6078      	str	r0, [r7, #4]
70002338:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
7000233a:	683b      	ldr	r3, [r7, #0]
7000233c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
7000233e:	683b      	ldr	r3, [r7, #0]
70002340:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
70002342:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
70002344:	683b      	ldr	r3, [r7, #0]
70002346:	791b      	ldrb	r3, [r3, #4]
70002348:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
7000234a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
7000234c:	683b      	ldr	r3, [r7, #0]
7000234e:	7b1b      	ldrb	r3, [r3, #12]
70002350:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
70002352:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
70002354:	683b      	ldr	r3, [r7, #0]
70002356:	7b5b      	ldrb	r3, [r3, #13]
70002358:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
7000235a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
7000235c:	683b      	ldr	r3, [r7, #0]
7000235e:	7b9b      	ldrb	r3, [r3, #14]
70002360:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
70002362:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
70002364:	683b      	ldr	r3, [r7, #0]
70002366:	7bdb      	ldrb	r3, [r3, #15]
70002368:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
7000236a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
7000236c:	683a      	ldr	r2, [r7, #0]
7000236e:	7c12      	ldrb	r2, [r2, #16]
70002370:	2a00      	cmp	r2, #0
70002372:	d102      	bne.n	7000237a <ETH_SetMACConfig+0x4a>
70002374:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
70002378:	e000      	b.n	7000237c <ETH_SetMACConfig+0x4c>
7000237a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
7000237c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
7000237e:	683a      	ldr	r2, [r7, #0]
70002380:	7c52      	ldrb	r2, [r2, #17]
70002382:	2a00      	cmp	r2, #0
70002384:	d102      	bne.n	7000238c <ETH_SetMACConfig+0x5c>
70002386:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
7000238a:	e000      	b.n	7000238e <ETH_SetMACConfig+0x5e>
7000238c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
7000238e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
70002390:	683b      	ldr	r3, [r7, #0]
70002392:	7c9b      	ldrb	r3, [r3, #18]
70002394:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
70002396:	431a      	orrs	r2, r3
               macconf->Speed |
70002398:	683b      	ldr	r3, [r7, #0]
7000239a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
7000239c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
7000239e:	683b      	ldr	r3, [r7, #0]
700023a0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
700023a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
700023a4:	683b      	ldr	r3, [r7, #0]
700023a6:	7f1b      	ldrb	r3, [r3, #28]
700023a8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
700023aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
700023ac:	683b      	ldr	r3, [r7, #0]
700023ae:	7f5b      	ldrb	r3, [r3, #29]
700023b0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
700023b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
700023b4:	683a      	ldr	r2, [r7, #0]
700023b6:	7f92      	ldrb	r2, [r2, #30]
700023b8:	2a00      	cmp	r2, #0
700023ba:	d102      	bne.n	700023c2 <ETH_SetMACConfig+0x92>
700023bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
700023c0:	e000      	b.n	700023c4 <ETH_SetMACConfig+0x94>
700023c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
700023c4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
700023c6:	683b      	ldr	r3, [r7, #0]
700023c8:	7fdb      	ldrb	r3, [r3, #31]
700023ca:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
700023cc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
700023ce:	683a      	ldr	r2, [r7, #0]
700023d0:	f892 2020 	ldrb.w	r2, [r2, #32]
700023d4:	2a00      	cmp	r2, #0
700023d6:	d102      	bne.n	700023de <ETH_SetMACConfig+0xae>
700023d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
700023dc:	e000      	b.n	700023e0 <ETH_SetMACConfig+0xb0>
700023de:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
700023e0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
700023e2:	683b      	ldr	r3, [r7, #0]
700023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
700023e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
700023e8:	683b      	ldr	r3, [r7, #0]
700023ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
700023ee:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
700023f0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
700023f2:	683b      	ldr	r3, [r7, #0]
700023f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
700023f6:	4313      	orrs	r3, r2
700023f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
700023fa:	687b      	ldr	r3, [r7, #4]
700023fc:	681b      	ldr	r3, [r3, #0]
700023fe:	681a      	ldr	r2, [r3, #0]
70002400:	4b56      	ldr	r3, [pc, #344]	@ (7000255c <ETH_SetMACConfig+0x22c>)
70002402:	4013      	ands	r3, r2
70002404:	687a      	ldr	r2, [r7, #4]
70002406:	6812      	ldr	r2, [r2, #0]
70002408:	68f9      	ldr	r1, [r7, #12]
7000240a:	430b      	orrs	r3, r1
7000240c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
7000240e:	683b      	ldr	r3, [r7, #0]
70002410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70002412:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
70002414:	683b      	ldr	r3, [r7, #0]
70002416:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
7000241a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
7000241c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
7000241e:	683b      	ldr	r3, [r7, #0]
70002420:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
70002424:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
70002426:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
70002428:	683b      	ldr	r3, [r7, #0]
7000242a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
7000242e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
70002430:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
70002432:	683a      	ldr	r2, [r7, #0]
70002434:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
70002438:	2a00      	cmp	r2, #0
7000243a:	d102      	bne.n	70002442 <ETH_SetMACConfig+0x112>
7000243c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
70002440:	e000      	b.n	70002444 <ETH_SetMACConfig+0x114>
70002442:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
70002444:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
70002446:	683b      	ldr	r3, [r7, #0]
70002448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
7000244a:	4313      	orrs	r3, r2
7000244c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
7000244e:	687b      	ldr	r3, [r7, #4]
70002450:	681b      	ldr	r3, [r3, #0]
70002452:	685a      	ldr	r2, [r3, #4]
70002454:	4b42      	ldr	r3, [pc, #264]	@ (70002560 <ETH_SetMACConfig+0x230>)
70002456:	4013      	ands	r3, r2
70002458:	687a      	ldr	r2, [r7, #4]
7000245a:	6812      	ldr	r2, [r2, #0]
7000245c:	68f9      	ldr	r1, [r7, #12]
7000245e:	430b      	orrs	r3, r1
70002460:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
70002462:	683b      	ldr	r3, [r7, #0]
70002464:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
70002468:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
7000246a:	683b      	ldr	r3, [r7, #0]
7000246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
7000246e:	4313      	orrs	r3, r2
70002470:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
70002472:	687b      	ldr	r3, [r7, #4]
70002474:	681b      	ldr	r3, [r3, #0]
70002476:	68da      	ldr	r2, [r3, #12]
70002478:	4b3a      	ldr	r3, [pc, #232]	@ (70002564 <ETH_SetMACConfig+0x234>)
7000247a:	4013      	ands	r3, r2
7000247c:	687a      	ldr	r2, [r7, #4]
7000247e:	6812      	ldr	r2, [r2, #0]
70002480:	68f9      	ldr	r1, [r7, #12]
70002482:	430b      	orrs	r3, r1
70002484:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
70002486:	683b      	ldr	r3, [r7, #0]
70002488:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
7000248c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
7000248e:	683b      	ldr	r3, [r7, #0]
70002490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
70002492:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
70002494:	683a      	ldr	r2, [r7, #0]
70002496:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
7000249a:	2a00      	cmp	r2, #0
7000249c:	d101      	bne.n	700024a2 <ETH_SetMACConfig+0x172>
7000249e:	2280      	movs	r2, #128	@ 0x80
700024a0:	e000      	b.n	700024a4 <ETH_SetMACConfig+0x174>
700024a2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
700024a4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
700024a6:	683b      	ldr	r3, [r7, #0]
700024a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
700024aa:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
700024ac:	4313      	orrs	r3, r2
700024ae:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
700024b0:	687b      	ldr	r3, [r7, #4]
700024b2:	681b      	ldr	r3, [r3, #0]
700024b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
700024b6:	f64f 730d 	movw	r3, #65293	@ 0xff0d
700024ba:	4013      	ands	r3, r2
700024bc:	687a      	ldr	r2, [r7, #4]
700024be:	6812      	ldr	r2, [r2, #0]
700024c0:	68f9      	ldr	r1, [r7, #12]
700024c2:	430b      	orrs	r3, r1
700024c4:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
700024c6:	683b      	ldr	r3, [r7, #0]
700024c8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
700024cc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
700024ce:	683b      	ldr	r3, [r7, #0]
700024d0:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
700024d4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
700024d6:	4313      	orrs	r3, r2
700024d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
700024da:	687b      	ldr	r3, [r7, #4]
700024dc:	681b      	ldr	r3, [r3, #0]
700024de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
700024e2:	f023 0103 	bic.w	r1, r3, #3
700024e6:	687b      	ldr	r3, [r7, #4]
700024e8:	681b      	ldr	r3, [r3, #0]
700024ea:	68fa      	ldr	r2, [r7, #12]
700024ec:	430a      	orrs	r2, r1
700024ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
700024f2:	687b      	ldr	r3, [r7, #4]
700024f4:	681b      	ldr	r3, [r3, #0]
700024f6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
700024fa:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
700024fe:	683b      	ldr	r3, [r7, #0]
70002500:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
70002502:	687b      	ldr	r3, [r7, #4]
70002504:	681b      	ldr	r3, [r3, #0]
70002506:	430a      	orrs	r2, r1
70002508:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
7000250c:	683b      	ldr	r3, [r7, #0]
7000250e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
70002510:	683a      	ldr	r2, [r7, #0]
70002512:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
70002516:	2a00      	cmp	r2, #0
70002518:	d101      	bne.n	7000251e <ETH_SetMACConfig+0x1ee>
7000251a:	2240      	movs	r2, #64	@ 0x40
7000251c:	e000      	b.n	70002520 <ETH_SetMACConfig+0x1f0>
7000251e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
70002520:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
70002522:	683b      	ldr	r3, [r7, #0]
70002524:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
70002528:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
7000252a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
7000252c:	683b      	ldr	r3, [r7, #0]
7000252e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
70002532:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
70002534:	4313      	orrs	r3, r2
70002536:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
70002538:	687b      	ldr	r3, [r7, #4]
7000253a:	681b      	ldr	r3, [r3, #0]
7000253c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
70002540:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
70002544:	687b      	ldr	r3, [r7, #4]
70002546:	681b      	ldr	r3, [r3, #0]
70002548:	68fa      	ldr	r2, [r7, #12]
7000254a:	430a      	orrs	r2, r1
7000254c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
70002550:	bf00      	nop
70002552:	3714      	adds	r7, #20
70002554:	46bd      	mov	sp, r7
70002556:	f85d 7b04 	ldr.w	r7, [sp], #4
7000255a:	4770      	bx	lr
7000255c:	00048083 	.word	0x00048083
70002560:	c0f88000 	.word	0xc0f88000
70002564:	fffffef0 	.word	0xfffffef0

70002568 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
70002568:	b480      	push	{r7}
7000256a:	b085      	sub	sp, #20
7000256c:	af00      	add	r7, sp, #0
7000256e:	6078      	str	r0, [r7, #4]
70002570:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
70002572:	687b      	ldr	r3, [r7, #4]
70002574:	681b      	ldr	r3, [r3, #0]
70002576:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
7000257a:	681a      	ldr	r2, [r3, #0]
7000257c:	4b38      	ldr	r3, [pc, #224]	@ (70002660 <ETH_SetDMAConfig+0xf8>)
7000257e:	4013      	ands	r3, r2
70002580:	683a      	ldr	r2, [r7, #0]
70002582:	6811      	ldr	r1, [r2, #0]
70002584:	687a      	ldr	r2, [r7, #4]
70002586:	6812      	ldr	r2, [r2, #0]
70002588:	430b      	orrs	r3, r1
7000258a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
7000258e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
70002590:	683b      	ldr	r3, [r7, #0]
70002592:	791b      	ldrb	r3, [r3, #4]
70002594:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
70002596:	683b      	ldr	r3, [r7, #0]
70002598:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
7000259a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
7000259c:	683b      	ldr	r3, [r7, #0]
7000259e:	7b1b      	ldrb	r3, [r3, #12]
700025a0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
700025a2:	4313      	orrs	r3, r2
700025a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
700025a6:	687b      	ldr	r3, [r7, #4]
700025a8:	681b      	ldr	r3, [r3, #0]
700025aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
700025ae:	685a      	ldr	r2, [r3, #4]
700025b0:	4b2c      	ldr	r3, [pc, #176]	@ (70002664 <ETH_SetDMAConfig+0xfc>)
700025b2:	4013      	ands	r3, r2
700025b4:	687a      	ldr	r2, [r7, #4]
700025b6:	6812      	ldr	r2, [r2, #0]
700025b8:	68f9      	ldr	r1, [r7, #12]
700025ba:	430b      	orrs	r3, r1
700025bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
700025c0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
700025c2:	683b      	ldr	r3, [r7, #0]
700025c4:	7b5b      	ldrb	r3, [r3, #13]
700025c6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
700025c8:	683b      	ldr	r3, [r7, #0]
700025ca:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
700025cc:	4313      	orrs	r3, r2
700025ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
700025d0:	687b      	ldr	r3, [r7, #4]
700025d2:	681b      	ldr	r3, [r3, #0]
700025d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
700025d8:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
700025dc:	4b22      	ldr	r3, [pc, #136]	@ (70002668 <ETH_SetDMAConfig+0x100>)
700025de:	4013      	ands	r3, r2
700025e0:	687a      	ldr	r2, [r7, #4]
700025e2:	6812      	ldr	r2, [r2, #0]
700025e4:	68f9      	ldr	r1, [r7, #12]
700025e6:	430b      	orrs	r3, r1
700025e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
700025ec:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
700025f0:	683b      	ldr	r3, [r7, #0]
700025f2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
700025f4:	683b      	ldr	r3, [r7, #0]
700025f6:	7d1b      	ldrb	r3, [r3, #20]
700025f8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
700025fa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
700025fc:	683b      	ldr	r3, [r7, #0]
700025fe:	7f5b      	ldrb	r3, [r3, #29]
70002600:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
70002602:	4313      	orrs	r3, r2
70002604:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
70002606:	687b      	ldr	r3, [r7, #4]
70002608:	681b      	ldr	r3, [r3, #0]
7000260a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
7000260e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
70002612:	4b16      	ldr	r3, [pc, #88]	@ (7000266c <ETH_SetDMAConfig+0x104>)
70002614:	4013      	ands	r3, r2
70002616:	687a      	ldr	r2, [r7, #4]
70002618:	6812      	ldr	r2, [r2, #0]
7000261a:	68f9      	ldr	r1, [r7, #12]
7000261c:	430b      	orrs	r3, r1
7000261e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
70002622:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
70002626:	683b      	ldr	r3, [r7, #0]
70002628:	7f1b      	ldrb	r3, [r3, #28]
7000262a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
7000262c:	683b      	ldr	r3, [r7, #0]
7000262e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
70002630:	4313      	orrs	r3, r2
70002632:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
70002634:	687b      	ldr	r3, [r7, #4]
70002636:	681b      	ldr	r3, [r3, #0]
70002638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
7000263c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
70002640:	4b0b      	ldr	r3, [pc, #44]	@ (70002670 <ETH_SetDMAConfig+0x108>)
70002642:	4013      	ands	r3, r2
70002644:	687a      	ldr	r2, [r7, #4]
70002646:	6812      	ldr	r2, [r2, #0]
70002648:	68f9      	ldr	r1, [r7, #12]
7000264a:	430b      	orrs	r3, r1
7000264c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
70002650:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
70002654:	bf00      	nop
70002656:	3714      	adds	r7, #20
70002658:	46bd      	mov	sp, r7
7000265a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000265e:	4770      	bx	lr
70002660:	ffff87fd 	.word	0xffff87fd
70002664:	ffff2ffe 	.word	0xffff2ffe
70002668:	fffec000 	.word	0xfffec000
7000266c:	ffc0efef 	.word	0xffc0efef
70002670:	7fc0ffff 	.word	0x7fc0ffff

70002674 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
70002674:	b580      	push	{r7, lr}
70002676:	b0a4      	sub	sp, #144	@ 0x90
70002678:	af00      	add	r7, sp, #0
7000267a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
7000267c:	2301      	movs	r3, #1
7000267e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
70002682:	2300      	movs	r3, #0
70002684:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
70002686:	2300      	movs	r3, #0
70002688:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
7000268c:	2300      	movs	r3, #0
7000268e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
70002692:	2301      	movs	r3, #1
70002694:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
70002698:	2301      	movs	r3, #1
7000269a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
7000269e:	2301      	movs	r3, #1
700026a0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
700026a4:	2300      	movs	r3, #0
700026a6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
700026aa:	2301      	movs	r3, #1
700026ac:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
700026b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
700026b4:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
700026b6:	2300      	movs	r3, #0
700026b8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
700026bc:	2300      	movs	r3, #0
700026be:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
700026c0:	2300      	movs	r3, #0
700026c2:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
700026c6:	2300      	movs	r3, #0
700026c8:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
700026cc:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
700026d0:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
700026d2:	2300      	movs	r3, #0
700026d4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
700026d8:	2300      	movs	r3, #0
700026da:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
700026dc:	2301      	movs	r3, #1
700026de:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
700026e2:	2300      	movs	r3, #0
700026e4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
700026e8:	2300      	movs	r3, #0
700026ea:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
700026ee:	2300      	movs	r3, #0
700026f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
700026f2:	2300      	movs	r3, #0
700026f4:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
700026f6:	2300      	movs	r3, #0
700026f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
700026fa:	2300      	movs	r3, #0
700026fc:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
70002700:	2300      	movs	r3, #0
70002702:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
70002706:	2301      	movs	r3, #1
70002708:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
7000270c:	2320      	movs	r3, #32
7000270e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
70002712:	2301      	movs	r3, #1
70002714:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
70002718:	2300      	movs	r3, #0
7000271a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
7000271e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
70002722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
70002724:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
70002728:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
7000272a:	2300      	movs	r3, #0
7000272c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
70002730:	2302      	movs	r3, #2
70002732:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
70002736:	2300      	movs	r3, #0
70002738:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
7000273c:	2300      	movs	r3, #0
7000273e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
70002742:	2300      	movs	r3, #0
70002744:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
70002748:	2301      	movs	r3, #1
7000274a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
7000274e:	2300      	movs	r3, #0
70002750:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
70002752:	2301      	movs	r3, #1
70002754:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
70002758:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
7000275c:	4619      	mov	r1, r3
7000275e:	6878      	ldr	r0, [r7, #4]
70002760:	f7ff fde6 	bl	70002330 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
70002764:	2301      	movs	r3, #1
70002766:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
70002768:	2301      	movs	r3, #1
7000276a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
7000276c:	2300      	movs	r3, #0
7000276e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
70002770:	2300      	movs	r3, #0
70002772:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
70002776:	2300      	movs	r3, #0
70002778:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
7000277a:	2300      	movs	r3, #0
7000277c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
7000277e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
70002782:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
70002784:	2300      	movs	r3, #0
70002786:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
70002788:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
7000278c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
7000278e:	2300      	movs	r3, #0
70002790:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
70002794:	f44f 7306 	mov.w	r3, #536	@ 0x218
70002798:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
7000279a:	f107 0308 	add.w	r3, r7, #8
7000279e:	4619      	mov	r1, r3
700027a0:	6878      	ldr	r0, [r7, #4]
700027a2:	f7ff fee1 	bl	70002568 <ETH_SetDMAConfig>
}
700027a6:	bf00      	nop
700027a8:	3790      	adds	r7, #144	@ 0x90
700027aa:	46bd      	mov	sp, r7
700027ac:	bd80      	pop	{r7, pc}

700027ae <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
700027ae:	b480      	push	{r7}
700027b0:	b085      	sub	sp, #20
700027b2:	af00      	add	r7, sp, #0
700027b4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
700027b6:	2300      	movs	r3, #0
700027b8:	60fb      	str	r3, [r7, #12]
700027ba:	e01d      	b.n	700027f8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
700027bc:	687b      	ldr	r3, [r7, #4]
700027be:	68d9      	ldr	r1, [r3, #12]
700027c0:	68fa      	ldr	r2, [r7, #12]
700027c2:	4613      	mov	r3, r2
700027c4:	005b      	lsls	r3, r3, #1
700027c6:	4413      	add	r3, r2
700027c8:	00db      	lsls	r3, r3, #3
700027ca:	440b      	add	r3, r1
700027cc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
700027ce:	68bb      	ldr	r3, [r7, #8]
700027d0:	2200      	movs	r2, #0
700027d2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
700027d4:	68bb      	ldr	r3, [r7, #8]
700027d6:	2200      	movs	r2, #0
700027d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
700027da:	68bb      	ldr	r3, [r7, #8]
700027dc:	2200      	movs	r2, #0
700027de:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
700027e0:	68bb      	ldr	r3, [r7, #8]
700027e2:	2200      	movs	r2, #0
700027e4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
700027e6:	68b9      	ldr	r1, [r7, #8]
700027e8:	687b      	ldr	r3, [r7, #4]
700027ea:	68fa      	ldr	r2, [r7, #12]
700027ec:	3206      	adds	r2, #6
700027ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
700027f2:	68fb      	ldr	r3, [r7, #12]
700027f4:	3301      	adds	r3, #1
700027f6:	60fb      	str	r3, [r7, #12]
700027f8:	68fb      	ldr	r3, [r7, #12]
700027fa:	2b03      	cmp	r3, #3
700027fc:	d9de      	bls.n	700027bc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
700027fe:	687b      	ldr	r3, [r7, #4]
70002800:	2200      	movs	r2, #0
70002802:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
70002804:	687b      	ldr	r3, [r7, #4]
70002806:	681b      	ldr	r3, [r3, #0]
70002808:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
7000280c:	461a      	mov	r2, r3
7000280e:	2303      	movs	r3, #3
70002810:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
70002814:	687b      	ldr	r3, [r7, #4]
70002816:	68da      	ldr	r2, [r3, #12]
70002818:	687b      	ldr	r3, [r7, #4]
7000281a:	681b      	ldr	r3, [r3, #0]
7000281c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70002820:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
70002824:	687b      	ldr	r3, [r7, #4]
70002826:	68da      	ldr	r2, [r3, #12]
70002828:	687b      	ldr	r3, [r7, #4]
7000282a:	681b      	ldr	r3, [r3, #0]
7000282c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70002830:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
70002834:	bf00      	nop
70002836:	3714      	adds	r7, #20
70002838:	46bd      	mov	sp, r7
7000283a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000283e:	4770      	bx	lr

70002840 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
70002840:	b480      	push	{r7}
70002842:	b085      	sub	sp, #20
70002844:	af00      	add	r7, sp, #0
70002846:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
70002848:	2300      	movs	r3, #0
7000284a:	60fb      	str	r3, [r7, #12]
7000284c:	e023      	b.n	70002896 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
7000284e:	687b      	ldr	r3, [r7, #4]
70002850:	6919      	ldr	r1, [r3, #16]
70002852:	68fa      	ldr	r2, [r7, #12]
70002854:	4613      	mov	r3, r2
70002856:	005b      	lsls	r3, r3, #1
70002858:	4413      	add	r3, r2
7000285a:	00db      	lsls	r3, r3, #3
7000285c:	440b      	add	r3, r1
7000285e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
70002860:	68bb      	ldr	r3, [r7, #8]
70002862:	2200      	movs	r2, #0
70002864:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
70002866:	68bb      	ldr	r3, [r7, #8]
70002868:	2200      	movs	r2, #0
7000286a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
7000286c:	68bb      	ldr	r3, [r7, #8]
7000286e:	2200      	movs	r2, #0
70002870:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
70002872:	68bb      	ldr	r3, [r7, #8]
70002874:	2200      	movs	r2, #0
70002876:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
70002878:	68bb      	ldr	r3, [r7, #8]
7000287a:	2200      	movs	r2, #0
7000287c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
7000287e:	68bb      	ldr	r3, [r7, #8]
70002880:	2200      	movs	r2, #0
70002882:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
70002884:	68b9      	ldr	r1, [r7, #8]
70002886:	687b      	ldr	r3, [r7, #4]
70002888:	68fa      	ldr	r2, [r7, #12]
7000288a:	3212      	adds	r2, #18
7000288c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
70002890:	68fb      	ldr	r3, [r7, #12]
70002892:	3301      	adds	r3, #1
70002894:	60fb      	str	r3, [r7, #12]
70002896:	68fb      	ldr	r3, [r7, #12]
70002898:	2b03      	cmp	r3, #3
7000289a:	d9d8      	bls.n	7000284e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
7000289c:	687b      	ldr	r3, [r7, #4]
7000289e:	2200      	movs	r2, #0
700028a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
700028a2:	687b      	ldr	r3, [r7, #4]
700028a4:	2200      	movs	r2, #0
700028a6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
700028a8:	687b      	ldr	r3, [r7, #4]
700028aa:	2200      	movs	r2, #0
700028ac:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
700028ae:	687b      	ldr	r3, [r7, #4]
700028b0:	2200      	movs	r2, #0
700028b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
700028b4:	687b      	ldr	r3, [r7, #4]
700028b6:	2200      	movs	r2, #0
700028b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
700028ba:	687b      	ldr	r3, [r7, #4]
700028bc:	681b      	ldr	r3, [r3, #0]
700028be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
700028c2:	461a      	mov	r2, r3
700028c4:	2303      	movs	r3, #3
700028c6:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
700028ca:	687b      	ldr	r3, [r7, #4]
700028cc:	691a      	ldr	r2, [r3, #16]
700028ce:	687b      	ldr	r3, [r7, #4]
700028d0:	681b      	ldr	r3, [r3, #0]
700028d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
700028d6:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
700028da:	687b      	ldr	r3, [r7, #4]
700028dc:	691b      	ldr	r3, [r3, #16]
700028de:	f103 0248 	add.w	r2, r3, #72	@ 0x48
700028e2:	687b      	ldr	r3, [r7, #4]
700028e4:	681b      	ldr	r3, [r3, #0]
700028e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
700028ea:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
700028ee:	bf00      	nop
700028f0:	3714      	adds	r7, #20
700028f2:	46bd      	mov	sp, r7
700028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
700028f8:	4770      	bx	lr
	...

700028fc <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
700028fc:	b480      	push	{r7}
700028fe:	b091      	sub	sp, #68	@ 0x44
70002900:	af00      	add	r7, sp, #0
70002902:	60f8      	str	r0, [r7, #12]
70002904:	60b9      	str	r1, [r7, #8]
70002906:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
70002908:	68fb      	ldr	r3, [r7, #12]
7000290a:	3318      	adds	r3, #24
7000290c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
7000290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002910:	691b      	ldr	r3, [r3, #16]
70002912:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
70002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002916:	691b      	ldr	r3, [r3, #16]
70002918:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
7000291a:	2300      	movs	r3, #0
7000291c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
7000291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002920:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
70002922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002926:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
70002928:	68bb      	ldr	r3, [r7, #8]
7000292a:	689b      	ldr	r3, [r3, #8]
7000292c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
7000292e:	2300      	movs	r3, #0
70002930:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
70002932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002934:	68db      	ldr	r3, [r3, #12]
70002936:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
7000293a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
7000293e:	d007      	beq.n	70002950 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
70002940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70002942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002944:	3304      	adds	r3, #4
70002946:	009b      	lsls	r3, r3, #2
70002948:	4413      	add	r3, r2
7000294a:	685b      	ldr	r3, [r3, #4]
7000294c:	2b00      	cmp	r3, #0
7000294e:	d001      	beq.n	70002954 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
70002950:	2302      	movs	r3, #2
70002952:	e266      	b.n	70002e22 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
70002954:	68bb      	ldr	r3, [r7, #8]
70002956:	681b      	ldr	r3, [r3, #0]
70002958:	f003 0304 	and.w	r3, r3, #4
7000295c:	2b00      	cmp	r3, #0
7000295e:	d044      	beq.n	700029ea <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
70002960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002962:	68da      	ldr	r2, [r3, #12]
70002964:	4b75      	ldr	r3, [pc, #468]	@ (70002b3c <ETH_Prepare_Tx_Descriptors+0x240>)
70002966:	4013      	ands	r3, r2
70002968:	68ba      	ldr	r2, [r7, #8]
7000296a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
7000296c:	431a      	orrs	r2, r3
7000296e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002970:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
70002972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002974:	68db      	ldr	r3, [r3, #12]
70002976:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
7000297a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000297c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
7000297e:	68fb      	ldr	r3, [r7, #12]
70002980:	681b      	ldr	r3, [r3, #0]
70002982:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
70002984:	68fb      	ldr	r3, [r7, #12]
70002986:	681b      	ldr	r3, [r3, #0]
70002988:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
7000298c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
7000298e:	68bb      	ldr	r3, [r7, #8]
70002990:	681b      	ldr	r3, [r3, #0]
70002992:	f003 0308 	and.w	r3, r3, #8
70002996:	2b00      	cmp	r3, #0
70002998:	d027      	beq.n	700029ea <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
7000299a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000299c:	689b      	ldr	r3, [r3, #8]
7000299e:	b29a      	uxth	r2, r3
700029a0:	68bb      	ldr	r3, [r7, #8]
700029a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700029a4:	041b      	lsls	r3, r3, #16
700029a6:	431a      	orrs	r2, r3
700029a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700029aa:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
700029ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700029ae:	68db      	ldr	r3, [r3, #12]
700029b0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
700029b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700029b6:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
700029b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700029ba:	68db      	ldr	r3, [r3, #12]
700029bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
700029c0:	68bb      	ldr	r3, [r7, #8]
700029c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
700029c4:	431a      	orrs	r2, r3
700029c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700029c8:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
700029ca:	68fb      	ldr	r3, [r7, #12]
700029cc:	681b      	ldr	r3, [r3, #0]
700029ce:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
700029d0:	68fb      	ldr	r3, [r7, #12]
700029d2:	681b      	ldr	r3, [r3, #0]
700029d4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
700029d8:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
700029da:	68fb      	ldr	r3, [r7, #12]
700029dc:	681b      	ldr	r3, [r3, #0]
700029de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
700029e0:	68fb      	ldr	r3, [r7, #12]
700029e2:	681b      	ldr	r3, [r3, #0]
700029e4:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
700029e8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
700029ea:	68bb      	ldr	r3, [r7, #8]
700029ec:	681b      	ldr	r3, [r3, #0]
700029ee:	f003 0310 	and.w	r3, r3, #16
700029f2:	2b00      	cmp	r3, #0
700029f4:	d00e      	beq.n	70002a14 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
700029f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700029f8:	689a      	ldr	r2, [r3, #8]
700029fa:	4b51      	ldr	r3, [pc, #324]	@ (70002b40 <ETH_Prepare_Tx_Descriptors+0x244>)
700029fc:	4013      	ands	r3, r2
700029fe:	68ba      	ldr	r2, [r7, #8]
70002a00:	6992      	ldr	r2, [r2, #24]
70002a02:	431a      	orrs	r2, r3
70002a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a06:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
70002a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a0a:	68db      	ldr	r3, [r3, #12]
70002a0c:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
70002a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a12:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
70002a14:	68bb      	ldr	r3, [r7, #8]
70002a16:	681b      	ldr	r3, [r3, #0]
70002a18:	f003 0304 	and.w	r3, r3, #4
70002a1c:	2b00      	cmp	r3, #0
70002a1e:	d105      	bne.n	70002a2c <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
70002a20:	68bb      	ldr	r3, [r7, #8]
70002a22:	681b      	ldr	r3, [r3, #0]
70002a24:	f003 0310 	and.w	r3, r3, #16
70002a28:	2b00      	cmp	r3, #0
70002a2a:	d036      	beq.n	70002a9a <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
70002a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a2e:	68db      	ldr	r3, [r3, #12]
70002a30:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
70002a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a36:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
70002a38:	f3bf 8f5f 	dmb	sy
}
70002a3c:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
70002a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a40:	68db      	ldr	r3, [r3, #12]
70002a42:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
70002a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a48:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
70002a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002a4c:	3301      	adds	r3, #1
70002a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
70002a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002a52:	2b03      	cmp	r3, #3
70002a54:	d902      	bls.n	70002a5c <ETH_Prepare_Tx_Descriptors+0x160>
70002a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002a58:	3b04      	subs	r3, #4
70002a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
70002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002a5e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
70002a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002a64:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
70002a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70002a68:	3301      	adds	r3, #1
70002a6a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
70002a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a6e:	68db      	ldr	r3, [r3, #12]
70002a70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
70002a74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
70002a78:	d10f      	bne.n	70002a9a <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
70002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002a7c:	6a3a      	ldr	r2, [r7, #32]
70002a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002a82:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
70002a84:	f3bf 8f5f 	dmb	sy
}
70002a88:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
70002a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a8c:	68db      	ldr	r3, [r3, #12]
70002a8e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
70002a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a94:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
70002a96:	2302      	movs	r3, #2
70002a98:	e1c3      	b.n	70002e22 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
70002a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70002a9c:	3301      	adds	r3, #1
70002a9e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
70002aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002aa2:	681b      	ldr	r3, [r3, #0]
70002aa4:	461a      	mov	r2, r3
70002aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002aa8:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
70002aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002aac:	689a      	ldr	r2, [r3, #8]
70002aae:	4b24      	ldr	r3, [pc, #144]	@ (70002b40 <ETH_Prepare_Tx_Descriptors+0x244>)
70002ab0:	4013      	ands	r3, r2
70002ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
70002ab4:	6852      	ldr	r2, [r2, #4]
70002ab6:	431a      	orrs	r2, r3
70002ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002aba:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
70002abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002abe:	689b      	ldr	r3, [r3, #8]
70002ac0:	2b00      	cmp	r3, #0
70002ac2:	d012      	beq.n	70002aea <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
70002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002ac6:	689b      	ldr	r3, [r3, #8]
70002ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
70002aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002acc:	681b      	ldr	r3, [r3, #0]
70002ace:	461a      	mov	r2, r3
70002ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002ad2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
70002ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002ad6:	689a      	ldr	r2, [r3, #8]
70002ad8:	4b1a      	ldr	r3, [pc, #104]	@ (70002b44 <ETH_Prepare_Tx_Descriptors+0x248>)
70002ada:	4013      	ands	r3, r2
70002adc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
70002ade:	6852      	ldr	r2, [r2, #4]
70002ae0:	0412      	lsls	r2, r2, #16
70002ae2:	431a      	orrs	r2, r3
70002ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002ae6:	609a      	str	r2, [r3, #8]
70002ae8:	e008      	b.n	70002afc <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
70002aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002aec:	2200      	movs	r2, #0
70002aee:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
70002af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002af2:	689a      	ldr	r2, [r3, #8]
70002af4:	4b13      	ldr	r3, [pc, #76]	@ (70002b44 <ETH_Prepare_Tx_Descriptors+0x248>)
70002af6:	4013      	ands	r3, r2
70002af8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
70002afa:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
70002afc:	68bb      	ldr	r3, [r7, #8]
70002afe:	681b      	ldr	r3, [r3, #0]
70002b00:	f003 0310 	and.w	r3, r3, #16
70002b04:	2b00      	cmp	r3, #0
70002b06:	d021      	beq.n	70002b4c <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
70002b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b0a:	68db      	ldr	r3, [r3, #12]
70002b0c:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
70002b10:	68bb      	ldr	r3, [r7, #8]
70002b12:	6a1b      	ldr	r3, [r3, #32]
70002b14:	04db      	lsls	r3, r3, #19
70002b16:	431a      	orrs	r2, r3
70002b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b1a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
70002b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b1e:	68da      	ldr	r2, [r3, #12]
70002b20:	4b09      	ldr	r3, [pc, #36]	@ (70002b48 <ETH_Prepare_Tx_Descriptors+0x24c>)
70002b22:	4013      	ands	r3, r2
70002b24:	68ba      	ldr	r2, [r7, #8]
70002b26:	69d2      	ldr	r2, [r2, #28]
70002b28:	431a      	orrs	r2, r3
70002b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b2c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
70002b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b30:	68db      	ldr	r3, [r3, #12]
70002b32:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
70002b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b38:	60da      	str	r2, [r3, #12]
70002b3a:	e02e      	b.n	70002b9a <ETH_Prepare_Tx_Descriptors+0x29e>
70002b3c:	ffff0000 	.word	0xffff0000
70002b40:	ffffc000 	.word	0xffffc000
70002b44:	c000ffff 	.word	0xc000ffff
70002b48:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
70002b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b4e:	68da      	ldr	r2, [r3, #12]
70002b50:	4b7b      	ldr	r3, [pc, #492]	@ (70002d40 <ETH_Prepare_Tx_Descriptors+0x444>)
70002b52:	4013      	ands	r3, r2
70002b54:	68ba      	ldr	r2, [r7, #8]
70002b56:	6852      	ldr	r2, [r2, #4]
70002b58:	431a      	orrs	r2, r3
70002b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b5c:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
70002b5e:	68bb      	ldr	r3, [r7, #8]
70002b60:	681b      	ldr	r3, [r3, #0]
70002b62:	f003 0301 	and.w	r3, r3, #1
70002b66:	2b00      	cmp	r3, #0
70002b68:	d008      	beq.n	70002b7c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
70002b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b6c:	68db      	ldr	r3, [r3, #12]
70002b6e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
70002b72:	68bb      	ldr	r3, [r7, #8]
70002b74:	695b      	ldr	r3, [r3, #20]
70002b76:	431a      	orrs	r2, r3
70002b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b7a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
70002b7c:	68bb      	ldr	r3, [r7, #8]
70002b7e:	681b      	ldr	r3, [r3, #0]
70002b80:	f003 0320 	and.w	r3, r3, #32
70002b84:	2b00      	cmp	r3, #0
70002b86:	d008      	beq.n	70002b9a <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
70002b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b8a:	68db      	ldr	r3, [r3, #12]
70002b8c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
70002b90:	68bb      	ldr	r3, [r7, #8]
70002b92:	691b      	ldr	r3, [r3, #16]
70002b94:	431a      	orrs	r2, r3
70002b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b98:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
70002b9a:	68bb      	ldr	r3, [r7, #8]
70002b9c:	681b      	ldr	r3, [r3, #0]
70002b9e:	f003 0304 	and.w	r3, r3, #4
70002ba2:	2b00      	cmp	r3, #0
70002ba4:	d008      	beq.n	70002bb8 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
70002ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002ba8:	689b      	ldr	r3, [r3, #8]
70002baa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
70002bae:	68bb      	ldr	r3, [r7, #8]
70002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70002bb2:	431a      	orrs	r2, r3
70002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002bb6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
70002bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002bba:	68db      	ldr	r3, [r3, #12]
70002bbc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
70002bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002bc2:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
70002bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002bc6:	68db      	ldr	r3, [r3, #12]
70002bc8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
70002bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002bce:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
70002bd0:	f3bf 8f5f 	dmb	sy
}
70002bd4:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
70002bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002bd8:	68db      	ldr	r3, [r3, #12]
70002bda:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
70002bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002be0:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
70002be2:	68bb      	ldr	r3, [r7, #8]
70002be4:	681b      	ldr	r3, [r3, #0]
70002be6:	f003 0302 	and.w	r3, r3, #2
70002bea:	2b00      	cmp	r3, #0
70002bec:	f000 80da 	beq.w	70002da4 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
70002bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002bf2:	68db      	ldr	r3, [r3, #12]
70002bf4:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
70002bf8:	68bb      	ldr	r3, [r7, #8]
70002bfa:	68db      	ldr	r3, [r3, #12]
70002bfc:	431a      	orrs	r2, r3
70002bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002c00:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
70002c02:	e0cf      	b.n	70002da4 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
70002c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002c06:	68db      	ldr	r3, [r3, #12]
70002c08:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
70002c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002c0e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
70002c10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002c12:	3301      	adds	r3, #1
70002c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
70002c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002c18:	2b03      	cmp	r3, #3
70002c1a:	d902      	bls.n	70002c22 <ETH_Prepare_Tx_Descriptors+0x326>
70002c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002c1e:	3b04      	subs	r3, #4
70002c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
70002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002c24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
70002c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002c2a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
70002c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002c2e:	68db      	ldr	r3, [r3, #12]
70002c30:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
70002c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002c36:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
70002c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002c3a:	68db      	ldr	r3, [r3, #12]
70002c3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
70002c40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
70002c44:	d007      	beq.n	70002c56 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
70002c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70002c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002c4a:	3304      	adds	r3, #4
70002c4c:	009b      	lsls	r3, r3, #2
70002c4e:	4413      	add	r3, r2
70002c50:	685b      	ldr	r3, [r3, #4]
70002c52:	2b00      	cmp	r3, #0
70002c54:	d029      	beq.n	70002caa <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
70002c56:	6a3b      	ldr	r3, [r7, #32]
70002c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
70002c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002c5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
70002c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002c62:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
70002c64:	2300      	movs	r3, #0
70002c66:	63bb      	str	r3, [r7, #56]	@ 0x38
70002c68:	e019      	b.n	70002c9e <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
70002c6a:	f3bf 8f5f 	dmb	sy
}
70002c6e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
70002c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002c72:	68db      	ldr	r3, [r3, #12]
70002c74:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
70002c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002c7a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
70002c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002c7e:	3301      	adds	r3, #1
70002c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
70002c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002c84:	2b03      	cmp	r3, #3
70002c86:	d902      	bls.n	70002c8e <ETH_Prepare_Tx_Descriptors+0x392>
70002c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002c8a:	3b04      	subs	r3, #4
70002c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
70002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002c90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
70002c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002c96:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
70002c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70002c9a:	3301      	adds	r3, #1
70002c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
70002c9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
70002ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70002ca2:	429a      	cmp	r2, r3
70002ca4:	d3e1      	bcc.n	70002c6a <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
70002ca6:	2302      	movs	r3, #2
70002ca8:	e0bb      	b.n	70002e22 <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
70002caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70002cac:	3301      	adds	r3, #1
70002cae:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
70002cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002cb2:	689b      	ldr	r3, [r3, #8]
70002cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
70002cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002cb8:	681b      	ldr	r3, [r3, #0]
70002cba:	461a      	mov	r2, r3
70002cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002cbe:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
70002cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002cc2:	689a      	ldr	r2, [r3, #8]
70002cc4:	4b1f      	ldr	r3, [pc, #124]	@ (70002d44 <ETH_Prepare_Tx_Descriptors+0x448>)
70002cc6:	4013      	ands	r3, r2
70002cc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
70002cca:	6852      	ldr	r2, [r2, #4]
70002ccc:	431a      	orrs	r2, r3
70002cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002cd0:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
70002cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002cd4:	689b      	ldr	r3, [r3, #8]
70002cd6:	2b00      	cmp	r3, #0
70002cd8:	d012      	beq.n	70002d00 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
70002cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002cdc:	689b      	ldr	r3, [r3, #8]
70002cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
70002ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002ce2:	681b      	ldr	r3, [r3, #0]
70002ce4:	461a      	mov	r2, r3
70002ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002ce8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
70002cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002cec:	689a      	ldr	r2, [r3, #8]
70002cee:	4b16      	ldr	r3, [pc, #88]	@ (70002d48 <ETH_Prepare_Tx_Descriptors+0x44c>)
70002cf0:	4013      	ands	r3, r2
70002cf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
70002cf4:	6852      	ldr	r2, [r2, #4]
70002cf6:	0412      	lsls	r2, r2, #16
70002cf8:	431a      	orrs	r2, r3
70002cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002cfc:	609a      	str	r2, [r3, #8]
70002cfe:	e008      	b.n	70002d12 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
70002d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d02:	2200      	movs	r2, #0
70002d04:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
70002d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d08:	689a      	ldr	r2, [r3, #8]
70002d0a:	4b0f      	ldr	r3, [pc, #60]	@ (70002d48 <ETH_Prepare_Tx_Descriptors+0x44c>)
70002d0c:	4013      	ands	r3, r2
70002d0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
70002d10:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
70002d12:	68bb      	ldr	r3, [r7, #8]
70002d14:	681b      	ldr	r3, [r3, #0]
70002d16:	f003 0310 	and.w	r3, r3, #16
70002d1a:	2b00      	cmp	r3, #0
70002d1c:	d018      	beq.n	70002d50 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
70002d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d20:	68da      	ldr	r2, [r3, #12]
70002d22:	4b0a      	ldr	r3, [pc, #40]	@ (70002d4c <ETH_Prepare_Tx_Descriptors+0x450>)
70002d24:	4013      	ands	r3, r2
70002d26:	68ba      	ldr	r2, [r7, #8]
70002d28:	69d2      	ldr	r2, [r2, #28]
70002d2a:	431a      	orrs	r2, r3
70002d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d2e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
70002d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d32:	68db      	ldr	r3, [r3, #12]
70002d34:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
70002d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d3a:	60da      	str	r2, [r3, #12]
70002d3c:	e020      	b.n	70002d80 <ETH_Prepare_Tx_Descriptors+0x484>
70002d3e:	bf00      	nop
70002d40:	ffff8000 	.word	0xffff8000
70002d44:	ffffc000 	.word	0xffffc000
70002d48:	c000ffff 	.word	0xc000ffff
70002d4c:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
70002d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d52:	68da      	ldr	r2, [r3, #12]
70002d54:	4b36      	ldr	r3, [pc, #216]	@ (70002e30 <ETH_Prepare_Tx_Descriptors+0x534>)
70002d56:	4013      	ands	r3, r2
70002d58:	68ba      	ldr	r2, [r7, #8]
70002d5a:	6852      	ldr	r2, [r2, #4]
70002d5c:	431a      	orrs	r2, r3
70002d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d60:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
70002d62:	68bb      	ldr	r3, [r7, #8]
70002d64:	681b      	ldr	r3, [r3, #0]
70002d66:	f003 0301 	and.w	r3, r3, #1
70002d6a:	2b00      	cmp	r3, #0
70002d6c:	d008      	beq.n	70002d80 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
70002d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d70:	68db      	ldr	r3, [r3, #12]
70002d72:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
70002d76:	68bb      	ldr	r3, [r7, #8]
70002d78:	695b      	ldr	r3, [r3, #20]
70002d7a:	431a      	orrs	r2, r3
70002d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d7e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
70002d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70002d82:	3301      	adds	r3, #1
70002d84:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
70002d86:	f3bf 8f5f 	dmb	sy
}
70002d8a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
70002d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d8e:	68db      	ldr	r3, [r3, #12]
70002d90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
70002d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d96:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
70002d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d9a:	68db      	ldr	r3, [r3, #12]
70002d9c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
70002da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002da2:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
70002da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002da6:	689b      	ldr	r3, [r3, #8]
70002da8:	2b00      	cmp	r3, #0
70002daa:	f47f af2b 	bne.w	70002c04 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
70002dae:	687b      	ldr	r3, [r7, #4]
70002db0:	2b00      	cmp	r3, #0
70002db2:	d006      	beq.n	70002dc2 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
70002db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002db6:	689b      	ldr	r3, [r3, #8]
70002db8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
70002dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002dbe:	609a      	str	r2, [r3, #8]
70002dc0:	e005      	b.n	70002dce <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
70002dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002dc4:	689b      	ldr	r3, [r3, #8]
70002dc6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
70002dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002dcc:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
70002dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002dd0:	68db      	ldr	r3, [r3, #12]
70002dd2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
70002dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002dd8:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
70002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002ddc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
70002dde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
70002de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002de2:	3304      	adds	r3, #4
70002de4:	009b      	lsls	r3, r3, #2
70002de6:	440b      	add	r3, r1
70002de8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
70002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002dec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
70002dee:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
70002df0:	f3ef 8310 	mrs	r3, PRIMASK
70002df4:	613b      	str	r3, [r7, #16]
  return(result);
70002df6:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
70002df8:	61fb      	str	r3, [r7, #28]
70002dfa:	2301      	movs	r3, #1
70002dfc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
70002dfe:	697b      	ldr	r3, [r7, #20]
70002e00:	f383 8810 	msr	PRIMASK, r3
}
70002e04:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
70002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002e08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
70002e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70002e0c:	4413      	add	r3, r2
70002e0e:	1c5a      	adds	r2, r3, #1
70002e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002e12:	629a      	str	r2, [r3, #40]	@ 0x28
70002e14:	69fb      	ldr	r3, [r7, #28]
70002e16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
70002e18:	69bb      	ldr	r3, [r7, #24]
70002e1a:	f383 8810 	msr	PRIMASK, r3
}
70002e1e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
70002e20:	2300      	movs	r3, #0
}
70002e22:	4618      	mov	r0, r3
70002e24:	3744      	adds	r7, #68	@ 0x44
70002e26:	46bd      	mov	sp, r7
70002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
70002e2c:	4770      	bx	lr
70002e2e:	bf00      	nop
70002e30:	ffff8000 	.word	0xffff8000

70002e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
70002e34:	b480      	push	{r7}
70002e36:	b087      	sub	sp, #28
70002e38:	af00      	add	r7, sp, #0
70002e3a:	6078      	str	r0, [r7, #4]
70002e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
70002e3e:	2300      	movs	r3, #0
70002e40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
70002e42:	e139      	b.n	700030b8 <HAL_GPIO_Init+0x284>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
70002e44:	683b      	ldr	r3, [r7, #0]
70002e46:	681a      	ldr	r2, [r3, #0]
70002e48:	2101      	movs	r1, #1
70002e4a:	697b      	ldr	r3, [r7, #20]
70002e4c:	fa01 f303 	lsl.w	r3, r1, r3
70002e50:	4013      	ands	r3, r2
70002e52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
70002e54:	68fb      	ldr	r3, [r7, #12]
70002e56:	2b00      	cmp	r3, #0
70002e58:	f000 812b 	beq.w	700030b2 <HAL_GPIO_Init+0x27e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
70002e5c:	683b      	ldr	r3, [r7, #0]
70002e5e:	685b      	ldr	r3, [r3, #4]
70002e60:	f003 0303 	and.w	r3, r3, #3
70002e64:	2b01      	cmp	r3, #1
70002e66:	d005      	beq.n	70002e74 <HAL_GPIO_Init+0x40>
70002e68:	683b      	ldr	r3, [r7, #0]
70002e6a:	685b      	ldr	r3, [r3, #4]
70002e6c:	f003 0303 	and.w	r3, r3, #3
70002e70:	2b02      	cmp	r3, #2
70002e72:	d130      	bne.n	70002ed6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
70002e74:	687b      	ldr	r3, [r7, #4]
70002e76:	689b      	ldr	r3, [r3, #8]
70002e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
70002e7a:	697b      	ldr	r3, [r7, #20]
70002e7c:	005b      	lsls	r3, r3, #1
70002e7e:	2203      	movs	r2, #3
70002e80:	fa02 f303 	lsl.w	r3, r2, r3
70002e84:	43db      	mvns	r3, r3
70002e86:	693a      	ldr	r2, [r7, #16]
70002e88:	4013      	ands	r3, r2
70002e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
70002e8c:	683b      	ldr	r3, [r7, #0]
70002e8e:	68da      	ldr	r2, [r3, #12]
70002e90:	697b      	ldr	r3, [r7, #20]
70002e92:	005b      	lsls	r3, r3, #1
70002e94:	fa02 f303 	lsl.w	r3, r2, r3
70002e98:	693a      	ldr	r2, [r7, #16]
70002e9a:	4313      	orrs	r3, r2
70002e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
70002e9e:	687b      	ldr	r3, [r7, #4]
70002ea0:	693a      	ldr	r2, [r7, #16]
70002ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
70002ea4:	687b      	ldr	r3, [r7, #4]
70002ea6:	685b      	ldr	r3, [r3, #4]
70002ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
70002eaa:	2201      	movs	r2, #1
70002eac:	697b      	ldr	r3, [r7, #20]
70002eae:	fa02 f303 	lsl.w	r3, r2, r3
70002eb2:	43db      	mvns	r3, r3
70002eb4:	693a      	ldr	r2, [r7, #16]
70002eb6:	4013      	ands	r3, r2
70002eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
70002eba:	683b      	ldr	r3, [r7, #0]
70002ebc:	685b      	ldr	r3, [r3, #4]
70002ebe:	091b      	lsrs	r3, r3, #4
70002ec0:	f003 0201 	and.w	r2, r3, #1
70002ec4:	697b      	ldr	r3, [r7, #20]
70002ec6:	fa02 f303 	lsl.w	r3, r2, r3
70002eca:	693a      	ldr	r2, [r7, #16]
70002ecc:	4313      	orrs	r3, r2
70002ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
70002ed0:	687b      	ldr	r3, [r7, #4]
70002ed2:	693a      	ldr	r2, [r7, #16]
70002ed4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
70002ed6:	683b      	ldr	r3, [r7, #0]
70002ed8:	685b      	ldr	r3, [r3, #4]
70002eda:	f003 0303 	and.w	r3, r3, #3
70002ede:	2b03      	cmp	r3, #3
70002ee0:	d017      	beq.n	70002f12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
70002ee2:	687b      	ldr	r3, [r7, #4]
70002ee4:	68db      	ldr	r3, [r3, #12]
70002ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
70002ee8:	697b      	ldr	r3, [r7, #20]
70002eea:	005b      	lsls	r3, r3, #1
70002eec:	2203      	movs	r2, #3
70002eee:	fa02 f303 	lsl.w	r3, r2, r3
70002ef2:	43db      	mvns	r3, r3
70002ef4:	693a      	ldr	r2, [r7, #16]
70002ef6:	4013      	ands	r3, r2
70002ef8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
70002efa:	683b      	ldr	r3, [r7, #0]
70002efc:	689a      	ldr	r2, [r3, #8]
70002efe:	697b      	ldr	r3, [r7, #20]
70002f00:	005b      	lsls	r3, r3, #1
70002f02:	fa02 f303 	lsl.w	r3, r2, r3
70002f06:	693a      	ldr	r2, [r7, #16]
70002f08:	4313      	orrs	r3, r2
70002f0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
70002f0c:	687b      	ldr	r3, [r7, #4]
70002f0e:	693a      	ldr	r2, [r7, #16]
70002f10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
70002f12:	683b      	ldr	r3, [r7, #0]
70002f14:	685b      	ldr	r3, [r3, #4]
70002f16:	f003 0303 	and.w	r3, r3, #3
70002f1a:	2b02      	cmp	r3, #2
70002f1c:	d123      	bne.n	70002f66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
70002f1e:	697b      	ldr	r3, [r7, #20]
70002f20:	08da      	lsrs	r2, r3, #3
70002f22:	687b      	ldr	r3, [r7, #4]
70002f24:	3208      	adds	r2, #8
70002f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
70002f2c:	697b      	ldr	r3, [r7, #20]
70002f2e:	f003 0307 	and.w	r3, r3, #7
70002f32:	009b      	lsls	r3, r3, #2
70002f34:	220f      	movs	r2, #15
70002f36:	fa02 f303 	lsl.w	r3, r2, r3
70002f3a:	43db      	mvns	r3, r3
70002f3c:	693a      	ldr	r2, [r7, #16]
70002f3e:	4013      	ands	r3, r2
70002f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
70002f42:	683b      	ldr	r3, [r7, #0]
70002f44:	691a      	ldr	r2, [r3, #16]
70002f46:	697b      	ldr	r3, [r7, #20]
70002f48:	f003 0307 	and.w	r3, r3, #7
70002f4c:	009b      	lsls	r3, r3, #2
70002f4e:	fa02 f303 	lsl.w	r3, r2, r3
70002f52:	693a      	ldr	r2, [r7, #16]
70002f54:	4313      	orrs	r3, r2
70002f56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
70002f58:	697b      	ldr	r3, [r7, #20]
70002f5a:	08da      	lsrs	r2, r3, #3
70002f5c:	687b      	ldr	r3, [r7, #4]
70002f5e:	3208      	adds	r2, #8
70002f60:	6939      	ldr	r1, [r7, #16]
70002f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
70002f66:	687b      	ldr	r3, [r7, #4]
70002f68:	681b      	ldr	r3, [r3, #0]
70002f6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
70002f6c:	697b      	ldr	r3, [r7, #20]
70002f6e:	005b      	lsls	r3, r3, #1
70002f70:	2203      	movs	r2, #3
70002f72:	fa02 f303 	lsl.w	r3, r2, r3
70002f76:	43db      	mvns	r3, r3
70002f78:	693a      	ldr	r2, [r7, #16]
70002f7a:	4013      	ands	r3, r2
70002f7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
70002f7e:	683b      	ldr	r3, [r7, #0]
70002f80:	685b      	ldr	r3, [r3, #4]
70002f82:	f003 0203 	and.w	r2, r3, #3
70002f86:	697b      	ldr	r3, [r7, #20]
70002f88:	005b      	lsls	r3, r3, #1
70002f8a:	fa02 f303 	lsl.w	r3, r2, r3
70002f8e:	693a      	ldr	r2, [r7, #16]
70002f90:	4313      	orrs	r3, r2
70002f92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
70002f94:	687b      	ldr	r3, [r7, #4]
70002f96:	693a      	ldr	r2, [r7, #16]
70002f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
70002f9a:	683b      	ldr	r3, [r7, #0]
70002f9c:	685b      	ldr	r3, [r3, #4]
70002f9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
70002fa2:	2b00      	cmp	r3, #0
70002fa4:	f000 8085 	beq.w	700030b2 <HAL_GPIO_Init+0x27e>
      {
        temp = SBS->EXTICR[position >> 2u];
70002fa8:	4a4b      	ldr	r2, [pc, #300]	@ (700030d8 <HAL_GPIO_Init+0x2a4>)
70002faa:	697b      	ldr	r3, [r7, #20]
70002fac:	089b      	lsrs	r3, r3, #2
70002fae:	334c      	adds	r3, #76	@ 0x4c
70002fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
70002fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
70002fb6:	697b      	ldr	r3, [r7, #20]
70002fb8:	f003 0303 	and.w	r3, r3, #3
70002fbc:	009b      	lsls	r3, r3, #2
70002fbe:	220f      	movs	r2, #15
70002fc0:	fa02 f303 	lsl.w	r3, r2, r3
70002fc4:	43db      	mvns	r3, r3
70002fc6:	693a      	ldr	r2, [r7, #16]
70002fc8:	4013      	ands	r3, r2
70002fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
70002fcc:	687b      	ldr	r3, [r7, #4]
70002fce:	0a9a      	lsrs	r2, r3, #10
70002fd0:	4b42      	ldr	r3, [pc, #264]	@ (700030dc <HAL_GPIO_Init+0x2a8>)
70002fd2:	4013      	ands	r3, r2
70002fd4:	697a      	ldr	r2, [r7, #20]
70002fd6:	f002 0203 	and.w	r2, r2, #3
70002fda:	0092      	lsls	r2, r2, #2
70002fdc:	4093      	lsls	r3, r2
70002fde:	693a      	ldr	r2, [r7, #16]
70002fe0:	4313      	orrs	r3, r2
70002fe2:	613b      	str	r3, [r7, #16]
        SBS->EXTICR[position >> 2u] = temp;
70002fe4:	493c      	ldr	r1, [pc, #240]	@ (700030d8 <HAL_GPIO_Init+0x2a4>)
70002fe6:	697b      	ldr	r3, [r7, #20]
70002fe8:	089b      	lsrs	r3, r3, #2
70002fea:	334c      	adds	r3, #76	@ 0x4c
70002fec:	693a      	ldr	r2, [r7, #16]
70002fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
70002ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70002ff6:	681b      	ldr	r3, [r3, #0]
70002ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
70002ffa:	68fb      	ldr	r3, [r7, #12]
70002ffc:	43db      	mvns	r3, r3
70002ffe:	693a      	ldr	r2, [r7, #16]
70003000:	4013      	ands	r3, r2
70003002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
70003004:	683b      	ldr	r3, [r7, #0]
70003006:	685b      	ldr	r3, [r3, #4]
70003008:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
7000300c:	2b00      	cmp	r3, #0
7000300e:	d003      	beq.n	70003018 <HAL_GPIO_Init+0x1e4>
        {
          temp |= iocurrent;
70003010:	693a      	ldr	r2, [r7, #16]
70003012:	68fb      	ldr	r3, [r7, #12]
70003014:	4313      	orrs	r3, r2
70003016:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
70003018:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
7000301c:	693b      	ldr	r3, [r7, #16]
7000301e:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
70003020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70003024:	685b      	ldr	r3, [r3, #4]
70003026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
70003028:	68fb      	ldr	r3, [r7, #12]
7000302a:	43db      	mvns	r3, r3
7000302c:	693a      	ldr	r2, [r7, #16]
7000302e:	4013      	ands	r3, r2
70003030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
70003032:	683b      	ldr	r3, [r7, #0]
70003034:	685b      	ldr	r3, [r3, #4]
70003036:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
7000303a:	2b00      	cmp	r3, #0
7000303c:	d003      	beq.n	70003046 <HAL_GPIO_Init+0x212>
        {
          temp |= iocurrent;
7000303e:	693a      	ldr	r2, [r7, #16]
70003040:	68fb      	ldr	r3, [r7, #12]
70003042:	4313      	orrs	r3, r2
70003044:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
70003046:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
7000304a:	693b      	ldr	r3, [r7, #16]
7000304c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
7000304e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70003052:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
70003056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
70003058:	68fb      	ldr	r3, [r7, #12]
7000305a:	43db      	mvns	r3, r3
7000305c:	693a      	ldr	r2, [r7, #16]
7000305e:	4013      	ands	r3, r2
70003060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
70003062:	683b      	ldr	r3, [r7, #0]
70003064:	685b      	ldr	r3, [r3, #4]
70003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
7000306a:	2b00      	cmp	r3, #0
7000306c:	d003      	beq.n	70003076 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
7000306e:	693a      	ldr	r2, [r7, #16]
70003070:	68fb      	ldr	r3, [r7, #12]
70003072:	4313      	orrs	r3, r2
70003074:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
70003076:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
7000307a:	693b      	ldr	r3, [r7, #16]
7000307c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
70003080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70003084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
70003088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
7000308a:	68fb      	ldr	r3, [r7, #12]
7000308c:	43db      	mvns	r3, r3
7000308e:	693a      	ldr	r2, [r7, #16]
70003090:	4013      	ands	r3, r2
70003092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
70003094:	683b      	ldr	r3, [r7, #0]
70003096:	685b      	ldr	r3, [r3, #4]
70003098:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
7000309c:	2b00      	cmp	r3, #0
7000309e:	d003      	beq.n	700030a8 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
700030a0:	693a      	ldr	r2, [r7, #16]
700030a2:	68fb      	ldr	r3, [r7, #12]
700030a4:	4313      	orrs	r3, r2
700030a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
700030a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
700030ac:	693b      	ldr	r3, [r7, #16]
700030ae:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
700030b2:	697b      	ldr	r3, [r7, #20]
700030b4:	3301      	adds	r3, #1
700030b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
700030b8:	683b      	ldr	r3, [r7, #0]
700030ba:	681a      	ldr	r2, [r3, #0]
700030bc:	697b      	ldr	r3, [r7, #20]
700030be:	fa22 f303 	lsr.w	r3, r2, r3
700030c2:	2b00      	cmp	r3, #0
700030c4:	f47f aebe 	bne.w	70002e44 <HAL_GPIO_Init+0x10>
  }
}
700030c8:	bf00      	nop
700030ca:	bf00      	nop
700030cc:	371c      	adds	r7, #28
700030ce:	46bd      	mov	sp, r7
700030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
700030d4:	4770      	bx	lr
700030d6:	bf00      	nop
700030d8:	58000400 	.word	0x58000400
700030dc:	0029ff7f 	.word	0x0029ff7f

700030e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
700030e0:	b480      	push	{r7}
700030e2:	b083      	sub	sp, #12
700030e4:	af00      	add	r7, sp, #0
700030e6:	6078      	str	r0, [r7, #4]
700030e8:	460b      	mov	r3, r1
700030ea:	807b      	strh	r3, [r7, #2]
700030ec:	4613      	mov	r3, r2
700030ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
700030f0:	787b      	ldrb	r3, [r7, #1]
700030f2:	2b00      	cmp	r3, #0
700030f4:	d003      	beq.n	700030fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
700030f6:	887a      	ldrh	r2, [r7, #2]
700030f8:	687b      	ldr	r3, [r7, #4]
700030fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
700030fc:	e002      	b.n	70003104 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
700030fe:	887a      	ldrh	r2, [r7, #2]
70003100:	687b      	ldr	r3, [r7, #4]
70003102:	629a      	str	r2, [r3, #40]	@ 0x28
}
70003104:	bf00      	nop
70003106:	370c      	adds	r7, #12
70003108:	46bd      	mov	sp, r7
7000310a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000310e:	4770      	bx	lr

70003110 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
70003110:	b480      	push	{r7}
70003112:	b085      	sub	sp, #20
70003114:	af00      	add	r7, sp, #0
70003116:	6078      	str	r0, [r7, #4]
70003118:	460b      	mov	r3, r1
7000311a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
7000311c:	687b      	ldr	r3, [r7, #4]
7000311e:	695b      	ldr	r3, [r3, #20]
70003120:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
70003122:	887a      	ldrh	r2, [r7, #2]
70003124:	68fb      	ldr	r3, [r7, #12]
70003126:	4013      	ands	r3, r2
70003128:	041a      	lsls	r2, r3, #16
7000312a:	68fb      	ldr	r3, [r7, #12]
7000312c:	43d9      	mvns	r1, r3
7000312e:	887b      	ldrh	r3, [r7, #2]
70003130:	400b      	ands	r3, r1
70003132:	431a      	orrs	r2, r3
70003134:	687b      	ldr	r3, [r7, #4]
70003136:	619a      	str	r2, [r3, #24]
}
70003138:	bf00      	nop
7000313a:	3714      	adds	r7, #20
7000313c:	46bd      	mov	sp, r7
7000313e:	f85d 7b04 	ldr.w	r7, [sp], #4
70003142:	4770      	bx	lr

70003144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
70003144:	b480      	push	{r7}
70003146:	b08b      	sub	sp, #44	@ 0x2c
70003148:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t prescaler;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
7000314a:	4baa      	ldr	r3, [pc, #680]	@ (700033f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
7000314c:	691b      	ldr	r3, [r3, #16]
7000314e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
70003152:	2b18      	cmp	r3, #24
70003154:	f200 8136 	bhi.w	700033c4 <HAL_RCC_GetSysClockFreq+0x280>
70003158:	a201      	add	r2, pc, #4	@ (adr r2, 70003160 <HAL_RCC_GetSysClockFreq+0x1c>)
7000315a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
7000315e:	bf00      	nop
70003160:	700031c5 	.word	0x700031c5
70003164:	700033c5 	.word	0x700033c5
70003168:	700033c5 	.word	0x700033c5
7000316c:	700033c5 	.word	0x700033c5
70003170:	700033c5 	.word	0x700033c5
70003174:	700033c5 	.word	0x700033c5
70003178:	700033c5 	.word	0x700033c5
7000317c:	700033c5 	.word	0x700033c5
70003180:	700031eb 	.word	0x700031eb
70003184:	700033c5 	.word	0x700033c5
70003188:	700033c5 	.word	0x700033c5
7000318c:	700033c5 	.word	0x700033c5
70003190:	700033c5 	.word	0x700033c5
70003194:	700033c5 	.word	0x700033c5
70003198:	700033c5 	.word	0x700033c5
7000319c:	700033c5 	.word	0x700033c5
700031a0:	700031f1 	.word	0x700031f1
700031a4:	700033c5 	.word	0x700033c5
700031a8:	700033c5 	.word	0x700033c5
700031ac:	700033c5 	.word	0x700033c5
700031b0:	700033c5 	.word	0x700033c5
700031b4:	700033c5 	.word	0x700033c5
700031b8:	700033c5 	.word	0x700033c5
700031bc:	700033c5 	.word	0x700033c5
700031c0:	700031f7 	.word	0x700031f7
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */

      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
700031c4:	4b8b      	ldr	r3, [pc, #556]	@ (700033f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
700031c6:	681b      	ldr	r3, [r3, #0]
700031c8:	f003 0320 	and.w	r3, r3, #32
700031cc:	2b00      	cmp	r3, #0
700031ce:	d009      	beq.n	700031e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
700031d0:	4b88      	ldr	r3, [pc, #544]	@ (700033f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
700031d2:	681b      	ldr	r3, [r3, #0]
700031d4:	08db      	lsrs	r3, r3, #3
700031d6:	f003 0303 	and.w	r3, r3, #3
700031da:	4a87      	ldr	r2, [pc, #540]	@ (700033f8 <HAL_RCC_GetSysClockFreq+0x2b4>)
700031dc:	fa22 f303 	lsr.w	r3, r2, r3
700031e0:	623b      	str	r3, [r7, #32]
      {
        /* Can't retrieve HSIDIV value */
        sysclockfreq = 0U;
      }

      break;
700031e2:	e0f2      	b.n	700033ca <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
700031e4:	2300      	movs	r3, #0
700031e6:	623b      	str	r3, [r7, #32]
      break;
700031e8:	e0ef      	b.n	700033ca <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
700031ea:	4b84      	ldr	r3, [pc, #528]	@ (700033fc <HAL_RCC_GetSysClockFreq+0x2b8>)
700031ec:	623b      	str	r3, [r7, #32]
      break;
700031ee:	e0ec      	b.n	700033ca <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
700031f0:	4b83      	ldr	r3, [pc, #524]	@ (70003400 <HAL_RCC_GetSysClockFreq+0x2bc>)
700031f2:	623b      	str	r3, [r7, #32]
      break;
700031f4:	e0e9      	b.n	700033ca <HAL_RCC_GetSysClockFreq+0x286>
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
700031f6:	4b7f      	ldr	r3, [pc, #508]	@ (700033f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
700031f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
700031fa:	f003 0303 	and.w	r3, r3, #3
700031fe:	61fb      	str	r3, [r7, #28]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
70003200:	4b7c      	ldr	r3, [pc, #496]	@ (700033f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70003204:	091b      	lsrs	r3, r3, #4
70003206:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
7000320a:	61bb      	str	r3, [r7, #24]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
7000320c:	4b79      	ldr	r3, [pc, #484]	@ (700033f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
7000320e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003210:	f003 0301 	and.w	r3, r3, #1
70003214:	617b      	str	r3, [r7, #20]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> 3));
70003216:	4b77      	ldr	r3, [pc, #476]	@ (700033f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
7000321a:	08db      	lsrs	r3, r3, #3
7000321c:	f3c3 030c 	ubfx	r3, r3, #0, #13
70003220:	697a      	ldr	r2, [r7, #20]
70003222:	fb02 f303 	mul.w	r3, r2, r3
70003226:	ee07 3a90 	vmov	s15, r3
7000322a:	eef8 7a67 	vcvt.f32.u32	s15, s15
7000322e:	edc7 7a04 	vstr	s15, [r7, #16]

      if (pllm != 0U)
70003232:	69bb      	ldr	r3, [r7, #24]
70003234:	2b00      	cmp	r3, #0
70003236:	f000 80c2 	beq.w	700033be <HAL_RCC_GetSysClockFreq+0x27a>
7000323a:	69fb      	ldr	r3, [r7, #28]
7000323c:	2b02      	cmp	r3, #2
7000323e:	d064      	beq.n	7000330a <HAL_RCC_GetSysClockFreq+0x1c6>
70003240:	69fb      	ldr	r3, [r7, #28]
70003242:	2b02      	cmp	r3, #2
70003244:	f200 8083 	bhi.w	7000334e <HAL_RCC_GetSysClockFreq+0x20a>
70003248:	69fb      	ldr	r3, [r7, #28]
7000324a:	2b00      	cmp	r3, #0
7000324c:	d003      	beq.n	70003256 <HAL_RCC_GetSysClockFreq+0x112>
7000324e:	69fb      	ldr	r3, [r7, #28]
70003250:	2b01      	cmp	r3, #1
70003252:	d038      	beq.n	700032c6 <HAL_RCC_GetSysClockFreq+0x182>
70003254:	e07b      	b.n	7000334e <HAL_RCC_GetSysClockFreq+0x20a>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
70003256:	4b67      	ldr	r3, [pc, #412]	@ (700033f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003258:	681b      	ldr	r3, [r3, #0]
7000325a:	f003 0320 	and.w	r3, r3, #32
7000325e:	2b00      	cmp	r3, #0
70003260:	d02d      	beq.n	700032be <HAL_RCC_GetSysClockFreq+0x17a>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
70003262:	4b64      	ldr	r3, [pc, #400]	@ (700033f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003264:	681b      	ldr	r3, [r3, #0]
70003266:	08db      	lsrs	r3, r3, #3
70003268:	f003 0303 	and.w	r3, r3, #3
7000326c:	4a62      	ldr	r2, [pc, #392]	@ (700033f8 <HAL_RCC_GetSysClockFreq+0x2b4>)
7000326e:	fa22 f303 	lsr.w	r3, r2, r3
70003272:	60fb      	str	r3, [r7, #12]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
70003274:	68fb      	ldr	r3, [r7, #12]
70003276:	ee07 3a90 	vmov	s15, r3
7000327a:	eef8 6a67 	vcvt.f32.u32	s13, s15
7000327e:	69bb      	ldr	r3, [r7, #24]
70003280:	ee07 3a90 	vmov	s15, r3
70003284:	eef8 7a67 	vcvt.f32.u32	s15, s15
70003288:	ee86 7aa7 	vdiv.f32	s14, s13, s15
7000328c:	4b59      	ldr	r3, [pc, #356]	@ (700033f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
7000328e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70003290:	f3c3 0308 	ubfx	r3, r3, #0, #9
70003294:	ee07 3a90 	vmov	s15, r3
70003298:	eef8 6a67 	vcvt.f32.u32	s13, s15
7000329c:	ed97 6a04 	vldr	s12, [r7, #16]
700032a0:	eddf 5a58 	vldr	s11, [pc, #352]	@ 70003404 <HAL_RCC_GetSysClockFreq+0x2c0>
700032a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
700032a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
700032ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
700032b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
700032b4:	ee67 7a27 	vmul.f32	s15, s14, s15
700032b8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            else
            {
              /* Can't retrieve HSIDIV value */
              pllvco = (float_t)0;
            }
            break;
700032bc:	e069      	b.n	70003392 <HAL_RCC_GetSysClockFreq+0x24e>
              pllvco = (float_t)0;
700032be:	f04f 0300 	mov.w	r3, #0
700032c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
700032c4:	e065      	b.n	70003392 <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
700032c6:	69bb      	ldr	r3, [r7, #24]
700032c8:	ee07 3a90 	vmov	s15, r3
700032cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
700032d0:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 70003408 <HAL_RCC_GetSysClockFreq+0x2c4>
700032d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
700032d8:	4b46      	ldr	r3, [pc, #280]	@ (700033f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
700032da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
700032dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
700032e0:	ee07 3a90 	vmov	s15, r3
700032e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
700032e8:	ed97 6a04 	vldr	s12, [r7, #16]
700032ec:	eddf 5a45 	vldr	s11, [pc, #276]	@ 70003404 <HAL_RCC_GetSysClockFreq+0x2c0>
700032f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
700032f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
700032f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
700032fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
70003300:	ee67 7a27 	vmul.f32	s15, s14, s15
70003304:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
70003308:	e043      	b.n	70003392 <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
7000330a:	69bb      	ldr	r3, [r7, #24]
7000330c:	ee07 3a90 	vmov	s15, r3
70003310:	eef8 7a67 	vcvt.f32.u32	s15, s15
70003314:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 7000340c <HAL_RCC_GetSysClockFreq+0x2c8>
70003318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
7000331c:	4b35      	ldr	r3, [pc, #212]	@ (700033f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
7000331e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70003320:	f3c3 0308 	ubfx	r3, r3, #0, #9
70003324:	ee07 3a90 	vmov	s15, r3
70003328:	eef8 6a67 	vcvt.f32.u32	s13, s15
7000332c:	ed97 6a04 	vldr	s12, [r7, #16]
70003330:	eddf 5a34 	vldr	s11, [pc, #208]	@ 70003404 <HAL_RCC_GetSysClockFreq+0x2c0>
70003334:	eec6 7a25 	vdiv.f32	s15, s12, s11
70003338:	ee76 7aa7 	vadd.f32	s15, s13, s15
7000333c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70003340:	ee77 7aa6 	vadd.f32	s15, s15, s13
70003344:	ee67 7a27 	vmul.f32	s15, s14, s15
70003348:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
7000334c:	e021      	b.n	70003392 <HAL_RCC_GetSysClockFreq+0x24e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
7000334e:	69bb      	ldr	r3, [r7, #24]
70003350:	ee07 3a90 	vmov	s15, r3
70003354:	eef8 7a67 	vcvt.f32.u32	s15, s15
70003358:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 70003408 <HAL_RCC_GetSysClockFreq+0x2c4>
7000335c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70003360:	4b24      	ldr	r3, [pc, #144]	@ (700033f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70003364:	f3c3 0308 	ubfx	r3, r3, #0, #9
70003368:	ee07 3a90 	vmov	s15, r3
7000336c:	eef8 6a67 	vcvt.f32.u32	s13, s15
70003370:	ed97 6a04 	vldr	s12, [r7, #16]
70003374:	eddf 5a23 	vldr	s11, [pc, #140]	@ 70003404 <HAL_RCC_GetSysClockFreq+0x2c0>
70003378:	eec6 7a25 	vdiv.f32	s15, s12, s11
7000337c:	ee76 7aa7 	vadd.f32	s15, s13, s15
70003380:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70003384:	ee77 7aa6 	vadd.f32	s15, s15, s13
70003388:	ee67 7a27 	vmul.f32	s15, s14, s15
7000338c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
70003390:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U) ;
70003392:	4b18      	ldr	r3, [pc, #96]	@ (700033f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70003396:	0a5b      	lsrs	r3, r3, #9
70003398:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
7000339c:	3301      	adds	r3, #1
7000339e:	60bb      	str	r3, [r7, #8]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
700033a0:	68bb      	ldr	r3, [r7, #8]
700033a2:	ee07 3a90 	vmov	s15, r3
700033a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
700033aa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
700033ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
700033b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
700033b6:	ee17 3a90 	vmov	r3, s15
700033ba:	623b      	str	r3, [r7, #32]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
700033bc:	e005      	b.n	700033ca <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
700033be:	2300      	movs	r3, #0
700033c0:	623b      	str	r3, [r7, #32]
      break;
700033c2:	e002      	b.n	700033ca <HAL_RCC_GetSysClockFreq+0x286>

    default:
      sysclockfreq = CSI_VALUE;
700033c4:	4b0d      	ldr	r3, [pc, #52]	@ (700033fc <HAL_RCC_GetSysClockFreq+0x2b8>)
700033c6:	623b      	str	r3, [r7, #32]
      break;
700033c8:	bf00      	nop
  }

  prescaler = RCC->CDCFGR & RCC_CDCFGR_CPRE;
700033ca:	4b0a      	ldr	r3, [pc, #40]	@ (700033f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
700033cc:	699b      	ldr	r3, [r3, #24]
700033ce:	f003 030f 	and.w	r3, r3, #15
700033d2:	607b      	str	r3, [r7, #4]
  if (prescaler >= 8U)
700033d4:	687b      	ldr	r3, [r7, #4]
700033d6:	2b07      	cmp	r3, #7
700033d8:	d905      	bls.n	700033e6 <HAL_RCC_GetSysClockFreq+0x2a2>
  {
    sysclockfreq = sysclockfreq >> (prescaler - RCC_CDCFGR_CPRE_3 + 1U);
700033da:	687b      	ldr	r3, [r7, #4]
700033dc:	3b07      	subs	r3, #7
700033de:	6a3a      	ldr	r2, [r7, #32]
700033e0:	fa22 f303 	lsr.w	r3, r2, r3
700033e4:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
700033e6:	6a3b      	ldr	r3, [r7, #32]
}
700033e8:	4618      	mov	r0, r3
700033ea:	372c      	adds	r7, #44	@ 0x2c
700033ec:	46bd      	mov	sp, r7
700033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
700033f2:	4770      	bx	lr
700033f4:	58024400 	.word	0x58024400
700033f8:	03d09000 	.word	0x03d09000
700033fc:	003d0900 	.word	0x003d0900
70003400:	016e3600 	.word	0x016e3600
70003404:	46000000 	.word	0x46000000
70003408:	4a742400 	.word	0x4a742400
7000340c:	4bb71b00 	.word	0x4bb71b00

70003410 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
70003410:	b580      	push	{r7, lr}
70003412:	b084      	sub	sp, #16
70003414:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  const uint8_t AHBPrescTable[8] = {1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
70003416:	4a10      	ldr	r2, [pc, #64]	@ (70003458 <HAL_RCC_GetHCLKFreq+0x48>)
70003418:	463b      	mov	r3, r7
7000341a:	e892 0003 	ldmia.w	r2, {r0, r1}
7000341e:	e883 0003 	stmia.w	r3, {r0, r1}

  /* SysClk */
  clock = HAL_RCC_GetSysClockFreq();
70003422:	f7ff fe8f 	bl	70003144 <HAL_RCC_GetSysClockFreq>
70003426:	60f8      	str	r0, [r7, #12]
  /* Bus matrix divider */
  prescaler = (RCC->BMCFGR & RCC_BMCFGR_BMPRE) >> RCC_BMCFGR_BMPRE_Pos;
70003428:	4b0c      	ldr	r3, [pc, #48]	@ (7000345c <HAL_RCC_GetHCLKFreq+0x4c>)
7000342a:	69db      	ldr	r3, [r3, #28]
7000342c:	f003 030f 	and.w	r3, r3, #15
70003430:	60bb      	str	r3, [r7, #8]
  if (prescaler >= 8U)
70003432:	68bb      	ldr	r3, [r7, #8]
70003434:	2b07      	cmp	r3, #7
70003436:	d909      	bls.n	7000344c <HAL_RCC_GetHCLKFreq+0x3c>
  {
    clock = clock >> AHBPrescTable[prescaler - 8U];
70003438:	68bb      	ldr	r3, [r7, #8]
7000343a:	3b08      	subs	r3, #8
7000343c:	3310      	adds	r3, #16
7000343e:	443b      	add	r3, r7
70003440:	f813 3c10 	ldrb.w	r3, [r3, #-16]
70003444:	461a      	mov	r2, r3
70003446:	68fb      	ldr	r3, [r7, #12]
70003448:	40d3      	lsrs	r3, r2
7000344a:	60fb      	str	r3, [r7, #12]
  }
  return (clock);
7000344c:	68fb      	ldr	r3, [r7, #12]
}
7000344e:	4618      	mov	r0, r3
70003450:	3710      	adds	r7, #16
70003452:	46bd      	mov	sp, r7
70003454:	bd80      	pop	{r7, pc}
70003456:	bf00      	nop
70003458:	70014c00 	.word	0x70014c00
7000345c:	58024400 	.word	0x58024400

70003460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
70003460:	b580      	push	{r7, lr}
70003462:	b082      	sub	sp, #8
70003464:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK1 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
70003466:	f7ff ffd3 	bl	70003410 <HAL_RCC_GetHCLKFreq>
7000346a:	6078      	str	r0, [r7, #4]
  /* APB1 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE1) >> RCC_APBCFGR_PPRE1_Pos;
7000346c:	4b09      	ldr	r3, [pc, #36]	@ (70003494 <HAL_RCC_GetPCLK1Freq+0x34>)
7000346e:	6a1b      	ldr	r3, [r3, #32]
70003470:	f003 0307 	and.w	r3, r3, #7
70003474:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
70003476:	683b      	ldr	r3, [r7, #0]
70003478:	2b03      	cmp	r3, #3
7000347a:	d905      	bls.n	70003488 <HAL_RCC_GetPCLK1Freq+0x28>
  {
    clock = clock >> (prescaler - 3U);
7000347c:	683b      	ldr	r3, [r7, #0]
7000347e:	3b03      	subs	r3, #3
70003480:	687a      	ldr	r2, [r7, #4]
70003482:	fa22 f303 	lsr.w	r3, r2, r3
70003486:	607b      	str	r3, [r7, #4]
  }
  return (clock);
70003488:	687b      	ldr	r3, [r7, #4]
}
7000348a:	4618      	mov	r0, r3
7000348c:	3708      	adds	r7, #8
7000348e:	46bd      	mov	sp, r7
70003490:	bd80      	pop	{r7, pc}
70003492:	bf00      	nop
70003494:	58024400 	.word	0x58024400

70003498 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
70003498:	b480      	push	{r7}
7000349a:	b083      	sub	sp, #12
7000349c:	af00      	add	r7, sp, #0
7000349e:	6078      	str	r0, [r7, #4]
700034a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK  | \
700034a2:	687b      	ldr	r3, [r7, #4]
700034a4:	223f      	movs	r2, #63	@ 0x3f
700034a6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK1  | RCC_CLOCKTYPE_PCLK2 | \
                                 RCC_CLOCKTYPE_PCLK4  | RCC_CLOCKTYPE_PCLK5;

  /* Get the SYSCLK source ---------------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
700034a8:	4b1a      	ldr	r3, [pc, #104]	@ (70003514 <HAL_RCC_GetClockConfig+0x7c>)
700034aa:	691b      	ldr	r3, [r3, #16]
700034ac:	f003 0207 	and.w	r2, r3, #7
700034b0:	687b      	ldr	r3, [r7, #4]
700034b2:	605a      	str	r2, [r3, #4]

  /* Get the SYSCLK configuration---------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = READ_BIT(RCC->CDCFGR, RCC_CDCFGR_CPRE);
700034b4:	4b17      	ldr	r3, [pc, #92]	@ (70003514 <HAL_RCC_GetClockConfig+0x7c>)
700034b6:	699b      	ldr	r3, [r3, #24]
700034b8:	f003 020f 	and.w	r2, r3, #15
700034bc:	687b      	ldr	r3, [r7, #4]
700034be:	609a      	str	r2, [r3, #8]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->BMCFGR, RCC_BMCFGR_BMPRE);
700034c0:	4b14      	ldr	r3, [pc, #80]	@ (70003514 <HAL_RCC_GetClockConfig+0x7c>)
700034c2:	69db      	ldr	r3, [r3, #28]
700034c4:	f003 020f 	and.w	r2, r3, #15
700034c8:	687b      	ldr	r3, [r7, #4]
700034ca:	60da      	str	r2, [r3, #12]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->APBCFGR, RCC_APBCFGR_PPRE1);
700034cc:	4b11      	ldr	r3, [pc, #68]	@ (70003514 <HAL_RCC_GetClockConfig+0x7c>)
700034ce:	6a1b      	ldr	r3, [r3, #32]
700034d0:	f003 0207 	and.w	r2, r3, #7
700034d4:	687b      	ldr	r3, [r7, #4]
700034d6:	611a      	str	r2, [r3, #16]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = READ_BIT(RCC->APBCFGR, RCC_APBCFGR_PPRE2);
700034d8:	4b0e      	ldr	r3, [pc, #56]	@ (70003514 <HAL_RCC_GetClockConfig+0x7c>)
700034da:	6a1b      	ldr	r3, [r3, #32]
700034dc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
700034e0:	687b      	ldr	r3, [r7, #4]
700034e2:	615a      	str	r2, [r3, #20]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = READ_BIT(RCC->APBCFGR, RCC_APBCFGR_PPRE4);
700034e4:	4b0b      	ldr	r3, [pc, #44]	@ (70003514 <HAL_RCC_GetClockConfig+0x7c>)
700034e6:	6a1b      	ldr	r3, [r3, #32]
700034e8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
700034ec:	687b      	ldr	r3, [r7, #4]
700034ee:	619a      	str	r2, [r3, #24]

  /* Get the APB5 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB5CLKDivider = READ_BIT(RCC->APBCFGR, RCC_APBCFGR_PPRE5);
700034f0:	4b08      	ldr	r3, [pc, #32]	@ (70003514 <HAL_RCC_GetClockConfig+0x7c>)
700034f2:	6a1b      	ldr	r3, [r3, #32]
700034f4:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
700034f8:	687b      	ldr	r3, [r7, #4]
700034fa:	61da      	str	r2, [r3, #28]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
700034fc:	4b06      	ldr	r3, [pc, #24]	@ (70003518 <HAL_RCC_GetClockConfig+0x80>)
700034fe:	681b      	ldr	r3, [r3, #0]
70003500:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
70003504:	683b      	ldr	r3, [r7, #0]
70003506:	601a      	str	r2, [r3, #0]
}
70003508:	bf00      	nop
7000350a:	370c      	adds	r7, #12
7000350c:	46bd      	mov	sp, r7
7000350e:	f85d 7b04 	ldr.w	r7, [sp], #4
70003512:	4770      	bx	lr
70003514:	58024400 	.word	0x58024400
70003518:	52002000 	.word	0x52002000

7000351c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
7000351c:	b580      	push	{r7, lr}
7000351e:	b086      	sub	sp, #24
70003520:	af00      	add	r7, sp, #0
70003522:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
70003524:	2300      	movs	r3, #0
70003526:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
70003528:	2300      	movs	r3, #0
7000352a:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
7000352c:	687b      	ldr	r3, [r7, #4]
7000352e:	681b      	ldr	r3, [r3, #0]
70003530:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
70003534:	2b00      	cmp	r3, #0
70003536:	f000 8081 	beq.w	7000363c <HAL_RCCEx_PeriphCLKConfig+0x120>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
7000353a:	4b8c      	ldr	r3, [pc, #560]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000353c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000353e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
70003542:	613b      	str	r3, [r7, #16]

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
70003544:	693b      	ldr	r3, [r7, #16]
70003546:	2b00      	cmp	r3, #0
70003548:	d029      	beq.n	7000359e <HAL_RCCEx_PeriphCLKConfig+0x82>
7000354a:	687b      	ldr	r3, [r7, #4]
7000354c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
7000354e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
70003552:	693a      	ldr	r2, [r7, #16]
70003554:	429a      	cmp	r2, r3
70003556:	d022      	beq.n	7000359e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
70003558:	4b85      	ldr	r3, [pc, #532]	@ (70003770 <HAL_RCCEx_PeriphCLKConfig+0x254>)
7000355a:	681b      	ldr	r3, [r3, #0]
7000355c:	4a84      	ldr	r2, [pc, #528]	@ (70003770 <HAL_RCCEx_PeriphCLKConfig+0x254>)
7000355e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
70003562:	6013      	str	r3, [r2, #0]

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
70003564:	4b82      	ldr	r3, [pc, #520]	@ (70003770 <HAL_RCCEx_PeriphCLKConfig+0x254>)
70003566:	681b      	ldr	r3, [r3, #0]
70003568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
7000356c:	2b00      	cmp	r3, #0
7000356e:	d102      	bne.n	70003576 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      {
        ret = HAL_ERROR;
70003570:	2301      	movs	r3, #1
70003572:	75fb      	strb	r3, [r7, #23]
70003574:	e013      	b.n	7000359e <HAL_RCCEx_PeriphCLKConfig+0x82>
      }
      else
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        /* excepted the RTC clock source selection that will be changed */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
70003576:	4b7d      	ldr	r3, [pc, #500]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000357a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
7000357e:	613b      	str	r3, [r7, #16]
        __HAL_RCC_BACKUPRESET_FORCE();
70003580:	4b7a      	ldr	r3, [pc, #488]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70003584:	4a79      	ldr	r2, [pc, #484]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003586:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
7000358a:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
7000358c:	4b77      	ldr	r3, [pc, #476]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000358e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70003590:	4a76      	ldr	r2, [pc, #472]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
70003596:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the content of BDCR register */
        WRITE_REG(RCC->BDCR, tmpreg);
70003598:	4a74      	ldr	r2, [pc, #464]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000359a:	693b      	ldr	r3, [r7, #16]
7000359c:	6713      	str	r3, [r2, #112]	@ 0x70
      }
    }

    if (ret == HAL_OK)
7000359e:	7dfb      	ldrb	r3, [r7, #23]
700035a0:	2b00      	cmp	r3, #0
700035a2:	d149      	bne.n	70003638 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
700035a4:	687b      	ldr	r3, [r7, #4]
700035a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
700035a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
700035ac:	d115      	bne.n	700035da <HAL_RCCEx_PeriphCLKConfig+0xbe>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
700035ae:	f7fd fd51 	bl	70001054 <HAL_GetTick>
700035b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
700035b4:	e00b      	b.n	700035ce <HAL_RCCEx_PeriphCLKConfig+0xb2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
700035b6:	f7fd fd4d 	bl	70001054 <HAL_GetTick>
700035ba:	4602      	mov	r2, r0
700035bc:	68fb      	ldr	r3, [r7, #12]
700035be:	1ad3      	subs	r3, r2, r3
700035c0:	f241 3288 	movw	r2, #5000	@ 0x1388
700035c4:	4293      	cmp	r3, r2
700035c6:	d902      	bls.n	700035ce <HAL_RCCEx_PeriphCLKConfig+0xb2>
          {
            ret = HAL_TIMEOUT;
700035c8:	2303      	movs	r3, #3
700035ca:	75fb      	strb	r3, [r7, #23]
            break;
700035cc:	e005      	b.n	700035da <HAL_RCCEx_PeriphCLKConfig+0xbe>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
700035ce:	4b67      	ldr	r3, [pc, #412]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
700035d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
700035d2:	f003 0302 	and.w	r3, r3, #2
700035d6:	2b00      	cmp	r3, #0
700035d8:	d0ed      	beq.n	700035b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
          }
        }
      }

      if (ret == HAL_OK)
700035da:	7dfb      	ldrb	r3, [r7, #23]
700035dc:	2b00      	cmp	r3, #0
700035de:	d128      	bne.n	70003632 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
700035e0:	687b      	ldr	r3, [r7, #4]
700035e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
700035e4:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
700035e8:	2b00      	cmp	r3, #0
700035ea:	d00c      	beq.n	70003606 <HAL_RCCEx_PeriphCLKConfig+0xea>
700035ec:	4b5f      	ldr	r3, [pc, #380]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
700035ee:	691b      	ldr	r3, [r3, #16]
700035f0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
700035f4:	687b      	ldr	r3, [r7, #4]
700035f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
700035f8:	0919      	lsrs	r1, r3, #4
700035fa:	4b5e      	ldr	r3, [pc, #376]	@ (70003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
700035fc:	400b      	ands	r3, r1
700035fe:	495b      	ldr	r1, [pc, #364]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003600:	4313      	orrs	r3, r2
70003602:	610b      	str	r3, [r1, #16]
70003604:	e005      	b.n	70003612 <HAL_RCCEx_PeriphCLKConfig+0xf6>
70003606:	4b59      	ldr	r3, [pc, #356]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003608:	691b      	ldr	r3, [r3, #16]
7000360a:	4a58      	ldr	r2, [pc, #352]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000360c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
70003610:	6113      	str	r3, [r2, #16]
70003612:	4b56      	ldr	r3, [pc, #344]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003614:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
70003616:	687b      	ldr	r3, [r7, #4]
70003618:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
7000361a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
7000361e:	4953      	ldr	r1, [pc, #332]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003620:	4313      	orrs	r3, r2
70003622:	670b      	str	r3, [r1, #112]	@ 0x70
        __HAL_RCC_RTC_ENABLE();
70003624:	4b51      	ldr	r3, [pc, #324]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70003628:	4a50      	ldr	r2, [pc, #320]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000362a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
7000362e:	6713      	str	r3, [r2, #112]	@ 0x70
70003630:	e004      	b.n	7000363c <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
      else
      {
        /* set overall return value */
        status = ret;
70003632:	7dfb      	ldrb	r3, [r7, #23]
70003634:	75bb      	strb	r3, [r7, #22]
70003636:	e001      	b.n	7000363c <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
70003638:	7dfb      	ldrb	r3, [r7, #23]
7000363a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
7000363c:	687b      	ldr	r3, [r7, #4]
7000363e:	681b      	ldr	r3, [r3, #0]
70003640:	f003 0301 	and.w	r3, r3, #1
70003644:	2b00      	cmp	r3, #0
70003646:	d030      	beq.n	700036aa <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
70003648:	687b      	ldr	r3, [r7, #4]
7000364a:	685b      	ldr	r3, [r3, #4]
7000364c:	2b03      	cmp	r3, #3
7000364e:	d819      	bhi.n	70003684 <HAL_RCCEx_PeriphCLKConfig+0x168>
70003650:	a201      	add	r2, pc, #4	@ (adr r2, 70003658 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
70003652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70003656:	bf00      	nop
70003658:	7000368b 	.word	0x7000368b
7000365c:	70003669 	.word	0x70003669
70003660:	70003677 	.word	0x70003677
70003664:	7000368b 	.word	0x7000368b
      case RCC_FMCCLKSOURCE_HCLK:   /* HCLK  clock selected as FMC kernel peripheral clock */
        break;

      case RCC_FMCCLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for FMC kernel */
        /* Enable FMC kernel clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
70003668:	4b40      	ldr	r3, [pc, #256]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000366a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000366c:	4a3f      	ldr	r2, [pc, #252]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000366e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
70003672:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
70003674:	e00a      	b.n	7000368c <HAL_RCCEx_PeriphCLKConfig+0x170>

      case RCC_FMCCLKSOURCE_PLL2R:  /* PLL2_R is used as clock source for FMC kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
70003676:	4b3d      	ldr	r3, [pc, #244]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000367a:	4a3c      	ldr	r2, [pc, #240]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000367c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
70003680:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
70003682:	e003      	b.n	7000368c <HAL_RCCEx_PeriphCLKConfig+0x170>
      case RCC_FMCCLKSOURCE_HSI:   /* HSI oscillator is used as clock source for FMC kernel */
        /* FMC kernel clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003684:	2301      	movs	r3, #1
70003686:	75fb      	strb	r3, [r7, #23]
        break;
70003688:	e000      	b.n	7000368c <HAL_RCCEx_PeriphCLKConfig+0x170>
        break;
7000368a:	bf00      	nop
    }

    if (ret == HAL_OK)
7000368c:	7dfb      	ldrb	r3, [r7, #23]
7000368e:	2b00      	cmp	r3, #0
70003690:	d109      	bne.n	700036a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Set the source of FMC kernel clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
70003692:	4b36      	ldr	r3, [pc, #216]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70003696:	f023 0203 	bic.w	r2, r3, #3
7000369a:	687b      	ldr	r3, [r7, #4]
7000369c:	685b      	ldr	r3, [r3, #4]
7000369e:	4933      	ldr	r1, [pc, #204]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
700036a0:	4313      	orrs	r3, r2
700036a2:	64cb      	str	r3, [r1, #76]	@ 0x4c
700036a4:	e001      	b.n	700036aa <HAL_RCCEx_PeriphCLKConfig+0x18e>
    }
    else
    {
      /* set overall return value */
      status = ret;
700036a6:	7dfb      	ldrb	r3, [r7, #23]
700036a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
700036aa:	687b      	ldr	r3, [r7, #4]
700036ac:	681b      	ldr	r3, [r3, #0]
700036ae:	f003 0302 	and.w	r3, r3, #2
700036b2:	2b00      	cmp	r3, #0
700036b4:	d02a      	beq.n	7000370c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    switch (PeriphClkInit->Xspi1ClockSelection)
700036b6:	687b      	ldr	r3, [r7, #4]
700036b8:	689b      	ldr	r3, [r3, #8]
700036ba:	2b20      	cmp	r3, #32
700036bc:	d00c      	beq.n	700036d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
700036be:	2b20      	cmp	r3, #32
700036c0:	d811      	bhi.n	700036e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
700036c2:	2b00      	cmp	r3, #0
700036c4:	d012      	beq.n	700036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
700036c6:	2b10      	cmp	r3, #16
700036c8:	d10d      	bne.n	700036e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      case RCC_XSPI1CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi1 */
        /* Nothing to do */
        break;

      case RCC_XSPI1CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
700036ca:	4b28      	ldr	r3, [pc, #160]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
700036cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700036ce:	4a27      	ldr	r2, [pc, #156]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
700036d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
700036d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
700036d6:	e00a      	b.n	700036ee <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      case RCC_XSPI1CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
700036d8:	4b24      	ldr	r3, [pc, #144]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
700036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700036dc:	4a23      	ldr	r2, [pc, #140]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
700036de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
700036e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
700036e4:	e003      	b.n	700036ee <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      default:
        ret = HAL_ERROR;
700036e6:	2301      	movs	r3, #1
700036e8:	75fb      	strb	r3, [r7, #23]
        break;
700036ea:	e000      	b.n	700036ee <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        break;
700036ec:	bf00      	nop
    }

    if (ret == HAL_OK)
700036ee:	7dfb      	ldrb	r3, [r7, #23]
700036f0:	2b00      	cmp	r3, #0
700036f2:	d109      	bne.n	70003708 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      /* Configure the XSPI1 clock source */
      __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
700036f4:	4b1d      	ldr	r3, [pc, #116]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
700036f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
700036f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
700036fc:	687b      	ldr	r3, [r7, #4]
700036fe:	689b      	ldr	r3, [r3, #8]
70003700:	491a      	ldr	r1, [pc, #104]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003702:	4313      	orrs	r3, r2
70003704:	64cb      	str	r3, [r1, #76]	@ 0x4c
70003706:	e001      	b.n	7000370c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003708:	7dfb      	ldrb	r3, [r7, #23]
7000370a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
7000370c:	687b      	ldr	r3, [r7, #4]
7000370e:	681b      	ldr	r3, [r3, #0]
70003710:	f003 0304 	and.w	r3, r3, #4
70003714:	2b00      	cmp	r3, #0
70003716:	d031      	beq.n	7000377c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    switch (PeriphClkInit->Xspi2ClockSelection)
70003718:	687b      	ldr	r3, [r7, #4]
7000371a:	68db      	ldr	r3, [r3, #12]
7000371c:	2b80      	cmp	r3, #128	@ 0x80
7000371e:	d00c      	beq.n	7000373a <HAL_RCCEx_PeriphCLKConfig+0x21e>
70003720:	2b80      	cmp	r3, #128	@ 0x80
70003722:	d811      	bhi.n	70003748 <HAL_RCCEx_PeriphCLKConfig+0x22c>
70003724:	2b00      	cmp	r3, #0
70003726:	d012      	beq.n	7000374e <HAL_RCCEx_PeriphCLKConfig+0x232>
70003728:	2b40      	cmp	r3, #64	@ 0x40
7000372a:	d10d      	bne.n	70003748 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      case RCC_XSPI2CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi2 */
        /* Nothing to do */
        break;

      case RCC_XSPI2CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
7000372c:	4b0f      	ldr	r3, [pc, #60]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000372e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003730:	4a0e      	ldr	r2, [pc, #56]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003732:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
70003736:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
70003738:	e00a      	b.n	70003750 <HAL_RCCEx_PeriphCLKConfig+0x234>

      case RCC_XSPI2CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
7000373a:	4b0c      	ldr	r3, [pc, #48]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000373c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000373e:	4a0b      	ldr	r2, [pc, #44]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003740:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
70003744:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
70003746:	e003      	b.n	70003750 <HAL_RCCEx_PeriphCLKConfig+0x234>

      default:
        ret = HAL_ERROR;
70003748:	2301      	movs	r3, #1
7000374a:	75fb      	strb	r3, [r7, #23]
        break;
7000374c:	e000      	b.n	70003750 <HAL_RCCEx_PeriphCLKConfig+0x234>
        break;
7000374e:	bf00      	nop
    }

    if (ret == HAL_OK)
70003750:	7dfb      	ldrb	r3, [r7, #23]
70003752:	2b00      	cmp	r3, #0
70003754:	d110      	bne.n	70003778 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Configure the XSPI2 clock source */
      __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
70003756:	4b05      	ldr	r3, [pc, #20]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
7000375a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
7000375e:	687b      	ldr	r3, [r7, #4]
70003760:	68db      	ldr	r3, [r3, #12]
70003762:	4902      	ldr	r1, [pc, #8]	@ (7000376c <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003764:	4313      	orrs	r3, r2
70003766:	64cb      	str	r3, [r1, #76]	@ 0x4c
70003768:	e008      	b.n	7000377c <HAL_RCCEx_PeriphCLKConfig+0x260>
7000376a:	bf00      	nop
7000376c:	58024400 	.word	0x58024400
70003770:	58024800 	.word	0x58024800
70003774:	0fffffcf 	.word	0x0fffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
70003778:	7dfb      	ldrb	r3, [r7, #23]
7000377a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
7000377c:	687b      	ldr	r3, [r7, #4]
7000377e:	681b      	ldr	r3, [r3, #0]
70003780:	f003 0308 	and.w	r3, r3, #8
70003784:	2b00      	cmp	r3, #0
70003786:	d008      	beq.n	7000379a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
70003788:	4b93      	ldr	r3, [pc, #588]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
7000378a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
7000378c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
70003790:	687b      	ldr	r3, [r7, #4]
70003792:	691b      	ldr	r3, [r3, #16]
70003794:	4990      	ldr	r1, [pc, #576]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70003796:	4313      	orrs	r3, r2
70003798:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------------- SDMMC12 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC12) == RCC_PERIPHCLK_SDMMC12)
7000379a:	687b      	ldr	r3, [r7, #4]
7000379c:	681b      	ldr	r3, [r3, #0]
7000379e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
700037a2:	2b00      	cmp	r3, #0
700037a4:	d026      	beq.n	700037f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
700037a6:	687b      	ldr	r3, [r7, #4]
700037a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
700037aa:	2b00      	cmp	r3, #0
700037ac:	d002      	beq.n	700037b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
700037ae:	2b04      	cmp	r3, #4
700037b0:	d007      	beq.n	700037c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
700037b2:	e00d      	b.n	700037d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      case RCC_SDMMC12CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
700037b4:	4b88      	ldr	r3, [pc, #544]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700037b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700037b8:	4a87      	ldr	r2, [pc, #540]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700037ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
700037be:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
700037c0:	e009      	b.n	700037d6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      case RCC_SDMMC12CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
700037c2:	4b85      	ldr	r3, [pc, #532]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700037c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700037c6:	4a84      	ldr	r2, [pc, #528]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700037c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
700037cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
700037ce:	e002      	b.n	700037d6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      default:
        ret = HAL_ERROR;
700037d0:	2301      	movs	r3, #1
700037d2:	75fb      	strb	r3, [r7, #23]
        break;
700037d4:	bf00      	nop
    }

    if (ret == HAL_OK)
700037d6:	7dfb      	ldrb	r3, [r7, #23]
700037d8:	2b00      	cmp	r3, #0
700037da:	d109      	bne.n	700037f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
    {
      /* Set the source of SDMMC12 clock*/
      __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
700037dc:	4b7e      	ldr	r3, [pc, #504]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700037de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
700037e0:	f023 0204 	bic.w	r2, r3, #4
700037e4:	687b      	ldr	r3, [r7, #4]
700037e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
700037e8:	497b      	ldr	r1, [pc, #492]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700037ea:	4313      	orrs	r3, r2
700037ec:	64cb      	str	r3, [r1, #76]	@ 0x4c
700037ee:	e001      	b.n	700037f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
700037f0:	7dfb      	ldrb	r3, [r7, #23]
700037f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
700037f4:	687b      	ldr	r3, [r7, #4]
700037f6:	681b      	ldr	r3, [r3, #0]
700037f8:	f003 0310 	and.w	r3, r3, #16
700037fc:	2b00      	cmp	r3, #0
700037fe:	d02e      	beq.n	7000385e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
70003800:	687b      	ldr	r3, [r7, #4]
70003802:	695b      	ldr	r3, [r3, #20]
70003804:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
70003808:	d019      	beq.n	7000383e <HAL_RCCEx_PeriphCLKConfig+0x322>
7000380a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
7000380e:	d813      	bhi.n	70003838 <HAL_RCCEx_PeriphCLKConfig+0x31c>
70003810:	2b00      	cmp	r3, #0
70003812:	d003      	beq.n	7000381c <HAL_RCCEx_PeriphCLKConfig+0x300>
70003814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
70003818:	d007      	beq.n	7000382a <HAL_RCCEx_PeriphCLKConfig+0x30e>
7000381a:	e00d      	b.n	70003838 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    {

      case RCC_ADCCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for ADC */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
7000381c:	4b6e      	ldr	r3, [pc, #440]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
7000381e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003820:	4a6d      	ldr	r2, [pc, #436]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70003822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70003826:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
70003828:	e00a      	b.n	70003840 <HAL_RCCEx_PeriphCLKConfig+0x324>

      case RCC_ADCCLKSOURCE_PLL3R: /* PLL3_R is used as clock source for ADC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
7000382a:	4b6b      	ldr	r3, [pc, #428]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
7000382c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000382e:	4a6a      	ldr	r2, [pc, #424]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70003830:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70003834:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
70003836:	e003      	b.n	70003840 <HAL_RCCEx_PeriphCLKConfig+0x324>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003838:	2301      	movs	r3, #1
7000383a:	75fb      	strb	r3, [r7, #23]
        break;
7000383c:	e000      	b.n	70003840 <HAL_RCCEx_PeriphCLKConfig+0x324>
        break;
7000383e:	bf00      	nop
    }

    if (ret == HAL_OK)
70003840:	7dfb      	ldrb	r3, [r7, #23]
70003842:	2b00      	cmp	r3, #0
70003844:	d109      	bne.n	7000385a <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
70003846:	4b64      	ldr	r3, [pc, #400]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70003848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
7000384a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
7000384e:	687b      	ldr	r3, [r7, #4]
70003850:	695b      	ldr	r3, [r3, #20]
70003852:	4961      	ldr	r1, [pc, #388]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70003854:	4313      	orrs	r3, r2
70003856:	64cb      	str	r3, [r1, #76]	@ 0x4c
70003858:	e001      	b.n	7000385e <HAL_RCCEx_PeriphCLKConfig+0x342>
    }
    else
    {
      /* set overall return value */
      status = ret;
7000385a:	7dfb      	ldrb	r3, [r7, #23]
7000385c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
7000385e:	687b      	ldr	r3, [r7, #4]
70003860:	681b      	ldr	r3, [r3, #0]
70003862:	f003 0320 	and.w	r3, r3, #32
70003866:	2b00      	cmp	r3, #0
70003868:	d03f      	beq.n	700038ea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    switch (PeriphClkInit->Adf1ClockSelection)
7000386a:	687b      	ldr	r3, [r7, #4]
7000386c:	699b      	ldr	r3, [r3, #24]
7000386e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
70003872:	d02a      	beq.n	700038ca <HAL_RCCEx_PeriphCLKConfig+0x3ae>
70003874:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
70003878:	d824      	bhi.n	700038c4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
7000387a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
7000387e:	d024      	beq.n	700038ca <HAL_RCCEx_PeriphCLKConfig+0x3ae>
70003880:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
70003884:	d81e      	bhi.n	700038c4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
70003886:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
7000388a:	d01e      	beq.n	700038ca <HAL_RCCEx_PeriphCLKConfig+0x3ae>
7000388c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
70003890:	d818      	bhi.n	700038c4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
70003892:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
70003896:	d00e      	beq.n	700038b6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
70003898:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
7000389c:	d812      	bhi.n	700038c4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
7000389e:	2b00      	cmp	r3, #0
700038a0:	d013      	beq.n	700038ca <HAL_RCCEx_PeriphCLKConfig+0x3ae>
700038a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
700038a6:	d10d      	bne.n	700038c4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      case RCC_ADF1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for ADF1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
700038a8:	4b4b      	ldr	r3, [pc, #300]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700038aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700038ac:	4a4a      	ldr	r2, [pc, #296]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700038ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
700038b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
700038b4:	e00a      	b.n	700038cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>

      case RCC_ADF1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for ADF1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
700038b6:	4b48      	ldr	r3, [pc, #288]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700038b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700038ba:	4a47      	ldr	r2, [pc, #284]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700038bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
700038c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
700038c2:	e003      	b.n	700038cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      case RCC_ADF1CLKSOURCE_HSI:    /* HSI is used as clock source for ADF1 */
        /* ADF1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
700038c4:	2301      	movs	r3, #1
700038c6:	75fb      	strb	r3, [r7, #23]
        break;
700038c8:	e000      	b.n	700038cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        break;
700038ca:	bf00      	nop
    }

    if (ret == HAL_OK)
700038cc:	7dfb      	ldrb	r3, [r7, #23]
700038ce:	2b00      	cmp	r3, #0
700038d0:	d109      	bne.n	700038e6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    {
      /* Set the source of ADF1 clock*/
      __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
700038d2:	4b41      	ldr	r3, [pc, #260]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700038d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
700038d6:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
700038da:	687b      	ldr	r3, [r7, #4]
700038dc:	699b      	ldr	r3, [r3, #24]
700038de:	493e      	ldr	r1, [pc, #248]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700038e0:	4313      	orrs	r3, r2
700038e2:	64cb      	str	r3, [r1, #76]	@ 0x4c
700038e4:	e001      	b.n	700038ea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
700038e6:	7dfb      	ldrb	r3, [r7, #23]
700038e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- CEC configuration ---------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
700038ea:	687b      	ldr	r3, [r7, #4]
700038ec:	681b      	ldr	r3, [r3, #0]
700038ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
700038f2:	2b00      	cmp	r3, #0
700038f4:	d008      	beq.n	70003908 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
700038f6:	4b38      	ldr	r3, [pc, #224]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700038f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
700038fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
700038fe:	687b      	ldr	r3, [r7, #4]
70003900:	69db      	ldr	r3, [r3, #28]
70003902:	4935      	ldr	r1, [pc, #212]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70003904:	4313      	orrs	r3, r2
70003906:	650b      	str	r3, [r1, #80]	@ 0x50
  }

  /*---------------------- ETH1 REF configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1REF) == RCC_PERIPHCLK_ETH1REF)
70003908:	687b      	ldr	r3, [r7, #4]
7000390a:	681b      	ldr	r3, [r3, #0]
7000390c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
70003910:	2b00      	cmp	r3, #0
70003912:	d008      	beq.n	70003926 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1REFCLKSOURCE(PeriphClkInit->Eth1RefClockSelection));

    /* Configure the ETH1 REF clock source */
    __HAL_RCC_ETH1REF_CONFIG(PeriphClkInit->Eth1RefClockSelection);
70003914:	4b30      	ldr	r3, [pc, #192]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70003916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70003918:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
7000391c:	687b      	ldr	r3, [r7, #4]
7000391e:	6a1b      	ldr	r3, [r3, #32]
70003920:	492d      	ldr	r1, [pc, #180]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70003922:	4313      	orrs	r3, r2
70003924:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*---------------------- ETH1PHY configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
70003926:	687b      	ldr	r3, [r7, #4]
70003928:	681b      	ldr	r3, [r3, #0]
7000392a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
7000392e:	2b00      	cmp	r3, #0
70003930:	d020      	beq.n	70003974 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYCLKSOURCE(PeriphClkInit->Eth1PhyClockSelection));

    switch (PeriphClkInit->Eth1PhyClockSelection)
70003932:	687b      	ldr	r3, [r7, #4]
70003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70003936:	2b00      	cmp	r3, #0
70003938:	d00c      	beq.n	70003954 <HAL_RCCEx_PeriphCLKConfig+0x438>
7000393a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
7000393e:	d106      	bne.n	7000394e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_ETH1PHYCLKSOURCE_HSE:    /* HSE is used as clock source for ETH PHY */
        /* ETH PHY clock source configuration done later after clock selection check */
        break;

      case RCC_ETH1PHYCLKSOURCE_PLL3S:  /* PLL3_S is used as clock source for ETH PHY */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_SCLK);
70003940:	4b25      	ldr	r3, [pc, #148]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70003942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003944:	4a24      	ldr	r2, [pc, #144]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70003946:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
7000394a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ETH PHY clock source configuration done later after clock selection check */
        break;
7000394c:	e003      	b.n	70003956 <HAL_RCCEx_PeriphCLKConfig+0x43a>

      default:
        ret = HAL_ERROR;
7000394e:	2301      	movs	r3, #1
70003950:	75fb      	strb	r3, [r7, #23]
        break;
70003952:	e000      	b.n	70003956 <HAL_RCCEx_PeriphCLKConfig+0x43a>
        break;
70003954:	bf00      	nop
    }

    if (ret == HAL_OK)
70003956:	7dfb      	ldrb	r3, [r7, #23]
70003958:	2b00      	cmp	r3, #0
7000395a:	d109      	bne.n	70003970 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of ETH PHY clock*/
      __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyClockSelection);
7000395c:	4b1e      	ldr	r3, [pc, #120]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
7000395e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70003960:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
70003964:	687b      	ldr	r3, [r7, #4]
70003966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70003968:	491b      	ldr	r1, [pc, #108]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
7000396a:	4313      	orrs	r3, r2
7000396c:	64cb      	str	r3, [r1, #76]	@ 0x4c
7000396e:	e001      	b.n	70003974 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003970:	7dfb      	ldrb	r3, [r7, #23]
70003972:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
70003974:	687b      	ldr	r3, [r7, #4]
70003976:	681b      	ldr	r3, [r3, #0]
70003978:	f403 7300 	and.w	r3, r3, #512	@ 0x200
7000397c:	2b00      	cmp	r3, #0
7000397e:	d02f      	beq.n	700039e0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
70003980:	687b      	ldr	r3, [r7, #4]
70003982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70003984:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
70003988:	d00e      	beq.n	700039a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
7000398a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
7000398e:	d812      	bhi.n	700039b6 <HAL_RCCEx_PeriphCLKConfig+0x49a>
70003990:	2b00      	cmp	r3, #0
70003992:	d013      	beq.n	700039bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
70003994:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
70003998:	d10d      	bne.n	700039b6 <HAL_RCCEx_PeriphCLKConfig+0x49a>
    {
      case RCC_FDCANCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for FDCAN kernel */
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
7000399a:	4b0f      	ldr	r3, [pc, #60]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
7000399c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000399e:	4a0e      	ldr	r2, [pc, #56]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700039a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
700039a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
700039a6:	e00a      	b.n	700039be <HAL_RCCEx_PeriphCLKConfig+0x4a2>

      case RCC_FDCANCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for FDCAN kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
700039a8:	4b0b      	ldr	r3, [pc, #44]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700039aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700039ac:	4a0a      	ldr	r2, [pc, #40]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700039ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
700039b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
700039b4:	e003      	b.n	700039be <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      case RCC_FDCANCLKSOURCE_HSE:   /* HSE is used as clock source for FDCAN kernel */
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
700039b6:	2301      	movs	r3, #1
700039b8:	75fb      	strb	r3, [r7, #23]
        break;
700039ba:	e000      	b.n	700039be <HAL_RCCEx_PeriphCLKConfig+0x4a2>
        break;
700039bc:	bf00      	nop
    }

    if (ret == HAL_OK)
700039be:	7dfb      	ldrb	r3, [r7, #23]
700039c0:	2b00      	cmp	r3, #0
700039c2:	d10b      	bne.n	700039dc <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
700039c4:	4b04      	ldr	r3, [pc, #16]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700039c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
700039c8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
700039cc:	687b      	ldr	r3, [r7, #4]
700039ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
700039d0:	4901      	ldr	r1, [pc, #4]	@ (700039d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700039d2:	4313      	orrs	r3, r2
700039d4:	650b      	str	r3, [r1, #80]	@ 0x50
700039d6:	e003      	b.n	700039e0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
700039d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
700039dc:	7dfb      	ldrb	r3, [r7, #23]
700039de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1_I3C1) == RCC_PERIPHCLK_I2C1_I3C1)
700039e0:	687b      	ldr	r3, [r7, #4]
700039e2:	681b      	ldr	r3, [r3, #0]
700039e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
700039e8:	2b00      	cmp	r3, #0
700039ea:	d02c      	beq.n	70003a46 <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1_I3C1CLKSOURCE(PeriphClkInit->I2c1_I3c1ClockSelection));

    switch (PeriphClkInit->I2c1_I3c1ClockSelection)
700039ec:	687b      	ldr	r3, [r7, #4]
700039ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700039f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
700039f4:	d017      	beq.n	70003a26 <HAL_RCCEx_PeriphCLKConfig+0x50a>
700039f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
700039fa:	d811      	bhi.n	70003a20 <HAL_RCCEx_PeriphCLKConfig+0x504>
700039fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
70003a00:	d011      	beq.n	70003a26 <HAL_RCCEx_PeriphCLKConfig+0x50a>
70003a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
70003a06:	d80b      	bhi.n	70003a20 <HAL_RCCEx_PeriphCLKConfig+0x504>
70003a08:	2b00      	cmp	r3, #0
70003a0a:	d00c      	beq.n	70003a26 <HAL_RCCEx_PeriphCLKConfig+0x50a>
70003a0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
70003a10:	d106      	bne.n	70003a20 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_I2C1_I3C1CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C1/I3C1*/
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70003a12:	4b97      	ldr	r3, [pc, #604]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003a16:	4a96      	ldr	r2, [pc, #600]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003a18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70003a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;
70003a1e:	e003      	b.n	70003a28 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_I2C1_I3C1CLKSOURCE_CSI:     /* CSI is used as clock source for I2C1/I3C1*/
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003a20:	2301      	movs	r3, #1
70003a22:	75fb      	strb	r3, [r7, #23]
        break;
70003a24:	e000      	b.n	70003a28 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
70003a26:	bf00      	nop
    }

    if (ret == HAL_OK)
70003a28:	7dfb      	ldrb	r3, [r7, #23]
70003a2a:	2b00      	cmp	r3, #0
70003a2c:	d109      	bne.n	70003a42 <HAL_RCCEx_PeriphCLKConfig+0x526>
    {
      /* Set the source of I2C1/I3C1 clock*/
      __HAL_RCC_I2C1_I3C1_CONFIG(PeriphClkInit->I2c1_I3c1ClockSelection);
70003a2e:	4b90      	ldr	r3, [pc, #576]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70003a32:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
70003a36:	687b      	ldr	r3, [r7, #4]
70003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003a3a:	498d      	ldr	r1, [pc, #564]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003a3c:	4313      	orrs	r3, r2
70003a3e:	650b      	str	r3, [r1, #80]	@ 0x50
70003a40:	e001      	b.n	70003a46 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003a42:	7dfb      	ldrb	r3, [r7, #23]
70003a44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C2/I2C3 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C23) == RCC_PERIPHCLK_I2C23)
70003a46:	687b      	ldr	r3, [r7, #4]
70003a48:	681b      	ldr	r3, [r3, #0]
70003a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
70003a4e:	2b00      	cmp	r3, #0
70003a50:	d02c      	beq.n	70003aac <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C23CLKSOURCE(PeriphClkInit->I2c23ClockSelection));

    switch (PeriphClkInit->I2c23ClockSelection)
70003a52:	687b      	ldr	r3, [r7, #4]
70003a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70003a56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
70003a5a:	d017      	beq.n	70003a8c <HAL_RCCEx_PeriphCLKConfig+0x570>
70003a5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
70003a60:	d811      	bhi.n	70003a86 <HAL_RCCEx_PeriphCLKConfig+0x56a>
70003a62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
70003a66:	d011      	beq.n	70003a8c <HAL_RCCEx_PeriphCLKConfig+0x570>
70003a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
70003a6c:	d80b      	bhi.n	70003a86 <HAL_RCCEx_PeriphCLKConfig+0x56a>
70003a6e:	2b00      	cmp	r3, #0
70003a70:	d00c      	beq.n	70003a8c <HAL_RCCEx_PeriphCLKConfig+0x570>
70003a72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
70003a76:	d106      	bne.n	70003a86 <HAL_RCCEx_PeriphCLKConfig+0x56a>
    {
      case RCC_I2C23CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C2/I2C3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70003a78:	4b7d      	ldr	r3, [pc, #500]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003a7c:	4a7c      	ldr	r2, [pc, #496]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003a7e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70003a82:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;
70003a84:	e003      	b.n	70003a8e <HAL_RCCEx_PeriphCLKConfig+0x572>
      case RCC_I2C23CLKSOURCE_CSI:     /* CSI is used as clock source for I2C2/I2C3 */
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003a86:	2301      	movs	r3, #1
70003a88:	75fb      	strb	r3, [r7, #23]
        break;
70003a8a:	e000      	b.n	70003a8e <HAL_RCCEx_PeriphCLKConfig+0x572>
        break;
70003a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
70003a8e:	7dfb      	ldrb	r3, [r7, #23]
70003a90:	2b00      	cmp	r3, #0
70003a92:	d109      	bne.n	70003aa8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Set the source of I2C2/I2C3 clock*/
      __HAL_RCC_I2C23_CONFIG(PeriphClkInit->I2c23ClockSelection);
70003a94:	4b76      	ldr	r3, [pc, #472]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70003a98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
70003a9c:	687b      	ldr	r3, [r7, #4]
70003a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70003aa0:	4973      	ldr	r1, [pc, #460]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003aa2:	4313      	orrs	r3, r2
70003aa4:	650b      	str	r3, [r1, #80]	@ 0x50
70003aa6:	e001      	b.n	70003aac <HAL_RCCEx_PeriphCLKConfig+0x590>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003aa8:	7dfb      	ldrb	r3, [r7, #23]
70003aaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
70003aac:	687b      	ldr	r3, [r7, #4]
70003aae:	681b      	ldr	r3, [r3, #0]
70003ab0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
70003ab4:	2b00      	cmp	r3, #0
70003ab6:	d045      	beq.n	70003b44 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
70003ab8:	687b      	ldr	r3, [r7, #4]
70003aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
70003abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
70003ac0:	d02a      	beq.n	70003b18 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
70003ac2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
70003ac6:	d824      	bhi.n	70003b12 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
70003ac8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
70003acc:	d026      	beq.n	70003b1c <HAL_RCCEx_PeriphCLKConfig+0x600>
70003ace:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
70003ad2:	d81e      	bhi.n	70003b12 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
70003ad4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
70003ad8:	d022      	beq.n	70003b20 <HAL_RCCEx_PeriphCLKConfig+0x604>
70003ada:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
70003ade:	d818      	bhi.n	70003b12 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
70003ae0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
70003ae4:	d00e      	beq.n	70003b04 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
70003ae6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
70003aea:	d812      	bhi.n	70003b12 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
70003aec:	2b00      	cmp	r3, #0
70003aee:	d019      	beq.n	70003b24 <HAL_RCCEx_PeriphCLKConfig+0x608>
70003af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
70003af4:	d10d      	bne.n	70003b12 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      case RCC_LPTIM1CLKSOURCE_PCLK1: /* PCLK1 as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70003af6:	4b5e      	ldr	r3, [pc, #376]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003afa:	4a5d      	ldr	r2, [pc, #372]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70003b00:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
70003b02:	e010      	b.n	70003b26 <HAL_RCCEx_PeriphCLKConfig+0x60a>

      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for LPTIM1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70003b04:	4b5a      	ldr	r3, [pc, #360]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003b08:	4a59      	ldr	r2, [pc, #356]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003b0a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70003b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
70003b10:	e009      	b.n	70003b26 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        /* HSI, HSE, or CSI oscillator is used as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003b12:	2301      	movs	r3, #1
70003b14:	75fb      	strb	r3, [r7, #23]
        break;
70003b16:	e006      	b.n	70003b26 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
70003b18:	bf00      	nop
70003b1a:	e004      	b.n	70003b26 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
70003b1c:	bf00      	nop
70003b1e:	e002      	b.n	70003b26 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
70003b20:	bf00      	nop
70003b22:	e000      	b.n	70003b26 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
70003b24:	bf00      	nop
    }

    if (ret == HAL_OK)
70003b26:	7dfb      	ldrb	r3, [r7, #23]
70003b28:	2b00      	cmp	r3, #0
70003b2a:	d109      	bne.n	70003b40 <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
70003b2c:	4b50      	ldr	r3, [pc, #320]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70003b30:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
70003b34:	687b      	ldr	r3, [r7, #4]
70003b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
70003b38:	494d      	ldr	r1, [pc, #308]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003b3a:	4313      	orrs	r3, r2
70003b3c:	650b      	str	r3, [r1, #80]	@ 0x50
70003b3e:	e001      	b.n	70003b44 <HAL_RCCEx_PeriphCLKConfig+0x628>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003b40:	7dfb      	ldrb	r3, [r7, #23]
70003b42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2/LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM23) == RCC_PERIPHCLK_LPTIM23)
70003b44:	687b      	ldr	r3, [r7, #4]
70003b46:	681b      	ldr	r3, [r3, #0]
70003b48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
70003b4c:	2b00      	cmp	r3, #0
70003b4e:	d045      	beq.n	70003bdc <HAL_RCCEx_PeriphCLKConfig+0x6c0>
  {
    switch (PeriphClkInit->Lptim23ClockSelection)
70003b50:	687b      	ldr	r3, [r7, #4]
70003b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
70003b54:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
70003b58:	d02a      	beq.n	70003bb0 <HAL_RCCEx_PeriphCLKConfig+0x694>
70003b5a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
70003b5e:	d824      	bhi.n	70003baa <HAL_RCCEx_PeriphCLKConfig+0x68e>
70003b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
70003b64:	d026      	beq.n	70003bb4 <HAL_RCCEx_PeriphCLKConfig+0x698>
70003b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
70003b6a:	d81e      	bhi.n	70003baa <HAL_RCCEx_PeriphCLKConfig+0x68e>
70003b6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
70003b70:	d022      	beq.n	70003bb8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
70003b72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
70003b76:	d818      	bhi.n	70003baa <HAL_RCCEx_PeriphCLKConfig+0x68e>
70003b78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
70003b7c:	d00e      	beq.n	70003b9c <HAL_RCCEx_PeriphCLKConfig+0x680>
70003b7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
70003b82:	d812      	bhi.n	70003baa <HAL_RCCEx_PeriphCLKConfig+0x68e>
70003b84:	2b00      	cmp	r3, #0
70003b86:	d019      	beq.n	70003bbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
70003b88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
70003b8c:	d10d      	bne.n	70003baa <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_LPTIM23CLKSOURCE_PCLK4: /* PCLK4 as clock source for LPTIM2/LPTIM3 */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM23CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70003b8e:	4b38      	ldr	r3, [pc, #224]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003b92:	4a37      	ldr	r2, [pc, #220]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70003b98:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
70003b9a:	e010      	b.n	70003bbe <HAL_RCCEx_PeriphCLKConfig+0x6a2>

      case RCC_LPTIM23CLKSOURCE_PLL3R: /* PLL3_R is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70003b9c:	4b34      	ldr	r3, [pc, #208]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003ba0:	4a33      	ldr	r2, [pc, #204]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003ba2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70003ba6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
70003ba8:	e009      	b.n	70003bbe <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003baa:	2301      	movs	r3, #1
70003bac:	75fb      	strb	r3, [r7, #23]
        break;
70003bae:	e006      	b.n	70003bbe <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
70003bb0:	bf00      	nop
70003bb2:	e004      	b.n	70003bbe <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
70003bb4:	bf00      	nop
70003bb6:	e002      	b.n	70003bbe <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
70003bb8:	bf00      	nop
70003bba:	e000      	b.n	70003bbe <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
70003bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
70003bbe:	7dfb      	ldrb	r3, [r7, #23]
70003bc0:	2b00      	cmp	r3, #0
70003bc2:	d109      	bne.n	70003bd8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      /* Set the source of LPTIM2/LPTIM3 clock*/
      __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
70003bc4:	4b2a      	ldr	r3, [pc, #168]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
70003bc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
70003bcc:	687b      	ldr	r3, [r7, #4]
70003bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
70003bd0:	4927      	ldr	r1, [pc, #156]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003bd2:	4313      	orrs	r3, r2
70003bd4:	658b      	str	r3, [r1, #88]	@ 0x58
70003bd6:	e001      	b.n	70003bdc <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003bd8:	7dfb      	ldrb	r3, [r7, #23]
70003bda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM4/LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM45) == RCC_PERIPHCLK_LPTIM45)
70003bdc:	687b      	ldr	r3, [r7, #4]
70003bde:	681b      	ldr	r3, [r3, #0]
70003be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
70003be4:	2b00      	cmp	r3, #0
70003be6:	d047      	beq.n	70003c78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
  {
    switch (PeriphClkInit->Lptim45ClockSelection)
70003be8:	687b      	ldr	r3, [r7, #4]
70003bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70003bec:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
70003bf0:	d02a      	beq.n	70003c48 <HAL_RCCEx_PeriphCLKConfig+0x72c>
70003bf2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
70003bf6:	d824      	bhi.n	70003c42 <HAL_RCCEx_PeriphCLKConfig+0x726>
70003bf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
70003bfc:	d026      	beq.n	70003c4c <HAL_RCCEx_PeriphCLKConfig+0x730>
70003bfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
70003c02:	d81e      	bhi.n	70003c42 <HAL_RCCEx_PeriphCLKConfig+0x726>
70003c04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
70003c08:	d022      	beq.n	70003c50 <HAL_RCCEx_PeriphCLKConfig+0x734>
70003c0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
70003c0e:	d818      	bhi.n	70003c42 <HAL_RCCEx_PeriphCLKConfig+0x726>
70003c10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
70003c14:	d00e      	beq.n	70003c34 <HAL_RCCEx_PeriphCLKConfig+0x718>
70003c16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
70003c1a:	d812      	bhi.n	70003c42 <HAL_RCCEx_PeriphCLKConfig+0x726>
70003c1c:	2b00      	cmp	r3, #0
70003c1e:	d019      	beq.n	70003c54 <HAL_RCCEx_PeriphCLKConfig+0x738>
70003c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
70003c24:	d10d      	bne.n	70003c42 <HAL_RCCEx_PeriphCLKConfig+0x726>
      case RCC_LPTIM45CLKSOURCE_PCLK4:  /* PCLK4 as clock source for LPTIM4/LPTIM5 */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM45CLKSOURCE_PLL2P: /* PLL2 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70003c26:	4b12      	ldr	r3, [pc, #72]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003c2a:	4a11      	ldr	r2, [pc, #68]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70003c30:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
70003c32:	e010      	b.n	70003c56 <HAL_RCCEx_PeriphCLKConfig+0x73a>

      case RCC_LPTIM45CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70003c34:	4b0e      	ldr	r3, [pc, #56]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003c38:	4a0d      	ldr	r2, [pc, #52]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003c3a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70003c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
70003c40:	e009      	b.n	70003c56 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM4/LPTIM5 clock */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003c42:	2301      	movs	r3, #1
70003c44:	75fb      	strb	r3, [r7, #23]
        break;
70003c46:	e006      	b.n	70003c56 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
70003c48:	bf00      	nop
70003c4a:	e004      	b.n	70003c56 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
70003c4c:	bf00      	nop
70003c4e:	e002      	b.n	70003c56 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
70003c50:	bf00      	nop
70003c52:	e000      	b.n	70003c56 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
70003c54:	bf00      	nop
    }

    if (ret == HAL_OK)
70003c56:	7dfb      	ldrb	r3, [r7, #23]
70003c58:	2b00      	cmp	r3, #0
70003c5a:	d10b      	bne.n	70003c74 <HAL_RCCEx_PeriphCLKConfig+0x758>
    {
      /* Set the source of LPTIM4/LPTIM5 clock */
      __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
70003c5c:	4b04      	ldr	r3, [pc, #16]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
70003c60:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
70003c64:	687b      	ldr	r3, [r7, #4]
70003c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70003c68:	4901      	ldr	r1, [pc, #4]	@ (70003c70 <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003c6a:	4313      	orrs	r3, r2
70003c6c:	658b      	str	r3, [r1, #88]	@ 0x58
70003c6e:	e003      	b.n	70003c78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
70003c70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
70003c74:	7dfb      	ldrb	r3, [r7, #23]
70003c76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
70003c78:	687b      	ldr	r3, [r7, #4]
70003c7a:	681b      	ldr	r3, [r3, #0]
70003c7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
70003c80:	2b00      	cmp	r3, #0
70003c82:	d034      	beq.n	70003cee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    switch (PeriphClkInit->Lpuart1ClockSelection)
70003c84:	687b      	ldr	r3, [r7, #4]
70003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70003c88:	2b05      	cmp	r3, #5
70003c8a:	d81d      	bhi.n	70003cc8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
70003c8c:	a201      	add	r2, pc, #4	@ (adr r2, 70003c94 <HAL_RCCEx_PeriphCLKConfig+0x778>)
70003c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70003c92:	bf00      	nop
70003c94:	70003ccf 	.word	0x70003ccf
70003c98:	70003cad 	.word	0x70003cad
70003c9c:	70003cbb 	.word	0x70003cbb
70003ca0:	70003ccf 	.word	0x70003ccf
70003ca4:	70003ccf 	.word	0x70003ccf
70003ca8:	70003ccf 	.word	0x70003ccf
      case RCC_LPUART1CLKSOURCE_PCLK4: /* PCLK4 selected as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
70003cac:	4b91      	ldr	r3, [pc, #580]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003cb0:	4a90      	ldr	r2, [pc, #576]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
70003cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
70003cb8:	e00a      	b.n	70003cd0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>

      case RCC_LPUART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
70003cba:	4b8e      	ldr	r3, [pc, #568]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003cbe:	4a8d      	ldr	r2, [pc, #564]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70003cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
70003cc6:	e003      	b.n	70003cd0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003cc8:	2301      	movs	r3, #1
70003cca:	75fb      	strb	r3, [r7, #23]
        break;
70003ccc:	e000      	b.n	70003cd0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        break;
70003cce:	bf00      	nop
    }

    if (ret == HAL_OK)
70003cd0:	7dfb      	ldrb	r3, [r7, #23]
70003cd2:	2b00      	cmp	r3, #0
70003cd4:	d109      	bne.n	70003cea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
70003cd6:	4b87      	ldr	r3, [pc, #540]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
70003cda:	f023 0207 	bic.w	r2, r3, #7
70003cde:	687b      	ldr	r3, [r7, #4]
70003ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70003ce2:	4984      	ldr	r1, [pc, #528]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003ce4:	4313      	orrs	r3, r2
70003ce6:	658b      	str	r3, [r1, #88]	@ 0x58
70003ce8:	e001      	b.n	70003cee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003cea:	7dfb      	ldrb	r3, [r7, #23]
70003cec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
70003cee:	687b      	ldr	r3, [r7, #4]
70003cf0:	681b      	ldr	r3, [r3, #0]
70003cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
70003cf6:	2b00      	cmp	r3, #0
70003cf8:	d005      	beq.n	70003d06 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
  {
    /* LTDC internally connected to PLL3_R output clock */
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70003cfa:	4b7e      	ldr	r3, [pc, #504]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003cfe:	4a7d      	ldr	r2, [pc, #500]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003d00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70003d04:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
70003d06:	687b      	ldr	r3, [r7, #4]
70003d08:	681b      	ldr	r3, [r3, #0]
70003d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
70003d0e:	2b00      	cmp	r3, #0
70003d10:	d021      	beq.n	70003d56 <HAL_RCCEx_PeriphCLKConfig+0x83a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    switch (PeriphClkInit->PssiClockSelection)
70003d12:	687b      	ldr	r3, [r7, #4]
70003d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
70003d16:	2b00      	cmp	r3, #0
70003d18:	d003      	beq.n	70003d22 <HAL_RCCEx_PeriphCLKConfig+0x806>
70003d1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
70003d1e:	d00a      	beq.n	70003d36 <HAL_RCCEx_PeriphCLKConfig+0x81a>
70003d20:	e006      	b.n	70003d30 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      case RCC_PSSICLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for PSSI */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70003d22:	4b74      	ldr	r3, [pc, #464]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003d26:	4a73      	ldr	r2, [pc, #460]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003d28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70003d2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* PSSI clock source configuration done later after clock selection check */
        break;
70003d2e:	e003      	b.n	70003d38 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        /* HSI, HSE, or CSI oscillator is used as source of PSSI clock */
        /* PSSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003d30:	2301      	movs	r3, #1
70003d32:	75fb      	strb	r3, [r7, #23]
        break;
70003d34:	e000      	b.n	70003d38 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
70003d36:	bf00      	nop
    }

    if (ret == HAL_OK)
70003d38:	7dfb      	ldrb	r3, [r7, #23]
70003d3a:	2b00      	cmp	r3, #0
70003d3c:	d109      	bne.n	70003d52 <HAL_RCCEx_PeriphCLKConfig+0x836>
    {
      /* Set the source of PSSI clock*/
      __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
70003d3e:	4b6d      	ldr	r3, [pc, #436]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70003d42:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
70003d46:	687b      	ldr	r3, [r7, #4]
70003d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
70003d4a:	496a      	ldr	r1, [pc, #424]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003d4c:	4313      	orrs	r3, r2
70003d4e:	64cb      	str	r3, [r1, #76]	@ 0x4c
70003d50:	e001      	b.n	70003d56 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003d52:	7dfb      	ldrb	r3, [r7, #23]
70003d54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
70003d56:	687b      	ldr	r3, [r7, #4]
70003d58:	681b      	ldr	r3, [r3, #0]
70003d5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
70003d5e:	2b00      	cmp	r3, #0
70003d60:	d043      	beq.n	70003dea <HAL_RCCEx_PeriphCLKConfig+0x8ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
70003d62:	687b      	ldr	r3, [r7, #4]
70003d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70003d66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
70003d6a:	d02c      	beq.n	70003dc6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
70003d6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
70003d70:	d826      	bhi.n	70003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
70003d72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
70003d76:	d028      	beq.n	70003dca <HAL_RCCEx_PeriphCLKConfig+0x8ae>
70003d78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
70003d7c:	d820      	bhi.n	70003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
70003d7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
70003d82:	d016      	beq.n	70003db2 <HAL_RCCEx_PeriphCLKConfig+0x896>
70003d84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
70003d88:	d81a      	bhi.n	70003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
70003d8a:	2b00      	cmp	r3, #0
70003d8c:	d003      	beq.n	70003d96 <HAL_RCCEx_PeriphCLKConfig+0x87a>
70003d8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
70003d92:	d007      	beq.n	70003da4 <HAL_RCCEx_PeriphCLKConfig+0x888>
70003d94:	e014      	b.n	70003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI1 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
70003d96:	4b57      	ldr	r3, [pc, #348]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003d9a:	4a56      	ldr	r2, [pc, #344]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003d9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
70003da0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
70003da2:	e013      	b.n	70003dcc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70003da4:	4b53      	ldr	r3, [pc, #332]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003da8:	4a52      	ldr	r2, [pc, #328]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70003dae:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
70003db0:	e00c      	b.n	70003dcc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
70003db2:	4b50      	ldr	r3, [pc, #320]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003db6:	4a4f      	ldr	r2, [pc, #316]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003db8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
70003dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
70003dbe:	e005      	b.n	70003dcc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003dc0:	2301      	movs	r3, #1
70003dc2:	75fb      	strb	r3, [r7, #23]
        break;
70003dc4:	e002      	b.n	70003dcc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
70003dc6:	bf00      	nop
70003dc8:	e000      	b.n	70003dcc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
70003dca:	bf00      	nop
    }

    if (ret == HAL_OK)
70003dcc:	7dfb      	ldrb	r3, [r7, #23]
70003dce:	2b00      	cmp	r3, #0
70003dd0:	d109      	bne.n	70003de6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
70003dd2:	4b48      	ldr	r3, [pc, #288]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70003dd6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
70003dda:	687b      	ldr	r3, [r7, #4]
70003ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70003dde:	4945      	ldr	r1, [pc, #276]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003de0:	4313      	orrs	r3, r2
70003de2:	654b      	str	r3, [r1, #84]	@ 0x54
70003de4:	e001      	b.n	70003dea <HAL_RCCEx_PeriphCLKConfig+0x8ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003de6:	7dfb      	ldrb	r3, [r7, #23]
70003de8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
70003dea:	687b      	ldr	r3, [r7, #4]
70003dec:	681b      	ldr	r3, [r3, #0]
70003dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
70003df2:	2b00      	cmp	r3, #0
70003df4:	d04b      	beq.n	70003e8e <HAL_RCCEx_PeriphCLKConfig+0x972>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
70003df6:	687b      	ldr	r3, [r7, #4]
70003df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70003dfa:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
70003dfe:	d032      	beq.n	70003e66 <HAL_RCCEx_PeriphCLKConfig+0x94a>
70003e00:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
70003e04:	d82c      	bhi.n	70003e60 <HAL_RCCEx_PeriphCLKConfig+0x944>
70003e06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
70003e0a:	d02e      	beq.n	70003e6a <HAL_RCCEx_PeriphCLKConfig+0x94e>
70003e0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
70003e10:	d826      	bhi.n	70003e60 <HAL_RCCEx_PeriphCLKConfig+0x944>
70003e12:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
70003e16:	d02a      	beq.n	70003e6e <HAL_RCCEx_PeriphCLKConfig+0x952>
70003e18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
70003e1c:	d820      	bhi.n	70003e60 <HAL_RCCEx_PeriphCLKConfig+0x944>
70003e1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
70003e22:	d016      	beq.n	70003e52 <HAL_RCCEx_PeriphCLKConfig+0x936>
70003e24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
70003e28:	d81a      	bhi.n	70003e60 <HAL_RCCEx_PeriphCLKConfig+0x944>
70003e2a:	2b00      	cmp	r3, #0
70003e2c:	d003      	beq.n	70003e36 <HAL_RCCEx_PeriphCLKConfig+0x91a>
70003e2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
70003e32:	d007      	beq.n	70003e44 <HAL_RCCEx_PeriphCLKConfig+0x928>
70003e34:	e014      	b.n	70003e60 <HAL_RCCEx_PeriphCLKConfig+0x944>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI2 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
70003e36:	4b2f      	ldr	r3, [pc, #188]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003e3a:	4a2e      	ldr	r2, [pc, #184]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003e3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
70003e40:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
70003e42:	e015      	b.n	70003e70 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70003e44:	4b2b      	ldr	r3, [pc, #172]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003e48:	4a2a      	ldr	r2, [pc, #168]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70003e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
70003e50:	e00e      	b.n	70003e70 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI2 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
70003e52:	4b28      	ldr	r3, [pc, #160]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003e56:	4a27      	ldr	r2, [pc, #156]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003e58:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
70003e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
70003e5e:	e007      	b.n	70003e70 <HAL_RCCEx_PeriphCLKConfig+0x954>
      case RCC_SAI2CLKSOURCE_SPDIF: /* SPDIF clock is used as source of SAI2 clock */
        /* SAI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003e60:	2301      	movs	r3, #1
70003e62:	75fb      	strb	r3, [r7, #23]
        break;
70003e64:	e004      	b.n	70003e70 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
70003e66:	bf00      	nop
70003e68:	e002      	b.n	70003e70 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
70003e6a:	bf00      	nop
70003e6c:	e000      	b.n	70003e70 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
70003e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
70003e70:	7dfb      	ldrb	r3, [r7, #23]
70003e72:	2b00      	cmp	r3, #0
70003e74:	d109      	bne.n	70003e8a <HAL_RCCEx_PeriphCLKConfig+0x96e>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
70003e76:	4b1f      	ldr	r3, [pc, #124]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70003e7a:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
70003e7e:	687b      	ldr	r3, [r7, #4]
70003e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70003e82:	491c      	ldr	r1, [pc, #112]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003e84:	4313      	orrs	r3, r2
70003e86:	654b      	str	r3, [r1, #84]	@ 0x54
70003e88:	e001      	b.n	70003e8e <HAL_RCCEx_PeriphCLKConfig+0x972>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003e8a:	7dfb      	ldrb	r3, [r7, #23]
70003e8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPDIFRX configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
70003e8e:	687b      	ldr	r3, [r7, #4]
70003e90:	681b      	ldr	r3, [r3, #0]
70003e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
70003e96:	2b00      	cmp	r3, #0
70003e98:	d03e      	beq.n	70003f18 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
70003e9a:	687b      	ldr	r3, [r7, #4]
70003e9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
70003e9e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
70003ea2:	d029      	beq.n	70003ef8 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
70003ea4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
70003ea8:	d820      	bhi.n	70003eec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
70003eaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
70003eae:	d016      	beq.n	70003ede <HAL_RCCEx_PeriphCLKConfig+0x9c2>
70003eb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
70003eb4:	d81a      	bhi.n	70003eec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
70003eb6:	2b00      	cmp	r3, #0
70003eb8:	d003      	beq.n	70003ec2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
70003eba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
70003ebe:	d007      	beq.n	70003ed0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
70003ec0:	e014      	b.n	70003eec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for SPDIFRX */
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
70003ec2:	4b0c      	ldr	r3, [pc, #48]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003ec6:	4a0b      	ldr	r2, [pc, #44]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
70003ecc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
70003ece:	e014      	b.n	70003efa <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL2R: /* PLL2_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
70003ed0:	4b08      	ldr	r3, [pc, #32]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003ed4:	4a07      	ldr	r2, [pc, #28]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003ed6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
70003eda:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
70003edc:	e00d      	b.n	70003efa <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70003ede:	4b05      	ldr	r3, [pc, #20]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003ee2:	4a04      	ldr	r2, [pc, #16]	@ (70003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003ee4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70003ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
70003eea:	e006      	b.n	70003efa <HAL_RCCEx_PeriphCLKConfig+0x9de>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003eec:	2301      	movs	r3, #1
70003eee:	75fb      	strb	r3, [r7, #23]
        break;
70003ef0:	e003      	b.n	70003efa <HAL_RCCEx_PeriphCLKConfig+0x9de>
70003ef2:	bf00      	nop
70003ef4:	58024400 	.word	0x58024400
        break;
70003ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
70003efa:	7dfb      	ldrb	r3, [r7, #23]
70003efc:	2b00      	cmp	r3, #0
70003efe:	d109      	bne.n	70003f14 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
    {
      /* Set the source of SPDIFRX clock */
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
70003f00:	4b8e      	ldr	r3, [pc, #568]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70003f04:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
70003f08:	687b      	ldr	r3, [r7, #4]
70003f0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
70003f0c:	498b      	ldr	r1, [pc, #556]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003f0e:	4313      	orrs	r3, r2
70003f10:	650b      	str	r3, [r1, #80]	@ 0x50
70003f12:	e001      	b.n	70003f18 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003f14:	7dfb      	ldrb	r3, [r7, #23]
70003f16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
70003f18:	687b      	ldr	r3, [r7, #4]
70003f1a:	681b      	ldr	r3, [r3, #0]
70003f1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
70003f20:	2b00      	cmp	r3, #0
70003f22:	d043      	beq.n	70003fac <HAL_RCCEx_PeriphCLKConfig+0xa90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
70003f24:	687b      	ldr	r3, [r7, #4]
70003f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
70003f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
70003f2c:	d02c      	beq.n	70003f88 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
70003f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
70003f32:	d826      	bhi.n	70003f82 <HAL_RCCEx_PeriphCLKConfig+0xa66>
70003f34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
70003f38:	d028      	beq.n	70003f8c <HAL_RCCEx_PeriphCLKConfig+0xa70>
70003f3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
70003f3e:	d820      	bhi.n	70003f82 <HAL_RCCEx_PeriphCLKConfig+0xa66>
70003f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
70003f44:	d016      	beq.n	70003f74 <HAL_RCCEx_PeriphCLKConfig+0xa58>
70003f46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
70003f4a:	d81a      	bhi.n	70003f82 <HAL_RCCEx_PeriphCLKConfig+0xa66>
70003f4c:	2b00      	cmp	r3, #0
70003f4e:	d003      	beq.n	70003f58 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
70003f50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
70003f54:	d007      	beq.n	70003f66 <HAL_RCCEx_PeriphCLKConfig+0xa4a>
70003f56:	e014      	b.n	70003f82 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI1 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
70003f58:	4b78      	ldr	r3, [pc, #480]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003f5c:	4a77      	ldr	r2, [pc, #476]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003f5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
70003f62:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
70003f64:	e013      	b.n	70003f8e <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70003f66:	4b75      	ldr	r3, [pc, #468]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003f6a:	4a74      	ldr	r2, [pc, #464]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70003f70:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
70003f72:	e00c      	b.n	70003f8e <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
70003f74:	4b71      	ldr	r3, [pc, #452]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003f78:	4a70      	ldr	r2, [pc, #448]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003f7a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
70003f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
70003f80:	e005      	b.n	70003f8e <HAL_RCCEx_PeriphCLKConfig+0xa72>
      case RCC_SPI1CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003f82:	2301      	movs	r3, #1
70003f84:	75fb      	strb	r3, [r7, #23]
        break;
70003f86:	e002      	b.n	70003f8e <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
70003f88:	bf00      	nop
70003f8a:	e000      	b.n	70003f8e <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
70003f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
70003f8e:	7dfb      	ldrb	r3, [r7, #23]
70003f90:	2b00      	cmp	r3, #0
70003f92:	d109      	bne.n	70003fa8 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
      /* Set the source of SPI1 clock*/
      __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
70003f94:	4b69      	ldr	r3, [pc, #420]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70003f98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
70003f9c:	687b      	ldr	r3, [r7, #4]
70003f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
70003fa0:	4966      	ldr	r1, [pc, #408]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003fa2:	4313      	orrs	r3, r2
70003fa4:	654b      	str	r3, [r1, #84]	@ 0x54
70003fa6:	e001      	b.n	70003fac <HAL_RCCEx_PeriphCLKConfig+0xa90>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003fa8:	7dfb      	ldrb	r3, [r7, #23]
70003faa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI2/SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI23) == RCC_PERIPHCLK_SPI23)
70003fac:	687b      	ldr	r3, [r7, #4]
70003fae:	681b      	ldr	r3, [r3, #0]
70003fb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
70003fb4:	2b00      	cmp	r3, #0
70003fb6:	d03c      	beq.n	70004032 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
70003fb8:	687b      	ldr	r3, [r7, #4]
70003fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
70003fbc:	2b40      	cmp	r3, #64	@ 0x40
70003fbe:	d026      	beq.n	7000400e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
70003fc0:	2b40      	cmp	r3, #64	@ 0x40
70003fc2:	d821      	bhi.n	70004008 <HAL_RCCEx_PeriphCLKConfig+0xaec>
70003fc4:	2b30      	cmp	r3, #48	@ 0x30
70003fc6:	d024      	beq.n	70004012 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
70003fc8:	2b30      	cmp	r3, #48	@ 0x30
70003fca:	d81d      	bhi.n	70004008 <HAL_RCCEx_PeriphCLKConfig+0xaec>
70003fcc:	2b20      	cmp	r3, #32
70003fce:	d014      	beq.n	70003ffa <HAL_RCCEx_PeriphCLKConfig+0xade>
70003fd0:	2b20      	cmp	r3, #32
70003fd2:	d819      	bhi.n	70004008 <HAL_RCCEx_PeriphCLKConfig+0xaec>
70003fd4:	2b00      	cmp	r3, #0
70003fd6:	d002      	beq.n	70003fde <HAL_RCCEx_PeriphCLKConfig+0xac2>
70003fd8:	2b10      	cmp	r3, #16
70003fda:	d007      	beq.n	70003fec <HAL_RCCEx_PeriphCLKConfig+0xad0>
70003fdc:	e014      	b.n	70004008 <HAL_RCCEx_PeriphCLKConfig+0xaec>
    {
      case RCC_SPI23CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI2/SPI3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
70003fde:	4b57      	ldr	r3, [pc, #348]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003fe2:	4a56      	ldr	r2, [pc, #344]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
70003fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
70003fea:	e013      	b.n	70004014 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70003fec:	4b53      	ldr	r3, [pc, #332]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003ff0:	4a52      	ldr	r2, [pc, #328]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003ff2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70003ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
70003ff8:	e00c      	b.n	70004014 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
70003ffa:	4b50      	ldr	r3, [pc, #320]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003ffe:	4a4f      	ldr	r2, [pc, #316]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004000:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
70004004:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
70004006:	e005      	b.n	70004014 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
      case RCC_SPI23CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI2/SPI3 clock */
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004008:	2301      	movs	r3, #1
7000400a:	75fb      	strb	r3, [r7, #23]
        break;
7000400c:	e002      	b.n	70004014 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
7000400e:	bf00      	nop
70004010:	e000      	b.n	70004014 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
70004012:	bf00      	nop
    }

    if (ret == HAL_OK)
70004014:	7dfb      	ldrb	r3, [r7, #23]
70004016:	2b00      	cmp	r3, #0
70004018:	d109      	bne.n	7000402e <HAL_RCCEx_PeriphCLKConfig+0xb12>
    {
      /* Set the source of SPI2/SPI3 clock*/
      __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
7000401a:	4b48      	ldr	r3, [pc, #288]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
7000401c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
7000401e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
70004022:	687b      	ldr	r3, [r7, #4]
70004024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
70004026:	4945      	ldr	r1, [pc, #276]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004028:	4313      	orrs	r3, r2
7000402a:	650b      	str	r3, [r1, #80]	@ 0x50
7000402c:	e001      	b.n	70004032 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
7000402e:	7dfb      	ldrb	r3, [r7, #23]
70004030:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
70004032:	687b      	ldr	r3, [r7, #4]
70004034:	681b      	ldr	r3, [r3, #0]
70004036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
7000403a:	2b00      	cmp	r3, #0
7000403c:	d03c      	beq.n	700040b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    switch (PeriphClkInit->Spi45ClockSelection)
7000403e:	687b      	ldr	r3, [r7, #4]
70004040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
70004042:	2b50      	cmp	r3, #80	@ 0x50
70004044:	d022      	beq.n	7000408c <HAL_RCCEx_PeriphCLKConfig+0xb70>
70004046:	2b50      	cmp	r3, #80	@ 0x50
70004048:	d81d      	bhi.n	70004086 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
7000404a:	2b40      	cmp	r3, #64	@ 0x40
7000404c:	d020      	beq.n	70004090 <HAL_RCCEx_PeriphCLKConfig+0xb74>
7000404e:	2b40      	cmp	r3, #64	@ 0x40
70004050:	d819      	bhi.n	70004086 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
70004052:	2b30      	cmp	r3, #48	@ 0x30
70004054:	d01e      	beq.n	70004094 <HAL_RCCEx_PeriphCLKConfig+0xb78>
70004056:	2b30      	cmp	r3, #48	@ 0x30
70004058:	d815      	bhi.n	70004086 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
7000405a:	2b20      	cmp	r3, #32
7000405c:	d00c      	beq.n	70004078 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
7000405e:	2b20      	cmp	r3, #32
70004060:	d811      	bhi.n	70004086 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
70004062:	2b00      	cmp	r3, #0
70004064:	d018      	beq.n	70004098 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
70004066:	2b10      	cmp	r3, #16
70004068:	d10d      	bne.n	70004086 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
      case RCC_SPI45CLKSOURCE_PCLK2:  /* PCLK2 as clock source for SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
7000406a:	4b34      	ldr	r3, [pc, #208]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
7000406c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000406e:	4a33      	ldr	r2, [pc, #204]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
70004074:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
70004076:	e010      	b.n	7000409a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_SPI45CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
70004078:	4b30      	ldr	r3, [pc, #192]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
7000407a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000407c:	4a2f      	ldr	r2, [pc, #188]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
7000407e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70004082:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
70004084:	e009      	b.n	7000409a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
      case RCC_SPI45CLKSOURCE_HSE: /* HSE oscillator clock is used as source of SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004086:	2301      	movs	r3, #1
70004088:	75fb      	strb	r3, [r7, #23]
        break;
7000408a:	e006      	b.n	7000409a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
7000408c:	bf00      	nop
7000408e:	e004      	b.n	7000409a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
70004090:	bf00      	nop
70004092:	e002      	b.n	7000409a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
70004094:	bf00      	nop
70004096:	e000      	b.n	7000409a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
70004098:	bf00      	nop
    }

    if (ret == HAL_OK)
7000409a:	7dfb      	ldrb	r3, [r7, #23]
7000409c:	2b00      	cmp	r3, #0
7000409e:	d109      	bne.n	700040b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of SPI4/SPI5 clock */
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
700040a0:	4b26      	ldr	r3, [pc, #152]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
700040a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
700040a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
700040a8:	687b      	ldr	r3, [r7, #4]
700040aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
700040ac:	4923      	ldr	r1, [pc, #140]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
700040ae:	4313      	orrs	r3, r2
700040b0:	654b      	str	r3, [r1, #84]	@ 0x54
700040b2:	e001      	b.n	700040b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
700040b4:	7dfb      	ldrb	r3, [r7, #23]
700040b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
700040b8:	687b      	ldr	r3, [r7, #4]
700040ba:	681b      	ldr	r3, [r3, #0]
700040bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
700040c0:	2b00      	cmp	r3, #0
700040c2:	d03f      	beq.n	70004144 <HAL_RCCEx_PeriphCLKConfig+0xc28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
700040c4:	687b      	ldr	r3, [r7, #4]
700040c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
700040c8:	2b50      	cmp	r3, #80	@ 0x50
700040ca:	d022      	beq.n	70004112 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
700040cc:	2b50      	cmp	r3, #80	@ 0x50
700040ce:	d81d      	bhi.n	7000410c <HAL_RCCEx_PeriphCLKConfig+0xbf0>
700040d0:	2b40      	cmp	r3, #64	@ 0x40
700040d2:	d020      	beq.n	70004116 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
700040d4:	2b40      	cmp	r3, #64	@ 0x40
700040d6:	d819      	bhi.n	7000410c <HAL_RCCEx_PeriphCLKConfig+0xbf0>
700040d8:	2b30      	cmp	r3, #48	@ 0x30
700040da:	d01e      	beq.n	7000411a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
700040dc:	2b30      	cmp	r3, #48	@ 0x30
700040de:	d815      	bhi.n	7000410c <HAL_RCCEx_PeriphCLKConfig+0xbf0>
700040e0:	2b20      	cmp	r3, #32
700040e2:	d00c      	beq.n	700040fe <HAL_RCCEx_PeriphCLKConfig+0xbe2>
700040e4:	2b20      	cmp	r3, #32
700040e6:	d811      	bhi.n	7000410c <HAL_RCCEx_PeriphCLKConfig+0xbf0>
700040e8:	2b00      	cmp	r3, #0
700040ea:	d018      	beq.n	7000411e <HAL_RCCEx_PeriphCLKConfig+0xc02>
700040ec:	2b10      	cmp	r3, #16
700040ee:	d10d      	bne.n	7000410c <HAL_RCCEx_PeriphCLKConfig+0xbf0>
      case RCC_SPI6CLKSOURCE_PCLK4: /* PCLK4 as clock source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
700040f0:	4b12      	ldr	r3, [pc, #72]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
700040f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700040f4:	4a11      	ldr	r2, [pc, #68]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
700040f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
700040fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
700040fc:	e010      	b.n	70004120 <HAL_RCCEx_PeriphCLKConfig+0xc04>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
700040fe:	4b0f      	ldr	r3, [pc, #60]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004102:	4a0e      	ldr	r2, [pc, #56]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70004108:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
7000410a:	e009      	b.n	70004120 <HAL_RCCEx_PeriphCLKConfig+0xc04>
      case RCC_SPI6CLKSOURCE_HSE: /* HSE oscillator is used as source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
7000410c:	2301      	movs	r3, #1
7000410e:	75fb      	strb	r3, [r7, #23]
        break;
70004110:	e006      	b.n	70004120 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
70004112:	bf00      	nop
70004114:	e004      	b.n	70004120 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
70004116:	bf00      	nop
70004118:	e002      	b.n	70004120 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
7000411a:	bf00      	nop
7000411c:	e000      	b.n	70004120 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
7000411e:	bf00      	nop
    }

    if (ret == HAL_OK)
70004120:	7dfb      	ldrb	r3, [r7, #23]
70004122:	2b00      	cmp	r3, #0
70004124:	d10c      	bne.n	70004140 <HAL_RCCEx_PeriphCLKConfig+0xc24>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
70004126:	4b05      	ldr	r3, [pc, #20]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
7000412a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
7000412e:	687b      	ldr	r3, [r7, #4]
70004130:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
70004132:	4902      	ldr	r1, [pc, #8]	@ (7000413c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004134:	4313      	orrs	r3, r2
70004136:	658b      	str	r3, [r1, #88]	@ 0x58
70004138:	e004      	b.n	70004144 <HAL_RCCEx_PeriphCLKConfig+0xc28>
7000413a:	bf00      	nop
7000413c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
70004140:	7dfb      	ldrb	r3, [r7, #23]
70004142:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
70004144:	687b      	ldr	r3, [r7, #4]
70004146:	681b      	ldr	r3, [r3, #0]
70004148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
7000414c:	2b00      	cmp	r3, #0
7000414e:	d034      	beq.n	700041ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
70004150:	687b      	ldr	r3, [r7, #4]
70004152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70004154:	2b05      	cmp	r3, #5
70004156:	d81d      	bhi.n	70004194 <HAL_RCCEx_PeriphCLKConfig+0xc78>
70004158:	a201      	add	r2, pc, #4	@ (adr r2, 70004160 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
7000415a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
7000415e:	bf00      	nop
70004160:	7000419b 	.word	0x7000419b
70004164:	70004179 	.word	0x70004179
70004168:	70004187 	.word	0x70004187
7000416c:	7000419b 	.word	0x7000419b
70004170:	7000419b 	.word	0x7000419b
70004174:	7000419b 	.word	0x7000419b
      case RCC_USART1CLKSOURCE_PCLK2: /* PCLK2 as clock source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
70004178:	4b69      	ldr	r3, [pc, #420]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
7000417a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000417c:	4a68      	ldr	r2, [pc, #416]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
7000417e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
70004182:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
70004184:	e00a      	b.n	7000419c <HAL_RCCEx_PeriphCLKConfig+0xc80>

      case RCC_USART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
70004186:	4b66      	ldr	r3, [pc, #408]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000418a:	4a65      	ldr	r2, [pc, #404]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
7000418c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70004190:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
70004192:	e003      	b.n	7000419c <HAL_RCCEx_PeriphCLKConfig+0xc80>
      case RCC_USART1CLKSOURCE_LSE: /* LSE oscillator is used as source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004194:	2301      	movs	r3, #1
70004196:	75fb      	strb	r3, [r7, #23]
        break;
70004198:	e000      	b.n	7000419c <HAL_RCCEx_PeriphCLKConfig+0xc80>
        break;
7000419a:	bf00      	nop
    }

    if (ret == HAL_OK)
7000419c:	7dfb      	ldrb	r3, [r7, #23]
7000419e:	2b00      	cmp	r3, #0
700041a0:	d109      	bne.n	700041b6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    {
      /* Set the source of USART1 clock */
      __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
700041a2:	4b5f      	ldr	r3, [pc, #380]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
700041a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
700041a6:	f023 0207 	bic.w	r2, r3, #7
700041aa:	687b      	ldr	r3, [r7, #4]
700041ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
700041ae:	495c      	ldr	r1, [pc, #368]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
700041b0:	4313      	orrs	r3, r2
700041b2:	654b      	str	r3, [r1, #84]	@ 0x54
700041b4:	e001      	b.n	700041ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
700041b6:	7dfb      	ldrb	r3, [r7, #23]
700041b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------- USART2/USART3/UART4/UART5/UART7/UART8 Configuration --------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
700041ba:	687b      	ldr	r3, [r7, #4]
700041bc:	681b      	ldr	r3, [r3, #0]
700041be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
700041c2:	2b00      	cmp	r3, #0
700041c4:	d033      	beq.n	7000422e <HAL_RCCEx_PeriphCLKConfig+0xd12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART234578CLKSOURCE(PeriphClkInit->Usart234578ClockSelection));

    switch (PeriphClkInit->Usart234578ClockSelection)
700041c6:	687b      	ldr	r3, [r7, #4]
700041c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
700041ca:	2b05      	cmp	r3, #5
700041cc:	d81c      	bhi.n	70004208 <HAL_RCCEx_PeriphCLKConfig+0xcec>
700041ce:	a201      	add	r2, pc, #4	@ (adr r2, 700041d4 <HAL_RCCEx_PeriphCLKConfig+0xcb8>)
700041d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
700041d4:	7000420f 	.word	0x7000420f
700041d8:	700041ed 	.word	0x700041ed
700041dc:	700041fb 	.word	0x700041fb
700041e0:	7000420f 	.word	0x7000420f
700041e4:	7000420f 	.word	0x7000420f
700041e8:	7000420f 	.word	0x7000420f
      case RCC_USART234578CLKSOURCE_PCLK1: /* PCLK1 as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
700041ec:	4b4c      	ldr	r3, [pc, #304]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
700041ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700041f0:	4a4b      	ldr	r2, [pc, #300]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
700041f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
700041f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
700041f8:	e00a      	b.n	70004210 <HAL_RCCEx_PeriphCLKConfig+0xcf4>

      case RCC_USART234578CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
700041fa:	4b49      	ldr	r3, [pc, #292]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
700041fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700041fe:	4a48      	ldr	r2, [pc, #288]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70004204:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
70004206:	e003      	b.n	70004210 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        /* LSE,  oscillator is used as source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004208:	2301      	movs	r3, #1
7000420a:	75fb      	strb	r3, [r7, #23]
        break;
7000420c:	e000      	b.n	70004210 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        break;
7000420e:	bf00      	nop
    }

    if (ret == HAL_OK)
70004210:	7dfb      	ldrb	r3, [r7, #23]
70004212:	2b00      	cmp	r3, #0
70004214:	d109      	bne.n	7000422a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      /* Set the source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
70004216:	4b42      	ldr	r3, [pc, #264]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
7000421a:	f023 0207 	bic.w	r2, r3, #7
7000421e:	687b      	ldr	r3, [r7, #4]
70004220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70004222:	493f      	ldr	r1, [pc, #252]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004224:	4313      	orrs	r3, r2
70004226:	650b      	str	r3, [r1, #80]	@ 0x50
70004228:	e001      	b.n	7000422e <HAL_RCCEx_PeriphCLKConfig+0xd12>
    }
    else
    {
      /* set overall return value */
      status = ret;
7000422a:	7dfb      	ldrb	r3, [r7, #23]
7000422c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBPHYC Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHYC) == RCC_PERIPHCLK_USBPHYC)
7000422e:	687b      	ldr	r3, [r7, #4]
70004230:	681b      	ldr	r3, [r3, #0]
70004232:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
70004236:	2b00      	cmp	r3, #0
70004238:	d027      	beq.n	7000428a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCCLKSOURCE(PeriphClkInit->UsbPhycClockSelection));

    switch (PeriphClkInit->UsbPhycClockSelection)
7000423a:	687b      	ldr	r3, [r7, #4]
7000423c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000423e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
70004242:	d008      	beq.n	70004256 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
70004244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
70004248:	d80c      	bhi.n	70004264 <HAL_RCCEx_PeriphCLKConfig+0xd48>
7000424a:	2b00      	cmp	r3, #0
7000424c:	d00d      	beq.n	7000426a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
7000424e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
70004252:	d00a      	beq.n	7000426a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
70004254:	e006      	b.n	70004264 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      case RCC_USBPHYCCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USBPHYC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
70004256:	4b32      	ldr	r3, [pc, #200]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000425a:	4a31      	ldr	r2, [pc, #196]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
7000425c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70004260:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USBPHYC clock source configuration done later after clock selection check */
        break;
70004262:	e003      	b.n	7000426c <HAL_RCCEx_PeriphCLKConfig+0xd50>
      case RCC_USBPHYCCLKSOURCE_HSE_DIV2: /* HSE divided by 2 is used as clock source for USBPHYC */
        /* USBPHYC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004264:	2301      	movs	r3, #1
70004266:	75fb      	strb	r3, [r7, #23]
        break;
70004268:	e000      	b.n	7000426c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
7000426a:	bf00      	nop
    }

    if (ret == HAL_OK)
7000426c:	7dfb      	ldrb	r3, [r7, #23]
7000426e:	2b00      	cmp	r3, #0
70004270:	d109      	bne.n	70004286 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBPHYC_CONFIG(PeriphClkInit->UsbPhycClockSelection);
70004272:	4b2b      	ldr	r3, [pc, #172]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70004276:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
7000427a:	687b      	ldr	r3, [r7, #4]
7000427c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000427e:	4928      	ldr	r1, [pc, #160]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004280:	4313      	orrs	r3, r2
70004282:	64cb      	str	r3, [r1, #76]	@ 0x4c
70004284:	e001      	b.n	7000428a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
70004286:	7dfb      	ldrb	r3, [r7, #23]
70004288:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBOTGFS Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGFS) == RCC_PERIPHCLK_USBOTGFS)
7000428a:	687b      	ldr	r3, [r7, #4]
7000428c:	681b      	ldr	r3, [r3, #0]
7000428e:	2b00      	cmp	r3, #0
70004290:	da2c      	bge.n	700042ec <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGFSCLKSOURCE(PeriphClkInit->UsbOtgFsClockSelection));

    switch (PeriphClkInit->UsbOtgFsClockSelection)
70004292:	687b      	ldr	r3, [r7, #4]
70004294:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
70004296:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
7000429a:	d017      	beq.n	700042cc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
7000429c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
700042a0:	d811      	bhi.n	700042c6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
700042a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
700042a6:	d011      	beq.n	700042cc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
700042a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
700042ac:	d80b      	bhi.n	700042c6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
700042ae:	2b00      	cmp	r3, #0
700042b0:	d00c      	beq.n	700042cc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
700042b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
700042b6:	d106      	bne.n	700042c6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      case RCC_USBOTGFSCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USB OTG FS */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
700042b8:	4b19      	ldr	r3, [pc, #100]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
700042ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700042bc:	4a18      	ldr	r2, [pc, #96]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
700042be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
700042c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;
700042c4:	e003      	b.n	700042ce <HAL_RCCEx_PeriphCLKConfig+0xdb2>
      case RCC_USBOTGFSCLKSOURCE_CLK48: /* USBPHYC CLK48 is used as clock source for USB OTG FS */
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
700042c6:	2301      	movs	r3, #1
700042c8:	75fb      	strb	r3, [r7, #23]
        break;
700042ca:	e000      	b.n	700042ce <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
700042cc:	bf00      	nop
    }

    if (ret == HAL_OK)
700042ce:	7dfb      	ldrb	r3, [r7, #23]
700042d0:	2b00      	cmp	r3, #0
700042d2:	d109      	bne.n	700042e8 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBOTGFS_CONFIG(PeriphClkInit->UsbOtgFsClockSelection);
700042d4:	4b12      	ldr	r3, [pc, #72]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
700042d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
700042d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
700042dc:	687b      	ldr	r3, [r7, #4]
700042de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
700042e0:	490f      	ldr	r1, [pc, #60]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
700042e2:	4313      	orrs	r3, r2
700042e4:	64cb      	str	r3, [r1, #76]	@ 0x4c
700042e6:	e001      	b.n	700042ec <HAL_RCCEx_PeriphCLKConfig+0xdd0>
    }
    else
    {
      /* set overall return value */
      status = ret;
700042e8:	7dfb      	ldrb	r3, [r7, #23]
700042ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
700042ec:	687b      	ldr	r3, [r7, #4]
700042ee:	681b      	ldr	r3, [r3, #0]
700042f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
700042f4:	2b00      	cmp	r3, #0
700042f6:	d009      	beq.n	7000430c <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
700042f8:	4b09      	ldr	r3, [pc, #36]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
700042fa:	691b      	ldr	r3, [r3, #16]
700042fc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
70004300:	687b      	ldr	r3, [r7, #4]
70004302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
70004306:	4906      	ldr	r1, [pc, #24]	@ (70004320 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004308:	4313      	orrs	r3, r2
7000430a:	610b      	str	r3, [r1, #16]
  }

  if (status == HAL_OK)
7000430c:	7dbb      	ldrb	r3, [r7, #22]
7000430e:	2b00      	cmp	r3, #0
70004310:	d101      	bne.n	70004316 <HAL_RCCEx_PeriphCLKConfig+0xdfa>
  {
    return HAL_OK;
70004312:	2300      	movs	r3, #0
70004314:	e000      	b.n	70004318 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  }
  return HAL_ERROR;
70004316:	2301      	movs	r3, #1
}
70004318:	4618      	mov	r0, r3
7000431a:	3718      	adds	r7, #24
7000431c:	46bd      	mov	sp, r7
7000431e:	bd80      	pop	{r7, pc}
70004320:	58024400 	.word	0x58024400

70004324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
70004324:	b580      	push	{r7, lr}
70004326:	b082      	sub	sp, #8
70004328:	af00      	add	r7, sp, #0
7000432a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
7000432c:	687b      	ldr	r3, [r7, #4]
7000432e:	2b00      	cmp	r3, #0
70004330:	d101      	bne.n	70004336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
70004332:	2301      	movs	r3, #1
70004334:	e049      	b.n	700043ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
70004336:	687b      	ldr	r3, [r7, #4]
70004338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
7000433c:	b2db      	uxtb	r3, r3
7000433e:	2b00      	cmp	r3, #0
70004340:	d106      	bne.n	70004350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
70004342:	687b      	ldr	r3, [r7, #4]
70004344:	2200      	movs	r2, #0
70004346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
7000434a:	6878      	ldr	r0, [r7, #4]
7000434c:	f000 f841 	bl	700043d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
70004350:	687b      	ldr	r3, [r7, #4]
70004352:	2202      	movs	r2, #2
70004354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
70004358:	687b      	ldr	r3, [r7, #4]
7000435a:	681a      	ldr	r2, [r3, #0]
7000435c:	687b      	ldr	r3, [r7, #4]
7000435e:	3304      	adds	r3, #4
70004360:	4619      	mov	r1, r3
70004362:	4610      	mov	r0, r2
70004364:	f000 fa2e 	bl	700047c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
70004368:	687b      	ldr	r3, [r7, #4]
7000436a:	2201      	movs	r2, #1
7000436c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
70004370:	687b      	ldr	r3, [r7, #4]
70004372:	2201      	movs	r2, #1
70004374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
70004378:	687b      	ldr	r3, [r7, #4]
7000437a:	2201      	movs	r2, #1
7000437c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
70004380:	687b      	ldr	r3, [r7, #4]
70004382:	2201      	movs	r2, #1
70004384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
70004388:	687b      	ldr	r3, [r7, #4]
7000438a:	2201      	movs	r2, #1
7000438c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
70004390:	687b      	ldr	r3, [r7, #4]
70004392:	2201      	movs	r2, #1
70004394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
70004398:	687b      	ldr	r3, [r7, #4]
7000439a:	2201      	movs	r2, #1
7000439c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
700043a0:	687b      	ldr	r3, [r7, #4]
700043a2:	2201      	movs	r2, #1
700043a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
700043a8:	687b      	ldr	r3, [r7, #4]
700043aa:	2201      	movs	r2, #1
700043ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
700043b0:	687b      	ldr	r3, [r7, #4]
700043b2:	2201      	movs	r2, #1
700043b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
700043b8:	687b      	ldr	r3, [r7, #4]
700043ba:	2201      	movs	r2, #1
700043bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
700043c0:	687b      	ldr	r3, [r7, #4]
700043c2:	2201      	movs	r2, #1
700043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
700043c8:	2300      	movs	r3, #0
}
700043ca:	4618      	mov	r0, r3
700043cc:	3708      	adds	r7, #8
700043ce:	46bd      	mov	sp, r7
700043d0:	bd80      	pop	{r7, pc}

700043d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
700043d2:	b480      	push	{r7}
700043d4:	b083      	sub	sp, #12
700043d6:	af00      	add	r7, sp, #0
700043d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
700043da:	bf00      	nop
700043dc:	370c      	adds	r7, #12
700043de:	46bd      	mov	sp, r7
700043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
700043e4:	4770      	bx	lr
	...

700043e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
700043e8:	b480      	push	{r7}
700043ea:	b085      	sub	sp, #20
700043ec:	af00      	add	r7, sp, #0
700043ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
700043f0:	687b      	ldr	r3, [r7, #4]
700043f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
700043f6:	b2db      	uxtb	r3, r3
700043f8:	2b01      	cmp	r3, #1
700043fa:	d001      	beq.n	70004400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
700043fc:	2301      	movs	r3, #1
700043fe:	e054      	b.n	700044aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
70004400:	687b      	ldr	r3, [r7, #4]
70004402:	2202      	movs	r2, #2
70004404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
70004408:	687b      	ldr	r3, [r7, #4]
7000440a:	681b      	ldr	r3, [r3, #0]
7000440c:	68da      	ldr	r2, [r3, #12]
7000440e:	687b      	ldr	r3, [r7, #4]
70004410:	681b      	ldr	r3, [r3, #0]
70004412:	f042 0201 	orr.w	r2, r2, #1
70004416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
70004418:	687b      	ldr	r3, [r7, #4]
7000441a:	681b      	ldr	r3, [r3, #0]
7000441c:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
70004420:	d022      	beq.n	70004468 <HAL_TIM_Base_Start_IT+0x80>
70004422:	687b      	ldr	r3, [r7, #4]
70004424:	681b      	ldr	r3, [r3, #0]
70004426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
7000442a:	d01d      	beq.n	70004468 <HAL_TIM_Base_Start_IT+0x80>
7000442c:	687b      	ldr	r3, [r7, #4]
7000442e:	681b      	ldr	r3, [r3, #0]
70004430:	4a21      	ldr	r2, [pc, #132]	@ (700044b8 <HAL_TIM_Base_Start_IT+0xd0>)
70004432:	4293      	cmp	r3, r2
70004434:	d018      	beq.n	70004468 <HAL_TIM_Base_Start_IT+0x80>
70004436:	687b      	ldr	r3, [r7, #4]
70004438:	681b      	ldr	r3, [r3, #0]
7000443a:	4a20      	ldr	r2, [pc, #128]	@ (700044bc <HAL_TIM_Base_Start_IT+0xd4>)
7000443c:	4293      	cmp	r3, r2
7000443e:	d013      	beq.n	70004468 <HAL_TIM_Base_Start_IT+0x80>
70004440:	687b      	ldr	r3, [r7, #4]
70004442:	681b      	ldr	r3, [r3, #0]
70004444:	4a1e      	ldr	r2, [pc, #120]	@ (700044c0 <HAL_TIM_Base_Start_IT+0xd8>)
70004446:	4293      	cmp	r3, r2
70004448:	d00e      	beq.n	70004468 <HAL_TIM_Base_Start_IT+0x80>
7000444a:	687b      	ldr	r3, [r7, #4]
7000444c:	681b      	ldr	r3, [r3, #0]
7000444e:	4a1d      	ldr	r2, [pc, #116]	@ (700044c4 <HAL_TIM_Base_Start_IT+0xdc>)
70004450:	4293      	cmp	r3, r2
70004452:	d009      	beq.n	70004468 <HAL_TIM_Base_Start_IT+0x80>
70004454:	687b      	ldr	r3, [r7, #4]
70004456:	681b      	ldr	r3, [r3, #0]
70004458:	4a1b      	ldr	r2, [pc, #108]	@ (700044c8 <HAL_TIM_Base_Start_IT+0xe0>)
7000445a:	4293      	cmp	r3, r2
7000445c:	d004      	beq.n	70004468 <HAL_TIM_Base_Start_IT+0x80>
7000445e:	687b      	ldr	r3, [r7, #4]
70004460:	681b      	ldr	r3, [r3, #0]
70004462:	4a1a      	ldr	r2, [pc, #104]	@ (700044cc <HAL_TIM_Base_Start_IT+0xe4>)
70004464:	4293      	cmp	r3, r2
70004466:	d115      	bne.n	70004494 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
70004468:	687b      	ldr	r3, [r7, #4]
7000446a:	681b      	ldr	r3, [r3, #0]
7000446c:	689a      	ldr	r2, [r3, #8]
7000446e:	4b18      	ldr	r3, [pc, #96]	@ (700044d0 <HAL_TIM_Base_Start_IT+0xe8>)
70004470:	4013      	ands	r3, r2
70004472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
70004474:	68fb      	ldr	r3, [r7, #12]
70004476:	2b06      	cmp	r3, #6
70004478:	d015      	beq.n	700044a6 <HAL_TIM_Base_Start_IT+0xbe>
7000447a:	68fb      	ldr	r3, [r7, #12]
7000447c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
70004480:	d011      	beq.n	700044a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
70004482:	687b      	ldr	r3, [r7, #4]
70004484:	681b      	ldr	r3, [r3, #0]
70004486:	681a      	ldr	r2, [r3, #0]
70004488:	687b      	ldr	r3, [r7, #4]
7000448a:	681b      	ldr	r3, [r3, #0]
7000448c:	f042 0201 	orr.w	r2, r2, #1
70004490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
70004492:	e008      	b.n	700044a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
70004494:	687b      	ldr	r3, [r7, #4]
70004496:	681b      	ldr	r3, [r3, #0]
70004498:	681a      	ldr	r2, [r3, #0]
7000449a:	687b      	ldr	r3, [r7, #4]
7000449c:	681b      	ldr	r3, [r3, #0]
7000449e:	f042 0201 	orr.w	r2, r2, #1
700044a2:	601a      	str	r2, [r3, #0]
700044a4:	e000      	b.n	700044a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
700044a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
700044a8:	2300      	movs	r3, #0
}
700044aa:	4618      	mov	r0, r3
700044ac:	3714      	adds	r7, #20
700044ae:	46bd      	mov	sp, r7
700044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
700044b4:	4770      	bx	lr
700044b6:	bf00      	nop
700044b8:	40000400 	.word	0x40000400
700044bc:	40000800 	.word	0x40000800
700044c0:	40000c00 	.word	0x40000c00
700044c4:	42004c00 	.word	0x42004c00
700044c8:	40001800 	.word	0x40001800
700044cc:	42004000 	.word	0x42004000
700044d0:	00010007 	.word	0x00010007

700044d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
700044d4:	b580      	push	{r7, lr}
700044d6:	b084      	sub	sp, #16
700044d8:	af00      	add	r7, sp, #0
700044da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
700044dc:	687b      	ldr	r3, [r7, #4]
700044de:	681b      	ldr	r3, [r3, #0]
700044e0:	68db      	ldr	r3, [r3, #12]
700044e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
700044e4:	687b      	ldr	r3, [r7, #4]
700044e6:	681b      	ldr	r3, [r3, #0]
700044e8:	691b      	ldr	r3, [r3, #16]
700044ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
700044ec:	68bb      	ldr	r3, [r7, #8]
700044ee:	f003 0302 	and.w	r3, r3, #2
700044f2:	2b00      	cmp	r3, #0
700044f4:	d020      	beq.n	70004538 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
700044f6:	68fb      	ldr	r3, [r7, #12]
700044f8:	f003 0302 	and.w	r3, r3, #2
700044fc:	2b00      	cmp	r3, #0
700044fe:	d01b      	beq.n	70004538 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
70004500:	687b      	ldr	r3, [r7, #4]
70004502:	681b      	ldr	r3, [r3, #0]
70004504:	f06f 0202 	mvn.w	r2, #2
70004508:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
7000450a:	687b      	ldr	r3, [r7, #4]
7000450c:	2201      	movs	r2, #1
7000450e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
70004510:	687b      	ldr	r3, [r7, #4]
70004512:	681b      	ldr	r3, [r3, #0]
70004514:	699b      	ldr	r3, [r3, #24]
70004516:	f003 0303 	and.w	r3, r3, #3
7000451a:	2b00      	cmp	r3, #0
7000451c:	d003      	beq.n	70004526 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
7000451e:	6878      	ldr	r0, [r7, #4]
70004520:	f000 f931 	bl	70004786 <HAL_TIM_IC_CaptureCallback>
70004524:	e005      	b.n	70004532 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
70004526:	6878      	ldr	r0, [r7, #4]
70004528:	f000 f923 	bl	70004772 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
7000452c:	6878      	ldr	r0, [r7, #4]
7000452e:	f000 f934 	bl	7000479a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
70004532:	687b      	ldr	r3, [r7, #4]
70004534:	2200      	movs	r2, #0
70004536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
70004538:	68bb      	ldr	r3, [r7, #8]
7000453a:	f003 0304 	and.w	r3, r3, #4
7000453e:	2b00      	cmp	r3, #0
70004540:	d020      	beq.n	70004584 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
70004542:	68fb      	ldr	r3, [r7, #12]
70004544:	f003 0304 	and.w	r3, r3, #4
70004548:	2b00      	cmp	r3, #0
7000454a:	d01b      	beq.n	70004584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
7000454c:	687b      	ldr	r3, [r7, #4]
7000454e:	681b      	ldr	r3, [r3, #0]
70004550:	f06f 0204 	mvn.w	r2, #4
70004554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
70004556:	687b      	ldr	r3, [r7, #4]
70004558:	2202      	movs	r2, #2
7000455a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
7000455c:	687b      	ldr	r3, [r7, #4]
7000455e:	681b      	ldr	r3, [r3, #0]
70004560:	699b      	ldr	r3, [r3, #24]
70004562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
70004566:	2b00      	cmp	r3, #0
70004568:	d003      	beq.n	70004572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
7000456a:	6878      	ldr	r0, [r7, #4]
7000456c:	f000 f90b 	bl	70004786 <HAL_TIM_IC_CaptureCallback>
70004570:	e005      	b.n	7000457e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
70004572:	6878      	ldr	r0, [r7, #4]
70004574:	f000 f8fd 	bl	70004772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
70004578:	6878      	ldr	r0, [r7, #4]
7000457a:	f000 f90e 	bl	7000479a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
7000457e:	687b      	ldr	r3, [r7, #4]
70004580:	2200      	movs	r2, #0
70004582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
70004584:	68bb      	ldr	r3, [r7, #8]
70004586:	f003 0308 	and.w	r3, r3, #8
7000458a:	2b00      	cmp	r3, #0
7000458c:	d020      	beq.n	700045d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
7000458e:	68fb      	ldr	r3, [r7, #12]
70004590:	f003 0308 	and.w	r3, r3, #8
70004594:	2b00      	cmp	r3, #0
70004596:	d01b      	beq.n	700045d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
70004598:	687b      	ldr	r3, [r7, #4]
7000459a:	681b      	ldr	r3, [r3, #0]
7000459c:	f06f 0208 	mvn.w	r2, #8
700045a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
700045a2:	687b      	ldr	r3, [r7, #4]
700045a4:	2204      	movs	r2, #4
700045a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
700045a8:	687b      	ldr	r3, [r7, #4]
700045aa:	681b      	ldr	r3, [r3, #0]
700045ac:	69db      	ldr	r3, [r3, #28]
700045ae:	f003 0303 	and.w	r3, r3, #3
700045b2:	2b00      	cmp	r3, #0
700045b4:	d003      	beq.n	700045be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
700045b6:	6878      	ldr	r0, [r7, #4]
700045b8:	f000 f8e5 	bl	70004786 <HAL_TIM_IC_CaptureCallback>
700045bc:	e005      	b.n	700045ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
700045be:	6878      	ldr	r0, [r7, #4]
700045c0:	f000 f8d7 	bl	70004772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
700045c4:	6878      	ldr	r0, [r7, #4]
700045c6:	f000 f8e8 	bl	7000479a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
700045ca:	687b      	ldr	r3, [r7, #4]
700045cc:	2200      	movs	r2, #0
700045ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
700045d0:	68bb      	ldr	r3, [r7, #8]
700045d2:	f003 0310 	and.w	r3, r3, #16
700045d6:	2b00      	cmp	r3, #0
700045d8:	d020      	beq.n	7000461c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
700045da:	68fb      	ldr	r3, [r7, #12]
700045dc:	f003 0310 	and.w	r3, r3, #16
700045e0:	2b00      	cmp	r3, #0
700045e2:	d01b      	beq.n	7000461c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
700045e4:	687b      	ldr	r3, [r7, #4]
700045e6:	681b      	ldr	r3, [r3, #0]
700045e8:	f06f 0210 	mvn.w	r2, #16
700045ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
700045ee:	687b      	ldr	r3, [r7, #4]
700045f0:	2208      	movs	r2, #8
700045f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
700045f4:	687b      	ldr	r3, [r7, #4]
700045f6:	681b      	ldr	r3, [r3, #0]
700045f8:	69db      	ldr	r3, [r3, #28]
700045fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
700045fe:	2b00      	cmp	r3, #0
70004600:	d003      	beq.n	7000460a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
70004602:	6878      	ldr	r0, [r7, #4]
70004604:	f000 f8bf 	bl	70004786 <HAL_TIM_IC_CaptureCallback>
70004608:	e005      	b.n	70004616 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
7000460a:	6878      	ldr	r0, [r7, #4]
7000460c:	f000 f8b1 	bl	70004772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
70004610:	6878      	ldr	r0, [r7, #4]
70004612:	f000 f8c2 	bl	7000479a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
70004616:	687b      	ldr	r3, [r7, #4]
70004618:	2200      	movs	r2, #0
7000461a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
7000461c:	68bb      	ldr	r3, [r7, #8]
7000461e:	f003 0301 	and.w	r3, r3, #1
70004622:	2b00      	cmp	r3, #0
70004624:	d00c      	beq.n	70004640 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
70004626:	68fb      	ldr	r3, [r7, #12]
70004628:	f003 0301 	and.w	r3, r3, #1
7000462c:	2b00      	cmp	r3, #0
7000462e:	d007      	beq.n	70004640 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
70004630:	687b      	ldr	r3, [r7, #4]
70004632:	681b      	ldr	r3, [r3, #0]
70004634:	f06f 0201 	mvn.w	r2, #1
70004638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
7000463a:	6878      	ldr	r0, [r7, #4]
7000463c:	f7fc f856 	bl	700006ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
70004640:	68bb      	ldr	r3, [r7, #8]
70004642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
70004646:	2b00      	cmp	r3, #0
70004648:	d104      	bne.n	70004654 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
7000464a:	68bb      	ldr	r3, [r7, #8]
7000464c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
70004650:	2b00      	cmp	r3, #0
70004652:	d00c      	beq.n	7000466e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
70004654:	68fb      	ldr	r3, [r7, #12]
70004656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
7000465a:	2b00      	cmp	r3, #0
7000465c:	d007      	beq.n	7000466e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
7000465e:	687b      	ldr	r3, [r7, #4]
70004660:	681b      	ldr	r3, [r3, #0]
70004662:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
70004666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
70004668:	6878      	ldr	r0, [r7, #4]
7000466a:	f000 f963 	bl	70004934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
7000466e:	68bb      	ldr	r3, [r7, #8]
70004670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
70004674:	2b00      	cmp	r3, #0
70004676:	d00c      	beq.n	70004692 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
70004678:	68fb      	ldr	r3, [r7, #12]
7000467a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
7000467e:	2b00      	cmp	r3, #0
70004680:	d007      	beq.n	70004692 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
70004682:	687b      	ldr	r3, [r7, #4]
70004684:	681b      	ldr	r3, [r3, #0]
70004686:	f46f 7280 	mvn.w	r2, #256	@ 0x100
7000468a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
7000468c:	6878      	ldr	r0, [r7, #4]
7000468e:	f000 f95b 	bl	70004948 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
70004692:	68bb      	ldr	r3, [r7, #8]
70004694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
70004698:	2b00      	cmp	r3, #0
7000469a:	d00c      	beq.n	700046b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
7000469c:	68fb      	ldr	r3, [r7, #12]
7000469e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
700046a2:	2b00      	cmp	r3, #0
700046a4:	d007      	beq.n	700046b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
700046a6:	687b      	ldr	r3, [r7, #4]
700046a8:	681b      	ldr	r3, [r3, #0]
700046aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
700046ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
700046b0:	6878      	ldr	r0, [r7, #4]
700046b2:	f000 f87c 	bl	700047ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
700046b6:	68bb      	ldr	r3, [r7, #8]
700046b8:	f003 0320 	and.w	r3, r3, #32
700046bc:	2b00      	cmp	r3, #0
700046be:	d00c      	beq.n	700046da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
700046c0:	68fb      	ldr	r3, [r7, #12]
700046c2:	f003 0320 	and.w	r3, r3, #32
700046c6:	2b00      	cmp	r3, #0
700046c8:	d007      	beq.n	700046da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
700046ca:	687b      	ldr	r3, [r7, #4]
700046cc:	681b      	ldr	r3, [r3, #0]
700046ce:	f06f 0220 	mvn.w	r2, #32
700046d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
700046d4:	6878      	ldr	r0, [r7, #4]
700046d6:	f000 f923 	bl	70004920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
700046da:	68bb      	ldr	r3, [r7, #8]
700046dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
700046e0:	2b00      	cmp	r3, #0
700046e2:	d00c      	beq.n	700046fe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
700046e4:	68fb      	ldr	r3, [r7, #12]
700046e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
700046ea:	2b00      	cmp	r3, #0
700046ec:	d007      	beq.n	700046fe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
700046ee:	687b      	ldr	r3, [r7, #4]
700046f0:	681b      	ldr	r3, [r3, #0]
700046f2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
700046f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
700046f8:	6878      	ldr	r0, [r7, #4]
700046fa:	f000 f92f 	bl	7000495c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
700046fe:	68bb      	ldr	r3, [r7, #8]
70004700:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
70004704:	2b00      	cmp	r3, #0
70004706:	d00c      	beq.n	70004722 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
70004708:	68fb      	ldr	r3, [r7, #12]
7000470a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
7000470e:	2b00      	cmp	r3, #0
70004710:	d007      	beq.n	70004722 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
70004712:	687b      	ldr	r3, [r7, #4]
70004714:	681b      	ldr	r3, [r3, #0]
70004716:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
7000471a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
7000471c:	6878      	ldr	r0, [r7, #4]
7000471e:	f000 f927 	bl	70004970 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
70004722:	68bb      	ldr	r3, [r7, #8]
70004724:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
70004728:	2b00      	cmp	r3, #0
7000472a:	d00c      	beq.n	70004746 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
7000472c:	68fb      	ldr	r3, [r7, #12]
7000472e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
70004732:	2b00      	cmp	r3, #0
70004734:	d007      	beq.n	70004746 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
70004736:	687b      	ldr	r3, [r7, #4]
70004738:	681b      	ldr	r3, [r3, #0]
7000473a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
7000473e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
70004740:	6878      	ldr	r0, [r7, #4]
70004742:	f000 f91f 	bl	70004984 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
70004746:	68bb      	ldr	r3, [r7, #8]
70004748:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
7000474c:	2b00      	cmp	r3, #0
7000474e:	d00c      	beq.n	7000476a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
70004750:	68fb      	ldr	r3, [r7, #12]
70004752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
70004756:	2b00      	cmp	r3, #0
70004758:	d007      	beq.n	7000476a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
7000475a:	687b      	ldr	r3, [r7, #4]
7000475c:	681b      	ldr	r3, [r3, #0]
7000475e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
70004762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
70004764:	6878      	ldr	r0, [r7, #4]
70004766:	f000 f917 	bl	70004998 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
7000476a:	bf00      	nop
7000476c:	3710      	adds	r7, #16
7000476e:	46bd      	mov	sp, r7
70004770:	bd80      	pop	{r7, pc}

70004772 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
70004772:	b480      	push	{r7}
70004774:	b083      	sub	sp, #12
70004776:	af00      	add	r7, sp, #0
70004778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
7000477a:	bf00      	nop
7000477c:	370c      	adds	r7, #12
7000477e:	46bd      	mov	sp, r7
70004780:	f85d 7b04 	ldr.w	r7, [sp], #4
70004784:	4770      	bx	lr

70004786 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
70004786:	b480      	push	{r7}
70004788:	b083      	sub	sp, #12
7000478a:	af00      	add	r7, sp, #0
7000478c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
7000478e:	bf00      	nop
70004790:	370c      	adds	r7, #12
70004792:	46bd      	mov	sp, r7
70004794:	f85d 7b04 	ldr.w	r7, [sp], #4
70004798:	4770      	bx	lr

7000479a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
7000479a:	b480      	push	{r7}
7000479c:	b083      	sub	sp, #12
7000479e:	af00      	add	r7, sp, #0
700047a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
700047a2:	bf00      	nop
700047a4:	370c      	adds	r7, #12
700047a6:	46bd      	mov	sp, r7
700047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
700047ac:	4770      	bx	lr

700047ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
700047ae:	b480      	push	{r7}
700047b0:	b083      	sub	sp, #12
700047b2:	af00      	add	r7, sp, #0
700047b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
700047b6:	bf00      	nop
700047b8:	370c      	adds	r7, #12
700047ba:	46bd      	mov	sp, r7
700047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
700047c0:	4770      	bx	lr
	...

700047c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
700047c4:	b480      	push	{r7}
700047c6:	b085      	sub	sp, #20
700047c8:	af00      	add	r7, sp, #0
700047ca:	6078      	str	r0, [r7, #4]
700047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
700047ce:	687b      	ldr	r3, [r7, #4]
700047d0:	681b      	ldr	r3, [r3, #0]
700047d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
700047d4:	687b      	ldr	r3, [r7, #4]
700047d6:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
700047da:	d00f      	beq.n	700047fc <TIM_Base_SetConfig+0x38>
700047dc:	687b      	ldr	r3, [r7, #4]
700047de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
700047e2:	d00b      	beq.n	700047fc <TIM_Base_SetConfig+0x38>
700047e4:	687b      	ldr	r3, [r7, #4]
700047e6:	4a44      	ldr	r2, [pc, #272]	@ (700048f8 <TIM_Base_SetConfig+0x134>)
700047e8:	4293      	cmp	r3, r2
700047ea:	d007      	beq.n	700047fc <TIM_Base_SetConfig+0x38>
700047ec:	687b      	ldr	r3, [r7, #4]
700047ee:	4a43      	ldr	r2, [pc, #268]	@ (700048fc <TIM_Base_SetConfig+0x138>)
700047f0:	4293      	cmp	r3, r2
700047f2:	d003      	beq.n	700047fc <TIM_Base_SetConfig+0x38>
700047f4:	687b      	ldr	r3, [r7, #4]
700047f6:	4a42      	ldr	r2, [pc, #264]	@ (70004900 <TIM_Base_SetConfig+0x13c>)
700047f8:	4293      	cmp	r3, r2
700047fa:	d108      	bne.n	7000480e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
700047fc:	68fb      	ldr	r3, [r7, #12]
700047fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
70004802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
70004804:	683b      	ldr	r3, [r7, #0]
70004806:	685b      	ldr	r3, [r3, #4]
70004808:	68fa      	ldr	r2, [r7, #12]
7000480a:	4313      	orrs	r3, r2
7000480c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
7000480e:	687b      	ldr	r3, [r7, #4]
70004810:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
70004814:	d02b      	beq.n	7000486e <TIM_Base_SetConfig+0xaa>
70004816:	687b      	ldr	r3, [r7, #4]
70004818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
7000481c:	d027      	beq.n	7000486e <TIM_Base_SetConfig+0xaa>
7000481e:	687b      	ldr	r3, [r7, #4]
70004820:	4a35      	ldr	r2, [pc, #212]	@ (700048f8 <TIM_Base_SetConfig+0x134>)
70004822:	4293      	cmp	r3, r2
70004824:	d023      	beq.n	7000486e <TIM_Base_SetConfig+0xaa>
70004826:	687b      	ldr	r3, [r7, #4]
70004828:	4a34      	ldr	r2, [pc, #208]	@ (700048fc <TIM_Base_SetConfig+0x138>)
7000482a:	4293      	cmp	r3, r2
7000482c:	d01f      	beq.n	7000486e <TIM_Base_SetConfig+0xaa>
7000482e:	687b      	ldr	r3, [r7, #4]
70004830:	4a33      	ldr	r2, [pc, #204]	@ (70004900 <TIM_Base_SetConfig+0x13c>)
70004832:	4293      	cmp	r3, r2
70004834:	d01b      	beq.n	7000486e <TIM_Base_SetConfig+0xaa>
70004836:	687b      	ldr	r3, [r7, #4]
70004838:	4a32      	ldr	r2, [pc, #200]	@ (70004904 <TIM_Base_SetConfig+0x140>)
7000483a:	4293      	cmp	r3, r2
7000483c:	d017      	beq.n	7000486e <TIM_Base_SetConfig+0xaa>
7000483e:	687b      	ldr	r3, [r7, #4]
70004840:	4a31      	ldr	r2, [pc, #196]	@ (70004908 <TIM_Base_SetConfig+0x144>)
70004842:	4293      	cmp	r3, r2
70004844:	d013      	beq.n	7000486e <TIM_Base_SetConfig+0xaa>
70004846:	687b      	ldr	r3, [r7, #4]
70004848:	4a30      	ldr	r2, [pc, #192]	@ (7000490c <TIM_Base_SetConfig+0x148>)
7000484a:	4293      	cmp	r3, r2
7000484c:	d00f      	beq.n	7000486e <TIM_Base_SetConfig+0xaa>
7000484e:	687b      	ldr	r3, [r7, #4]
70004850:	4a2f      	ldr	r2, [pc, #188]	@ (70004910 <TIM_Base_SetConfig+0x14c>)
70004852:	4293      	cmp	r3, r2
70004854:	d00b      	beq.n	7000486e <TIM_Base_SetConfig+0xaa>
70004856:	687b      	ldr	r3, [r7, #4]
70004858:	4a2e      	ldr	r2, [pc, #184]	@ (70004914 <TIM_Base_SetConfig+0x150>)
7000485a:	4293      	cmp	r3, r2
7000485c:	d007      	beq.n	7000486e <TIM_Base_SetConfig+0xaa>
7000485e:	687b      	ldr	r3, [r7, #4]
70004860:	4a2d      	ldr	r2, [pc, #180]	@ (70004918 <TIM_Base_SetConfig+0x154>)
70004862:	4293      	cmp	r3, r2
70004864:	d003      	beq.n	7000486e <TIM_Base_SetConfig+0xaa>
70004866:	687b      	ldr	r3, [r7, #4]
70004868:	4a2c      	ldr	r2, [pc, #176]	@ (7000491c <TIM_Base_SetConfig+0x158>)
7000486a:	4293      	cmp	r3, r2
7000486c:	d108      	bne.n	70004880 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
7000486e:	68fb      	ldr	r3, [r7, #12]
70004870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
70004874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
70004876:	683b      	ldr	r3, [r7, #0]
70004878:	68db      	ldr	r3, [r3, #12]
7000487a:	68fa      	ldr	r2, [r7, #12]
7000487c:	4313      	orrs	r3, r2
7000487e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
70004880:	68fb      	ldr	r3, [r7, #12]
70004882:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
70004886:	683b      	ldr	r3, [r7, #0]
70004888:	695b      	ldr	r3, [r3, #20]
7000488a:	4313      	orrs	r3, r2
7000488c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
7000488e:	687b      	ldr	r3, [r7, #4]
70004890:	68fa      	ldr	r2, [r7, #12]
70004892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
70004894:	683b      	ldr	r3, [r7, #0]
70004896:	689a      	ldr	r2, [r3, #8]
70004898:	687b      	ldr	r3, [r7, #4]
7000489a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
7000489c:	683b      	ldr	r3, [r7, #0]
7000489e:	681a      	ldr	r2, [r3, #0]
700048a0:	687b      	ldr	r3, [r7, #4]
700048a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
700048a4:	687b      	ldr	r3, [r7, #4]
700048a6:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
700048aa:	d00b      	beq.n	700048c4 <TIM_Base_SetConfig+0x100>
700048ac:	687b      	ldr	r3, [r7, #4]
700048ae:	4a19      	ldr	r2, [pc, #100]	@ (70004914 <TIM_Base_SetConfig+0x150>)
700048b0:	4293      	cmp	r3, r2
700048b2:	d007      	beq.n	700048c4 <TIM_Base_SetConfig+0x100>
700048b4:	687b      	ldr	r3, [r7, #4]
700048b6:	4a18      	ldr	r2, [pc, #96]	@ (70004918 <TIM_Base_SetConfig+0x154>)
700048b8:	4293      	cmp	r3, r2
700048ba:	d003      	beq.n	700048c4 <TIM_Base_SetConfig+0x100>
700048bc:	687b      	ldr	r3, [r7, #4]
700048be:	4a17      	ldr	r2, [pc, #92]	@ (7000491c <TIM_Base_SetConfig+0x158>)
700048c0:	4293      	cmp	r3, r2
700048c2:	d103      	bne.n	700048cc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
700048c4:	683b      	ldr	r3, [r7, #0]
700048c6:	691a      	ldr	r2, [r3, #16]
700048c8:	687b      	ldr	r3, [r7, #4]
700048ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
700048cc:	687b      	ldr	r3, [r7, #4]
700048ce:	2201      	movs	r2, #1
700048d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
700048d2:	687b      	ldr	r3, [r7, #4]
700048d4:	691b      	ldr	r3, [r3, #16]
700048d6:	f003 0301 	and.w	r3, r3, #1
700048da:	2b01      	cmp	r3, #1
700048dc:	d105      	bne.n	700048ea <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
700048de:	687b      	ldr	r3, [r7, #4]
700048e0:	691b      	ldr	r3, [r3, #16]
700048e2:	f023 0201 	bic.w	r2, r3, #1
700048e6:	687b      	ldr	r3, [r7, #4]
700048e8:	611a      	str	r2, [r3, #16]
  }
}
700048ea:	bf00      	nop
700048ec:	3714      	adds	r7, #20
700048ee:	46bd      	mov	sp, r7
700048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
700048f4:	4770      	bx	lr
700048f6:	bf00      	nop
700048f8:	40000400 	.word	0x40000400
700048fc:	40000800 	.word	0x40000800
70004900:	40000c00 	.word	0x40000c00
70004904:	42004c00 	.word	0x42004c00
70004908:	40001800 	.word	0x40001800
7000490c:	40001c00 	.word	0x40001c00
70004910:	40002000 	.word	0x40002000
70004914:	42004000 	.word	0x42004000
70004918:	42004400 	.word	0x42004400
7000491c:	42004800 	.word	0x42004800

70004920 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
70004920:	b480      	push	{r7}
70004922:	b083      	sub	sp, #12
70004924:	af00      	add	r7, sp, #0
70004926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
70004928:	bf00      	nop
7000492a:	370c      	adds	r7, #12
7000492c:	46bd      	mov	sp, r7
7000492e:	f85d 7b04 	ldr.w	r7, [sp], #4
70004932:	4770      	bx	lr

70004934 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
70004934:	b480      	push	{r7}
70004936:	b083      	sub	sp, #12
70004938:	af00      	add	r7, sp, #0
7000493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
7000493c:	bf00      	nop
7000493e:	370c      	adds	r7, #12
70004940:	46bd      	mov	sp, r7
70004942:	f85d 7b04 	ldr.w	r7, [sp], #4
70004946:	4770      	bx	lr

70004948 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
70004948:	b480      	push	{r7}
7000494a:	b083      	sub	sp, #12
7000494c:	af00      	add	r7, sp, #0
7000494e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
70004950:	bf00      	nop
70004952:	370c      	adds	r7, #12
70004954:	46bd      	mov	sp, r7
70004956:	f85d 7b04 	ldr.w	r7, [sp], #4
7000495a:	4770      	bx	lr

7000495c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
7000495c:	b480      	push	{r7}
7000495e:	b083      	sub	sp, #12
70004960:	af00      	add	r7, sp, #0
70004962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
70004964:	bf00      	nop
70004966:	370c      	adds	r7, #12
70004968:	46bd      	mov	sp, r7
7000496a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000496e:	4770      	bx	lr

70004970 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
70004970:	b480      	push	{r7}
70004972:	b083      	sub	sp, #12
70004974:	af00      	add	r7, sp, #0
70004976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
70004978:	bf00      	nop
7000497a:	370c      	adds	r7, #12
7000497c:	46bd      	mov	sp, r7
7000497e:	f85d 7b04 	ldr.w	r7, [sp], #4
70004982:	4770      	bx	lr

70004984 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
70004984:	b480      	push	{r7}
70004986:	b083      	sub	sp, #12
70004988:	af00      	add	r7, sp, #0
7000498a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
7000498c:	bf00      	nop
7000498e:	370c      	adds	r7, #12
70004990:	46bd      	mov	sp, r7
70004992:	f85d 7b04 	ldr.w	r7, [sp], #4
70004996:	4770      	bx	lr

70004998 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
70004998:	b480      	push	{r7}
7000499a:	b083      	sub	sp, #12
7000499c:	af00      	add	r7, sp, #0
7000499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
700049a0:	bf00      	nop
700049a2:	370c      	adds	r7, #12
700049a4:	46bd      	mov	sp, r7
700049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
700049aa:	4770      	bx	lr

700049ac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
700049ac:	b580      	push	{r7, lr}
700049ae:	b084      	sub	sp, #16
700049b0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
700049b2:	4b92      	ldr	r3, [pc, #584]	@ (70004bfc <MX_LWIP_Init+0x250>)
700049b4:	22c0      	movs	r2, #192	@ 0xc0
700049b6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
700049b8:	4b90      	ldr	r3, [pc, #576]	@ (70004bfc <MX_LWIP_Init+0x250>)
700049ba:	22a8      	movs	r2, #168	@ 0xa8
700049bc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
700049be:	4b8f      	ldr	r3, [pc, #572]	@ (70004bfc <MX_LWIP_Init+0x250>)
700049c0:	2201      	movs	r2, #1
700049c2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 234;
700049c4:	4b8d      	ldr	r3, [pc, #564]	@ (70004bfc <MX_LWIP_Init+0x250>)
700049c6:	22ea      	movs	r2, #234	@ 0xea
700049c8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
700049ca:	4b8d      	ldr	r3, [pc, #564]	@ (70004c00 <MX_LWIP_Init+0x254>)
700049cc:	22ff      	movs	r2, #255	@ 0xff
700049ce:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
700049d0:	4b8b      	ldr	r3, [pc, #556]	@ (70004c00 <MX_LWIP_Init+0x254>)
700049d2:	22ff      	movs	r2, #255	@ 0xff
700049d4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
700049d6:	4b8a      	ldr	r3, [pc, #552]	@ (70004c00 <MX_LWIP_Init+0x254>)
700049d8:	22ff      	movs	r2, #255	@ 0xff
700049da:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
700049dc:	4b88      	ldr	r3, [pc, #544]	@ (70004c00 <MX_LWIP_Init+0x254>)
700049de:	2200      	movs	r2, #0
700049e0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
700049e2:	4b88      	ldr	r3, [pc, #544]	@ (70004c04 <MX_LWIP_Init+0x258>)
700049e4:	2200      	movs	r2, #0
700049e6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
700049e8:	4b86      	ldr	r3, [pc, #536]	@ (70004c04 <MX_LWIP_Init+0x258>)
700049ea:	2200      	movs	r2, #0
700049ec:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
700049ee:	4b85      	ldr	r3, [pc, #532]	@ (70004c04 <MX_LWIP_Init+0x258>)
700049f0:	2200      	movs	r2, #0
700049f2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
700049f4:	4b83      	ldr	r3, [pc, #524]	@ (70004c04 <MX_LWIP_Init+0x258>)
700049f6:	2200      	movs	r2, #0
700049f8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
700049fa:	2100      	movs	r1, #0
700049fc:	2000      	movs	r0, #0
700049fe:	f00e fce5 	bl	700133cc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
70004a02:	4b7e      	ldr	r3, [pc, #504]	@ (70004bfc <MX_LWIP_Init+0x250>)
70004a04:	781b      	ldrb	r3, [r3, #0]
70004a06:	061a      	lsls	r2, r3, #24
70004a08:	4b7c      	ldr	r3, [pc, #496]	@ (70004bfc <MX_LWIP_Init+0x250>)
70004a0a:	785b      	ldrb	r3, [r3, #1]
70004a0c:	041b      	lsls	r3, r3, #16
70004a0e:	431a      	orrs	r2, r3
70004a10:	4b7a      	ldr	r3, [pc, #488]	@ (70004bfc <MX_LWIP_Init+0x250>)
70004a12:	789b      	ldrb	r3, [r3, #2]
70004a14:	021b      	lsls	r3, r3, #8
70004a16:	4313      	orrs	r3, r2
70004a18:	4a78      	ldr	r2, [pc, #480]	@ (70004bfc <MX_LWIP_Init+0x250>)
70004a1a:	78d2      	ldrb	r2, [r2, #3]
70004a1c:	4313      	orrs	r3, r2
70004a1e:	061a      	lsls	r2, r3, #24
70004a20:	4b76      	ldr	r3, [pc, #472]	@ (70004bfc <MX_LWIP_Init+0x250>)
70004a22:	781b      	ldrb	r3, [r3, #0]
70004a24:	0619      	lsls	r1, r3, #24
70004a26:	4b75      	ldr	r3, [pc, #468]	@ (70004bfc <MX_LWIP_Init+0x250>)
70004a28:	785b      	ldrb	r3, [r3, #1]
70004a2a:	041b      	lsls	r3, r3, #16
70004a2c:	4319      	orrs	r1, r3
70004a2e:	4b73      	ldr	r3, [pc, #460]	@ (70004bfc <MX_LWIP_Init+0x250>)
70004a30:	789b      	ldrb	r3, [r3, #2]
70004a32:	021b      	lsls	r3, r3, #8
70004a34:	430b      	orrs	r3, r1
70004a36:	4971      	ldr	r1, [pc, #452]	@ (70004bfc <MX_LWIP_Init+0x250>)
70004a38:	78c9      	ldrb	r1, [r1, #3]
70004a3a:	430b      	orrs	r3, r1
70004a3c:	021b      	lsls	r3, r3, #8
70004a3e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
70004a42:	431a      	orrs	r2, r3
70004a44:	4b6d      	ldr	r3, [pc, #436]	@ (70004bfc <MX_LWIP_Init+0x250>)
70004a46:	781b      	ldrb	r3, [r3, #0]
70004a48:	0619      	lsls	r1, r3, #24
70004a4a:	4b6c      	ldr	r3, [pc, #432]	@ (70004bfc <MX_LWIP_Init+0x250>)
70004a4c:	785b      	ldrb	r3, [r3, #1]
70004a4e:	041b      	lsls	r3, r3, #16
70004a50:	4319      	orrs	r1, r3
70004a52:	4b6a      	ldr	r3, [pc, #424]	@ (70004bfc <MX_LWIP_Init+0x250>)
70004a54:	789b      	ldrb	r3, [r3, #2]
70004a56:	021b      	lsls	r3, r3, #8
70004a58:	430b      	orrs	r3, r1
70004a5a:	4968      	ldr	r1, [pc, #416]	@ (70004bfc <MX_LWIP_Init+0x250>)
70004a5c:	78c9      	ldrb	r1, [r1, #3]
70004a5e:	430b      	orrs	r3, r1
70004a60:	0a1b      	lsrs	r3, r3, #8
70004a62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
70004a66:	431a      	orrs	r2, r3
70004a68:	4b64      	ldr	r3, [pc, #400]	@ (70004bfc <MX_LWIP_Init+0x250>)
70004a6a:	781b      	ldrb	r3, [r3, #0]
70004a6c:	0619      	lsls	r1, r3, #24
70004a6e:	4b63      	ldr	r3, [pc, #396]	@ (70004bfc <MX_LWIP_Init+0x250>)
70004a70:	785b      	ldrb	r3, [r3, #1]
70004a72:	041b      	lsls	r3, r3, #16
70004a74:	4319      	orrs	r1, r3
70004a76:	4b61      	ldr	r3, [pc, #388]	@ (70004bfc <MX_LWIP_Init+0x250>)
70004a78:	789b      	ldrb	r3, [r3, #2]
70004a7a:	021b      	lsls	r3, r3, #8
70004a7c:	430b      	orrs	r3, r1
70004a7e:	495f      	ldr	r1, [pc, #380]	@ (70004bfc <MX_LWIP_Init+0x250>)
70004a80:	78c9      	ldrb	r1, [r1, #3]
70004a82:	430b      	orrs	r3, r1
70004a84:	0e1b      	lsrs	r3, r3, #24
70004a86:	4313      	orrs	r3, r2
70004a88:	4a5f      	ldr	r2, [pc, #380]	@ (70004c08 <MX_LWIP_Init+0x25c>)
70004a8a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
70004a8c:	4b5c      	ldr	r3, [pc, #368]	@ (70004c00 <MX_LWIP_Init+0x254>)
70004a8e:	781b      	ldrb	r3, [r3, #0]
70004a90:	061a      	lsls	r2, r3, #24
70004a92:	4b5b      	ldr	r3, [pc, #364]	@ (70004c00 <MX_LWIP_Init+0x254>)
70004a94:	785b      	ldrb	r3, [r3, #1]
70004a96:	041b      	lsls	r3, r3, #16
70004a98:	431a      	orrs	r2, r3
70004a9a:	4b59      	ldr	r3, [pc, #356]	@ (70004c00 <MX_LWIP_Init+0x254>)
70004a9c:	789b      	ldrb	r3, [r3, #2]
70004a9e:	021b      	lsls	r3, r3, #8
70004aa0:	4313      	orrs	r3, r2
70004aa2:	4a57      	ldr	r2, [pc, #348]	@ (70004c00 <MX_LWIP_Init+0x254>)
70004aa4:	78d2      	ldrb	r2, [r2, #3]
70004aa6:	4313      	orrs	r3, r2
70004aa8:	061a      	lsls	r2, r3, #24
70004aaa:	4b55      	ldr	r3, [pc, #340]	@ (70004c00 <MX_LWIP_Init+0x254>)
70004aac:	781b      	ldrb	r3, [r3, #0]
70004aae:	0619      	lsls	r1, r3, #24
70004ab0:	4b53      	ldr	r3, [pc, #332]	@ (70004c00 <MX_LWIP_Init+0x254>)
70004ab2:	785b      	ldrb	r3, [r3, #1]
70004ab4:	041b      	lsls	r3, r3, #16
70004ab6:	4319      	orrs	r1, r3
70004ab8:	4b51      	ldr	r3, [pc, #324]	@ (70004c00 <MX_LWIP_Init+0x254>)
70004aba:	789b      	ldrb	r3, [r3, #2]
70004abc:	021b      	lsls	r3, r3, #8
70004abe:	430b      	orrs	r3, r1
70004ac0:	494f      	ldr	r1, [pc, #316]	@ (70004c00 <MX_LWIP_Init+0x254>)
70004ac2:	78c9      	ldrb	r1, [r1, #3]
70004ac4:	430b      	orrs	r3, r1
70004ac6:	021b      	lsls	r3, r3, #8
70004ac8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
70004acc:	431a      	orrs	r2, r3
70004ace:	4b4c      	ldr	r3, [pc, #304]	@ (70004c00 <MX_LWIP_Init+0x254>)
70004ad0:	781b      	ldrb	r3, [r3, #0]
70004ad2:	0619      	lsls	r1, r3, #24
70004ad4:	4b4a      	ldr	r3, [pc, #296]	@ (70004c00 <MX_LWIP_Init+0x254>)
70004ad6:	785b      	ldrb	r3, [r3, #1]
70004ad8:	041b      	lsls	r3, r3, #16
70004ada:	4319      	orrs	r1, r3
70004adc:	4b48      	ldr	r3, [pc, #288]	@ (70004c00 <MX_LWIP_Init+0x254>)
70004ade:	789b      	ldrb	r3, [r3, #2]
70004ae0:	021b      	lsls	r3, r3, #8
70004ae2:	430b      	orrs	r3, r1
70004ae4:	4946      	ldr	r1, [pc, #280]	@ (70004c00 <MX_LWIP_Init+0x254>)
70004ae6:	78c9      	ldrb	r1, [r1, #3]
70004ae8:	430b      	orrs	r3, r1
70004aea:	0a1b      	lsrs	r3, r3, #8
70004aec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
70004af0:	431a      	orrs	r2, r3
70004af2:	4b43      	ldr	r3, [pc, #268]	@ (70004c00 <MX_LWIP_Init+0x254>)
70004af4:	781b      	ldrb	r3, [r3, #0]
70004af6:	0619      	lsls	r1, r3, #24
70004af8:	4b41      	ldr	r3, [pc, #260]	@ (70004c00 <MX_LWIP_Init+0x254>)
70004afa:	785b      	ldrb	r3, [r3, #1]
70004afc:	041b      	lsls	r3, r3, #16
70004afe:	4319      	orrs	r1, r3
70004b00:	4b3f      	ldr	r3, [pc, #252]	@ (70004c00 <MX_LWIP_Init+0x254>)
70004b02:	789b      	ldrb	r3, [r3, #2]
70004b04:	021b      	lsls	r3, r3, #8
70004b06:	430b      	orrs	r3, r1
70004b08:	493d      	ldr	r1, [pc, #244]	@ (70004c00 <MX_LWIP_Init+0x254>)
70004b0a:	78c9      	ldrb	r1, [r1, #3]
70004b0c:	430b      	orrs	r3, r1
70004b0e:	0e1b      	lsrs	r3, r3, #24
70004b10:	4313      	orrs	r3, r2
70004b12:	4a3e      	ldr	r2, [pc, #248]	@ (70004c0c <MX_LWIP_Init+0x260>)
70004b14:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
70004b16:	4b3b      	ldr	r3, [pc, #236]	@ (70004c04 <MX_LWIP_Init+0x258>)
70004b18:	781b      	ldrb	r3, [r3, #0]
70004b1a:	061a      	lsls	r2, r3, #24
70004b1c:	4b39      	ldr	r3, [pc, #228]	@ (70004c04 <MX_LWIP_Init+0x258>)
70004b1e:	785b      	ldrb	r3, [r3, #1]
70004b20:	041b      	lsls	r3, r3, #16
70004b22:	431a      	orrs	r2, r3
70004b24:	4b37      	ldr	r3, [pc, #220]	@ (70004c04 <MX_LWIP_Init+0x258>)
70004b26:	789b      	ldrb	r3, [r3, #2]
70004b28:	021b      	lsls	r3, r3, #8
70004b2a:	4313      	orrs	r3, r2
70004b2c:	4a35      	ldr	r2, [pc, #212]	@ (70004c04 <MX_LWIP_Init+0x258>)
70004b2e:	78d2      	ldrb	r2, [r2, #3]
70004b30:	4313      	orrs	r3, r2
70004b32:	061a      	lsls	r2, r3, #24
70004b34:	4b33      	ldr	r3, [pc, #204]	@ (70004c04 <MX_LWIP_Init+0x258>)
70004b36:	781b      	ldrb	r3, [r3, #0]
70004b38:	0619      	lsls	r1, r3, #24
70004b3a:	4b32      	ldr	r3, [pc, #200]	@ (70004c04 <MX_LWIP_Init+0x258>)
70004b3c:	785b      	ldrb	r3, [r3, #1]
70004b3e:	041b      	lsls	r3, r3, #16
70004b40:	4319      	orrs	r1, r3
70004b42:	4b30      	ldr	r3, [pc, #192]	@ (70004c04 <MX_LWIP_Init+0x258>)
70004b44:	789b      	ldrb	r3, [r3, #2]
70004b46:	021b      	lsls	r3, r3, #8
70004b48:	430b      	orrs	r3, r1
70004b4a:	492e      	ldr	r1, [pc, #184]	@ (70004c04 <MX_LWIP_Init+0x258>)
70004b4c:	78c9      	ldrb	r1, [r1, #3]
70004b4e:	430b      	orrs	r3, r1
70004b50:	021b      	lsls	r3, r3, #8
70004b52:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
70004b56:	431a      	orrs	r2, r3
70004b58:	4b2a      	ldr	r3, [pc, #168]	@ (70004c04 <MX_LWIP_Init+0x258>)
70004b5a:	781b      	ldrb	r3, [r3, #0]
70004b5c:	0619      	lsls	r1, r3, #24
70004b5e:	4b29      	ldr	r3, [pc, #164]	@ (70004c04 <MX_LWIP_Init+0x258>)
70004b60:	785b      	ldrb	r3, [r3, #1]
70004b62:	041b      	lsls	r3, r3, #16
70004b64:	4319      	orrs	r1, r3
70004b66:	4b27      	ldr	r3, [pc, #156]	@ (70004c04 <MX_LWIP_Init+0x258>)
70004b68:	789b      	ldrb	r3, [r3, #2]
70004b6a:	021b      	lsls	r3, r3, #8
70004b6c:	430b      	orrs	r3, r1
70004b6e:	4925      	ldr	r1, [pc, #148]	@ (70004c04 <MX_LWIP_Init+0x258>)
70004b70:	78c9      	ldrb	r1, [r1, #3]
70004b72:	430b      	orrs	r3, r1
70004b74:	0a1b      	lsrs	r3, r3, #8
70004b76:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
70004b7a:	431a      	orrs	r2, r3
70004b7c:	4b21      	ldr	r3, [pc, #132]	@ (70004c04 <MX_LWIP_Init+0x258>)
70004b7e:	781b      	ldrb	r3, [r3, #0]
70004b80:	0619      	lsls	r1, r3, #24
70004b82:	4b20      	ldr	r3, [pc, #128]	@ (70004c04 <MX_LWIP_Init+0x258>)
70004b84:	785b      	ldrb	r3, [r3, #1]
70004b86:	041b      	lsls	r3, r3, #16
70004b88:	4319      	orrs	r1, r3
70004b8a:	4b1e      	ldr	r3, [pc, #120]	@ (70004c04 <MX_LWIP_Init+0x258>)
70004b8c:	789b      	ldrb	r3, [r3, #2]
70004b8e:	021b      	lsls	r3, r3, #8
70004b90:	430b      	orrs	r3, r1
70004b92:	491c      	ldr	r1, [pc, #112]	@ (70004c04 <MX_LWIP_Init+0x258>)
70004b94:	78c9      	ldrb	r1, [r1, #3]
70004b96:	430b      	orrs	r3, r1
70004b98:	0e1b      	lsrs	r3, r3, #24
70004b9a:	4313      	orrs	r3, r2
70004b9c:	4a1c      	ldr	r2, [pc, #112]	@ (70004c10 <MX_LWIP_Init+0x264>)
70004b9e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
70004ba0:	4b1c      	ldr	r3, [pc, #112]	@ (70004c14 <MX_LWIP_Init+0x268>)
70004ba2:	9302      	str	r3, [sp, #8]
70004ba4:	4b1c      	ldr	r3, [pc, #112]	@ (70004c18 <MX_LWIP_Init+0x26c>)
70004ba6:	9301      	str	r3, [sp, #4]
70004ba8:	2300      	movs	r3, #0
70004baa:	9300      	str	r3, [sp, #0]
70004bac:	4b18      	ldr	r3, [pc, #96]	@ (70004c10 <MX_LWIP_Init+0x264>)
70004bae:	4a17      	ldr	r2, [pc, #92]	@ (70004c0c <MX_LWIP_Init+0x260>)
70004bb0:	4915      	ldr	r1, [pc, #84]	@ (70004c08 <MX_LWIP_Init+0x25c>)
70004bb2:	481a      	ldr	r0, [pc, #104]	@ (70004c1c <MX_LWIP_Init+0x270>)
70004bb4:	f008 f822 	bl	7000cbfc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
70004bb8:	4818      	ldr	r0, [pc, #96]	@ (70004c1c <MX_LWIP_Init+0x270>)
70004bba:	f008 f9bf 	bl	7000cf3c <netif_set_default>

  ethernet_link_status_updated(&gnetif);
70004bbe:	4817      	ldr	r0, [pc, #92]	@ (70004c1c <MX_LWIP_Init+0x270>)
70004bc0:	f000 f836 	bl	70004c30 <ethernet_link_status_updated>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
70004bc4:	4916      	ldr	r1, [pc, #88]	@ (70004c20 <MX_LWIP_Init+0x274>)
70004bc6:	4815      	ldr	r0, [pc, #84]	@ (70004c1c <MX_LWIP_Init+0x270>)
70004bc8:	f008 fa92 	bl	7000d0f0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
70004bcc:	2224      	movs	r2, #36	@ 0x24
70004bce:	2100      	movs	r1, #0
70004bd0:	4814      	ldr	r0, [pc, #80]	@ (70004c24 <MX_LWIP_Init+0x278>)
70004bd2:	f00f f902 	bl	70013dda <memset>
  attributes.name = "EthLink";
70004bd6:	4b13      	ldr	r3, [pc, #76]	@ (70004c24 <MX_LWIP_Init+0x278>)
70004bd8:	4a13      	ldr	r2, [pc, #76]	@ (70004c28 <MX_LWIP_Init+0x27c>)
70004bda:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
70004bdc:	4b11      	ldr	r3, [pc, #68]	@ (70004c24 <MX_LWIP_Init+0x278>)
70004bde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
70004be2:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
70004be4:	4b0f      	ldr	r3, [pc, #60]	@ (70004c24 <MX_LWIP_Init+0x278>)
70004be6:	2210      	movs	r2, #16
70004be8:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
70004bea:	4a0e      	ldr	r2, [pc, #56]	@ (70004c24 <MX_LWIP_Init+0x278>)
70004bec:	490b      	ldr	r1, [pc, #44]	@ (70004c1c <MX_LWIP_Init+0x270>)
70004bee:	480f      	ldr	r0, [pc, #60]	@ (70004c2c <MX_LWIP_Init+0x280>)
70004bf0:	f000 fe06 	bl	70005800 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
70004bf4:	bf00      	nop
70004bf6:	46bd      	mov	sp, r7
70004bf8:	bd80      	pop	{r7, pc}
70004bfa:	bf00      	nop
70004bfc:	24000148 	.word	0x24000148
70004c00:	2400014c 	.word	0x2400014c
70004c04:	24000150 	.word	0x24000150
70004c08:	2400013c 	.word	0x2400013c
70004c0c:	24000140 	.word	0x24000140
70004c10:	24000144 	.word	0x24000144
70004c14:	70013309 	.word	0x70013309
70004c18:	70005119 	.word	0x70005119
70004c1c:	24000108 	.word	0x24000108
70004c20:	70004c31 	.word	0x70004c31
70004c24:	24000154 	.word	0x24000154
70004c28:	70014c08 	.word	0x70014c08
70004c2c:	70005401 	.word	0x70005401

70004c30 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
70004c30:	b480      	push	{r7}
70004c32:	b083      	sub	sp, #12
70004c34:	af00      	add	r7, sp, #0
70004c36:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
70004c38:	bf00      	nop
70004c3a:	370c      	adds	r7, #12
70004c3c:	46bd      	mov	sp, r7
70004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
70004c42:	4770      	bx	lr

70004c44 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
70004c44:	b580      	push	{r7, lr}
70004c46:	b082      	sub	sp, #8
70004c48:	af00      	add	r7, sp, #0
70004c4a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
70004c4c:	4b04      	ldr	r3, [pc, #16]	@ (70004c60 <HAL_ETH_RxCpltCallback+0x1c>)
70004c4e:	681b      	ldr	r3, [r3, #0]
70004c50:	4618      	mov	r0, r3
70004c52:	f001 f891 	bl	70005d78 <osSemaphoreRelease>
}
70004c56:	bf00      	nop
70004c58:	3708      	adds	r7, #8
70004c5a:	46bd      	mov	sp, r7
70004c5c:	bd80      	pop	{r7, pc}
70004c5e:	bf00      	nop
70004c60:	24000180 	.word	0x24000180

70004c64 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
70004c64:	b580      	push	{r7, lr}
70004c66:	b082      	sub	sp, #8
70004c68:	af00      	add	r7, sp, #0
70004c6a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
70004c6c:	4b04      	ldr	r3, [pc, #16]	@ (70004c80 <HAL_ETH_TxCpltCallback+0x1c>)
70004c6e:	681b      	ldr	r3, [r3, #0]
70004c70:	4618      	mov	r0, r3
70004c72:	f001 f881 	bl	70005d78 <osSemaphoreRelease>
}
70004c76:	bf00      	nop
70004c78:	3708      	adds	r7, #8
70004c7a:	46bd      	mov	sp, r7
70004c7c:	bd80      	pop	{r7, pc}
70004c7e:	bf00      	nop
70004c80:	24000184 	.word	0x24000184

70004c84 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
70004c84:	b580      	push	{r7, lr}
70004c86:	b082      	sub	sp, #8
70004c88:	af00      	add	r7, sp, #0
70004c8a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
70004c8c:	6878      	ldr	r0, [r7, #4]
70004c8e:	f7fd fb42 	bl	70002316 <HAL_ETH_GetDMAError>
70004c92:	4603      	mov	r3, r0
70004c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
70004c98:	2b80      	cmp	r3, #128	@ 0x80
70004c9a:	d104      	bne.n	70004ca6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
70004c9c:	4b04      	ldr	r3, [pc, #16]	@ (70004cb0 <HAL_ETH_ErrorCallback+0x2c>)
70004c9e:	681b      	ldr	r3, [r3, #0]
70004ca0:	4618      	mov	r0, r3
70004ca2:	f001 f869 	bl	70005d78 <osSemaphoreRelease>
  }
}
70004ca6:	bf00      	nop
70004ca8:	3708      	adds	r7, #8
70004caa:	46bd      	mov	sp, r7
70004cac:	bd80      	pop	{r7, pc}
70004cae:	bf00      	nop
70004cb0:	24000180 	.word	0x24000180

70004cb4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
70004cb4:	b580      	push	{r7, lr}
70004cb6:	b0aa      	sub	sp, #168	@ 0xa8
70004cb8:	af00      	add	r7, sp, #0
70004cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
70004cbc:	2300      	movs	r3, #0
70004cbe:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
70004cc2:	2300      	movs	r3, #0
70004cc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
70004cc8:	2300      	movs	r3, #0
70004cca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
70004cce:	f107 0310 	add.w	r3, r7, #16
70004cd2:	2264      	movs	r2, #100	@ 0x64
70004cd4:	2100      	movs	r1, #0
70004cd6:	4618      	mov	r0, r3
70004cd8:	f00f f87f 	bl	70013dda <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
70004cdc:	4b89      	ldr	r3, [pc, #548]	@ (70004f04 <low_level_init+0x250>)
70004cde:	4a8a      	ldr	r2, [pc, #552]	@ (70004f08 <low_level_init+0x254>)
70004ce0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
70004ce2:	2300      	movs	r3, #0
70004ce4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
70004ce6:	2380      	movs	r3, #128	@ 0x80
70004ce8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
70004cea:	23e1      	movs	r3, #225	@ 0xe1
70004cec:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
70004cee:	2300      	movs	r3, #0
70004cf0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
70004cf2:	2300      	movs	r3, #0
70004cf4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
70004cf6:	2300      	movs	r3, #0
70004cf8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
70004cfa:	4a82      	ldr	r2, [pc, #520]	@ (70004f04 <low_level_init+0x250>)
70004cfc:	f107 0308 	add.w	r3, r7, #8
70004d00:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
70004d02:	4b80      	ldr	r3, [pc, #512]	@ (70004f04 <low_level_init+0x250>)
70004d04:	2201      	movs	r2, #1
70004d06:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
70004d08:	4b7e      	ldr	r3, [pc, #504]	@ (70004f04 <low_level_init+0x250>)
70004d0a:	4a80      	ldr	r2, [pc, #512]	@ (70004f0c <low_level_init+0x258>)
70004d0c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
70004d0e:	4b7d      	ldr	r3, [pc, #500]	@ (70004f04 <low_level_init+0x250>)
70004d10:	4a7f      	ldr	r2, [pc, #508]	@ (70004f10 <low_level_init+0x25c>)
70004d12:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1000;
70004d14:	4b7b      	ldr	r3, [pc, #492]	@ (70004f04 <low_level_init+0x250>)
70004d16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
70004d1a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
70004d1c:	4879      	ldr	r0, [pc, #484]	@ (70004f04 <low_level_init+0x250>)
70004d1e:	f7fc fb21 	bl	70001364 <HAL_ETH_Init>
70004d22:	4603      	mov	r3, r0
70004d24:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfigTypeDef));
70004d28:	2238      	movs	r2, #56	@ 0x38
70004d2a:	2100      	movs	r1, #0
70004d2c:	4879      	ldr	r0, [pc, #484]	@ (70004f14 <low_level_init+0x260>)
70004d2e:	f00f f854 	bl	70013dda <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
70004d32:	4b78      	ldr	r3, [pc, #480]	@ (70004f14 <low_level_init+0x260>)
70004d34:	2221      	movs	r2, #33	@ 0x21
70004d36:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
70004d38:	4b76      	ldr	r3, [pc, #472]	@ (70004f14 <low_level_init+0x260>)
70004d3a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
70004d3e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
70004d40:	4b74      	ldr	r3, [pc, #464]	@ (70004f14 <low_level_init+0x260>)
70004d42:	2200      	movs	r2, #0
70004d44:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
70004d46:	4874      	ldr	r0, [pc, #464]	@ (70004f18 <low_level_init+0x264>)
70004d48:	f007 fe2c 	bl	7000c9a4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
70004d4c:	687b      	ldr	r3, [r7, #4]
70004d4e:	2206      	movs	r2, #6
70004d50:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
70004d54:	4b6b      	ldr	r3, [pc, #428]	@ (70004f04 <low_level_init+0x250>)
70004d56:	685b      	ldr	r3, [r3, #4]
70004d58:	781a      	ldrb	r2, [r3, #0]
70004d5a:	687b      	ldr	r3, [r7, #4]
70004d5c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
70004d60:	4b68      	ldr	r3, [pc, #416]	@ (70004f04 <low_level_init+0x250>)
70004d62:	685b      	ldr	r3, [r3, #4]
70004d64:	785a      	ldrb	r2, [r3, #1]
70004d66:	687b      	ldr	r3, [r7, #4]
70004d68:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
70004d6c:	4b65      	ldr	r3, [pc, #404]	@ (70004f04 <low_level_init+0x250>)
70004d6e:	685b      	ldr	r3, [r3, #4]
70004d70:	789a      	ldrb	r2, [r3, #2]
70004d72:	687b      	ldr	r3, [r7, #4]
70004d74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
70004d78:	4b62      	ldr	r3, [pc, #392]	@ (70004f04 <low_level_init+0x250>)
70004d7a:	685b      	ldr	r3, [r3, #4]
70004d7c:	78da      	ldrb	r2, [r3, #3]
70004d7e:	687b      	ldr	r3, [r7, #4]
70004d80:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
70004d84:	4b5f      	ldr	r3, [pc, #380]	@ (70004f04 <low_level_init+0x250>)
70004d86:	685b      	ldr	r3, [r3, #4]
70004d88:	791a      	ldrb	r2, [r3, #4]
70004d8a:	687b      	ldr	r3, [r7, #4]
70004d8c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
70004d90:	4b5c      	ldr	r3, [pc, #368]	@ (70004f04 <low_level_init+0x250>)
70004d92:	685b      	ldr	r3, [r3, #4]
70004d94:	795a      	ldrb	r2, [r3, #5]
70004d96:	687b      	ldr	r3, [r7, #4]
70004d98:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
70004d9c:	687b      	ldr	r3, [r7, #4]
70004d9e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
70004da2:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
70004da4:	687b      	ldr	r3, [r7, #4]
70004da6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
70004daa:	f043 030a 	orr.w	r3, r3, #10
70004dae:	b2da      	uxtb	r2, r3
70004db0:	687b      	ldr	r3, [r7, #4]
70004db2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
70004db6:	2200      	movs	r2, #0
70004db8:	2100      	movs	r1, #0
70004dba:	2001      	movs	r0, #1
70004dbc:	f000 ff03 	bl	70005bc6 <osSemaphoreNew>
70004dc0:	4603      	mov	r3, r0
70004dc2:	4a56      	ldr	r2, [pc, #344]	@ (70004f1c <low_level_init+0x268>)
70004dc4:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
70004dc6:	2200      	movs	r2, #0
70004dc8:	2100      	movs	r1, #0
70004dca:	2001      	movs	r0, #1
70004dcc:	f000 fefb 	bl	70005bc6 <osSemaphoreNew>
70004dd0:	4603      	mov	r3, r0
70004dd2:	4a53      	ldr	r2, [pc, #332]	@ (70004f20 <low_level_init+0x26c>)
70004dd4:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
70004dd6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
70004dda:	2224      	movs	r2, #36	@ 0x24
70004ddc:	2100      	movs	r1, #0
70004dde:	4618      	mov	r0, r3
70004de0:	f00e fffb 	bl	70013dda <memset>
  attributes.name = "EthIf";
70004de4:	4b4f      	ldr	r3, [pc, #316]	@ (70004f24 <low_level_init+0x270>)
70004de6:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
70004de8:	f44f 73af 	mov.w	r3, #350	@ 0x15e
70004dec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
70004df0:	2330      	movs	r3, #48	@ 0x30
70004df2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
70004df6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
70004dfa:	461a      	mov	r2, r3
70004dfc:	6879      	ldr	r1, [r7, #4]
70004dfe:	484a      	ldr	r0, [pc, #296]	@ (70004f28 <low_level_init+0x274>)
70004e00:	f000 fcfe 	bl	70005800 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
70004e04:	4949      	ldr	r1, [pc, #292]	@ (70004f2c <low_level_init+0x278>)
70004e06:	484a      	ldr	r0, [pc, #296]	@ (70004f30 <low_level_init+0x27c>)
70004e08:	f7fb ff97 	bl	70000d3a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
70004e0c:	4848      	ldr	r0, [pc, #288]	@ (70004f30 <low_level_init+0x27c>)
70004e0e:	f7fb ffc6 	bl	70000d9e <LAN8742_Init>
70004e12:	4603      	mov	r3, r0
70004e14:	2b00      	cmp	r3, #0
70004e16:	d006      	beq.n	70004e26 <low_level_init+0x172>
  {
    netif_set_link_down(netif);
70004e18:	6878      	ldr	r0, [r7, #4]
70004e1a:	f008 f947 	bl	7000d0ac <netif_set_link_down>
    netif_set_down(netif);
70004e1e:	6878      	ldr	r0, [r7, #4]
70004e20:	f008 f8fa 	bl	7000d018 <netif_set_down>
70004e24:	e06b      	b.n	70004efe <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
70004e26:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
70004e2a:	2b00      	cmp	r3, #0
70004e2c:	d165      	bne.n	70004efa <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
70004e2e:	4840      	ldr	r0, [pc, #256]	@ (70004f30 <low_level_init+0x27c>)
70004e30:	f7fc f85d 	bl	70000eee <LAN8742_GetLinkState>
70004e34:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
70004e38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
70004e3c:	2b01      	cmp	r3, #1
70004e3e:	dc06      	bgt.n	70004e4e <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
70004e40:	6878      	ldr	r0, [r7, #4]
70004e42:	f008 f933 	bl	7000d0ac <netif_set_link_down>
      netif_set_down(netif);
70004e46:	6878      	ldr	r0, [r7, #4]
70004e48:	f008 f8e6 	bl	7000d018 <netif_set_down>
70004e4c:	e057      	b.n	70004efe <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
70004e4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
70004e52:	3b02      	subs	r3, #2
70004e54:	2b03      	cmp	r3, #3
70004e56:	d82b      	bhi.n	70004eb0 <low_level_init+0x1fc>
70004e58:	a201      	add	r2, pc, #4	@ (adr r2, 70004e60 <low_level_init+0x1ac>)
70004e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70004e5e:	bf00      	nop
70004e60:	70004e71 	.word	0x70004e71
70004e64:	70004e83 	.word	0x70004e83
70004e68:	70004e93 	.word	0x70004e93
70004e6c:	70004ea3 	.word	0x70004ea3
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
70004e70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
70004e74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
70004e78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
70004e7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
70004e80:	e01f      	b.n	70004ec2 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
70004e82:	2300      	movs	r3, #0
70004e84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
70004e88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
70004e8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
70004e90:	e017      	b.n	70004ec2 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
70004e92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
70004e96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
70004e9a:	2300      	movs	r3, #0
70004e9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
70004ea0:	e00f      	b.n	70004ec2 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
70004ea2:	2300      	movs	r3, #0
70004ea4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
70004ea8:	2300      	movs	r3, #0
70004eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
70004eae:	e008      	b.n	70004ec2 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
70004eb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
70004eb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
70004eb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
70004ebc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
70004ec0:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
70004ec2:	f107 0310 	add.w	r3, r7, #16
70004ec6:	4619      	mov	r1, r3
70004ec8:	480e      	ldr	r0, [pc, #56]	@ (70004f04 <low_level_init+0x250>)
70004eca:	f7fc ffd9 	bl	70001e80 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
70004ece:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
70004ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
70004ed4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
70004ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
70004eda:	f107 0310 	add.w	r3, r7, #16
70004ede:	4619      	mov	r1, r3
70004ee0:	4808      	ldr	r0, [pc, #32]	@ (70004f04 <low_level_init+0x250>)
70004ee2:	f7fd f9a1 	bl	70002228 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
70004ee6:	4807      	ldr	r0, [pc, #28]	@ (70004f04 <low_level_init+0x250>)
70004ee8:	f7fc fb38 	bl	7000155c <HAL_ETH_Start_IT>
    netif_set_up(netif);
70004eec:	6878      	ldr	r0, [r7, #4]
70004eee:	f008 f835 	bl	7000cf5c <netif_set_up>
    netif_set_link_up(netif);
70004ef2:	6878      	ldr	r0, [r7, #4]
70004ef4:	f008 f8b4 	bl	7000d060 <netif_set_link_up>
70004ef8:	e001      	b.n	70004efe <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
70004efa:	f7fb fc09 	bl	70000710 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
70004efe:	37a8      	adds	r7, #168	@ 0xa8
70004f00:	46bd      	mov	sp, r7
70004f02:	bd80      	pop	{r7, pc}
70004f04:	24000188 	.word	0x24000188
70004f08:	40028000 	.word	0x40028000
70004f0c:	24020080 	.word	0x24020080
70004f10:	24020000 	.word	0x24020000
70004f14:	24000238 	.word	0x24000238
70004f18:	70017240 	.word	0x70017240
70004f1c:	24000180 	.word	0x24000180
70004f20:	24000184 	.word	0x24000184
70004f24:	70014c10 	.word	0x70014c10
70004f28:	700050c5 	.word	0x700050c5
70004f2c:	2400000c 	.word	0x2400000c
70004f30:	24000270 	.word	0x24000270

70004f34 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
70004f34:	b580      	push	{r7, lr}
70004f36:	b092      	sub	sp, #72	@ 0x48
70004f38:	af00      	add	r7, sp, #0
70004f3a:	6078      	str	r0, [r7, #4]
70004f3c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
70004f3e:	2300      	movs	r3, #0
70004f40:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
70004f42:	2300      	movs	r3, #0
70004f44:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
70004f46:	2300      	movs	r3, #0
70004f48:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
70004f4c:	f107 030c 	add.w	r3, r7, #12
70004f50:	2230      	movs	r2, #48	@ 0x30
70004f52:	2100      	movs	r1, #0
70004f54:	4618      	mov	r0, r3
70004f56:	f00e ff40 	bl	70013dda <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
70004f5a:	f107 030c 	add.w	r3, r7, #12
70004f5e:	2230      	movs	r2, #48	@ 0x30
70004f60:	2100      	movs	r1, #0
70004f62:	4618      	mov	r0, r3
70004f64:	f00e ff39 	bl	70013dda <memset>

  for(q = p; q != NULL; q = q->next)
70004f68:	683b      	ldr	r3, [r7, #0]
70004f6a:	643b      	str	r3, [r7, #64]	@ 0x40
70004f6c:	e045      	b.n	70004ffa <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
70004f6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
70004f70:	2b03      	cmp	r3, #3
70004f72:	d902      	bls.n	70004f7a <low_level_output+0x46>
      return ERR_IF;
70004f74:	f06f 030b 	mvn.w	r3, #11
70004f78:	e07f      	b.n	7000507a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
70004f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
70004f7c:	6859      	ldr	r1, [r3, #4]
70004f7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
70004f80:	4613      	mov	r3, r2
70004f82:	005b      	lsls	r3, r3, #1
70004f84:	4413      	add	r3, r2
70004f86:	009b      	lsls	r3, r3, #2
70004f88:	3348      	adds	r3, #72	@ 0x48
70004f8a:	443b      	add	r3, r7
70004f8c:	3b3c      	subs	r3, #60	@ 0x3c
70004f8e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
70004f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
70004f92:	895b      	ldrh	r3, [r3, #10]
70004f94:	4619      	mov	r1, r3
70004f96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
70004f98:	4613      	mov	r3, r2
70004f9a:	005b      	lsls	r3, r3, #1
70004f9c:	4413      	add	r3, r2
70004f9e:	009b      	lsls	r3, r3, #2
70004fa0:	3348      	adds	r3, #72	@ 0x48
70004fa2:	443b      	add	r3, r7
70004fa4:	3b38      	subs	r3, #56	@ 0x38
70004fa6:	6019      	str	r1, [r3, #0]

    if(i>0)
70004fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
70004faa:	2b00      	cmp	r3, #0
70004fac:	d011      	beq.n	70004fd2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
70004fae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
70004fb0:	1e5a      	subs	r2, r3, #1
70004fb2:	f107 000c 	add.w	r0, r7, #12
70004fb6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
70004fb8:	460b      	mov	r3, r1
70004fba:	005b      	lsls	r3, r3, #1
70004fbc:	440b      	add	r3, r1
70004fbe:	009b      	lsls	r3, r3, #2
70004fc0:	18c1      	adds	r1, r0, r3
70004fc2:	4613      	mov	r3, r2
70004fc4:	005b      	lsls	r3, r3, #1
70004fc6:	4413      	add	r3, r2
70004fc8:	009b      	lsls	r3, r3, #2
70004fca:	3348      	adds	r3, #72	@ 0x48
70004fcc:	443b      	add	r3, r7
70004fce:	3b34      	subs	r3, #52	@ 0x34
70004fd0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
70004fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
70004fd4:	681b      	ldr	r3, [r3, #0]
70004fd6:	2b00      	cmp	r3, #0
70004fd8:	d109      	bne.n	70004fee <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
70004fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
70004fdc:	4613      	mov	r3, r2
70004fde:	005b      	lsls	r3, r3, #1
70004fe0:	4413      	add	r3, r2
70004fe2:	009b      	lsls	r3, r3, #2
70004fe4:	3348      	adds	r3, #72	@ 0x48
70004fe6:	443b      	add	r3, r7
70004fe8:	3b34      	subs	r3, #52	@ 0x34
70004fea:	2200      	movs	r2, #0
70004fec:	601a      	str	r2, [r3, #0]
    }

    i++;
70004fee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
70004ff0:	3301      	adds	r3, #1
70004ff2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
70004ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
70004ff6:	681b      	ldr	r3, [r3, #0]
70004ff8:	643b      	str	r3, [r7, #64]	@ 0x40
70004ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
70004ffc:	2b00      	cmp	r3, #0
70004ffe:	d1b6      	bne.n	70004f6e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
70005000:	683b      	ldr	r3, [r7, #0]
70005002:	891b      	ldrh	r3, [r3, #8]
70005004:	461a      	mov	r2, r3
70005006:	4b1f      	ldr	r3, [pc, #124]	@ (70005084 <low_level_output+0x150>)
70005008:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
7000500a:	4a1e      	ldr	r2, [pc, #120]	@ (70005084 <low_level_output+0x150>)
7000500c:	f107 030c 	add.w	r3, r7, #12
70005010:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
70005012:	4a1c      	ldr	r2, [pc, #112]	@ (70005084 <low_level_output+0x150>)
70005014:	683b      	ldr	r3, [r7, #0]
70005016:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
70005018:	6838      	ldr	r0, [r7, #0]
7000501a:	f008 fcb3 	bl	7000d984 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
7000501e:	4919      	ldr	r1, [pc, #100]	@ (70005084 <low_level_output+0x150>)
70005020:	4819      	ldr	r0, [pc, #100]	@ (70005088 <low_level_output+0x154>)
70005022:	f7fc fb87 	bl	70001734 <HAL_ETH_Transmit_IT>
70005026:	4603      	mov	r3, r0
70005028:	2b00      	cmp	r3, #0
7000502a:	d103      	bne.n	70005034 <low_level_output+0x100>
    {
      errval = ERR_OK;
7000502c:	2300      	movs	r3, #0
7000502e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
70005032:	e01b      	b.n	7000506c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
70005034:	4814      	ldr	r0, [pc, #80]	@ (70005088 <low_level_output+0x154>)
70005036:	f7fd f961 	bl	700022fc <HAL_ETH_GetError>
7000503a:	4603      	mov	r3, r0
7000503c:	f003 0302 	and.w	r3, r3, #2
70005040:	2b00      	cmp	r3, #0
70005042:	d00d      	beq.n	70005060 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
70005044:	4b11      	ldr	r3, [pc, #68]	@ (7000508c <low_level_output+0x158>)
70005046:	681b      	ldr	r3, [r3, #0]
70005048:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
7000504c:	4618      	mov	r0, r3
7000504e:	f000 fe43 	bl	70005cd8 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
70005052:	480d      	ldr	r0, [pc, #52]	@ (70005088 <low_level_output+0x154>)
70005054:	f7fc fcf5 	bl	70001a42 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
70005058:	23fe      	movs	r3, #254	@ 0xfe
7000505a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
7000505e:	e005      	b.n	7000506c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
70005060:	6838      	ldr	r0, [r7, #0]
70005062:	f008 fbe9 	bl	7000d838 <pbuf_free>
        errval =  ERR_IF;
70005066:	23f4      	movs	r3, #244	@ 0xf4
70005068:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
7000506c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
70005070:	f113 0f02 	cmn.w	r3, #2
70005074:	d0d3      	beq.n	7000501e <low_level_output+0xea>

  return errval;
70005076:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
7000507a:	4618      	mov	r0, r3
7000507c:	3748      	adds	r7, #72	@ 0x48
7000507e:	46bd      	mov	sp, r7
70005080:	bd80      	pop	{r7, pc}
70005082:	bf00      	nop
70005084:	24000238 	.word	0x24000238
70005088:	24000188 	.word	0x24000188
7000508c:	24000184 	.word	0x24000184

70005090 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
70005090:	b580      	push	{r7, lr}
70005092:	b084      	sub	sp, #16
70005094:	af00      	add	r7, sp, #0
70005096:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
70005098:	2300      	movs	r3, #0
7000509a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
7000509c:	4b07      	ldr	r3, [pc, #28]	@ (700050bc <low_level_input+0x2c>)
7000509e:	781b      	ldrb	r3, [r3, #0]
700050a0:	2b00      	cmp	r3, #0
700050a2:	d105      	bne.n	700050b0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
700050a4:	f107 030c 	add.w	r3, r7, #12
700050a8:	4619      	mov	r1, r3
700050aa:	4805      	ldr	r0, [pc, #20]	@ (700050c0 <low_level_input+0x30>)
700050ac:	f7fc fb93 	bl	700017d6 <HAL_ETH_ReadData>
  }

  return p;
700050b0:	68fb      	ldr	r3, [r7, #12]
}
700050b2:	4618      	mov	r0, r3
700050b4:	3710      	adds	r7, #16
700050b6:	46bd      	mov	sp, r7
700050b8:	bd80      	pop	{r7, pc}
700050ba:	bf00      	nop
700050bc:	2400017c 	.word	0x2400017c
700050c0:	24000188 	.word	0x24000188

700050c4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
700050c4:	b580      	push	{r7, lr}
700050c6:	b084      	sub	sp, #16
700050c8:	af00      	add	r7, sp, #0
700050ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
700050cc:	2300      	movs	r3, #0
700050ce:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
700050d0:	687b      	ldr	r3, [r7, #4]
700050d2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
700050d4:	4b0f      	ldr	r3, [pc, #60]	@ (70005114 <ethernetif_input+0x50>)
700050d6:	681b      	ldr	r3, [r3, #0]
700050d8:	f04f 31ff 	mov.w	r1, #4294967295
700050dc:	4618      	mov	r0, r3
700050de:	f000 fdfb 	bl	70005cd8 <osSemaphoreAcquire>
700050e2:	4603      	mov	r3, r0
700050e4:	2b00      	cmp	r3, #0
700050e6:	d1f5      	bne.n	700050d4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
700050e8:	68b8      	ldr	r0, [r7, #8]
700050ea:	f7ff ffd1 	bl	70005090 <low_level_input>
700050ee:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
700050f0:	68fb      	ldr	r3, [r7, #12]
700050f2:	2b00      	cmp	r3, #0
700050f4:	d00a      	beq.n	7000510c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
700050f6:	68bb      	ldr	r3, [r7, #8]
700050f8:	691b      	ldr	r3, [r3, #16]
700050fa:	68b9      	ldr	r1, [r7, #8]
700050fc:	68f8      	ldr	r0, [r7, #12]
700050fe:	4798      	blx	r3
70005100:	4603      	mov	r3, r0
70005102:	2b00      	cmp	r3, #0
70005104:	d002      	beq.n	7000510c <ethernetif_input+0x48>
          {
            pbuf_free(p);
70005106:	68f8      	ldr	r0, [r7, #12]
70005108:	f008 fb96 	bl	7000d838 <pbuf_free>
          }
        }
      } while(p!=NULL);
7000510c:	68fb      	ldr	r3, [r7, #12]
7000510e:	2b00      	cmp	r3, #0
70005110:	d1ea      	bne.n	700050e8 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
70005112:	e7df      	b.n	700050d4 <ethernetif_input+0x10>
70005114:	24000180 	.word	0x24000180

70005118 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
70005118:	b580      	push	{r7, lr}
7000511a:	b082      	sub	sp, #8
7000511c:	af00      	add	r7, sp, #0
7000511e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
70005120:	687b      	ldr	r3, [r7, #4]
70005122:	2b00      	cmp	r3, #0
70005124:	d106      	bne.n	70005134 <ethernetif_init+0x1c>
70005126:	4b0e      	ldr	r3, [pc, #56]	@ (70005160 <ethernetif_init+0x48>)
70005128:	f240 221a 	movw	r2, #538	@ 0x21a
7000512c:	490d      	ldr	r1, [pc, #52]	@ (70005164 <ethernetif_init+0x4c>)
7000512e:	480e      	ldr	r0, [pc, #56]	@ (70005168 <ethernetif_init+0x50>)
70005130:	f00e fdee 	bl	70013d10 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
70005134:	687b      	ldr	r3, [r7, #4]
70005136:	2273      	movs	r2, #115	@ 0x73
70005138:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
7000513c:	687b      	ldr	r3, [r7, #4]
7000513e:	2274      	movs	r2, #116	@ 0x74
70005140:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
70005144:	687b      	ldr	r3, [r7, #4]
70005146:	4a09      	ldr	r2, [pc, #36]	@ (7000516c <ethernetif_init+0x54>)
70005148:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
7000514a:	687b      	ldr	r3, [r7, #4]
7000514c:	4a08      	ldr	r2, [pc, #32]	@ (70005170 <ethernetif_init+0x58>)
7000514e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
70005150:	6878      	ldr	r0, [r7, #4]
70005152:	f7ff fdaf 	bl	70004cb4 <low_level_init>

  return ERR_OK;
70005156:	2300      	movs	r3, #0
}
70005158:	4618      	mov	r0, r3
7000515a:	3708      	adds	r7, #8
7000515c:	46bd      	mov	sp, r7
7000515e:	bd80      	pop	{r7, pc}
70005160:	70014c18 	.word	0x70014c18
70005164:	70014c34 	.word	0x70014c34
70005168:	70014c44 	.word	0x70014c44
7000516c:	7000a299 	.word	0x7000a299
70005170:	70004f35 	.word	0x70004f35

70005174 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
70005174:	b580      	push	{r7, lr}
70005176:	b084      	sub	sp, #16
70005178:	af00      	add	r7, sp, #0
7000517a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
7000517c:	687b      	ldr	r3, [r7, #4]
7000517e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
70005180:	68f9      	ldr	r1, [r7, #12]
70005182:	4809      	ldr	r0, [pc, #36]	@ (700051a8 <pbuf_free_custom+0x34>)
70005184:	f007 fcf2 	bl	7000cb6c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
70005188:	4b08      	ldr	r3, [pc, #32]	@ (700051ac <pbuf_free_custom+0x38>)
7000518a:	781b      	ldrb	r3, [r3, #0]
7000518c:	2b01      	cmp	r3, #1
7000518e:	d107      	bne.n	700051a0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
70005190:	4b06      	ldr	r3, [pc, #24]	@ (700051ac <pbuf_free_custom+0x38>)
70005192:	2200      	movs	r2, #0
70005194:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
70005196:	4b06      	ldr	r3, [pc, #24]	@ (700051b0 <pbuf_free_custom+0x3c>)
70005198:	681b      	ldr	r3, [r3, #0]
7000519a:	4618      	mov	r0, r3
7000519c:	f000 fdec 	bl	70005d78 <osSemaphoreRelease>
  }
}
700051a0:	bf00      	nop
700051a2:	3710      	adds	r7, #16
700051a4:	46bd      	mov	sp, r7
700051a6:	bd80      	pop	{r7, pc}
700051a8:	70017240 	.word	0x70017240
700051ac:	2400017c 	.word	0x2400017c
700051b0:	24000180 	.word	0x24000180

700051b4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
700051b4:	b580      	push	{r7, lr}
700051b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
700051b8:	f7fb ff4c 	bl	70001054 <HAL_GetTick>
700051bc:	4603      	mov	r3, r0
}
700051be:	4618      	mov	r0, r3
700051c0:	bd80      	pop	{r7, pc}
	...

700051c4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
700051c4:	b580      	push	{r7, lr}
700051c6:	b0ae      	sub	sp, #184	@ 0xb8
700051c8:	af00      	add	r7, sp, #0
700051ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
700051cc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
700051d0:	2200      	movs	r2, #0
700051d2:	601a      	str	r2, [r3, #0]
700051d4:	605a      	str	r2, [r3, #4]
700051d6:	609a      	str	r2, [r3, #8]
700051d8:	60da      	str	r2, [r3, #12]
700051da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
700051dc:	f107 0320 	add.w	r3, r7, #32
700051e0:	2284      	movs	r2, #132	@ 0x84
700051e2:	2100      	movs	r1, #0
700051e4:	4618      	mov	r0, r3
700051e6:	f00e fdf8 	bl	70013dda <memset>
  if(ethHandle->Instance==ETH)
700051ea:	687b      	ldr	r3, [r7, #4]
700051ec:	681b      	ldr	r3, [r3, #0]
700051ee:	4a58      	ldr	r2, [pc, #352]	@ (70005350 <HAL_ETH_MspInit+0x18c>)
700051f0:	4293      	cmp	r3, r2
700051f2:	f040 80a8 	bne.w	70005346 <HAL_ETH_MspInit+0x182>

  /* USER CODE END ETH_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ETH1REF|RCC_PERIPHCLK_ETH1PHY;
700051f6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
700051fa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Eth1RefClockSelection = RCC_ETH1REFCLKSOURCE_PHY;
700051fc:	2300      	movs	r3, #0
700051fe:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.Eth1PhyClockSelection = RCC_ETH1PHYCLKSOURCE_PLL3S;
70005200:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
70005204:	647b      	str	r3, [r7, #68]	@ 0x44

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
70005206:	f107 0320 	add.w	r3, r7, #32
7000520a:	4618      	mov	r0, r3
7000520c:	f7fe f986 	bl	7000351c <HAL_RCCEx_PeriphCLKConfig>
70005210:	4603      	mov	r3, r0
70005212:	2b00      	cmp	r3, #0
70005214:	d001      	beq.n	7000521a <HAL_ETH_MspInit+0x56>
    {
      Error_Handler();
70005216:	f7fb fa7b 	bl	70000710 <Error_Handler>
    }

    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
7000521a:	4b4e      	ldr	r3, [pc, #312]	@ (70005354 <HAL_ETH_MspInit+0x190>)
7000521c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
70005220:	4a4c      	ldr	r2, [pc, #304]	@ (70005354 <HAL_ETH_MspInit+0x190>)
70005222:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
70005226:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
7000522a:	4b4a      	ldr	r3, [pc, #296]	@ (70005354 <HAL_ETH_MspInit+0x190>)
7000522c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
70005230:	61fb      	str	r3, [r7, #28]
70005232:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
70005234:	4b47      	ldr	r3, [pc, #284]	@ (70005354 <HAL_ETH_MspInit+0x190>)
70005236:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
7000523a:	4a46      	ldr	r2, [pc, #280]	@ (70005354 <HAL_ETH_MspInit+0x190>)
7000523c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70005240:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
70005244:	4b43      	ldr	r3, [pc, #268]	@ (70005354 <HAL_ETH_MspInit+0x190>)
70005246:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
7000524a:	61bb      	str	r3, [r7, #24]
7000524c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
7000524e:	4b41      	ldr	r3, [pc, #260]	@ (70005354 <HAL_ETH_MspInit+0x190>)
70005250:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
70005254:	4a3f      	ldr	r2, [pc, #252]	@ (70005354 <HAL_ETH_MspInit+0x190>)
70005256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
7000525a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
7000525e:	4b3d      	ldr	r3, [pc, #244]	@ (70005354 <HAL_ETH_MspInit+0x190>)
70005260:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
70005264:	617b      	str	r3, [r7, #20]
70005266:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
70005268:	4b3a      	ldr	r3, [pc, #232]	@ (70005354 <HAL_ETH_MspInit+0x190>)
7000526a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
7000526e:	4a39      	ldr	r2, [pc, #228]	@ (70005354 <HAL_ETH_MspInit+0x190>)
70005270:	f043 0302 	orr.w	r3, r3, #2
70005274:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
70005278:	4b36      	ldr	r3, [pc, #216]	@ (70005354 <HAL_ETH_MspInit+0x190>)
7000527a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
7000527e:	613b      	str	r3, [r7, #16]
70005280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
70005282:	4b34      	ldr	r3, [pc, #208]	@ (70005354 <HAL_ETH_MspInit+0x190>)
70005284:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
70005288:	4a32      	ldr	r2, [pc, #200]	@ (70005354 <HAL_ETH_MspInit+0x190>)
7000528a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
7000528e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
70005292:	4b30      	ldr	r3, [pc, #192]	@ (70005354 <HAL_ETH_MspInit+0x190>)
70005294:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
70005298:	60fb      	str	r3, [r7, #12]
7000529a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
7000529c:	4b2d      	ldr	r3, [pc, #180]	@ (70005354 <HAL_ETH_MspInit+0x190>)
7000529e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
700052a2:	4a2c      	ldr	r2, [pc, #176]	@ (70005354 <HAL_ETH_MspInit+0x190>)
700052a4:	f043 0301 	orr.w	r3, r3, #1
700052a8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
700052ac:	4b29      	ldr	r3, [pc, #164]	@ (70005354 <HAL_ETH_MspInit+0x190>)
700052ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
700052b2:	60bb      	str	r3, [r7, #8]
700052b4:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> ETH_RMII_CRS_DV
    PG6     ------> ETH_MDC
    PG4     ------> ETH_RMII_RXD0
    PG5     ------> ETH_RMII_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
700052b6:	2340      	movs	r3, #64	@ 0x40
700052b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
700052bc:	2302      	movs	r3, #2
700052be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
700052c2:	2300      	movs	r3, #0
700052c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
700052c8:	2303      	movs	r3, #3
700052ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
700052ce:	230b      	movs	r3, #11
700052d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
700052d4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
700052d8:	4619      	mov	r1, r3
700052da:	481f      	ldr	r0, [pc, #124]	@ (70005358 <HAL_ETH_MspInit+0x194>)
700052dc:	f7fd fdaa 	bl	70002e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_6
700052e0:	f643 0370 	movw	r3, #14448	@ 0x3870
700052e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
700052e8:	2302      	movs	r3, #2
700052ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
700052ee:	2300      	movs	r3, #0
700052f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
700052f4:	2303      	movs	r3, #3
700052f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
700052fa:	230b      	movs	r3, #11
700052fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
70005300:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
70005304:	4619      	mov	r1, r3
70005306:	4815      	ldr	r0, [pc, #84]	@ (7000535c <HAL_ETH_MspInit+0x198>)
70005308:	f7fd fd94 	bl	70002e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
7000530c:	2384      	movs	r3, #132	@ 0x84
7000530e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
70005312:	2302      	movs	r3, #2
70005314:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
70005318:	2300      	movs	r3, #0
7000531a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
7000531e:	2303      	movs	r3, #3
70005320:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
70005324:	230b      	movs	r3, #11
70005326:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
7000532a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
7000532e:	4619      	mov	r1, r3
70005330:	480b      	ldr	r0, [pc, #44]	@ (70005360 <HAL_ETH_MspInit+0x19c>)
70005332:	f7fd fd7f 	bl	70002e34 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
70005336:	2200      	movs	r2, #0
70005338:	2105      	movs	r1, #5
7000533a:	205c      	movs	r0, #92	@ 0x5c
7000533c:	f7fb ff64 	bl	70001208 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
70005340:	205c      	movs	r0, #92	@ 0x5c
70005342:	f7fb ff7b 	bl	7000123c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
70005346:	bf00      	nop
70005348:	37b8      	adds	r7, #184	@ 0xb8
7000534a:	46bd      	mov	sp, r7
7000534c:	bd80      	pop	{r7, pc}
7000534e:	bf00      	nop
70005350:	40028000 	.word	0x40028000
70005354:	58024400 	.word	0x58024400
70005358:	58020400 	.word	0x58020400
7000535c:	58021800 	.word	0x58021800
70005360:	58020000 	.word	0x58020000

70005364 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
70005364:	b580      	push	{r7, lr}
70005366:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
70005368:	4802      	ldr	r0, [pc, #8]	@ (70005374 <ETH_PHY_IO_Init+0x10>)
7000536a:	f7fc ff77 	bl	7000225c <HAL_ETH_SetMDIOClockRange>

  return 0;
7000536e:	2300      	movs	r3, #0
}
70005370:	4618      	mov	r0, r3
70005372:	bd80      	pop	{r7, pc}
70005374:	24000188 	.word	0x24000188

70005378 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
70005378:	b480      	push	{r7}
7000537a:	af00      	add	r7, sp, #0
  return 0;
7000537c:	2300      	movs	r3, #0
}
7000537e:	4618      	mov	r0, r3
70005380:	46bd      	mov	sp, r7
70005382:	f85d 7b04 	ldr.w	r7, [sp], #4
70005386:	4770      	bx	lr

70005388 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
70005388:	b580      	push	{r7, lr}
7000538a:	b084      	sub	sp, #16
7000538c:	af00      	add	r7, sp, #0
7000538e:	60f8      	str	r0, [r7, #12]
70005390:	60b9      	str	r1, [r7, #8]
70005392:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
70005394:	687b      	ldr	r3, [r7, #4]
70005396:	68ba      	ldr	r2, [r7, #8]
70005398:	68f9      	ldr	r1, [r7, #12]
7000539a:	4807      	ldr	r0, [pc, #28]	@ (700053b8 <ETH_PHY_IO_ReadReg+0x30>)
7000539c:	f7fc fcc7 	bl	70001d2e <HAL_ETH_ReadPHYRegister>
700053a0:	4603      	mov	r3, r0
700053a2:	2b00      	cmp	r3, #0
700053a4:	d002      	beq.n	700053ac <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
700053a6:	f04f 33ff 	mov.w	r3, #4294967295
700053aa:	e000      	b.n	700053ae <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
700053ac:	2300      	movs	r3, #0
}
700053ae:	4618      	mov	r0, r3
700053b0:	3710      	adds	r7, #16
700053b2:	46bd      	mov	sp, r7
700053b4:	bd80      	pop	{r7, pc}
700053b6:	bf00      	nop
700053b8:	24000188 	.word	0x24000188

700053bc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
700053bc:	b580      	push	{r7, lr}
700053be:	b084      	sub	sp, #16
700053c0:	af00      	add	r7, sp, #0
700053c2:	60f8      	str	r0, [r7, #12]
700053c4:	60b9      	str	r1, [r7, #8]
700053c6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
700053c8:	687b      	ldr	r3, [r7, #4]
700053ca:	68ba      	ldr	r2, [r7, #8]
700053cc:	68f9      	ldr	r1, [r7, #12]
700053ce:	4807      	ldr	r0, [pc, #28]	@ (700053ec <ETH_PHY_IO_WriteReg+0x30>)
700053d0:	f7fc fd02 	bl	70001dd8 <HAL_ETH_WritePHYRegister>
700053d4:	4603      	mov	r3, r0
700053d6:	2b00      	cmp	r3, #0
700053d8:	d002      	beq.n	700053e0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
700053da:	f04f 33ff 	mov.w	r3, #4294967295
700053de:	e000      	b.n	700053e2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
700053e0:	2300      	movs	r3, #0
}
700053e2:	4618      	mov	r0, r3
700053e4:	3710      	adds	r7, #16
700053e6:	46bd      	mov	sp, r7
700053e8:	bd80      	pop	{r7, pc}
700053ea:	bf00      	nop
700053ec:	24000188 	.word	0x24000188

700053f0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
700053f0:	b580      	push	{r7, lr}
700053f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
700053f4:	f7fb fe2e 	bl	70001054 <HAL_GetTick>
700053f8:	4603      	mov	r3, r0
}
700053fa:	4618      	mov	r0, r3
700053fc:	bd80      	pop	{r7, pc}
	...

70005400 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
70005400:	b580      	push	{r7, lr}
70005402:	b0a0      	sub	sp, #128	@ 0x80
70005404:	af00      	add	r7, sp, #0
70005406:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
70005408:	f107 0308 	add.w	r3, r7, #8
7000540c:	2264      	movs	r2, #100	@ 0x64
7000540e:	2100      	movs	r1, #0
70005410:	4618      	mov	r0, r3
70005412:	f00e fce2 	bl	70013dda <memset>
  int32_t PHYLinkState = 0;
70005416:	2300      	movs	r3, #0
70005418:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
7000541a:	2300      	movs	r3, #0
7000541c:	67fb      	str	r3, [r7, #124]	@ 0x7c
7000541e:	2300      	movs	r3, #0
70005420:	67bb      	str	r3, [r7, #120]	@ 0x78
70005422:	2300      	movs	r3, #0
70005424:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
70005426:	687b      	ldr	r3, [r7, #4]
70005428:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
7000542a:	483a      	ldr	r0, [pc, #232]	@ (70005514 <ethernet_link_thread+0x114>)
7000542c:	f7fb fd5f 	bl	70000eee <LAN8742_GetLinkState>
70005430:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
70005432:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
70005434:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
70005438:	089b      	lsrs	r3, r3, #2
7000543a:	f003 0301 	and.w	r3, r3, #1
7000543e:	b2db      	uxtb	r3, r3
70005440:	2b00      	cmp	r3, #0
70005442:	d00c      	beq.n	7000545e <ethernet_link_thread+0x5e>
70005444:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
70005446:	2b01      	cmp	r3, #1
70005448:	dc09      	bgt.n	7000545e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
7000544a:	4833      	ldr	r0, [pc, #204]	@ (70005518 <ethernet_link_thread+0x118>)
7000544c:	f7fc f8fa 	bl	70001644 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
70005450:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
70005452:	f007 fde1 	bl	7000d018 <netif_set_down>
    netif_set_link_down(netif);
70005456:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
70005458:	f007 fe28 	bl	7000d0ac <netif_set_link_down>
7000545c:	e055      	b.n	7000550a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
7000545e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
70005460:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
70005464:	f003 0304 	and.w	r3, r3, #4
70005468:	2b00      	cmp	r3, #0
7000546a:	d14e      	bne.n	7000550a <ethernet_link_thread+0x10a>
7000546c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
7000546e:	2b01      	cmp	r3, #1
70005470:	dd4b      	ble.n	7000550a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
70005472:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
70005474:	3b02      	subs	r3, #2
70005476:	2b03      	cmp	r3, #3
70005478:	d82a      	bhi.n	700054d0 <ethernet_link_thread+0xd0>
7000547a:	a201      	add	r2, pc, #4	@ (adr r2, 70005480 <ethernet_link_thread+0x80>)
7000547c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70005480:	70005491 	.word	0x70005491
70005484:	700054a3 	.word	0x700054a3
70005488:	700054b3 	.word	0x700054b3
7000548c:	700054c3 	.word	0x700054c3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
70005490:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
70005494:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
70005496:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
7000549a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
7000549c:	2301      	movs	r3, #1
7000549e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
700054a0:	e017      	b.n	700054d2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
700054a2:	2300      	movs	r3, #0
700054a4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
700054a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
700054aa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
700054ac:	2301      	movs	r3, #1
700054ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
700054b0:	e00f      	b.n	700054d2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
700054b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
700054b6:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
700054b8:	2300      	movs	r3, #0
700054ba:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
700054bc:	2301      	movs	r3, #1
700054be:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
700054c0:	e007      	b.n	700054d2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
700054c2:	2300      	movs	r3, #0
700054c4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
700054c6:	2300      	movs	r3, #0
700054c8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
700054ca:	2301      	movs	r3, #1
700054cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
700054ce:	e000      	b.n	700054d2 <ethernet_link_thread+0xd2>
    default:
      break;
700054d0:	bf00      	nop
    }

    if(linkchanged)
700054d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
700054d4:	2b00      	cmp	r3, #0
700054d6:	d018      	beq.n	7000550a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
700054d8:	f107 0308 	add.w	r3, r7, #8
700054dc:	4619      	mov	r1, r3
700054de:	480e      	ldr	r0, [pc, #56]	@ (70005518 <ethernet_link_thread+0x118>)
700054e0:	f7fc fcce 	bl	70001e80 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
700054e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
700054e6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
700054e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
700054ea:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
700054ec:	f107 0308 	add.w	r3, r7, #8
700054f0:	4619      	mov	r1, r3
700054f2:	4809      	ldr	r0, [pc, #36]	@ (70005518 <ethernet_link_thread+0x118>)
700054f4:	f7fc fe98 	bl	70002228 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
700054f8:	4807      	ldr	r0, [pc, #28]	@ (70005518 <ethernet_link_thread+0x118>)
700054fa:	f7fc f82f 	bl	7000155c <HAL_ETH_Start_IT>
      netif_set_up(netif);
700054fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
70005500:	f007 fd2c 	bl	7000cf5c <netif_set_up>
      netif_set_link_up(netif);
70005504:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
70005506:	f007 fdab 	bl	7000d060 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
7000550a:	2064      	movs	r0, #100	@ 0x64
7000550c:	f000 fa36 	bl	7000597c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
70005510:	e78b      	b.n	7000542a <ethernet_link_thread+0x2a>
70005512:	bf00      	nop
70005514:	24000270 	.word	0x24000270
70005518:	24000188 	.word	0x24000188

7000551c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
7000551c:	b580      	push	{r7, lr}
7000551e:	b086      	sub	sp, #24
70005520:	af02      	add	r7, sp, #8
70005522:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
70005524:	4812      	ldr	r0, [pc, #72]	@ (70005570 <HAL_ETH_RxAllocateCallback+0x54>)
70005526:	f007 fab9 	bl	7000ca9c <memp_malloc_pool>
7000552a:	60f8      	str	r0, [r7, #12]
  if (p)
7000552c:	68fb      	ldr	r3, [r7, #12]
7000552e:	2b00      	cmp	r3, #0
70005530:	d014      	beq.n	7000555c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
70005532:	68fb      	ldr	r3, [r7, #12]
70005534:	f103 0220 	add.w	r2, r3, #32
70005538:	687b      	ldr	r3, [r7, #4]
7000553a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
7000553c:	68fb      	ldr	r3, [r7, #12]
7000553e:	4a0d      	ldr	r2, [pc, #52]	@ (70005574 <HAL_ETH_RxAllocateCallback+0x58>)
70005540:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
70005542:	687b      	ldr	r3, [r7, #4]
70005544:	681b      	ldr	r3, [r3, #0]
70005546:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
7000554a:	9201      	str	r2, [sp, #4]
7000554c:	9300      	str	r3, [sp, #0]
7000554e:	68fb      	ldr	r3, [r7, #12]
70005550:	2241      	movs	r2, #65	@ 0x41
70005552:	2100      	movs	r1, #0
70005554:	2000      	movs	r0, #0
70005556:	f007 ffbf 	bl	7000d4d8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
7000555a:	e005      	b.n	70005568 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
7000555c:	4b06      	ldr	r3, [pc, #24]	@ (70005578 <HAL_ETH_RxAllocateCallback+0x5c>)
7000555e:	2201      	movs	r2, #1
70005560:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
70005562:	687b      	ldr	r3, [r7, #4]
70005564:	2200      	movs	r2, #0
70005566:	601a      	str	r2, [r3, #0]
}
70005568:	bf00      	nop
7000556a:	3710      	adds	r7, #16
7000556c:	46bd      	mov	sp, r7
7000556e:	bd80      	pop	{r7, pc}
70005570:	70017240 	.word	0x70017240
70005574:	70005175 	.word	0x70005175
70005578:	2400017c 	.word	0x2400017c

7000557c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
7000557c:	b480      	push	{r7}
7000557e:	b08d      	sub	sp, #52	@ 0x34
70005580:	af00      	add	r7, sp, #0
70005582:	60f8      	str	r0, [r7, #12]
70005584:	60b9      	str	r1, [r7, #8]
70005586:	607a      	str	r2, [r7, #4]
70005588:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
7000558a:	68fb      	ldr	r3, [r7, #12]
7000558c:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
7000558e:	68bb      	ldr	r3, [r7, #8]
70005590:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
70005592:	2300      	movs	r3, #0
70005594:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
70005596:	687b      	ldr	r3, [r7, #4]
70005598:	3b20      	subs	r3, #32
7000559a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
7000559c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000559e:	2200      	movs	r2, #0
700055a0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
700055a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
700055a4:	2200      	movs	r2, #0
700055a6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
700055a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
700055aa:	887a      	ldrh	r2, [r7, #2]
700055ac:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
700055ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700055b0:	681b      	ldr	r3, [r3, #0]
700055b2:	2b00      	cmp	r3, #0
700055b4:	d103      	bne.n	700055be <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
700055b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700055b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
700055ba:	601a      	str	r2, [r3, #0]
700055bc:	e003      	b.n	700055c6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
700055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700055c0:	681b      	ldr	r3, [r3, #0]
700055c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
700055c4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
700055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700055c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
700055ca:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
700055cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700055ce:	681b      	ldr	r3, [r3, #0]
700055d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
700055d2:	e009      	b.n	700055e8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
700055d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
700055d6:	891a      	ldrh	r2, [r3, #8]
700055d8:	887b      	ldrh	r3, [r7, #2]
700055da:	4413      	add	r3, r2
700055dc:	b29a      	uxth	r2, r3
700055de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
700055e0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
700055e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
700055e4:	681b      	ldr	r3, [r3, #0]
700055e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
700055e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
700055ea:	2b00      	cmp	r3, #0
700055ec:	d1f2      	bne.n	700055d4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
700055ee:	887b      	ldrh	r3, [r7, #2]
700055f0:	687a      	ldr	r2, [r7, #4]
700055f2:	623a      	str	r2, [r7, #32]
700055f4:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
700055f6:	69fb      	ldr	r3, [r7, #28]
700055f8:	2b00      	cmp	r3, #0
700055fa:	dd1d      	ble.n	70005638 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
700055fc:	6a3b      	ldr	r3, [r7, #32]
700055fe:	f003 021f 	and.w	r2, r3, #31
70005602:	69fb      	ldr	r3, [r7, #28]
70005604:	4413      	add	r3, r2
70005606:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
70005608:	6a3b      	ldr	r3, [r7, #32]
7000560a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
7000560c:	f3bf 8f4f 	dsb	sy
}
70005610:	bf00      	nop

      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
70005612:	4a0d      	ldr	r2, [pc, #52]	@ (70005648 <HAL_ETH_RxLinkCallback+0xcc>)
70005614:	697b      	ldr	r3, [r7, #20]
70005616:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
7000561a:	697b      	ldr	r3, [r7, #20]
7000561c:	3320      	adds	r3, #32
7000561e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
70005620:	69bb      	ldr	r3, [r7, #24]
70005622:	3b20      	subs	r3, #32
70005624:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
70005626:	69bb      	ldr	r3, [r7, #24]
70005628:	2b00      	cmp	r3, #0
7000562a:	dcf2      	bgt.n	70005612 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
7000562c:	f3bf 8f4f 	dsb	sy
}
70005630:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
70005632:	f3bf 8f6f 	isb	sy
}
70005636:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
70005638:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
7000563a:	bf00      	nop
7000563c:	3734      	adds	r7, #52	@ 0x34
7000563e:	46bd      	mov	sp, r7
70005640:	f85d 7b04 	ldr.w	r7, [sp], #4
70005644:	4770      	bx	lr
70005646:	bf00      	nop
70005648:	e000ed00 	.word	0xe000ed00

7000564c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
7000564c:	b580      	push	{r7, lr}
7000564e:	b082      	sub	sp, #8
70005650:	af00      	add	r7, sp, #0
70005652:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
70005654:	6878      	ldr	r0, [r7, #4]
70005656:	f008 f8ef 	bl	7000d838 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
7000565a:	bf00      	nop
7000565c:	3708      	adds	r7, #8
7000565e:	46bd      	mov	sp, r7
70005660:	bd80      	pop	{r7, pc}
	...

70005664 <__NVIC_SetPriority>:
{
70005664:	b480      	push	{r7}
70005666:	b083      	sub	sp, #12
70005668:	af00      	add	r7, sp, #0
7000566a:	4603      	mov	r3, r0
7000566c:	6039      	str	r1, [r7, #0]
7000566e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
70005670:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70005674:	2b00      	cmp	r3, #0
70005676:	db0a      	blt.n	7000568e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
70005678:	683b      	ldr	r3, [r7, #0]
7000567a:	b2da      	uxtb	r2, r3
7000567c:	490c      	ldr	r1, [pc, #48]	@ (700056b0 <__NVIC_SetPriority+0x4c>)
7000567e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70005682:	0112      	lsls	r2, r2, #4
70005684:	b2d2      	uxtb	r2, r2
70005686:	440b      	add	r3, r1
70005688:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
7000568c:	e00a      	b.n	700056a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
7000568e:	683b      	ldr	r3, [r7, #0]
70005690:	b2da      	uxtb	r2, r3
70005692:	4908      	ldr	r1, [pc, #32]	@ (700056b4 <__NVIC_SetPriority+0x50>)
70005694:	88fb      	ldrh	r3, [r7, #6]
70005696:	f003 030f 	and.w	r3, r3, #15
7000569a:	3b04      	subs	r3, #4
7000569c:	0112      	lsls	r2, r2, #4
7000569e:	b2d2      	uxtb	r2, r2
700056a0:	440b      	add	r3, r1
700056a2:	761a      	strb	r2, [r3, #24]
}
700056a4:	bf00      	nop
700056a6:	370c      	adds	r7, #12
700056a8:	46bd      	mov	sp, r7
700056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
700056ae:	4770      	bx	lr
700056b0:	e000e100 	.word	0xe000e100
700056b4:	e000ed00 	.word	0xe000ed00

700056b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
700056b8:	b580      	push	{r7, lr}
700056ba:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
700056bc:	4b05      	ldr	r3, [pc, #20]	@ (700056d4 <SysTick_Handler+0x1c>)
700056be:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
700056c0:	f003 fc42 	bl	70008f48 <xTaskGetSchedulerState>
700056c4:	4603      	mov	r3, r0
700056c6:	2b01      	cmp	r3, #1
700056c8:	d001      	beq.n	700056ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
700056ca:	f001 f945 	bl	70006958 <xPortSysTickHandler>
  }
}
700056ce:	bf00      	nop
700056d0:	bd80      	pop	{r7, pc}
700056d2:	bf00      	nop
700056d4:	e000e010 	.word	0xe000e010

700056d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
700056d8:	b580      	push	{r7, lr}
700056da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
700056dc:	2100      	movs	r1, #0
700056de:	f06f 0004 	mvn.w	r0, #4
700056e2:	f7ff ffbf 	bl	70005664 <__NVIC_SetPriority>
#endif
}
700056e6:	bf00      	nop
700056e8:	bd80      	pop	{r7, pc}

700056ea <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
700056ea:	b580      	push	{r7, lr}
700056ec:	b086      	sub	sp, #24
700056ee:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
700056f0:	2300      	movs	r3, #0
700056f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
700056f4:	f3ef 8305 	mrs	r3, IPSR
700056f8:	60fb      	str	r3, [r7, #12]
  return(result);
700056fa:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
700056fc:	2b00      	cmp	r3, #0
700056fe:	d002      	beq.n	70005706 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
70005700:	2301      	movs	r3, #1
70005702:	617b      	str	r3, [r7, #20]
70005704:	e013      	b.n	7000572e <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
70005706:	f003 fc1f 	bl	70008f48 <xTaskGetSchedulerState>
7000570a:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
7000570c:	693b      	ldr	r3, [r7, #16]
7000570e:	2b01      	cmp	r3, #1
70005710:	d00d      	beq.n	7000572e <IRQ_Context+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
70005712:	f3ef 8310 	mrs	r3, PRIMASK
70005716:	60bb      	str	r3, [r7, #8]
  return(result);
70005718:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
7000571a:	2b00      	cmp	r3, #0
7000571c:	d105      	bne.n	7000572a <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
7000571e:	f3ef 8311 	mrs	r3, BASEPRI
70005722:	607b      	str	r3, [r7, #4]
  return(result);
70005724:	687b      	ldr	r3, [r7, #4]
70005726:	2b00      	cmp	r3, #0
70005728:	d001      	beq.n	7000572e <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
7000572a:	2301      	movs	r3, #1
7000572c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
7000572e:	697b      	ldr	r3, [r7, #20]
}
70005730:	4618      	mov	r0, r3
70005732:	3718      	adds	r7, #24
70005734:	46bd      	mov	sp, r7
70005736:	bd80      	pop	{r7, pc}

70005738 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
70005738:	b580      	push	{r7, lr}
7000573a:	b082      	sub	sp, #8
7000573c:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
7000573e:	f7ff ffd4 	bl	700056ea <IRQ_Context>
70005742:	4603      	mov	r3, r0
70005744:	2b00      	cmp	r3, #0
70005746:	d003      	beq.n	70005750 <osKernelInitialize+0x18>
    stat = osErrorISR;
70005748:	f06f 0305 	mvn.w	r3, #5
7000574c:	607b      	str	r3, [r7, #4]
7000574e:	e012      	b.n	70005776 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
70005750:	f003 fbfa 	bl	70008f48 <xTaskGetSchedulerState>
70005754:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
70005756:	683b      	ldr	r3, [r7, #0]
70005758:	2b01      	cmp	r3, #1
7000575a:	d109      	bne.n	70005770 <osKernelInitialize+0x38>
7000575c:	4b08      	ldr	r3, [pc, #32]	@ (70005780 <osKernelInitialize+0x48>)
7000575e:	681b      	ldr	r3, [r3, #0]
70005760:	2b00      	cmp	r3, #0
70005762:	d105      	bne.n	70005770 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
70005764:	4b06      	ldr	r3, [pc, #24]	@ (70005780 <osKernelInitialize+0x48>)
70005766:	2201      	movs	r2, #1
70005768:	601a      	str	r2, [r3, #0]
      stat = osOK;
7000576a:	2300      	movs	r3, #0
7000576c:	607b      	str	r3, [r7, #4]
7000576e:	e002      	b.n	70005776 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
70005770:	f04f 33ff 	mov.w	r3, #4294967295
70005774:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
70005776:	687b      	ldr	r3, [r7, #4]
}
70005778:	4618      	mov	r0, r3
7000577a:	3708      	adds	r7, #8
7000577c:	46bd      	mov	sp, r7
7000577e:	bd80      	pop	{r7, pc}
70005780:	24000290 	.word	0x24000290

70005784 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
70005784:	b580      	push	{r7, lr}
70005786:	b082      	sub	sp, #8
70005788:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
7000578a:	f7ff ffae 	bl	700056ea <IRQ_Context>
7000578e:	4603      	mov	r3, r0
70005790:	2b00      	cmp	r3, #0
70005792:	d003      	beq.n	7000579c <osKernelStart+0x18>
    stat = osErrorISR;
70005794:	f06f 0305 	mvn.w	r3, #5
70005798:	607b      	str	r3, [r7, #4]
7000579a:	e016      	b.n	700057ca <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
7000579c:	f003 fbd4 	bl	70008f48 <xTaskGetSchedulerState>
700057a0:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
700057a2:	683b      	ldr	r3, [r7, #0]
700057a4:	2b01      	cmp	r3, #1
700057a6:	d10d      	bne.n	700057c4 <osKernelStart+0x40>
700057a8:	4b0a      	ldr	r3, [pc, #40]	@ (700057d4 <osKernelStart+0x50>)
700057aa:	681b      	ldr	r3, [r3, #0]
700057ac:	2b01      	cmp	r3, #1
700057ae:	d109      	bne.n	700057c4 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
700057b0:	f7ff ff92 	bl	700056d8 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
700057b4:	4b07      	ldr	r3, [pc, #28]	@ (700057d4 <osKernelStart+0x50>)
700057b6:	2202      	movs	r2, #2
700057b8:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
700057ba:	f002 fde1 	bl	70008380 <vTaskStartScheduler>
      stat = osOK;
700057be:	2300      	movs	r3, #0
700057c0:	607b      	str	r3, [r7, #4]
700057c2:	e002      	b.n	700057ca <osKernelStart+0x46>
    } else {
      stat = osError;
700057c4:	f04f 33ff 	mov.w	r3, #4294967295
700057c8:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
700057ca:	687b      	ldr	r3, [r7, #4]
}
700057cc:	4618      	mov	r0, r3
700057ce:	3708      	adds	r7, #8
700057d0:	46bd      	mov	sp, r7
700057d2:	bd80      	pop	{r7, pc}
700057d4:	24000290 	.word	0x24000290

700057d8 <osKernelGetTickCount>:
}

/*
  Get the RTOS kernel tick count.
*/
uint32_t osKernelGetTickCount (void) {
700057d8:	b580      	push	{r7, lr}
700057da:	b082      	sub	sp, #8
700057dc:	af00      	add	r7, sp, #0
  TickType_t ticks;

  if (IRQ_Context() != 0U) {
700057de:	f7ff ff84 	bl	700056ea <IRQ_Context>
700057e2:	4603      	mov	r3, r0
700057e4:	2b00      	cmp	r3, #0
700057e6:	d003      	beq.n	700057f0 <osKernelGetTickCount+0x18>
    ticks = xTaskGetTickCountFromISR();
700057e8:	f002 ff5a 	bl	700086a0 <xTaskGetTickCountFromISR>
700057ec:	6078      	str	r0, [r7, #4]
700057ee:	e002      	b.n	700057f6 <osKernelGetTickCount+0x1e>
  } else {
    ticks = xTaskGetTickCount();
700057f0:	f002 ff46 	bl	70008680 <xTaskGetTickCount>
700057f4:	6078      	str	r0, [r7, #4]
  }

  /* Return kernel tick count */
  return (ticks);
700057f6:	687b      	ldr	r3, [r7, #4]
}
700057f8:	4618      	mov	r0, r3
700057fa:	3708      	adds	r7, #8
700057fc:	46bd      	mov	sp, r7
700057fe:	bd80      	pop	{r7, pc}

70005800 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
70005800:	b580      	push	{r7, lr}
70005802:	b08e      	sub	sp, #56	@ 0x38
70005804:	af04      	add	r7, sp, #16
70005806:	60f8      	str	r0, [r7, #12]
70005808:	60b9      	str	r1, [r7, #8]
7000580a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
7000580c:	2300      	movs	r3, #0
7000580e:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
70005810:	f7ff ff6b 	bl	700056ea <IRQ_Context>
70005814:	4603      	mov	r3, r0
70005816:	2b00      	cmp	r3, #0
70005818:	d17f      	bne.n	7000591a <osThreadNew+0x11a>
7000581a:	68fb      	ldr	r3, [r7, #12]
7000581c:	2b00      	cmp	r3, #0
7000581e:	d07c      	beq.n	7000591a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
70005820:	f44f 7380 	mov.w	r3, #256	@ 0x100
70005824:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
70005826:	2318      	movs	r3, #24
70005828:	61fb      	str	r3, [r7, #28]

    name = NULL;
7000582a:	2300      	movs	r3, #0
7000582c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
7000582e:	f04f 33ff 	mov.w	r3, #4294967295
70005832:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
70005834:	687b      	ldr	r3, [r7, #4]
70005836:	2b00      	cmp	r3, #0
70005838:	d045      	beq.n	700058c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
7000583a:	687b      	ldr	r3, [r7, #4]
7000583c:	681b      	ldr	r3, [r3, #0]
7000583e:	2b00      	cmp	r3, #0
70005840:	d002      	beq.n	70005848 <osThreadNew+0x48>
        name = attr->name;
70005842:	687b      	ldr	r3, [r7, #4]
70005844:	681b      	ldr	r3, [r3, #0]
70005846:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
70005848:	687b      	ldr	r3, [r7, #4]
7000584a:	699b      	ldr	r3, [r3, #24]
7000584c:	2b00      	cmp	r3, #0
7000584e:	d002      	beq.n	70005856 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
70005850:	687b      	ldr	r3, [r7, #4]
70005852:	699b      	ldr	r3, [r3, #24]
70005854:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
70005856:	69fb      	ldr	r3, [r7, #28]
70005858:	2b00      	cmp	r3, #0
7000585a:	d008      	beq.n	7000586e <osThreadNew+0x6e>
7000585c:	69fb      	ldr	r3, [r7, #28]
7000585e:	2b38      	cmp	r3, #56	@ 0x38
70005860:	d805      	bhi.n	7000586e <osThreadNew+0x6e>
70005862:	687b      	ldr	r3, [r7, #4]
70005864:	685b      	ldr	r3, [r3, #4]
70005866:	f003 0301 	and.w	r3, r3, #1
7000586a:	2b00      	cmp	r3, #0
7000586c:	d001      	beq.n	70005872 <osThreadNew+0x72>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
7000586e:	2300      	movs	r3, #0
70005870:	e054      	b.n	7000591c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
70005872:	687b      	ldr	r3, [r7, #4]
70005874:	695b      	ldr	r3, [r3, #20]
70005876:	2b00      	cmp	r3, #0
70005878:	d003      	beq.n	70005882 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
7000587a:	687b      	ldr	r3, [r7, #4]
7000587c:	695b      	ldr	r3, [r3, #20]
7000587e:	089b      	lsrs	r3, r3, #2
70005880:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
70005882:	687b      	ldr	r3, [r7, #4]
70005884:	689b      	ldr	r3, [r3, #8]
70005886:	2b00      	cmp	r3, #0
70005888:	d00e      	beq.n	700058a8 <osThreadNew+0xa8>
7000588a:	687b      	ldr	r3, [r7, #4]
7000588c:	68db      	ldr	r3, [r3, #12]
7000588e:	2ba7      	cmp	r3, #167	@ 0xa7
70005890:	d90a      	bls.n	700058a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
70005892:	687b      	ldr	r3, [r7, #4]
70005894:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
70005896:	2b00      	cmp	r3, #0
70005898:	d006      	beq.n	700058a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
7000589a:	687b      	ldr	r3, [r7, #4]
7000589c:	695b      	ldr	r3, [r3, #20]
7000589e:	2b00      	cmp	r3, #0
700058a0:	d002      	beq.n	700058a8 <osThreadNew+0xa8>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
700058a2:	2301      	movs	r3, #1
700058a4:	61bb      	str	r3, [r7, #24]
700058a6:	e010      	b.n	700058ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
700058a8:	687b      	ldr	r3, [r7, #4]
700058aa:	689b      	ldr	r3, [r3, #8]
700058ac:	2b00      	cmp	r3, #0
700058ae:	d10c      	bne.n	700058ca <osThreadNew+0xca>
700058b0:	687b      	ldr	r3, [r7, #4]
700058b2:	68db      	ldr	r3, [r3, #12]
700058b4:	2b00      	cmp	r3, #0
700058b6:	d108      	bne.n	700058ca <osThreadNew+0xca>
700058b8:	687b      	ldr	r3, [r7, #4]
700058ba:	691b      	ldr	r3, [r3, #16]
700058bc:	2b00      	cmp	r3, #0
700058be:	d104      	bne.n	700058ca <osThreadNew+0xca>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
700058c0:	2300      	movs	r3, #0
700058c2:	61bb      	str	r3, [r7, #24]
700058c4:	e001      	b.n	700058ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
700058c6:	2300      	movs	r3, #0
700058c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
700058ca:	69bb      	ldr	r3, [r7, #24]
700058cc:	2b01      	cmp	r3, #1
700058ce:	d110      	bne.n	700058f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
700058d0:	687b      	ldr	r3, [r7, #4]
700058d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
700058d4:	687a      	ldr	r2, [r7, #4]
700058d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
700058d8:	9202      	str	r2, [sp, #8]
700058da:	9301      	str	r3, [sp, #4]
700058dc:	69fb      	ldr	r3, [r7, #28]
700058de:	9300      	str	r3, [sp, #0]
700058e0:	68bb      	ldr	r3, [r7, #8]
700058e2:	6a3a      	ldr	r2, [r7, #32]
700058e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
700058e6:	68f8      	ldr	r0, [r7, #12]
700058e8:	f002 fa34 	bl	70007d54 <xTaskCreateStatic>
700058ec:	4603      	mov	r3, r0
700058ee:	617b      	str	r3, [r7, #20]
700058f0:	e013      	b.n	7000591a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
700058f2:	69bb      	ldr	r3, [r7, #24]
700058f4:	2b00      	cmp	r3, #0
700058f6:	d110      	bne.n	7000591a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
700058f8:	6a3b      	ldr	r3, [r7, #32]
700058fa:	b29a      	uxth	r2, r3
700058fc:	f107 0314 	add.w	r3, r7, #20
70005900:	9301      	str	r3, [sp, #4]
70005902:	69fb      	ldr	r3, [r7, #28]
70005904:	9300      	str	r3, [sp, #0]
70005906:	68bb      	ldr	r3, [r7, #8]
70005908:	6a79      	ldr	r1, [r7, #36]	@ 0x24
7000590a:	68f8      	ldr	r0, [r7, #12]
7000590c:	f002 fa87 	bl	70007e1e <xTaskCreate>
70005910:	4603      	mov	r3, r0
70005912:	2b01      	cmp	r3, #1
70005914:	d001      	beq.n	7000591a <osThreadNew+0x11a>
            hTask = NULL;
70005916:	2300      	movs	r3, #0
70005918:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
7000591a:	697b      	ldr	r3, [r7, #20]
}
7000591c:	4618      	mov	r0, r3
7000591e:	3728      	adds	r7, #40	@ 0x28
70005920:	46bd      	mov	sp, r7
70005922:	bd80      	pop	{r7, pc}

70005924 <osThreadTerminate>:
}

/*
  Terminate execution of a thread.
*/
osStatus_t osThreadTerminate (osThreadId_t thread_id) {
70005924:	b580      	push	{r7, lr}
70005926:	b086      	sub	sp, #24
70005928:	af00      	add	r7, sp, #0
7000592a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
7000592c:	687b      	ldr	r3, [r7, #4]
7000592e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IRQ_Context() != 0U) {
70005930:	f7ff fedb 	bl	700056ea <IRQ_Context>
70005934:	4603      	mov	r3, r0
70005936:	2b00      	cmp	r3, #0
70005938:	d003      	beq.n	70005942 <osThreadTerminate+0x1e>
    stat = osErrorISR;
7000593a:	f06f 0305 	mvn.w	r3, #5
7000593e:	617b      	str	r3, [r7, #20]
70005940:	e017      	b.n	70005972 <osThreadTerminate+0x4e>
  }
  else if (hTask == NULL) {
70005942:	693b      	ldr	r3, [r7, #16]
70005944:	2b00      	cmp	r3, #0
70005946:	d103      	bne.n	70005950 <osThreadTerminate+0x2c>
    stat = osErrorParameter;
70005948:	f06f 0303 	mvn.w	r3, #3
7000594c:	617b      	str	r3, [r7, #20]
7000594e:	e010      	b.n	70005972 <osThreadTerminate+0x4e>
  }
  else {
    tstate = eTaskGetState (hTask);
70005950:	6938      	ldr	r0, [r7, #16]
70005952:	f002 fc9b 	bl	7000828c <eTaskGetState>
70005956:	4603      	mov	r3, r0
70005958:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
7000595a:	7bfb      	ldrb	r3, [r7, #15]
7000595c:	2b04      	cmp	r3, #4
7000595e:	d005      	beq.n	7000596c <osThreadTerminate+0x48>
      stat = osOK;
70005960:	2300      	movs	r3, #0
70005962:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
70005964:	6938      	ldr	r0, [r7, #16]
70005966:	f002 fbe3 	bl	70008130 <vTaskDelete>
7000596a:	e002      	b.n	70005972 <osThreadTerminate+0x4e>
    } else {
      stat = osErrorResource;
7000596c:	f06f 0302 	mvn.w	r3, #2
70005970:	617b      	str	r3, [r7, #20]
#else
  stat = osError;
#endif

  /* Return execution status */
  return (stat);
70005972:	697b      	ldr	r3, [r7, #20]
}
70005974:	4618      	mov	r0, r3
70005976:	3718      	adds	r7, #24
70005978:	46bd      	mov	sp, r7
7000597a:	bd80      	pop	{r7, pc}

7000597c <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
7000597c:	b580      	push	{r7, lr}
7000597e:	b084      	sub	sp, #16
70005980:	af00      	add	r7, sp, #0
70005982:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
70005984:	f7ff feb1 	bl	700056ea <IRQ_Context>
70005988:	4603      	mov	r3, r0
7000598a:	2b00      	cmp	r3, #0
7000598c:	d003      	beq.n	70005996 <osDelay+0x1a>
    stat = osErrorISR;
7000598e:	f06f 0305 	mvn.w	r3, #5
70005992:	60fb      	str	r3, [r7, #12]
70005994:	e007      	b.n	700059a6 <osDelay+0x2a>
  }
  else {
    stat = osOK;
70005996:	2300      	movs	r3, #0
70005998:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
7000599a:	687b      	ldr	r3, [r7, #4]
7000599c:	2b00      	cmp	r3, #0
7000599e:	d002      	beq.n	700059a6 <osDelay+0x2a>
      vTaskDelay(ticks);
700059a0:	6878      	ldr	r0, [r7, #4]
700059a2:	f002 fc3d 	bl	70008220 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
700059a6:	68fb      	ldr	r3, [r7, #12]
}
700059a8:	4618      	mov	r0, r3
700059aa:	3710      	adds	r7, #16
700059ac:	46bd      	mov	sp, r7
700059ae:	bd80      	pop	{r7, pc}

700059b0 <osMutexNew>:

  Limitations:
  - Priority inherit protocol is used by default, osMutexPrioInherit attribute is ignored.
  - Robust mutex is not supported, NULL is returned if used.
*/
osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
700059b0:	b580      	push	{r7, lr}
700059b2:	b086      	sub	sp, #24
700059b4:	af00      	add	r7, sp, #0
700059b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  uint32_t type;
  uint32_t rmtx;
  int32_t  mem;

  hMutex = NULL;
700059b8:	2300      	movs	r3, #0
700059ba:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() == 0U) {
700059bc:	f7ff fe95 	bl	700056ea <IRQ_Context>
700059c0:	4603      	mov	r3, r0
700059c2:	2b00      	cmp	r3, #0
700059c4:	d174      	bne.n	70005ab0 <osMutexNew+0x100>
    if (attr != NULL) {
700059c6:	687b      	ldr	r3, [r7, #4]
700059c8:	2b00      	cmp	r3, #0
700059ca:	d003      	beq.n	700059d4 <osMutexNew+0x24>
      type = attr->attr_bits;
700059cc:	687b      	ldr	r3, [r7, #4]
700059ce:	685b      	ldr	r3, [r3, #4]
700059d0:	613b      	str	r3, [r7, #16]
700059d2:	e001      	b.n	700059d8 <osMutexNew+0x28>
    } else {
      type = 0U;
700059d4:	2300      	movs	r3, #0
700059d6:	613b      	str	r3, [r7, #16]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
700059d8:	693b      	ldr	r3, [r7, #16]
700059da:	f003 0301 	and.w	r3, r3, #1
700059de:	2b00      	cmp	r3, #0
700059e0:	d002      	beq.n	700059e8 <osMutexNew+0x38>
      rmtx = 1U;
700059e2:	2301      	movs	r3, #1
700059e4:	60fb      	str	r3, [r7, #12]
700059e6:	e001      	b.n	700059ec <osMutexNew+0x3c>
    } else {
      rmtx = 0U;
700059e8:	2300      	movs	r3, #0
700059ea:	60fb      	str	r3, [r7, #12]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
700059ec:	693b      	ldr	r3, [r7, #16]
700059ee:	f003 0308 	and.w	r3, r3, #8
700059f2:	2b00      	cmp	r3, #0
700059f4:	d15c      	bne.n	70005ab0 <osMutexNew+0x100>
      mem = -1;
700059f6:	f04f 33ff 	mov.w	r3, #4294967295
700059fa:	60bb      	str	r3, [r7, #8]

      if (attr != NULL) {
700059fc:	687b      	ldr	r3, [r7, #4]
700059fe:	2b00      	cmp	r3, #0
70005a00:	d015      	beq.n	70005a2e <osMutexNew+0x7e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
70005a02:	687b      	ldr	r3, [r7, #4]
70005a04:	689b      	ldr	r3, [r3, #8]
70005a06:	2b00      	cmp	r3, #0
70005a08:	d006      	beq.n	70005a18 <osMutexNew+0x68>
70005a0a:	687b      	ldr	r3, [r7, #4]
70005a0c:	68db      	ldr	r3, [r3, #12]
70005a0e:	2b4f      	cmp	r3, #79	@ 0x4f
70005a10:	d902      	bls.n	70005a18 <osMutexNew+0x68>
          /* The memory for control block is provided, use static object */
          mem = 1;
70005a12:	2301      	movs	r3, #1
70005a14:	60bb      	str	r3, [r7, #8]
70005a16:	e00c      	b.n	70005a32 <osMutexNew+0x82>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
70005a18:	687b      	ldr	r3, [r7, #4]
70005a1a:	689b      	ldr	r3, [r3, #8]
70005a1c:	2b00      	cmp	r3, #0
70005a1e:	d108      	bne.n	70005a32 <osMutexNew+0x82>
70005a20:	687b      	ldr	r3, [r7, #4]
70005a22:	68db      	ldr	r3, [r3, #12]
70005a24:	2b00      	cmp	r3, #0
70005a26:	d104      	bne.n	70005a32 <osMutexNew+0x82>
            /* Control block will be allocated from the dynamic pool */
            mem = 0;
70005a28:	2300      	movs	r3, #0
70005a2a:	60bb      	str	r3, [r7, #8]
70005a2c:	e001      	b.n	70005a32 <osMutexNew+0x82>
          }
        }
      }
      else {
        mem = 0;
70005a2e:	2300      	movs	r3, #0
70005a30:	60bb      	str	r3, [r7, #8]
      }

      if (mem == 1) {
70005a32:	68bb      	ldr	r3, [r7, #8]
70005a34:	2b01      	cmp	r3, #1
70005a36:	d112      	bne.n	70005a5e <osMutexNew+0xae>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
70005a38:	68fb      	ldr	r3, [r7, #12]
70005a3a:	2b00      	cmp	r3, #0
70005a3c:	d007      	beq.n	70005a4e <osMutexNew+0x9e>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
70005a3e:	687b      	ldr	r3, [r7, #4]
70005a40:	689b      	ldr	r3, [r3, #8]
70005a42:	4619      	mov	r1, r3
70005a44:	2004      	movs	r0, #4
70005a46:	f001 f9b6 	bl	70006db6 <xQueueCreateMutexStatic>
70005a4a:	6178      	str	r0, [r7, #20]
70005a4c:	e016      	b.n	70005a7c <osMutexNew+0xcc>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
70005a4e:	687b      	ldr	r3, [r7, #4]
70005a50:	689b      	ldr	r3, [r3, #8]
70005a52:	4619      	mov	r1, r3
70005a54:	2001      	movs	r0, #1
70005a56:	f001 f9ae 	bl	70006db6 <xQueueCreateMutexStatic>
70005a5a:	6178      	str	r0, [r7, #20]
70005a5c:	e00e      	b.n	70005a7c <osMutexNew+0xcc>
          }
        #endif
      }
      else {
        if (mem == 0) {
70005a5e:	68bb      	ldr	r3, [r7, #8]
70005a60:	2b00      	cmp	r3, #0
70005a62:	d10b      	bne.n	70005a7c <osMutexNew+0xcc>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
70005a64:	68fb      	ldr	r3, [r7, #12]
70005a66:	2b00      	cmp	r3, #0
70005a68:	d004      	beq.n	70005a74 <osMutexNew+0xc4>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
70005a6a:	2004      	movs	r0, #4
70005a6c:	f001 f98b 	bl	70006d86 <xQueueCreateMutex>
70005a70:	6178      	str	r0, [r7, #20]
70005a72:	e003      	b.n	70005a7c <osMutexNew+0xcc>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
70005a74:	2001      	movs	r0, #1
70005a76:	f001 f986 	bl	70006d86 <xQueueCreateMutex>
70005a7a:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
70005a7c:	697b      	ldr	r3, [r7, #20]
70005a7e:	2b00      	cmp	r3, #0
70005a80:	d00c      	beq.n	70005a9c <osMutexNew+0xec>
        if ((attr != NULL) && (attr->name != NULL)) {
70005a82:	687b      	ldr	r3, [r7, #4]
70005a84:	2b00      	cmp	r3, #0
70005a86:	d009      	beq.n	70005a9c <osMutexNew+0xec>
70005a88:	687b      	ldr	r3, [r7, #4]
70005a8a:	681b      	ldr	r3, [r3, #0]
70005a8c:	2b00      	cmp	r3, #0
70005a8e:	d005      	beq.n	70005a9c <osMutexNew+0xec>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hMutex, attr->name);
70005a90:	687b      	ldr	r3, [r7, #4]
70005a92:	681b      	ldr	r3, [r3, #0]
70005a94:	4619      	mov	r1, r3
70005a96:	6978      	ldr	r0, [r7, #20]
70005a98:	f002 f89e 	bl	70007bd8 <vQueueAddToRegistry>
        }
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
70005a9c:	697b      	ldr	r3, [r7, #20]
70005a9e:	2b00      	cmp	r3, #0
70005aa0:	d006      	beq.n	70005ab0 <osMutexNew+0x100>
70005aa2:	68fb      	ldr	r3, [r7, #12]
70005aa4:	2b00      	cmp	r3, #0
70005aa6:	d003      	beq.n	70005ab0 <osMutexNew+0x100>
        /* Set LSB as 'recursive mutex flag' */
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
70005aa8:	697b      	ldr	r3, [r7, #20]
70005aaa:	f043 0301 	orr.w	r3, r3, #1
70005aae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return mutex ID */
  return ((osMutexId_t)hMutex);
70005ab0:	697b      	ldr	r3, [r7, #20]
}
70005ab2:	4618      	mov	r0, r3
70005ab4:	3718      	adds	r7, #24
70005ab6:	46bd      	mov	sp, r7
70005ab8:	bd80      	pop	{r7, pc}

70005aba <osMutexAcquire>:

/*
  Acquire a Mutex or timeout if it is locked.
*/
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
70005aba:	b580      	push	{r7, lr}
70005abc:	b086      	sub	sp, #24
70005abe:	af00      	add	r7, sp, #0
70005ac0:	6078      	str	r0, [r7, #4]
70005ac2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
70005ac4:	687b      	ldr	r3, [r7, #4]
70005ac6:	f023 0301 	bic.w	r3, r3, #1
70005aca:	613b      	str	r3, [r7, #16]

  /* Extract recursive mutex flag */
  rmtx = (uint32_t)mutex_id & 1U;
70005acc:	687b      	ldr	r3, [r7, #4]
70005ace:	f003 0301 	and.w	r3, r3, #1
70005ad2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
70005ad4:	2300      	movs	r3, #0
70005ad6:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() != 0U) {
70005ad8:	f7ff fe07 	bl	700056ea <IRQ_Context>
70005adc:	4603      	mov	r3, r0
70005ade:	2b00      	cmp	r3, #0
70005ae0:	d003      	beq.n	70005aea <osMutexAcquire+0x30>
    stat = osErrorISR;
70005ae2:	f06f 0305 	mvn.w	r3, #5
70005ae6:	617b      	str	r3, [r7, #20]
70005ae8:	e02c      	b.n	70005b44 <osMutexAcquire+0x8a>
  }
  else if (hMutex == NULL) {
70005aea:	693b      	ldr	r3, [r7, #16]
70005aec:	2b00      	cmp	r3, #0
70005aee:	d103      	bne.n	70005af8 <osMutexAcquire+0x3e>
    stat = osErrorParameter;
70005af0:	f06f 0303 	mvn.w	r3, #3
70005af4:	617b      	str	r3, [r7, #20]
70005af6:	e025      	b.n	70005b44 <osMutexAcquire+0x8a>
  }
  else {
    if (rmtx != 0U) {
70005af8:	68fb      	ldr	r3, [r7, #12]
70005afa:	2b00      	cmp	r3, #0
70005afc:	d011      	beq.n	70005b22 <osMutexAcquire+0x68>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
70005afe:	6839      	ldr	r1, [r7, #0]
70005b00:	6938      	ldr	r0, [r7, #16]
70005b02:	f001 f9a8 	bl	70006e56 <xQueueTakeMutexRecursive>
70005b06:	4603      	mov	r3, r0
70005b08:	2b01      	cmp	r3, #1
70005b0a:	d01b      	beq.n	70005b44 <osMutexAcquire+0x8a>
        if (timeout != 0U) {
70005b0c:	683b      	ldr	r3, [r7, #0]
70005b0e:	2b00      	cmp	r3, #0
70005b10:	d003      	beq.n	70005b1a <osMutexAcquire+0x60>
          stat = osErrorTimeout;
70005b12:	f06f 0301 	mvn.w	r3, #1
70005b16:	617b      	str	r3, [r7, #20]
70005b18:	e014      	b.n	70005b44 <osMutexAcquire+0x8a>
        } else {
          stat = osErrorResource;
70005b1a:	f06f 0302 	mvn.w	r3, #2
70005b1e:	617b      	str	r3, [r7, #20]
70005b20:	e010      	b.n	70005b44 <osMutexAcquire+0x8a>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
70005b22:	6839      	ldr	r1, [r7, #0]
70005b24:	6938      	ldr	r0, [r7, #16]
70005b26:	f001 fd71 	bl	7000760c <xQueueSemaphoreTake>
70005b2a:	4603      	mov	r3, r0
70005b2c:	2b01      	cmp	r3, #1
70005b2e:	d009      	beq.n	70005b44 <osMutexAcquire+0x8a>
        if (timeout != 0U) {
70005b30:	683b      	ldr	r3, [r7, #0]
70005b32:	2b00      	cmp	r3, #0
70005b34:	d003      	beq.n	70005b3e <osMutexAcquire+0x84>
          stat = osErrorTimeout;
70005b36:	f06f 0301 	mvn.w	r3, #1
70005b3a:	617b      	str	r3, [r7, #20]
70005b3c:	e002      	b.n	70005b44 <osMutexAcquire+0x8a>
        } else {
          stat = osErrorResource;
70005b3e:	f06f 0302 	mvn.w	r3, #2
70005b42:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
70005b44:	697b      	ldr	r3, [r7, #20]
}
70005b46:	4618      	mov	r0, r3
70005b48:	3718      	adds	r7, #24
70005b4a:	46bd      	mov	sp, r7
70005b4c:	bd80      	pop	{r7, pc}

70005b4e <osMutexRelease>:

/*
  Release a Mutex that was acquired by osMutexAcquire.
*/
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
70005b4e:	b580      	push	{r7, lr}
70005b50:	b086      	sub	sp, #24
70005b52:	af00      	add	r7, sp, #0
70005b54:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
70005b56:	687b      	ldr	r3, [r7, #4]
70005b58:	f023 0301 	bic.w	r3, r3, #1
70005b5c:	613b      	str	r3, [r7, #16]

  /* Extract recursive mutex flag */
  rmtx = (uint32_t)mutex_id & 1U;
70005b5e:	687b      	ldr	r3, [r7, #4]
70005b60:	f003 0301 	and.w	r3, r3, #1
70005b64:	60fb      	str	r3, [r7, #12]

  stat = osOK;
70005b66:	2300      	movs	r3, #0
70005b68:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() != 0U) {
70005b6a:	f7ff fdbe 	bl	700056ea <IRQ_Context>
70005b6e:	4603      	mov	r3, r0
70005b70:	2b00      	cmp	r3, #0
70005b72:	d003      	beq.n	70005b7c <osMutexRelease+0x2e>
    stat = osErrorISR;
70005b74:	f06f 0305 	mvn.w	r3, #5
70005b78:	617b      	str	r3, [r7, #20]
70005b7a:	e01f      	b.n	70005bbc <osMutexRelease+0x6e>
  }
  else if (hMutex == NULL) {
70005b7c:	693b      	ldr	r3, [r7, #16]
70005b7e:	2b00      	cmp	r3, #0
70005b80:	d103      	bne.n	70005b8a <osMutexRelease+0x3c>
    stat = osErrorParameter;
70005b82:	f06f 0303 	mvn.w	r3, #3
70005b86:	617b      	str	r3, [r7, #20]
70005b88:	e018      	b.n	70005bbc <osMutexRelease+0x6e>
  }
  else {
    if (rmtx != 0U) {
70005b8a:	68fb      	ldr	r3, [r7, #12]
70005b8c:	2b00      	cmp	r3, #0
70005b8e:	d009      	beq.n	70005ba4 <osMutexRelease+0x56>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
70005b90:	6938      	ldr	r0, [r7, #16]
70005b92:	f001 f92b 	bl	70006dec <xQueueGiveMutexRecursive>
70005b96:	4603      	mov	r3, r0
70005b98:	2b01      	cmp	r3, #1
70005b9a:	d00f      	beq.n	70005bbc <osMutexRelease+0x6e>
        stat = osErrorResource;
70005b9c:	f06f 0302 	mvn.w	r3, #2
70005ba0:	617b      	str	r3, [r7, #20]
70005ba2:	e00b      	b.n	70005bbc <osMutexRelease+0x6e>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
70005ba4:	2300      	movs	r3, #0
70005ba6:	2200      	movs	r2, #0
70005ba8:	2100      	movs	r1, #0
70005baa:	6938      	ldr	r0, [r7, #16]
70005bac:	f001 f9ec 	bl	70006f88 <xQueueGenericSend>
70005bb0:	4603      	mov	r3, r0
70005bb2:	2b01      	cmp	r3, #1
70005bb4:	d002      	beq.n	70005bbc <osMutexRelease+0x6e>
        stat = osErrorResource;
70005bb6:	f06f 0302 	mvn.w	r3, #2
70005bba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
70005bbc:	697b      	ldr	r3, [r7, #20]
}
70005bbe:	4618      	mov	r0, r3
70005bc0:	3718      	adds	r7, #24
70005bc2:	46bd      	mov	sp, r7
70005bc4:	bd80      	pop	{r7, pc}

70005bc6 <osSemaphoreNew>:
/* ==== Semaphore Management Functions ==== */

/*
  Create and Initialize a Semaphore object.
*/
osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
70005bc6:	b580      	push	{r7, lr}
70005bc8:	b088      	sub	sp, #32
70005bca:	af02      	add	r7, sp, #8
70005bcc:	60f8      	str	r0, [r7, #12]
70005bce:	60b9      	str	r1, [r7, #8]
70005bd0:	607a      	str	r2, [r7, #4]
  SemaphoreHandle_t hSemaphore;
  int32_t mem;

  hSemaphore = NULL;
70005bd2:	2300      	movs	r3, #0
70005bd4:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (max_count > 0U) && (initial_count <= max_count)) {
70005bd6:	f7ff fd88 	bl	700056ea <IRQ_Context>
70005bda:	4603      	mov	r3, r0
70005bdc:	2b00      	cmp	r3, #0
70005bde:	d175      	bne.n	70005ccc <osSemaphoreNew+0x106>
70005be0:	68fb      	ldr	r3, [r7, #12]
70005be2:	2b00      	cmp	r3, #0
70005be4:	d072      	beq.n	70005ccc <osSemaphoreNew+0x106>
70005be6:	68ba      	ldr	r2, [r7, #8]
70005be8:	68fb      	ldr	r3, [r7, #12]
70005bea:	429a      	cmp	r2, r3
70005bec:	d86e      	bhi.n	70005ccc <osSemaphoreNew+0x106>
    mem = -1;
70005bee:	f04f 33ff 	mov.w	r3, #4294967295
70005bf2:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
70005bf4:	687b      	ldr	r3, [r7, #4]
70005bf6:	2b00      	cmp	r3, #0
70005bf8:	d015      	beq.n	70005c26 <osSemaphoreNew+0x60>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
70005bfa:	687b      	ldr	r3, [r7, #4]
70005bfc:	689b      	ldr	r3, [r3, #8]
70005bfe:	2b00      	cmp	r3, #0
70005c00:	d006      	beq.n	70005c10 <osSemaphoreNew+0x4a>
70005c02:	687b      	ldr	r3, [r7, #4]
70005c04:	68db      	ldr	r3, [r3, #12]
70005c06:	2b4f      	cmp	r3, #79	@ 0x4f
70005c08:	d902      	bls.n	70005c10 <osSemaphoreNew+0x4a>
        /* The memory for control block is provided, use static object */
        mem = 1;
70005c0a:	2301      	movs	r3, #1
70005c0c:	613b      	str	r3, [r7, #16]
70005c0e:	e00c      	b.n	70005c2a <osSemaphoreNew+0x64>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
70005c10:	687b      	ldr	r3, [r7, #4]
70005c12:	689b      	ldr	r3, [r3, #8]
70005c14:	2b00      	cmp	r3, #0
70005c16:	d108      	bne.n	70005c2a <osSemaphoreNew+0x64>
70005c18:	687b      	ldr	r3, [r7, #4]
70005c1a:	68db      	ldr	r3, [r3, #12]
70005c1c:	2b00      	cmp	r3, #0
70005c1e:	d104      	bne.n	70005c2a <osSemaphoreNew+0x64>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
70005c20:	2300      	movs	r3, #0
70005c22:	613b      	str	r3, [r7, #16]
70005c24:	e001      	b.n	70005c2a <osSemaphoreNew+0x64>
        }
      }
    }
    else {
      mem = 0;
70005c26:	2300      	movs	r3, #0
70005c28:	613b      	str	r3, [r7, #16]
    }

    if (mem != -1) {
70005c2a:	693b      	ldr	r3, [r7, #16]
70005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
70005c30:	d04c      	beq.n	70005ccc <osSemaphoreNew+0x106>
      if (max_count == 1U) {
70005c32:	68fb      	ldr	r3, [r7, #12]
70005c34:	2b01      	cmp	r3, #1
70005c36:	d128      	bne.n	70005c8a <osSemaphoreNew+0xc4>
        if (mem == 1) {
70005c38:	693b      	ldr	r3, [r7, #16]
70005c3a:	2b01      	cmp	r3, #1
70005c3c:	d10a      	bne.n	70005c54 <osSemaphoreNew+0x8e>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
70005c3e:	687b      	ldr	r3, [r7, #4]
70005c40:	689b      	ldr	r3, [r3, #8]
70005c42:	2203      	movs	r2, #3
70005c44:	9200      	str	r2, [sp, #0]
70005c46:	2200      	movs	r2, #0
70005c48:	2100      	movs	r1, #0
70005c4a:	2001      	movs	r0, #1
70005c4c:	f000 ffaa 	bl	70006ba4 <xQueueGenericCreateStatic>
70005c50:	6178      	str	r0, [r7, #20]
70005c52:	e005      	b.n	70005c60 <osSemaphoreNew+0x9a>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
70005c54:	2203      	movs	r2, #3
70005c56:	2100      	movs	r1, #0
70005c58:	2001      	movs	r0, #1
70005c5a:	f001 f804 	bl	70006c66 <xQueueGenericCreate>
70005c5e:	6178      	str	r0, [r7, #20]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
70005c60:	697b      	ldr	r3, [r7, #20]
70005c62:	2b00      	cmp	r3, #0
70005c64:	d022      	beq.n	70005cac <osSemaphoreNew+0xe6>
70005c66:	68bb      	ldr	r3, [r7, #8]
70005c68:	2b00      	cmp	r3, #0
70005c6a:	d01f      	beq.n	70005cac <osSemaphoreNew+0xe6>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
70005c6c:	2300      	movs	r3, #0
70005c6e:	2200      	movs	r2, #0
70005c70:	2100      	movs	r1, #0
70005c72:	6978      	ldr	r0, [r7, #20]
70005c74:	f001 f988 	bl	70006f88 <xQueueGenericSend>
70005c78:	4603      	mov	r3, r0
70005c7a:	2b01      	cmp	r3, #1
70005c7c:	d016      	beq.n	70005cac <osSemaphoreNew+0xe6>
            vSemaphoreDelete (hSemaphore);
70005c7e:	6978      	ldr	r0, [r7, #20]
70005c80:	f001 fe5e 	bl	70007940 <vQueueDelete>
            hSemaphore = NULL;
70005c84:	2300      	movs	r3, #0
70005c86:	617b      	str	r3, [r7, #20]
70005c88:	e010      	b.n	70005cac <osSemaphoreNew+0xe6>
          }
        }
      }
      else {
        if (mem == 1) {
70005c8a:	693b      	ldr	r3, [r7, #16]
70005c8c:	2b01      	cmp	r3, #1
70005c8e:	d108      	bne.n	70005ca2 <osSemaphoreNew+0xdc>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
70005c90:	687b      	ldr	r3, [r7, #4]
70005c92:	689b      	ldr	r3, [r3, #8]
70005c94:	461a      	mov	r2, r3
70005c96:	68b9      	ldr	r1, [r7, #8]
70005c98:	68f8      	ldr	r0, [r7, #12]
70005c9a:	f001 f913 	bl	70006ec4 <xQueueCreateCountingSemaphoreStatic>
70005c9e:	6178      	str	r0, [r7, #20]
70005ca0:	e004      	b.n	70005cac <osSemaphoreNew+0xe6>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
70005ca2:	68b9      	ldr	r1, [r7, #8]
70005ca4:	68f8      	ldr	r0, [r7, #12]
70005ca6:	f001 f940 	bl	70006f2a <xQueueCreateCountingSemaphore>
70005caa:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
70005cac:	697b      	ldr	r3, [r7, #20]
70005cae:	2b00      	cmp	r3, #0
70005cb0:	d00c      	beq.n	70005ccc <osSemaphoreNew+0x106>
        if ((attr != NULL) && (attr->name != NULL)) {
70005cb2:	687b      	ldr	r3, [r7, #4]
70005cb4:	2b00      	cmp	r3, #0
70005cb6:	d009      	beq.n	70005ccc <osSemaphoreNew+0x106>
70005cb8:	687b      	ldr	r3, [r7, #4]
70005cba:	681b      	ldr	r3, [r3, #0]
70005cbc:	2b00      	cmp	r3, #0
70005cbe:	d005      	beq.n	70005ccc <osSemaphoreNew+0x106>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hSemaphore, attr->name);
70005cc0:	687b      	ldr	r3, [r7, #4]
70005cc2:	681b      	ldr	r3, [r3, #0]
70005cc4:	4619      	mov	r1, r3
70005cc6:	6978      	ldr	r0, [r7, #20]
70005cc8:	f001 ff86 	bl	70007bd8 <vQueueAddToRegistry>
      #endif
    }
  }

  /* Return semaphore ID */
  return ((osSemaphoreId_t)hSemaphore);
70005ccc:	697b      	ldr	r3, [r7, #20]
}
70005cce:	4618      	mov	r0, r3
70005cd0:	3718      	adds	r7, #24
70005cd2:	46bd      	mov	sp, r7
70005cd4:	bd80      	pop	{r7, pc}
	...

70005cd8 <osSemaphoreAcquire>:

/*
  Acquire a Semaphore token or timeout if no tokens are available.
*/
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
70005cd8:	b580      	push	{r7, lr}
70005cda:	b086      	sub	sp, #24
70005cdc:	af00      	add	r7, sp, #0
70005cde:	6078      	str	r0, [r7, #4]
70005ce0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
70005ce2:	687b      	ldr	r3, [r7, #4]
70005ce4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
70005ce6:	2300      	movs	r3, #0
70005ce8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
70005cea:	693b      	ldr	r3, [r7, #16]
70005cec:	2b00      	cmp	r3, #0
70005cee:	d103      	bne.n	70005cf8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
70005cf0:	f06f 0303 	mvn.w	r3, #3
70005cf4:	617b      	str	r3, [r7, #20]
70005cf6:	e038      	b.n	70005d6a <osSemaphoreAcquire+0x92>
  }
  else if (IRQ_Context() != 0U) {
70005cf8:	f7ff fcf7 	bl	700056ea <IRQ_Context>
70005cfc:	4603      	mov	r3, r0
70005cfe:	2b00      	cmp	r3, #0
70005d00:	d022      	beq.n	70005d48 <osSemaphoreAcquire+0x70>
    if (timeout != 0U) {
70005d02:	683b      	ldr	r3, [r7, #0]
70005d04:	2b00      	cmp	r3, #0
70005d06:	d003      	beq.n	70005d10 <osSemaphoreAcquire+0x38>
      stat = osErrorParameter;
70005d08:	f06f 0303 	mvn.w	r3, #3
70005d0c:	617b      	str	r3, [r7, #20]
70005d0e:	e02c      	b.n	70005d6a <osSemaphoreAcquire+0x92>
    }
    else {
      yield = pdFALSE;
70005d10:	2300      	movs	r3, #0
70005d12:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
70005d14:	f107 030c 	add.w	r3, r7, #12
70005d18:	461a      	mov	r2, r3
70005d1a:	2100      	movs	r1, #0
70005d1c:	6938      	ldr	r0, [r7, #16]
70005d1e:	f001 fd75 	bl	7000780c <xQueueReceiveFromISR>
70005d22:	4603      	mov	r3, r0
70005d24:	2b01      	cmp	r3, #1
70005d26:	d003      	beq.n	70005d30 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
70005d28:	f06f 0302 	mvn.w	r3, #2
70005d2c:	617b      	str	r3, [r7, #20]
70005d2e:	e01c      	b.n	70005d6a <osSemaphoreAcquire+0x92>
      } else {
        portYIELD_FROM_ISR (yield);
70005d30:	68fb      	ldr	r3, [r7, #12]
70005d32:	2b00      	cmp	r3, #0
70005d34:	d019      	beq.n	70005d6a <osSemaphoreAcquire+0x92>
70005d36:	4b0f      	ldr	r3, [pc, #60]	@ (70005d74 <osSemaphoreAcquire+0x9c>)
70005d38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70005d3c:	601a      	str	r2, [r3, #0]
70005d3e:	f3bf 8f4f 	dsb	sy
70005d42:	f3bf 8f6f 	isb	sy
70005d46:	e010      	b.n	70005d6a <osSemaphoreAcquire+0x92>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
70005d48:	6839      	ldr	r1, [r7, #0]
70005d4a:	6938      	ldr	r0, [r7, #16]
70005d4c:	f001 fc5e 	bl	7000760c <xQueueSemaphoreTake>
70005d50:	4603      	mov	r3, r0
70005d52:	2b01      	cmp	r3, #1
70005d54:	d009      	beq.n	70005d6a <osSemaphoreAcquire+0x92>
      if (timeout != 0U) {
70005d56:	683b      	ldr	r3, [r7, #0]
70005d58:	2b00      	cmp	r3, #0
70005d5a:	d003      	beq.n	70005d64 <osSemaphoreAcquire+0x8c>
        stat = osErrorTimeout;
70005d5c:	f06f 0301 	mvn.w	r3, #1
70005d60:	617b      	str	r3, [r7, #20]
70005d62:	e002      	b.n	70005d6a <osSemaphoreAcquire+0x92>
      } else {
        stat = osErrorResource;
70005d64:	f06f 0302 	mvn.w	r3, #2
70005d68:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
70005d6a:	697b      	ldr	r3, [r7, #20]
}
70005d6c:	4618      	mov	r0, r3
70005d6e:	3718      	adds	r7, #24
70005d70:	46bd      	mov	sp, r7
70005d72:	bd80      	pop	{r7, pc}
70005d74:	e000ed04 	.word	0xe000ed04

70005d78 <osSemaphoreRelease>:

/*
  Release a Semaphore token up to the initial maximum count.
*/
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
70005d78:	b580      	push	{r7, lr}
70005d7a:	b086      	sub	sp, #24
70005d7c:	af00      	add	r7, sp, #0
70005d7e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
70005d80:	687b      	ldr	r3, [r7, #4]
70005d82:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
70005d84:	2300      	movs	r3, #0
70005d86:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
70005d88:	693b      	ldr	r3, [r7, #16]
70005d8a:	2b00      	cmp	r3, #0
70005d8c:	d103      	bne.n	70005d96 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
70005d8e:	f06f 0303 	mvn.w	r3, #3
70005d92:	617b      	str	r3, [r7, #20]
70005d94:	e02b      	b.n	70005dee <osSemaphoreRelease+0x76>
  }
  else if (IRQ_Context() != 0U) {
70005d96:	f7ff fca8 	bl	700056ea <IRQ_Context>
70005d9a:	4603      	mov	r3, r0
70005d9c:	2b00      	cmp	r3, #0
70005d9e:	d01a      	beq.n	70005dd6 <osSemaphoreRelease+0x5e>
    yield = pdFALSE;
70005da0:	2300      	movs	r3, #0
70005da2:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
70005da4:	f107 030c 	add.w	r3, r7, #12
70005da8:	4619      	mov	r1, r3
70005daa:	6938      	ldr	r0, [r7, #16]
70005dac:	f001 faa4 	bl	700072f8 <xQueueGiveFromISR>
70005db0:	4603      	mov	r3, r0
70005db2:	2b01      	cmp	r3, #1
70005db4:	d003      	beq.n	70005dbe <osSemaphoreRelease+0x46>
      stat = osErrorResource;
70005db6:	f06f 0302 	mvn.w	r3, #2
70005dba:	617b      	str	r3, [r7, #20]
70005dbc:	e017      	b.n	70005dee <osSemaphoreRelease+0x76>
    } else {
      portYIELD_FROM_ISR (yield);
70005dbe:	68fb      	ldr	r3, [r7, #12]
70005dc0:	2b00      	cmp	r3, #0
70005dc2:	d014      	beq.n	70005dee <osSemaphoreRelease+0x76>
70005dc4:	4b0c      	ldr	r3, [pc, #48]	@ (70005df8 <osSemaphoreRelease+0x80>)
70005dc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70005dca:	601a      	str	r2, [r3, #0]
70005dcc:	f3bf 8f4f 	dsb	sy
70005dd0:	f3bf 8f6f 	isb	sy
70005dd4:	e00b      	b.n	70005dee <osSemaphoreRelease+0x76>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
70005dd6:	2300      	movs	r3, #0
70005dd8:	2200      	movs	r2, #0
70005dda:	2100      	movs	r1, #0
70005ddc:	6938      	ldr	r0, [r7, #16]
70005dde:	f001 f8d3 	bl	70006f88 <xQueueGenericSend>
70005de2:	4603      	mov	r3, r0
70005de4:	2b01      	cmp	r3, #1
70005de6:	d002      	beq.n	70005dee <osSemaphoreRelease+0x76>
      stat = osErrorResource;
70005de8:	f06f 0302 	mvn.w	r3, #2
70005dec:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return execution status */
  return (stat);
70005dee:	697b      	ldr	r3, [r7, #20]
}
70005df0:	4618      	mov	r0, r3
70005df2:	3718      	adds	r7, #24
70005df4:	46bd      	mov	sp, r7
70005df6:	bd80      	pop	{r7, pc}
70005df8:	e000ed04 	.word	0xe000ed04

70005dfc <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
70005dfc:	b580      	push	{r7, lr}
70005dfe:	b088      	sub	sp, #32
70005e00:	af02      	add	r7, sp, #8
70005e02:	60f8      	str	r0, [r7, #12]
70005e04:	60b9      	str	r1, [r7, #8]
70005e06:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
70005e08:	2300      	movs	r3, #0
70005e0a:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
70005e0c:	f7ff fc6d 	bl	700056ea <IRQ_Context>
70005e10:	4603      	mov	r3, r0
70005e12:	2b00      	cmp	r3, #0
70005e14:	d15f      	bne.n	70005ed6 <osMessageQueueNew+0xda>
70005e16:	68fb      	ldr	r3, [r7, #12]
70005e18:	2b00      	cmp	r3, #0
70005e1a:	d05c      	beq.n	70005ed6 <osMessageQueueNew+0xda>
70005e1c:	68bb      	ldr	r3, [r7, #8]
70005e1e:	2b00      	cmp	r3, #0
70005e20:	d059      	beq.n	70005ed6 <osMessageQueueNew+0xda>
    mem = -1;
70005e22:	f04f 33ff 	mov.w	r3, #4294967295
70005e26:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
70005e28:	687b      	ldr	r3, [r7, #4]
70005e2a:	2b00      	cmp	r3, #0
70005e2c:	d029      	beq.n	70005e82 <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
70005e2e:	687b      	ldr	r3, [r7, #4]
70005e30:	689b      	ldr	r3, [r3, #8]
70005e32:	2b00      	cmp	r3, #0
70005e34:	d012      	beq.n	70005e5c <osMessageQueueNew+0x60>
70005e36:	687b      	ldr	r3, [r7, #4]
70005e38:	68db      	ldr	r3, [r3, #12]
70005e3a:	2b4f      	cmp	r3, #79	@ 0x4f
70005e3c:	d90e      	bls.n	70005e5c <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
70005e3e:	687b      	ldr	r3, [r7, #4]
70005e40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
70005e42:	2b00      	cmp	r3, #0
70005e44:	d00a      	beq.n	70005e5c <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
70005e46:	687b      	ldr	r3, [r7, #4]
70005e48:	695a      	ldr	r2, [r3, #20]
70005e4a:	68fb      	ldr	r3, [r7, #12]
70005e4c:	68b9      	ldr	r1, [r7, #8]
70005e4e:	fb01 f303 	mul.w	r3, r1, r3
70005e52:	429a      	cmp	r2, r3
70005e54:	d302      	bcc.n	70005e5c <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
70005e56:	2301      	movs	r3, #1
70005e58:	613b      	str	r3, [r7, #16]
70005e5a:	e014      	b.n	70005e86 <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
70005e5c:	687b      	ldr	r3, [r7, #4]
70005e5e:	689b      	ldr	r3, [r3, #8]
70005e60:	2b00      	cmp	r3, #0
70005e62:	d110      	bne.n	70005e86 <osMessageQueueNew+0x8a>
70005e64:	687b      	ldr	r3, [r7, #4]
70005e66:	68db      	ldr	r3, [r3, #12]
70005e68:	2b00      	cmp	r3, #0
70005e6a:	d10c      	bne.n	70005e86 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
70005e6c:	687b      	ldr	r3, [r7, #4]
70005e6e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
70005e70:	2b00      	cmp	r3, #0
70005e72:	d108      	bne.n	70005e86 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
70005e74:	687b      	ldr	r3, [r7, #4]
70005e76:	695b      	ldr	r3, [r3, #20]
70005e78:	2b00      	cmp	r3, #0
70005e7a:	d104      	bne.n	70005e86 <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
70005e7c:	2300      	movs	r3, #0
70005e7e:	613b      	str	r3, [r7, #16]
70005e80:	e001      	b.n	70005e86 <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
70005e82:	2300      	movs	r3, #0
70005e84:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
70005e86:	693b      	ldr	r3, [r7, #16]
70005e88:	2b01      	cmp	r3, #1
70005e8a:	d10b      	bne.n	70005ea4 <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
70005e8c:	687b      	ldr	r3, [r7, #4]
70005e8e:	691a      	ldr	r2, [r3, #16]
70005e90:	687b      	ldr	r3, [r7, #4]
70005e92:	689b      	ldr	r3, [r3, #8]
70005e94:	2100      	movs	r1, #0
70005e96:	9100      	str	r1, [sp, #0]
70005e98:	68b9      	ldr	r1, [r7, #8]
70005e9a:	68f8      	ldr	r0, [r7, #12]
70005e9c:	f000 fe82 	bl	70006ba4 <xQueueGenericCreateStatic>
70005ea0:	6178      	str	r0, [r7, #20]
70005ea2:	e008      	b.n	70005eb6 <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
70005ea4:	693b      	ldr	r3, [r7, #16]
70005ea6:	2b00      	cmp	r3, #0
70005ea8:	d105      	bne.n	70005eb6 <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
70005eaa:	2200      	movs	r2, #0
70005eac:	68b9      	ldr	r1, [r7, #8]
70005eae:	68f8      	ldr	r0, [r7, #12]
70005eb0:	f000 fed9 	bl	70006c66 <xQueueGenericCreate>
70005eb4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
70005eb6:	697b      	ldr	r3, [r7, #20]
70005eb8:	2b00      	cmp	r3, #0
70005eba:	d00c      	beq.n	70005ed6 <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
70005ebc:	687b      	ldr	r3, [r7, #4]
70005ebe:	2b00      	cmp	r3, #0
70005ec0:	d009      	beq.n	70005ed6 <osMessageQueueNew+0xda>
70005ec2:	687b      	ldr	r3, [r7, #4]
70005ec4:	681b      	ldr	r3, [r3, #0]
70005ec6:	2b00      	cmp	r3, #0
70005ec8:	d005      	beq.n	70005ed6 <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
70005eca:	687b      	ldr	r3, [r7, #4]
70005ecc:	681b      	ldr	r3, [r3, #0]
70005ece:	4619      	mov	r1, r3
70005ed0:	6978      	ldr	r0, [r7, #20]
70005ed2:	f001 fe81 	bl	70007bd8 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
70005ed6:	697b      	ldr	r3, [r7, #20]
}
70005ed8:	4618      	mov	r0, r3
70005eda:	3718      	adds	r7, #24
70005edc:	46bd      	mov	sp, r7
70005ede:	bd80      	pop	{r7, pc}

70005ee0 <osMessageQueuePut>:
  Put a Message into a Queue or timeout if Queue is full.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
70005ee0:	b580      	push	{r7, lr}
70005ee2:	b088      	sub	sp, #32
70005ee4:	af00      	add	r7, sp, #0
70005ee6:	60f8      	str	r0, [r7, #12]
70005ee8:	60b9      	str	r1, [r7, #8]
70005eea:	603b      	str	r3, [r7, #0]
70005eec:	4613      	mov	r3, r2
70005eee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
70005ef0:	68fb      	ldr	r3, [r7, #12]
70005ef2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
70005ef4:	2300      	movs	r3, #0
70005ef6:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
70005ef8:	f7ff fbf7 	bl	700056ea <IRQ_Context>
70005efc:	4603      	mov	r3, r0
70005efe:	2b00      	cmp	r3, #0
70005f00:	d028      	beq.n	70005f54 <osMessageQueuePut+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
70005f02:	69bb      	ldr	r3, [r7, #24]
70005f04:	2b00      	cmp	r3, #0
70005f06:	d005      	beq.n	70005f14 <osMessageQueuePut+0x34>
70005f08:	68bb      	ldr	r3, [r7, #8]
70005f0a:	2b00      	cmp	r3, #0
70005f0c:	d002      	beq.n	70005f14 <osMessageQueuePut+0x34>
70005f0e:	683b      	ldr	r3, [r7, #0]
70005f10:	2b00      	cmp	r3, #0
70005f12:	d003      	beq.n	70005f1c <osMessageQueuePut+0x3c>
      stat = osErrorParameter;
70005f14:	f06f 0303 	mvn.w	r3, #3
70005f18:	61fb      	str	r3, [r7, #28]
70005f1a:	e038      	b.n	70005f8e <osMessageQueuePut+0xae>
    }
    else {
      yield = pdFALSE;
70005f1c:	2300      	movs	r3, #0
70005f1e:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
70005f20:	f107 0214 	add.w	r2, r7, #20
70005f24:	2300      	movs	r3, #0
70005f26:	68b9      	ldr	r1, [r7, #8]
70005f28:	69b8      	ldr	r0, [r7, #24]
70005f2a:	f001 f92f 	bl	7000718c <xQueueGenericSendFromISR>
70005f2e:	4603      	mov	r3, r0
70005f30:	2b01      	cmp	r3, #1
70005f32:	d003      	beq.n	70005f3c <osMessageQueuePut+0x5c>
        stat = osErrorResource;
70005f34:	f06f 0302 	mvn.w	r3, #2
70005f38:	61fb      	str	r3, [r7, #28]
70005f3a:	e028      	b.n	70005f8e <osMessageQueuePut+0xae>
      } else {
        portYIELD_FROM_ISR (yield);
70005f3c:	697b      	ldr	r3, [r7, #20]
70005f3e:	2b00      	cmp	r3, #0
70005f40:	d025      	beq.n	70005f8e <osMessageQueuePut+0xae>
70005f42:	4b15      	ldr	r3, [pc, #84]	@ (70005f98 <osMessageQueuePut+0xb8>)
70005f44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70005f48:	601a      	str	r2, [r3, #0]
70005f4a:	f3bf 8f4f 	dsb	sy
70005f4e:	f3bf 8f6f 	isb	sy
70005f52:	e01c      	b.n	70005f8e <osMessageQueuePut+0xae>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
70005f54:	69bb      	ldr	r3, [r7, #24]
70005f56:	2b00      	cmp	r3, #0
70005f58:	d002      	beq.n	70005f60 <osMessageQueuePut+0x80>
70005f5a:	68bb      	ldr	r3, [r7, #8]
70005f5c:	2b00      	cmp	r3, #0
70005f5e:	d103      	bne.n	70005f68 <osMessageQueuePut+0x88>
      stat = osErrorParameter;
70005f60:	f06f 0303 	mvn.w	r3, #3
70005f64:	61fb      	str	r3, [r7, #28]
70005f66:	e012      	b.n	70005f8e <osMessageQueuePut+0xae>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
70005f68:	2300      	movs	r3, #0
70005f6a:	683a      	ldr	r2, [r7, #0]
70005f6c:	68b9      	ldr	r1, [r7, #8]
70005f6e:	69b8      	ldr	r0, [r7, #24]
70005f70:	f001 f80a 	bl	70006f88 <xQueueGenericSend>
70005f74:	4603      	mov	r3, r0
70005f76:	2b01      	cmp	r3, #1
70005f78:	d009      	beq.n	70005f8e <osMessageQueuePut+0xae>
        if (timeout != 0U) {
70005f7a:	683b      	ldr	r3, [r7, #0]
70005f7c:	2b00      	cmp	r3, #0
70005f7e:	d003      	beq.n	70005f88 <osMessageQueuePut+0xa8>
          stat = osErrorTimeout;
70005f80:	f06f 0301 	mvn.w	r3, #1
70005f84:	61fb      	str	r3, [r7, #28]
70005f86:	e002      	b.n	70005f8e <osMessageQueuePut+0xae>
        } else {
          stat = osErrorResource;
70005f88:	f06f 0302 	mvn.w	r3, #2
70005f8c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
70005f8e:	69fb      	ldr	r3, [r7, #28]
}
70005f90:	4618      	mov	r0, r3
70005f92:	3720      	adds	r7, #32
70005f94:	46bd      	mov	sp, r7
70005f96:	bd80      	pop	{r7, pc}
70005f98:	e000ed04 	.word	0xe000ed04

70005f9c <osMessageQueueGet>:
  Get a Message from a Queue or timeout if Queue is empty.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
70005f9c:	b580      	push	{r7, lr}
70005f9e:	b088      	sub	sp, #32
70005fa0:	af00      	add	r7, sp, #0
70005fa2:	60f8      	str	r0, [r7, #12]
70005fa4:	60b9      	str	r1, [r7, #8]
70005fa6:	607a      	str	r2, [r7, #4]
70005fa8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
70005faa:	68fb      	ldr	r3, [r7, #12]
70005fac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
70005fae:	2300      	movs	r3, #0
70005fb0:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
70005fb2:	f7ff fb9a 	bl	700056ea <IRQ_Context>
70005fb6:	4603      	mov	r3, r0
70005fb8:	2b00      	cmp	r3, #0
70005fba:	d028      	beq.n	7000600e <osMessageQueueGet+0x72>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
70005fbc:	69bb      	ldr	r3, [r7, #24]
70005fbe:	2b00      	cmp	r3, #0
70005fc0:	d005      	beq.n	70005fce <osMessageQueueGet+0x32>
70005fc2:	68bb      	ldr	r3, [r7, #8]
70005fc4:	2b00      	cmp	r3, #0
70005fc6:	d002      	beq.n	70005fce <osMessageQueueGet+0x32>
70005fc8:	683b      	ldr	r3, [r7, #0]
70005fca:	2b00      	cmp	r3, #0
70005fcc:	d003      	beq.n	70005fd6 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
70005fce:	f06f 0303 	mvn.w	r3, #3
70005fd2:	61fb      	str	r3, [r7, #28]
70005fd4:	e037      	b.n	70006046 <osMessageQueueGet+0xaa>
    }
    else {
      yield = pdFALSE;
70005fd6:	2300      	movs	r3, #0
70005fd8:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
70005fda:	f107 0314 	add.w	r3, r7, #20
70005fde:	461a      	mov	r2, r3
70005fe0:	68b9      	ldr	r1, [r7, #8]
70005fe2:	69b8      	ldr	r0, [r7, #24]
70005fe4:	f001 fc12 	bl	7000780c <xQueueReceiveFromISR>
70005fe8:	4603      	mov	r3, r0
70005fea:	2b01      	cmp	r3, #1
70005fec:	d003      	beq.n	70005ff6 <osMessageQueueGet+0x5a>
        stat = osErrorResource;
70005fee:	f06f 0302 	mvn.w	r3, #2
70005ff2:	61fb      	str	r3, [r7, #28]
70005ff4:	e027      	b.n	70006046 <osMessageQueueGet+0xaa>
      } else {
        portYIELD_FROM_ISR (yield);
70005ff6:	697b      	ldr	r3, [r7, #20]
70005ff8:	2b00      	cmp	r3, #0
70005ffa:	d024      	beq.n	70006046 <osMessageQueueGet+0xaa>
70005ffc:	4b14      	ldr	r3, [pc, #80]	@ (70006050 <osMessageQueueGet+0xb4>)
70005ffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70006002:	601a      	str	r2, [r3, #0]
70006004:	f3bf 8f4f 	dsb	sy
70006008:	f3bf 8f6f 	isb	sy
7000600c:	e01b      	b.n	70006046 <osMessageQueueGet+0xaa>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
7000600e:	69bb      	ldr	r3, [r7, #24]
70006010:	2b00      	cmp	r3, #0
70006012:	d002      	beq.n	7000601a <osMessageQueueGet+0x7e>
70006014:	68bb      	ldr	r3, [r7, #8]
70006016:	2b00      	cmp	r3, #0
70006018:	d103      	bne.n	70006022 <osMessageQueueGet+0x86>
      stat = osErrorParameter;
7000601a:	f06f 0303 	mvn.w	r3, #3
7000601e:	61fb      	str	r3, [r7, #28]
70006020:	e011      	b.n	70006046 <osMessageQueueGet+0xaa>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
70006022:	683a      	ldr	r2, [r7, #0]
70006024:	68b9      	ldr	r1, [r7, #8]
70006026:	69b8      	ldr	r0, [r7, #24]
70006028:	f001 fa0e 	bl	70007448 <xQueueReceive>
7000602c:	4603      	mov	r3, r0
7000602e:	2b01      	cmp	r3, #1
70006030:	d009      	beq.n	70006046 <osMessageQueueGet+0xaa>
        if (timeout != 0U) {
70006032:	683b      	ldr	r3, [r7, #0]
70006034:	2b00      	cmp	r3, #0
70006036:	d003      	beq.n	70006040 <osMessageQueueGet+0xa4>
          stat = osErrorTimeout;
70006038:	f06f 0301 	mvn.w	r3, #1
7000603c:	61fb      	str	r3, [r7, #28]
7000603e:	e002      	b.n	70006046 <osMessageQueueGet+0xaa>
        } else {
          stat = osErrorResource;
70006040:	f06f 0302 	mvn.w	r3, #2
70006044:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
70006046:	69fb      	ldr	r3, [r7, #28]
}
70006048:	4618      	mov	r0, r3
7000604a:	3720      	adds	r7, #32
7000604c:	46bd      	mov	sp, r7
7000604e:	bd80      	pop	{r7, pc}
70006050:	e000ed04 	.word	0xe000ed04

70006054 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
70006054:	b480      	push	{r7}
70006056:	b085      	sub	sp, #20
70006058:	af00      	add	r7, sp, #0
7000605a:	60f8      	str	r0, [r7, #12]
7000605c:	60b9      	str	r1, [r7, #8]
7000605e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
70006060:	68fb      	ldr	r3, [r7, #12]
70006062:	4a07      	ldr	r2, [pc, #28]	@ (70006080 <vApplicationGetIdleTaskMemory+0x2c>)
70006064:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
70006066:	68bb      	ldr	r3, [r7, #8]
70006068:	4a06      	ldr	r2, [pc, #24]	@ (70006084 <vApplicationGetIdleTaskMemory+0x30>)
7000606a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
7000606c:	687b      	ldr	r3, [r7, #4]
7000606e:	f44f 7280 	mov.w	r2, #256	@ 0x100
70006072:	601a      	str	r2, [r3, #0]
}
70006074:	bf00      	nop
70006076:	3714      	adds	r7, #20
70006078:	46bd      	mov	sp, r7
7000607a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000607e:	4770      	bx	lr
70006080:	24000294 	.word	0x24000294
70006084:	2400033c 	.word	0x2400033c

70006088 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
70006088:	b480      	push	{r7}
7000608a:	b085      	sub	sp, #20
7000608c:	af00      	add	r7, sp, #0
7000608e:	60f8      	str	r0, [r7, #12]
70006090:	60b9      	str	r1, [r7, #8]
70006092:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
70006094:	68fb      	ldr	r3, [r7, #12]
70006096:	4a07      	ldr	r2, [pc, #28]	@ (700060b4 <vApplicationGetTimerTaskMemory+0x2c>)
70006098:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
7000609a:	68bb      	ldr	r3, [r7, #8]
7000609c:	4a06      	ldr	r2, [pc, #24]	@ (700060b8 <vApplicationGetTimerTaskMemory+0x30>)
7000609e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
700060a0:	687b      	ldr	r3, [r7, #4]
700060a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
700060a6:	601a      	str	r2, [r3, #0]
}
700060a8:	bf00      	nop
700060aa:	3714      	adds	r7, #20
700060ac:	46bd      	mov	sp, r7
700060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
700060b2:	4770      	bx	lr
700060b4:	2400073c 	.word	0x2400073c
700060b8:	240007e4 	.word	0x240007e4

700060bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
700060bc:	b580      	push	{r7, lr}
700060be:	b08a      	sub	sp, #40	@ 0x28
700060c0:	af00      	add	r7, sp, #0
700060c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
700060c4:	2300      	movs	r3, #0
700060c6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
700060c8:	f002 f9ce 	bl	70008468 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
700060cc:	4b54      	ldr	r3, [pc, #336]	@ (70006220 <pvPortMalloc+0x164>)
700060ce:	681b      	ldr	r3, [r3, #0]
700060d0:	2b00      	cmp	r3, #0
700060d2:	d101      	bne.n	700060d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
700060d4:	f000 f90c 	bl	700062f0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
700060d8:	687b      	ldr	r3, [r7, #4]
700060da:	2b00      	cmp	r3, #0
700060dc:	d012      	beq.n	70006104 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
700060de:	2208      	movs	r2, #8
700060e0:	687b      	ldr	r3, [r7, #4]
700060e2:	f003 0307 	and.w	r3, r3, #7
700060e6:	1ad3      	subs	r3, r2, r3
700060e8:	3308      	adds	r3, #8
700060ea:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
700060ec:	69bb      	ldr	r3, [r7, #24]
700060ee:	43db      	mvns	r3, r3
700060f0:	687a      	ldr	r2, [r7, #4]
700060f2:	429a      	cmp	r2, r3
700060f4:	d804      	bhi.n	70006100 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
700060f6:	687a      	ldr	r2, [r7, #4]
700060f8:	69bb      	ldr	r3, [r7, #24]
700060fa:	4413      	add	r3, r2
700060fc:	607b      	str	r3, [r7, #4]
700060fe:	e001      	b.n	70006104 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
70006100:	2300      	movs	r3, #0
70006102:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
70006104:	687b      	ldr	r3, [r7, #4]
70006106:	2b00      	cmp	r3, #0
70006108:	db71      	blt.n	700061ee <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
7000610a:	687b      	ldr	r3, [r7, #4]
7000610c:	2b00      	cmp	r3, #0
7000610e:	d06e      	beq.n	700061ee <pvPortMalloc+0x132>
70006110:	4b44      	ldr	r3, [pc, #272]	@ (70006224 <pvPortMalloc+0x168>)
70006112:	681b      	ldr	r3, [r3, #0]
70006114:	687a      	ldr	r2, [r7, #4]
70006116:	429a      	cmp	r2, r3
70006118:	d869      	bhi.n	700061ee <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
7000611a:	4b43      	ldr	r3, [pc, #268]	@ (70006228 <pvPortMalloc+0x16c>)
7000611c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
7000611e:	4b42      	ldr	r3, [pc, #264]	@ (70006228 <pvPortMalloc+0x16c>)
70006120:	681b      	ldr	r3, [r3, #0]
70006122:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
70006124:	e004      	b.n	70006130 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
70006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70006128:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
7000612a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000612c:	681b      	ldr	r3, [r3, #0]
7000612e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
70006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70006132:	685b      	ldr	r3, [r3, #4]
70006134:	687a      	ldr	r2, [r7, #4]
70006136:	429a      	cmp	r2, r3
70006138:	d903      	bls.n	70006142 <pvPortMalloc+0x86>
7000613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000613c:	681b      	ldr	r3, [r3, #0]
7000613e:	2b00      	cmp	r3, #0
70006140:	d1f1      	bne.n	70006126 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
70006142:	4b37      	ldr	r3, [pc, #220]	@ (70006220 <pvPortMalloc+0x164>)
70006144:	681b      	ldr	r3, [r3, #0]
70006146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70006148:	429a      	cmp	r2, r3
7000614a:	d050      	beq.n	700061ee <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
7000614c:	6a3b      	ldr	r3, [r7, #32]
7000614e:	681b      	ldr	r3, [r3, #0]
70006150:	2208      	movs	r2, #8
70006152:	4413      	add	r3, r2
70006154:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
70006156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70006158:	681a      	ldr	r2, [r3, #0]
7000615a:	6a3b      	ldr	r3, [r7, #32]
7000615c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
7000615e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70006160:	685a      	ldr	r2, [r3, #4]
70006162:	687b      	ldr	r3, [r7, #4]
70006164:	1ad2      	subs	r2, r2, r3
70006166:	2308      	movs	r3, #8
70006168:	005b      	lsls	r3, r3, #1
7000616a:	429a      	cmp	r2, r3
7000616c:	d920      	bls.n	700061b0 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
7000616e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70006170:	687b      	ldr	r3, [r7, #4]
70006172:	4413      	add	r3, r2
70006174:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
70006176:	697b      	ldr	r3, [r7, #20]
70006178:	f003 0307 	and.w	r3, r3, #7
7000617c:	2b00      	cmp	r3, #0
7000617e:	d00b      	beq.n	70006198 <pvPortMalloc+0xdc>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
70006180:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006184:	f383 8811 	msr	BASEPRI, r3
70006188:	f3bf 8f6f 	isb	sy
7000618c:	f3bf 8f4f 	dsb	sy
70006190:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
70006192:	bf00      	nop
70006194:	bf00      	nop
70006196:	e7fd      	b.n	70006194 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
70006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000619a:	685a      	ldr	r2, [r3, #4]
7000619c:	687b      	ldr	r3, [r7, #4]
7000619e:	1ad2      	subs	r2, r2, r3
700061a0:	697b      	ldr	r3, [r7, #20]
700061a2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
700061a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700061a6:	687a      	ldr	r2, [r7, #4]
700061a8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
700061aa:	6978      	ldr	r0, [r7, #20]
700061ac:	f000 f8fc 	bl	700063a8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
700061b0:	4b1c      	ldr	r3, [pc, #112]	@ (70006224 <pvPortMalloc+0x168>)
700061b2:	681a      	ldr	r2, [r3, #0]
700061b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700061b6:	685b      	ldr	r3, [r3, #4]
700061b8:	1ad3      	subs	r3, r2, r3
700061ba:	4a1a      	ldr	r2, [pc, #104]	@ (70006224 <pvPortMalloc+0x168>)
700061bc:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
700061be:	4b19      	ldr	r3, [pc, #100]	@ (70006224 <pvPortMalloc+0x168>)
700061c0:	681a      	ldr	r2, [r3, #0]
700061c2:	4b1a      	ldr	r3, [pc, #104]	@ (7000622c <pvPortMalloc+0x170>)
700061c4:	681b      	ldr	r3, [r3, #0]
700061c6:	429a      	cmp	r2, r3
700061c8:	d203      	bcs.n	700061d2 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
700061ca:	4b16      	ldr	r3, [pc, #88]	@ (70006224 <pvPortMalloc+0x168>)
700061cc:	681b      	ldr	r3, [r3, #0]
700061ce:	4a17      	ldr	r2, [pc, #92]	@ (7000622c <pvPortMalloc+0x170>)
700061d0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
700061d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700061d4:	685b      	ldr	r3, [r3, #4]
700061d6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
700061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700061dc:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
700061de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700061e0:	2200      	movs	r2, #0
700061e2:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
700061e4:	4b12      	ldr	r3, [pc, #72]	@ (70006230 <pvPortMalloc+0x174>)
700061e6:	681b      	ldr	r3, [r3, #0]
700061e8:	3301      	adds	r3, #1
700061ea:	4a11      	ldr	r2, [pc, #68]	@ (70006230 <pvPortMalloc+0x174>)
700061ec:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
700061ee:	f002 f949 	bl	70008484 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
700061f2:	69fb      	ldr	r3, [r7, #28]
700061f4:	f003 0307 	and.w	r3, r3, #7
700061f8:	2b00      	cmp	r3, #0
700061fa:	d00b      	beq.n	70006214 <pvPortMalloc+0x158>
        __asm volatile
700061fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006200:	f383 8811 	msr	BASEPRI, r3
70006204:	f3bf 8f6f 	isb	sy
70006208:	f3bf 8f4f 	dsb	sy
7000620c:	60fb      	str	r3, [r7, #12]
    }
7000620e:	bf00      	nop
70006210:	bf00      	nop
70006212:	e7fd      	b.n	70006210 <pvPortMalloc+0x154>
    return pvReturn;
70006214:	69fb      	ldr	r3, [r7, #28]
}
70006216:	4618      	mov	r0, r3
70006218:	3728      	adds	r7, #40	@ 0x28
7000621a:	46bd      	mov	sp, r7
7000621c:	bd80      	pop	{r7, pc}
7000621e:	bf00      	nop
70006220:	24004bec 	.word	0x24004bec
70006224:	24004bf0 	.word	0x24004bf0
70006228:	24004be4 	.word	0x24004be4
7000622c:	24004bf4 	.word	0x24004bf4
70006230:	24004bf8 	.word	0x24004bf8

70006234 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
70006234:	b580      	push	{r7, lr}
70006236:	b086      	sub	sp, #24
70006238:	af00      	add	r7, sp, #0
7000623a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
7000623c:	687b      	ldr	r3, [r7, #4]
7000623e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
70006240:	687b      	ldr	r3, [r7, #4]
70006242:	2b00      	cmp	r3, #0
70006244:	d04b      	beq.n	700062de <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
70006246:	2308      	movs	r3, #8
70006248:	425b      	negs	r3, r3
7000624a:	697a      	ldr	r2, [r7, #20]
7000624c:	4413      	add	r3, r2
7000624e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
70006250:	697b      	ldr	r3, [r7, #20]
70006252:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
70006254:	693b      	ldr	r3, [r7, #16]
70006256:	685b      	ldr	r3, [r3, #4]
70006258:	2b00      	cmp	r3, #0
7000625a:	db0b      	blt.n	70006274 <vPortFree+0x40>
        __asm volatile
7000625c:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006260:	f383 8811 	msr	BASEPRI, r3
70006264:	f3bf 8f6f 	isb	sy
70006268:	f3bf 8f4f 	dsb	sy
7000626c:	60fb      	str	r3, [r7, #12]
    }
7000626e:	bf00      	nop
70006270:	bf00      	nop
70006272:	e7fd      	b.n	70006270 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
70006274:	693b      	ldr	r3, [r7, #16]
70006276:	681b      	ldr	r3, [r3, #0]
70006278:	2b00      	cmp	r3, #0
7000627a:	d00b      	beq.n	70006294 <vPortFree+0x60>
        __asm volatile
7000627c:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006280:	f383 8811 	msr	BASEPRI, r3
70006284:	f3bf 8f6f 	isb	sy
70006288:	f3bf 8f4f 	dsb	sy
7000628c:	60bb      	str	r3, [r7, #8]
    }
7000628e:	bf00      	nop
70006290:	bf00      	nop
70006292:	e7fd      	b.n	70006290 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
70006294:	693b      	ldr	r3, [r7, #16]
70006296:	685b      	ldr	r3, [r3, #4]
70006298:	0fdb      	lsrs	r3, r3, #31
7000629a:	f003 0301 	and.w	r3, r3, #1
7000629e:	b2db      	uxtb	r3, r3
700062a0:	2b00      	cmp	r3, #0
700062a2:	d01c      	beq.n	700062de <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
700062a4:	693b      	ldr	r3, [r7, #16]
700062a6:	681b      	ldr	r3, [r3, #0]
700062a8:	2b00      	cmp	r3, #0
700062aa:	d118      	bne.n	700062de <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
700062ac:	693b      	ldr	r3, [r7, #16]
700062ae:	685b      	ldr	r3, [r3, #4]
700062b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
700062b4:	693b      	ldr	r3, [r7, #16]
700062b6:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
700062b8:	f002 f8d6 	bl	70008468 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
700062bc:	693b      	ldr	r3, [r7, #16]
700062be:	685a      	ldr	r2, [r3, #4]
700062c0:	4b09      	ldr	r3, [pc, #36]	@ (700062e8 <vPortFree+0xb4>)
700062c2:	681b      	ldr	r3, [r3, #0]
700062c4:	4413      	add	r3, r2
700062c6:	4a08      	ldr	r2, [pc, #32]	@ (700062e8 <vPortFree+0xb4>)
700062c8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
700062ca:	6938      	ldr	r0, [r7, #16]
700062cc:	f000 f86c 	bl	700063a8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
700062d0:	4b06      	ldr	r3, [pc, #24]	@ (700062ec <vPortFree+0xb8>)
700062d2:	681b      	ldr	r3, [r3, #0]
700062d4:	3301      	adds	r3, #1
700062d6:	4a05      	ldr	r2, [pc, #20]	@ (700062ec <vPortFree+0xb8>)
700062d8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
700062da:	f002 f8d3 	bl	70008484 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
700062de:	bf00      	nop
700062e0:	3718      	adds	r7, #24
700062e2:	46bd      	mov	sp, r7
700062e4:	bd80      	pop	{r7, pc}
700062e6:	bf00      	nop
700062e8:	24004bf0 	.word	0x24004bf0
700062ec:	24004bfc 	.word	0x24004bfc

700062f0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
700062f0:	b480      	push	{r7}
700062f2:	b085      	sub	sp, #20
700062f4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
700062f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
700062fa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
700062fc:	4b25      	ldr	r3, [pc, #148]	@ (70006394 <prvHeapInit+0xa4>)
700062fe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
70006300:	68fb      	ldr	r3, [r7, #12]
70006302:	f003 0307 	and.w	r3, r3, #7
70006306:	2b00      	cmp	r3, #0
70006308:	d00c      	beq.n	70006324 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
7000630a:	68fb      	ldr	r3, [r7, #12]
7000630c:	3307      	adds	r3, #7
7000630e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
70006310:	68fb      	ldr	r3, [r7, #12]
70006312:	f023 0307 	bic.w	r3, r3, #7
70006316:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
70006318:	68ba      	ldr	r2, [r7, #8]
7000631a:	68fb      	ldr	r3, [r7, #12]
7000631c:	1ad3      	subs	r3, r2, r3
7000631e:	4a1d      	ldr	r2, [pc, #116]	@ (70006394 <prvHeapInit+0xa4>)
70006320:	4413      	add	r3, r2
70006322:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
70006324:	68fb      	ldr	r3, [r7, #12]
70006326:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
70006328:	4a1b      	ldr	r2, [pc, #108]	@ (70006398 <prvHeapInit+0xa8>)
7000632a:	687b      	ldr	r3, [r7, #4]
7000632c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
7000632e:	4b1a      	ldr	r3, [pc, #104]	@ (70006398 <prvHeapInit+0xa8>)
70006330:	2200      	movs	r2, #0
70006332:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
70006334:	687b      	ldr	r3, [r7, #4]
70006336:	68ba      	ldr	r2, [r7, #8]
70006338:	4413      	add	r3, r2
7000633a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
7000633c:	2208      	movs	r2, #8
7000633e:	68fb      	ldr	r3, [r7, #12]
70006340:	1a9b      	subs	r3, r3, r2
70006342:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
70006344:	68fb      	ldr	r3, [r7, #12]
70006346:	f023 0307 	bic.w	r3, r3, #7
7000634a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
7000634c:	68fb      	ldr	r3, [r7, #12]
7000634e:	4a13      	ldr	r2, [pc, #76]	@ (7000639c <prvHeapInit+0xac>)
70006350:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
70006352:	4b12      	ldr	r3, [pc, #72]	@ (7000639c <prvHeapInit+0xac>)
70006354:	681b      	ldr	r3, [r3, #0]
70006356:	2200      	movs	r2, #0
70006358:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
7000635a:	4b10      	ldr	r3, [pc, #64]	@ (7000639c <prvHeapInit+0xac>)
7000635c:	681b      	ldr	r3, [r3, #0]
7000635e:	2200      	movs	r2, #0
70006360:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
70006362:	687b      	ldr	r3, [r7, #4]
70006364:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
70006366:	683b      	ldr	r3, [r7, #0]
70006368:	68fa      	ldr	r2, [r7, #12]
7000636a:	1ad2      	subs	r2, r2, r3
7000636c:	683b      	ldr	r3, [r7, #0]
7000636e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
70006370:	4b0a      	ldr	r3, [pc, #40]	@ (7000639c <prvHeapInit+0xac>)
70006372:	681a      	ldr	r2, [r3, #0]
70006374:	683b      	ldr	r3, [r7, #0]
70006376:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
70006378:	683b      	ldr	r3, [r7, #0]
7000637a:	685b      	ldr	r3, [r3, #4]
7000637c:	4a08      	ldr	r2, [pc, #32]	@ (700063a0 <prvHeapInit+0xb0>)
7000637e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
70006380:	683b      	ldr	r3, [r7, #0]
70006382:	685b      	ldr	r3, [r3, #4]
70006384:	4a07      	ldr	r2, [pc, #28]	@ (700063a4 <prvHeapInit+0xb4>)
70006386:	6013      	str	r3, [r2, #0]
}
70006388:	bf00      	nop
7000638a:	3714      	adds	r7, #20
7000638c:	46bd      	mov	sp, r7
7000638e:	f85d 7b04 	ldr.w	r7, [sp], #4
70006392:	4770      	bx	lr
70006394:	24000fe4 	.word	0x24000fe4
70006398:	24004be4 	.word	0x24004be4
7000639c:	24004bec 	.word	0x24004bec
700063a0:	24004bf4 	.word	0x24004bf4
700063a4:	24004bf0 	.word	0x24004bf0

700063a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
700063a8:	b480      	push	{r7}
700063aa:	b085      	sub	sp, #20
700063ac:	af00      	add	r7, sp, #0
700063ae:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
700063b0:	4b28      	ldr	r3, [pc, #160]	@ (70006454 <prvInsertBlockIntoFreeList+0xac>)
700063b2:	60fb      	str	r3, [r7, #12]
700063b4:	e002      	b.n	700063bc <prvInsertBlockIntoFreeList+0x14>
700063b6:	68fb      	ldr	r3, [r7, #12]
700063b8:	681b      	ldr	r3, [r3, #0]
700063ba:	60fb      	str	r3, [r7, #12]
700063bc:	68fb      	ldr	r3, [r7, #12]
700063be:	681b      	ldr	r3, [r3, #0]
700063c0:	687a      	ldr	r2, [r7, #4]
700063c2:	429a      	cmp	r2, r3
700063c4:	d8f7      	bhi.n	700063b6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
700063c6:	68fb      	ldr	r3, [r7, #12]
700063c8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
700063ca:	68fb      	ldr	r3, [r7, #12]
700063cc:	685b      	ldr	r3, [r3, #4]
700063ce:	68ba      	ldr	r2, [r7, #8]
700063d0:	4413      	add	r3, r2
700063d2:	687a      	ldr	r2, [r7, #4]
700063d4:	429a      	cmp	r2, r3
700063d6:	d108      	bne.n	700063ea <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
700063d8:	68fb      	ldr	r3, [r7, #12]
700063da:	685a      	ldr	r2, [r3, #4]
700063dc:	687b      	ldr	r3, [r7, #4]
700063de:	685b      	ldr	r3, [r3, #4]
700063e0:	441a      	add	r2, r3
700063e2:	68fb      	ldr	r3, [r7, #12]
700063e4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
700063e6:	68fb      	ldr	r3, [r7, #12]
700063e8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
700063ea:	687b      	ldr	r3, [r7, #4]
700063ec:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
700063ee:	687b      	ldr	r3, [r7, #4]
700063f0:	685b      	ldr	r3, [r3, #4]
700063f2:	68ba      	ldr	r2, [r7, #8]
700063f4:	441a      	add	r2, r3
700063f6:	68fb      	ldr	r3, [r7, #12]
700063f8:	681b      	ldr	r3, [r3, #0]
700063fa:	429a      	cmp	r2, r3
700063fc:	d118      	bne.n	70006430 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
700063fe:	68fb      	ldr	r3, [r7, #12]
70006400:	681a      	ldr	r2, [r3, #0]
70006402:	4b15      	ldr	r3, [pc, #84]	@ (70006458 <prvInsertBlockIntoFreeList+0xb0>)
70006404:	681b      	ldr	r3, [r3, #0]
70006406:	429a      	cmp	r2, r3
70006408:	d00d      	beq.n	70006426 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
7000640a:	687b      	ldr	r3, [r7, #4]
7000640c:	685a      	ldr	r2, [r3, #4]
7000640e:	68fb      	ldr	r3, [r7, #12]
70006410:	681b      	ldr	r3, [r3, #0]
70006412:	685b      	ldr	r3, [r3, #4]
70006414:	441a      	add	r2, r3
70006416:	687b      	ldr	r3, [r7, #4]
70006418:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
7000641a:	68fb      	ldr	r3, [r7, #12]
7000641c:	681b      	ldr	r3, [r3, #0]
7000641e:	681a      	ldr	r2, [r3, #0]
70006420:	687b      	ldr	r3, [r7, #4]
70006422:	601a      	str	r2, [r3, #0]
70006424:	e008      	b.n	70006438 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
70006426:	4b0c      	ldr	r3, [pc, #48]	@ (70006458 <prvInsertBlockIntoFreeList+0xb0>)
70006428:	681a      	ldr	r2, [r3, #0]
7000642a:	687b      	ldr	r3, [r7, #4]
7000642c:	601a      	str	r2, [r3, #0]
7000642e:	e003      	b.n	70006438 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
70006430:	68fb      	ldr	r3, [r7, #12]
70006432:	681a      	ldr	r2, [r3, #0]
70006434:	687b      	ldr	r3, [r7, #4]
70006436:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
70006438:	68fa      	ldr	r2, [r7, #12]
7000643a:	687b      	ldr	r3, [r7, #4]
7000643c:	429a      	cmp	r2, r3
7000643e:	d002      	beq.n	70006446 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
70006440:	68fb      	ldr	r3, [r7, #12]
70006442:	687a      	ldr	r2, [r7, #4]
70006444:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
70006446:	bf00      	nop
70006448:	3714      	adds	r7, #20
7000644a:	46bd      	mov	sp, r7
7000644c:	f85d 7b04 	ldr.w	r7, [sp], #4
70006450:	4770      	bx	lr
70006452:	bf00      	nop
70006454:	24004be4 	.word	0x24004be4
70006458:	24004bec 	.word	0x24004bec

7000645c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
7000645c:	b480      	push	{r7}
7000645e:	b083      	sub	sp, #12
70006460:	af00      	add	r7, sp, #0
70006462:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
70006464:	687b      	ldr	r3, [r7, #4]
70006466:	f103 0208 	add.w	r2, r3, #8
7000646a:	687b      	ldr	r3, [r7, #4]
7000646c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
7000646e:	687b      	ldr	r3, [r7, #4]
70006470:	f04f 32ff 	mov.w	r2, #4294967295
70006474:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
70006476:	687b      	ldr	r3, [r7, #4]
70006478:	f103 0208 	add.w	r2, r3, #8
7000647c:	687b      	ldr	r3, [r7, #4]
7000647e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
70006480:	687b      	ldr	r3, [r7, #4]
70006482:	f103 0208 	add.w	r2, r3, #8
70006486:	687b      	ldr	r3, [r7, #4]
70006488:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
7000648a:	687b      	ldr	r3, [r7, #4]
7000648c:	2200      	movs	r2, #0
7000648e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
70006490:	bf00      	nop
70006492:	370c      	adds	r7, #12
70006494:	46bd      	mov	sp, r7
70006496:	f85d 7b04 	ldr.w	r7, [sp], #4
7000649a:	4770      	bx	lr

7000649c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
7000649c:	b480      	push	{r7}
7000649e:	b083      	sub	sp, #12
700064a0:	af00      	add	r7, sp, #0
700064a2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
700064a4:	687b      	ldr	r3, [r7, #4]
700064a6:	2200      	movs	r2, #0
700064a8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
700064aa:	bf00      	nop
700064ac:	370c      	adds	r7, #12
700064ae:	46bd      	mov	sp, r7
700064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
700064b4:	4770      	bx	lr

700064b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
700064b6:	b480      	push	{r7}
700064b8:	b085      	sub	sp, #20
700064ba:	af00      	add	r7, sp, #0
700064bc:	6078      	str	r0, [r7, #4]
700064be:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
700064c0:	687b      	ldr	r3, [r7, #4]
700064c2:	685b      	ldr	r3, [r3, #4]
700064c4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
700064c6:	683b      	ldr	r3, [r7, #0]
700064c8:	68fa      	ldr	r2, [r7, #12]
700064ca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
700064cc:	68fb      	ldr	r3, [r7, #12]
700064ce:	689a      	ldr	r2, [r3, #8]
700064d0:	683b      	ldr	r3, [r7, #0]
700064d2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
700064d4:	68fb      	ldr	r3, [r7, #12]
700064d6:	689b      	ldr	r3, [r3, #8]
700064d8:	683a      	ldr	r2, [r7, #0]
700064da:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
700064dc:	68fb      	ldr	r3, [r7, #12]
700064de:	683a      	ldr	r2, [r7, #0]
700064e0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
700064e2:	683b      	ldr	r3, [r7, #0]
700064e4:	687a      	ldr	r2, [r7, #4]
700064e6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
700064e8:	687b      	ldr	r3, [r7, #4]
700064ea:	681b      	ldr	r3, [r3, #0]
700064ec:	1c5a      	adds	r2, r3, #1
700064ee:	687b      	ldr	r3, [r7, #4]
700064f0:	601a      	str	r2, [r3, #0]
}
700064f2:	bf00      	nop
700064f4:	3714      	adds	r7, #20
700064f6:	46bd      	mov	sp, r7
700064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
700064fc:	4770      	bx	lr

700064fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
700064fe:	b480      	push	{r7}
70006500:	b085      	sub	sp, #20
70006502:	af00      	add	r7, sp, #0
70006504:	6078      	str	r0, [r7, #4]
70006506:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
70006508:	683b      	ldr	r3, [r7, #0]
7000650a:	681b      	ldr	r3, [r3, #0]
7000650c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
7000650e:	68bb      	ldr	r3, [r7, #8]
70006510:	f1b3 3fff 	cmp.w	r3, #4294967295
70006514:	d103      	bne.n	7000651e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
70006516:	687b      	ldr	r3, [r7, #4]
70006518:	691b      	ldr	r3, [r3, #16]
7000651a:	60fb      	str	r3, [r7, #12]
7000651c:	e00c      	b.n	70006538 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
7000651e:	687b      	ldr	r3, [r7, #4]
70006520:	3308      	adds	r3, #8
70006522:	60fb      	str	r3, [r7, #12]
70006524:	e002      	b.n	7000652c <vListInsert+0x2e>
70006526:	68fb      	ldr	r3, [r7, #12]
70006528:	685b      	ldr	r3, [r3, #4]
7000652a:	60fb      	str	r3, [r7, #12]
7000652c:	68fb      	ldr	r3, [r7, #12]
7000652e:	685b      	ldr	r3, [r3, #4]
70006530:	681b      	ldr	r3, [r3, #0]
70006532:	68ba      	ldr	r2, [r7, #8]
70006534:	429a      	cmp	r2, r3
70006536:	d2f6      	bcs.n	70006526 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
70006538:	68fb      	ldr	r3, [r7, #12]
7000653a:	685a      	ldr	r2, [r3, #4]
7000653c:	683b      	ldr	r3, [r7, #0]
7000653e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
70006540:	683b      	ldr	r3, [r7, #0]
70006542:	685b      	ldr	r3, [r3, #4]
70006544:	683a      	ldr	r2, [r7, #0]
70006546:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
70006548:	683b      	ldr	r3, [r7, #0]
7000654a:	68fa      	ldr	r2, [r7, #12]
7000654c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
7000654e:	68fb      	ldr	r3, [r7, #12]
70006550:	683a      	ldr	r2, [r7, #0]
70006552:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
70006554:	683b      	ldr	r3, [r7, #0]
70006556:	687a      	ldr	r2, [r7, #4]
70006558:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
7000655a:	687b      	ldr	r3, [r7, #4]
7000655c:	681b      	ldr	r3, [r3, #0]
7000655e:	1c5a      	adds	r2, r3, #1
70006560:	687b      	ldr	r3, [r7, #4]
70006562:	601a      	str	r2, [r3, #0]
}
70006564:	bf00      	nop
70006566:	3714      	adds	r7, #20
70006568:	46bd      	mov	sp, r7
7000656a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000656e:	4770      	bx	lr

70006570 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
70006570:	b480      	push	{r7}
70006572:	b085      	sub	sp, #20
70006574:	af00      	add	r7, sp, #0
70006576:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
70006578:	687b      	ldr	r3, [r7, #4]
7000657a:	691b      	ldr	r3, [r3, #16]
7000657c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
7000657e:	687b      	ldr	r3, [r7, #4]
70006580:	685b      	ldr	r3, [r3, #4]
70006582:	687a      	ldr	r2, [r7, #4]
70006584:	6892      	ldr	r2, [r2, #8]
70006586:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
70006588:	687b      	ldr	r3, [r7, #4]
7000658a:	689b      	ldr	r3, [r3, #8]
7000658c:	687a      	ldr	r2, [r7, #4]
7000658e:	6852      	ldr	r2, [r2, #4]
70006590:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
70006592:	68fb      	ldr	r3, [r7, #12]
70006594:	685b      	ldr	r3, [r3, #4]
70006596:	687a      	ldr	r2, [r7, #4]
70006598:	429a      	cmp	r2, r3
7000659a:	d103      	bne.n	700065a4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
7000659c:	687b      	ldr	r3, [r7, #4]
7000659e:	689a      	ldr	r2, [r3, #8]
700065a0:	68fb      	ldr	r3, [r7, #12]
700065a2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
700065a4:	687b      	ldr	r3, [r7, #4]
700065a6:	2200      	movs	r2, #0
700065a8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
700065aa:	68fb      	ldr	r3, [r7, #12]
700065ac:	681b      	ldr	r3, [r3, #0]
700065ae:	1e5a      	subs	r2, r3, #1
700065b0:	68fb      	ldr	r3, [r7, #12]
700065b2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
700065b4:	68fb      	ldr	r3, [r7, #12]
700065b6:	681b      	ldr	r3, [r3, #0]
}
700065b8:	4618      	mov	r0, r3
700065ba:	3714      	adds	r7, #20
700065bc:	46bd      	mov	sp, r7
700065be:	f85d 7b04 	ldr.w	r7, [sp], #4
700065c2:	4770      	bx	lr

700065c4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
700065c4:	b480      	push	{r7}
700065c6:	b085      	sub	sp, #20
700065c8:	af00      	add	r7, sp, #0
700065ca:	60f8      	str	r0, [r7, #12]
700065cc:	60b9      	str	r1, [r7, #8]
700065ce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
700065d0:	68fb      	ldr	r3, [r7, #12]
700065d2:	3b04      	subs	r3, #4
700065d4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
700065d6:	68fb      	ldr	r3, [r7, #12]
700065d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
700065dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
700065de:	68fb      	ldr	r3, [r7, #12]
700065e0:	3b04      	subs	r3, #4
700065e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
700065e4:	68bb      	ldr	r3, [r7, #8]
700065e6:	f023 0201 	bic.w	r2, r3, #1
700065ea:	68fb      	ldr	r3, [r7, #12]
700065ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
700065ee:	68fb      	ldr	r3, [r7, #12]
700065f0:	3b04      	subs	r3, #4
700065f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
700065f4:	4a0c      	ldr	r2, [pc, #48]	@ (70006628 <pxPortInitialiseStack+0x64>)
700065f6:	68fb      	ldr	r3, [r7, #12]
700065f8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
700065fa:	68fb      	ldr	r3, [r7, #12]
700065fc:	3b14      	subs	r3, #20
700065fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
70006600:	687a      	ldr	r2, [r7, #4]
70006602:	68fb      	ldr	r3, [r7, #12]
70006604:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
70006606:	68fb      	ldr	r3, [r7, #12]
70006608:	3b04      	subs	r3, #4
7000660a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
7000660c:	68fb      	ldr	r3, [r7, #12]
7000660e:	f06f 0202 	mvn.w	r2, #2
70006612:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
70006614:	68fb      	ldr	r3, [r7, #12]
70006616:	3b20      	subs	r3, #32
70006618:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
7000661a:	68fb      	ldr	r3, [r7, #12]
}
7000661c:	4618      	mov	r0, r3
7000661e:	3714      	adds	r7, #20
70006620:	46bd      	mov	sp, r7
70006622:	f85d 7b04 	ldr.w	r7, [sp], #4
70006626:	4770      	bx	lr
70006628:	7000662d 	.word	0x7000662d

7000662c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
7000662c:	b480      	push	{r7}
7000662e:	b085      	sub	sp, #20
70006630:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
70006632:	2300      	movs	r3, #0
70006634:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
70006636:	4b13      	ldr	r3, [pc, #76]	@ (70006684 <prvTaskExitError+0x58>)
70006638:	681b      	ldr	r3, [r3, #0]
7000663a:	f1b3 3fff 	cmp.w	r3, #4294967295
7000663e:	d00b      	beq.n	70006658 <prvTaskExitError+0x2c>
        __asm volatile
70006640:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006644:	f383 8811 	msr	BASEPRI, r3
70006648:	f3bf 8f6f 	isb	sy
7000664c:	f3bf 8f4f 	dsb	sy
70006650:	60fb      	str	r3, [r7, #12]
    }
70006652:	bf00      	nop
70006654:	bf00      	nop
70006656:	e7fd      	b.n	70006654 <prvTaskExitError+0x28>
        __asm volatile
70006658:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000665c:	f383 8811 	msr	BASEPRI, r3
70006660:	f3bf 8f6f 	isb	sy
70006664:	f3bf 8f4f 	dsb	sy
70006668:	60bb      	str	r3, [r7, #8]
    }
7000666a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
7000666c:	bf00      	nop
7000666e:	687b      	ldr	r3, [r7, #4]
70006670:	2b00      	cmp	r3, #0
70006672:	d0fc      	beq.n	7000666e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
70006674:	bf00      	nop
70006676:	bf00      	nop
70006678:	3714      	adds	r7, #20
7000667a:	46bd      	mov	sp, r7
7000667c:	f85d 7b04 	ldr.w	r7, [sp], #4
70006680:	4770      	bx	lr
70006682:	bf00      	nop
70006684:	24000020 	.word	0x24000020
	...

70006690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
70006690:	4b07      	ldr	r3, [pc, #28]	@ (700066b0 <pxCurrentTCBConst2>)
70006692:	6819      	ldr	r1, [r3, #0]
70006694:	6808      	ldr	r0, [r1, #0]
70006696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
7000669a:	f380 8809 	msr	PSP, r0
7000669e:	f3bf 8f6f 	isb	sy
700066a2:	f04f 0000 	mov.w	r0, #0
700066a6:	f380 8811 	msr	BASEPRI, r0
700066aa:	4770      	bx	lr
700066ac:	f3af 8000 	nop.w

700066b0 <pxCurrentTCBConst2>:
700066b0:	24004c48 	.word	0x24004c48
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
700066b4:	bf00      	nop
700066b6:	bf00      	nop

700066b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
700066b8:	4808      	ldr	r0, [pc, #32]	@ (700066dc <prvPortStartFirstTask+0x24>)
700066ba:	6800      	ldr	r0, [r0, #0]
700066bc:	6800      	ldr	r0, [r0, #0]
700066be:	f380 8808 	msr	MSP, r0
700066c2:	f04f 0000 	mov.w	r0, #0
700066c6:	f380 8814 	msr	CONTROL, r0
700066ca:	b662      	cpsie	i
700066cc:	b661      	cpsie	f
700066ce:	f3bf 8f4f 	dsb	sy
700066d2:	f3bf 8f6f 	isb	sy
700066d6:	df00      	svc	0
700066d8:	bf00      	nop
700066da:	0000      	.short	0x0000
700066dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
700066e0:	bf00      	nop
700066e2:	bf00      	nop

700066e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
700066e4:	b580      	push	{r7, lr}
700066e6:	b086      	sub	sp, #24
700066e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
700066ea:	4b47      	ldr	r3, [pc, #284]	@ (70006808 <xPortStartScheduler+0x124>)
700066ec:	681b      	ldr	r3, [r3, #0]
700066ee:	4a47      	ldr	r2, [pc, #284]	@ (7000680c <xPortStartScheduler+0x128>)
700066f0:	4293      	cmp	r3, r2
700066f2:	d10b      	bne.n	7000670c <xPortStartScheduler+0x28>
        __asm volatile
700066f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
700066f8:	f383 8811 	msr	BASEPRI, r3
700066fc:	f3bf 8f6f 	isb	sy
70006700:	f3bf 8f4f 	dsb	sy
70006704:	613b      	str	r3, [r7, #16]
    }
70006706:	bf00      	nop
70006708:	bf00      	nop
7000670a:	e7fd      	b.n	70006708 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
7000670c:	4b3e      	ldr	r3, [pc, #248]	@ (70006808 <xPortStartScheduler+0x124>)
7000670e:	681b      	ldr	r3, [r3, #0]
70006710:	4a3f      	ldr	r2, [pc, #252]	@ (70006810 <xPortStartScheduler+0x12c>)
70006712:	4293      	cmp	r3, r2
70006714:	d10b      	bne.n	7000672e <xPortStartScheduler+0x4a>
        __asm volatile
70006716:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000671a:	f383 8811 	msr	BASEPRI, r3
7000671e:	f3bf 8f6f 	isb	sy
70006722:	f3bf 8f4f 	dsb	sy
70006726:	60fb      	str	r3, [r7, #12]
    }
70006728:	bf00      	nop
7000672a:	bf00      	nop
7000672c:	e7fd      	b.n	7000672a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
7000672e:	4b39      	ldr	r3, [pc, #228]	@ (70006814 <xPortStartScheduler+0x130>)
70006730:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
70006732:	697b      	ldr	r3, [r7, #20]
70006734:	781b      	ldrb	r3, [r3, #0]
70006736:	b2db      	uxtb	r3, r3
70006738:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
7000673a:	697b      	ldr	r3, [r7, #20]
7000673c:	22ff      	movs	r2, #255	@ 0xff
7000673e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
70006740:	697b      	ldr	r3, [r7, #20]
70006742:	781b      	ldrb	r3, [r3, #0]
70006744:	b2db      	uxtb	r3, r3
70006746:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
70006748:	78fb      	ldrb	r3, [r7, #3]
7000674a:	b2db      	uxtb	r3, r3
7000674c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
70006750:	b2da      	uxtb	r2, r3
70006752:	4b31      	ldr	r3, [pc, #196]	@ (70006818 <xPortStartScheduler+0x134>)
70006754:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
70006756:	4b31      	ldr	r3, [pc, #196]	@ (7000681c <xPortStartScheduler+0x138>)
70006758:	2207      	movs	r2, #7
7000675a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
7000675c:	e009      	b.n	70006772 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
7000675e:	4b2f      	ldr	r3, [pc, #188]	@ (7000681c <xPortStartScheduler+0x138>)
70006760:	681b      	ldr	r3, [r3, #0]
70006762:	3b01      	subs	r3, #1
70006764:	4a2d      	ldr	r2, [pc, #180]	@ (7000681c <xPortStartScheduler+0x138>)
70006766:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
70006768:	78fb      	ldrb	r3, [r7, #3]
7000676a:	b2db      	uxtb	r3, r3
7000676c:	005b      	lsls	r3, r3, #1
7000676e:	b2db      	uxtb	r3, r3
70006770:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
70006772:	78fb      	ldrb	r3, [r7, #3]
70006774:	b2db      	uxtb	r3, r3
70006776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
7000677a:	2b80      	cmp	r3, #128	@ 0x80
7000677c:	d0ef      	beq.n	7000675e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
7000677e:	4b27      	ldr	r3, [pc, #156]	@ (7000681c <xPortStartScheduler+0x138>)
70006780:	681b      	ldr	r3, [r3, #0]
70006782:	f1c3 0307 	rsb	r3, r3, #7
70006786:	2b04      	cmp	r3, #4
70006788:	d00b      	beq.n	700067a2 <xPortStartScheduler+0xbe>
        __asm volatile
7000678a:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000678e:	f383 8811 	msr	BASEPRI, r3
70006792:	f3bf 8f6f 	isb	sy
70006796:	f3bf 8f4f 	dsb	sy
7000679a:	60bb      	str	r3, [r7, #8]
    }
7000679c:	bf00      	nop
7000679e:	bf00      	nop
700067a0:	e7fd      	b.n	7000679e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
700067a2:	4b1e      	ldr	r3, [pc, #120]	@ (7000681c <xPortStartScheduler+0x138>)
700067a4:	681b      	ldr	r3, [r3, #0]
700067a6:	021b      	lsls	r3, r3, #8
700067a8:	4a1c      	ldr	r2, [pc, #112]	@ (7000681c <xPortStartScheduler+0x138>)
700067aa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
700067ac:	4b1b      	ldr	r3, [pc, #108]	@ (7000681c <xPortStartScheduler+0x138>)
700067ae:	681b      	ldr	r3, [r3, #0]
700067b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
700067b4:	4a19      	ldr	r2, [pc, #100]	@ (7000681c <xPortStartScheduler+0x138>)
700067b6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
700067b8:	687b      	ldr	r3, [r7, #4]
700067ba:	b2da      	uxtb	r2, r3
700067bc:	697b      	ldr	r3, [r7, #20]
700067be:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
700067c0:	4b17      	ldr	r3, [pc, #92]	@ (70006820 <xPortStartScheduler+0x13c>)
700067c2:	681b      	ldr	r3, [r3, #0]
700067c4:	4a16      	ldr	r2, [pc, #88]	@ (70006820 <xPortStartScheduler+0x13c>)
700067c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
700067ca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
700067cc:	4b14      	ldr	r3, [pc, #80]	@ (70006820 <xPortStartScheduler+0x13c>)
700067ce:	681b      	ldr	r3, [r3, #0]
700067d0:	4a13      	ldr	r2, [pc, #76]	@ (70006820 <xPortStartScheduler+0x13c>)
700067d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
700067d6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
700067d8:	f000 f8e0 	bl	7000699c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
700067dc:	4b11      	ldr	r3, [pc, #68]	@ (70006824 <xPortStartScheduler+0x140>)
700067de:	2200      	movs	r2, #0
700067e0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
700067e2:	f000 f8ff 	bl	700069e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
700067e6:	4b10      	ldr	r3, [pc, #64]	@ (70006828 <xPortStartScheduler+0x144>)
700067e8:	681b      	ldr	r3, [r3, #0]
700067ea:	4a0f      	ldr	r2, [pc, #60]	@ (70006828 <xPortStartScheduler+0x144>)
700067ec:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
700067f0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
700067f2:	f7ff ff61 	bl	700066b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
700067f6:	f002 f889 	bl	7000890c <vTaskSwitchContext>
    prvTaskExitError();
700067fa:	f7ff ff17 	bl	7000662c <prvTaskExitError>

    /* Should not get here! */
    return 0;
700067fe:	2300      	movs	r3, #0
}
70006800:	4618      	mov	r0, r3
70006802:	3718      	adds	r7, #24
70006804:	46bd      	mov	sp, r7
70006806:	bd80      	pop	{r7, pc}
70006808:	e000ed00 	.word	0xe000ed00
7000680c:	410fc271 	.word	0x410fc271
70006810:	410fc270 	.word	0x410fc270
70006814:	e000e400 	.word	0xe000e400
70006818:	24004c00 	.word	0x24004c00
7000681c:	24004c04 	.word	0x24004c04
70006820:	e000ed20 	.word	0xe000ed20
70006824:	24000020 	.word	0x24000020
70006828:	e000ef34 	.word	0xe000ef34

7000682c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
7000682c:	b480      	push	{r7}
7000682e:	b083      	sub	sp, #12
70006830:	af00      	add	r7, sp, #0
        __asm volatile
70006832:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006836:	f383 8811 	msr	BASEPRI, r3
7000683a:	f3bf 8f6f 	isb	sy
7000683e:	f3bf 8f4f 	dsb	sy
70006842:	607b      	str	r3, [r7, #4]
    }
70006844:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
70006846:	4b10      	ldr	r3, [pc, #64]	@ (70006888 <vPortEnterCritical+0x5c>)
70006848:	681b      	ldr	r3, [r3, #0]
7000684a:	3301      	adds	r3, #1
7000684c:	4a0e      	ldr	r2, [pc, #56]	@ (70006888 <vPortEnterCritical+0x5c>)
7000684e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
70006850:	4b0d      	ldr	r3, [pc, #52]	@ (70006888 <vPortEnterCritical+0x5c>)
70006852:	681b      	ldr	r3, [r3, #0]
70006854:	2b01      	cmp	r3, #1
70006856:	d110      	bne.n	7000687a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
70006858:	4b0c      	ldr	r3, [pc, #48]	@ (7000688c <vPortEnterCritical+0x60>)
7000685a:	681b      	ldr	r3, [r3, #0]
7000685c:	b2db      	uxtb	r3, r3
7000685e:	2b00      	cmp	r3, #0
70006860:	d00b      	beq.n	7000687a <vPortEnterCritical+0x4e>
        __asm volatile
70006862:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006866:	f383 8811 	msr	BASEPRI, r3
7000686a:	f3bf 8f6f 	isb	sy
7000686e:	f3bf 8f4f 	dsb	sy
70006872:	603b      	str	r3, [r7, #0]
    }
70006874:	bf00      	nop
70006876:	bf00      	nop
70006878:	e7fd      	b.n	70006876 <vPortEnterCritical+0x4a>
    }
}
7000687a:	bf00      	nop
7000687c:	370c      	adds	r7, #12
7000687e:	46bd      	mov	sp, r7
70006880:	f85d 7b04 	ldr.w	r7, [sp], #4
70006884:	4770      	bx	lr
70006886:	bf00      	nop
70006888:	24000020 	.word	0x24000020
7000688c:	e000ed04 	.word	0xe000ed04

70006890 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
70006890:	b480      	push	{r7}
70006892:	b083      	sub	sp, #12
70006894:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
70006896:	4b12      	ldr	r3, [pc, #72]	@ (700068e0 <vPortExitCritical+0x50>)
70006898:	681b      	ldr	r3, [r3, #0]
7000689a:	2b00      	cmp	r3, #0
7000689c:	d10b      	bne.n	700068b6 <vPortExitCritical+0x26>
        __asm volatile
7000689e:	f04f 0350 	mov.w	r3, #80	@ 0x50
700068a2:	f383 8811 	msr	BASEPRI, r3
700068a6:	f3bf 8f6f 	isb	sy
700068aa:	f3bf 8f4f 	dsb	sy
700068ae:	607b      	str	r3, [r7, #4]
    }
700068b0:	bf00      	nop
700068b2:	bf00      	nop
700068b4:	e7fd      	b.n	700068b2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
700068b6:	4b0a      	ldr	r3, [pc, #40]	@ (700068e0 <vPortExitCritical+0x50>)
700068b8:	681b      	ldr	r3, [r3, #0]
700068ba:	3b01      	subs	r3, #1
700068bc:	4a08      	ldr	r2, [pc, #32]	@ (700068e0 <vPortExitCritical+0x50>)
700068be:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
700068c0:	4b07      	ldr	r3, [pc, #28]	@ (700068e0 <vPortExitCritical+0x50>)
700068c2:	681b      	ldr	r3, [r3, #0]
700068c4:	2b00      	cmp	r3, #0
700068c6:	d105      	bne.n	700068d4 <vPortExitCritical+0x44>
700068c8:	2300      	movs	r3, #0
700068ca:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
700068cc:	683b      	ldr	r3, [r7, #0]
700068ce:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
700068d2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
700068d4:	bf00      	nop
700068d6:	370c      	adds	r7, #12
700068d8:	46bd      	mov	sp, r7
700068da:	f85d 7b04 	ldr.w	r7, [sp], #4
700068de:	4770      	bx	lr
700068e0:	24000020 	.word	0x24000020
	...

700068f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
700068f0:	f3ef 8009 	mrs	r0, PSP
700068f4:	f3bf 8f6f 	isb	sy
700068f8:	4b15      	ldr	r3, [pc, #84]	@ (70006950 <pxCurrentTCBConst>)
700068fa:	681a      	ldr	r2, [r3, #0]
700068fc:	f01e 0f10 	tst.w	lr, #16
70006900:	bf08      	it	eq
70006902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
70006906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
7000690a:	6010      	str	r0, [r2, #0]
7000690c:	e92d 0009 	stmdb	sp!, {r0, r3}
70006910:	f04f 0050 	mov.w	r0, #80	@ 0x50
70006914:	f380 8811 	msr	BASEPRI, r0
70006918:	f3bf 8f4f 	dsb	sy
7000691c:	f3bf 8f6f 	isb	sy
70006920:	f001 fff4 	bl	7000890c <vTaskSwitchContext>
70006924:	f04f 0000 	mov.w	r0, #0
70006928:	f380 8811 	msr	BASEPRI, r0
7000692c:	bc09      	pop	{r0, r3}
7000692e:	6819      	ldr	r1, [r3, #0]
70006930:	6808      	ldr	r0, [r1, #0]
70006932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
70006936:	f01e 0f10 	tst.w	lr, #16
7000693a:	bf08      	it	eq
7000693c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
70006940:	f380 8809 	msr	PSP, r0
70006944:	f3bf 8f6f 	isb	sy
70006948:	4770      	bx	lr
7000694a:	bf00      	nop
7000694c:	f3af 8000 	nop.w

70006950 <pxCurrentTCBConst>:
70006950:	24004c48 	.word	0x24004c48
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
70006954:	bf00      	nop
70006956:	bf00      	nop

70006958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
70006958:	b580      	push	{r7, lr}
7000695a:	b082      	sub	sp, #8
7000695c:	af00      	add	r7, sp, #0
        __asm volatile
7000695e:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006962:	f383 8811 	msr	BASEPRI, r3
70006966:	f3bf 8f6f 	isb	sy
7000696a:	f3bf 8f4f 	dsb	sy
7000696e:	607b      	str	r3, [r7, #4]
    }
70006970:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
70006972:	f001 feb3 	bl	700086dc <xTaskIncrementTick>
70006976:	4603      	mov	r3, r0
70006978:	2b00      	cmp	r3, #0
7000697a:	d003      	beq.n	70006984 <xPortSysTickHandler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
7000697c:	4b06      	ldr	r3, [pc, #24]	@ (70006998 <xPortSysTickHandler+0x40>)
7000697e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70006982:	601a      	str	r2, [r3, #0]
70006984:	2300      	movs	r3, #0
70006986:	603b      	str	r3, [r7, #0]
        __asm volatile
70006988:	683b      	ldr	r3, [r7, #0]
7000698a:	f383 8811 	msr	BASEPRI, r3
    }
7000698e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
70006990:	bf00      	nop
70006992:	3708      	adds	r7, #8
70006994:	46bd      	mov	sp, r7
70006996:	bd80      	pop	{r7, pc}
70006998:	e000ed04 	.word	0xe000ed04

7000699c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
7000699c:	b480      	push	{r7}
7000699e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
700069a0:	4b0b      	ldr	r3, [pc, #44]	@ (700069d0 <vPortSetupTimerInterrupt+0x34>)
700069a2:	2200      	movs	r2, #0
700069a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
700069a6:	4b0b      	ldr	r3, [pc, #44]	@ (700069d4 <vPortSetupTimerInterrupt+0x38>)
700069a8:	2200      	movs	r2, #0
700069aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
700069ac:	4b0a      	ldr	r3, [pc, #40]	@ (700069d8 <vPortSetupTimerInterrupt+0x3c>)
700069ae:	681b      	ldr	r3, [r3, #0]
700069b0:	4a0a      	ldr	r2, [pc, #40]	@ (700069dc <vPortSetupTimerInterrupt+0x40>)
700069b2:	fba2 2303 	umull	r2, r3, r2, r3
700069b6:	099b      	lsrs	r3, r3, #6
700069b8:	4a09      	ldr	r2, [pc, #36]	@ (700069e0 <vPortSetupTimerInterrupt+0x44>)
700069ba:	3b01      	subs	r3, #1
700069bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
700069be:	4b04      	ldr	r3, [pc, #16]	@ (700069d0 <vPortSetupTimerInterrupt+0x34>)
700069c0:	2207      	movs	r2, #7
700069c2:	601a      	str	r2, [r3, #0]
}
700069c4:	bf00      	nop
700069c6:	46bd      	mov	sp, r7
700069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
700069cc:	4770      	bx	lr
700069ce:	bf00      	nop
700069d0:	e000e010 	.word	0xe000e010
700069d4:	e000e018 	.word	0xe000e018
700069d8:	24000000 	.word	0x24000000
700069dc:	10624dd3 	.word	0x10624dd3
700069e0:	e000e014 	.word	0xe000e014

700069e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
700069e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 700069f4 <vPortEnableVFP+0x10>
700069e8:	6801      	ldr	r1, [r0, #0]
700069ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
700069ee:	6001      	str	r1, [r0, #0]
700069f0:	4770      	bx	lr
700069f2:	0000      	.short	0x0000
700069f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
700069f8:	bf00      	nop
700069fa:	bf00      	nop

700069fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
700069fc:	b480      	push	{r7}
700069fe:	b085      	sub	sp, #20
70006a00:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
70006a02:	f3ef 8305 	mrs	r3, IPSR
70006a06:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
70006a08:	68fb      	ldr	r3, [r7, #12]
70006a0a:	2b0f      	cmp	r3, #15
70006a0c:	d915      	bls.n	70006a3a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
70006a0e:	4a18      	ldr	r2, [pc, #96]	@ (70006a70 <vPortValidateInterruptPriority+0x74>)
70006a10:	68fb      	ldr	r3, [r7, #12]
70006a12:	4413      	add	r3, r2
70006a14:	781b      	ldrb	r3, [r3, #0]
70006a16:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
70006a18:	4b16      	ldr	r3, [pc, #88]	@ (70006a74 <vPortValidateInterruptPriority+0x78>)
70006a1a:	781b      	ldrb	r3, [r3, #0]
70006a1c:	7afa      	ldrb	r2, [r7, #11]
70006a1e:	429a      	cmp	r2, r3
70006a20:	d20b      	bcs.n	70006a3a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
70006a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006a26:	f383 8811 	msr	BASEPRI, r3
70006a2a:	f3bf 8f6f 	isb	sy
70006a2e:	f3bf 8f4f 	dsb	sy
70006a32:	607b      	str	r3, [r7, #4]
    }
70006a34:	bf00      	nop
70006a36:	bf00      	nop
70006a38:	e7fd      	b.n	70006a36 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
70006a3a:	4b0f      	ldr	r3, [pc, #60]	@ (70006a78 <vPortValidateInterruptPriority+0x7c>)
70006a3c:	681b      	ldr	r3, [r3, #0]
70006a3e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
70006a42:	4b0e      	ldr	r3, [pc, #56]	@ (70006a7c <vPortValidateInterruptPriority+0x80>)
70006a44:	681b      	ldr	r3, [r3, #0]
70006a46:	429a      	cmp	r2, r3
70006a48:	d90b      	bls.n	70006a62 <vPortValidateInterruptPriority+0x66>
        __asm volatile
70006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006a4e:	f383 8811 	msr	BASEPRI, r3
70006a52:	f3bf 8f6f 	isb	sy
70006a56:	f3bf 8f4f 	dsb	sy
70006a5a:	603b      	str	r3, [r7, #0]
    }
70006a5c:	bf00      	nop
70006a5e:	bf00      	nop
70006a60:	e7fd      	b.n	70006a5e <vPortValidateInterruptPriority+0x62>
    }
70006a62:	bf00      	nop
70006a64:	3714      	adds	r7, #20
70006a66:	46bd      	mov	sp, r7
70006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
70006a6c:	4770      	bx	lr
70006a6e:	bf00      	nop
70006a70:	e000e3f0 	.word	0xe000e3f0
70006a74:	24004c00 	.word	0x24004c00
70006a78:	e000ed0c 	.word	0xe000ed0c
70006a7c:	24004c04 	.word	0x24004c04

70006a80 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
70006a80:	b580      	push	{r7, lr}
70006a82:	b086      	sub	sp, #24
70006a84:	af00      	add	r7, sp, #0
70006a86:	6078      	str	r0, [r7, #4]
70006a88:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
70006a8a:	2301      	movs	r3, #1
70006a8c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
70006a8e:	687b      	ldr	r3, [r7, #4]
70006a90:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
70006a92:	693b      	ldr	r3, [r7, #16]
70006a94:	2b00      	cmp	r3, #0
70006a96:	d10b      	bne.n	70006ab0 <xQueueGenericReset+0x30>
        __asm volatile
70006a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006a9c:	f383 8811 	msr	BASEPRI, r3
70006aa0:	f3bf 8f6f 	isb	sy
70006aa4:	f3bf 8f4f 	dsb	sy
70006aa8:	60fb      	str	r3, [r7, #12]
    }
70006aaa:	bf00      	nop
70006aac:	bf00      	nop
70006aae:	e7fd      	b.n	70006aac <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
70006ab0:	693b      	ldr	r3, [r7, #16]
70006ab2:	2b00      	cmp	r3, #0
70006ab4:	d05d      	beq.n	70006b72 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
70006ab6:	693b      	ldr	r3, [r7, #16]
70006ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
70006aba:	2b00      	cmp	r3, #0
70006abc:	d059      	beq.n	70006b72 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
70006abe:	693b      	ldr	r3, [r7, #16]
70006ac0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
70006ac2:	693b      	ldr	r3, [r7, #16]
70006ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70006ac6:	2100      	movs	r1, #0
70006ac8:	fba3 2302 	umull	r2, r3, r3, r2
70006acc:	2b00      	cmp	r3, #0
70006ace:	d000      	beq.n	70006ad2 <xQueueGenericReset+0x52>
70006ad0:	2101      	movs	r1, #1
70006ad2:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
70006ad4:	2b00      	cmp	r3, #0
70006ad6:	d14c      	bne.n	70006b72 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
70006ad8:	f7ff fea8 	bl	7000682c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
70006adc:	693b      	ldr	r3, [r7, #16]
70006ade:	681a      	ldr	r2, [r3, #0]
70006ae0:	693b      	ldr	r3, [r7, #16]
70006ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70006ae4:	6939      	ldr	r1, [r7, #16]
70006ae6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
70006ae8:	fb01 f303 	mul.w	r3, r1, r3
70006aec:	441a      	add	r2, r3
70006aee:	693b      	ldr	r3, [r7, #16]
70006af0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
70006af2:	693b      	ldr	r3, [r7, #16]
70006af4:	2200      	movs	r2, #0
70006af6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
70006af8:	693b      	ldr	r3, [r7, #16]
70006afa:	681a      	ldr	r2, [r3, #0]
70006afc:	693b      	ldr	r3, [r7, #16]
70006afe:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
70006b00:	693b      	ldr	r3, [r7, #16]
70006b02:	681a      	ldr	r2, [r3, #0]
70006b04:	693b      	ldr	r3, [r7, #16]
70006b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70006b08:	3b01      	subs	r3, #1
70006b0a:	6939      	ldr	r1, [r7, #16]
70006b0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
70006b0e:	fb01 f303 	mul.w	r3, r1, r3
70006b12:	441a      	add	r2, r3
70006b14:	693b      	ldr	r3, [r7, #16]
70006b16:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
70006b18:	693b      	ldr	r3, [r7, #16]
70006b1a:	22ff      	movs	r2, #255	@ 0xff
70006b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
70006b20:	693b      	ldr	r3, [r7, #16]
70006b22:	22ff      	movs	r2, #255	@ 0xff
70006b24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
70006b28:	683b      	ldr	r3, [r7, #0]
70006b2a:	2b00      	cmp	r3, #0
70006b2c:	d114      	bne.n	70006b58 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
70006b2e:	693b      	ldr	r3, [r7, #16]
70006b30:	691b      	ldr	r3, [r3, #16]
70006b32:	2b00      	cmp	r3, #0
70006b34:	d01a      	beq.n	70006b6c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
70006b36:	693b      	ldr	r3, [r7, #16]
70006b38:	3310      	adds	r3, #16
70006b3a:	4618      	mov	r0, r3
70006b3c:	f001 ffb8 	bl	70008ab0 <xTaskRemoveFromEventList>
70006b40:	4603      	mov	r3, r0
70006b42:	2b00      	cmp	r3, #0
70006b44:	d012      	beq.n	70006b6c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
70006b46:	4b16      	ldr	r3, [pc, #88]	@ (70006ba0 <xQueueGenericReset+0x120>)
70006b48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70006b4c:	601a      	str	r2, [r3, #0]
70006b4e:	f3bf 8f4f 	dsb	sy
70006b52:	f3bf 8f6f 	isb	sy
70006b56:	e009      	b.n	70006b6c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
70006b58:	693b      	ldr	r3, [r7, #16]
70006b5a:	3310      	adds	r3, #16
70006b5c:	4618      	mov	r0, r3
70006b5e:	f7ff fc7d 	bl	7000645c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
70006b62:	693b      	ldr	r3, [r7, #16]
70006b64:	3324      	adds	r3, #36	@ 0x24
70006b66:	4618      	mov	r0, r3
70006b68:	f7ff fc78 	bl	7000645c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
70006b6c:	f7ff fe90 	bl	70006890 <vPortExitCritical>
70006b70:	e001      	b.n	70006b76 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
70006b72:	2300      	movs	r3, #0
70006b74:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
70006b76:	697b      	ldr	r3, [r7, #20]
70006b78:	2b00      	cmp	r3, #0
70006b7a:	d10b      	bne.n	70006b94 <xQueueGenericReset+0x114>
        __asm volatile
70006b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006b80:	f383 8811 	msr	BASEPRI, r3
70006b84:	f3bf 8f6f 	isb	sy
70006b88:	f3bf 8f4f 	dsb	sy
70006b8c:	60bb      	str	r3, [r7, #8]
    }
70006b8e:	bf00      	nop
70006b90:	bf00      	nop
70006b92:	e7fd      	b.n	70006b90 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
70006b94:	697b      	ldr	r3, [r7, #20]
}
70006b96:	4618      	mov	r0, r3
70006b98:	3718      	adds	r7, #24
70006b9a:	46bd      	mov	sp, r7
70006b9c:	bd80      	pop	{r7, pc}
70006b9e:	bf00      	nop
70006ba0:	e000ed04 	.word	0xe000ed04

70006ba4 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
70006ba4:	b580      	push	{r7, lr}
70006ba6:	b08c      	sub	sp, #48	@ 0x30
70006ba8:	af02      	add	r7, sp, #8
70006baa:	60f8      	str	r0, [r7, #12]
70006bac:	60b9      	str	r1, [r7, #8]
70006bae:	607a      	str	r2, [r7, #4]
70006bb0:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
70006bb2:	2300      	movs	r3, #0
70006bb4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
70006bb6:	683b      	ldr	r3, [r7, #0]
70006bb8:	2b00      	cmp	r3, #0
70006bba:	d10b      	bne.n	70006bd4 <xQueueGenericCreateStatic+0x30>
        __asm volatile
70006bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006bc0:	f383 8811 	msr	BASEPRI, r3
70006bc4:	f3bf 8f6f 	isb	sy
70006bc8:	f3bf 8f4f 	dsb	sy
70006bcc:	623b      	str	r3, [r7, #32]
    }
70006bce:	bf00      	nop
70006bd0:	bf00      	nop
70006bd2:	e7fd      	b.n	70006bd0 <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
70006bd4:	68fb      	ldr	r3, [r7, #12]
70006bd6:	2b00      	cmp	r3, #0
70006bd8:	d031      	beq.n	70006c3e <xQueueGenericCreateStatic+0x9a>
70006bda:	683b      	ldr	r3, [r7, #0]
70006bdc:	2b00      	cmp	r3, #0
70006bde:	d02e      	beq.n	70006c3e <xQueueGenericCreateStatic+0x9a>
            ( pxStaticQueue != NULL ) &&
70006be0:	687b      	ldr	r3, [r7, #4]
70006be2:	2b00      	cmp	r3, #0
70006be4:	d002      	beq.n	70006bec <xQueueGenericCreateStatic+0x48>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
70006be6:	68bb      	ldr	r3, [r7, #8]
70006be8:	2b00      	cmp	r3, #0
70006bea:	d028      	beq.n	70006c3e <xQueueGenericCreateStatic+0x9a>
70006bec:	687b      	ldr	r3, [r7, #4]
70006bee:	2b00      	cmp	r3, #0
70006bf0:	d102      	bne.n	70006bf8 <xQueueGenericCreateStatic+0x54>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
70006bf2:	68bb      	ldr	r3, [r7, #8]
70006bf4:	2b00      	cmp	r3, #0
70006bf6:	d122      	bne.n	70006c3e <xQueueGenericCreateStatic+0x9a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
70006bf8:	2350      	movs	r3, #80	@ 0x50
70006bfa:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
70006bfc:	697b      	ldr	r3, [r7, #20]
70006bfe:	2b50      	cmp	r3, #80	@ 0x50
70006c00:	d00b      	beq.n	70006c1a <xQueueGenericCreateStatic+0x76>
        __asm volatile
70006c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006c06:	f383 8811 	msr	BASEPRI, r3
70006c0a:	f3bf 8f6f 	isb	sy
70006c0e:	f3bf 8f4f 	dsb	sy
70006c12:	61fb      	str	r3, [r7, #28]
    }
70006c14:	bf00      	nop
70006c16:	bf00      	nop
70006c18:	e7fd      	b.n	70006c16 <xQueueGenericCreateStatic+0x72>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
70006c1a:	697b      	ldr	r3, [r7, #20]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
70006c1c:	683b      	ldr	r3, [r7, #0]
70006c1e:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
70006c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70006c22:	2201      	movs	r2, #1
70006c24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
70006c28:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
70006c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70006c2e:	9300      	str	r3, [sp, #0]
70006c30:	4613      	mov	r3, r2
70006c32:	687a      	ldr	r2, [r7, #4]
70006c34:	68b9      	ldr	r1, [r7, #8]
70006c36:	68f8      	ldr	r0, [r7, #12]
70006c38:	f000 f868 	bl	70006d0c <prvInitialiseNewQueue>
70006c3c:	e00e      	b.n	70006c5c <xQueueGenericCreateStatic+0xb8>
        }
        else
        {
            configASSERT( pxNewQueue );
70006c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70006c40:	2b00      	cmp	r3, #0
70006c42:	d10b      	bne.n	70006c5c <xQueueGenericCreateStatic+0xb8>
        __asm volatile
70006c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006c48:	f383 8811 	msr	BASEPRI, r3
70006c4c:	f3bf 8f6f 	isb	sy
70006c50:	f3bf 8f4f 	dsb	sy
70006c54:	61bb      	str	r3, [r7, #24]
    }
70006c56:	bf00      	nop
70006c58:	bf00      	nop
70006c5a:	e7fd      	b.n	70006c58 <xQueueGenericCreateStatic+0xb4>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
70006c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
70006c5e:	4618      	mov	r0, r3
70006c60:	3728      	adds	r7, #40	@ 0x28
70006c62:	46bd      	mov	sp, r7
70006c64:	bd80      	pop	{r7, pc}

70006c66 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
70006c66:	b580      	push	{r7, lr}
70006c68:	b08a      	sub	sp, #40	@ 0x28
70006c6a:	af02      	add	r7, sp, #8
70006c6c:	60f8      	str	r0, [r7, #12]
70006c6e:	60b9      	str	r1, [r7, #8]
70006c70:	4613      	mov	r3, r2
70006c72:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
70006c74:	2300      	movs	r3, #0
70006c76:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
70006c78:	68fb      	ldr	r3, [r7, #12]
70006c7a:	2b00      	cmp	r3, #0
70006c7c:	d032      	beq.n	70006ce4 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
70006c7e:	2100      	movs	r1, #0
70006c80:	68ba      	ldr	r2, [r7, #8]
70006c82:	68fb      	ldr	r3, [r7, #12]
70006c84:	fba3 2302 	umull	r2, r3, r3, r2
70006c88:	2b00      	cmp	r3, #0
70006c8a:	d000      	beq.n	70006c8e <xQueueGenericCreate+0x28>
70006c8c:	2101      	movs	r1, #1
70006c8e:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
70006c90:	2b00      	cmp	r3, #0
70006c92:	d127      	bne.n	70006ce4 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
70006c94:	68fb      	ldr	r3, [r7, #12]
70006c96:	68ba      	ldr	r2, [r7, #8]
70006c98:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
70006c9c:	f113 0f51 	cmn.w	r3, #81	@ 0x51
70006ca0:	d820      	bhi.n	70006ce4 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
70006ca2:	68fb      	ldr	r3, [r7, #12]
70006ca4:	68ba      	ldr	r2, [r7, #8]
70006ca6:	fb02 f303 	mul.w	r3, r2, r3
70006caa:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
70006cac:	69bb      	ldr	r3, [r7, #24]
70006cae:	3350      	adds	r3, #80	@ 0x50
70006cb0:	4618      	mov	r0, r3
70006cb2:	f7ff fa03 	bl	700060bc <pvPortMalloc>
70006cb6:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
70006cb8:	69fb      	ldr	r3, [r7, #28]
70006cba:	2b00      	cmp	r3, #0
70006cbc:	d021      	beq.n	70006d02 <xQueueGenericCreate+0x9c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
70006cbe:	69fb      	ldr	r3, [r7, #28]
70006cc0:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
70006cc2:	697b      	ldr	r3, [r7, #20]
70006cc4:	3350      	adds	r3, #80	@ 0x50
70006cc6:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
70006cc8:	69fb      	ldr	r3, [r7, #28]
70006cca:	2200      	movs	r2, #0
70006ccc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
70006cd0:	79fa      	ldrb	r2, [r7, #7]
70006cd2:	69fb      	ldr	r3, [r7, #28]
70006cd4:	9300      	str	r3, [sp, #0]
70006cd6:	4613      	mov	r3, r2
70006cd8:	697a      	ldr	r2, [r7, #20]
70006cda:	68b9      	ldr	r1, [r7, #8]
70006cdc:	68f8      	ldr	r0, [r7, #12]
70006cde:	f000 f815 	bl	70006d0c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
70006ce2:	e00e      	b.n	70006d02 <xQueueGenericCreate+0x9c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
70006ce4:	69fb      	ldr	r3, [r7, #28]
70006ce6:	2b00      	cmp	r3, #0
70006ce8:	d10b      	bne.n	70006d02 <xQueueGenericCreate+0x9c>
        __asm volatile
70006cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006cee:	f383 8811 	msr	BASEPRI, r3
70006cf2:	f3bf 8f6f 	isb	sy
70006cf6:	f3bf 8f4f 	dsb	sy
70006cfa:	613b      	str	r3, [r7, #16]
    }
70006cfc:	bf00      	nop
70006cfe:	bf00      	nop
70006d00:	e7fd      	b.n	70006cfe <xQueueGenericCreate+0x98>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
70006d02:	69fb      	ldr	r3, [r7, #28]
    }
70006d04:	4618      	mov	r0, r3
70006d06:	3720      	adds	r7, #32
70006d08:	46bd      	mov	sp, r7
70006d0a:	bd80      	pop	{r7, pc}

70006d0c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
70006d0c:	b580      	push	{r7, lr}
70006d0e:	b084      	sub	sp, #16
70006d10:	af00      	add	r7, sp, #0
70006d12:	60f8      	str	r0, [r7, #12]
70006d14:	60b9      	str	r1, [r7, #8]
70006d16:	607a      	str	r2, [r7, #4]
70006d18:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
70006d1a:	68bb      	ldr	r3, [r7, #8]
70006d1c:	2b00      	cmp	r3, #0
70006d1e:	d103      	bne.n	70006d28 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
70006d20:	69bb      	ldr	r3, [r7, #24]
70006d22:	69ba      	ldr	r2, [r7, #24]
70006d24:	601a      	str	r2, [r3, #0]
70006d26:	e002      	b.n	70006d2e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
70006d28:	69bb      	ldr	r3, [r7, #24]
70006d2a:	687a      	ldr	r2, [r7, #4]
70006d2c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
70006d2e:	69bb      	ldr	r3, [r7, #24]
70006d30:	68fa      	ldr	r2, [r7, #12]
70006d32:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
70006d34:	69bb      	ldr	r3, [r7, #24]
70006d36:	68ba      	ldr	r2, [r7, #8]
70006d38:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
70006d3a:	2101      	movs	r1, #1
70006d3c:	69b8      	ldr	r0, [r7, #24]
70006d3e:	f7ff fe9f 	bl	70006a80 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
70006d42:	69bb      	ldr	r3, [r7, #24]
70006d44:	78fa      	ldrb	r2, [r7, #3]
70006d46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
70006d4a:	bf00      	nop
70006d4c:	3710      	adds	r7, #16
70006d4e:	46bd      	mov	sp, r7
70006d50:	bd80      	pop	{r7, pc}

70006d52 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
70006d52:	b580      	push	{r7, lr}
70006d54:	b082      	sub	sp, #8
70006d56:	af00      	add	r7, sp, #0
70006d58:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
70006d5a:	687b      	ldr	r3, [r7, #4]
70006d5c:	2b00      	cmp	r3, #0
70006d5e:	d00e      	beq.n	70006d7e <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
70006d60:	687b      	ldr	r3, [r7, #4]
70006d62:	2200      	movs	r2, #0
70006d64:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
70006d66:	687b      	ldr	r3, [r7, #4]
70006d68:	2200      	movs	r2, #0
70006d6a:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
70006d6c:	687b      	ldr	r3, [r7, #4]
70006d6e:	2200      	movs	r2, #0
70006d70:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
70006d72:	2300      	movs	r3, #0
70006d74:	2200      	movs	r2, #0
70006d76:	2100      	movs	r1, #0
70006d78:	6878      	ldr	r0, [r7, #4]
70006d7a:	f000 f905 	bl	70006f88 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
70006d7e:	bf00      	nop
70006d80:	3708      	adds	r7, #8
70006d82:	46bd      	mov	sp, r7
70006d84:	bd80      	pop	{r7, pc}

70006d86 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
70006d86:	b580      	push	{r7, lr}
70006d88:	b086      	sub	sp, #24
70006d8a:	af00      	add	r7, sp, #0
70006d8c:	4603      	mov	r3, r0
70006d8e:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
70006d90:	2301      	movs	r3, #1
70006d92:	617b      	str	r3, [r7, #20]
70006d94:	2300      	movs	r3, #0
70006d96:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
70006d98:	79fb      	ldrb	r3, [r7, #7]
70006d9a:	461a      	mov	r2, r3
70006d9c:	6939      	ldr	r1, [r7, #16]
70006d9e:	6978      	ldr	r0, [r7, #20]
70006da0:	f7ff ff61 	bl	70006c66 <xQueueGenericCreate>
70006da4:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
70006da6:	68f8      	ldr	r0, [r7, #12]
70006da8:	f7ff ffd3 	bl	70006d52 <prvInitialiseMutex>

        return xNewQueue;
70006dac:	68fb      	ldr	r3, [r7, #12]
    }
70006dae:	4618      	mov	r0, r3
70006db0:	3718      	adds	r7, #24
70006db2:	46bd      	mov	sp, r7
70006db4:	bd80      	pop	{r7, pc}

70006db6 <xQueueCreateMutexStatic>:

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                           StaticQueue_t * pxStaticQueue )
    {
70006db6:	b580      	push	{r7, lr}
70006db8:	b088      	sub	sp, #32
70006dba:	af02      	add	r7, sp, #8
70006dbc:	4603      	mov	r3, r0
70006dbe:	6039      	str	r1, [r7, #0]
70006dc0:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
70006dc2:	2301      	movs	r3, #1
70006dc4:	617b      	str	r3, [r7, #20]
70006dc6:	2300      	movs	r3, #0
70006dc8:	613b      	str	r3, [r7, #16]

        /* Prevent compiler warnings about unused parameters if
         * configUSE_TRACE_FACILITY does not equal 1. */
        ( void ) ucQueueType;

        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
70006dca:	79fb      	ldrb	r3, [r7, #7]
70006dcc:	9300      	str	r3, [sp, #0]
70006dce:	683b      	ldr	r3, [r7, #0]
70006dd0:	2200      	movs	r2, #0
70006dd2:	6939      	ldr	r1, [r7, #16]
70006dd4:	6978      	ldr	r0, [r7, #20]
70006dd6:	f7ff fee5 	bl	70006ba4 <xQueueGenericCreateStatic>
70006dda:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
70006ddc:	68f8      	ldr	r0, [r7, #12]
70006dde:	f7ff ffb8 	bl	70006d52 <prvInitialiseMutex>

        return xNewQueue;
70006de2:	68fb      	ldr	r3, [r7, #12]
    }
70006de4:	4618      	mov	r0, r3
70006de6:	3718      	adds	r7, #24
70006de8:	46bd      	mov	sp, r7
70006dea:	bd80      	pop	{r7, pc}

70006dec <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
70006dec:	b590      	push	{r4, r7, lr}
70006dee:	b087      	sub	sp, #28
70006df0:	af00      	add	r7, sp, #0
70006df2:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
70006df4:	687b      	ldr	r3, [r7, #4]
70006df6:	613b      	str	r3, [r7, #16]

        configASSERT( pxMutex );
70006df8:	693b      	ldr	r3, [r7, #16]
70006dfa:	2b00      	cmp	r3, #0
70006dfc:	d10b      	bne.n	70006e16 <xQueueGiveMutexRecursive+0x2a>
        __asm volatile
70006dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006e02:	f383 8811 	msr	BASEPRI, r3
70006e06:	f3bf 8f6f 	isb	sy
70006e0a:	f3bf 8f4f 	dsb	sy
70006e0e:	60fb      	str	r3, [r7, #12]
    }
70006e10:	bf00      	nop
70006e12:	bf00      	nop
70006e14:	e7fd      	b.n	70006e12 <xQueueGiveMutexRecursive+0x26>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
70006e16:	693b      	ldr	r3, [r7, #16]
70006e18:	689c      	ldr	r4, [r3, #8]
70006e1a:	f002 f885 	bl	70008f28 <xTaskGetCurrentTaskHandle>
70006e1e:	4603      	mov	r3, r0
70006e20:	429c      	cmp	r4, r3
70006e22:	d111      	bne.n	70006e48 <xQueueGiveMutexRecursive+0x5c>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
70006e24:	693b      	ldr	r3, [r7, #16]
70006e26:	68db      	ldr	r3, [r3, #12]
70006e28:	1e5a      	subs	r2, r3, #1
70006e2a:	693b      	ldr	r3, [r7, #16]
70006e2c:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
70006e2e:	693b      	ldr	r3, [r7, #16]
70006e30:	68db      	ldr	r3, [r3, #12]
70006e32:	2b00      	cmp	r3, #0
70006e34:	d105      	bne.n	70006e42 <xQueueGiveMutexRecursive+0x56>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
70006e36:	2300      	movs	r3, #0
70006e38:	2200      	movs	r2, #0
70006e3a:	2100      	movs	r1, #0
70006e3c:	6938      	ldr	r0, [r7, #16]
70006e3e:	f000 f8a3 	bl	70006f88 <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
70006e42:	2301      	movs	r3, #1
70006e44:	617b      	str	r3, [r7, #20]
70006e46:	e001      	b.n	70006e4c <xQueueGiveMutexRecursive+0x60>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
70006e48:	2300      	movs	r3, #0
70006e4a:	617b      	str	r3, [r7, #20]

            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        return xReturn;
70006e4c:	697b      	ldr	r3, [r7, #20]
    }
70006e4e:	4618      	mov	r0, r3
70006e50:	371c      	adds	r7, #28
70006e52:	46bd      	mov	sp, r7
70006e54:	bd90      	pop	{r4, r7, pc}

70006e56 <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
70006e56:	b590      	push	{r4, r7, lr}
70006e58:	b087      	sub	sp, #28
70006e5a:	af00      	add	r7, sp, #0
70006e5c:	6078      	str	r0, [r7, #4]
70006e5e:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
70006e60:	687b      	ldr	r3, [r7, #4]
70006e62:	613b      	str	r3, [r7, #16]

        configASSERT( pxMutex );
70006e64:	693b      	ldr	r3, [r7, #16]
70006e66:	2b00      	cmp	r3, #0
70006e68:	d10b      	bne.n	70006e82 <xQueueTakeMutexRecursive+0x2c>
        __asm volatile
70006e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006e6e:	f383 8811 	msr	BASEPRI, r3
70006e72:	f3bf 8f6f 	isb	sy
70006e76:	f3bf 8f4f 	dsb	sy
70006e7a:	60fb      	str	r3, [r7, #12]
    }
70006e7c:	bf00      	nop
70006e7e:	bf00      	nop
70006e80:	e7fd      	b.n	70006e7e <xQueueTakeMutexRecursive+0x28>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
70006e82:	693b      	ldr	r3, [r7, #16]
70006e84:	689c      	ldr	r4, [r3, #8]
70006e86:	f002 f84f 	bl	70008f28 <xTaskGetCurrentTaskHandle>
70006e8a:	4603      	mov	r3, r0
70006e8c:	429c      	cmp	r4, r3
70006e8e:	d107      	bne.n	70006ea0 <xQueueTakeMutexRecursive+0x4a>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
70006e90:	693b      	ldr	r3, [r7, #16]
70006e92:	68db      	ldr	r3, [r3, #12]
70006e94:	1c5a      	adds	r2, r3, #1
70006e96:	693b      	ldr	r3, [r7, #16]
70006e98:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
70006e9a:	2301      	movs	r3, #1
70006e9c:	617b      	str	r3, [r7, #20]
70006e9e:	e00c      	b.n	70006eba <xQueueTakeMutexRecursive+0x64>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
70006ea0:	6839      	ldr	r1, [r7, #0]
70006ea2:	6938      	ldr	r0, [r7, #16]
70006ea4:	f000 fbb2 	bl	7000760c <xQueueSemaphoreTake>
70006ea8:	6178      	str	r0, [r7, #20]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
70006eaa:	697b      	ldr	r3, [r7, #20]
70006eac:	2b00      	cmp	r3, #0
70006eae:	d004      	beq.n	70006eba <xQueueTakeMutexRecursive+0x64>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
70006eb0:	693b      	ldr	r3, [r7, #16]
70006eb2:	68db      	ldr	r3, [r3, #12]
70006eb4:	1c5a      	adds	r2, r3, #1
70006eb6:	693b      	ldr	r3, [r7, #16]
70006eb8:	60da      	str	r2, [r3, #12]
            {
                traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
            }
        }

        return xReturn;
70006eba:	697b      	ldr	r3, [r7, #20]
    }
70006ebc:	4618      	mov	r0, r3
70006ebe:	371c      	adds	r7, #28
70006ec0:	46bd      	mov	sp, r7
70006ec2:	bd90      	pop	{r4, r7, pc}

70006ec4 <xQueueCreateCountingSemaphoreStatic>:
#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                       const UBaseType_t uxInitialCount,
                                                       StaticQueue_t * pxStaticQueue )
    {
70006ec4:	b580      	push	{r7, lr}
70006ec6:	b088      	sub	sp, #32
70006ec8:	af02      	add	r7, sp, #8
70006eca:	60f8      	str	r0, [r7, #12]
70006ecc:	60b9      	str	r1, [r7, #8]
70006ece:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
70006ed0:	2300      	movs	r3, #0
70006ed2:	617b      	str	r3, [r7, #20]

        if( ( uxMaxCount != 0 ) &&
70006ed4:	68fb      	ldr	r3, [r7, #12]
70006ed6:	2b00      	cmp	r3, #0
70006ed8:	d013      	beq.n	70006f02 <xQueueCreateCountingSemaphoreStatic+0x3e>
70006eda:	68ba      	ldr	r2, [r7, #8]
70006edc:	68fb      	ldr	r3, [r7, #12]
70006ede:	429a      	cmp	r2, r3
70006ee0:	d80f      	bhi.n	70006f02 <xQueueCreateCountingSemaphoreStatic+0x3e>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
70006ee2:	2302      	movs	r3, #2
70006ee4:	9300      	str	r3, [sp, #0]
70006ee6:	687b      	ldr	r3, [r7, #4]
70006ee8:	2200      	movs	r2, #0
70006eea:	2100      	movs	r1, #0
70006eec:	68f8      	ldr	r0, [r7, #12]
70006eee:	f7ff fe59 	bl	70006ba4 <xQueueGenericCreateStatic>
70006ef2:	6178      	str	r0, [r7, #20]

            if( xHandle != NULL )
70006ef4:	697b      	ldr	r3, [r7, #20]
70006ef6:	2b00      	cmp	r3, #0
70006ef8:	d012      	beq.n	70006f20 <xQueueCreateCountingSemaphoreStatic+0x5c>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
70006efa:	697b      	ldr	r3, [r7, #20]
70006efc:	68ba      	ldr	r2, [r7, #8]
70006efe:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
70006f00:	e00e      	b.n	70006f20 <xQueueCreateCountingSemaphoreStatic+0x5c>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
70006f02:	697b      	ldr	r3, [r7, #20]
70006f04:	2b00      	cmp	r3, #0
70006f06:	d10b      	bne.n	70006f20 <xQueueCreateCountingSemaphoreStatic+0x5c>
        __asm volatile
70006f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006f0c:	f383 8811 	msr	BASEPRI, r3
70006f10:	f3bf 8f6f 	isb	sy
70006f14:	f3bf 8f4f 	dsb	sy
70006f18:	613b      	str	r3, [r7, #16]
    }
70006f1a:	bf00      	nop
70006f1c:	bf00      	nop
70006f1e:	e7fd      	b.n	70006f1c <xQueueCreateCountingSemaphoreStatic+0x58>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
70006f20:	697b      	ldr	r3, [r7, #20]
    }
70006f22:	4618      	mov	r0, r3
70006f24:	3718      	adds	r7, #24
70006f26:	46bd      	mov	sp, r7
70006f28:	bd80      	pop	{r7, pc}

70006f2a <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
70006f2a:	b580      	push	{r7, lr}
70006f2c:	b084      	sub	sp, #16
70006f2e:	af00      	add	r7, sp, #0
70006f30:	6078      	str	r0, [r7, #4]
70006f32:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
70006f34:	2300      	movs	r3, #0
70006f36:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
70006f38:	687b      	ldr	r3, [r7, #4]
70006f3a:	2b00      	cmp	r3, #0
70006f3c:	d010      	beq.n	70006f60 <xQueueCreateCountingSemaphore+0x36>
70006f3e:	683a      	ldr	r2, [r7, #0]
70006f40:	687b      	ldr	r3, [r7, #4]
70006f42:	429a      	cmp	r2, r3
70006f44:	d80c      	bhi.n	70006f60 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
70006f46:	2202      	movs	r2, #2
70006f48:	2100      	movs	r1, #0
70006f4a:	6878      	ldr	r0, [r7, #4]
70006f4c:	f7ff fe8b 	bl	70006c66 <xQueueGenericCreate>
70006f50:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
70006f52:	68fb      	ldr	r3, [r7, #12]
70006f54:	2b00      	cmp	r3, #0
70006f56:	d012      	beq.n	70006f7e <xQueueCreateCountingSemaphore+0x54>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
70006f58:	68fb      	ldr	r3, [r7, #12]
70006f5a:	683a      	ldr	r2, [r7, #0]
70006f5c:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
70006f5e:	e00e      	b.n	70006f7e <xQueueCreateCountingSemaphore+0x54>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
70006f60:	68fb      	ldr	r3, [r7, #12]
70006f62:	2b00      	cmp	r3, #0
70006f64:	d10b      	bne.n	70006f7e <xQueueCreateCountingSemaphore+0x54>
        __asm volatile
70006f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006f6a:	f383 8811 	msr	BASEPRI, r3
70006f6e:	f3bf 8f6f 	isb	sy
70006f72:	f3bf 8f4f 	dsb	sy
70006f76:	60bb      	str	r3, [r7, #8]
    }
70006f78:	bf00      	nop
70006f7a:	bf00      	nop
70006f7c:	e7fd      	b.n	70006f7a <xQueueCreateCountingSemaphore+0x50>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
70006f7e:	68fb      	ldr	r3, [r7, #12]
    }
70006f80:	4618      	mov	r0, r3
70006f82:	3710      	adds	r7, #16
70006f84:	46bd      	mov	sp, r7
70006f86:	bd80      	pop	{r7, pc}

70006f88 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
70006f88:	b580      	push	{r7, lr}
70006f8a:	b08e      	sub	sp, #56	@ 0x38
70006f8c:	af00      	add	r7, sp, #0
70006f8e:	60f8      	str	r0, [r7, #12]
70006f90:	60b9      	str	r1, [r7, #8]
70006f92:	607a      	str	r2, [r7, #4]
70006f94:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
70006f96:	2300      	movs	r3, #0
70006f98:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
70006f9a:	68fb      	ldr	r3, [r7, #12]
70006f9c:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
70006f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70006fa0:	2b00      	cmp	r3, #0
70006fa2:	d10b      	bne.n	70006fbc <xQueueGenericSend+0x34>
        __asm volatile
70006fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006fa8:	f383 8811 	msr	BASEPRI, r3
70006fac:	f3bf 8f6f 	isb	sy
70006fb0:	f3bf 8f4f 	dsb	sy
70006fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
70006fb6:	bf00      	nop
70006fb8:	bf00      	nop
70006fba:	e7fd      	b.n	70006fb8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
70006fbc:	68bb      	ldr	r3, [r7, #8]
70006fbe:	2b00      	cmp	r3, #0
70006fc0:	d103      	bne.n	70006fca <xQueueGenericSend+0x42>
70006fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70006fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70006fc6:	2b00      	cmp	r3, #0
70006fc8:	d101      	bne.n	70006fce <xQueueGenericSend+0x46>
70006fca:	2301      	movs	r3, #1
70006fcc:	e000      	b.n	70006fd0 <xQueueGenericSend+0x48>
70006fce:	2300      	movs	r3, #0
70006fd0:	2b00      	cmp	r3, #0
70006fd2:	d10b      	bne.n	70006fec <xQueueGenericSend+0x64>
        __asm volatile
70006fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006fd8:	f383 8811 	msr	BASEPRI, r3
70006fdc:	f3bf 8f6f 	isb	sy
70006fe0:	f3bf 8f4f 	dsb	sy
70006fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
70006fe6:	bf00      	nop
70006fe8:	bf00      	nop
70006fea:	e7fd      	b.n	70006fe8 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
70006fec:	683b      	ldr	r3, [r7, #0]
70006fee:	2b02      	cmp	r3, #2
70006ff0:	d103      	bne.n	70006ffa <xQueueGenericSend+0x72>
70006ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70006ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70006ff6:	2b01      	cmp	r3, #1
70006ff8:	d101      	bne.n	70006ffe <xQueueGenericSend+0x76>
70006ffa:	2301      	movs	r3, #1
70006ffc:	e000      	b.n	70007000 <xQueueGenericSend+0x78>
70006ffe:	2300      	movs	r3, #0
70007000:	2b00      	cmp	r3, #0
70007002:	d10b      	bne.n	7000701c <xQueueGenericSend+0x94>
        __asm volatile
70007004:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007008:	f383 8811 	msr	BASEPRI, r3
7000700c:	f3bf 8f6f 	isb	sy
70007010:	f3bf 8f4f 	dsb	sy
70007014:	623b      	str	r3, [r7, #32]
    }
70007016:	bf00      	nop
70007018:	bf00      	nop
7000701a:	e7fd      	b.n	70007018 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
7000701c:	f001 ff94 	bl	70008f48 <xTaskGetSchedulerState>
70007020:	4603      	mov	r3, r0
70007022:	2b00      	cmp	r3, #0
70007024:	d102      	bne.n	7000702c <xQueueGenericSend+0xa4>
70007026:	687b      	ldr	r3, [r7, #4]
70007028:	2b00      	cmp	r3, #0
7000702a:	d101      	bne.n	70007030 <xQueueGenericSend+0xa8>
7000702c:	2301      	movs	r3, #1
7000702e:	e000      	b.n	70007032 <xQueueGenericSend+0xaa>
70007030:	2300      	movs	r3, #0
70007032:	2b00      	cmp	r3, #0
70007034:	d10b      	bne.n	7000704e <xQueueGenericSend+0xc6>
        __asm volatile
70007036:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000703a:	f383 8811 	msr	BASEPRI, r3
7000703e:	f3bf 8f6f 	isb	sy
70007042:	f3bf 8f4f 	dsb	sy
70007046:	61fb      	str	r3, [r7, #28]
    }
70007048:	bf00      	nop
7000704a:	bf00      	nop
7000704c:	e7fd      	b.n	7000704a <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
7000704e:	f7ff fbed 	bl	7000682c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
70007052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
70007056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
7000705a:	429a      	cmp	r2, r3
7000705c:	d302      	bcc.n	70007064 <xQueueGenericSend+0xdc>
7000705e:	683b      	ldr	r3, [r7, #0]
70007060:	2b02      	cmp	r3, #2
70007062:	d129      	bne.n	700070b8 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
70007064:	683a      	ldr	r2, [r7, #0]
70007066:	68b9      	ldr	r1, [r7, #8]
70007068:	6b38      	ldr	r0, [r7, #48]	@ 0x30
7000706a:	f000 fca5 	bl	700079b8 <prvCopyDataToQueue>
7000706e:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
70007070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70007074:	2b00      	cmp	r3, #0
70007076:	d010      	beq.n	7000709a <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
70007078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000707a:	3324      	adds	r3, #36	@ 0x24
7000707c:	4618      	mov	r0, r3
7000707e:	f001 fd17 	bl	70008ab0 <xTaskRemoveFromEventList>
70007082:	4603      	mov	r3, r0
70007084:	2b00      	cmp	r3, #0
70007086:	d013      	beq.n	700070b0 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
70007088:	4b3f      	ldr	r3, [pc, #252]	@ (70007188 <xQueueGenericSend+0x200>)
7000708a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
7000708e:	601a      	str	r2, [r3, #0]
70007090:	f3bf 8f4f 	dsb	sy
70007094:	f3bf 8f6f 	isb	sy
70007098:	e00a      	b.n	700070b0 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
7000709a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000709c:	2b00      	cmp	r3, #0
7000709e:	d007      	beq.n	700070b0 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
700070a0:	4b39      	ldr	r3, [pc, #228]	@ (70007188 <xQueueGenericSend+0x200>)
700070a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
700070a6:	601a      	str	r2, [r3, #0]
700070a8:	f3bf 8f4f 	dsb	sy
700070ac:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
700070b0:	f7ff fbee 	bl	70006890 <vPortExitCritical>
                return pdPASS;
700070b4:	2301      	movs	r3, #1
700070b6:	e063      	b.n	70007180 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
700070b8:	687b      	ldr	r3, [r7, #4]
700070ba:	2b00      	cmp	r3, #0
700070bc:	d103      	bne.n	700070c6 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
700070be:	f7ff fbe7 	bl	70006890 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
700070c2:	2300      	movs	r3, #0
700070c4:	e05c      	b.n	70007180 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
700070c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
700070c8:	2b00      	cmp	r3, #0
700070ca:	d106      	bne.n	700070da <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
700070cc:	f107 0314 	add.w	r3, r7, #20
700070d0:	4618      	mov	r0, r3
700070d2:	f001 fdc5 	bl	70008c60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
700070d6:	2301      	movs	r3, #1
700070d8:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
700070da:	f7ff fbd9 	bl	70006890 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
700070de:	f001 f9c3 	bl	70008468 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
700070e2:	f7ff fba3 	bl	7000682c <vPortEnterCritical>
700070e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700070e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
700070ec:	b25b      	sxtb	r3, r3
700070ee:	f1b3 3fff 	cmp.w	r3, #4294967295
700070f2:	d103      	bne.n	700070fc <xQueueGenericSend+0x174>
700070f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700070f6:	2200      	movs	r2, #0
700070f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
700070fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700070fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
70007102:	b25b      	sxtb	r3, r3
70007104:	f1b3 3fff 	cmp.w	r3, #4294967295
70007108:	d103      	bne.n	70007112 <xQueueGenericSend+0x18a>
7000710a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000710c:	2200      	movs	r2, #0
7000710e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
70007112:	f7ff fbbd 	bl	70006890 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
70007116:	1d3a      	adds	r2, r7, #4
70007118:	f107 0314 	add.w	r3, r7, #20
7000711c:	4611      	mov	r1, r2
7000711e:	4618      	mov	r0, r3
70007120:	f001 fdb4 	bl	70008c8c <xTaskCheckForTimeOut>
70007124:	4603      	mov	r3, r0
70007126:	2b00      	cmp	r3, #0
70007128:	d124      	bne.n	70007174 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
7000712a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
7000712c:	f000 fd3c 	bl	70007ba8 <prvIsQueueFull>
70007130:	4603      	mov	r3, r0
70007132:	2b00      	cmp	r3, #0
70007134:	d018      	beq.n	70007168 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
70007136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007138:	3310      	adds	r3, #16
7000713a:	687a      	ldr	r2, [r7, #4]
7000713c:	4611      	mov	r1, r2
7000713e:	4618      	mov	r0, r3
70007140:	f001 fc4a 	bl	700089d8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
70007144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
70007146:	f000 fcc7 	bl	70007ad8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
7000714a:	f001 f99b 	bl	70008484 <xTaskResumeAll>
7000714e:	4603      	mov	r3, r0
70007150:	2b00      	cmp	r3, #0
70007152:	f47f af7c 	bne.w	7000704e <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
70007156:	4b0c      	ldr	r3, [pc, #48]	@ (70007188 <xQueueGenericSend+0x200>)
70007158:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
7000715c:	601a      	str	r2, [r3, #0]
7000715e:	f3bf 8f4f 	dsb	sy
70007162:	f3bf 8f6f 	isb	sy
70007166:	e772      	b.n	7000704e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
70007168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
7000716a:	f000 fcb5 	bl	70007ad8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
7000716e:	f001 f989 	bl	70008484 <xTaskResumeAll>
70007172:	e76c      	b.n	7000704e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
70007174:	6b38      	ldr	r0, [r7, #48]	@ 0x30
70007176:	f000 fcaf 	bl	70007ad8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
7000717a:	f001 f983 	bl	70008484 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
7000717e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
70007180:	4618      	mov	r0, r3
70007182:	3738      	adds	r7, #56	@ 0x38
70007184:	46bd      	mov	sp, r7
70007186:	bd80      	pop	{r7, pc}
70007188:	e000ed04 	.word	0xe000ed04

7000718c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
7000718c:	b580      	push	{r7, lr}
7000718e:	b092      	sub	sp, #72	@ 0x48
70007190:	af00      	add	r7, sp, #0
70007192:	60f8      	str	r0, [r7, #12]
70007194:	60b9      	str	r1, [r7, #8]
70007196:	607a      	str	r2, [r7, #4]
70007198:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
7000719a:	68fb      	ldr	r3, [r7, #12]
7000719c:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
7000719e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
700071a0:	2b00      	cmp	r3, #0
700071a2:	d10b      	bne.n	700071bc <xQueueGenericSendFromISR+0x30>
        __asm volatile
700071a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
700071a8:	f383 8811 	msr	BASEPRI, r3
700071ac:	f3bf 8f6f 	isb	sy
700071b0:	f3bf 8f4f 	dsb	sy
700071b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
700071b6:	bf00      	nop
700071b8:	bf00      	nop
700071ba:	e7fd      	b.n	700071b8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
700071bc:	68bb      	ldr	r3, [r7, #8]
700071be:	2b00      	cmp	r3, #0
700071c0:	d103      	bne.n	700071ca <xQueueGenericSendFromISR+0x3e>
700071c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
700071c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
700071c6:	2b00      	cmp	r3, #0
700071c8:	d101      	bne.n	700071ce <xQueueGenericSendFromISR+0x42>
700071ca:	2301      	movs	r3, #1
700071cc:	e000      	b.n	700071d0 <xQueueGenericSendFromISR+0x44>
700071ce:	2300      	movs	r3, #0
700071d0:	2b00      	cmp	r3, #0
700071d2:	d10b      	bne.n	700071ec <xQueueGenericSendFromISR+0x60>
        __asm volatile
700071d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
700071d8:	f383 8811 	msr	BASEPRI, r3
700071dc:	f3bf 8f6f 	isb	sy
700071e0:	f3bf 8f4f 	dsb	sy
700071e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
700071e6:	bf00      	nop
700071e8:	bf00      	nop
700071ea:	e7fd      	b.n	700071e8 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
700071ec:	683b      	ldr	r3, [r7, #0]
700071ee:	2b02      	cmp	r3, #2
700071f0:	d103      	bne.n	700071fa <xQueueGenericSendFromISR+0x6e>
700071f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
700071f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
700071f6:	2b01      	cmp	r3, #1
700071f8:	d101      	bne.n	700071fe <xQueueGenericSendFromISR+0x72>
700071fa:	2301      	movs	r3, #1
700071fc:	e000      	b.n	70007200 <xQueueGenericSendFromISR+0x74>
700071fe:	2300      	movs	r3, #0
70007200:	2b00      	cmp	r3, #0
70007202:	d10b      	bne.n	7000721c <xQueueGenericSendFromISR+0x90>
        __asm volatile
70007204:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007208:	f383 8811 	msr	BASEPRI, r3
7000720c:	f3bf 8f6f 	isb	sy
70007210:	f3bf 8f4f 	dsb	sy
70007214:	627b      	str	r3, [r7, #36]	@ 0x24
    }
70007216:	bf00      	nop
70007218:	bf00      	nop
7000721a:	e7fd      	b.n	70007218 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
7000721c:	f7ff fbee 	bl	700069fc <vPortValidateInterruptPriority>
        __asm volatile
70007220:	f3ef 8211 	mrs	r2, BASEPRI
70007224:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007228:	f383 8811 	msr	BASEPRI, r3
7000722c:	f3bf 8f6f 	isb	sy
70007230:	f3bf 8f4f 	dsb	sy
70007234:	623a      	str	r2, [r7, #32]
70007236:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
70007238:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
7000723a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
7000723c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
7000723e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
70007240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
70007242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70007244:	429a      	cmp	r2, r3
70007246:	d302      	bcc.n	7000724e <xQueueGenericSendFromISR+0xc2>
70007248:	683b      	ldr	r3, [r7, #0]
7000724a:	2b02      	cmp	r3, #2
7000724c:	d147      	bne.n	700072de <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
7000724e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
70007250:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
70007254:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
70007258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
7000725a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
7000725c:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
7000725e:	683a      	ldr	r2, [r7, #0]
70007260:	68b9      	ldr	r1, [r7, #8]
70007262:	6c38      	ldr	r0, [r7, #64]	@ 0x40
70007264:	f000 fba8 	bl	700079b8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
70007268:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
7000726c:	f1b3 3fff 	cmp.w	r3, #4294967295
70007270:	d112      	bne.n	70007298 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
70007272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
70007274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70007276:	2b00      	cmp	r3, #0
70007278:	d02e      	beq.n	700072d8 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
7000727a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
7000727c:	3324      	adds	r3, #36	@ 0x24
7000727e:	4618      	mov	r0, r3
70007280:	f001 fc16 	bl	70008ab0 <xTaskRemoveFromEventList>
70007284:	4603      	mov	r3, r0
70007286:	2b00      	cmp	r3, #0
70007288:	d026      	beq.n	700072d8 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
7000728a:	687b      	ldr	r3, [r7, #4]
7000728c:	2b00      	cmp	r3, #0
7000728e:	d023      	beq.n	700072d8 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
70007290:	687b      	ldr	r3, [r7, #4]
70007292:	2201      	movs	r2, #1
70007294:	601a      	str	r2, [r3, #0]
70007296:	e01f      	b.n	700072d8 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
70007298:	f001 fa14 	bl	700086c4 <uxTaskGetNumberOfTasks>
7000729c:	6338      	str	r0, [r7, #48]	@ 0x30
7000729e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
700072a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
700072a4:	429a      	cmp	r2, r3
700072a6:	d917      	bls.n	700072d8 <xQueueGenericSendFromISR+0x14c>
700072a8:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
700072ac:	2b7f      	cmp	r3, #127	@ 0x7f
700072ae:	d10b      	bne.n	700072c8 <xQueueGenericSendFromISR+0x13c>
        __asm volatile
700072b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
700072b4:	f383 8811 	msr	BASEPRI, r3
700072b8:	f3bf 8f6f 	isb	sy
700072bc:	f3bf 8f4f 	dsb	sy
700072c0:	61bb      	str	r3, [r7, #24]
    }
700072c2:	bf00      	nop
700072c4:	bf00      	nop
700072c6:	e7fd      	b.n	700072c4 <xQueueGenericSendFromISR+0x138>
700072c8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
700072cc:	3301      	adds	r3, #1
700072ce:	b2db      	uxtb	r3, r3
700072d0:	b25a      	sxtb	r2, r3
700072d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
700072d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
700072d8:	2301      	movs	r3, #1
700072da:	647b      	str	r3, [r7, #68]	@ 0x44
        {
700072dc:	e001      	b.n	700072e2 <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
700072de:	2300      	movs	r3, #0
700072e0:	647b      	str	r3, [r7, #68]	@ 0x44
700072e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
700072e4:	617b      	str	r3, [r7, #20]
        __asm volatile
700072e6:	697b      	ldr	r3, [r7, #20]
700072e8:	f383 8811 	msr	BASEPRI, r3
    }
700072ec:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
700072ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
700072f0:	4618      	mov	r0, r3
700072f2:	3748      	adds	r7, #72	@ 0x48
700072f4:	46bd      	mov	sp, r7
700072f6:	bd80      	pop	{r7, pc}

700072f8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
700072f8:	b580      	push	{r7, lr}
700072fa:	b090      	sub	sp, #64	@ 0x40
700072fc:	af00      	add	r7, sp, #0
700072fe:	6078      	str	r0, [r7, #4]
70007300:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
70007302:	687b      	ldr	r3, [r7, #4]
70007304:	63bb      	str	r3, [r7, #56]	@ 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
70007306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70007308:	2b00      	cmp	r3, #0
7000730a:	d10b      	bne.n	70007324 <xQueueGiveFromISR+0x2c>
        __asm volatile
7000730c:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007310:	f383 8811 	msr	BASEPRI, r3
70007314:	f3bf 8f6f 	isb	sy
70007318:	f3bf 8f4f 	dsb	sy
7000731c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
7000731e:	bf00      	nop
70007320:	bf00      	nop
70007322:	e7fd      	b.n	70007320 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
70007324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70007326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007328:	2b00      	cmp	r3, #0
7000732a:	d00b      	beq.n	70007344 <xQueueGiveFromISR+0x4c>
        __asm volatile
7000732c:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007330:	f383 8811 	msr	BASEPRI, r3
70007334:	f3bf 8f6f 	isb	sy
70007338:	f3bf 8f4f 	dsb	sy
7000733c:	623b      	str	r3, [r7, #32]
    }
7000733e:	bf00      	nop
70007340:	bf00      	nop
70007342:	e7fd      	b.n	70007340 <xQueueGiveFromISR+0x48>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
70007344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70007346:	681b      	ldr	r3, [r3, #0]
70007348:	2b00      	cmp	r3, #0
7000734a:	d103      	bne.n	70007354 <xQueueGiveFromISR+0x5c>
7000734c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7000734e:	689b      	ldr	r3, [r3, #8]
70007350:	2b00      	cmp	r3, #0
70007352:	d101      	bne.n	70007358 <xQueueGiveFromISR+0x60>
70007354:	2301      	movs	r3, #1
70007356:	e000      	b.n	7000735a <xQueueGiveFromISR+0x62>
70007358:	2300      	movs	r3, #0
7000735a:	2b00      	cmp	r3, #0
7000735c:	d10b      	bne.n	70007376 <xQueueGiveFromISR+0x7e>
        __asm volatile
7000735e:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007362:	f383 8811 	msr	BASEPRI, r3
70007366:	f3bf 8f6f 	isb	sy
7000736a:	f3bf 8f4f 	dsb	sy
7000736e:	61fb      	str	r3, [r7, #28]
    }
70007370:	bf00      	nop
70007372:	bf00      	nop
70007374:	e7fd      	b.n	70007372 <xQueueGiveFromISR+0x7a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
70007376:	f7ff fb41 	bl	700069fc <vPortValidateInterruptPriority>
        __asm volatile
7000737a:	f3ef 8211 	mrs	r2, BASEPRI
7000737e:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007382:	f383 8811 	msr	BASEPRI, r3
70007386:	f3bf 8f6f 	isb	sy
7000738a:	f3bf 8f4f 	dsb	sy
7000738e:	61ba      	str	r2, [r7, #24]
70007390:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
70007392:	69bb      	ldr	r3, [r7, #24]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
70007394:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
70007396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70007398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
7000739a:	633b      	str	r3, [r7, #48]	@ 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
7000739c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7000739e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
700073a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
700073a2:	429a      	cmp	r2, r3
700073a4:	d243      	bcs.n	7000742e <xQueueGiveFromISR+0x136>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
700073a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700073a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
700073ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
700073b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700073b2:	1c5a      	adds	r2, r3, #1
700073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700073b6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
700073b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
700073bc:	f1b3 3fff 	cmp.w	r3, #4294967295
700073c0:	d112      	bne.n	700073e8 <xQueueGiveFromISR+0xf0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
700073c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700073c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700073c6:	2b00      	cmp	r3, #0
700073c8:	d02e      	beq.n	70007428 <xQueueGiveFromISR+0x130>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
700073ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700073cc:	3324      	adds	r3, #36	@ 0x24
700073ce:	4618      	mov	r0, r3
700073d0:	f001 fb6e 	bl	70008ab0 <xTaskRemoveFromEventList>
700073d4:	4603      	mov	r3, r0
700073d6:	2b00      	cmp	r3, #0
700073d8:	d026      	beq.n	70007428 <xQueueGiveFromISR+0x130>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
700073da:	683b      	ldr	r3, [r7, #0]
700073dc:	2b00      	cmp	r3, #0
700073de:	d023      	beq.n	70007428 <xQueueGiveFromISR+0x130>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
700073e0:	683b      	ldr	r3, [r7, #0]
700073e2:	2201      	movs	r2, #1
700073e4:	601a      	str	r2, [r3, #0]
700073e6:	e01f      	b.n	70007428 <xQueueGiveFromISR+0x130>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
700073e8:	f001 f96c 	bl	700086c4 <uxTaskGetNumberOfTasks>
700073ec:	62b8      	str	r0, [r7, #40]	@ 0x28
700073ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
700073f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
700073f4:	429a      	cmp	r2, r3
700073f6:	d917      	bls.n	70007428 <xQueueGiveFromISR+0x130>
700073f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
700073fc:	2b7f      	cmp	r3, #127	@ 0x7f
700073fe:	d10b      	bne.n	70007418 <xQueueGiveFromISR+0x120>
        __asm volatile
70007400:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007404:	f383 8811 	msr	BASEPRI, r3
70007408:	f3bf 8f6f 	isb	sy
7000740c:	f3bf 8f4f 	dsb	sy
70007410:	613b      	str	r3, [r7, #16]
    }
70007412:	bf00      	nop
70007414:	bf00      	nop
70007416:	e7fd      	b.n	70007414 <xQueueGiveFromISR+0x11c>
70007418:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
7000741c:	3301      	adds	r3, #1
7000741e:	b2db      	uxtb	r3, r3
70007420:	b25a      	sxtb	r2, r3
70007422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70007424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
70007428:	2301      	movs	r3, #1
7000742a:	63fb      	str	r3, [r7, #60]	@ 0x3c
7000742c:	e001      	b.n	70007432 <xQueueGiveFromISR+0x13a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
7000742e:	2300      	movs	r3, #0
70007430:	63fb      	str	r3, [r7, #60]	@ 0x3c
70007432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70007434:	60fb      	str	r3, [r7, #12]
        __asm volatile
70007436:	68fb      	ldr	r3, [r7, #12]
70007438:	f383 8811 	msr	BASEPRI, r3
    }
7000743c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
7000743e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
70007440:	4618      	mov	r0, r3
70007442:	3740      	adds	r7, #64	@ 0x40
70007444:	46bd      	mov	sp, r7
70007446:	bd80      	pop	{r7, pc}

70007448 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
70007448:	b580      	push	{r7, lr}
7000744a:	b08c      	sub	sp, #48	@ 0x30
7000744c:	af00      	add	r7, sp, #0
7000744e:	60f8      	str	r0, [r7, #12]
70007450:	60b9      	str	r1, [r7, #8]
70007452:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
70007454:	2300      	movs	r3, #0
70007456:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
70007458:	68fb      	ldr	r3, [r7, #12]
7000745a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
7000745c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000745e:	2b00      	cmp	r3, #0
70007460:	d10b      	bne.n	7000747a <xQueueReceive+0x32>
        __asm volatile
70007462:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007466:	f383 8811 	msr	BASEPRI, r3
7000746a:	f3bf 8f6f 	isb	sy
7000746e:	f3bf 8f4f 	dsb	sy
70007472:	623b      	str	r3, [r7, #32]
    }
70007474:	bf00      	nop
70007476:	bf00      	nop
70007478:	e7fd      	b.n	70007476 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
7000747a:	68bb      	ldr	r3, [r7, #8]
7000747c:	2b00      	cmp	r3, #0
7000747e:	d103      	bne.n	70007488 <xQueueReceive+0x40>
70007480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70007482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007484:	2b00      	cmp	r3, #0
70007486:	d101      	bne.n	7000748c <xQueueReceive+0x44>
70007488:	2301      	movs	r3, #1
7000748a:	e000      	b.n	7000748e <xQueueReceive+0x46>
7000748c:	2300      	movs	r3, #0
7000748e:	2b00      	cmp	r3, #0
70007490:	d10b      	bne.n	700074aa <xQueueReceive+0x62>
        __asm volatile
70007492:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007496:	f383 8811 	msr	BASEPRI, r3
7000749a:	f3bf 8f6f 	isb	sy
7000749e:	f3bf 8f4f 	dsb	sy
700074a2:	61fb      	str	r3, [r7, #28]
    }
700074a4:	bf00      	nop
700074a6:	bf00      	nop
700074a8:	e7fd      	b.n	700074a6 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
700074aa:	f001 fd4d 	bl	70008f48 <xTaskGetSchedulerState>
700074ae:	4603      	mov	r3, r0
700074b0:	2b00      	cmp	r3, #0
700074b2:	d102      	bne.n	700074ba <xQueueReceive+0x72>
700074b4:	687b      	ldr	r3, [r7, #4]
700074b6:	2b00      	cmp	r3, #0
700074b8:	d101      	bne.n	700074be <xQueueReceive+0x76>
700074ba:	2301      	movs	r3, #1
700074bc:	e000      	b.n	700074c0 <xQueueReceive+0x78>
700074be:	2300      	movs	r3, #0
700074c0:	2b00      	cmp	r3, #0
700074c2:	d10b      	bne.n	700074dc <xQueueReceive+0x94>
        __asm volatile
700074c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
700074c8:	f383 8811 	msr	BASEPRI, r3
700074cc:	f3bf 8f6f 	isb	sy
700074d0:	f3bf 8f4f 	dsb	sy
700074d4:	61bb      	str	r3, [r7, #24]
    }
700074d6:	bf00      	nop
700074d8:	bf00      	nop
700074da:	e7fd      	b.n	700074d8 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
700074dc:	f7ff f9a6 	bl	7000682c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
700074e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700074e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
700074e4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
700074e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700074e8:	2b00      	cmp	r3, #0
700074ea:	d01f      	beq.n	7000752c <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
700074ec:	68b9      	ldr	r1, [r7, #8]
700074ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
700074f0:	f000 facc 	bl	70007a8c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
700074f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700074f6:	1e5a      	subs	r2, r3, #1
700074f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700074fa:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
700074fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700074fe:	691b      	ldr	r3, [r3, #16]
70007500:	2b00      	cmp	r3, #0
70007502:	d00f      	beq.n	70007524 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
70007504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70007506:	3310      	adds	r3, #16
70007508:	4618      	mov	r0, r3
7000750a:	f001 fad1 	bl	70008ab0 <xTaskRemoveFromEventList>
7000750e:	4603      	mov	r3, r0
70007510:	2b00      	cmp	r3, #0
70007512:	d007      	beq.n	70007524 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
70007514:	4b3c      	ldr	r3, [pc, #240]	@ (70007608 <xQueueReceive+0x1c0>)
70007516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
7000751a:	601a      	str	r2, [r3, #0]
7000751c:	f3bf 8f4f 	dsb	sy
70007520:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
70007524:	f7ff f9b4 	bl	70006890 <vPortExitCritical>
                return pdPASS;
70007528:	2301      	movs	r3, #1
7000752a:	e069      	b.n	70007600 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
7000752c:	687b      	ldr	r3, [r7, #4]
7000752e:	2b00      	cmp	r3, #0
70007530:	d103      	bne.n	7000753a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
70007532:	f7ff f9ad 	bl	70006890 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
70007536:	2300      	movs	r3, #0
70007538:	e062      	b.n	70007600 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
7000753a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000753c:	2b00      	cmp	r3, #0
7000753e:	d106      	bne.n	7000754e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
70007540:	f107 0310 	add.w	r3, r7, #16
70007544:	4618      	mov	r0, r3
70007546:	f001 fb8b 	bl	70008c60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
7000754a:	2301      	movs	r3, #1
7000754c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
7000754e:	f7ff f99f 	bl	70006890 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
70007552:	f000 ff89 	bl	70008468 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
70007556:	f7ff f969 	bl	7000682c <vPortEnterCritical>
7000755a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000755c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
70007560:	b25b      	sxtb	r3, r3
70007562:	f1b3 3fff 	cmp.w	r3, #4294967295
70007566:	d103      	bne.n	70007570 <xQueueReceive+0x128>
70007568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000756a:	2200      	movs	r2, #0
7000756c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
70007570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70007572:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
70007576:	b25b      	sxtb	r3, r3
70007578:	f1b3 3fff 	cmp.w	r3, #4294967295
7000757c:	d103      	bne.n	70007586 <xQueueReceive+0x13e>
7000757e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70007580:	2200      	movs	r2, #0
70007582:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
70007586:	f7ff f983 	bl	70006890 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
7000758a:	1d3a      	adds	r2, r7, #4
7000758c:	f107 0310 	add.w	r3, r7, #16
70007590:	4611      	mov	r1, r2
70007592:	4618      	mov	r0, r3
70007594:	f001 fb7a 	bl	70008c8c <xTaskCheckForTimeOut>
70007598:	4603      	mov	r3, r0
7000759a:	2b00      	cmp	r3, #0
7000759c:	d123      	bne.n	700075e6 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
7000759e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
700075a0:	f000 faec 	bl	70007b7c <prvIsQueueEmpty>
700075a4:	4603      	mov	r3, r0
700075a6:	2b00      	cmp	r3, #0
700075a8:	d017      	beq.n	700075da <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
700075aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700075ac:	3324      	adds	r3, #36	@ 0x24
700075ae:	687a      	ldr	r2, [r7, #4]
700075b0:	4611      	mov	r1, r2
700075b2:	4618      	mov	r0, r3
700075b4:	f001 fa10 	bl	700089d8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
700075b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
700075ba:	f000 fa8d 	bl	70007ad8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
700075be:	f000 ff61 	bl	70008484 <xTaskResumeAll>
700075c2:	4603      	mov	r3, r0
700075c4:	2b00      	cmp	r3, #0
700075c6:	d189      	bne.n	700074dc <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
700075c8:	4b0f      	ldr	r3, [pc, #60]	@ (70007608 <xQueueReceive+0x1c0>)
700075ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
700075ce:	601a      	str	r2, [r3, #0]
700075d0:	f3bf 8f4f 	dsb	sy
700075d4:	f3bf 8f6f 	isb	sy
700075d8:	e780      	b.n	700074dc <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
700075da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
700075dc:	f000 fa7c 	bl	70007ad8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
700075e0:	f000 ff50 	bl	70008484 <xTaskResumeAll>
700075e4:	e77a      	b.n	700074dc <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
700075e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
700075e8:	f000 fa76 	bl	70007ad8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
700075ec:	f000 ff4a 	bl	70008484 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
700075f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
700075f2:	f000 fac3 	bl	70007b7c <prvIsQueueEmpty>
700075f6:	4603      	mov	r3, r0
700075f8:	2b00      	cmp	r3, #0
700075fa:	f43f af6f 	beq.w	700074dc <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
700075fe:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
70007600:	4618      	mov	r0, r3
70007602:	3730      	adds	r7, #48	@ 0x30
70007604:	46bd      	mov	sp, r7
70007606:	bd80      	pop	{r7, pc}
70007608:	e000ed04 	.word	0xe000ed04

7000760c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
7000760c:	b580      	push	{r7, lr}
7000760e:	b08c      	sub	sp, #48	@ 0x30
70007610:	af00      	add	r7, sp, #0
70007612:	6078      	str	r0, [r7, #4]
70007614:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
70007616:	2300      	movs	r3, #0
70007618:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
7000761a:	687b      	ldr	r3, [r7, #4]
7000761c:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
7000761e:	2300      	movs	r3, #0
70007620:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
70007622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007624:	2b00      	cmp	r3, #0
70007626:	d10b      	bne.n	70007640 <xQueueSemaphoreTake+0x34>
        __asm volatile
70007628:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000762c:	f383 8811 	msr	BASEPRI, r3
70007630:	f3bf 8f6f 	isb	sy
70007634:	f3bf 8f4f 	dsb	sy
70007638:	61bb      	str	r3, [r7, #24]
    }
7000763a:	bf00      	nop
7000763c:	bf00      	nop
7000763e:	e7fd      	b.n	7000763c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
70007640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007644:	2b00      	cmp	r3, #0
70007646:	d00b      	beq.n	70007660 <xQueueSemaphoreTake+0x54>
        __asm volatile
70007648:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000764c:	f383 8811 	msr	BASEPRI, r3
70007650:	f3bf 8f6f 	isb	sy
70007654:	f3bf 8f4f 	dsb	sy
70007658:	617b      	str	r3, [r7, #20]
    }
7000765a:	bf00      	nop
7000765c:	bf00      	nop
7000765e:	e7fd      	b.n	7000765c <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
70007660:	f001 fc72 	bl	70008f48 <xTaskGetSchedulerState>
70007664:	4603      	mov	r3, r0
70007666:	2b00      	cmp	r3, #0
70007668:	d102      	bne.n	70007670 <xQueueSemaphoreTake+0x64>
7000766a:	683b      	ldr	r3, [r7, #0]
7000766c:	2b00      	cmp	r3, #0
7000766e:	d101      	bne.n	70007674 <xQueueSemaphoreTake+0x68>
70007670:	2301      	movs	r3, #1
70007672:	e000      	b.n	70007676 <xQueueSemaphoreTake+0x6a>
70007674:	2300      	movs	r3, #0
70007676:	2b00      	cmp	r3, #0
70007678:	d10b      	bne.n	70007692 <xQueueSemaphoreTake+0x86>
        __asm volatile
7000767a:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000767e:	f383 8811 	msr	BASEPRI, r3
70007682:	f3bf 8f6f 	isb	sy
70007686:	f3bf 8f4f 	dsb	sy
7000768a:	613b      	str	r3, [r7, #16]
    }
7000768c:	bf00      	nop
7000768e:	bf00      	nop
70007690:	e7fd      	b.n	7000768e <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
70007692:	f7ff f8cb 	bl	7000682c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
70007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
7000769a:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
7000769c:	6a3b      	ldr	r3, [r7, #32]
7000769e:	2b00      	cmp	r3, #0
700076a0:	d024      	beq.n	700076ec <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
700076a2:	6a3b      	ldr	r3, [r7, #32]
700076a4:	1e5a      	subs	r2, r3, #1
700076a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700076a8:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
700076aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700076ac:	681b      	ldr	r3, [r3, #0]
700076ae:	2b00      	cmp	r3, #0
700076b0:	d104      	bne.n	700076bc <xQueueSemaphoreTake+0xb0>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
700076b2:	f001 fe3b 	bl	7000932c <pvTaskIncrementMutexHeldCount>
700076b6:	4602      	mov	r2, r0
700076b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700076ba:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
700076bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700076be:	691b      	ldr	r3, [r3, #16]
700076c0:	2b00      	cmp	r3, #0
700076c2:	d00f      	beq.n	700076e4 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
700076c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700076c6:	3310      	adds	r3, #16
700076c8:	4618      	mov	r0, r3
700076ca:	f001 f9f1 	bl	70008ab0 <xTaskRemoveFromEventList>
700076ce:	4603      	mov	r3, r0
700076d0:	2b00      	cmp	r3, #0
700076d2:	d007      	beq.n	700076e4 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
700076d4:	4b4c      	ldr	r3, [pc, #304]	@ (70007808 <xQueueSemaphoreTake+0x1fc>)
700076d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
700076da:	601a      	str	r2, [r3, #0]
700076dc:	f3bf 8f4f 	dsb	sy
700076e0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
700076e4:	f7ff f8d4 	bl	70006890 <vPortExitCritical>
                return pdPASS;
700076e8:	2301      	movs	r3, #1
700076ea:	e089      	b.n	70007800 <xQueueSemaphoreTake+0x1f4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
700076ec:	683b      	ldr	r3, [r7, #0]
700076ee:	2b00      	cmp	r3, #0
700076f0:	d103      	bne.n	700076fa <xQueueSemaphoreTake+0xee>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
700076f2:	f7ff f8cd 	bl	70006890 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
700076f6:	2300      	movs	r3, #0
700076f8:	e082      	b.n	70007800 <xQueueSemaphoreTake+0x1f4>
                }
                else if( xEntryTimeSet == pdFALSE )
700076fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
700076fc:	2b00      	cmp	r3, #0
700076fe:	d106      	bne.n	7000770e <xQueueSemaphoreTake+0x102>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
70007700:	f107 0308 	add.w	r3, r7, #8
70007704:	4618      	mov	r0, r3
70007706:	f001 faab 	bl	70008c60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
7000770a:	2301      	movs	r3, #1
7000770c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
7000770e:	f7ff f8bf 	bl	70006890 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
70007712:	f000 fea9 	bl	70008468 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
70007716:	f7ff f889 	bl	7000682c <vPortEnterCritical>
7000771a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000771c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
70007720:	b25b      	sxtb	r3, r3
70007722:	f1b3 3fff 	cmp.w	r3, #4294967295
70007726:	d103      	bne.n	70007730 <xQueueSemaphoreTake+0x124>
70007728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000772a:	2200      	movs	r2, #0
7000772c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
70007730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007732:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
70007736:	b25b      	sxtb	r3, r3
70007738:	f1b3 3fff 	cmp.w	r3, #4294967295
7000773c:	d103      	bne.n	70007746 <xQueueSemaphoreTake+0x13a>
7000773e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007740:	2200      	movs	r2, #0
70007742:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
70007746:	f7ff f8a3 	bl	70006890 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
7000774a:	463a      	mov	r2, r7
7000774c:	f107 0308 	add.w	r3, r7, #8
70007750:	4611      	mov	r1, r2
70007752:	4618      	mov	r0, r3
70007754:	f001 fa9a 	bl	70008c8c <xTaskCheckForTimeOut>
70007758:	4603      	mov	r3, r0
7000775a:	2b00      	cmp	r3, #0
7000775c:	d132      	bne.n	700077c4 <xQueueSemaphoreTake+0x1b8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
7000775e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
70007760:	f000 fa0c 	bl	70007b7c <prvIsQueueEmpty>
70007764:	4603      	mov	r3, r0
70007766:	2b00      	cmp	r3, #0
70007768:	d026      	beq.n	700077b8 <xQueueSemaphoreTake+0x1ac>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
7000776a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000776c:	681b      	ldr	r3, [r3, #0]
7000776e:	2b00      	cmp	r3, #0
70007770:	d109      	bne.n	70007786 <xQueueSemaphoreTake+0x17a>
                    {
                        taskENTER_CRITICAL();
70007772:	f7ff f85b 	bl	7000682c <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
70007776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007778:	689b      	ldr	r3, [r3, #8]
7000777a:	4618      	mov	r0, r3
7000777c:	f001 fc02 	bl	70008f84 <xTaskPriorityInherit>
70007780:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
70007782:	f7ff f885 	bl	70006890 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
70007786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007788:	3324      	adds	r3, #36	@ 0x24
7000778a:	683a      	ldr	r2, [r7, #0]
7000778c:	4611      	mov	r1, r2
7000778e:	4618      	mov	r0, r3
70007790:	f001 f922 	bl	700089d8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
70007794:	6a78      	ldr	r0, [r7, #36]	@ 0x24
70007796:	f000 f99f 	bl	70007ad8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
7000779a:	f000 fe73 	bl	70008484 <xTaskResumeAll>
7000779e:	4603      	mov	r3, r0
700077a0:	2b00      	cmp	r3, #0
700077a2:	f47f af76 	bne.w	70007692 <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
700077a6:	4b18      	ldr	r3, [pc, #96]	@ (70007808 <xQueueSemaphoreTake+0x1fc>)
700077a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
700077ac:	601a      	str	r2, [r3, #0]
700077ae:	f3bf 8f4f 	dsb	sy
700077b2:	f3bf 8f6f 	isb	sy
700077b6:	e76c      	b.n	70007692 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
700077b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
700077ba:	f000 f98d 	bl	70007ad8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
700077be:	f000 fe61 	bl	70008484 <xTaskResumeAll>
700077c2:	e766      	b.n	70007692 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
700077c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
700077c6:	f000 f987 	bl	70007ad8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
700077ca:	f000 fe5b 	bl	70008484 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
700077ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
700077d0:	f000 f9d4 	bl	70007b7c <prvIsQueueEmpty>
700077d4:	4603      	mov	r3, r0
700077d6:	2b00      	cmp	r3, #0
700077d8:	f43f af5b 	beq.w	70007692 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
700077dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700077de:	2b00      	cmp	r3, #0
700077e0:	d00d      	beq.n	700077fe <xQueueSemaphoreTake+0x1f2>
                    {
                        taskENTER_CRITICAL();
700077e2:	f7ff f823 	bl	7000682c <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
700077e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
700077e8:	f000 f8ce 	bl	70007988 <prvGetDisinheritPriorityAfterTimeout>
700077ec:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
700077ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700077f0:	689b      	ldr	r3, [r3, #8]
700077f2:	69f9      	ldr	r1, [r7, #28]
700077f4:	4618      	mov	r0, r3
700077f6:	f001 fced 	bl	700091d4 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
700077fa:	f7ff f849 	bl	70006890 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
700077fe:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
70007800:	4618      	mov	r0, r3
70007802:	3730      	adds	r7, #48	@ 0x30
70007804:	46bd      	mov	sp, r7
70007806:	bd80      	pop	{r7, pc}
70007808:	e000ed04 	.word	0xe000ed04

7000780c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
7000780c:	b580      	push	{r7, lr}
7000780e:	b090      	sub	sp, #64	@ 0x40
70007810:	af00      	add	r7, sp, #0
70007812:	60f8      	str	r0, [r7, #12]
70007814:	60b9      	str	r1, [r7, #8]
70007816:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
70007818:	68fb      	ldr	r3, [r7, #12]
7000781a:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
7000781c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7000781e:	2b00      	cmp	r3, #0
70007820:	d10b      	bne.n	7000783a <xQueueReceiveFromISR+0x2e>
        __asm volatile
70007822:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007826:	f383 8811 	msr	BASEPRI, r3
7000782a:	f3bf 8f6f 	isb	sy
7000782e:	f3bf 8f4f 	dsb	sy
70007832:	627b      	str	r3, [r7, #36]	@ 0x24
    }
70007834:	bf00      	nop
70007836:	bf00      	nop
70007838:	e7fd      	b.n	70007836 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
7000783a:	68bb      	ldr	r3, [r7, #8]
7000783c:	2b00      	cmp	r3, #0
7000783e:	d103      	bne.n	70007848 <xQueueReceiveFromISR+0x3c>
70007840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70007842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007844:	2b00      	cmp	r3, #0
70007846:	d101      	bne.n	7000784c <xQueueReceiveFromISR+0x40>
70007848:	2301      	movs	r3, #1
7000784a:	e000      	b.n	7000784e <xQueueReceiveFromISR+0x42>
7000784c:	2300      	movs	r3, #0
7000784e:	2b00      	cmp	r3, #0
70007850:	d10b      	bne.n	7000786a <xQueueReceiveFromISR+0x5e>
        __asm volatile
70007852:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007856:	f383 8811 	msr	BASEPRI, r3
7000785a:	f3bf 8f6f 	isb	sy
7000785e:	f3bf 8f4f 	dsb	sy
70007862:	623b      	str	r3, [r7, #32]
    }
70007864:	bf00      	nop
70007866:	bf00      	nop
70007868:	e7fd      	b.n	70007866 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
7000786a:	f7ff f8c7 	bl	700069fc <vPortValidateInterruptPriority>
        __asm volatile
7000786e:	f3ef 8211 	mrs	r2, BASEPRI
70007872:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007876:	f383 8811 	msr	BASEPRI, r3
7000787a:	f3bf 8f6f 	isb	sy
7000787e:	f3bf 8f4f 	dsb	sy
70007882:	61fa      	str	r2, [r7, #28]
70007884:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
70007886:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
70007888:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
7000788a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7000788c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
7000788e:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
70007890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007892:	2b00      	cmp	r3, #0
70007894:	d047      	beq.n	70007926 <xQueueReceiveFromISR+0x11a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
70007896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70007898:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
7000789c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
700078a0:	68b9      	ldr	r1, [r7, #8]
700078a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
700078a4:	f000 f8f2 	bl	70007a8c <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
700078a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700078aa:	1e5a      	subs	r2, r3, #1
700078ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700078ae:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
700078b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
700078b4:	f1b3 3fff 	cmp.w	r3, #4294967295
700078b8:	d112      	bne.n	700078e0 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
700078ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700078bc:	691b      	ldr	r3, [r3, #16]
700078be:	2b00      	cmp	r3, #0
700078c0:	d02e      	beq.n	70007920 <xQueueReceiveFromISR+0x114>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
700078c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700078c4:	3310      	adds	r3, #16
700078c6:	4618      	mov	r0, r3
700078c8:	f001 f8f2 	bl	70008ab0 <xTaskRemoveFromEventList>
700078cc:	4603      	mov	r3, r0
700078ce:	2b00      	cmp	r3, #0
700078d0:	d026      	beq.n	70007920 <xQueueReceiveFromISR+0x114>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
700078d2:	687b      	ldr	r3, [r7, #4]
700078d4:	2b00      	cmp	r3, #0
700078d6:	d023      	beq.n	70007920 <xQueueReceiveFromISR+0x114>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
700078d8:	687b      	ldr	r3, [r7, #4]
700078da:	2201      	movs	r2, #1
700078dc:	601a      	str	r2, [r3, #0]
700078de:	e01f      	b.n	70007920 <xQueueReceiveFromISR+0x114>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
700078e0:	f000 fef0 	bl	700086c4 <uxTaskGetNumberOfTasks>
700078e4:	62b8      	str	r0, [r7, #40]	@ 0x28
700078e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
700078ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
700078ec:	429a      	cmp	r2, r3
700078ee:	d917      	bls.n	70007920 <xQueueReceiveFromISR+0x114>
700078f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
700078f4:	2b7f      	cmp	r3, #127	@ 0x7f
700078f6:	d10b      	bne.n	70007910 <xQueueReceiveFromISR+0x104>
        __asm volatile
700078f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
700078fc:	f383 8811 	msr	BASEPRI, r3
70007900:	f3bf 8f6f 	isb	sy
70007904:	f3bf 8f4f 	dsb	sy
70007908:	617b      	str	r3, [r7, #20]
    }
7000790a:	bf00      	nop
7000790c:	bf00      	nop
7000790e:	e7fd      	b.n	7000790c <xQueueReceiveFromISR+0x100>
70007910:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
70007914:	3301      	adds	r3, #1
70007916:	b2db      	uxtb	r3, r3
70007918:	b25a      	sxtb	r2, r3
7000791a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7000791c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
70007920:	2301      	movs	r3, #1
70007922:	63fb      	str	r3, [r7, #60]	@ 0x3c
70007924:	e001      	b.n	7000792a <xQueueReceiveFromISR+0x11e>
        }
        else
        {
            xReturn = pdFAIL;
70007926:	2300      	movs	r3, #0
70007928:	63fb      	str	r3, [r7, #60]	@ 0x3c
7000792a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7000792c:	613b      	str	r3, [r7, #16]
        __asm volatile
7000792e:	693b      	ldr	r3, [r7, #16]
70007930:	f383 8811 	msr	BASEPRI, r3
    }
70007934:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
70007936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
70007938:	4618      	mov	r0, r3
7000793a:	3740      	adds	r7, #64	@ 0x40
7000793c:	46bd      	mov	sp, r7
7000793e:	bd80      	pop	{r7, pc}

70007940 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
70007940:	b580      	push	{r7, lr}
70007942:	b084      	sub	sp, #16
70007944:	af00      	add	r7, sp, #0
70007946:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
70007948:	687b      	ldr	r3, [r7, #4]
7000794a:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
7000794c:	68fb      	ldr	r3, [r7, #12]
7000794e:	2b00      	cmp	r3, #0
70007950:	d10b      	bne.n	7000796a <vQueueDelete+0x2a>
        __asm volatile
70007952:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007956:	f383 8811 	msr	BASEPRI, r3
7000795a:	f3bf 8f6f 	isb	sy
7000795e:	f3bf 8f4f 	dsb	sy
70007962:	60bb      	str	r3, [r7, #8]
    }
70007964:	bf00      	nop
70007966:	bf00      	nop
70007968:	e7fd      	b.n	70007966 <vQueueDelete+0x26>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
7000796a:	68f8      	ldr	r0, [r7, #12]
7000796c:	f000 f984 	bl	70007c78 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
70007970:	68fb      	ldr	r3, [r7, #12]
70007972:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
70007976:	2b00      	cmp	r3, #0
70007978:	d102      	bne.n	70007980 <vQueueDelete+0x40>
        {
            vPortFree( pxQueue );
7000797a:	68f8      	ldr	r0, [r7, #12]
7000797c:	f7fe fc5a 	bl	70006234 <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
70007980:	bf00      	nop
70007982:	3710      	adds	r7, #16
70007984:	46bd      	mov	sp, r7
70007986:	bd80      	pop	{r7, pc}

70007988 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
70007988:	b480      	push	{r7}
7000798a:	b085      	sub	sp, #20
7000798c:	af00      	add	r7, sp, #0
7000798e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
70007990:	687b      	ldr	r3, [r7, #4]
70007992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70007994:	2b00      	cmp	r3, #0
70007996:	d006      	beq.n	700079a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
70007998:	687b      	ldr	r3, [r7, #4]
7000799a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
7000799c:	681b      	ldr	r3, [r3, #0]
7000799e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
700079a2:	60fb      	str	r3, [r7, #12]
700079a4:	e001      	b.n	700079aa <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
700079a6:	2300      	movs	r3, #0
700079a8:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
700079aa:	68fb      	ldr	r3, [r7, #12]
    }
700079ac:	4618      	mov	r0, r3
700079ae:	3714      	adds	r7, #20
700079b0:	46bd      	mov	sp, r7
700079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
700079b6:	4770      	bx	lr

700079b8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
700079b8:	b580      	push	{r7, lr}
700079ba:	b086      	sub	sp, #24
700079bc:	af00      	add	r7, sp, #0
700079be:	60f8      	str	r0, [r7, #12]
700079c0:	60b9      	str	r1, [r7, #8]
700079c2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
700079c4:	2300      	movs	r3, #0
700079c6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
700079c8:	68fb      	ldr	r3, [r7, #12]
700079ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
700079cc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
700079ce:	68fb      	ldr	r3, [r7, #12]
700079d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
700079d2:	2b00      	cmp	r3, #0
700079d4:	d10d      	bne.n	700079f2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
700079d6:	68fb      	ldr	r3, [r7, #12]
700079d8:	681b      	ldr	r3, [r3, #0]
700079da:	2b00      	cmp	r3, #0
700079dc:	d14d      	bne.n	70007a7a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
700079de:	68fb      	ldr	r3, [r7, #12]
700079e0:	689b      	ldr	r3, [r3, #8]
700079e2:	4618      	mov	r0, r3
700079e4:	f001 fb5e 	bl	700090a4 <xTaskPriorityDisinherit>
700079e8:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
700079ea:	68fb      	ldr	r3, [r7, #12]
700079ec:	2200      	movs	r2, #0
700079ee:	609a      	str	r2, [r3, #8]
700079f0:	e043      	b.n	70007a7a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
700079f2:	687b      	ldr	r3, [r7, #4]
700079f4:	2b00      	cmp	r3, #0
700079f6:	d119      	bne.n	70007a2c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
700079f8:	68fb      	ldr	r3, [r7, #12]
700079fa:	6858      	ldr	r0, [r3, #4]
700079fc:	68fb      	ldr	r3, [r7, #12]
700079fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007a00:	461a      	mov	r2, r3
70007a02:	68b9      	ldr	r1, [r7, #8]
70007a04:	f00c fab5 	bl	70013f72 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
70007a08:	68fb      	ldr	r3, [r7, #12]
70007a0a:	685a      	ldr	r2, [r3, #4]
70007a0c:	68fb      	ldr	r3, [r7, #12]
70007a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007a10:	441a      	add	r2, r3
70007a12:	68fb      	ldr	r3, [r7, #12]
70007a14:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
70007a16:	68fb      	ldr	r3, [r7, #12]
70007a18:	685a      	ldr	r2, [r3, #4]
70007a1a:	68fb      	ldr	r3, [r7, #12]
70007a1c:	689b      	ldr	r3, [r3, #8]
70007a1e:	429a      	cmp	r2, r3
70007a20:	d32b      	bcc.n	70007a7a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
70007a22:	68fb      	ldr	r3, [r7, #12]
70007a24:	681a      	ldr	r2, [r3, #0]
70007a26:	68fb      	ldr	r3, [r7, #12]
70007a28:	605a      	str	r2, [r3, #4]
70007a2a:	e026      	b.n	70007a7a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
70007a2c:	68fb      	ldr	r3, [r7, #12]
70007a2e:	68d8      	ldr	r0, [r3, #12]
70007a30:	68fb      	ldr	r3, [r7, #12]
70007a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007a34:	461a      	mov	r2, r3
70007a36:	68b9      	ldr	r1, [r7, #8]
70007a38:	f00c fa9b 	bl	70013f72 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
70007a3c:	68fb      	ldr	r3, [r7, #12]
70007a3e:	68da      	ldr	r2, [r3, #12]
70007a40:	68fb      	ldr	r3, [r7, #12]
70007a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007a44:	425b      	negs	r3, r3
70007a46:	441a      	add	r2, r3
70007a48:	68fb      	ldr	r3, [r7, #12]
70007a4a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
70007a4c:	68fb      	ldr	r3, [r7, #12]
70007a4e:	68da      	ldr	r2, [r3, #12]
70007a50:	68fb      	ldr	r3, [r7, #12]
70007a52:	681b      	ldr	r3, [r3, #0]
70007a54:	429a      	cmp	r2, r3
70007a56:	d207      	bcs.n	70007a68 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
70007a58:	68fb      	ldr	r3, [r7, #12]
70007a5a:	689a      	ldr	r2, [r3, #8]
70007a5c:	68fb      	ldr	r3, [r7, #12]
70007a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007a60:	425b      	negs	r3, r3
70007a62:	441a      	add	r2, r3
70007a64:	68fb      	ldr	r3, [r7, #12]
70007a66:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
70007a68:	687b      	ldr	r3, [r7, #4]
70007a6a:	2b02      	cmp	r3, #2
70007a6c:	d105      	bne.n	70007a7a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
70007a6e:	693b      	ldr	r3, [r7, #16]
70007a70:	2b00      	cmp	r3, #0
70007a72:	d002      	beq.n	70007a7a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
70007a74:	693b      	ldr	r3, [r7, #16]
70007a76:	3b01      	subs	r3, #1
70007a78:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
70007a7a:	693b      	ldr	r3, [r7, #16]
70007a7c:	1c5a      	adds	r2, r3, #1
70007a7e:	68fb      	ldr	r3, [r7, #12]
70007a80:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
70007a82:	697b      	ldr	r3, [r7, #20]
}
70007a84:	4618      	mov	r0, r3
70007a86:	3718      	adds	r7, #24
70007a88:	46bd      	mov	sp, r7
70007a8a:	bd80      	pop	{r7, pc}

70007a8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
70007a8c:	b580      	push	{r7, lr}
70007a8e:	b082      	sub	sp, #8
70007a90:	af00      	add	r7, sp, #0
70007a92:	6078      	str	r0, [r7, #4]
70007a94:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
70007a96:	687b      	ldr	r3, [r7, #4]
70007a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007a9a:	2b00      	cmp	r3, #0
70007a9c:	d018      	beq.n	70007ad0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
70007a9e:	687b      	ldr	r3, [r7, #4]
70007aa0:	68da      	ldr	r2, [r3, #12]
70007aa2:	687b      	ldr	r3, [r7, #4]
70007aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007aa6:	441a      	add	r2, r3
70007aa8:	687b      	ldr	r3, [r7, #4]
70007aaa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
70007aac:	687b      	ldr	r3, [r7, #4]
70007aae:	68da      	ldr	r2, [r3, #12]
70007ab0:	687b      	ldr	r3, [r7, #4]
70007ab2:	689b      	ldr	r3, [r3, #8]
70007ab4:	429a      	cmp	r2, r3
70007ab6:	d303      	bcc.n	70007ac0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
70007ab8:	687b      	ldr	r3, [r7, #4]
70007aba:	681a      	ldr	r2, [r3, #0]
70007abc:	687b      	ldr	r3, [r7, #4]
70007abe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
70007ac0:	687b      	ldr	r3, [r7, #4]
70007ac2:	68d9      	ldr	r1, [r3, #12]
70007ac4:	687b      	ldr	r3, [r7, #4]
70007ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007ac8:	461a      	mov	r2, r3
70007aca:	6838      	ldr	r0, [r7, #0]
70007acc:	f00c fa51 	bl	70013f72 <memcpy>
    }
}
70007ad0:	bf00      	nop
70007ad2:	3708      	adds	r7, #8
70007ad4:	46bd      	mov	sp, r7
70007ad6:	bd80      	pop	{r7, pc}

70007ad8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
70007ad8:	b580      	push	{r7, lr}
70007ada:	b084      	sub	sp, #16
70007adc:	af00      	add	r7, sp, #0
70007ade:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
70007ae0:	f7fe fea4 	bl	7000682c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
70007ae4:	687b      	ldr	r3, [r7, #4]
70007ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
70007aea:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
70007aec:	e011      	b.n	70007b12 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
70007aee:	687b      	ldr	r3, [r7, #4]
70007af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70007af2:	2b00      	cmp	r3, #0
70007af4:	d012      	beq.n	70007b1c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
70007af6:	687b      	ldr	r3, [r7, #4]
70007af8:	3324      	adds	r3, #36	@ 0x24
70007afa:	4618      	mov	r0, r3
70007afc:	f000 ffd8 	bl	70008ab0 <xTaskRemoveFromEventList>
70007b00:	4603      	mov	r3, r0
70007b02:	2b00      	cmp	r3, #0
70007b04:	d001      	beq.n	70007b0a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
70007b06:	f001 f929 	bl	70008d5c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
70007b0a:	7bfb      	ldrb	r3, [r7, #15]
70007b0c:	3b01      	subs	r3, #1
70007b0e:	b2db      	uxtb	r3, r3
70007b10:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
70007b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
70007b16:	2b00      	cmp	r3, #0
70007b18:	dce9      	bgt.n	70007aee <prvUnlockQueue+0x16>
70007b1a:	e000      	b.n	70007b1e <prvUnlockQueue+0x46>
                    break;
70007b1c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
70007b1e:	687b      	ldr	r3, [r7, #4]
70007b20:	22ff      	movs	r2, #255	@ 0xff
70007b22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
70007b26:	f7fe feb3 	bl	70006890 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
70007b2a:	f7fe fe7f 	bl	7000682c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
70007b2e:	687b      	ldr	r3, [r7, #4]
70007b30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
70007b34:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
70007b36:	e011      	b.n	70007b5c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
70007b38:	687b      	ldr	r3, [r7, #4]
70007b3a:	691b      	ldr	r3, [r3, #16]
70007b3c:	2b00      	cmp	r3, #0
70007b3e:	d012      	beq.n	70007b66 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
70007b40:	687b      	ldr	r3, [r7, #4]
70007b42:	3310      	adds	r3, #16
70007b44:	4618      	mov	r0, r3
70007b46:	f000 ffb3 	bl	70008ab0 <xTaskRemoveFromEventList>
70007b4a:	4603      	mov	r3, r0
70007b4c:	2b00      	cmp	r3, #0
70007b4e:	d001      	beq.n	70007b54 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
70007b50:	f001 f904 	bl	70008d5c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
70007b54:	7bbb      	ldrb	r3, [r7, #14]
70007b56:	3b01      	subs	r3, #1
70007b58:	b2db      	uxtb	r3, r3
70007b5a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
70007b5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
70007b60:	2b00      	cmp	r3, #0
70007b62:	dce9      	bgt.n	70007b38 <prvUnlockQueue+0x60>
70007b64:	e000      	b.n	70007b68 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
70007b66:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
70007b68:	687b      	ldr	r3, [r7, #4]
70007b6a:	22ff      	movs	r2, #255	@ 0xff
70007b6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
70007b70:	f7fe fe8e 	bl	70006890 <vPortExitCritical>
}
70007b74:	bf00      	nop
70007b76:	3710      	adds	r7, #16
70007b78:	46bd      	mov	sp, r7
70007b7a:	bd80      	pop	{r7, pc}

70007b7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
70007b7c:	b580      	push	{r7, lr}
70007b7e:	b084      	sub	sp, #16
70007b80:	af00      	add	r7, sp, #0
70007b82:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
70007b84:	f7fe fe52 	bl	7000682c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
70007b88:	687b      	ldr	r3, [r7, #4]
70007b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
70007b8c:	2b00      	cmp	r3, #0
70007b8e:	d102      	bne.n	70007b96 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
70007b90:	2301      	movs	r3, #1
70007b92:	60fb      	str	r3, [r7, #12]
70007b94:	e001      	b.n	70007b9a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
70007b96:	2300      	movs	r3, #0
70007b98:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
70007b9a:	f7fe fe79 	bl	70006890 <vPortExitCritical>

    return xReturn;
70007b9e:	68fb      	ldr	r3, [r7, #12]
}
70007ba0:	4618      	mov	r0, r3
70007ba2:	3710      	adds	r7, #16
70007ba4:	46bd      	mov	sp, r7
70007ba6:	bd80      	pop	{r7, pc}

70007ba8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
70007ba8:	b580      	push	{r7, lr}
70007baa:	b084      	sub	sp, #16
70007bac:	af00      	add	r7, sp, #0
70007bae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
70007bb0:	f7fe fe3c 	bl	7000682c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
70007bb4:	687b      	ldr	r3, [r7, #4]
70007bb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
70007bb8:	687b      	ldr	r3, [r7, #4]
70007bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70007bbc:	429a      	cmp	r2, r3
70007bbe:	d102      	bne.n	70007bc6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
70007bc0:	2301      	movs	r3, #1
70007bc2:	60fb      	str	r3, [r7, #12]
70007bc4:	e001      	b.n	70007bca <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
70007bc6:	2300      	movs	r3, #0
70007bc8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
70007bca:	f7fe fe61 	bl	70006890 <vPortExitCritical>

    return xReturn;
70007bce:	68fb      	ldr	r3, [r7, #12]
}
70007bd0:	4618      	mov	r0, r3
70007bd2:	3710      	adds	r7, #16
70007bd4:	46bd      	mov	sp, r7
70007bd6:	bd80      	pop	{r7, pc}

70007bd8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
70007bd8:	b480      	push	{r7}
70007bda:	b087      	sub	sp, #28
70007bdc:	af00      	add	r7, sp, #0
70007bde:	6078      	str	r0, [r7, #4]
70007be0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
70007be2:	2300      	movs	r3, #0
70007be4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
70007be6:	687b      	ldr	r3, [r7, #4]
70007be8:	2b00      	cmp	r3, #0
70007bea:	d10b      	bne.n	70007c04 <vQueueAddToRegistry+0x2c>
        __asm volatile
70007bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007bf0:	f383 8811 	msr	BASEPRI, r3
70007bf4:	f3bf 8f6f 	isb	sy
70007bf8:	f3bf 8f4f 	dsb	sy
70007bfc:	60fb      	str	r3, [r7, #12]
    }
70007bfe:	bf00      	nop
70007c00:	bf00      	nop
70007c02:	e7fd      	b.n	70007c00 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
70007c04:	683b      	ldr	r3, [r7, #0]
70007c06:	2b00      	cmp	r3, #0
70007c08:	d024      	beq.n	70007c54 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
70007c0a:	2300      	movs	r3, #0
70007c0c:	617b      	str	r3, [r7, #20]
70007c0e:	e01e      	b.n	70007c4e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
70007c10:	4a18      	ldr	r2, [pc, #96]	@ (70007c74 <vQueueAddToRegistry+0x9c>)
70007c12:	697b      	ldr	r3, [r7, #20]
70007c14:	00db      	lsls	r3, r3, #3
70007c16:	4413      	add	r3, r2
70007c18:	685b      	ldr	r3, [r3, #4]
70007c1a:	687a      	ldr	r2, [r7, #4]
70007c1c:	429a      	cmp	r2, r3
70007c1e:	d105      	bne.n	70007c2c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
70007c20:	697b      	ldr	r3, [r7, #20]
70007c22:	00db      	lsls	r3, r3, #3
70007c24:	4a13      	ldr	r2, [pc, #76]	@ (70007c74 <vQueueAddToRegistry+0x9c>)
70007c26:	4413      	add	r3, r2
70007c28:	613b      	str	r3, [r7, #16]
                    break;
70007c2a:	e013      	b.n	70007c54 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
70007c2c:	693b      	ldr	r3, [r7, #16]
70007c2e:	2b00      	cmp	r3, #0
70007c30:	d10a      	bne.n	70007c48 <vQueueAddToRegistry+0x70>
70007c32:	4a10      	ldr	r2, [pc, #64]	@ (70007c74 <vQueueAddToRegistry+0x9c>)
70007c34:	697b      	ldr	r3, [r7, #20]
70007c36:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
70007c3a:	2b00      	cmp	r3, #0
70007c3c:	d104      	bne.n	70007c48 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
70007c3e:	697b      	ldr	r3, [r7, #20]
70007c40:	00db      	lsls	r3, r3, #3
70007c42:	4a0c      	ldr	r2, [pc, #48]	@ (70007c74 <vQueueAddToRegistry+0x9c>)
70007c44:	4413      	add	r3, r2
70007c46:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
70007c48:	697b      	ldr	r3, [r7, #20]
70007c4a:	3301      	adds	r3, #1
70007c4c:	617b      	str	r3, [r7, #20]
70007c4e:	697b      	ldr	r3, [r7, #20]
70007c50:	2b07      	cmp	r3, #7
70007c52:	d9dd      	bls.n	70007c10 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
70007c54:	693b      	ldr	r3, [r7, #16]
70007c56:	2b00      	cmp	r3, #0
70007c58:	d005      	beq.n	70007c66 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
70007c5a:	693b      	ldr	r3, [r7, #16]
70007c5c:	683a      	ldr	r2, [r7, #0]
70007c5e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
70007c60:	693b      	ldr	r3, [r7, #16]
70007c62:	687a      	ldr	r2, [r7, #4]
70007c64:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
70007c66:	bf00      	nop
70007c68:	371c      	adds	r7, #28
70007c6a:	46bd      	mov	sp, r7
70007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
70007c70:	4770      	bx	lr
70007c72:	bf00      	nop
70007c74:	24004c08 	.word	0x24004c08

70007c78 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
70007c78:	b480      	push	{r7}
70007c7a:	b085      	sub	sp, #20
70007c7c:	af00      	add	r7, sp, #0
70007c7e:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
70007c80:	687b      	ldr	r3, [r7, #4]
70007c82:	2b00      	cmp	r3, #0
70007c84:	d10b      	bne.n	70007c9e <vQueueUnregisterQueue+0x26>
        __asm volatile
70007c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007c8a:	f383 8811 	msr	BASEPRI, r3
70007c8e:	f3bf 8f6f 	isb	sy
70007c92:	f3bf 8f4f 	dsb	sy
70007c96:	60bb      	str	r3, [r7, #8]
    }
70007c98:	bf00      	nop
70007c9a:	bf00      	nop
70007c9c:	e7fd      	b.n	70007c9a <vQueueUnregisterQueue+0x22>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
70007c9e:	2300      	movs	r3, #0
70007ca0:	60fb      	str	r3, [r7, #12]
70007ca2:	e016      	b.n	70007cd2 <vQueueUnregisterQueue+0x5a>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
70007ca4:	4a10      	ldr	r2, [pc, #64]	@ (70007ce8 <vQueueUnregisterQueue+0x70>)
70007ca6:	68fb      	ldr	r3, [r7, #12]
70007ca8:	00db      	lsls	r3, r3, #3
70007caa:	4413      	add	r3, r2
70007cac:	685b      	ldr	r3, [r3, #4]
70007cae:	687a      	ldr	r2, [r7, #4]
70007cb0:	429a      	cmp	r2, r3
70007cb2:	d10b      	bne.n	70007ccc <vQueueUnregisterQueue+0x54>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
70007cb4:	4a0c      	ldr	r2, [pc, #48]	@ (70007ce8 <vQueueUnregisterQueue+0x70>)
70007cb6:	68fb      	ldr	r3, [r7, #12]
70007cb8:	2100      	movs	r1, #0
70007cba:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
70007cbe:	4a0a      	ldr	r2, [pc, #40]	@ (70007ce8 <vQueueUnregisterQueue+0x70>)
70007cc0:	68fb      	ldr	r3, [r7, #12]
70007cc2:	00db      	lsls	r3, r3, #3
70007cc4:	4413      	add	r3, r2
70007cc6:	2200      	movs	r2, #0
70007cc8:	605a      	str	r2, [r3, #4]
                break;
70007cca:	e006      	b.n	70007cda <vQueueUnregisterQueue+0x62>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
70007ccc:	68fb      	ldr	r3, [r7, #12]
70007cce:	3301      	adds	r3, #1
70007cd0:	60fb      	str	r3, [r7, #12]
70007cd2:	68fb      	ldr	r3, [r7, #12]
70007cd4:	2b07      	cmp	r3, #7
70007cd6:	d9e5      	bls.n	70007ca4 <vQueueUnregisterQueue+0x2c>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
70007cd8:	bf00      	nop
70007cda:	bf00      	nop
70007cdc:	3714      	adds	r7, #20
70007cde:	46bd      	mov	sp, r7
70007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
70007ce4:	4770      	bx	lr
70007ce6:	bf00      	nop
70007ce8:	24004c08 	.word	0x24004c08

70007cec <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
70007cec:	b580      	push	{r7, lr}
70007cee:	b086      	sub	sp, #24
70007cf0:	af00      	add	r7, sp, #0
70007cf2:	60f8      	str	r0, [r7, #12]
70007cf4:	60b9      	str	r1, [r7, #8]
70007cf6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
70007cf8:	68fb      	ldr	r3, [r7, #12]
70007cfa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
70007cfc:	f7fe fd96 	bl	7000682c <vPortEnterCritical>
70007d00:	697b      	ldr	r3, [r7, #20]
70007d02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
70007d06:	b25b      	sxtb	r3, r3
70007d08:	f1b3 3fff 	cmp.w	r3, #4294967295
70007d0c:	d103      	bne.n	70007d16 <vQueueWaitForMessageRestricted+0x2a>
70007d0e:	697b      	ldr	r3, [r7, #20]
70007d10:	2200      	movs	r2, #0
70007d12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
70007d16:	697b      	ldr	r3, [r7, #20]
70007d18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
70007d1c:	b25b      	sxtb	r3, r3
70007d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
70007d22:	d103      	bne.n	70007d2c <vQueueWaitForMessageRestricted+0x40>
70007d24:	697b      	ldr	r3, [r7, #20]
70007d26:	2200      	movs	r2, #0
70007d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
70007d2c:	f7fe fdb0 	bl	70006890 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
70007d30:	697b      	ldr	r3, [r7, #20]
70007d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
70007d34:	2b00      	cmp	r3, #0
70007d36:	d106      	bne.n	70007d46 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
70007d38:	697b      	ldr	r3, [r7, #20]
70007d3a:	3324      	adds	r3, #36	@ 0x24
70007d3c:	687a      	ldr	r2, [r7, #4]
70007d3e:	68b9      	ldr	r1, [r7, #8]
70007d40:	4618      	mov	r0, r3
70007d42:	f000 fe6f 	bl	70008a24 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
70007d46:	6978      	ldr	r0, [r7, #20]
70007d48:	f7ff fec6 	bl	70007ad8 <prvUnlockQueue>
    }
70007d4c:	bf00      	nop
70007d4e:	3718      	adds	r7, #24
70007d50:	46bd      	mov	sp, r7
70007d52:	bd80      	pop	{r7, pc}

70007d54 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
70007d54:	b580      	push	{r7, lr}
70007d56:	b08e      	sub	sp, #56	@ 0x38
70007d58:	af04      	add	r7, sp, #16
70007d5a:	60f8      	str	r0, [r7, #12]
70007d5c:	60b9      	str	r1, [r7, #8]
70007d5e:	607a      	str	r2, [r7, #4]
70007d60:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
70007d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70007d64:	2b00      	cmp	r3, #0
70007d66:	d10b      	bne.n	70007d80 <xTaskCreateStatic+0x2c>
        __asm volatile
70007d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007d6c:	f383 8811 	msr	BASEPRI, r3
70007d70:	f3bf 8f6f 	isb	sy
70007d74:	f3bf 8f4f 	dsb	sy
70007d78:	623b      	str	r3, [r7, #32]
    }
70007d7a:	bf00      	nop
70007d7c:	bf00      	nop
70007d7e:	e7fd      	b.n	70007d7c <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
70007d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70007d82:	2b00      	cmp	r3, #0
70007d84:	d10b      	bne.n	70007d9e <xTaskCreateStatic+0x4a>
        __asm volatile
70007d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007d8a:	f383 8811 	msr	BASEPRI, r3
70007d8e:	f3bf 8f6f 	isb	sy
70007d92:	f3bf 8f4f 	dsb	sy
70007d96:	61fb      	str	r3, [r7, #28]
    }
70007d98:	bf00      	nop
70007d9a:	bf00      	nop
70007d9c:	e7fd      	b.n	70007d9a <xTaskCreateStatic+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
70007d9e:	23a8      	movs	r3, #168	@ 0xa8
70007da0:	613b      	str	r3, [r7, #16]
            configASSERT( xSize == sizeof( TCB_t ) );
70007da2:	693b      	ldr	r3, [r7, #16]
70007da4:	2ba8      	cmp	r3, #168	@ 0xa8
70007da6:	d00b      	beq.n	70007dc0 <xTaskCreateStatic+0x6c>
        __asm volatile
70007da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007dac:	f383 8811 	msr	BASEPRI, r3
70007db0:	f3bf 8f6f 	isb	sy
70007db4:	f3bf 8f4f 	dsb	sy
70007db8:	61bb      	str	r3, [r7, #24]
    }
70007dba:	bf00      	nop
70007dbc:	bf00      	nop
70007dbe:	e7fd      	b.n	70007dbc <xTaskCreateStatic+0x68>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
70007dc0:	693b      	ldr	r3, [r7, #16]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
70007dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70007dc4:	2b00      	cmp	r3, #0
70007dc6:	d023      	beq.n	70007e10 <xTaskCreateStatic+0xbc>
70007dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70007dca:	2b00      	cmp	r3, #0
70007dcc:	d020      	beq.n	70007e10 <xTaskCreateStatic+0xbc>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
70007dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70007dd0:	627b      	str	r3, [r7, #36]	@ 0x24
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
70007dd2:	22a8      	movs	r2, #168	@ 0xa8
70007dd4:	2100      	movs	r1, #0
70007dd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
70007dd8:	f00b ffff 	bl	70013dda <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
70007ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007dde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
70007de0:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
70007de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007de4:	2202      	movs	r2, #2
70007de6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
70007dea:	2300      	movs	r3, #0
70007dec:	9303      	str	r3, [sp, #12]
70007dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007df0:	9302      	str	r3, [sp, #8]
70007df2:	f107 0314 	add.w	r3, r7, #20
70007df6:	9301      	str	r3, [sp, #4]
70007df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007dfa:	9300      	str	r3, [sp, #0]
70007dfc:	683b      	ldr	r3, [r7, #0]
70007dfe:	687a      	ldr	r2, [r7, #4]
70007e00:	68b9      	ldr	r1, [r7, #8]
70007e02:	68f8      	ldr	r0, [r7, #12]
70007e04:	f000 f856 	bl	70007eb4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
70007e08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
70007e0a:	f000 f8f9 	bl	70008000 <prvAddNewTaskToReadyList>
70007e0e:	e001      	b.n	70007e14 <xTaskCreateStatic+0xc0>
        }
        else
        {
            xReturn = NULL;
70007e10:	2300      	movs	r3, #0
70007e12:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
70007e14:	697b      	ldr	r3, [r7, #20]
    }
70007e16:	4618      	mov	r0, r3
70007e18:	3728      	adds	r7, #40	@ 0x28
70007e1a:	46bd      	mov	sp, r7
70007e1c:	bd80      	pop	{r7, pc}

70007e1e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
70007e1e:	b580      	push	{r7, lr}
70007e20:	b08c      	sub	sp, #48	@ 0x30
70007e22:	af04      	add	r7, sp, #16
70007e24:	60f8      	str	r0, [r7, #12]
70007e26:	60b9      	str	r1, [r7, #8]
70007e28:	603b      	str	r3, [r7, #0]
70007e2a:	4613      	mov	r3, r2
70007e2c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
70007e2e:	88fb      	ldrh	r3, [r7, #6]
70007e30:	009b      	lsls	r3, r3, #2
70007e32:	4618      	mov	r0, r3
70007e34:	f7fe f942 	bl	700060bc <pvPortMalloc>
70007e38:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
70007e3a:	697b      	ldr	r3, [r7, #20]
70007e3c:	2b00      	cmp	r3, #0
70007e3e:	d013      	beq.n	70007e68 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
70007e40:	20a8      	movs	r0, #168	@ 0xa8
70007e42:	f7fe f93b 	bl	700060bc <pvPortMalloc>
70007e46:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
70007e48:	69fb      	ldr	r3, [r7, #28]
70007e4a:	2b00      	cmp	r3, #0
70007e4c:	d008      	beq.n	70007e60 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
70007e4e:	22a8      	movs	r2, #168	@ 0xa8
70007e50:	2100      	movs	r1, #0
70007e52:	69f8      	ldr	r0, [r7, #28]
70007e54:	f00b ffc1 	bl	70013dda <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
70007e58:	69fb      	ldr	r3, [r7, #28]
70007e5a:	697a      	ldr	r2, [r7, #20]
70007e5c:	631a      	str	r2, [r3, #48]	@ 0x30
70007e5e:	e005      	b.n	70007e6c <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
70007e60:	6978      	ldr	r0, [r7, #20]
70007e62:	f7fe f9e7 	bl	70006234 <vPortFree>
70007e66:	e001      	b.n	70007e6c <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
70007e68:	2300      	movs	r3, #0
70007e6a:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
70007e6c:	69fb      	ldr	r3, [r7, #28]
70007e6e:	2b00      	cmp	r3, #0
70007e70:	d017      	beq.n	70007ea2 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
70007e72:	69fb      	ldr	r3, [r7, #28]
70007e74:	2200      	movs	r2, #0
70007e76:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
70007e7a:	88fa      	ldrh	r2, [r7, #6]
70007e7c:	2300      	movs	r3, #0
70007e7e:	9303      	str	r3, [sp, #12]
70007e80:	69fb      	ldr	r3, [r7, #28]
70007e82:	9302      	str	r3, [sp, #8]
70007e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70007e86:	9301      	str	r3, [sp, #4]
70007e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70007e8a:	9300      	str	r3, [sp, #0]
70007e8c:	683b      	ldr	r3, [r7, #0]
70007e8e:	68b9      	ldr	r1, [r7, #8]
70007e90:	68f8      	ldr	r0, [r7, #12]
70007e92:	f000 f80f 	bl	70007eb4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
70007e96:	69f8      	ldr	r0, [r7, #28]
70007e98:	f000 f8b2 	bl	70008000 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
70007e9c:	2301      	movs	r3, #1
70007e9e:	61bb      	str	r3, [r7, #24]
70007ea0:	e002      	b.n	70007ea8 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
70007ea2:	f04f 33ff 	mov.w	r3, #4294967295
70007ea6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
70007ea8:	69bb      	ldr	r3, [r7, #24]
    }
70007eaa:	4618      	mov	r0, r3
70007eac:	3720      	adds	r7, #32
70007eae:	46bd      	mov	sp, r7
70007eb0:	bd80      	pop	{r7, pc}
	...

70007eb4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
70007eb4:	b580      	push	{r7, lr}
70007eb6:	b088      	sub	sp, #32
70007eb8:	af00      	add	r7, sp, #0
70007eba:	60f8      	str	r0, [r7, #12]
70007ebc:	60b9      	str	r1, [r7, #8]
70007ebe:	607a      	str	r2, [r7, #4]
70007ec0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
70007ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007ec4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
70007ec6:	687b      	ldr	r3, [r7, #4]
70007ec8:	009b      	lsls	r3, r3, #2
70007eca:	461a      	mov	r2, r3
70007ecc:	21a5      	movs	r1, #165	@ 0xa5
70007ece:	f00b ff84 	bl	70013dda <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
70007ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007ed4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
70007ed6:	6879      	ldr	r1, [r7, #4]
70007ed8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
70007edc:	440b      	add	r3, r1
70007ede:	009b      	lsls	r3, r3, #2
70007ee0:	4413      	add	r3, r2
70007ee2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
70007ee4:	69bb      	ldr	r3, [r7, #24]
70007ee6:	f023 0307 	bic.w	r3, r3, #7
70007eea:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
70007eec:	69bb      	ldr	r3, [r7, #24]
70007eee:	f003 0307 	and.w	r3, r3, #7
70007ef2:	2b00      	cmp	r3, #0
70007ef4:	d00b      	beq.n	70007f0e <prvInitialiseNewTask+0x5a>
        __asm volatile
70007ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007efa:	f383 8811 	msr	BASEPRI, r3
70007efe:	f3bf 8f6f 	isb	sy
70007f02:	f3bf 8f4f 	dsb	sy
70007f06:	617b      	str	r3, [r7, #20]
    }
70007f08:	bf00      	nop
70007f0a:	bf00      	nop
70007f0c:	e7fd      	b.n	70007f0a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
70007f0e:	68bb      	ldr	r3, [r7, #8]
70007f10:	2b00      	cmp	r3, #0
70007f12:	d01e      	beq.n	70007f52 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
70007f14:	2300      	movs	r3, #0
70007f16:	61fb      	str	r3, [r7, #28]
70007f18:	e012      	b.n	70007f40 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
70007f1a:	68ba      	ldr	r2, [r7, #8]
70007f1c:	69fb      	ldr	r3, [r7, #28]
70007f1e:	4413      	add	r3, r2
70007f20:	7819      	ldrb	r1, [r3, #0]
70007f22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
70007f24:	69fb      	ldr	r3, [r7, #28]
70007f26:	4413      	add	r3, r2
70007f28:	3334      	adds	r3, #52	@ 0x34
70007f2a:	460a      	mov	r2, r1
70007f2c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
70007f2e:	68ba      	ldr	r2, [r7, #8]
70007f30:	69fb      	ldr	r3, [r7, #28]
70007f32:	4413      	add	r3, r2
70007f34:	781b      	ldrb	r3, [r3, #0]
70007f36:	2b00      	cmp	r3, #0
70007f38:	d006      	beq.n	70007f48 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
70007f3a:	69fb      	ldr	r3, [r7, #28]
70007f3c:	3301      	adds	r3, #1
70007f3e:	61fb      	str	r3, [r7, #28]
70007f40:	69fb      	ldr	r3, [r7, #28]
70007f42:	2b0f      	cmp	r3, #15
70007f44:	d9e9      	bls.n	70007f1a <prvInitialiseNewTask+0x66>
70007f46:	e000      	b.n	70007f4a <prvInitialiseNewTask+0x96>
            {
                break;
70007f48:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
70007f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007f4c:	2200      	movs	r2, #0
70007f4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
70007f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70007f54:	2b37      	cmp	r3, #55	@ 0x37
70007f56:	d90b      	bls.n	70007f70 <prvInitialiseNewTask+0xbc>
        __asm volatile
70007f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007f5c:	f383 8811 	msr	BASEPRI, r3
70007f60:	f3bf 8f6f 	isb	sy
70007f64:	f3bf 8f4f 	dsb	sy
70007f68:	613b      	str	r3, [r7, #16]
    }
70007f6a:	bf00      	nop
70007f6c:	bf00      	nop
70007f6e:	e7fd      	b.n	70007f6c <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
70007f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70007f72:	2b37      	cmp	r3, #55	@ 0x37
70007f74:	d901      	bls.n	70007f7a <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
70007f76:	2337      	movs	r3, #55	@ 0x37
70007f78:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
70007f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007f7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
70007f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
70007f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007f82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
70007f84:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
70007f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007f88:	3304      	adds	r3, #4
70007f8a:	4618      	mov	r0, r3
70007f8c:	f7fe fa86 	bl	7000649c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
70007f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007f92:	3318      	adds	r3, #24
70007f94:	4618      	mov	r0, r3
70007f96:	f7fe fa81 	bl	7000649c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
70007f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
70007f9e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
70007fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70007fa2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
70007fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007fa8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
70007faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
70007fae:	625a      	str	r2, [r3, #36]	@ 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
70007fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007fb2:	3354      	adds	r3, #84	@ 0x54
70007fb4:	224c      	movs	r2, #76	@ 0x4c
70007fb6:	2100      	movs	r1, #0
70007fb8:	4618      	mov	r0, r3
70007fba:	f00b ff0e 	bl	70013dda <memset>
70007fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007fc0:	4a0c      	ldr	r2, [pc, #48]	@ (70007ff4 <prvInitialiseNewTask+0x140>)
70007fc2:	659a      	str	r2, [r3, #88]	@ 0x58
70007fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007fc6:	4a0c      	ldr	r2, [pc, #48]	@ (70007ff8 <prvInitialiseNewTask+0x144>)
70007fc8:	65da      	str	r2, [r3, #92]	@ 0x5c
70007fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007fcc:	4a0b      	ldr	r2, [pc, #44]	@ (70007ffc <prvInitialiseNewTask+0x148>)
70007fce:	661a      	str	r2, [r3, #96]	@ 0x60
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
70007fd0:	683a      	ldr	r2, [r7, #0]
70007fd2:	68f9      	ldr	r1, [r7, #12]
70007fd4:	69b8      	ldr	r0, [r7, #24]
70007fd6:	f7fe faf5 	bl	700065c4 <pxPortInitialiseStack>
70007fda:	4602      	mov	r2, r0
70007fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007fde:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
70007fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70007fe2:	2b00      	cmp	r3, #0
70007fe4:	d002      	beq.n	70007fec <prvInitialiseNewTask+0x138>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
70007fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70007fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
70007fea:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
70007fec:	bf00      	nop
70007fee:	3720      	adds	r7, #32
70007ff0:	46bd      	mov	sp, r7
70007ff2:	bd80      	pop	{r7, pc}
70007ff4:	240084e8 	.word	0x240084e8
70007ff8:	24008550 	.word	0x24008550
70007ffc:	240085b8 	.word	0x240085b8

70008000 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
70008000:	b580      	push	{r7, lr}
70008002:	b084      	sub	sp, #16
70008004:	af00      	add	r7, sp, #0
70008006:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
70008008:	f7fe fc10 	bl	7000682c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
7000800c:	4b41      	ldr	r3, [pc, #260]	@ (70008114 <prvAddNewTaskToReadyList+0x114>)
7000800e:	681b      	ldr	r3, [r3, #0]
70008010:	3301      	adds	r3, #1
70008012:	4a40      	ldr	r2, [pc, #256]	@ (70008114 <prvAddNewTaskToReadyList+0x114>)
70008014:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
70008016:	4b40      	ldr	r3, [pc, #256]	@ (70008118 <prvAddNewTaskToReadyList+0x118>)
70008018:	681b      	ldr	r3, [r3, #0]
7000801a:	2b00      	cmp	r3, #0
7000801c:	d109      	bne.n	70008032 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
7000801e:	4a3e      	ldr	r2, [pc, #248]	@ (70008118 <prvAddNewTaskToReadyList+0x118>)
70008020:	687b      	ldr	r3, [r7, #4]
70008022:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
70008024:	4b3b      	ldr	r3, [pc, #236]	@ (70008114 <prvAddNewTaskToReadyList+0x114>)
70008026:	681b      	ldr	r3, [r3, #0]
70008028:	2b01      	cmp	r3, #1
7000802a:	d110      	bne.n	7000804e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
7000802c:	f000 feba 	bl	70008da4 <prvInitialiseTaskLists>
70008030:	e00d      	b.n	7000804e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
70008032:	4b3a      	ldr	r3, [pc, #232]	@ (7000811c <prvAddNewTaskToReadyList+0x11c>)
70008034:	681b      	ldr	r3, [r3, #0]
70008036:	2b00      	cmp	r3, #0
70008038:	d109      	bne.n	7000804e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
7000803a:	4b37      	ldr	r3, [pc, #220]	@ (70008118 <prvAddNewTaskToReadyList+0x118>)
7000803c:	681b      	ldr	r3, [r3, #0]
7000803e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008040:	687b      	ldr	r3, [r7, #4]
70008042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70008044:	429a      	cmp	r2, r3
70008046:	d802      	bhi.n	7000804e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
70008048:	4a33      	ldr	r2, [pc, #204]	@ (70008118 <prvAddNewTaskToReadyList+0x118>)
7000804a:	687b      	ldr	r3, [r7, #4]
7000804c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
7000804e:	4b34      	ldr	r3, [pc, #208]	@ (70008120 <prvAddNewTaskToReadyList+0x120>)
70008050:	681b      	ldr	r3, [r3, #0]
70008052:	3301      	adds	r3, #1
70008054:	4a32      	ldr	r2, [pc, #200]	@ (70008120 <prvAddNewTaskToReadyList+0x120>)
70008056:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
70008058:	4b31      	ldr	r3, [pc, #196]	@ (70008120 <prvAddNewTaskToReadyList+0x120>)
7000805a:	681a      	ldr	r2, [r3, #0]
7000805c:	687b      	ldr	r3, [r7, #4]
7000805e:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
70008060:	687b      	ldr	r3, [r7, #4]
70008062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008064:	4b2f      	ldr	r3, [pc, #188]	@ (70008124 <prvAddNewTaskToReadyList+0x124>)
70008066:	681b      	ldr	r3, [r3, #0]
70008068:	429a      	cmp	r2, r3
7000806a:	d903      	bls.n	70008074 <prvAddNewTaskToReadyList+0x74>
7000806c:	687b      	ldr	r3, [r7, #4]
7000806e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70008070:	4a2c      	ldr	r2, [pc, #176]	@ (70008124 <prvAddNewTaskToReadyList+0x124>)
70008072:	6013      	str	r3, [r2, #0]
70008074:	687b      	ldr	r3, [r7, #4]
70008076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008078:	492b      	ldr	r1, [pc, #172]	@ (70008128 <prvAddNewTaskToReadyList+0x128>)
7000807a:	4613      	mov	r3, r2
7000807c:	009b      	lsls	r3, r3, #2
7000807e:	4413      	add	r3, r2
70008080:	009b      	lsls	r3, r3, #2
70008082:	440b      	add	r3, r1
70008084:	3304      	adds	r3, #4
70008086:	681b      	ldr	r3, [r3, #0]
70008088:	60fb      	str	r3, [r7, #12]
7000808a:	687b      	ldr	r3, [r7, #4]
7000808c:	68fa      	ldr	r2, [r7, #12]
7000808e:	609a      	str	r2, [r3, #8]
70008090:	68fb      	ldr	r3, [r7, #12]
70008092:	689a      	ldr	r2, [r3, #8]
70008094:	687b      	ldr	r3, [r7, #4]
70008096:	60da      	str	r2, [r3, #12]
70008098:	68fb      	ldr	r3, [r7, #12]
7000809a:	689b      	ldr	r3, [r3, #8]
7000809c:	687a      	ldr	r2, [r7, #4]
7000809e:	3204      	adds	r2, #4
700080a0:	605a      	str	r2, [r3, #4]
700080a2:	687b      	ldr	r3, [r7, #4]
700080a4:	1d1a      	adds	r2, r3, #4
700080a6:	68fb      	ldr	r3, [r7, #12]
700080a8:	609a      	str	r2, [r3, #8]
700080aa:	687b      	ldr	r3, [r7, #4]
700080ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700080ae:	4613      	mov	r3, r2
700080b0:	009b      	lsls	r3, r3, #2
700080b2:	4413      	add	r3, r2
700080b4:	009b      	lsls	r3, r3, #2
700080b6:	4a1c      	ldr	r2, [pc, #112]	@ (70008128 <prvAddNewTaskToReadyList+0x128>)
700080b8:	441a      	add	r2, r3
700080ba:	687b      	ldr	r3, [r7, #4]
700080bc:	615a      	str	r2, [r3, #20]
700080be:	687b      	ldr	r3, [r7, #4]
700080c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700080c2:	4919      	ldr	r1, [pc, #100]	@ (70008128 <prvAddNewTaskToReadyList+0x128>)
700080c4:	4613      	mov	r3, r2
700080c6:	009b      	lsls	r3, r3, #2
700080c8:	4413      	add	r3, r2
700080ca:	009b      	lsls	r3, r3, #2
700080cc:	440b      	add	r3, r1
700080ce:	681b      	ldr	r3, [r3, #0]
700080d0:	1c59      	adds	r1, r3, #1
700080d2:	4815      	ldr	r0, [pc, #84]	@ (70008128 <prvAddNewTaskToReadyList+0x128>)
700080d4:	4613      	mov	r3, r2
700080d6:	009b      	lsls	r3, r3, #2
700080d8:	4413      	add	r3, r2
700080da:	009b      	lsls	r3, r3, #2
700080dc:	4403      	add	r3, r0
700080de:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
700080e0:	f7fe fbd6 	bl	70006890 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
700080e4:	4b0d      	ldr	r3, [pc, #52]	@ (7000811c <prvAddNewTaskToReadyList+0x11c>)
700080e6:	681b      	ldr	r3, [r3, #0]
700080e8:	2b00      	cmp	r3, #0
700080ea:	d00e      	beq.n	7000810a <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
700080ec:	4b0a      	ldr	r3, [pc, #40]	@ (70008118 <prvAddNewTaskToReadyList+0x118>)
700080ee:	681b      	ldr	r3, [r3, #0]
700080f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700080f2:	687b      	ldr	r3, [r7, #4]
700080f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700080f6:	429a      	cmp	r2, r3
700080f8:	d207      	bcs.n	7000810a <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
700080fa:	4b0c      	ldr	r3, [pc, #48]	@ (7000812c <prvAddNewTaskToReadyList+0x12c>)
700080fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70008100:	601a      	str	r2, [r3, #0]
70008102:	f3bf 8f4f 	dsb	sy
70008106:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
7000810a:	bf00      	nop
7000810c:	3710      	adds	r7, #16
7000810e:	46bd      	mov	sp, r7
70008110:	bd80      	pop	{r7, pc}
70008112:	bf00      	nop
70008114:	2400511c 	.word	0x2400511c
70008118:	24004c48 	.word	0x24004c48
7000811c:	24005128 	.word	0x24005128
70008120:	24005138 	.word	0x24005138
70008124:	24005124 	.word	0x24005124
70008128:	24004c4c 	.word	0x24004c4c
7000812c:	e000ed04 	.word	0xe000ed04

70008130 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
70008130:	b580      	push	{r7, lr}
70008132:	b084      	sub	sp, #16
70008134:	af00      	add	r7, sp, #0
70008136:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
70008138:	f7fe fb78 	bl	7000682c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
7000813c:	687b      	ldr	r3, [r7, #4]
7000813e:	2b00      	cmp	r3, #0
70008140:	d102      	bne.n	70008148 <vTaskDelete+0x18>
70008142:	4b2f      	ldr	r3, [pc, #188]	@ (70008200 <vTaskDelete+0xd0>)
70008144:	681b      	ldr	r3, [r3, #0]
70008146:	e000      	b.n	7000814a <vTaskDelete+0x1a>
70008148:	687b      	ldr	r3, [r7, #4]
7000814a:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
7000814c:	68fb      	ldr	r3, [r7, #12]
7000814e:	3304      	adds	r3, #4
70008150:	4618      	mov	r0, r3
70008152:	f7fe fa0d 	bl	70006570 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
70008156:	68fb      	ldr	r3, [r7, #12]
70008158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
7000815a:	2b00      	cmp	r3, #0
7000815c:	d004      	beq.n	70008168 <vTaskDelete+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
7000815e:	68fb      	ldr	r3, [r7, #12]
70008160:	3318      	adds	r3, #24
70008162:	4618      	mov	r0, r3
70008164:	f7fe fa04 	bl	70006570 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
70008168:	4b26      	ldr	r3, [pc, #152]	@ (70008204 <vTaskDelete+0xd4>)
7000816a:	681b      	ldr	r3, [r3, #0]
7000816c:	3301      	adds	r3, #1
7000816e:	4a25      	ldr	r2, [pc, #148]	@ (70008204 <vTaskDelete+0xd4>)
70008170:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
70008172:	4b23      	ldr	r3, [pc, #140]	@ (70008200 <vTaskDelete+0xd0>)
70008174:	681b      	ldr	r3, [r3, #0]
70008176:	68fa      	ldr	r2, [r7, #12]
70008178:	429a      	cmp	r2, r3
7000817a:	d10b      	bne.n	70008194 <vTaskDelete+0x64>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
7000817c:	68fb      	ldr	r3, [r7, #12]
7000817e:	3304      	adds	r3, #4
70008180:	4619      	mov	r1, r3
70008182:	4821      	ldr	r0, [pc, #132]	@ (70008208 <vTaskDelete+0xd8>)
70008184:	f7fe f997 	bl	700064b6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
70008188:	4b20      	ldr	r3, [pc, #128]	@ (7000820c <vTaskDelete+0xdc>)
7000818a:	681b      	ldr	r3, [r3, #0]
7000818c:	3301      	adds	r3, #1
7000818e:	4a1f      	ldr	r2, [pc, #124]	@ (7000820c <vTaskDelete+0xdc>)
70008190:	6013      	str	r3, [r2, #0]
70008192:	e006      	b.n	700081a2 <vTaskDelete+0x72>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
70008194:	4b1e      	ldr	r3, [pc, #120]	@ (70008210 <vTaskDelete+0xe0>)
70008196:	681b      	ldr	r3, [r3, #0]
70008198:	3b01      	subs	r3, #1
7000819a:	4a1d      	ldr	r2, [pc, #116]	@ (70008210 <vTaskDelete+0xe0>)
7000819c:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
7000819e:	f000 fea7 	bl	70008ef0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
700081a2:	f7fe fb75 	bl	70006890 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
700081a6:	4b16      	ldr	r3, [pc, #88]	@ (70008200 <vTaskDelete+0xd0>)
700081a8:	681b      	ldr	r3, [r3, #0]
700081aa:	68fa      	ldr	r2, [r7, #12]
700081ac:	429a      	cmp	r2, r3
700081ae:	d002      	beq.n	700081b6 <vTaskDelete+0x86>
        {
            prvDeleteTCB( pxTCB );
700081b0:	68f8      	ldr	r0, [r7, #12]
700081b2:	f000 fe65 	bl	70008e80 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
700081b6:	4b17      	ldr	r3, [pc, #92]	@ (70008214 <vTaskDelete+0xe4>)
700081b8:	681b      	ldr	r3, [r3, #0]
700081ba:	2b00      	cmp	r3, #0
700081bc:	d01c      	beq.n	700081f8 <vTaskDelete+0xc8>
        {
            if( pxTCB == pxCurrentTCB )
700081be:	4b10      	ldr	r3, [pc, #64]	@ (70008200 <vTaskDelete+0xd0>)
700081c0:	681b      	ldr	r3, [r3, #0]
700081c2:	68fa      	ldr	r2, [r7, #12]
700081c4:	429a      	cmp	r2, r3
700081c6:	d117      	bne.n	700081f8 <vTaskDelete+0xc8>
            {
                configASSERT( uxSchedulerSuspended == 0 );
700081c8:	4b13      	ldr	r3, [pc, #76]	@ (70008218 <vTaskDelete+0xe8>)
700081ca:	681b      	ldr	r3, [r3, #0]
700081cc:	2b00      	cmp	r3, #0
700081ce:	d00b      	beq.n	700081e8 <vTaskDelete+0xb8>
        __asm volatile
700081d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
700081d4:	f383 8811 	msr	BASEPRI, r3
700081d8:	f3bf 8f6f 	isb	sy
700081dc:	f3bf 8f4f 	dsb	sy
700081e0:	60bb      	str	r3, [r7, #8]
    }
700081e2:	bf00      	nop
700081e4:	bf00      	nop
700081e6:	e7fd      	b.n	700081e4 <vTaskDelete+0xb4>
                portYIELD_WITHIN_API();
700081e8:	4b0c      	ldr	r3, [pc, #48]	@ (7000821c <vTaskDelete+0xec>)
700081ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
700081ee:	601a      	str	r2, [r3, #0]
700081f0:	f3bf 8f4f 	dsb	sy
700081f4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
700081f8:	bf00      	nop
700081fa:	3710      	adds	r7, #16
700081fc:	46bd      	mov	sp, r7
700081fe:	bd80      	pop	{r7, pc}
70008200:	24004c48 	.word	0x24004c48
70008204:	24005138 	.word	0x24005138
70008208:	240050f0 	.word	0x240050f0
7000820c:	24005104 	.word	0x24005104
70008210:	2400511c 	.word	0x2400511c
70008214:	24005128 	.word	0x24005128
70008218:	24005144 	.word	0x24005144
7000821c:	e000ed04 	.word	0xe000ed04

70008220 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
70008220:	b580      	push	{r7, lr}
70008222:	b084      	sub	sp, #16
70008224:	af00      	add	r7, sp, #0
70008226:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
70008228:	2300      	movs	r3, #0
7000822a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
7000822c:	687b      	ldr	r3, [r7, #4]
7000822e:	2b00      	cmp	r3, #0
70008230:	d018      	beq.n	70008264 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
70008232:	4b14      	ldr	r3, [pc, #80]	@ (70008284 <vTaskDelay+0x64>)
70008234:	681b      	ldr	r3, [r3, #0]
70008236:	2b00      	cmp	r3, #0
70008238:	d00b      	beq.n	70008252 <vTaskDelay+0x32>
        __asm volatile
7000823a:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000823e:	f383 8811 	msr	BASEPRI, r3
70008242:	f3bf 8f6f 	isb	sy
70008246:	f3bf 8f4f 	dsb	sy
7000824a:	60bb      	str	r3, [r7, #8]
    }
7000824c:	bf00      	nop
7000824e:	bf00      	nop
70008250:	e7fd      	b.n	7000824e <vTaskDelay+0x2e>
            vTaskSuspendAll();
70008252:	f000 f909 	bl	70008468 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
70008256:	2100      	movs	r1, #0
70008258:	6878      	ldr	r0, [r7, #4]
7000825a:	f001 f87b 	bl	70009354 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
7000825e:	f000 f911 	bl	70008484 <xTaskResumeAll>
70008262:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
70008264:	68fb      	ldr	r3, [r7, #12]
70008266:	2b00      	cmp	r3, #0
70008268:	d107      	bne.n	7000827a <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
7000826a:	4b07      	ldr	r3, [pc, #28]	@ (70008288 <vTaskDelay+0x68>)
7000826c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70008270:	601a      	str	r2, [r3, #0]
70008272:	f3bf 8f4f 	dsb	sy
70008276:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
7000827a:	bf00      	nop
7000827c:	3710      	adds	r7, #16
7000827e:	46bd      	mov	sp, r7
70008280:	bd80      	pop	{r7, pc}
70008282:	bf00      	nop
70008284:	24005144 	.word	0x24005144
70008288:	e000ed04 	.word	0xe000ed04

7000828c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
7000828c:	b580      	push	{r7, lr}
7000828e:	b08a      	sub	sp, #40	@ 0x28
70008290:	af00      	add	r7, sp, #0
70008292:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList;
        List_t const * pxDelayedList;
        List_t const * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
70008294:	687b      	ldr	r3, [r7, #4]
70008296:	61fb      	str	r3, [r7, #28]

        configASSERT( pxTCB );
70008298:	69fb      	ldr	r3, [r7, #28]
7000829a:	2b00      	cmp	r3, #0
7000829c:	d10b      	bne.n	700082b6 <eTaskGetState+0x2a>
        __asm volatile
7000829e:	f04f 0350 	mov.w	r3, #80	@ 0x50
700082a2:	f383 8811 	msr	BASEPRI, r3
700082a6:	f3bf 8f6f 	isb	sy
700082aa:	f3bf 8f4f 	dsb	sy
700082ae:	60fb      	str	r3, [r7, #12]
    }
700082b0:	bf00      	nop
700082b2:	bf00      	nop
700082b4:	e7fd      	b.n	700082b2 <eTaskGetState+0x26>

        if( pxTCB == pxCurrentTCB )
700082b6:	4b2d      	ldr	r3, [pc, #180]	@ (7000836c <eTaskGetState+0xe0>)
700082b8:	681b      	ldr	r3, [r3, #0]
700082ba:	69fa      	ldr	r2, [r7, #28]
700082bc:	429a      	cmp	r2, r3
700082be:	d103      	bne.n	700082c8 <eTaskGetState+0x3c>
        {
            /* The task calling this function is querying its own state. */
            eReturn = eRunning;
700082c0:	2300      	movs	r3, #0
700082c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
700082c6:	e04b      	b.n	70008360 <eTaskGetState+0xd4>
        }
        else
        {
            taskENTER_CRITICAL();
700082c8:	f7fe fab0 	bl	7000682c <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
700082cc:	69fb      	ldr	r3, [r7, #28]
700082ce:	695b      	ldr	r3, [r3, #20]
700082d0:	61bb      	str	r3, [r7, #24]
                pxDelayedList = pxDelayedTaskList;
700082d2:	4b27      	ldr	r3, [pc, #156]	@ (70008370 <eTaskGetState+0xe4>)
700082d4:	681b      	ldr	r3, [r3, #0]
700082d6:	617b      	str	r3, [r7, #20]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
700082d8:	4b26      	ldr	r3, [pc, #152]	@ (70008374 <eTaskGetState+0xe8>)
700082da:	681b      	ldr	r3, [r3, #0]
700082dc:	613b      	str	r3, [r7, #16]
            }
            taskEXIT_CRITICAL();
700082de:	f7fe fad7 	bl	70006890 <vPortExitCritical>

            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
700082e2:	69ba      	ldr	r2, [r7, #24]
700082e4:	697b      	ldr	r3, [r7, #20]
700082e6:	429a      	cmp	r2, r3
700082e8:	d003      	beq.n	700082f2 <eTaskGetState+0x66>
700082ea:	69ba      	ldr	r2, [r7, #24]
700082ec:	693b      	ldr	r3, [r7, #16]
700082ee:	429a      	cmp	r2, r3
700082f0:	d103      	bne.n	700082fa <eTaskGetState+0x6e>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
700082f2:	2302      	movs	r3, #2
700082f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
700082f8:	e032      	b.n	70008360 <eTaskGetState+0xd4>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
700082fa:	69bb      	ldr	r3, [r7, #24]
700082fc:	4a1e      	ldr	r2, [pc, #120]	@ (70008378 <eTaskGetState+0xec>)
700082fe:	4293      	cmp	r3, r2
70008300:	d120      	bne.n	70008344 <eTaskGetState+0xb8>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
70008302:	69fb      	ldr	r3, [r7, #28]
70008304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70008306:	2b00      	cmp	r3, #0
70008308:	d118      	bne.n	7000833c <eTaskGetState+0xb0>
                            /* The task does not appear on the event list item of
                             * and of the RTOS objects, but could still be in the
                             * blocked state if it is waiting on its notification
                             * rather than waiting on an object.  If not, is
                             * suspended. */
                            eReturn = eSuspended;
7000830a:	2303      	movs	r3, #3
7000830c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                            for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
70008310:	2300      	movs	r3, #0
70008312:	623b      	str	r3, [r7, #32]
70008314:	e00e      	b.n	70008334 <eTaskGetState+0xa8>
                            {
                                if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
70008316:	69fa      	ldr	r2, [r7, #28]
70008318:	6a3b      	ldr	r3, [r7, #32]
7000831a:	4413      	add	r3, r2
7000831c:	33a4      	adds	r3, #164	@ 0xa4
7000831e:	781b      	ldrb	r3, [r3, #0]
70008320:	b2db      	uxtb	r3, r3
70008322:	2b01      	cmp	r3, #1
70008324:	d103      	bne.n	7000832e <eTaskGetState+0xa2>
                                {
                                    eReturn = eBlocked;
70008326:	2302      	movs	r3, #2
70008328:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                    break;
7000832c:	e018      	b.n	70008360 <eTaskGetState+0xd4>
                            for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
7000832e:	6a3b      	ldr	r3, [r7, #32]
70008330:	3301      	adds	r3, #1
70008332:	623b      	str	r3, [r7, #32]
70008334:	6a3b      	ldr	r3, [r7, #32]
70008336:	2b00      	cmp	r3, #0
70008338:	dded      	ble.n	70008316 <eTaskGetState+0x8a>
7000833a:	e011      	b.n	70008360 <eTaskGetState+0xd4>
                        }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
7000833c:	2302      	movs	r3, #2
7000833e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
70008342:	e00d      	b.n	70008360 <eTaskGetState+0xd4>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
70008344:	69bb      	ldr	r3, [r7, #24]
70008346:	4a0d      	ldr	r2, [pc, #52]	@ (7000837c <eTaskGetState+0xf0>)
70008348:	4293      	cmp	r3, r2
7000834a:	d002      	beq.n	70008352 <eTaskGetState+0xc6>
7000834c:	69bb      	ldr	r3, [r7, #24]
7000834e:	2b00      	cmp	r3, #0
70008350:	d103      	bne.n	7000835a <eTaskGetState+0xce>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
70008352:	2304      	movs	r3, #4
70008354:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
70008358:	e002      	b.n	70008360 <eTaskGetState+0xd4>

            else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
            {
                /* If the task is not in any other state, it must be in the
                 * Ready (including pending ready) state. */
                eReturn = eReady;
7000835a:	2301      	movs	r3, #1
7000835c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }

        return eReturn;
70008360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
70008364:	4618      	mov	r0, r3
70008366:	3728      	adds	r7, #40	@ 0x28
70008368:	46bd      	mov	sp, r7
7000836a:	bd80      	pop	{r7, pc}
7000836c:	24004c48 	.word	0x24004c48
70008370:	240050d4 	.word	0x240050d4
70008374:	240050d8 	.word	0x240050d8
70008378:	24005108 	.word	0x24005108
7000837c:	240050f0 	.word	0x240050f0

70008380 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
70008380:	b580      	push	{r7, lr}
70008382:	b08a      	sub	sp, #40	@ 0x28
70008384:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
70008386:	2300      	movs	r3, #0
70008388:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
7000838a:	2300      	movs	r3, #0
7000838c:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
7000838e:	463a      	mov	r2, r7
70008390:	1d39      	adds	r1, r7, #4
70008392:	f107 0308 	add.w	r3, r7, #8
70008396:	4618      	mov	r0, r3
70008398:	f7fd fe5c 	bl	70006054 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
7000839c:	6839      	ldr	r1, [r7, #0]
7000839e:	687b      	ldr	r3, [r7, #4]
700083a0:	68ba      	ldr	r2, [r7, #8]
700083a2:	9202      	str	r2, [sp, #8]
700083a4:	9301      	str	r3, [sp, #4]
700083a6:	2300      	movs	r3, #0
700083a8:	9300      	str	r3, [sp, #0]
700083aa:	2300      	movs	r3, #0
700083ac:	460a      	mov	r2, r1
700083ae:	4925      	ldr	r1, [pc, #148]	@ (70008444 <vTaskStartScheduler+0xc4>)
700083b0:	4825      	ldr	r0, [pc, #148]	@ (70008448 <vTaskStartScheduler+0xc8>)
700083b2:	f7ff fccf 	bl	70007d54 <xTaskCreateStatic>
700083b6:	4603      	mov	r3, r0
700083b8:	4a24      	ldr	r2, [pc, #144]	@ (7000844c <vTaskStartScheduler+0xcc>)
700083ba:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
700083bc:	4b23      	ldr	r3, [pc, #140]	@ (7000844c <vTaskStartScheduler+0xcc>)
700083be:	681b      	ldr	r3, [r3, #0]
700083c0:	2b00      	cmp	r3, #0
700083c2:	d002      	beq.n	700083ca <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
700083c4:	2301      	movs	r3, #1
700083c6:	617b      	str	r3, [r7, #20]
700083c8:	e001      	b.n	700083ce <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
700083ca:	2300      	movs	r3, #0
700083cc:	617b      	str	r3, [r7, #20]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
700083ce:	697b      	ldr	r3, [r7, #20]
700083d0:	2b01      	cmp	r3, #1
700083d2:	d102      	bne.n	700083da <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
700083d4:	f001 f82c 	bl	70009430 <xTimerCreateTimerTask>
700083d8:	6178      	str	r0, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
700083da:	697b      	ldr	r3, [r7, #20]
700083dc:	2b01      	cmp	r3, #1
700083de:	d11b      	bne.n	70008418 <vTaskStartScheduler+0x98>
        __asm volatile
700083e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
700083e4:	f383 8811 	msr	BASEPRI, r3
700083e8:	f3bf 8f6f 	isb	sy
700083ec:	f3bf 8f4f 	dsb	sy
700083f0:	613b      	str	r3, [r7, #16]
    }
700083f2:	bf00      	nop

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
700083f4:	4b16      	ldr	r3, [pc, #88]	@ (70008450 <vTaskStartScheduler+0xd0>)
700083f6:	681b      	ldr	r3, [r3, #0]
700083f8:	3354      	adds	r3, #84	@ 0x54
700083fa:	4a16      	ldr	r2, [pc, #88]	@ (70008454 <vTaskStartScheduler+0xd4>)
700083fc:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
700083fe:	4b16      	ldr	r3, [pc, #88]	@ (70008458 <vTaskStartScheduler+0xd8>)
70008400:	f04f 32ff 	mov.w	r2, #4294967295
70008404:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
70008406:	4b15      	ldr	r3, [pc, #84]	@ (7000845c <vTaskStartScheduler+0xdc>)
70008408:	2201      	movs	r2, #1
7000840a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
7000840c:	4b14      	ldr	r3, [pc, #80]	@ (70008460 <vTaskStartScheduler+0xe0>)
7000840e:	2200      	movs	r2, #0
70008410:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
70008412:	f7fe f967 	bl	700066e4 <xPortStartScheduler>
70008416:	e00f      	b.n	70008438 <vTaskStartScheduler+0xb8>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
70008418:	697b      	ldr	r3, [r7, #20]
7000841a:	f1b3 3fff 	cmp.w	r3, #4294967295
7000841e:	d10b      	bne.n	70008438 <vTaskStartScheduler+0xb8>
        __asm volatile
70008420:	f04f 0350 	mov.w	r3, #80	@ 0x50
70008424:	f383 8811 	msr	BASEPRI, r3
70008428:	f3bf 8f6f 	isb	sy
7000842c:	f3bf 8f4f 	dsb	sy
70008430:	60fb      	str	r3, [r7, #12]
    }
70008432:	bf00      	nop
70008434:	bf00      	nop
70008436:	e7fd      	b.n	70008434 <vTaskStartScheduler+0xb4>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
70008438:	4b0a      	ldr	r3, [pc, #40]	@ (70008464 <vTaskStartScheduler+0xe4>)
7000843a:	681b      	ldr	r3, [r3, #0]
}
7000843c:	bf00      	nop
7000843e:	3718      	adds	r7, #24
70008440:	46bd      	mov	sp, r7
70008442:	bd80      	pop	{r7, pc}
70008444:	70014c6c 	.word	0x70014c6c
70008448:	70008d75 	.word	0x70008d75
7000844c:	24005140 	.word	0x24005140
70008450:	24004c48 	.word	0x24004c48
70008454:	24000040 	.word	0x24000040
70008458:	2400513c 	.word	0x2400513c
7000845c:	24005128 	.word	0x24005128
70008460:	24005120 	.word	0x24005120
70008464:	24000024 	.word	0x24000024

70008468 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
70008468:	b480      	push	{r7}
7000846a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
7000846c:	4b04      	ldr	r3, [pc, #16]	@ (70008480 <vTaskSuspendAll+0x18>)
7000846e:	681b      	ldr	r3, [r3, #0]
70008470:	3301      	adds	r3, #1
70008472:	4a03      	ldr	r2, [pc, #12]	@ (70008480 <vTaskSuspendAll+0x18>)
70008474:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
70008476:	bf00      	nop
70008478:	46bd      	mov	sp, r7
7000847a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000847e:	4770      	bx	lr
70008480:	24005144 	.word	0x24005144

70008484 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
70008484:	b580      	push	{r7, lr}
70008486:	b088      	sub	sp, #32
70008488:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
7000848a:	2300      	movs	r3, #0
7000848c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
7000848e:	2300      	movs	r3, #0
70008490:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
70008492:	4b72      	ldr	r3, [pc, #456]	@ (7000865c <xTaskResumeAll+0x1d8>)
70008494:	681b      	ldr	r3, [r3, #0]
70008496:	2b00      	cmp	r3, #0
70008498:	d10b      	bne.n	700084b2 <xTaskResumeAll+0x2e>
        __asm volatile
7000849a:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000849e:	f383 8811 	msr	BASEPRI, r3
700084a2:	f3bf 8f6f 	isb	sy
700084a6:	f3bf 8f4f 	dsb	sy
700084aa:	607b      	str	r3, [r7, #4]
    }
700084ac:	bf00      	nop
700084ae:	bf00      	nop
700084b0:	e7fd      	b.n	700084ae <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
700084b2:	f7fe f9bb 	bl	7000682c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
700084b6:	4b69      	ldr	r3, [pc, #420]	@ (7000865c <xTaskResumeAll+0x1d8>)
700084b8:	681b      	ldr	r3, [r3, #0]
700084ba:	3b01      	subs	r3, #1
700084bc:	4a67      	ldr	r2, [pc, #412]	@ (7000865c <xTaskResumeAll+0x1d8>)
700084be:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
700084c0:	4b66      	ldr	r3, [pc, #408]	@ (7000865c <xTaskResumeAll+0x1d8>)
700084c2:	681b      	ldr	r3, [r3, #0]
700084c4:	2b00      	cmp	r3, #0
700084c6:	f040 80c1 	bne.w	7000864c <xTaskResumeAll+0x1c8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
700084ca:	4b65      	ldr	r3, [pc, #404]	@ (70008660 <xTaskResumeAll+0x1dc>)
700084cc:	681b      	ldr	r3, [r3, #0]
700084ce:	2b00      	cmp	r3, #0
700084d0:	f000 80bc 	beq.w	7000864c <xTaskResumeAll+0x1c8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
700084d4:	e08b      	b.n	700085ee <xTaskResumeAll+0x16a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
700084d6:	4b63      	ldr	r3, [pc, #396]	@ (70008664 <xTaskResumeAll+0x1e0>)
700084d8:	68db      	ldr	r3, [r3, #12]
700084da:	68db      	ldr	r3, [r3, #12]
700084dc:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
700084de:	69fb      	ldr	r3, [r7, #28]
700084e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
700084e2:	613b      	str	r3, [r7, #16]
700084e4:	69fb      	ldr	r3, [r7, #28]
700084e6:	69db      	ldr	r3, [r3, #28]
700084e8:	69fa      	ldr	r2, [r7, #28]
700084ea:	6a12      	ldr	r2, [r2, #32]
700084ec:	609a      	str	r2, [r3, #8]
700084ee:	69fb      	ldr	r3, [r7, #28]
700084f0:	6a1b      	ldr	r3, [r3, #32]
700084f2:	69fa      	ldr	r2, [r7, #28]
700084f4:	69d2      	ldr	r2, [r2, #28]
700084f6:	605a      	str	r2, [r3, #4]
700084f8:	693b      	ldr	r3, [r7, #16]
700084fa:	685a      	ldr	r2, [r3, #4]
700084fc:	69fb      	ldr	r3, [r7, #28]
700084fe:	3318      	adds	r3, #24
70008500:	429a      	cmp	r2, r3
70008502:	d103      	bne.n	7000850c <xTaskResumeAll+0x88>
70008504:	69fb      	ldr	r3, [r7, #28]
70008506:	6a1a      	ldr	r2, [r3, #32]
70008508:	693b      	ldr	r3, [r7, #16]
7000850a:	605a      	str	r2, [r3, #4]
7000850c:	69fb      	ldr	r3, [r7, #28]
7000850e:	2200      	movs	r2, #0
70008510:	629a      	str	r2, [r3, #40]	@ 0x28
70008512:	693b      	ldr	r3, [r7, #16]
70008514:	681b      	ldr	r3, [r3, #0]
70008516:	1e5a      	subs	r2, r3, #1
70008518:	693b      	ldr	r3, [r7, #16]
7000851a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
7000851c:	69fb      	ldr	r3, [r7, #28]
7000851e:	695b      	ldr	r3, [r3, #20]
70008520:	60fb      	str	r3, [r7, #12]
70008522:	69fb      	ldr	r3, [r7, #28]
70008524:	689b      	ldr	r3, [r3, #8]
70008526:	69fa      	ldr	r2, [r7, #28]
70008528:	68d2      	ldr	r2, [r2, #12]
7000852a:	609a      	str	r2, [r3, #8]
7000852c:	69fb      	ldr	r3, [r7, #28]
7000852e:	68db      	ldr	r3, [r3, #12]
70008530:	69fa      	ldr	r2, [r7, #28]
70008532:	6892      	ldr	r2, [r2, #8]
70008534:	605a      	str	r2, [r3, #4]
70008536:	68fb      	ldr	r3, [r7, #12]
70008538:	685a      	ldr	r2, [r3, #4]
7000853a:	69fb      	ldr	r3, [r7, #28]
7000853c:	3304      	adds	r3, #4
7000853e:	429a      	cmp	r2, r3
70008540:	d103      	bne.n	7000854a <xTaskResumeAll+0xc6>
70008542:	69fb      	ldr	r3, [r7, #28]
70008544:	68da      	ldr	r2, [r3, #12]
70008546:	68fb      	ldr	r3, [r7, #12]
70008548:	605a      	str	r2, [r3, #4]
7000854a:	69fb      	ldr	r3, [r7, #28]
7000854c:	2200      	movs	r2, #0
7000854e:	615a      	str	r2, [r3, #20]
70008550:	68fb      	ldr	r3, [r7, #12]
70008552:	681b      	ldr	r3, [r3, #0]
70008554:	1e5a      	subs	r2, r3, #1
70008556:	68fb      	ldr	r3, [r7, #12]
70008558:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
7000855a:	69fb      	ldr	r3, [r7, #28]
7000855c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000855e:	4b42      	ldr	r3, [pc, #264]	@ (70008668 <xTaskResumeAll+0x1e4>)
70008560:	681b      	ldr	r3, [r3, #0]
70008562:	429a      	cmp	r2, r3
70008564:	d903      	bls.n	7000856e <xTaskResumeAll+0xea>
70008566:	69fb      	ldr	r3, [r7, #28]
70008568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000856a:	4a3f      	ldr	r2, [pc, #252]	@ (70008668 <xTaskResumeAll+0x1e4>)
7000856c:	6013      	str	r3, [r2, #0]
7000856e:	69fb      	ldr	r3, [r7, #28]
70008570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008572:	493e      	ldr	r1, [pc, #248]	@ (7000866c <xTaskResumeAll+0x1e8>)
70008574:	4613      	mov	r3, r2
70008576:	009b      	lsls	r3, r3, #2
70008578:	4413      	add	r3, r2
7000857a:	009b      	lsls	r3, r3, #2
7000857c:	440b      	add	r3, r1
7000857e:	3304      	adds	r3, #4
70008580:	681b      	ldr	r3, [r3, #0]
70008582:	60bb      	str	r3, [r7, #8]
70008584:	69fb      	ldr	r3, [r7, #28]
70008586:	68ba      	ldr	r2, [r7, #8]
70008588:	609a      	str	r2, [r3, #8]
7000858a:	68bb      	ldr	r3, [r7, #8]
7000858c:	689a      	ldr	r2, [r3, #8]
7000858e:	69fb      	ldr	r3, [r7, #28]
70008590:	60da      	str	r2, [r3, #12]
70008592:	68bb      	ldr	r3, [r7, #8]
70008594:	689b      	ldr	r3, [r3, #8]
70008596:	69fa      	ldr	r2, [r7, #28]
70008598:	3204      	adds	r2, #4
7000859a:	605a      	str	r2, [r3, #4]
7000859c:	69fb      	ldr	r3, [r7, #28]
7000859e:	1d1a      	adds	r2, r3, #4
700085a0:	68bb      	ldr	r3, [r7, #8]
700085a2:	609a      	str	r2, [r3, #8]
700085a4:	69fb      	ldr	r3, [r7, #28]
700085a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700085a8:	4613      	mov	r3, r2
700085aa:	009b      	lsls	r3, r3, #2
700085ac:	4413      	add	r3, r2
700085ae:	009b      	lsls	r3, r3, #2
700085b0:	4a2e      	ldr	r2, [pc, #184]	@ (7000866c <xTaskResumeAll+0x1e8>)
700085b2:	441a      	add	r2, r3
700085b4:	69fb      	ldr	r3, [r7, #28]
700085b6:	615a      	str	r2, [r3, #20]
700085b8:	69fb      	ldr	r3, [r7, #28]
700085ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700085bc:	492b      	ldr	r1, [pc, #172]	@ (7000866c <xTaskResumeAll+0x1e8>)
700085be:	4613      	mov	r3, r2
700085c0:	009b      	lsls	r3, r3, #2
700085c2:	4413      	add	r3, r2
700085c4:	009b      	lsls	r3, r3, #2
700085c6:	440b      	add	r3, r1
700085c8:	681b      	ldr	r3, [r3, #0]
700085ca:	1c59      	adds	r1, r3, #1
700085cc:	4827      	ldr	r0, [pc, #156]	@ (7000866c <xTaskResumeAll+0x1e8>)
700085ce:	4613      	mov	r3, r2
700085d0:	009b      	lsls	r3, r3, #2
700085d2:	4413      	add	r3, r2
700085d4:	009b      	lsls	r3, r3, #2
700085d6:	4403      	add	r3, r0
700085d8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
700085da:	69fb      	ldr	r3, [r7, #28]
700085dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700085de:	4b24      	ldr	r3, [pc, #144]	@ (70008670 <xTaskResumeAll+0x1ec>)
700085e0:	681b      	ldr	r3, [r3, #0]
700085e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700085e4:	429a      	cmp	r2, r3
700085e6:	d302      	bcc.n	700085ee <xTaskResumeAll+0x16a>
                    {
                        xYieldPending = pdTRUE;
700085e8:	4b22      	ldr	r3, [pc, #136]	@ (70008674 <xTaskResumeAll+0x1f0>)
700085ea:	2201      	movs	r2, #1
700085ec:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
700085ee:	4b1d      	ldr	r3, [pc, #116]	@ (70008664 <xTaskResumeAll+0x1e0>)
700085f0:	681b      	ldr	r3, [r3, #0]
700085f2:	2b00      	cmp	r3, #0
700085f4:	f47f af6f 	bne.w	700084d6 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
700085f8:	69fb      	ldr	r3, [r7, #28]
700085fa:	2b00      	cmp	r3, #0
700085fc:	d001      	beq.n	70008602 <xTaskResumeAll+0x17e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
700085fe:	f000 fc77 	bl	70008ef0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
70008602:	4b1d      	ldr	r3, [pc, #116]	@ (70008678 <xTaskResumeAll+0x1f4>)
70008604:	681b      	ldr	r3, [r3, #0]
70008606:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
70008608:	697b      	ldr	r3, [r7, #20]
7000860a:	2b00      	cmp	r3, #0
7000860c:	d010      	beq.n	70008630 <xTaskResumeAll+0x1ac>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
7000860e:	f000 f865 	bl	700086dc <xTaskIncrementTick>
70008612:	4603      	mov	r3, r0
70008614:	2b00      	cmp	r3, #0
70008616:	d002      	beq.n	7000861e <xTaskResumeAll+0x19a>
                            {
                                xYieldPending = pdTRUE;
70008618:	4b16      	ldr	r3, [pc, #88]	@ (70008674 <xTaskResumeAll+0x1f0>)
7000861a:	2201      	movs	r2, #1
7000861c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
7000861e:	697b      	ldr	r3, [r7, #20]
70008620:	3b01      	subs	r3, #1
70008622:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
70008624:	697b      	ldr	r3, [r7, #20]
70008626:	2b00      	cmp	r3, #0
70008628:	d1f1      	bne.n	7000860e <xTaskResumeAll+0x18a>

                        xPendedTicks = 0;
7000862a:	4b13      	ldr	r3, [pc, #76]	@ (70008678 <xTaskResumeAll+0x1f4>)
7000862c:	2200      	movs	r2, #0
7000862e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
70008630:	4b10      	ldr	r3, [pc, #64]	@ (70008674 <xTaskResumeAll+0x1f0>)
70008632:	681b      	ldr	r3, [r3, #0]
70008634:	2b00      	cmp	r3, #0
70008636:	d009      	beq.n	7000864c <xTaskResumeAll+0x1c8>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
70008638:	2301      	movs	r3, #1
7000863a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
7000863c:	4b0f      	ldr	r3, [pc, #60]	@ (7000867c <xTaskResumeAll+0x1f8>)
7000863e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70008642:	601a      	str	r2, [r3, #0]
70008644:	f3bf 8f4f 	dsb	sy
70008648:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
7000864c:	f7fe f920 	bl	70006890 <vPortExitCritical>

    return xAlreadyYielded;
70008650:	69bb      	ldr	r3, [r7, #24]
}
70008652:	4618      	mov	r0, r3
70008654:	3720      	adds	r7, #32
70008656:	46bd      	mov	sp, r7
70008658:	bd80      	pop	{r7, pc}
7000865a:	bf00      	nop
7000865c:	24005144 	.word	0x24005144
70008660:	2400511c 	.word	0x2400511c
70008664:	240050dc 	.word	0x240050dc
70008668:	24005124 	.word	0x24005124
7000866c:	24004c4c 	.word	0x24004c4c
70008670:	24004c48 	.word	0x24004c48
70008674:	24005130 	.word	0x24005130
70008678:	2400512c 	.word	0x2400512c
7000867c:	e000ed04 	.word	0xe000ed04

70008680 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
70008680:	b480      	push	{r7}
70008682:	b083      	sub	sp, #12
70008684:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
70008686:	4b05      	ldr	r3, [pc, #20]	@ (7000869c <xTaskGetTickCount+0x1c>)
70008688:	681b      	ldr	r3, [r3, #0]
7000868a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
7000868c:	687b      	ldr	r3, [r7, #4]
}
7000868e:	4618      	mov	r0, r3
70008690:	370c      	adds	r7, #12
70008692:	46bd      	mov	sp, r7
70008694:	f85d 7b04 	ldr.w	r7, [sp], #4
70008698:	4770      	bx	lr
7000869a:	bf00      	nop
7000869c:	24005120 	.word	0x24005120

700086a0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
700086a0:	b580      	push	{r7, lr}
700086a2:	b082      	sub	sp, #8
700086a4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
700086a6:	f7fe f9a9 	bl	700069fc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
700086aa:	2300      	movs	r3, #0
700086ac:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
700086ae:	4b04      	ldr	r3, [pc, #16]	@ (700086c0 <xTaskGetTickCountFromISR+0x20>)
700086b0:	681b      	ldr	r3, [r3, #0]
700086b2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
700086b4:	683b      	ldr	r3, [r7, #0]
}
700086b6:	4618      	mov	r0, r3
700086b8:	3708      	adds	r7, #8
700086ba:	46bd      	mov	sp, r7
700086bc:	bd80      	pop	{r7, pc}
700086be:	bf00      	nop
700086c0:	24005120 	.word	0x24005120

700086c4 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
700086c4:	b480      	push	{r7}
700086c6:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
700086c8:	4b03      	ldr	r3, [pc, #12]	@ (700086d8 <uxTaskGetNumberOfTasks+0x14>)
700086ca:	681b      	ldr	r3, [r3, #0]
}
700086cc:	4618      	mov	r0, r3
700086ce:	46bd      	mov	sp, r7
700086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
700086d4:	4770      	bx	lr
700086d6:	bf00      	nop
700086d8:	2400511c 	.word	0x2400511c

700086dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
700086dc:	b580      	push	{r7, lr}
700086de:	b08a      	sub	sp, #40	@ 0x28
700086e0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
700086e2:	2300      	movs	r3, #0
700086e4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
700086e6:	4b7e      	ldr	r3, [pc, #504]	@ (700088e0 <xTaskIncrementTick+0x204>)
700086e8:	681b      	ldr	r3, [r3, #0]
700086ea:	2b00      	cmp	r3, #0
700086ec:	f040 80ee 	bne.w	700088cc <xTaskIncrementTick+0x1f0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
700086f0:	4b7c      	ldr	r3, [pc, #496]	@ (700088e4 <xTaskIncrementTick+0x208>)
700086f2:	681b      	ldr	r3, [r3, #0]
700086f4:	3301      	adds	r3, #1
700086f6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
700086f8:	4a7a      	ldr	r2, [pc, #488]	@ (700088e4 <xTaskIncrementTick+0x208>)
700086fa:	6a3b      	ldr	r3, [r7, #32]
700086fc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
700086fe:	6a3b      	ldr	r3, [r7, #32]
70008700:	2b00      	cmp	r3, #0
70008702:	d121      	bne.n	70008748 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
70008704:	4b78      	ldr	r3, [pc, #480]	@ (700088e8 <xTaskIncrementTick+0x20c>)
70008706:	681b      	ldr	r3, [r3, #0]
70008708:	681b      	ldr	r3, [r3, #0]
7000870a:	2b00      	cmp	r3, #0
7000870c:	d00b      	beq.n	70008726 <xTaskIncrementTick+0x4a>
        __asm volatile
7000870e:	f04f 0350 	mov.w	r3, #80	@ 0x50
70008712:	f383 8811 	msr	BASEPRI, r3
70008716:	f3bf 8f6f 	isb	sy
7000871a:	f3bf 8f4f 	dsb	sy
7000871e:	607b      	str	r3, [r7, #4]
    }
70008720:	bf00      	nop
70008722:	bf00      	nop
70008724:	e7fd      	b.n	70008722 <xTaskIncrementTick+0x46>
70008726:	4b70      	ldr	r3, [pc, #448]	@ (700088e8 <xTaskIncrementTick+0x20c>)
70008728:	681b      	ldr	r3, [r3, #0]
7000872a:	61fb      	str	r3, [r7, #28]
7000872c:	4b6f      	ldr	r3, [pc, #444]	@ (700088ec <xTaskIncrementTick+0x210>)
7000872e:	681b      	ldr	r3, [r3, #0]
70008730:	4a6d      	ldr	r2, [pc, #436]	@ (700088e8 <xTaskIncrementTick+0x20c>)
70008732:	6013      	str	r3, [r2, #0]
70008734:	4a6d      	ldr	r2, [pc, #436]	@ (700088ec <xTaskIncrementTick+0x210>)
70008736:	69fb      	ldr	r3, [r7, #28]
70008738:	6013      	str	r3, [r2, #0]
7000873a:	4b6d      	ldr	r3, [pc, #436]	@ (700088f0 <xTaskIncrementTick+0x214>)
7000873c:	681b      	ldr	r3, [r3, #0]
7000873e:	3301      	adds	r3, #1
70008740:	4a6b      	ldr	r2, [pc, #428]	@ (700088f0 <xTaskIncrementTick+0x214>)
70008742:	6013      	str	r3, [r2, #0]
70008744:	f000 fbd4 	bl	70008ef0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
70008748:	4b6a      	ldr	r3, [pc, #424]	@ (700088f4 <xTaskIncrementTick+0x218>)
7000874a:	681b      	ldr	r3, [r3, #0]
7000874c:	6a3a      	ldr	r2, [r7, #32]
7000874e:	429a      	cmp	r2, r3
70008750:	f0c0 80a7 	bcc.w	700088a2 <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
70008754:	4b64      	ldr	r3, [pc, #400]	@ (700088e8 <xTaskIncrementTick+0x20c>)
70008756:	681b      	ldr	r3, [r3, #0]
70008758:	681b      	ldr	r3, [r3, #0]
7000875a:	2b00      	cmp	r3, #0
7000875c:	d104      	bne.n	70008768 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
7000875e:	4b65      	ldr	r3, [pc, #404]	@ (700088f4 <xTaskIncrementTick+0x218>)
70008760:	f04f 32ff 	mov.w	r2, #4294967295
70008764:	601a      	str	r2, [r3, #0]
                    break;
70008766:	e09c      	b.n	700088a2 <xTaskIncrementTick+0x1c6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
70008768:	4b5f      	ldr	r3, [pc, #380]	@ (700088e8 <xTaskIncrementTick+0x20c>)
7000876a:	681b      	ldr	r3, [r3, #0]
7000876c:	68db      	ldr	r3, [r3, #12]
7000876e:	68db      	ldr	r3, [r3, #12]
70008770:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
70008772:	69bb      	ldr	r3, [r7, #24]
70008774:	685b      	ldr	r3, [r3, #4]
70008776:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
70008778:	6a3a      	ldr	r2, [r7, #32]
7000877a:	697b      	ldr	r3, [r7, #20]
7000877c:	429a      	cmp	r2, r3
7000877e:	d203      	bcs.n	70008788 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
70008780:	4a5c      	ldr	r2, [pc, #368]	@ (700088f4 <xTaskIncrementTick+0x218>)
70008782:	697b      	ldr	r3, [r7, #20]
70008784:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
70008786:	e08c      	b.n	700088a2 <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
70008788:	69bb      	ldr	r3, [r7, #24]
7000878a:	695b      	ldr	r3, [r3, #20]
7000878c:	613b      	str	r3, [r7, #16]
7000878e:	69bb      	ldr	r3, [r7, #24]
70008790:	689b      	ldr	r3, [r3, #8]
70008792:	69ba      	ldr	r2, [r7, #24]
70008794:	68d2      	ldr	r2, [r2, #12]
70008796:	609a      	str	r2, [r3, #8]
70008798:	69bb      	ldr	r3, [r7, #24]
7000879a:	68db      	ldr	r3, [r3, #12]
7000879c:	69ba      	ldr	r2, [r7, #24]
7000879e:	6892      	ldr	r2, [r2, #8]
700087a0:	605a      	str	r2, [r3, #4]
700087a2:	693b      	ldr	r3, [r7, #16]
700087a4:	685a      	ldr	r2, [r3, #4]
700087a6:	69bb      	ldr	r3, [r7, #24]
700087a8:	3304      	adds	r3, #4
700087aa:	429a      	cmp	r2, r3
700087ac:	d103      	bne.n	700087b6 <xTaskIncrementTick+0xda>
700087ae:	69bb      	ldr	r3, [r7, #24]
700087b0:	68da      	ldr	r2, [r3, #12]
700087b2:	693b      	ldr	r3, [r7, #16]
700087b4:	605a      	str	r2, [r3, #4]
700087b6:	69bb      	ldr	r3, [r7, #24]
700087b8:	2200      	movs	r2, #0
700087ba:	615a      	str	r2, [r3, #20]
700087bc:	693b      	ldr	r3, [r7, #16]
700087be:	681b      	ldr	r3, [r3, #0]
700087c0:	1e5a      	subs	r2, r3, #1
700087c2:	693b      	ldr	r3, [r7, #16]
700087c4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
700087c6:	69bb      	ldr	r3, [r7, #24]
700087c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
700087ca:	2b00      	cmp	r3, #0
700087cc:	d01e      	beq.n	7000880c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
700087ce:	69bb      	ldr	r3, [r7, #24]
700087d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
700087d2:	60fb      	str	r3, [r7, #12]
700087d4:	69bb      	ldr	r3, [r7, #24]
700087d6:	69db      	ldr	r3, [r3, #28]
700087d8:	69ba      	ldr	r2, [r7, #24]
700087da:	6a12      	ldr	r2, [r2, #32]
700087dc:	609a      	str	r2, [r3, #8]
700087de:	69bb      	ldr	r3, [r7, #24]
700087e0:	6a1b      	ldr	r3, [r3, #32]
700087e2:	69ba      	ldr	r2, [r7, #24]
700087e4:	69d2      	ldr	r2, [r2, #28]
700087e6:	605a      	str	r2, [r3, #4]
700087e8:	68fb      	ldr	r3, [r7, #12]
700087ea:	685a      	ldr	r2, [r3, #4]
700087ec:	69bb      	ldr	r3, [r7, #24]
700087ee:	3318      	adds	r3, #24
700087f0:	429a      	cmp	r2, r3
700087f2:	d103      	bne.n	700087fc <xTaskIncrementTick+0x120>
700087f4:	69bb      	ldr	r3, [r7, #24]
700087f6:	6a1a      	ldr	r2, [r3, #32]
700087f8:	68fb      	ldr	r3, [r7, #12]
700087fa:	605a      	str	r2, [r3, #4]
700087fc:	69bb      	ldr	r3, [r7, #24]
700087fe:	2200      	movs	r2, #0
70008800:	629a      	str	r2, [r3, #40]	@ 0x28
70008802:	68fb      	ldr	r3, [r7, #12]
70008804:	681b      	ldr	r3, [r3, #0]
70008806:	1e5a      	subs	r2, r3, #1
70008808:	68fb      	ldr	r3, [r7, #12]
7000880a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
7000880c:	69bb      	ldr	r3, [r7, #24]
7000880e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008810:	4b39      	ldr	r3, [pc, #228]	@ (700088f8 <xTaskIncrementTick+0x21c>)
70008812:	681b      	ldr	r3, [r3, #0]
70008814:	429a      	cmp	r2, r3
70008816:	d903      	bls.n	70008820 <xTaskIncrementTick+0x144>
70008818:	69bb      	ldr	r3, [r7, #24]
7000881a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000881c:	4a36      	ldr	r2, [pc, #216]	@ (700088f8 <xTaskIncrementTick+0x21c>)
7000881e:	6013      	str	r3, [r2, #0]
70008820:	69bb      	ldr	r3, [r7, #24]
70008822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008824:	4935      	ldr	r1, [pc, #212]	@ (700088fc <xTaskIncrementTick+0x220>)
70008826:	4613      	mov	r3, r2
70008828:	009b      	lsls	r3, r3, #2
7000882a:	4413      	add	r3, r2
7000882c:	009b      	lsls	r3, r3, #2
7000882e:	440b      	add	r3, r1
70008830:	3304      	adds	r3, #4
70008832:	681b      	ldr	r3, [r3, #0]
70008834:	60bb      	str	r3, [r7, #8]
70008836:	69bb      	ldr	r3, [r7, #24]
70008838:	68ba      	ldr	r2, [r7, #8]
7000883a:	609a      	str	r2, [r3, #8]
7000883c:	68bb      	ldr	r3, [r7, #8]
7000883e:	689a      	ldr	r2, [r3, #8]
70008840:	69bb      	ldr	r3, [r7, #24]
70008842:	60da      	str	r2, [r3, #12]
70008844:	68bb      	ldr	r3, [r7, #8]
70008846:	689b      	ldr	r3, [r3, #8]
70008848:	69ba      	ldr	r2, [r7, #24]
7000884a:	3204      	adds	r2, #4
7000884c:	605a      	str	r2, [r3, #4]
7000884e:	69bb      	ldr	r3, [r7, #24]
70008850:	1d1a      	adds	r2, r3, #4
70008852:	68bb      	ldr	r3, [r7, #8]
70008854:	609a      	str	r2, [r3, #8]
70008856:	69bb      	ldr	r3, [r7, #24]
70008858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000885a:	4613      	mov	r3, r2
7000885c:	009b      	lsls	r3, r3, #2
7000885e:	4413      	add	r3, r2
70008860:	009b      	lsls	r3, r3, #2
70008862:	4a26      	ldr	r2, [pc, #152]	@ (700088fc <xTaskIncrementTick+0x220>)
70008864:	441a      	add	r2, r3
70008866:	69bb      	ldr	r3, [r7, #24]
70008868:	615a      	str	r2, [r3, #20]
7000886a:	69bb      	ldr	r3, [r7, #24]
7000886c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000886e:	4923      	ldr	r1, [pc, #140]	@ (700088fc <xTaskIncrementTick+0x220>)
70008870:	4613      	mov	r3, r2
70008872:	009b      	lsls	r3, r3, #2
70008874:	4413      	add	r3, r2
70008876:	009b      	lsls	r3, r3, #2
70008878:	440b      	add	r3, r1
7000887a:	681b      	ldr	r3, [r3, #0]
7000887c:	1c59      	adds	r1, r3, #1
7000887e:	481f      	ldr	r0, [pc, #124]	@ (700088fc <xTaskIncrementTick+0x220>)
70008880:	4613      	mov	r3, r2
70008882:	009b      	lsls	r3, r3, #2
70008884:	4413      	add	r3, r2
70008886:	009b      	lsls	r3, r3, #2
70008888:	4403      	add	r3, r0
7000888a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
7000888c:	69bb      	ldr	r3, [r7, #24]
7000888e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008890:	4b1b      	ldr	r3, [pc, #108]	@ (70008900 <xTaskIncrementTick+0x224>)
70008892:	681b      	ldr	r3, [r3, #0]
70008894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70008896:	429a      	cmp	r2, r3
70008898:	f67f af5c 	bls.w	70008754 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
7000889c:	2301      	movs	r3, #1
7000889e:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
700088a0:	e758      	b.n	70008754 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
700088a2:	4b17      	ldr	r3, [pc, #92]	@ (70008900 <xTaskIncrementTick+0x224>)
700088a4:	681b      	ldr	r3, [r3, #0]
700088a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700088a8:	4914      	ldr	r1, [pc, #80]	@ (700088fc <xTaskIncrementTick+0x220>)
700088aa:	4613      	mov	r3, r2
700088ac:	009b      	lsls	r3, r3, #2
700088ae:	4413      	add	r3, r2
700088b0:	009b      	lsls	r3, r3, #2
700088b2:	440b      	add	r3, r1
700088b4:	681b      	ldr	r3, [r3, #0]
700088b6:	2b01      	cmp	r3, #1
700088b8:	d901      	bls.n	700088be <xTaskIncrementTick+0x1e2>
            {
                xSwitchRequired = pdTRUE;
700088ba:	2301      	movs	r3, #1
700088bc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
700088be:	4b11      	ldr	r3, [pc, #68]	@ (70008904 <xTaskIncrementTick+0x228>)
700088c0:	681b      	ldr	r3, [r3, #0]
700088c2:	2b00      	cmp	r3, #0
700088c4:	d007      	beq.n	700088d6 <xTaskIncrementTick+0x1fa>
            {
                xSwitchRequired = pdTRUE;
700088c6:	2301      	movs	r3, #1
700088c8:	627b      	str	r3, [r7, #36]	@ 0x24
700088ca:	e004      	b.n	700088d6 <xTaskIncrementTick+0x1fa>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
700088cc:	4b0e      	ldr	r3, [pc, #56]	@ (70008908 <xTaskIncrementTick+0x22c>)
700088ce:	681b      	ldr	r3, [r3, #0]
700088d0:	3301      	adds	r3, #1
700088d2:	4a0d      	ldr	r2, [pc, #52]	@ (70008908 <xTaskIncrementTick+0x22c>)
700088d4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
700088d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
700088d8:	4618      	mov	r0, r3
700088da:	3728      	adds	r7, #40	@ 0x28
700088dc:	46bd      	mov	sp, r7
700088de:	bd80      	pop	{r7, pc}
700088e0:	24005144 	.word	0x24005144
700088e4:	24005120 	.word	0x24005120
700088e8:	240050d4 	.word	0x240050d4
700088ec:	240050d8 	.word	0x240050d8
700088f0:	24005134 	.word	0x24005134
700088f4:	2400513c 	.word	0x2400513c
700088f8:	24005124 	.word	0x24005124
700088fc:	24004c4c 	.word	0x24004c4c
70008900:	24004c48 	.word	0x24004c48
70008904:	24005130 	.word	0x24005130
70008908:	2400512c 	.word	0x2400512c

7000890c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
7000890c:	b480      	push	{r7}
7000890e:	b085      	sub	sp, #20
70008910:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
70008912:	4b2b      	ldr	r3, [pc, #172]	@ (700089c0 <vTaskSwitchContext+0xb4>)
70008914:	681b      	ldr	r3, [r3, #0]
70008916:	2b00      	cmp	r3, #0
70008918:	d003      	beq.n	70008922 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
7000891a:	4b2a      	ldr	r3, [pc, #168]	@ (700089c4 <vTaskSwitchContext+0xb8>)
7000891c:	2201      	movs	r2, #1
7000891e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
70008920:	e047      	b.n	700089b2 <vTaskSwitchContext+0xa6>
        xYieldPending = pdFALSE;
70008922:	4b28      	ldr	r3, [pc, #160]	@ (700089c4 <vTaskSwitchContext+0xb8>)
70008924:	2200      	movs	r2, #0
70008926:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
70008928:	4b27      	ldr	r3, [pc, #156]	@ (700089c8 <vTaskSwitchContext+0xbc>)
7000892a:	681b      	ldr	r3, [r3, #0]
7000892c:	60fb      	str	r3, [r7, #12]
7000892e:	e011      	b.n	70008954 <vTaskSwitchContext+0x48>
70008930:	68fb      	ldr	r3, [r7, #12]
70008932:	2b00      	cmp	r3, #0
70008934:	d10b      	bne.n	7000894e <vTaskSwitchContext+0x42>
        __asm volatile
70008936:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000893a:	f383 8811 	msr	BASEPRI, r3
7000893e:	f3bf 8f6f 	isb	sy
70008942:	f3bf 8f4f 	dsb	sy
70008946:	607b      	str	r3, [r7, #4]
    }
70008948:	bf00      	nop
7000894a:	bf00      	nop
7000894c:	e7fd      	b.n	7000894a <vTaskSwitchContext+0x3e>
7000894e:	68fb      	ldr	r3, [r7, #12]
70008950:	3b01      	subs	r3, #1
70008952:	60fb      	str	r3, [r7, #12]
70008954:	491d      	ldr	r1, [pc, #116]	@ (700089cc <vTaskSwitchContext+0xc0>)
70008956:	68fa      	ldr	r2, [r7, #12]
70008958:	4613      	mov	r3, r2
7000895a:	009b      	lsls	r3, r3, #2
7000895c:	4413      	add	r3, r2
7000895e:	009b      	lsls	r3, r3, #2
70008960:	440b      	add	r3, r1
70008962:	681b      	ldr	r3, [r3, #0]
70008964:	2b00      	cmp	r3, #0
70008966:	d0e3      	beq.n	70008930 <vTaskSwitchContext+0x24>
70008968:	68fa      	ldr	r2, [r7, #12]
7000896a:	4613      	mov	r3, r2
7000896c:	009b      	lsls	r3, r3, #2
7000896e:	4413      	add	r3, r2
70008970:	009b      	lsls	r3, r3, #2
70008972:	4a16      	ldr	r2, [pc, #88]	@ (700089cc <vTaskSwitchContext+0xc0>)
70008974:	4413      	add	r3, r2
70008976:	60bb      	str	r3, [r7, #8]
70008978:	68bb      	ldr	r3, [r7, #8]
7000897a:	685b      	ldr	r3, [r3, #4]
7000897c:	685a      	ldr	r2, [r3, #4]
7000897e:	68bb      	ldr	r3, [r7, #8]
70008980:	605a      	str	r2, [r3, #4]
70008982:	68bb      	ldr	r3, [r7, #8]
70008984:	685a      	ldr	r2, [r3, #4]
70008986:	68bb      	ldr	r3, [r7, #8]
70008988:	3308      	adds	r3, #8
7000898a:	429a      	cmp	r2, r3
7000898c:	d104      	bne.n	70008998 <vTaskSwitchContext+0x8c>
7000898e:	68bb      	ldr	r3, [r7, #8]
70008990:	685b      	ldr	r3, [r3, #4]
70008992:	685a      	ldr	r2, [r3, #4]
70008994:	68bb      	ldr	r3, [r7, #8]
70008996:	605a      	str	r2, [r3, #4]
70008998:	68bb      	ldr	r3, [r7, #8]
7000899a:	685b      	ldr	r3, [r3, #4]
7000899c:	68db      	ldr	r3, [r3, #12]
7000899e:	4a0c      	ldr	r2, [pc, #48]	@ (700089d0 <vTaskSwitchContext+0xc4>)
700089a0:	6013      	str	r3, [r2, #0]
700089a2:	4a09      	ldr	r2, [pc, #36]	@ (700089c8 <vTaskSwitchContext+0xbc>)
700089a4:	68fb      	ldr	r3, [r7, #12]
700089a6:	6013      	str	r3, [r2, #0]
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
700089a8:	4b09      	ldr	r3, [pc, #36]	@ (700089d0 <vTaskSwitchContext+0xc4>)
700089aa:	681b      	ldr	r3, [r3, #0]
700089ac:	3354      	adds	r3, #84	@ 0x54
700089ae:	4a09      	ldr	r2, [pc, #36]	@ (700089d4 <vTaskSwitchContext+0xc8>)
700089b0:	6013      	str	r3, [r2, #0]
}
700089b2:	bf00      	nop
700089b4:	3714      	adds	r7, #20
700089b6:	46bd      	mov	sp, r7
700089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
700089bc:	4770      	bx	lr
700089be:	bf00      	nop
700089c0:	24005144 	.word	0x24005144
700089c4:	24005130 	.word	0x24005130
700089c8:	24005124 	.word	0x24005124
700089cc:	24004c4c 	.word	0x24004c4c
700089d0:	24004c48 	.word	0x24004c48
700089d4:	24000040 	.word	0x24000040

700089d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
700089d8:	b580      	push	{r7, lr}
700089da:	b084      	sub	sp, #16
700089dc:	af00      	add	r7, sp, #0
700089de:	6078      	str	r0, [r7, #4]
700089e0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
700089e2:	687b      	ldr	r3, [r7, #4]
700089e4:	2b00      	cmp	r3, #0
700089e6:	d10b      	bne.n	70008a00 <vTaskPlaceOnEventList+0x28>
        __asm volatile
700089e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
700089ec:	f383 8811 	msr	BASEPRI, r3
700089f0:	f3bf 8f6f 	isb	sy
700089f4:	f3bf 8f4f 	dsb	sy
700089f8:	60fb      	str	r3, [r7, #12]
    }
700089fa:	bf00      	nop
700089fc:	bf00      	nop
700089fe:	e7fd      	b.n	700089fc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
70008a00:	4b07      	ldr	r3, [pc, #28]	@ (70008a20 <vTaskPlaceOnEventList+0x48>)
70008a02:	681b      	ldr	r3, [r3, #0]
70008a04:	3318      	adds	r3, #24
70008a06:	4619      	mov	r1, r3
70008a08:	6878      	ldr	r0, [r7, #4]
70008a0a:	f7fd fd78 	bl	700064fe <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
70008a0e:	2101      	movs	r1, #1
70008a10:	6838      	ldr	r0, [r7, #0]
70008a12:	f000 fc9f 	bl	70009354 <prvAddCurrentTaskToDelayedList>
}
70008a16:	bf00      	nop
70008a18:	3710      	adds	r7, #16
70008a1a:	46bd      	mov	sp, r7
70008a1c:	bd80      	pop	{r7, pc}
70008a1e:	bf00      	nop
70008a20:	24004c48 	.word	0x24004c48

70008a24 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
70008a24:	b580      	push	{r7, lr}
70008a26:	b086      	sub	sp, #24
70008a28:	af00      	add	r7, sp, #0
70008a2a:	60f8      	str	r0, [r7, #12]
70008a2c:	60b9      	str	r1, [r7, #8]
70008a2e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
70008a30:	68fb      	ldr	r3, [r7, #12]
70008a32:	2b00      	cmp	r3, #0
70008a34:	d10b      	bne.n	70008a4e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
70008a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
70008a3a:	f383 8811 	msr	BASEPRI, r3
70008a3e:	f3bf 8f6f 	isb	sy
70008a42:	f3bf 8f4f 	dsb	sy
70008a46:	613b      	str	r3, [r7, #16]
    }
70008a48:	bf00      	nop
70008a4a:	bf00      	nop
70008a4c:	e7fd      	b.n	70008a4a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
70008a4e:	68fb      	ldr	r3, [r7, #12]
70008a50:	685b      	ldr	r3, [r3, #4]
70008a52:	617b      	str	r3, [r7, #20]
70008a54:	4b15      	ldr	r3, [pc, #84]	@ (70008aac <vTaskPlaceOnEventListRestricted+0x88>)
70008a56:	681b      	ldr	r3, [r3, #0]
70008a58:	697a      	ldr	r2, [r7, #20]
70008a5a:	61da      	str	r2, [r3, #28]
70008a5c:	4b13      	ldr	r3, [pc, #76]	@ (70008aac <vTaskPlaceOnEventListRestricted+0x88>)
70008a5e:	681b      	ldr	r3, [r3, #0]
70008a60:	697a      	ldr	r2, [r7, #20]
70008a62:	6892      	ldr	r2, [r2, #8]
70008a64:	621a      	str	r2, [r3, #32]
70008a66:	4b11      	ldr	r3, [pc, #68]	@ (70008aac <vTaskPlaceOnEventListRestricted+0x88>)
70008a68:	681a      	ldr	r2, [r3, #0]
70008a6a:	697b      	ldr	r3, [r7, #20]
70008a6c:	689b      	ldr	r3, [r3, #8]
70008a6e:	3218      	adds	r2, #24
70008a70:	605a      	str	r2, [r3, #4]
70008a72:	4b0e      	ldr	r3, [pc, #56]	@ (70008aac <vTaskPlaceOnEventListRestricted+0x88>)
70008a74:	681b      	ldr	r3, [r3, #0]
70008a76:	f103 0218 	add.w	r2, r3, #24
70008a7a:	697b      	ldr	r3, [r7, #20]
70008a7c:	609a      	str	r2, [r3, #8]
70008a7e:	4b0b      	ldr	r3, [pc, #44]	@ (70008aac <vTaskPlaceOnEventListRestricted+0x88>)
70008a80:	681b      	ldr	r3, [r3, #0]
70008a82:	68fa      	ldr	r2, [r7, #12]
70008a84:	629a      	str	r2, [r3, #40]	@ 0x28
70008a86:	68fb      	ldr	r3, [r7, #12]
70008a88:	681b      	ldr	r3, [r3, #0]
70008a8a:	1c5a      	adds	r2, r3, #1
70008a8c:	68fb      	ldr	r3, [r7, #12]
70008a8e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
70008a90:	687b      	ldr	r3, [r7, #4]
70008a92:	2b00      	cmp	r3, #0
70008a94:	d002      	beq.n	70008a9c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
70008a96:	f04f 33ff 	mov.w	r3, #4294967295
70008a9a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
70008a9c:	6879      	ldr	r1, [r7, #4]
70008a9e:	68b8      	ldr	r0, [r7, #8]
70008aa0:	f000 fc58 	bl	70009354 <prvAddCurrentTaskToDelayedList>
    }
70008aa4:	bf00      	nop
70008aa6:	3718      	adds	r7, #24
70008aa8:	46bd      	mov	sp, r7
70008aaa:	bd80      	pop	{r7, pc}
70008aac:	24004c48 	.word	0x24004c48

70008ab0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
70008ab0:	b480      	push	{r7}
70008ab2:	b08b      	sub	sp, #44	@ 0x2c
70008ab4:	af00      	add	r7, sp, #0
70008ab6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
70008ab8:	687b      	ldr	r3, [r7, #4]
70008aba:	68db      	ldr	r3, [r3, #12]
70008abc:	68db      	ldr	r3, [r3, #12]
70008abe:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
70008ac0:	6a3b      	ldr	r3, [r7, #32]
70008ac2:	2b00      	cmp	r3, #0
70008ac4:	d10b      	bne.n	70008ade <xTaskRemoveFromEventList+0x2e>
        __asm volatile
70008ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
70008aca:	f383 8811 	msr	BASEPRI, r3
70008ace:	f3bf 8f6f 	isb	sy
70008ad2:	f3bf 8f4f 	dsb	sy
70008ad6:	60fb      	str	r3, [r7, #12]
    }
70008ad8:	bf00      	nop
70008ada:	bf00      	nop
70008adc:	e7fd      	b.n	70008ada <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
70008ade:	6a3b      	ldr	r3, [r7, #32]
70008ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70008ae2:	61fb      	str	r3, [r7, #28]
70008ae4:	6a3b      	ldr	r3, [r7, #32]
70008ae6:	69db      	ldr	r3, [r3, #28]
70008ae8:	6a3a      	ldr	r2, [r7, #32]
70008aea:	6a12      	ldr	r2, [r2, #32]
70008aec:	609a      	str	r2, [r3, #8]
70008aee:	6a3b      	ldr	r3, [r7, #32]
70008af0:	6a1b      	ldr	r3, [r3, #32]
70008af2:	6a3a      	ldr	r2, [r7, #32]
70008af4:	69d2      	ldr	r2, [r2, #28]
70008af6:	605a      	str	r2, [r3, #4]
70008af8:	69fb      	ldr	r3, [r7, #28]
70008afa:	685a      	ldr	r2, [r3, #4]
70008afc:	6a3b      	ldr	r3, [r7, #32]
70008afe:	3318      	adds	r3, #24
70008b00:	429a      	cmp	r2, r3
70008b02:	d103      	bne.n	70008b0c <xTaskRemoveFromEventList+0x5c>
70008b04:	6a3b      	ldr	r3, [r7, #32]
70008b06:	6a1a      	ldr	r2, [r3, #32]
70008b08:	69fb      	ldr	r3, [r7, #28]
70008b0a:	605a      	str	r2, [r3, #4]
70008b0c:	6a3b      	ldr	r3, [r7, #32]
70008b0e:	2200      	movs	r2, #0
70008b10:	629a      	str	r2, [r3, #40]	@ 0x28
70008b12:	69fb      	ldr	r3, [r7, #28]
70008b14:	681b      	ldr	r3, [r3, #0]
70008b16:	1e5a      	subs	r2, r3, #1
70008b18:	69fb      	ldr	r3, [r7, #28]
70008b1a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
70008b1c:	4b4a      	ldr	r3, [pc, #296]	@ (70008c48 <xTaskRemoveFromEventList+0x198>)
70008b1e:	681b      	ldr	r3, [r3, #0]
70008b20:	2b00      	cmp	r3, #0
70008b22:	d15f      	bne.n	70008be4 <xTaskRemoveFromEventList+0x134>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
70008b24:	6a3b      	ldr	r3, [r7, #32]
70008b26:	695b      	ldr	r3, [r3, #20]
70008b28:	617b      	str	r3, [r7, #20]
70008b2a:	6a3b      	ldr	r3, [r7, #32]
70008b2c:	689b      	ldr	r3, [r3, #8]
70008b2e:	6a3a      	ldr	r2, [r7, #32]
70008b30:	68d2      	ldr	r2, [r2, #12]
70008b32:	609a      	str	r2, [r3, #8]
70008b34:	6a3b      	ldr	r3, [r7, #32]
70008b36:	68db      	ldr	r3, [r3, #12]
70008b38:	6a3a      	ldr	r2, [r7, #32]
70008b3a:	6892      	ldr	r2, [r2, #8]
70008b3c:	605a      	str	r2, [r3, #4]
70008b3e:	697b      	ldr	r3, [r7, #20]
70008b40:	685a      	ldr	r2, [r3, #4]
70008b42:	6a3b      	ldr	r3, [r7, #32]
70008b44:	3304      	adds	r3, #4
70008b46:	429a      	cmp	r2, r3
70008b48:	d103      	bne.n	70008b52 <xTaskRemoveFromEventList+0xa2>
70008b4a:	6a3b      	ldr	r3, [r7, #32]
70008b4c:	68da      	ldr	r2, [r3, #12]
70008b4e:	697b      	ldr	r3, [r7, #20]
70008b50:	605a      	str	r2, [r3, #4]
70008b52:	6a3b      	ldr	r3, [r7, #32]
70008b54:	2200      	movs	r2, #0
70008b56:	615a      	str	r2, [r3, #20]
70008b58:	697b      	ldr	r3, [r7, #20]
70008b5a:	681b      	ldr	r3, [r3, #0]
70008b5c:	1e5a      	subs	r2, r3, #1
70008b5e:	697b      	ldr	r3, [r7, #20]
70008b60:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
70008b62:	6a3b      	ldr	r3, [r7, #32]
70008b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008b66:	4b39      	ldr	r3, [pc, #228]	@ (70008c4c <xTaskRemoveFromEventList+0x19c>)
70008b68:	681b      	ldr	r3, [r3, #0]
70008b6a:	429a      	cmp	r2, r3
70008b6c:	d903      	bls.n	70008b76 <xTaskRemoveFromEventList+0xc6>
70008b6e:	6a3b      	ldr	r3, [r7, #32]
70008b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70008b72:	4a36      	ldr	r2, [pc, #216]	@ (70008c4c <xTaskRemoveFromEventList+0x19c>)
70008b74:	6013      	str	r3, [r2, #0]
70008b76:	6a3b      	ldr	r3, [r7, #32]
70008b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008b7a:	4935      	ldr	r1, [pc, #212]	@ (70008c50 <xTaskRemoveFromEventList+0x1a0>)
70008b7c:	4613      	mov	r3, r2
70008b7e:	009b      	lsls	r3, r3, #2
70008b80:	4413      	add	r3, r2
70008b82:	009b      	lsls	r3, r3, #2
70008b84:	440b      	add	r3, r1
70008b86:	3304      	adds	r3, #4
70008b88:	681b      	ldr	r3, [r3, #0]
70008b8a:	613b      	str	r3, [r7, #16]
70008b8c:	6a3b      	ldr	r3, [r7, #32]
70008b8e:	693a      	ldr	r2, [r7, #16]
70008b90:	609a      	str	r2, [r3, #8]
70008b92:	693b      	ldr	r3, [r7, #16]
70008b94:	689a      	ldr	r2, [r3, #8]
70008b96:	6a3b      	ldr	r3, [r7, #32]
70008b98:	60da      	str	r2, [r3, #12]
70008b9a:	693b      	ldr	r3, [r7, #16]
70008b9c:	689b      	ldr	r3, [r3, #8]
70008b9e:	6a3a      	ldr	r2, [r7, #32]
70008ba0:	3204      	adds	r2, #4
70008ba2:	605a      	str	r2, [r3, #4]
70008ba4:	6a3b      	ldr	r3, [r7, #32]
70008ba6:	1d1a      	adds	r2, r3, #4
70008ba8:	693b      	ldr	r3, [r7, #16]
70008baa:	609a      	str	r2, [r3, #8]
70008bac:	6a3b      	ldr	r3, [r7, #32]
70008bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008bb0:	4613      	mov	r3, r2
70008bb2:	009b      	lsls	r3, r3, #2
70008bb4:	4413      	add	r3, r2
70008bb6:	009b      	lsls	r3, r3, #2
70008bb8:	4a25      	ldr	r2, [pc, #148]	@ (70008c50 <xTaskRemoveFromEventList+0x1a0>)
70008bba:	441a      	add	r2, r3
70008bbc:	6a3b      	ldr	r3, [r7, #32]
70008bbe:	615a      	str	r2, [r3, #20]
70008bc0:	6a3b      	ldr	r3, [r7, #32]
70008bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008bc4:	4922      	ldr	r1, [pc, #136]	@ (70008c50 <xTaskRemoveFromEventList+0x1a0>)
70008bc6:	4613      	mov	r3, r2
70008bc8:	009b      	lsls	r3, r3, #2
70008bca:	4413      	add	r3, r2
70008bcc:	009b      	lsls	r3, r3, #2
70008bce:	440b      	add	r3, r1
70008bd0:	681b      	ldr	r3, [r3, #0]
70008bd2:	1c59      	adds	r1, r3, #1
70008bd4:	481e      	ldr	r0, [pc, #120]	@ (70008c50 <xTaskRemoveFromEventList+0x1a0>)
70008bd6:	4613      	mov	r3, r2
70008bd8:	009b      	lsls	r3, r3, #2
70008bda:	4413      	add	r3, r2
70008bdc:	009b      	lsls	r3, r3, #2
70008bde:	4403      	add	r3, r0
70008be0:	6019      	str	r1, [r3, #0]
70008be2:	e01b      	b.n	70008c1c <xTaskRemoveFromEventList+0x16c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
70008be4:	4b1b      	ldr	r3, [pc, #108]	@ (70008c54 <xTaskRemoveFromEventList+0x1a4>)
70008be6:	685b      	ldr	r3, [r3, #4]
70008be8:	61bb      	str	r3, [r7, #24]
70008bea:	6a3b      	ldr	r3, [r7, #32]
70008bec:	69ba      	ldr	r2, [r7, #24]
70008bee:	61da      	str	r2, [r3, #28]
70008bf0:	69bb      	ldr	r3, [r7, #24]
70008bf2:	689a      	ldr	r2, [r3, #8]
70008bf4:	6a3b      	ldr	r3, [r7, #32]
70008bf6:	621a      	str	r2, [r3, #32]
70008bf8:	69bb      	ldr	r3, [r7, #24]
70008bfa:	689b      	ldr	r3, [r3, #8]
70008bfc:	6a3a      	ldr	r2, [r7, #32]
70008bfe:	3218      	adds	r2, #24
70008c00:	605a      	str	r2, [r3, #4]
70008c02:	6a3b      	ldr	r3, [r7, #32]
70008c04:	f103 0218 	add.w	r2, r3, #24
70008c08:	69bb      	ldr	r3, [r7, #24]
70008c0a:	609a      	str	r2, [r3, #8]
70008c0c:	6a3b      	ldr	r3, [r7, #32]
70008c0e:	4a11      	ldr	r2, [pc, #68]	@ (70008c54 <xTaskRemoveFromEventList+0x1a4>)
70008c10:	629a      	str	r2, [r3, #40]	@ 0x28
70008c12:	4b10      	ldr	r3, [pc, #64]	@ (70008c54 <xTaskRemoveFromEventList+0x1a4>)
70008c14:	681b      	ldr	r3, [r3, #0]
70008c16:	3301      	adds	r3, #1
70008c18:	4a0e      	ldr	r2, [pc, #56]	@ (70008c54 <xTaskRemoveFromEventList+0x1a4>)
70008c1a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
70008c1c:	6a3b      	ldr	r3, [r7, #32]
70008c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008c20:	4b0d      	ldr	r3, [pc, #52]	@ (70008c58 <xTaskRemoveFromEventList+0x1a8>)
70008c22:	681b      	ldr	r3, [r3, #0]
70008c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70008c26:	429a      	cmp	r2, r3
70008c28:	d905      	bls.n	70008c36 <xTaskRemoveFromEventList+0x186>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
70008c2a:	2301      	movs	r3, #1
70008c2c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
70008c2e:	4b0b      	ldr	r3, [pc, #44]	@ (70008c5c <xTaskRemoveFromEventList+0x1ac>)
70008c30:	2201      	movs	r2, #1
70008c32:	601a      	str	r2, [r3, #0]
70008c34:	e001      	b.n	70008c3a <xTaskRemoveFromEventList+0x18a>
    }
    else
    {
        xReturn = pdFALSE;
70008c36:	2300      	movs	r3, #0
70008c38:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
70008c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
70008c3c:	4618      	mov	r0, r3
70008c3e:	372c      	adds	r7, #44	@ 0x2c
70008c40:	46bd      	mov	sp, r7
70008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
70008c46:	4770      	bx	lr
70008c48:	24005144 	.word	0x24005144
70008c4c:	24005124 	.word	0x24005124
70008c50:	24004c4c 	.word	0x24004c4c
70008c54:	240050dc 	.word	0x240050dc
70008c58:	24004c48 	.word	0x24004c48
70008c5c:	24005130 	.word	0x24005130

70008c60 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
70008c60:	b480      	push	{r7}
70008c62:	b083      	sub	sp, #12
70008c64:	af00      	add	r7, sp, #0
70008c66:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
70008c68:	4b06      	ldr	r3, [pc, #24]	@ (70008c84 <vTaskInternalSetTimeOutState+0x24>)
70008c6a:	681a      	ldr	r2, [r3, #0]
70008c6c:	687b      	ldr	r3, [r7, #4]
70008c6e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
70008c70:	4b05      	ldr	r3, [pc, #20]	@ (70008c88 <vTaskInternalSetTimeOutState+0x28>)
70008c72:	681a      	ldr	r2, [r3, #0]
70008c74:	687b      	ldr	r3, [r7, #4]
70008c76:	605a      	str	r2, [r3, #4]
}
70008c78:	bf00      	nop
70008c7a:	370c      	adds	r7, #12
70008c7c:	46bd      	mov	sp, r7
70008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
70008c82:	4770      	bx	lr
70008c84:	24005134 	.word	0x24005134
70008c88:	24005120 	.word	0x24005120

70008c8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
70008c8c:	b580      	push	{r7, lr}
70008c8e:	b088      	sub	sp, #32
70008c90:	af00      	add	r7, sp, #0
70008c92:	6078      	str	r0, [r7, #4]
70008c94:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
70008c96:	687b      	ldr	r3, [r7, #4]
70008c98:	2b00      	cmp	r3, #0
70008c9a:	d10b      	bne.n	70008cb4 <xTaskCheckForTimeOut+0x28>
        __asm volatile
70008c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
70008ca0:	f383 8811 	msr	BASEPRI, r3
70008ca4:	f3bf 8f6f 	isb	sy
70008ca8:	f3bf 8f4f 	dsb	sy
70008cac:	613b      	str	r3, [r7, #16]
    }
70008cae:	bf00      	nop
70008cb0:	bf00      	nop
70008cb2:	e7fd      	b.n	70008cb0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
70008cb4:	683b      	ldr	r3, [r7, #0]
70008cb6:	2b00      	cmp	r3, #0
70008cb8:	d10b      	bne.n	70008cd2 <xTaskCheckForTimeOut+0x46>
        __asm volatile
70008cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
70008cbe:	f383 8811 	msr	BASEPRI, r3
70008cc2:	f3bf 8f6f 	isb	sy
70008cc6:	f3bf 8f4f 	dsb	sy
70008cca:	60fb      	str	r3, [r7, #12]
    }
70008ccc:	bf00      	nop
70008cce:	bf00      	nop
70008cd0:	e7fd      	b.n	70008cce <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
70008cd2:	f7fd fdab 	bl	7000682c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
70008cd6:	4b1f      	ldr	r3, [pc, #124]	@ (70008d54 <xTaskCheckForTimeOut+0xc8>)
70008cd8:	681b      	ldr	r3, [r3, #0]
70008cda:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
70008cdc:	687b      	ldr	r3, [r7, #4]
70008cde:	685b      	ldr	r3, [r3, #4]
70008ce0:	69ba      	ldr	r2, [r7, #24]
70008ce2:	1ad3      	subs	r3, r2, r3
70008ce4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
70008ce6:	683b      	ldr	r3, [r7, #0]
70008ce8:	681b      	ldr	r3, [r3, #0]
70008cea:	f1b3 3fff 	cmp.w	r3, #4294967295
70008cee:	d102      	bne.n	70008cf6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
70008cf0:	2300      	movs	r3, #0
70008cf2:	61fb      	str	r3, [r7, #28]
70008cf4:	e026      	b.n	70008d44 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
70008cf6:	687b      	ldr	r3, [r7, #4]
70008cf8:	681a      	ldr	r2, [r3, #0]
70008cfa:	4b17      	ldr	r3, [pc, #92]	@ (70008d58 <xTaskCheckForTimeOut+0xcc>)
70008cfc:	681b      	ldr	r3, [r3, #0]
70008cfe:	429a      	cmp	r2, r3
70008d00:	d00a      	beq.n	70008d18 <xTaskCheckForTimeOut+0x8c>
70008d02:	687b      	ldr	r3, [r7, #4]
70008d04:	685b      	ldr	r3, [r3, #4]
70008d06:	69ba      	ldr	r2, [r7, #24]
70008d08:	429a      	cmp	r2, r3
70008d0a:	d305      	bcc.n	70008d18 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
70008d0c:	2301      	movs	r3, #1
70008d0e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
70008d10:	683b      	ldr	r3, [r7, #0]
70008d12:	2200      	movs	r2, #0
70008d14:	601a      	str	r2, [r3, #0]
70008d16:	e015      	b.n	70008d44 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
70008d18:	683b      	ldr	r3, [r7, #0]
70008d1a:	681b      	ldr	r3, [r3, #0]
70008d1c:	697a      	ldr	r2, [r7, #20]
70008d1e:	429a      	cmp	r2, r3
70008d20:	d20b      	bcs.n	70008d3a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
70008d22:	683b      	ldr	r3, [r7, #0]
70008d24:	681a      	ldr	r2, [r3, #0]
70008d26:	697b      	ldr	r3, [r7, #20]
70008d28:	1ad2      	subs	r2, r2, r3
70008d2a:	683b      	ldr	r3, [r7, #0]
70008d2c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
70008d2e:	6878      	ldr	r0, [r7, #4]
70008d30:	f7ff ff96 	bl	70008c60 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
70008d34:	2300      	movs	r3, #0
70008d36:	61fb      	str	r3, [r7, #28]
70008d38:	e004      	b.n	70008d44 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
70008d3a:	683b      	ldr	r3, [r7, #0]
70008d3c:	2200      	movs	r2, #0
70008d3e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
70008d40:	2301      	movs	r3, #1
70008d42:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
70008d44:	f7fd fda4 	bl	70006890 <vPortExitCritical>

    return xReturn;
70008d48:	69fb      	ldr	r3, [r7, #28]
}
70008d4a:	4618      	mov	r0, r3
70008d4c:	3720      	adds	r7, #32
70008d4e:	46bd      	mov	sp, r7
70008d50:	bd80      	pop	{r7, pc}
70008d52:	bf00      	nop
70008d54:	24005120 	.word	0x24005120
70008d58:	24005134 	.word	0x24005134

70008d5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
70008d5c:	b480      	push	{r7}
70008d5e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
70008d60:	4b03      	ldr	r3, [pc, #12]	@ (70008d70 <vTaskMissedYield+0x14>)
70008d62:	2201      	movs	r2, #1
70008d64:	601a      	str	r2, [r3, #0]
}
70008d66:	bf00      	nop
70008d68:	46bd      	mov	sp, r7
70008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
70008d6e:	4770      	bx	lr
70008d70:	24005130 	.word	0x24005130

70008d74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
70008d74:	b580      	push	{r7, lr}
70008d76:	b082      	sub	sp, #8
70008d78:	af00      	add	r7, sp, #0
70008d7a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
70008d7c:	f000 f852 	bl	70008e24 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
70008d80:	4b06      	ldr	r3, [pc, #24]	@ (70008d9c <prvIdleTask+0x28>)
70008d82:	681b      	ldr	r3, [r3, #0]
70008d84:	2b01      	cmp	r3, #1
70008d86:	d9f9      	bls.n	70008d7c <prvIdleTask+0x8>
            {
                taskYIELD();
70008d88:	4b05      	ldr	r3, [pc, #20]	@ (70008da0 <prvIdleTask+0x2c>)
70008d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70008d8e:	601a      	str	r2, [r3, #0]
70008d90:	f3bf 8f4f 	dsb	sy
70008d94:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
70008d98:	e7f0      	b.n	70008d7c <prvIdleTask+0x8>
70008d9a:	bf00      	nop
70008d9c:	24004c4c 	.word	0x24004c4c
70008da0:	e000ed04 	.word	0xe000ed04

70008da4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
70008da4:	b580      	push	{r7, lr}
70008da6:	b082      	sub	sp, #8
70008da8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
70008daa:	2300      	movs	r3, #0
70008dac:	607b      	str	r3, [r7, #4]
70008dae:	e00c      	b.n	70008dca <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
70008db0:	687a      	ldr	r2, [r7, #4]
70008db2:	4613      	mov	r3, r2
70008db4:	009b      	lsls	r3, r3, #2
70008db6:	4413      	add	r3, r2
70008db8:	009b      	lsls	r3, r3, #2
70008dba:	4a12      	ldr	r2, [pc, #72]	@ (70008e04 <prvInitialiseTaskLists+0x60>)
70008dbc:	4413      	add	r3, r2
70008dbe:	4618      	mov	r0, r3
70008dc0:	f7fd fb4c 	bl	7000645c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
70008dc4:	687b      	ldr	r3, [r7, #4]
70008dc6:	3301      	adds	r3, #1
70008dc8:	607b      	str	r3, [r7, #4]
70008dca:	687b      	ldr	r3, [r7, #4]
70008dcc:	2b37      	cmp	r3, #55	@ 0x37
70008dce:	d9ef      	bls.n	70008db0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
70008dd0:	480d      	ldr	r0, [pc, #52]	@ (70008e08 <prvInitialiseTaskLists+0x64>)
70008dd2:	f7fd fb43 	bl	7000645c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
70008dd6:	480d      	ldr	r0, [pc, #52]	@ (70008e0c <prvInitialiseTaskLists+0x68>)
70008dd8:	f7fd fb40 	bl	7000645c <vListInitialise>
    vListInitialise( &xPendingReadyList );
70008ddc:	480c      	ldr	r0, [pc, #48]	@ (70008e10 <prvInitialiseTaskLists+0x6c>)
70008dde:	f7fd fb3d 	bl	7000645c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
70008de2:	480c      	ldr	r0, [pc, #48]	@ (70008e14 <prvInitialiseTaskLists+0x70>)
70008de4:	f7fd fb3a 	bl	7000645c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
70008de8:	480b      	ldr	r0, [pc, #44]	@ (70008e18 <prvInitialiseTaskLists+0x74>)
70008dea:	f7fd fb37 	bl	7000645c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
70008dee:	4b0b      	ldr	r3, [pc, #44]	@ (70008e1c <prvInitialiseTaskLists+0x78>)
70008df0:	4a05      	ldr	r2, [pc, #20]	@ (70008e08 <prvInitialiseTaskLists+0x64>)
70008df2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
70008df4:	4b0a      	ldr	r3, [pc, #40]	@ (70008e20 <prvInitialiseTaskLists+0x7c>)
70008df6:	4a05      	ldr	r2, [pc, #20]	@ (70008e0c <prvInitialiseTaskLists+0x68>)
70008df8:	601a      	str	r2, [r3, #0]
}
70008dfa:	bf00      	nop
70008dfc:	3708      	adds	r7, #8
70008dfe:	46bd      	mov	sp, r7
70008e00:	bd80      	pop	{r7, pc}
70008e02:	bf00      	nop
70008e04:	24004c4c 	.word	0x24004c4c
70008e08:	240050ac 	.word	0x240050ac
70008e0c:	240050c0 	.word	0x240050c0
70008e10:	240050dc 	.word	0x240050dc
70008e14:	240050f0 	.word	0x240050f0
70008e18:	24005108 	.word	0x24005108
70008e1c:	240050d4 	.word	0x240050d4
70008e20:	240050d8 	.word	0x240050d8

70008e24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
70008e24:	b580      	push	{r7, lr}
70008e26:	b082      	sub	sp, #8
70008e28:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
70008e2a:	e019      	b.n	70008e60 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
70008e2c:	f7fd fcfe 	bl	7000682c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
70008e30:	4b10      	ldr	r3, [pc, #64]	@ (70008e74 <prvCheckTasksWaitingTermination+0x50>)
70008e32:	68db      	ldr	r3, [r3, #12]
70008e34:	68db      	ldr	r3, [r3, #12]
70008e36:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
70008e38:	687b      	ldr	r3, [r7, #4]
70008e3a:	3304      	adds	r3, #4
70008e3c:	4618      	mov	r0, r3
70008e3e:	f7fd fb97 	bl	70006570 <uxListRemove>
                --uxCurrentNumberOfTasks;
70008e42:	4b0d      	ldr	r3, [pc, #52]	@ (70008e78 <prvCheckTasksWaitingTermination+0x54>)
70008e44:	681b      	ldr	r3, [r3, #0]
70008e46:	3b01      	subs	r3, #1
70008e48:	4a0b      	ldr	r2, [pc, #44]	@ (70008e78 <prvCheckTasksWaitingTermination+0x54>)
70008e4a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
70008e4c:	4b0b      	ldr	r3, [pc, #44]	@ (70008e7c <prvCheckTasksWaitingTermination+0x58>)
70008e4e:	681b      	ldr	r3, [r3, #0]
70008e50:	3b01      	subs	r3, #1
70008e52:	4a0a      	ldr	r2, [pc, #40]	@ (70008e7c <prvCheckTasksWaitingTermination+0x58>)
70008e54:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
70008e56:	f7fd fd1b 	bl	70006890 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
70008e5a:	6878      	ldr	r0, [r7, #4]
70008e5c:	f000 f810 	bl	70008e80 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
70008e60:	4b06      	ldr	r3, [pc, #24]	@ (70008e7c <prvCheckTasksWaitingTermination+0x58>)
70008e62:	681b      	ldr	r3, [r3, #0]
70008e64:	2b00      	cmp	r3, #0
70008e66:	d1e1      	bne.n	70008e2c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
70008e68:	bf00      	nop
70008e6a:	bf00      	nop
70008e6c:	3708      	adds	r7, #8
70008e6e:	46bd      	mov	sp, r7
70008e70:	bd80      	pop	{r7, pc}
70008e72:	bf00      	nop
70008e74:	240050f0 	.word	0x240050f0
70008e78:	2400511c 	.word	0x2400511c
70008e7c:	24005104 	.word	0x24005104

70008e80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
70008e80:	b580      	push	{r7, lr}
70008e82:	b084      	sub	sp, #16
70008e84:	af00      	add	r7, sp, #0
70008e86:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
70008e88:	4b18      	ldr	r3, [pc, #96]	@ (70008eec <prvDeleteTCB+0x6c>)
70008e8a:	681b      	ldr	r3, [r3, #0]
70008e8c:	3354      	adds	r3, #84	@ 0x54
70008e8e:	4618      	mov	r0, r3
70008e90:	f00a ffbc 	bl	70013e0c <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
70008e94:	687b      	ldr	r3, [r7, #4]
70008e96:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
70008e9a:	2b00      	cmp	r3, #0
70008e9c:	d108      	bne.n	70008eb0 <prvDeleteTCB+0x30>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
70008e9e:	687b      	ldr	r3, [r7, #4]
70008ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70008ea2:	4618      	mov	r0, r3
70008ea4:	f7fd f9c6 	bl	70006234 <vPortFree>
                vPortFree( pxTCB );
70008ea8:	6878      	ldr	r0, [r7, #4]
70008eaa:	f7fd f9c3 	bl	70006234 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
70008eae:	e019      	b.n	70008ee4 <prvDeleteTCB+0x64>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
70008eb0:	687b      	ldr	r3, [r7, #4]
70008eb2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
70008eb6:	2b01      	cmp	r3, #1
70008eb8:	d103      	bne.n	70008ec2 <prvDeleteTCB+0x42>
                vPortFree( pxTCB );
70008eba:	6878      	ldr	r0, [r7, #4]
70008ebc:	f7fd f9ba 	bl	70006234 <vPortFree>
    }
70008ec0:	e010      	b.n	70008ee4 <prvDeleteTCB+0x64>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
70008ec2:	687b      	ldr	r3, [r7, #4]
70008ec4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
70008ec8:	2b02      	cmp	r3, #2
70008eca:	d00b      	beq.n	70008ee4 <prvDeleteTCB+0x64>
        __asm volatile
70008ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
70008ed0:	f383 8811 	msr	BASEPRI, r3
70008ed4:	f3bf 8f6f 	isb	sy
70008ed8:	f3bf 8f4f 	dsb	sy
70008edc:	60fb      	str	r3, [r7, #12]
    }
70008ede:	bf00      	nop
70008ee0:	bf00      	nop
70008ee2:	e7fd      	b.n	70008ee0 <prvDeleteTCB+0x60>
    }
70008ee4:	bf00      	nop
70008ee6:	3710      	adds	r7, #16
70008ee8:	46bd      	mov	sp, r7
70008eea:	bd80      	pop	{r7, pc}
70008eec:	24004c48 	.word	0x24004c48

70008ef0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
70008ef0:	b480      	push	{r7}
70008ef2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
70008ef4:	4b0a      	ldr	r3, [pc, #40]	@ (70008f20 <prvResetNextTaskUnblockTime+0x30>)
70008ef6:	681b      	ldr	r3, [r3, #0]
70008ef8:	681b      	ldr	r3, [r3, #0]
70008efa:	2b00      	cmp	r3, #0
70008efc:	d104      	bne.n	70008f08 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
70008efe:	4b09      	ldr	r3, [pc, #36]	@ (70008f24 <prvResetNextTaskUnblockTime+0x34>)
70008f00:	f04f 32ff 	mov.w	r2, #4294967295
70008f04:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
70008f06:	e005      	b.n	70008f14 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
70008f08:	4b05      	ldr	r3, [pc, #20]	@ (70008f20 <prvResetNextTaskUnblockTime+0x30>)
70008f0a:	681b      	ldr	r3, [r3, #0]
70008f0c:	68db      	ldr	r3, [r3, #12]
70008f0e:	681b      	ldr	r3, [r3, #0]
70008f10:	4a04      	ldr	r2, [pc, #16]	@ (70008f24 <prvResetNextTaskUnblockTime+0x34>)
70008f12:	6013      	str	r3, [r2, #0]
}
70008f14:	bf00      	nop
70008f16:	46bd      	mov	sp, r7
70008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
70008f1c:	4770      	bx	lr
70008f1e:	bf00      	nop
70008f20:	240050d4 	.word	0x240050d4
70008f24:	2400513c 	.word	0x2400513c

70008f28 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
70008f28:	b480      	push	{r7}
70008f2a:	b083      	sub	sp, #12
70008f2c:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
70008f2e:	4b05      	ldr	r3, [pc, #20]	@ (70008f44 <xTaskGetCurrentTaskHandle+0x1c>)
70008f30:	681b      	ldr	r3, [r3, #0]
70008f32:	607b      	str	r3, [r7, #4]

        return xReturn;
70008f34:	687b      	ldr	r3, [r7, #4]
    }
70008f36:	4618      	mov	r0, r3
70008f38:	370c      	adds	r7, #12
70008f3a:	46bd      	mov	sp, r7
70008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
70008f40:	4770      	bx	lr
70008f42:	bf00      	nop
70008f44:	24004c48 	.word	0x24004c48

70008f48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
70008f48:	b480      	push	{r7}
70008f4a:	b083      	sub	sp, #12
70008f4c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
70008f4e:	4b0b      	ldr	r3, [pc, #44]	@ (70008f7c <xTaskGetSchedulerState+0x34>)
70008f50:	681b      	ldr	r3, [r3, #0]
70008f52:	2b00      	cmp	r3, #0
70008f54:	d102      	bne.n	70008f5c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
70008f56:	2301      	movs	r3, #1
70008f58:	607b      	str	r3, [r7, #4]
70008f5a:	e008      	b.n	70008f6e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
70008f5c:	4b08      	ldr	r3, [pc, #32]	@ (70008f80 <xTaskGetSchedulerState+0x38>)
70008f5e:	681b      	ldr	r3, [r3, #0]
70008f60:	2b00      	cmp	r3, #0
70008f62:	d102      	bne.n	70008f6a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
70008f64:	2302      	movs	r3, #2
70008f66:	607b      	str	r3, [r7, #4]
70008f68:	e001      	b.n	70008f6e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
70008f6a:	2300      	movs	r3, #0
70008f6c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
70008f6e:	687b      	ldr	r3, [r7, #4]
    }
70008f70:	4618      	mov	r0, r3
70008f72:	370c      	adds	r7, #12
70008f74:	46bd      	mov	sp, r7
70008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
70008f7a:	4770      	bx	lr
70008f7c:	24005128 	.word	0x24005128
70008f80:	24005144 	.word	0x24005144

70008f84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
70008f84:	b580      	push	{r7, lr}
70008f86:	b086      	sub	sp, #24
70008f88:	af00      	add	r7, sp, #0
70008f8a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
70008f8c:	687b      	ldr	r3, [r7, #4]
70008f8e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
70008f90:	2300      	movs	r3, #0
70008f92:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
70008f94:	687b      	ldr	r3, [r7, #4]
70008f96:	2b00      	cmp	r3, #0
70008f98:	d079      	beq.n	7000908e <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
70008f9a:	693b      	ldr	r3, [r7, #16]
70008f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008f9e:	4b3e      	ldr	r3, [pc, #248]	@ (70009098 <xTaskPriorityInherit+0x114>)
70008fa0:	681b      	ldr	r3, [r3, #0]
70008fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70008fa4:	429a      	cmp	r2, r3
70008fa6:	d269      	bcs.n	7000907c <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
70008fa8:	693b      	ldr	r3, [r7, #16]
70008faa:	699b      	ldr	r3, [r3, #24]
70008fac:	2b00      	cmp	r3, #0
70008fae:	db06      	blt.n	70008fbe <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
70008fb0:	4b39      	ldr	r3, [pc, #228]	@ (70009098 <xTaskPriorityInherit+0x114>)
70008fb2:	681b      	ldr	r3, [r3, #0]
70008fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70008fb6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
70008fba:	693b      	ldr	r3, [r7, #16]
70008fbc:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
70008fbe:	693b      	ldr	r3, [r7, #16]
70008fc0:	6959      	ldr	r1, [r3, #20]
70008fc2:	693b      	ldr	r3, [r7, #16]
70008fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008fc6:	4613      	mov	r3, r2
70008fc8:	009b      	lsls	r3, r3, #2
70008fca:	4413      	add	r3, r2
70008fcc:	009b      	lsls	r3, r3, #2
70008fce:	4a33      	ldr	r2, [pc, #204]	@ (7000909c <xTaskPriorityInherit+0x118>)
70008fd0:	4413      	add	r3, r2
70008fd2:	4299      	cmp	r1, r3
70008fd4:	d14a      	bne.n	7000906c <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
70008fd6:	693b      	ldr	r3, [r7, #16]
70008fd8:	3304      	adds	r3, #4
70008fda:	4618      	mov	r0, r3
70008fdc:	f7fd fac8 	bl	70006570 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
70008fe0:	4b2d      	ldr	r3, [pc, #180]	@ (70009098 <xTaskPriorityInherit+0x114>)
70008fe2:	681b      	ldr	r3, [r3, #0]
70008fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008fe6:	693b      	ldr	r3, [r7, #16]
70008fe8:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
70008fea:	693b      	ldr	r3, [r7, #16]
70008fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008fee:	4b2c      	ldr	r3, [pc, #176]	@ (700090a0 <xTaskPriorityInherit+0x11c>)
70008ff0:	681b      	ldr	r3, [r3, #0]
70008ff2:	429a      	cmp	r2, r3
70008ff4:	d903      	bls.n	70008ffe <xTaskPriorityInherit+0x7a>
70008ff6:	693b      	ldr	r3, [r7, #16]
70008ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70008ffa:	4a29      	ldr	r2, [pc, #164]	@ (700090a0 <xTaskPriorityInherit+0x11c>)
70008ffc:	6013      	str	r3, [r2, #0]
70008ffe:	693b      	ldr	r3, [r7, #16]
70009000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70009002:	4926      	ldr	r1, [pc, #152]	@ (7000909c <xTaskPriorityInherit+0x118>)
70009004:	4613      	mov	r3, r2
70009006:	009b      	lsls	r3, r3, #2
70009008:	4413      	add	r3, r2
7000900a:	009b      	lsls	r3, r3, #2
7000900c:	440b      	add	r3, r1
7000900e:	3304      	adds	r3, #4
70009010:	681b      	ldr	r3, [r3, #0]
70009012:	60fb      	str	r3, [r7, #12]
70009014:	693b      	ldr	r3, [r7, #16]
70009016:	68fa      	ldr	r2, [r7, #12]
70009018:	609a      	str	r2, [r3, #8]
7000901a:	68fb      	ldr	r3, [r7, #12]
7000901c:	689a      	ldr	r2, [r3, #8]
7000901e:	693b      	ldr	r3, [r7, #16]
70009020:	60da      	str	r2, [r3, #12]
70009022:	68fb      	ldr	r3, [r7, #12]
70009024:	689b      	ldr	r3, [r3, #8]
70009026:	693a      	ldr	r2, [r7, #16]
70009028:	3204      	adds	r2, #4
7000902a:	605a      	str	r2, [r3, #4]
7000902c:	693b      	ldr	r3, [r7, #16]
7000902e:	1d1a      	adds	r2, r3, #4
70009030:	68fb      	ldr	r3, [r7, #12]
70009032:	609a      	str	r2, [r3, #8]
70009034:	693b      	ldr	r3, [r7, #16]
70009036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70009038:	4613      	mov	r3, r2
7000903a:	009b      	lsls	r3, r3, #2
7000903c:	4413      	add	r3, r2
7000903e:	009b      	lsls	r3, r3, #2
70009040:	4a16      	ldr	r2, [pc, #88]	@ (7000909c <xTaskPriorityInherit+0x118>)
70009042:	441a      	add	r2, r3
70009044:	693b      	ldr	r3, [r7, #16]
70009046:	615a      	str	r2, [r3, #20]
70009048:	693b      	ldr	r3, [r7, #16]
7000904a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000904c:	4913      	ldr	r1, [pc, #76]	@ (7000909c <xTaskPriorityInherit+0x118>)
7000904e:	4613      	mov	r3, r2
70009050:	009b      	lsls	r3, r3, #2
70009052:	4413      	add	r3, r2
70009054:	009b      	lsls	r3, r3, #2
70009056:	440b      	add	r3, r1
70009058:	681b      	ldr	r3, [r3, #0]
7000905a:	1c59      	adds	r1, r3, #1
7000905c:	480f      	ldr	r0, [pc, #60]	@ (7000909c <xTaskPriorityInherit+0x118>)
7000905e:	4613      	mov	r3, r2
70009060:	009b      	lsls	r3, r3, #2
70009062:	4413      	add	r3, r2
70009064:	009b      	lsls	r3, r3, #2
70009066:	4403      	add	r3, r0
70009068:	6019      	str	r1, [r3, #0]
7000906a:	e004      	b.n	70009076 <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
7000906c:	4b0a      	ldr	r3, [pc, #40]	@ (70009098 <xTaskPriorityInherit+0x114>)
7000906e:	681b      	ldr	r3, [r3, #0]
70009070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70009072:	693b      	ldr	r3, [r7, #16]
70009074:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
70009076:	2301      	movs	r3, #1
70009078:	617b      	str	r3, [r7, #20]
7000907a:	e008      	b.n	7000908e <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
7000907c:	693b      	ldr	r3, [r7, #16]
7000907e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
70009080:	4b05      	ldr	r3, [pc, #20]	@ (70009098 <xTaskPriorityInherit+0x114>)
70009082:	681b      	ldr	r3, [r3, #0]
70009084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70009086:	429a      	cmp	r2, r3
70009088:	d201      	bcs.n	7000908e <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
7000908a:	2301      	movs	r3, #1
7000908c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
7000908e:	697b      	ldr	r3, [r7, #20]
    }
70009090:	4618      	mov	r0, r3
70009092:	3718      	adds	r7, #24
70009094:	46bd      	mov	sp, r7
70009096:	bd80      	pop	{r7, pc}
70009098:	24004c48 	.word	0x24004c48
7000909c:	24004c4c 	.word	0x24004c4c
700090a0:	24005124 	.word	0x24005124

700090a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
700090a4:	b580      	push	{r7, lr}
700090a6:	b088      	sub	sp, #32
700090a8:	af00      	add	r7, sp, #0
700090aa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
700090ac:	687b      	ldr	r3, [r7, #4]
700090ae:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
700090b0:	2300      	movs	r3, #0
700090b2:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
700090b4:	687b      	ldr	r3, [r7, #4]
700090b6:	2b00      	cmp	r3, #0
700090b8:	f000 8081 	beq.w	700091be <xTaskPriorityDisinherit+0x11a>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
700090bc:	4b42      	ldr	r3, [pc, #264]	@ (700091c8 <xTaskPriorityDisinherit+0x124>)
700090be:	681b      	ldr	r3, [r3, #0]
700090c0:	69ba      	ldr	r2, [r7, #24]
700090c2:	429a      	cmp	r2, r3
700090c4:	d00b      	beq.n	700090de <xTaskPriorityDisinherit+0x3a>
        __asm volatile
700090c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
700090ca:	f383 8811 	msr	BASEPRI, r3
700090ce:	f3bf 8f6f 	isb	sy
700090d2:	f3bf 8f4f 	dsb	sy
700090d6:	613b      	str	r3, [r7, #16]
    }
700090d8:	bf00      	nop
700090da:	bf00      	nop
700090dc:	e7fd      	b.n	700090da <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
700090de:	69bb      	ldr	r3, [r7, #24]
700090e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
700090e2:	2b00      	cmp	r3, #0
700090e4:	d10b      	bne.n	700090fe <xTaskPriorityDisinherit+0x5a>
        __asm volatile
700090e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
700090ea:	f383 8811 	msr	BASEPRI, r3
700090ee:	f3bf 8f6f 	isb	sy
700090f2:	f3bf 8f4f 	dsb	sy
700090f6:	60fb      	str	r3, [r7, #12]
    }
700090f8:	bf00      	nop
700090fa:	bf00      	nop
700090fc:	e7fd      	b.n	700090fa <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
700090fe:	69bb      	ldr	r3, [r7, #24]
70009100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70009102:	1e5a      	subs	r2, r3, #1
70009104:	69bb      	ldr	r3, [r7, #24]
70009106:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
70009108:	69bb      	ldr	r3, [r7, #24]
7000910a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000910c:	69bb      	ldr	r3, [r7, #24]
7000910e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70009110:	429a      	cmp	r2, r3
70009112:	d054      	beq.n	700091be <xTaskPriorityDisinherit+0x11a>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
70009114:	69bb      	ldr	r3, [r7, #24]
70009116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70009118:	2b00      	cmp	r3, #0
7000911a:	d150      	bne.n	700091be <xTaskPriorityDisinherit+0x11a>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
7000911c:	69bb      	ldr	r3, [r7, #24]
7000911e:	3304      	adds	r3, #4
70009120:	4618      	mov	r0, r3
70009122:	f7fd fa25 	bl	70006570 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
70009126:	69bb      	ldr	r3, [r7, #24]
70009128:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
7000912a:	69bb      	ldr	r3, [r7, #24]
7000912c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
7000912e:	69bb      	ldr	r3, [r7, #24]
70009130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70009132:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
70009136:	69bb      	ldr	r3, [r7, #24]
70009138:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
7000913a:	69bb      	ldr	r3, [r7, #24]
7000913c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000913e:	4b23      	ldr	r3, [pc, #140]	@ (700091cc <xTaskPriorityDisinherit+0x128>)
70009140:	681b      	ldr	r3, [r3, #0]
70009142:	429a      	cmp	r2, r3
70009144:	d903      	bls.n	7000914e <xTaskPriorityDisinherit+0xaa>
70009146:	69bb      	ldr	r3, [r7, #24]
70009148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000914a:	4a20      	ldr	r2, [pc, #128]	@ (700091cc <xTaskPriorityDisinherit+0x128>)
7000914c:	6013      	str	r3, [r2, #0]
7000914e:	69bb      	ldr	r3, [r7, #24]
70009150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70009152:	491f      	ldr	r1, [pc, #124]	@ (700091d0 <xTaskPriorityDisinherit+0x12c>)
70009154:	4613      	mov	r3, r2
70009156:	009b      	lsls	r3, r3, #2
70009158:	4413      	add	r3, r2
7000915a:	009b      	lsls	r3, r3, #2
7000915c:	440b      	add	r3, r1
7000915e:	3304      	adds	r3, #4
70009160:	681b      	ldr	r3, [r3, #0]
70009162:	617b      	str	r3, [r7, #20]
70009164:	69bb      	ldr	r3, [r7, #24]
70009166:	697a      	ldr	r2, [r7, #20]
70009168:	609a      	str	r2, [r3, #8]
7000916a:	697b      	ldr	r3, [r7, #20]
7000916c:	689a      	ldr	r2, [r3, #8]
7000916e:	69bb      	ldr	r3, [r7, #24]
70009170:	60da      	str	r2, [r3, #12]
70009172:	697b      	ldr	r3, [r7, #20]
70009174:	689b      	ldr	r3, [r3, #8]
70009176:	69ba      	ldr	r2, [r7, #24]
70009178:	3204      	adds	r2, #4
7000917a:	605a      	str	r2, [r3, #4]
7000917c:	69bb      	ldr	r3, [r7, #24]
7000917e:	1d1a      	adds	r2, r3, #4
70009180:	697b      	ldr	r3, [r7, #20]
70009182:	609a      	str	r2, [r3, #8]
70009184:	69bb      	ldr	r3, [r7, #24]
70009186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70009188:	4613      	mov	r3, r2
7000918a:	009b      	lsls	r3, r3, #2
7000918c:	4413      	add	r3, r2
7000918e:	009b      	lsls	r3, r3, #2
70009190:	4a0f      	ldr	r2, [pc, #60]	@ (700091d0 <xTaskPriorityDisinherit+0x12c>)
70009192:	441a      	add	r2, r3
70009194:	69bb      	ldr	r3, [r7, #24]
70009196:	615a      	str	r2, [r3, #20]
70009198:	69bb      	ldr	r3, [r7, #24]
7000919a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000919c:	490c      	ldr	r1, [pc, #48]	@ (700091d0 <xTaskPriorityDisinherit+0x12c>)
7000919e:	4613      	mov	r3, r2
700091a0:	009b      	lsls	r3, r3, #2
700091a2:	4413      	add	r3, r2
700091a4:	009b      	lsls	r3, r3, #2
700091a6:	440b      	add	r3, r1
700091a8:	681b      	ldr	r3, [r3, #0]
700091aa:	1c59      	adds	r1, r3, #1
700091ac:	4808      	ldr	r0, [pc, #32]	@ (700091d0 <xTaskPriorityDisinherit+0x12c>)
700091ae:	4613      	mov	r3, r2
700091b0:	009b      	lsls	r3, r3, #2
700091b2:	4413      	add	r3, r2
700091b4:	009b      	lsls	r3, r3, #2
700091b6:	4403      	add	r3, r0
700091b8:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
700091ba:	2301      	movs	r3, #1
700091bc:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
700091be:	69fb      	ldr	r3, [r7, #28]
    }
700091c0:	4618      	mov	r0, r3
700091c2:	3720      	adds	r7, #32
700091c4:	46bd      	mov	sp, r7
700091c6:	bd80      	pop	{r7, pc}
700091c8:	24004c48 	.word	0x24004c48
700091cc:	24005124 	.word	0x24005124
700091d0:	24004c4c 	.word	0x24004c4c

700091d4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
700091d4:	b580      	push	{r7, lr}
700091d6:	b08a      	sub	sp, #40	@ 0x28
700091d8:	af00      	add	r7, sp, #0
700091da:	6078      	str	r0, [r7, #4]
700091dc:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
700091de:	687b      	ldr	r3, [r7, #4]
700091e0:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
700091e2:	2301      	movs	r3, #1
700091e4:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
700091e6:	687b      	ldr	r3, [r7, #4]
700091e8:	2b00      	cmp	r3, #0
700091ea:	f000 8095 	beq.w	70009318 <vTaskPriorityDisinheritAfterTimeout+0x144>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
700091ee:	6a3b      	ldr	r3, [r7, #32]
700091f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
700091f2:	2b00      	cmp	r3, #0
700091f4:	d10b      	bne.n	7000920e <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
700091f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
700091fa:	f383 8811 	msr	BASEPRI, r3
700091fe:	f3bf 8f6f 	isb	sy
70009202:	f3bf 8f4f 	dsb	sy
70009206:	613b      	str	r3, [r7, #16]
    }
70009208:	bf00      	nop
7000920a:	bf00      	nop
7000920c:	e7fd      	b.n	7000920a <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
7000920e:	6a3b      	ldr	r3, [r7, #32]
70009210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70009212:	683a      	ldr	r2, [r7, #0]
70009214:	429a      	cmp	r2, r3
70009216:	d902      	bls.n	7000921e <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
70009218:	683b      	ldr	r3, [r7, #0]
7000921a:	627b      	str	r3, [r7, #36]	@ 0x24
7000921c:	e002      	b.n	70009224 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
7000921e:	6a3b      	ldr	r3, [r7, #32]
70009220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70009222:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
70009224:	6a3b      	ldr	r3, [r7, #32]
70009226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70009228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
7000922a:	429a      	cmp	r2, r3
7000922c:	d074      	beq.n	70009318 <vTaskPriorityDisinheritAfterTimeout+0x144>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
7000922e:	6a3b      	ldr	r3, [r7, #32]
70009230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70009232:	69fa      	ldr	r2, [r7, #28]
70009234:	429a      	cmp	r2, r3
70009236:	d16f      	bne.n	70009318 <vTaskPriorityDisinheritAfterTimeout+0x144>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
70009238:	4b39      	ldr	r3, [pc, #228]	@ (70009320 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
7000923a:	681b      	ldr	r3, [r3, #0]
7000923c:	6a3a      	ldr	r2, [r7, #32]
7000923e:	429a      	cmp	r2, r3
70009240:	d10b      	bne.n	7000925a <vTaskPriorityDisinheritAfterTimeout+0x86>
        __asm volatile
70009242:	f04f 0350 	mov.w	r3, #80	@ 0x50
70009246:	f383 8811 	msr	BASEPRI, r3
7000924a:	f3bf 8f6f 	isb	sy
7000924e:	f3bf 8f4f 	dsb	sy
70009252:	60fb      	str	r3, [r7, #12]
    }
70009254:	bf00      	nop
70009256:	bf00      	nop
70009258:	e7fd      	b.n	70009256 <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
7000925a:	6a3b      	ldr	r3, [r7, #32]
7000925c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000925e:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
70009260:	6a3b      	ldr	r3, [r7, #32]
70009262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70009264:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
70009266:	6a3b      	ldr	r3, [r7, #32]
70009268:	699b      	ldr	r3, [r3, #24]
7000926a:	2b00      	cmp	r3, #0
7000926c:	db04      	blt.n	70009278 <vTaskPriorityDisinheritAfterTimeout+0xa4>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
7000926e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70009270:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
70009274:	6a3b      	ldr	r3, [r7, #32]
70009276:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
70009278:	6a3b      	ldr	r3, [r7, #32]
7000927a:	6959      	ldr	r1, [r3, #20]
7000927c:	69ba      	ldr	r2, [r7, #24]
7000927e:	4613      	mov	r3, r2
70009280:	009b      	lsls	r3, r3, #2
70009282:	4413      	add	r3, r2
70009284:	009b      	lsls	r3, r3, #2
70009286:	4a27      	ldr	r2, [pc, #156]	@ (70009324 <vTaskPriorityDisinheritAfterTimeout+0x150>)
70009288:	4413      	add	r3, r2
7000928a:	4299      	cmp	r1, r3
7000928c:	d144      	bne.n	70009318 <vTaskPriorityDisinheritAfterTimeout+0x144>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
7000928e:	6a3b      	ldr	r3, [r7, #32]
70009290:	3304      	adds	r3, #4
70009292:	4618      	mov	r0, r3
70009294:	f7fd f96c 	bl	70006570 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
70009298:	6a3b      	ldr	r3, [r7, #32]
7000929a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000929c:	4b22      	ldr	r3, [pc, #136]	@ (70009328 <vTaskPriorityDisinheritAfterTimeout+0x154>)
7000929e:	681b      	ldr	r3, [r3, #0]
700092a0:	429a      	cmp	r2, r3
700092a2:	d903      	bls.n	700092ac <vTaskPriorityDisinheritAfterTimeout+0xd8>
700092a4:	6a3b      	ldr	r3, [r7, #32]
700092a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700092a8:	4a1f      	ldr	r2, [pc, #124]	@ (70009328 <vTaskPriorityDisinheritAfterTimeout+0x154>)
700092aa:	6013      	str	r3, [r2, #0]
700092ac:	6a3b      	ldr	r3, [r7, #32]
700092ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700092b0:	491c      	ldr	r1, [pc, #112]	@ (70009324 <vTaskPriorityDisinheritAfterTimeout+0x150>)
700092b2:	4613      	mov	r3, r2
700092b4:	009b      	lsls	r3, r3, #2
700092b6:	4413      	add	r3, r2
700092b8:	009b      	lsls	r3, r3, #2
700092ba:	440b      	add	r3, r1
700092bc:	3304      	adds	r3, #4
700092be:	681b      	ldr	r3, [r3, #0]
700092c0:	617b      	str	r3, [r7, #20]
700092c2:	6a3b      	ldr	r3, [r7, #32]
700092c4:	697a      	ldr	r2, [r7, #20]
700092c6:	609a      	str	r2, [r3, #8]
700092c8:	697b      	ldr	r3, [r7, #20]
700092ca:	689a      	ldr	r2, [r3, #8]
700092cc:	6a3b      	ldr	r3, [r7, #32]
700092ce:	60da      	str	r2, [r3, #12]
700092d0:	697b      	ldr	r3, [r7, #20]
700092d2:	689b      	ldr	r3, [r3, #8]
700092d4:	6a3a      	ldr	r2, [r7, #32]
700092d6:	3204      	adds	r2, #4
700092d8:	605a      	str	r2, [r3, #4]
700092da:	6a3b      	ldr	r3, [r7, #32]
700092dc:	1d1a      	adds	r2, r3, #4
700092de:	697b      	ldr	r3, [r7, #20]
700092e0:	609a      	str	r2, [r3, #8]
700092e2:	6a3b      	ldr	r3, [r7, #32]
700092e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700092e6:	4613      	mov	r3, r2
700092e8:	009b      	lsls	r3, r3, #2
700092ea:	4413      	add	r3, r2
700092ec:	009b      	lsls	r3, r3, #2
700092ee:	4a0d      	ldr	r2, [pc, #52]	@ (70009324 <vTaskPriorityDisinheritAfterTimeout+0x150>)
700092f0:	441a      	add	r2, r3
700092f2:	6a3b      	ldr	r3, [r7, #32]
700092f4:	615a      	str	r2, [r3, #20]
700092f6:	6a3b      	ldr	r3, [r7, #32]
700092f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700092fa:	490a      	ldr	r1, [pc, #40]	@ (70009324 <vTaskPriorityDisinheritAfterTimeout+0x150>)
700092fc:	4613      	mov	r3, r2
700092fe:	009b      	lsls	r3, r3, #2
70009300:	4413      	add	r3, r2
70009302:	009b      	lsls	r3, r3, #2
70009304:	440b      	add	r3, r1
70009306:	681b      	ldr	r3, [r3, #0]
70009308:	1c59      	adds	r1, r3, #1
7000930a:	4806      	ldr	r0, [pc, #24]	@ (70009324 <vTaskPriorityDisinheritAfterTimeout+0x150>)
7000930c:	4613      	mov	r3, r2
7000930e:	009b      	lsls	r3, r3, #2
70009310:	4413      	add	r3, r2
70009312:	009b      	lsls	r3, r3, #2
70009314:	4403      	add	r3, r0
70009316:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
70009318:	bf00      	nop
7000931a:	3728      	adds	r7, #40	@ 0x28
7000931c:	46bd      	mov	sp, r7
7000931e:	bd80      	pop	{r7, pc}
70009320:	24004c48 	.word	0x24004c48
70009324:	24004c4c 	.word	0x24004c4c
70009328:	24005124 	.word	0x24005124

7000932c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
7000932c:	b480      	push	{r7}
7000932e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
70009330:	4b07      	ldr	r3, [pc, #28]	@ (70009350 <pvTaskIncrementMutexHeldCount+0x24>)
70009332:	681b      	ldr	r3, [r3, #0]
70009334:	2b00      	cmp	r3, #0
70009336:	d004      	beq.n	70009342 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
70009338:	4b05      	ldr	r3, [pc, #20]	@ (70009350 <pvTaskIncrementMutexHeldCount+0x24>)
7000933a:	681b      	ldr	r3, [r3, #0]
7000933c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
7000933e:	3201      	adds	r2, #1
70009340:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
70009342:	4b03      	ldr	r3, [pc, #12]	@ (70009350 <pvTaskIncrementMutexHeldCount+0x24>)
70009344:	681b      	ldr	r3, [r3, #0]
    }
70009346:	4618      	mov	r0, r3
70009348:	46bd      	mov	sp, r7
7000934a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000934e:	4770      	bx	lr
70009350:	24004c48 	.word	0x24004c48

70009354 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
70009354:	b580      	push	{r7, lr}
70009356:	b086      	sub	sp, #24
70009358:	af00      	add	r7, sp, #0
7000935a:	6078      	str	r0, [r7, #4]
7000935c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
7000935e:	4b2e      	ldr	r3, [pc, #184]	@ (70009418 <prvAddCurrentTaskToDelayedList+0xc4>)
70009360:	681b      	ldr	r3, [r3, #0]
70009362:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
70009364:	4b2d      	ldr	r3, [pc, #180]	@ (7000941c <prvAddCurrentTaskToDelayedList+0xc8>)
70009366:	681b      	ldr	r3, [r3, #0]
70009368:	3304      	adds	r3, #4
7000936a:	4618      	mov	r0, r3
7000936c:	f7fd f900 	bl	70006570 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
70009370:	687b      	ldr	r3, [r7, #4]
70009372:	f1b3 3fff 	cmp.w	r3, #4294967295
70009376:	d124      	bne.n	700093c2 <prvAddCurrentTaskToDelayedList+0x6e>
70009378:	683b      	ldr	r3, [r7, #0]
7000937a:	2b00      	cmp	r3, #0
7000937c:	d021      	beq.n	700093c2 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
7000937e:	4b28      	ldr	r3, [pc, #160]	@ (70009420 <prvAddCurrentTaskToDelayedList+0xcc>)
70009380:	685b      	ldr	r3, [r3, #4]
70009382:	613b      	str	r3, [r7, #16]
70009384:	4b25      	ldr	r3, [pc, #148]	@ (7000941c <prvAddCurrentTaskToDelayedList+0xc8>)
70009386:	681b      	ldr	r3, [r3, #0]
70009388:	693a      	ldr	r2, [r7, #16]
7000938a:	609a      	str	r2, [r3, #8]
7000938c:	4b23      	ldr	r3, [pc, #140]	@ (7000941c <prvAddCurrentTaskToDelayedList+0xc8>)
7000938e:	681b      	ldr	r3, [r3, #0]
70009390:	693a      	ldr	r2, [r7, #16]
70009392:	6892      	ldr	r2, [r2, #8]
70009394:	60da      	str	r2, [r3, #12]
70009396:	4b21      	ldr	r3, [pc, #132]	@ (7000941c <prvAddCurrentTaskToDelayedList+0xc8>)
70009398:	681a      	ldr	r2, [r3, #0]
7000939a:	693b      	ldr	r3, [r7, #16]
7000939c:	689b      	ldr	r3, [r3, #8]
7000939e:	3204      	adds	r2, #4
700093a0:	605a      	str	r2, [r3, #4]
700093a2:	4b1e      	ldr	r3, [pc, #120]	@ (7000941c <prvAddCurrentTaskToDelayedList+0xc8>)
700093a4:	681b      	ldr	r3, [r3, #0]
700093a6:	1d1a      	adds	r2, r3, #4
700093a8:	693b      	ldr	r3, [r7, #16]
700093aa:	609a      	str	r2, [r3, #8]
700093ac:	4b1b      	ldr	r3, [pc, #108]	@ (7000941c <prvAddCurrentTaskToDelayedList+0xc8>)
700093ae:	681b      	ldr	r3, [r3, #0]
700093b0:	4a1b      	ldr	r2, [pc, #108]	@ (70009420 <prvAddCurrentTaskToDelayedList+0xcc>)
700093b2:	615a      	str	r2, [r3, #20]
700093b4:	4b1a      	ldr	r3, [pc, #104]	@ (70009420 <prvAddCurrentTaskToDelayedList+0xcc>)
700093b6:	681b      	ldr	r3, [r3, #0]
700093b8:	3301      	adds	r3, #1
700093ba:	4a19      	ldr	r2, [pc, #100]	@ (70009420 <prvAddCurrentTaskToDelayedList+0xcc>)
700093bc:	6013      	str	r3, [r2, #0]
700093be:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
700093c0:	e026      	b.n	70009410 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
700093c2:	697a      	ldr	r2, [r7, #20]
700093c4:	687b      	ldr	r3, [r7, #4]
700093c6:	4413      	add	r3, r2
700093c8:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
700093ca:	4b14      	ldr	r3, [pc, #80]	@ (7000941c <prvAddCurrentTaskToDelayedList+0xc8>)
700093cc:	681b      	ldr	r3, [r3, #0]
700093ce:	68fa      	ldr	r2, [r7, #12]
700093d0:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
700093d2:	68fa      	ldr	r2, [r7, #12]
700093d4:	697b      	ldr	r3, [r7, #20]
700093d6:	429a      	cmp	r2, r3
700093d8:	d209      	bcs.n	700093ee <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
700093da:	4b12      	ldr	r3, [pc, #72]	@ (70009424 <prvAddCurrentTaskToDelayedList+0xd0>)
700093dc:	681a      	ldr	r2, [r3, #0]
700093de:	4b0f      	ldr	r3, [pc, #60]	@ (7000941c <prvAddCurrentTaskToDelayedList+0xc8>)
700093e0:	681b      	ldr	r3, [r3, #0]
700093e2:	3304      	adds	r3, #4
700093e4:	4619      	mov	r1, r3
700093e6:	4610      	mov	r0, r2
700093e8:	f7fd f889 	bl	700064fe <vListInsert>
}
700093ec:	e010      	b.n	70009410 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
700093ee:	4b0e      	ldr	r3, [pc, #56]	@ (70009428 <prvAddCurrentTaskToDelayedList+0xd4>)
700093f0:	681a      	ldr	r2, [r3, #0]
700093f2:	4b0a      	ldr	r3, [pc, #40]	@ (7000941c <prvAddCurrentTaskToDelayedList+0xc8>)
700093f4:	681b      	ldr	r3, [r3, #0]
700093f6:	3304      	adds	r3, #4
700093f8:	4619      	mov	r1, r3
700093fa:	4610      	mov	r0, r2
700093fc:	f7fd f87f 	bl	700064fe <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
70009400:	4b0a      	ldr	r3, [pc, #40]	@ (7000942c <prvAddCurrentTaskToDelayedList+0xd8>)
70009402:	681b      	ldr	r3, [r3, #0]
70009404:	68fa      	ldr	r2, [r7, #12]
70009406:	429a      	cmp	r2, r3
70009408:	d202      	bcs.n	70009410 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
7000940a:	4a08      	ldr	r2, [pc, #32]	@ (7000942c <prvAddCurrentTaskToDelayedList+0xd8>)
7000940c:	68fb      	ldr	r3, [r7, #12]
7000940e:	6013      	str	r3, [r2, #0]
}
70009410:	bf00      	nop
70009412:	3718      	adds	r7, #24
70009414:	46bd      	mov	sp, r7
70009416:	bd80      	pop	{r7, pc}
70009418:	24005120 	.word	0x24005120
7000941c:	24004c48 	.word	0x24004c48
70009420:	24005108 	.word	0x24005108
70009424:	240050d8 	.word	0x240050d8
70009428:	240050d4 	.word	0x240050d4
7000942c:	2400513c 	.word	0x2400513c

70009430 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
70009430:	b580      	push	{r7, lr}
70009432:	b08a      	sub	sp, #40	@ 0x28
70009434:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
70009436:	2300      	movs	r3, #0
70009438:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
7000943a:	f000 fa81 	bl	70009940 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
7000943e:	4b1d      	ldr	r3, [pc, #116]	@ (700094b4 <xTimerCreateTimerTask+0x84>)
70009440:	681b      	ldr	r3, [r3, #0]
70009442:	2b00      	cmp	r3, #0
70009444:	d021      	beq.n	7000948a <xTimerCreateTimerTask+0x5a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
70009446:	2300      	movs	r3, #0
70009448:	60fb      	str	r3, [r7, #12]
                StackType_t * pxTimerTaskStackBuffer = NULL;
7000944a:	2300      	movs	r3, #0
7000944c:	60bb      	str	r3, [r7, #8]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
7000944e:	1d3a      	adds	r2, r7, #4
70009450:	f107 0108 	add.w	r1, r7, #8
70009454:	f107 030c 	add.w	r3, r7, #12
70009458:	4618      	mov	r0, r3
7000945a:	f7fc fe15 	bl	70006088 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
7000945e:	6879      	ldr	r1, [r7, #4]
70009460:	68bb      	ldr	r3, [r7, #8]
70009462:	68fa      	ldr	r2, [r7, #12]
70009464:	9202      	str	r2, [sp, #8]
70009466:	9301      	str	r3, [sp, #4]
70009468:	2302      	movs	r3, #2
7000946a:	9300      	str	r3, [sp, #0]
7000946c:	2300      	movs	r3, #0
7000946e:	460a      	mov	r2, r1
70009470:	4911      	ldr	r1, [pc, #68]	@ (700094b8 <xTimerCreateTimerTask+0x88>)
70009472:	4812      	ldr	r0, [pc, #72]	@ (700094bc <xTimerCreateTimerTask+0x8c>)
70009474:	f7fe fc6e 	bl	70007d54 <xTaskCreateStatic>
70009478:	4603      	mov	r3, r0
7000947a:	4a11      	ldr	r2, [pc, #68]	@ (700094c0 <xTimerCreateTimerTask+0x90>)
7000947c:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
7000947e:	4b10      	ldr	r3, [pc, #64]	@ (700094c0 <xTimerCreateTimerTask+0x90>)
70009480:	681b      	ldr	r3, [r3, #0]
70009482:	2b00      	cmp	r3, #0
70009484:	d001      	beq.n	7000948a <xTimerCreateTimerTask+0x5a>
                {
                    xReturn = pdPASS;
70009486:	2301      	movs	r3, #1
70009488:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
7000948a:	697b      	ldr	r3, [r7, #20]
7000948c:	2b00      	cmp	r3, #0
7000948e:	d10b      	bne.n	700094a8 <xTimerCreateTimerTask+0x78>
        __asm volatile
70009490:	f04f 0350 	mov.w	r3, #80	@ 0x50
70009494:	f383 8811 	msr	BASEPRI, r3
70009498:	f3bf 8f6f 	isb	sy
7000949c:	f3bf 8f4f 	dsb	sy
700094a0:	613b      	str	r3, [r7, #16]
    }
700094a2:	bf00      	nop
700094a4:	bf00      	nop
700094a6:	e7fd      	b.n	700094a4 <xTimerCreateTimerTask+0x74>
        return xReturn;
700094a8:	697b      	ldr	r3, [r7, #20]
    }
700094aa:	4618      	mov	r0, r3
700094ac:	3718      	adds	r7, #24
700094ae:	46bd      	mov	sp, r7
700094b0:	bd80      	pop	{r7, pc}
700094b2:	bf00      	nop
700094b4:	24005178 	.word	0x24005178
700094b8:	70014c74 	.word	0x70014c74
700094bc:	70009569 	.word	0x70009569
700094c0:	2400517c 	.word	0x2400517c

700094c4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
700094c4:	b580      	push	{r7, lr}
700094c6:	b084      	sub	sp, #16
700094c8:	af00      	add	r7, sp, #0
700094ca:	60f8      	str	r0, [r7, #12]
700094cc:	60b9      	str	r1, [r7, #8]
700094ce:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
700094d0:	e008      	b.n	700094e4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
700094d2:	68fb      	ldr	r3, [r7, #12]
700094d4:	699b      	ldr	r3, [r3, #24]
700094d6:	68ba      	ldr	r2, [r7, #8]
700094d8:	4413      	add	r3, r2
700094da:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
700094dc:	68fb      	ldr	r3, [r7, #12]
700094de:	6a1b      	ldr	r3, [r3, #32]
700094e0:	68f8      	ldr	r0, [r7, #12]
700094e2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
700094e4:	68fb      	ldr	r3, [r7, #12]
700094e6:	699a      	ldr	r2, [r3, #24]
700094e8:	68bb      	ldr	r3, [r7, #8]
700094ea:	18d1      	adds	r1, r2, r3
700094ec:	68bb      	ldr	r3, [r7, #8]
700094ee:	687a      	ldr	r2, [r7, #4]
700094f0:	68f8      	ldr	r0, [r7, #12]
700094f2:	f000 f8df 	bl	700096b4 <prvInsertTimerInActiveList>
700094f6:	4603      	mov	r3, r0
700094f8:	2b00      	cmp	r3, #0
700094fa:	d1ea      	bne.n	700094d2 <prvReloadTimer+0xe>
        }
    }
700094fc:	bf00      	nop
700094fe:	bf00      	nop
70009500:	3710      	adds	r7, #16
70009502:	46bd      	mov	sp, r7
70009504:	bd80      	pop	{r7, pc}
	...

70009508 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
70009508:	b580      	push	{r7, lr}
7000950a:	b084      	sub	sp, #16
7000950c:	af00      	add	r7, sp, #0
7000950e:	6078      	str	r0, [r7, #4]
70009510:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
70009512:	4b14      	ldr	r3, [pc, #80]	@ (70009564 <prvProcessExpiredTimer+0x5c>)
70009514:	681b      	ldr	r3, [r3, #0]
70009516:	68db      	ldr	r3, [r3, #12]
70009518:	68db      	ldr	r3, [r3, #12]
7000951a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
7000951c:	68fb      	ldr	r3, [r7, #12]
7000951e:	3304      	adds	r3, #4
70009520:	4618      	mov	r0, r3
70009522:	f7fd f825 	bl	70006570 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
70009526:	68fb      	ldr	r3, [r7, #12]
70009528:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
7000952c:	f003 0304 	and.w	r3, r3, #4
70009530:	2b00      	cmp	r3, #0
70009532:	d005      	beq.n	70009540 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
70009534:	683a      	ldr	r2, [r7, #0]
70009536:	6879      	ldr	r1, [r7, #4]
70009538:	68f8      	ldr	r0, [r7, #12]
7000953a:	f7ff ffc3 	bl	700094c4 <prvReloadTimer>
7000953e:	e008      	b.n	70009552 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
70009540:	68fb      	ldr	r3, [r7, #12]
70009542:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
70009546:	f023 0301 	bic.w	r3, r3, #1
7000954a:	b2da      	uxtb	r2, r3
7000954c:	68fb      	ldr	r3, [r7, #12]
7000954e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
70009552:	68fb      	ldr	r3, [r7, #12]
70009554:	6a1b      	ldr	r3, [r3, #32]
70009556:	68f8      	ldr	r0, [r7, #12]
70009558:	4798      	blx	r3
    }
7000955a:	bf00      	nop
7000955c:	3710      	adds	r7, #16
7000955e:	46bd      	mov	sp, r7
70009560:	bd80      	pop	{r7, pc}
70009562:	bf00      	nop
70009564:	24005170 	.word	0x24005170

70009568 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
70009568:	b580      	push	{r7, lr}
7000956a:	b084      	sub	sp, #16
7000956c:	af00      	add	r7, sp, #0
7000956e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
70009570:	f107 0308 	add.w	r3, r7, #8
70009574:	4618      	mov	r0, r3
70009576:	f000 f859 	bl	7000962c <prvGetNextExpireTime>
7000957a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
7000957c:	68bb      	ldr	r3, [r7, #8]
7000957e:	4619      	mov	r1, r3
70009580:	68f8      	ldr	r0, [r7, #12]
70009582:	f000 f805 	bl	70009590 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
70009586:	f000 f8d7 	bl	70009738 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
7000958a:	bf00      	nop
7000958c:	e7f0      	b.n	70009570 <prvTimerTask+0x8>
	...

70009590 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
70009590:	b580      	push	{r7, lr}
70009592:	b084      	sub	sp, #16
70009594:	af00      	add	r7, sp, #0
70009596:	6078      	str	r0, [r7, #4]
70009598:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
7000959a:	f7fe ff65 	bl	70008468 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
7000959e:	f107 0308 	add.w	r3, r7, #8
700095a2:	4618      	mov	r0, r3
700095a4:	f000 f866 	bl	70009674 <prvSampleTimeNow>
700095a8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
700095aa:	68bb      	ldr	r3, [r7, #8]
700095ac:	2b00      	cmp	r3, #0
700095ae:	d130      	bne.n	70009612 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
700095b0:	683b      	ldr	r3, [r7, #0]
700095b2:	2b00      	cmp	r3, #0
700095b4:	d10a      	bne.n	700095cc <prvProcessTimerOrBlockTask+0x3c>
700095b6:	687a      	ldr	r2, [r7, #4]
700095b8:	68fb      	ldr	r3, [r7, #12]
700095ba:	429a      	cmp	r2, r3
700095bc:	d806      	bhi.n	700095cc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
700095be:	f7fe ff61 	bl	70008484 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
700095c2:	68f9      	ldr	r1, [r7, #12]
700095c4:	6878      	ldr	r0, [r7, #4]
700095c6:	f7ff ff9f 	bl	70009508 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
700095ca:	e024      	b.n	70009616 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
700095cc:	683b      	ldr	r3, [r7, #0]
700095ce:	2b00      	cmp	r3, #0
700095d0:	d008      	beq.n	700095e4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
700095d2:	4b13      	ldr	r3, [pc, #76]	@ (70009620 <prvProcessTimerOrBlockTask+0x90>)
700095d4:	681b      	ldr	r3, [r3, #0]
700095d6:	681b      	ldr	r3, [r3, #0]
700095d8:	2b00      	cmp	r3, #0
700095da:	d101      	bne.n	700095e0 <prvProcessTimerOrBlockTask+0x50>
700095dc:	2301      	movs	r3, #1
700095de:	e000      	b.n	700095e2 <prvProcessTimerOrBlockTask+0x52>
700095e0:	2300      	movs	r3, #0
700095e2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
700095e4:	4b0f      	ldr	r3, [pc, #60]	@ (70009624 <prvProcessTimerOrBlockTask+0x94>)
700095e6:	6818      	ldr	r0, [r3, #0]
700095e8:	687a      	ldr	r2, [r7, #4]
700095ea:	68fb      	ldr	r3, [r7, #12]
700095ec:	1ad3      	subs	r3, r2, r3
700095ee:	683a      	ldr	r2, [r7, #0]
700095f0:	4619      	mov	r1, r3
700095f2:	f7fe fb7b 	bl	70007cec <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
700095f6:	f7fe ff45 	bl	70008484 <xTaskResumeAll>
700095fa:	4603      	mov	r3, r0
700095fc:	2b00      	cmp	r3, #0
700095fe:	d10a      	bne.n	70009616 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
70009600:	4b09      	ldr	r3, [pc, #36]	@ (70009628 <prvProcessTimerOrBlockTask+0x98>)
70009602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70009606:	601a      	str	r2, [r3, #0]
70009608:	f3bf 8f4f 	dsb	sy
7000960c:	f3bf 8f6f 	isb	sy
    }
70009610:	e001      	b.n	70009616 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
70009612:	f7fe ff37 	bl	70008484 <xTaskResumeAll>
    }
70009616:	bf00      	nop
70009618:	3710      	adds	r7, #16
7000961a:	46bd      	mov	sp, r7
7000961c:	bd80      	pop	{r7, pc}
7000961e:	bf00      	nop
70009620:	24005174 	.word	0x24005174
70009624:	24005178 	.word	0x24005178
70009628:	e000ed04 	.word	0xe000ed04

7000962c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
7000962c:	b480      	push	{r7}
7000962e:	b085      	sub	sp, #20
70009630:	af00      	add	r7, sp, #0
70009632:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
70009634:	4b0e      	ldr	r3, [pc, #56]	@ (70009670 <prvGetNextExpireTime+0x44>)
70009636:	681b      	ldr	r3, [r3, #0]
70009638:	681b      	ldr	r3, [r3, #0]
7000963a:	2b00      	cmp	r3, #0
7000963c:	d101      	bne.n	70009642 <prvGetNextExpireTime+0x16>
7000963e:	2201      	movs	r2, #1
70009640:	e000      	b.n	70009644 <prvGetNextExpireTime+0x18>
70009642:	2200      	movs	r2, #0
70009644:	687b      	ldr	r3, [r7, #4]
70009646:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
70009648:	687b      	ldr	r3, [r7, #4]
7000964a:	681b      	ldr	r3, [r3, #0]
7000964c:	2b00      	cmp	r3, #0
7000964e:	d105      	bne.n	7000965c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
70009650:	4b07      	ldr	r3, [pc, #28]	@ (70009670 <prvGetNextExpireTime+0x44>)
70009652:	681b      	ldr	r3, [r3, #0]
70009654:	68db      	ldr	r3, [r3, #12]
70009656:	681b      	ldr	r3, [r3, #0]
70009658:	60fb      	str	r3, [r7, #12]
7000965a:	e001      	b.n	70009660 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
7000965c:	2300      	movs	r3, #0
7000965e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
70009660:	68fb      	ldr	r3, [r7, #12]
    }
70009662:	4618      	mov	r0, r3
70009664:	3714      	adds	r7, #20
70009666:	46bd      	mov	sp, r7
70009668:	f85d 7b04 	ldr.w	r7, [sp], #4
7000966c:	4770      	bx	lr
7000966e:	bf00      	nop
70009670:	24005170 	.word	0x24005170

70009674 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
70009674:	b580      	push	{r7, lr}
70009676:	b084      	sub	sp, #16
70009678:	af00      	add	r7, sp, #0
7000967a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
7000967c:	f7ff f800 	bl	70008680 <xTaskGetTickCount>
70009680:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
70009682:	4b0b      	ldr	r3, [pc, #44]	@ (700096b0 <prvSampleTimeNow+0x3c>)
70009684:	681b      	ldr	r3, [r3, #0]
70009686:	68fa      	ldr	r2, [r7, #12]
70009688:	429a      	cmp	r2, r3
7000968a:	d205      	bcs.n	70009698 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
7000968c:	f000 f932 	bl	700098f4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
70009690:	687b      	ldr	r3, [r7, #4]
70009692:	2201      	movs	r2, #1
70009694:	601a      	str	r2, [r3, #0]
70009696:	e002      	b.n	7000969e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
70009698:	687b      	ldr	r3, [r7, #4]
7000969a:	2200      	movs	r2, #0
7000969c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
7000969e:	4a04      	ldr	r2, [pc, #16]	@ (700096b0 <prvSampleTimeNow+0x3c>)
700096a0:	68fb      	ldr	r3, [r7, #12]
700096a2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
700096a4:	68fb      	ldr	r3, [r7, #12]
    }
700096a6:	4618      	mov	r0, r3
700096a8:	3710      	adds	r7, #16
700096aa:	46bd      	mov	sp, r7
700096ac:	bd80      	pop	{r7, pc}
700096ae:	bf00      	nop
700096b0:	24005180 	.word	0x24005180

700096b4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
700096b4:	b580      	push	{r7, lr}
700096b6:	b086      	sub	sp, #24
700096b8:	af00      	add	r7, sp, #0
700096ba:	60f8      	str	r0, [r7, #12]
700096bc:	60b9      	str	r1, [r7, #8]
700096be:	607a      	str	r2, [r7, #4]
700096c0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
700096c2:	2300      	movs	r3, #0
700096c4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
700096c6:	68fb      	ldr	r3, [r7, #12]
700096c8:	68ba      	ldr	r2, [r7, #8]
700096ca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
700096cc:	68fb      	ldr	r3, [r7, #12]
700096ce:	68fa      	ldr	r2, [r7, #12]
700096d0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
700096d2:	68ba      	ldr	r2, [r7, #8]
700096d4:	687b      	ldr	r3, [r7, #4]
700096d6:	429a      	cmp	r2, r3
700096d8:	d812      	bhi.n	70009700 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
700096da:	687a      	ldr	r2, [r7, #4]
700096dc:	683b      	ldr	r3, [r7, #0]
700096de:	1ad2      	subs	r2, r2, r3
700096e0:	68fb      	ldr	r3, [r7, #12]
700096e2:	699b      	ldr	r3, [r3, #24]
700096e4:	429a      	cmp	r2, r3
700096e6:	d302      	bcc.n	700096ee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
700096e8:	2301      	movs	r3, #1
700096ea:	617b      	str	r3, [r7, #20]
700096ec:	e01b      	b.n	70009726 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
700096ee:	4b10      	ldr	r3, [pc, #64]	@ (70009730 <prvInsertTimerInActiveList+0x7c>)
700096f0:	681a      	ldr	r2, [r3, #0]
700096f2:	68fb      	ldr	r3, [r7, #12]
700096f4:	3304      	adds	r3, #4
700096f6:	4619      	mov	r1, r3
700096f8:	4610      	mov	r0, r2
700096fa:	f7fc ff00 	bl	700064fe <vListInsert>
700096fe:	e012      	b.n	70009726 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
70009700:	687a      	ldr	r2, [r7, #4]
70009702:	683b      	ldr	r3, [r7, #0]
70009704:	429a      	cmp	r2, r3
70009706:	d206      	bcs.n	70009716 <prvInsertTimerInActiveList+0x62>
70009708:	68ba      	ldr	r2, [r7, #8]
7000970a:	683b      	ldr	r3, [r7, #0]
7000970c:	429a      	cmp	r2, r3
7000970e:	d302      	bcc.n	70009716 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
70009710:	2301      	movs	r3, #1
70009712:	617b      	str	r3, [r7, #20]
70009714:	e007      	b.n	70009726 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
70009716:	4b07      	ldr	r3, [pc, #28]	@ (70009734 <prvInsertTimerInActiveList+0x80>)
70009718:	681a      	ldr	r2, [r3, #0]
7000971a:	68fb      	ldr	r3, [r7, #12]
7000971c:	3304      	adds	r3, #4
7000971e:	4619      	mov	r1, r3
70009720:	4610      	mov	r0, r2
70009722:	f7fc feec 	bl	700064fe <vListInsert>
            }
        }

        return xProcessTimerNow;
70009726:	697b      	ldr	r3, [r7, #20]
    }
70009728:	4618      	mov	r0, r3
7000972a:	3718      	adds	r7, #24
7000972c:	46bd      	mov	sp, r7
7000972e:	bd80      	pop	{r7, pc}
70009730:	24005174 	.word	0x24005174
70009734:	24005170 	.word	0x24005170

70009738 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
70009738:	b580      	push	{r7, lr}
7000973a:	b08a      	sub	sp, #40	@ 0x28
7000973c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
7000973e:	e0c7      	b.n	700098d0 <prvProcessReceivedCommands+0x198>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
70009740:	687b      	ldr	r3, [r7, #4]
70009742:	2b00      	cmp	r3, #0
70009744:	da19      	bge.n	7000977a <prvProcessReceivedCommands+0x42>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
70009746:	1d3b      	adds	r3, r7, #4
70009748:	3304      	adds	r3, #4
7000974a:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
7000974c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000974e:	2b00      	cmp	r3, #0
70009750:	d10b      	bne.n	7000976a <prvProcessReceivedCommands+0x32>
        __asm volatile
70009752:	f04f 0350 	mov.w	r3, #80	@ 0x50
70009756:	f383 8811 	msr	BASEPRI, r3
7000975a:	f3bf 8f6f 	isb	sy
7000975e:	f3bf 8f4f 	dsb	sy
70009762:	61bb      	str	r3, [r7, #24]
    }
70009764:	bf00      	nop
70009766:	bf00      	nop
70009768:	e7fd      	b.n	70009766 <prvProcessReceivedCommands+0x2e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
7000976a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000976c:	681b      	ldr	r3, [r3, #0]
7000976e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70009770:	6850      	ldr	r0, [r2, #4]
70009772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70009774:	6892      	ldr	r2, [r2, #8]
70009776:	4611      	mov	r1, r2
70009778:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
7000977a:	687b      	ldr	r3, [r7, #4]
7000977c:	2b00      	cmp	r3, #0
7000977e:	f2c0 80a7 	blt.w	700098d0 <prvProcessReceivedCommands+0x198>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
70009782:	68fb      	ldr	r3, [r7, #12]
70009784:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
70009786:	6a3b      	ldr	r3, [r7, #32]
70009788:	695b      	ldr	r3, [r3, #20]
7000978a:	2b00      	cmp	r3, #0
7000978c:	d004      	beq.n	70009798 <prvProcessReceivedCommands+0x60>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
7000978e:	6a3b      	ldr	r3, [r7, #32]
70009790:	3304      	adds	r3, #4
70009792:	4618      	mov	r0, r3
70009794:	f7fc feec 	bl	70006570 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
70009798:	463b      	mov	r3, r7
7000979a:	4618      	mov	r0, r3
7000979c:	f7ff ff6a 	bl	70009674 <prvSampleTimeNow>
700097a0:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
700097a2:	687b      	ldr	r3, [r7, #4]
700097a4:	3b01      	subs	r3, #1
700097a6:	2b08      	cmp	r3, #8
700097a8:	f200 808f 	bhi.w	700098ca <prvProcessReceivedCommands+0x192>
700097ac:	a201      	add	r2, pc, #4	@ (adr r2, 700097b4 <prvProcessReceivedCommands+0x7c>)
700097ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
700097b2:	bf00      	nop
700097b4:	700097d9 	.word	0x700097d9
700097b8:	700097d9 	.word	0x700097d9
700097bc:	70009841 	.word	0x70009841
700097c0:	70009855 	.word	0x70009855
700097c4:	700098a1 	.word	0x700098a1
700097c8:	700097d9 	.word	0x700097d9
700097cc:	700097d9 	.word	0x700097d9
700097d0:	70009841 	.word	0x70009841
700097d4:	70009855 	.word	0x70009855
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
700097d8:	6a3b      	ldr	r3, [r7, #32]
700097da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
700097de:	f043 0301 	orr.w	r3, r3, #1
700097e2:	b2da      	uxtb	r2, r3
700097e4:	6a3b      	ldr	r3, [r7, #32]
700097e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
700097ea:	68ba      	ldr	r2, [r7, #8]
700097ec:	6a3b      	ldr	r3, [r7, #32]
700097ee:	699b      	ldr	r3, [r3, #24]
700097f0:	18d1      	adds	r1, r2, r3
700097f2:	68bb      	ldr	r3, [r7, #8]
700097f4:	69fa      	ldr	r2, [r7, #28]
700097f6:	6a38      	ldr	r0, [r7, #32]
700097f8:	f7ff ff5c 	bl	700096b4 <prvInsertTimerInActiveList>
700097fc:	4603      	mov	r3, r0
700097fe:	2b00      	cmp	r3, #0
70009800:	d065      	beq.n	700098ce <prvProcessReceivedCommands+0x196>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
70009802:	6a3b      	ldr	r3, [r7, #32]
70009804:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
70009808:	f003 0304 	and.w	r3, r3, #4
7000980c:	2b00      	cmp	r3, #0
7000980e:	d009      	beq.n	70009824 <prvProcessReceivedCommands+0xec>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
70009810:	68ba      	ldr	r2, [r7, #8]
70009812:	6a3b      	ldr	r3, [r7, #32]
70009814:	699b      	ldr	r3, [r3, #24]
70009816:	4413      	add	r3, r2
70009818:	69fa      	ldr	r2, [r7, #28]
7000981a:	4619      	mov	r1, r3
7000981c:	6a38      	ldr	r0, [r7, #32]
7000981e:	f7ff fe51 	bl	700094c4 <prvReloadTimer>
70009822:	e008      	b.n	70009836 <prvProcessReceivedCommands+0xfe>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
70009824:	6a3b      	ldr	r3, [r7, #32]
70009826:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
7000982a:	f023 0301 	bic.w	r3, r3, #1
7000982e:	b2da      	uxtb	r2, r3
70009830:	6a3b      	ldr	r3, [r7, #32]
70009832:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
70009836:	6a3b      	ldr	r3, [r7, #32]
70009838:	6a1b      	ldr	r3, [r3, #32]
7000983a:	6a38      	ldr	r0, [r7, #32]
7000983c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
7000983e:	e046      	b.n	700098ce <prvProcessReceivedCommands+0x196>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
70009840:	6a3b      	ldr	r3, [r7, #32]
70009842:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
70009846:	f023 0301 	bic.w	r3, r3, #1
7000984a:	b2da      	uxtb	r2, r3
7000984c:	6a3b      	ldr	r3, [r7, #32]
7000984e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
70009852:	e03d      	b.n	700098d0 <prvProcessReceivedCommands+0x198>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
70009854:	6a3b      	ldr	r3, [r7, #32]
70009856:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
7000985a:	f043 0301 	orr.w	r3, r3, #1
7000985e:	b2da      	uxtb	r2, r3
70009860:	6a3b      	ldr	r3, [r7, #32]
70009862:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
70009866:	68ba      	ldr	r2, [r7, #8]
70009868:	6a3b      	ldr	r3, [r7, #32]
7000986a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
7000986c:	6a3b      	ldr	r3, [r7, #32]
7000986e:	699b      	ldr	r3, [r3, #24]
70009870:	2b00      	cmp	r3, #0
70009872:	d10b      	bne.n	7000988c <prvProcessReceivedCommands+0x154>
        __asm volatile
70009874:	f04f 0350 	mov.w	r3, #80	@ 0x50
70009878:	f383 8811 	msr	BASEPRI, r3
7000987c:	f3bf 8f6f 	isb	sy
70009880:	f3bf 8f4f 	dsb	sy
70009884:	617b      	str	r3, [r7, #20]
    }
70009886:	bf00      	nop
70009888:	bf00      	nop
7000988a:	e7fd      	b.n	70009888 <prvProcessReceivedCommands+0x150>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
7000988c:	6a3b      	ldr	r3, [r7, #32]
7000988e:	699a      	ldr	r2, [r3, #24]
70009890:	69fb      	ldr	r3, [r7, #28]
70009892:	18d1      	adds	r1, r2, r3
70009894:	69fb      	ldr	r3, [r7, #28]
70009896:	69fa      	ldr	r2, [r7, #28]
70009898:	6a38      	ldr	r0, [r7, #32]
7000989a:	f7ff ff0b 	bl	700096b4 <prvInsertTimerInActiveList>
                        break;
7000989e:	e017      	b.n	700098d0 <prvProcessReceivedCommands+0x198>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
700098a0:	6a3b      	ldr	r3, [r7, #32]
700098a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
700098a6:	f003 0302 	and.w	r3, r3, #2
700098aa:	2b00      	cmp	r3, #0
700098ac:	d103      	bne.n	700098b6 <prvProcessReceivedCommands+0x17e>
                            {
                                vPortFree( pxTimer );
700098ae:	6a38      	ldr	r0, [r7, #32]
700098b0:	f7fc fcc0 	bl	70006234 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
700098b4:	e00c      	b.n	700098d0 <prvProcessReceivedCommands+0x198>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
700098b6:	6a3b      	ldr	r3, [r7, #32]
700098b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
700098bc:	f023 0301 	bic.w	r3, r3, #1
700098c0:	b2da      	uxtb	r2, r3
700098c2:	6a3b      	ldr	r3, [r7, #32]
700098c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
700098c8:	e002      	b.n	700098d0 <prvProcessReceivedCommands+0x198>

                    default:
                        /* Don't expect to get here. */
                        break;
700098ca:	bf00      	nop
700098cc:	e000      	b.n	700098d0 <prvProcessReceivedCommands+0x198>
                        break;
700098ce:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
700098d0:	4b07      	ldr	r3, [pc, #28]	@ (700098f0 <prvProcessReceivedCommands+0x1b8>)
700098d2:	681b      	ldr	r3, [r3, #0]
700098d4:	1d39      	adds	r1, r7, #4
700098d6:	2200      	movs	r2, #0
700098d8:	4618      	mov	r0, r3
700098da:	f7fd fdb5 	bl	70007448 <xQueueReceive>
700098de:	4603      	mov	r3, r0
700098e0:	2b00      	cmp	r3, #0
700098e2:	f47f af2d 	bne.w	70009740 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
700098e6:	bf00      	nop
700098e8:	bf00      	nop
700098ea:	3728      	adds	r7, #40	@ 0x28
700098ec:	46bd      	mov	sp, r7
700098ee:	bd80      	pop	{r7, pc}
700098f0:	24005178 	.word	0x24005178

700098f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
700098f4:	b580      	push	{r7, lr}
700098f6:	b082      	sub	sp, #8
700098f8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
700098fa:	e009      	b.n	70009910 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
700098fc:	4b0e      	ldr	r3, [pc, #56]	@ (70009938 <prvSwitchTimerLists+0x44>)
700098fe:	681b      	ldr	r3, [r3, #0]
70009900:	68db      	ldr	r3, [r3, #12]
70009902:	681b      	ldr	r3, [r3, #0]
70009904:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
70009906:	f04f 31ff 	mov.w	r1, #4294967295
7000990a:	6838      	ldr	r0, [r7, #0]
7000990c:	f7ff fdfc 	bl	70009508 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
70009910:	4b09      	ldr	r3, [pc, #36]	@ (70009938 <prvSwitchTimerLists+0x44>)
70009912:	681b      	ldr	r3, [r3, #0]
70009914:	681b      	ldr	r3, [r3, #0]
70009916:	2b00      	cmp	r3, #0
70009918:	d1f0      	bne.n	700098fc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
7000991a:	4b07      	ldr	r3, [pc, #28]	@ (70009938 <prvSwitchTimerLists+0x44>)
7000991c:	681b      	ldr	r3, [r3, #0]
7000991e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
70009920:	4b06      	ldr	r3, [pc, #24]	@ (7000993c <prvSwitchTimerLists+0x48>)
70009922:	681b      	ldr	r3, [r3, #0]
70009924:	4a04      	ldr	r2, [pc, #16]	@ (70009938 <prvSwitchTimerLists+0x44>)
70009926:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
70009928:	4a04      	ldr	r2, [pc, #16]	@ (7000993c <prvSwitchTimerLists+0x48>)
7000992a:	687b      	ldr	r3, [r7, #4]
7000992c:	6013      	str	r3, [r2, #0]
    }
7000992e:	bf00      	nop
70009930:	3708      	adds	r7, #8
70009932:	46bd      	mov	sp, r7
70009934:	bd80      	pop	{r7, pc}
70009936:	bf00      	nop
70009938:	24005170 	.word	0x24005170
7000993c:	24005174 	.word	0x24005174

70009940 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
70009940:	b580      	push	{r7, lr}
70009942:	b082      	sub	sp, #8
70009944:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
70009946:	f7fc ff71 	bl	7000682c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
7000994a:	4b15      	ldr	r3, [pc, #84]	@ (700099a0 <prvCheckForValidListAndQueue+0x60>)
7000994c:	681b      	ldr	r3, [r3, #0]
7000994e:	2b00      	cmp	r3, #0
70009950:	d120      	bne.n	70009994 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
70009952:	4814      	ldr	r0, [pc, #80]	@ (700099a4 <prvCheckForValidListAndQueue+0x64>)
70009954:	f7fc fd82 	bl	7000645c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
70009958:	4813      	ldr	r0, [pc, #76]	@ (700099a8 <prvCheckForValidListAndQueue+0x68>)
7000995a:	f7fc fd7f 	bl	7000645c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
7000995e:	4b13      	ldr	r3, [pc, #76]	@ (700099ac <prvCheckForValidListAndQueue+0x6c>)
70009960:	4a10      	ldr	r2, [pc, #64]	@ (700099a4 <prvCheckForValidListAndQueue+0x64>)
70009962:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
70009964:	4b12      	ldr	r3, [pc, #72]	@ (700099b0 <prvCheckForValidListAndQueue+0x70>)
70009966:	4a10      	ldr	r2, [pc, #64]	@ (700099a8 <prvCheckForValidListAndQueue+0x68>)
70009968:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
7000996a:	2300      	movs	r3, #0
7000996c:	9300      	str	r3, [sp, #0]
7000996e:	4b11      	ldr	r3, [pc, #68]	@ (700099b4 <prvCheckForValidListAndQueue+0x74>)
70009970:	4a11      	ldr	r2, [pc, #68]	@ (700099b8 <prvCheckForValidListAndQueue+0x78>)
70009972:	2110      	movs	r1, #16
70009974:	200a      	movs	r0, #10
70009976:	f7fd f915 	bl	70006ba4 <xQueueGenericCreateStatic>
7000997a:	4603      	mov	r3, r0
7000997c:	4a08      	ldr	r2, [pc, #32]	@ (700099a0 <prvCheckForValidListAndQueue+0x60>)
7000997e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
70009980:	4b07      	ldr	r3, [pc, #28]	@ (700099a0 <prvCheckForValidListAndQueue+0x60>)
70009982:	681b      	ldr	r3, [r3, #0]
70009984:	2b00      	cmp	r3, #0
70009986:	d005      	beq.n	70009994 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
70009988:	4b05      	ldr	r3, [pc, #20]	@ (700099a0 <prvCheckForValidListAndQueue+0x60>)
7000998a:	681b      	ldr	r3, [r3, #0]
7000998c:	490b      	ldr	r1, [pc, #44]	@ (700099bc <prvCheckForValidListAndQueue+0x7c>)
7000998e:	4618      	mov	r0, r3
70009990:	f7fe f922 	bl	70007bd8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
70009994:	f7fc ff7c 	bl	70006890 <vPortExitCritical>
    }
70009998:	bf00      	nop
7000999a:	46bd      	mov	sp, r7
7000999c:	bd80      	pop	{r7, pc}
7000999e:	bf00      	nop
700099a0:	24005178 	.word	0x24005178
700099a4:	24005148 	.word	0x24005148
700099a8:	2400515c 	.word	0x2400515c
700099ac:	24005170 	.word	0x24005170
700099b0:	24005174 	.word	0x24005174
700099b4:	24005224 	.word	0x24005224
700099b8:	24005184 	.word	0x24005184
700099bc:	70014c7c 	.word	0x70014c7c

700099c0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
700099c0:	b480      	push	{r7}
700099c2:	b083      	sub	sp, #12
700099c4:	af00      	add	r7, sp, #0
700099c6:	4603      	mov	r3, r0
700099c8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
700099ca:	88fb      	ldrh	r3, [r7, #6]
700099cc:	021b      	lsls	r3, r3, #8
700099ce:	b21a      	sxth	r2, r3
700099d0:	88fb      	ldrh	r3, [r7, #6]
700099d2:	0a1b      	lsrs	r3, r3, #8
700099d4:	b29b      	uxth	r3, r3
700099d6:	b21b      	sxth	r3, r3
700099d8:	4313      	orrs	r3, r2
700099da:	b21b      	sxth	r3, r3
700099dc:	b29b      	uxth	r3, r3
}
700099de:	4618      	mov	r0, r3
700099e0:	370c      	adds	r7, #12
700099e2:	46bd      	mov	sp, r7
700099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
700099e8:	4770      	bx	lr

700099ea <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
700099ea:	b480      	push	{r7}
700099ec:	b083      	sub	sp, #12
700099ee:	af00      	add	r7, sp, #0
700099f0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
700099f2:	687b      	ldr	r3, [r7, #4]
700099f4:	061a      	lsls	r2, r3, #24
700099f6:	687b      	ldr	r3, [r7, #4]
700099f8:	021b      	lsls	r3, r3, #8
700099fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
700099fe:	431a      	orrs	r2, r3
70009a00:	687b      	ldr	r3, [r7, #4]
70009a02:	0a1b      	lsrs	r3, r3, #8
70009a04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
70009a08:	431a      	orrs	r2, r3
70009a0a:	687b      	ldr	r3, [r7, #4]
70009a0c:	0e1b      	lsrs	r3, r3, #24
70009a0e:	4313      	orrs	r3, r2
}
70009a10:	4618      	mov	r0, r3
70009a12:	370c      	adds	r7, #12
70009a14:	46bd      	mov	sp, r7
70009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
70009a1a:	4770      	bx	lr

70009a1c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
70009a1c:	b580      	push	{r7, lr}
70009a1e:	b082      	sub	sp, #8
70009a20:	af00      	add	r7, sp, #0
70009a22:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
70009a24:	4915      	ldr	r1, [pc, #84]	@ (70009a7c <etharp_free_entry+0x60>)
70009a26:	687a      	ldr	r2, [r7, #4]
70009a28:	4613      	mov	r3, r2
70009a2a:	005b      	lsls	r3, r3, #1
70009a2c:	4413      	add	r3, r2
70009a2e:	00db      	lsls	r3, r3, #3
70009a30:	440b      	add	r3, r1
70009a32:	681b      	ldr	r3, [r3, #0]
70009a34:	2b00      	cmp	r3, #0
70009a36:	d013      	beq.n	70009a60 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
70009a38:	4910      	ldr	r1, [pc, #64]	@ (70009a7c <etharp_free_entry+0x60>)
70009a3a:	687a      	ldr	r2, [r7, #4]
70009a3c:	4613      	mov	r3, r2
70009a3e:	005b      	lsls	r3, r3, #1
70009a40:	4413      	add	r3, r2
70009a42:	00db      	lsls	r3, r3, #3
70009a44:	440b      	add	r3, r1
70009a46:	681b      	ldr	r3, [r3, #0]
70009a48:	4618      	mov	r0, r3
70009a4a:	f003 fef5 	bl	7000d838 <pbuf_free>
    arp_table[i].q = NULL;
70009a4e:	490b      	ldr	r1, [pc, #44]	@ (70009a7c <etharp_free_entry+0x60>)
70009a50:	687a      	ldr	r2, [r7, #4]
70009a52:	4613      	mov	r3, r2
70009a54:	005b      	lsls	r3, r3, #1
70009a56:	4413      	add	r3, r2
70009a58:	00db      	lsls	r3, r3, #3
70009a5a:	440b      	add	r3, r1
70009a5c:	2200      	movs	r2, #0
70009a5e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
70009a60:	4906      	ldr	r1, [pc, #24]	@ (70009a7c <etharp_free_entry+0x60>)
70009a62:	687a      	ldr	r2, [r7, #4]
70009a64:	4613      	mov	r3, r2
70009a66:	005b      	lsls	r3, r3, #1
70009a68:	4413      	add	r3, r2
70009a6a:	00db      	lsls	r3, r3, #3
70009a6c:	440b      	add	r3, r1
70009a6e:	3314      	adds	r3, #20
70009a70:	2200      	movs	r2, #0
70009a72:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
70009a74:	bf00      	nop
70009a76:	3708      	adds	r7, #8
70009a78:	46bd      	mov	sp, r7
70009a7a:	bd80      	pop	{r7, pc}
70009a7c:	24005274 	.word	0x24005274

70009a80 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
70009a80:	b580      	push	{r7, lr}
70009a82:	b082      	sub	sp, #8
70009a84:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
70009a86:	2300      	movs	r3, #0
70009a88:	607b      	str	r3, [r7, #4]
70009a8a:	e096      	b.n	70009bba <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
70009a8c:	494f      	ldr	r1, [pc, #316]	@ (70009bcc <etharp_tmr+0x14c>)
70009a8e:	687a      	ldr	r2, [r7, #4]
70009a90:	4613      	mov	r3, r2
70009a92:	005b      	lsls	r3, r3, #1
70009a94:	4413      	add	r3, r2
70009a96:	00db      	lsls	r3, r3, #3
70009a98:	440b      	add	r3, r1
70009a9a:	3314      	adds	r3, #20
70009a9c:	781b      	ldrb	r3, [r3, #0]
70009a9e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
70009aa0:	78fb      	ldrb	r3, [r7, #3]
70009aa2:	2b00      	cmp	r3, #0
70009aa4:	f000 8086 	beq.w	70009bb4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
70009aa8:	4948      	ldr	r1, [pc, #288]	@ (70009bcc <etharp_tmr+0x14c>)
70009aaa:	687a      	ldr	r2, [r7, #4]
70009aac:	4613      	mov	r3, r2
70009aae:	005b      	lsls	r3, r3, #1
70009ab0:	4413      	add	r3, r2
70009ab2:	00db      	lsls	r3, r3, #3
70009ab4:	440b      	add	r3, r1
70009ab6:	3312      	adds	r3, #18
70009ab8:	881b      	ldrh	r3, [r3, #0]
70009aba:	3301      	adds	r3, #1
70009abc:	b298      	uxth	r0, r3
70009abe:	4943      	ldr	r1, [pc, #268]	@ (70009bcc <etharp_tmr+0x14c>)
70009ac0:	687a      	ldr	r2, [r7, #4]
70009ac2:	4613      	mov	r3, r2
70009ac4:	005b      	lsls	r3, r3, #1
70009ac6:	4413      	add	r3, r2
70009ac8:	00db      	lsls	r3, r3, #3
70009aca:	440b      	add	r3, r1
70009acc:	3312      	adds	r3, #18
70009ace:	4602      	mov	r2, r0
70009ad0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
70009ad2:	493e      	ldr	r1, [pc, #248]	@ (70009bcc <etharp_tmr+0x14c>)
70009ad4:	687a      	ldr	r2, [r7, #4]
70009ad6:	4613      	mov	r3, r2
70009ad8:	005b      	lsls	r3, r3, #1
70009ada:	4413      	add	r3, r2
70009adc:	00db      	lsls	r3, r3, #3
70009ade:	440b      	add	r3, r1
70009ae0:	3312      	adds	r3, #18
70009ae2:	881b      	ldrh	r3, [r3, #0]
70009ae4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
70009ae8:	d215      	bcs.n	70009b16 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
70009aea:	4938      	ldr	r1, [pc, #224]	@ (70009bcc <etharp_tmr+0x14c>)
70009aec:	687a      	ldr	r2, [r7, #4]
70009aee:	4613      	mov	r3, r2
70009af0:	005b      	lsls	r3, r3, #1
70009af2:	4413      	add	r3, r2
70009af4:	00db      	lsls	r3, r3, #3
70009af6:	440b      	add	r3, r1
70009af8:	3314      	adds	r3, #20
70009afa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
70009afc:	2b01      	cmp	r3, #1
70009afe:	d10e      	bne.n	70009b1e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
70009b00:	4932      	ldr	r1, [pc, #200]	@ (70009bcc <etharp_tmr+0x14c>)
70009b02:	687a      	ldr	r2, [r7, #4]
70009b04:	4613      	mov	r3, r2
70009b06:	005b      	lsls	r3, r3, #1
70009b08:	4413      	add	r3, r2
70009b0a:	00db      	lsls	r3, r3, #3
70009b0c:	440b      	add	r3, r1
70009b0e:	3312      	adds	r3, #18
70009b10:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
70009b12:	2b04      	cmp	r3, #4
70009b14:	d903      	bls.n	70009b1e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
70009b16:	6878      	ldr	r0, [r7, #4]
70009b18:	f7ff ff80 	bl	70009a1c <etharp_free_entry>
70009b1c:	e04a      	b.n	70009bb4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
70009b1e:	492b      	ldr	r1, [pc, #172]	@ (70009bcc <etharp_tmr+0x14c>)
70009b20:	687a      	ldr	r2, [r7, #4]
70009b22:	4613      	mov	r3, r2
70009b24:	005b      	lsls	r3, r3, #1
70009b26:	4413      	add	r3, r2
70009b28:	00db      	lsls	r3, r3, #3
70009b2a:	440b      	add	r3, r1
70009b2c:	3314      	adds	r3, #20
70009b2e:	781b      	ldrb	r3, [r3, #0]
70009b30:	2b03      	cmp	r3, #3
70009b32:	d10a      	bne.n	70009b4a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
70009b34:	4925      	ldr	r1, [pc, #148]	@ (70009bcc <etharp_tmr+0x14c>)
70009b36:	687a      	ldr	r2, [r7, #4]
70009b38:	4613      	mov	r3, r2
70009b3a:	005b      	lsls	r3, r3, #1
70009b3c:	4413      	add	r3, r2
70009b3e:	00db      	lsls	r3, r3, #3
70009b40:	440b      	add	r3, r1
70009b42:	3314      	adds	r3, #20
70009b44:	2204      	movs	r2, #4
70009b46:	701a      	strb	r2, [r3, #0]
70009b48:	e034      	b.n	70009bb4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
70009b4a:	4920      	ldr	r1, [pc, #128]	@ (70009bcc <etharp_tmr+0x14c>)
70009b4c:	687a      	ldr	r2, [r7, #4]
70009b4e:	4613      	mov	r3, r2
70009b50:	005b      	lsls	r3, r3, #1
70009b52:	4413      	add	r3, r2
70009b54:	00db      	lsls	r3, r3, #3
70009b56:	440b      	add	r3, r1
70009b58:	3314      	adds	r3, #20
70009b5a:	781b      	ldrb	r3, [r3, #0]
70009b5c:	2b04      	cmp	r3, #4
70009b5e:	d10a      	bne.n	70009b76 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
70009b60:	491a      	ldr	r1, [pc, #104]	@ (70009bcc <etharp_tmr+0x14c>)
70009b62:	687a      	ldr	r2, [r7, #4]
70009b64:	4613      	mov	r3, r2
70009b66:	005b      	lsls	r3, r3, #1
70009b68:	4413      	add	r3, r2
70009b6a:	00db      	lsls	r3, r3, #3
70009b6c:	440b      	add	r3, r1
70009b6e:	3314      	adds	r3, #20
70009b70:	2202      	movs	r2, #2
70009b72:	701a      	strb	r2, [r3, #0]
70009b74:	e01e      	b.n	70009bb4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
70009b76:	4915      	ldr	r1, [pc, #84]	@ (70009bcc <etharp_tmr+0x14c>)
70009b78:	687a      	ldr	r2, [r7, #4]
70009b7a:	4613      	mov	r3, r2
70009b7c:	005b      	lsls	r3, r3, #1
70009b7e:	4413      	add	r3, r2
70009b80:	00db      	lsls	r3, r3, #3
70009b82:	440b      	add	r3, r1
70009b84:	3314      	adds	r3, #20
70009b86:	781b      	ldrb	r3, [r3, #0]
70009b88:	2b01      	cmp	r3, #1
70009b8a:	d113      	bne.n	70009bb4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
70009b8c:	490f      	ldr	r1, [pc, #60]	@ (70009bcc <etharp_tmr+0x14c>)
70009b8e:	687a      	ldr	r2, [r7, #4]
70009b90:	4613      	mov	r3, r2
70009b92:	005b      	lsls	r3, r3, #1
70009b94:	4413      	add	r3, r2
70009b96:	00db      	lsls	r3, r3, #3
70009b98:	440b      	add	r3, r1
70009b9a:	3308      	adds	r3, #8
70009b9c:	6818      	ldr	r0, [r3, #0]
70009b9e:	687a      	ldr	r2, [r7, #4]
70009ba0:	4613      	mov	r3, r2
70009ba2:	005b      	lsls	r3, r3, #1
70009ba4:	4413      	add	r3, r2
70009ba6:	00db      	lsls	r3, r3, #3
70009ba8:	4a08      	ldr	r2, [pc, #32]	@ (70009bcc <etharp_tmr+0x14c>)
70009baa:	4413      	add	r3, r2
70009bac:	3304      	adds	r3, #4
70009bae:	4619      	mov	r1, r3
70009bb0:	f000 fe7c 	bl	7000a8ac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
70009bb4:	687b      	ldr	r3, [r7, #4]
70009bb6:	3301      	adds	r3, #1
70009bb8:	607b      	str	r3, [r7, #4]
70009bba:	687b      	ldr	r3, [r7, #4]
70009bbc:	2b09      	cmp	r3, #9
70009bbe:	f77f af65 	ble.w	70009a8c <etharp_tmr+0xc>
      }
    }
  }
}
70009bc2:	bf00      	nop
70009bc4:	bf00      	nop
70009bc6:	3708      	adds	r7, #8
70009bc8:	46bd      	mov	sp, r7
70009bca:	bd80      	pop	{r7, pc}
70009bcc:	24005274 	.word	0x24005274

70009bd0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
70009bd0:	b580      	push	{r7, lr}
70009bd2:	b08a      	sub	sp, #40	@ 0x28
70009bd4:	af00      	add	r7, sp, #0
70009bd6:	60f8      	str	r0, [r7, #12]
70009bd8:	460b      	mov	r3, r1
70009bda:	607a      	str	r2, [r7, #4]
70009bdc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
70009bde:	230a      	movs	r3, #10
70009be0:	84fb      	strh	r3, [r7, #38]	@ 0x26
70009be2:	230a      	movs	r3, #10
70009be4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
70009be6:	230a      	movs	r3, #10
70009be8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
70009bea:	2300      	movs	r3, #0
70009bec:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
70009bee:	230a      	movs	r3, #10
70009bf0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
70009bf2:	2300      	movs	r3, #0
70009bf4:	83bb      	strh	r3, [r7, #28]
70009bf6:	2300      	movs	r3, #0
70009bf8:	837b      	strh	r3, [r7, #26]
70009bfa:	2300      	movs	r3, #0
70009bfc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
70009bfe:	2300      	movs	r3, #0
70009c00:	843b      	strh	r3, [r7, #32]
70009c02:	e0ae      	b.n	70009d62 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
70009c04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009c08:	49a6      	ldr	r1, [pc, #664]	@ (70009ea4 <etharp_find_entry+0x2d4>)
70009c0a:	4613      	mov	r3, r2
70009c0c:	005b      	lsls	r3, r3, #1
70009c0e:	4413      	add	r3, r2
70009c10:	00db      	lsls	r3, r3, #3
70009c12:	440b      	add	r3, r1
70009c14:	3314      	adds	r3, #20
70009c16:	781b      	ldrb	r3, [r3, #0]
70009c18:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
70009c1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
70009c1e:	2b0a      	cmp	r3, #10
70009c20:	d105      	bne.n	70009c2e <etharp_find_entry+0x5e>
70009c22:	7dfb      	ldrb	r3, [r7, #23]
70009c24:	2b00      	cmp	r3, #0
70009c26:	d102      	bne.n	70009c2e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
70009c28:	8c3b      	ldrh	r3, [r7, #32]
70009c2a:	847b      	strh	r3, [r7, #34]	@ 0x22
70009c2c:	e095      	b.n	70009d5a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
70009c2e:	7dfb      	ldrb	r3, [r7, #23]
70009c30:	2b00      	cmp	r3, #0
70009c32:	f000 8092 	beq.w	70009d5a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
70009c36:	7dfb      	ldrb	r3, [r7, #23]
70009c38:	2b01      	cmp	r3, #1
70009c3a:	d009      	beq.n	70009c50 <etharp_find_entry+0x80>
70009c3c:	7dfb      	ldrb	r3, [r7, #23]
70009c3e:	2b01      	cmp	r3, #1
70009c40:	d806      	bhi.n	70009c50 <etharp_find_entry+0x80>
70009c42:	4b99      	ldr	r3, [pc, #612]	@ (70009ea8 <etharp_find_entry+0x2d8>)
70009c44:	f240 1223 	movw	r2, #291	@ 0x123
70009c48:	4998      	ldr	r1, [pc, #608]	@ (70009eac <etharp_find_entry+0x2dc>)
70009c4a:	4899      	ldr	r0, [pc, #612]	@ (70009eb0 <etharp_find_entry+0x2e0>)
70009c4c:	f00a f860 	bl	70013d10 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
70009c50:	68fb      	ldr	r3, [r7, #12]
70009c52:	2b00      	cmp	r3, #0
70009c54:	d020      	beq.n	70009c98 <etharp_find_entry+0xc8>
70009c56:	68fb      	ldr	r3, [r7, #12]
70009c58:	6819      	ldr	r1, [r3, #0]
70009c5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009c5e:	4891      	ldr	r0, [pc, #580]	@ (70009ea4 <etharp_find_entry+0x2d4>)
70009c60:	4613      	mov	r3, r2
70009c62:	005b      	lsls	r3, r3, #1
70009c64:	4413      	add	r3, r2
70009c66:	00db      	lsls	r3, r3, #3
70009c68:	4403      	add	r3, r0
70009c6a:	3304      	adds	r3, #4
70009c6c:	681b      	ldr	r3, [r3, #0]
70009c6e:	4299      	cmp	r1, r3
70009c70:	d112      	bne.n	70009c98 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
70009c72:	687b      	ldr	r3, [r7, #4]
70009c74:	2b00      	cmp	r3, #0
70009c76:	d00c      	beq.n	70009c92 <etharp_find_entry+0xc2>
70009c78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009c7c:	4989      	ldr	r1, [pc, #548]	@ (70009ea4 <etharp_find_entry+0x2d4>)
70009c7e:	4613      	mov	r3, r2
70009c80:	005b      	lsls	r3, r3, #1
70009c82:	4413      	add	r3, r2
70009c84:	00db      	lsls	r3, r3, #3
70009c86:	440b      	add	r3, r1
70009c88:	3308      	adds	r3, #8
70009c8a:	681b      	ldr	r3, [r3, #0]
70009c8c:	687a      	ldr	r2, [r7, #4]
70009c8e:	429a      	cmp	r2, r3
70009c90:	d102      	bne.n	70009c98 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
70009c92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
70009c96:	e100      	b.n	70009e9a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
70009c98:	7dfb      	ldrb	r3, [r7, #23]
70009c9a:	2b01      	cmp	r3, #1
70009c9c:	d140      	bne.n	70009d20 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
70009c9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009ca2:	4980      	ldr	r1, [pc, #512]	@ (70009ea4 <etharp_find_entry+0x2d4>)
70009ca4:	4613      	mov	r3, r2
70009ca6:	005b      	lsls	r3, r3, #1
70009ca8:	4413      	add	r3, r2
70009caa:	00db      	lsls	r3, r3, #3
70009cac:	440b      	add	r3, r1
70009cae:	681b      	ldr	r3, [r3, #0]
70009cb0:	2b00      	cmp	r3, #0
70009cb2:	d01a      	beq.n	70009cea <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
70009cb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009cb8:	497a      	ldr	r1, [pc, #488]	@ (70009ea4 <etharp_find_entry+0x2d4>)
70009cba:	4613      	mov	r3, r2
70009cbc:	005b      	lsls	r3, r3, #1
70009cbe:	4413      	add	r3, r2
70009cc0:	00db      	lsls	r3, r3, #3
70009cc2:	440b      	add	r3, r1
70009cc4:	3312      	adds	r3, #18
70009cc6:	881b      	ldrh	r3, [r3, #0]
70009cc8:	8bba      	ldrh	r2, [r7, #28]
70009cca:	429a      	cmp	r2, r3
70009ccc:	d845      	bhi.n	70009d5a <etharp_find_entry+0x18a>
            old_queue = i;
70009cce:	8c3b      	ldrh	r3, [r7, #32]
70009cd0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
70009cd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009cd6:	4973      	ldr	r1, [pc, #460]	@ (70009ea4 <etharp_find_entry+0x2d4>)
70009cd8:	4613      	mov	r3, r2
70009cda:	005b      	lsls	r3, r3, #1
70009cdc:	4413      	add	r3, r2
70009cde:	00db      	lsls	r3, r3, #3
70009ce0:	440b      	add	r3, r1
70009ce2:	3312      	adds	r3, #18
70009ce4:	881b      	ldrh	r3, [r3, #0]
70009ce6:	83bb      	strh	r3, [r7, #28]
70009ce8:	e037      	b.n	70009d5a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
70009cea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009cee:	496d      	ldr	r1, [pc, #436]	@ (70009ea4 <etharp_find_entry+0x2d4>)
70009cf0:	4613      	mov	r3, r2
70009cf2:	005b      	lsls	r3, r3, #1
70009cf4:	4413      	add	r3, r2
70009cf6:	00db      	lsls	r3, r3, #3
70009cf8:	440b      	add	r3, r1
70009cfa:	3312      	adds	r3, #18
70009cfc:	881b      	ldrh	r3, [r3, #0]
70009cfe:	8b7a      	ldrh	r2, [r7, #26]
70009d00:	429a      	cmp	r2, r3
70009d02:	d82a      	bhi.n	70009d5a <etharp_find_entry+0x18a>
            old_pending = i;
70009d04:	8c3b      	ldrh	r3, [r7, #32]
70009d06:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
70009d08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009d0c:	4965      	ldr	r1, [pc, #404]	@ (70009ea4 <etharp_find_entry+0x2d4>)
70009d0e:	4613      	mov	r3, r2
70009d10:	005b      	lsls	r3, r3, #1
70009d12:	4413      	add	r3, r2
70009d14:	00db      	lsls	r3, r3, #3
70009d16:	440b      	add	r3, r1
70009d18:	3312      	adds	r3, #18
70009d1a:	881b      	ldrh	r3, [r3, #0]
70009d1c:	837b      	strh	r3, [r7, #26]
70009d1e:	e01c      	b.n	70009d5a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
70009d20:	7dfb      	ldrb	r3, [r7, #23]
70009d22:	2b01      	cmp	r3, #1
70009d24:	d919      	bls.n	70009d5a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
70009d26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009d2a:	495e      	ldr	r1, [pc, #376]	@ (70009ea4 <etharp_find_entry+0x2d4>)
70009d2c:	4613      	mov	r3, r2
70009d2e:	005b      	lsls	r3, r3, #1
70009d30:	4413      	add	r3, r2
70009d32:	00db      	lsls	r3, r3, #3
70009d34:	440b      	add	r3, r1
70009d36:	3312      	adds	r3, #18
70009d38:	881b      	ldrh	r3, [r3, #0]
70009d3a:	8b3a      	ldrh	r2, [r7, #24]
70009d3c:	429a      	cmp	r2, r3
70009d3e:	d80c      	bhi.n	70009d5a <etharp_find_entry+0x18a>
            old_stable = i;
70009d40:	8c3b      	ldrh	r3, [r7, #32]
70009d42:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
70009d44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009d48:	4956      	ldr	r1, [pc, #344]	@ (70009ea4 <etharp_find_entry+0x2d4>)
70009d4a:	4613      	mov	r3, r2
70009d4c:	005b      	lsls	r3, r3, #1
70009d4e:	4413      	add	r3, r2
70009d50:	00db      	lsls	r3, r3, #3
70009d52:	440b      	add	r3, r1
70009d54:	3312      	adds	r3, #18
70009d56:	881b      	ldrh	r3, [r3, #0]
70009d58:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
70009d5a:	8c3b      	ldrh	r3, [r7, #32]
70009d5c:	3301      	adds	r3, #1
70009d5e:	b29b      	uxth	r3, r3
70009d60:	843b      	strh	r3, [r7, #32]
70009d62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
70009d66:	2b09      	cmp	r3, #9
70009d68:	f77f af4c 	ble.w	70009c04 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
70009d6c:	7afb      	ldrb	r3, [r7, #11]
70009d6e:	f003 0302 	and.w	r3, r3, #2
70009d72:	2b00      	cmp	r3, #0
70009d74:	d108      	bne.n	70009d88 <etharp_find_entry+0x1b8>
70009d76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
70009d7a:	2b0a      	cmp	r3, #10
70009d7c:	d107      	bne.n	70009d8e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
70009d7e:	7afb      	ldrb	r3, [r7, #11]
70009d80:	f003 0301 	and.w	r3, r3, #1
70009d84:	2b00      	cmp	r3, #0
70009d86:	d102      	bne.n	70009d8e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
70009d88:	f04f 33ff 	mov.w	r3, #4294967295
70009d8c:	e085      	b.n	70009e9a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
70009d8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
70009d92:	2b09      	cmp	r3, #9
70009d94:	dc02      	bgt.n	70009d9c <etharp_find_entry+0x1cc>
    i = empty;
70009d96:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
70009d98:	843b      	strh	r3, [r7, #32]
70009d9a:	e039      	b.n	70009e10 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
70009d9c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
70009da0:	2b09      	cmp	r3, #9
70009da2:	dc14      	bgt.n	70009dce <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
70009da4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
70009da6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
70009da8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009dac:	493d      	ldr	r1, [pc, #244]	@ (70009ea4 <etharp_find_entry+0x2d4>)
70009dae:	4613      	mov	r3, r2
70009db0:	005b      	lsls	r3, r3, #1
70009db2:	4413      	add	r3, r2
70009db4:	00db      	lsls	r3, r3, #3
70009db6:	440b      	add	r3, r1
70009db8:	681b      	ldr	r3, [r3, #0]
70009dba:	2b00      	cmp	r3, #0
70009dbc:	d018      	beq.n	70009df0 <etharp_find_entry+0x220>
70009dbe:	4b3a      	ldr	r3, [pc, #232]	@ (70009ea8 <etharp_find_entry+0x2d8>)
70009dc0:	f240 126d 	movw	r2, #365	@ 0x16d
70009dc4:	493b      	ldr	r1, [pc, #236]	@ (70009eb4 <etharp_find_entry+0x2e4>)
70009dc6:	483a      	ldr	r0, [pc, #232]	@ (70009eb0 <etharp_find_entry+0x2e0>)
70009dc8:	f009 ffa2 	bl	70013d10 <iprintf>
70009dcc:	e010      	b.n	70009df0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
70009dce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
70009dd2:	2b09      	cmp	r3, #9
70009dd4:	dc02      	bgt.n	70009ddc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
70009dd6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
70009dd8:	843b      	strh	r3, [r7, #32]
70009dda:	e009      	b.n	70009df0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
70009ddc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
70009de0:	2b09      	cmp	r3, #9
70009de2:	dc02      	bgt.n	70009dea <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
70009de4:	8bfb      	ldrh	r3, [r7, #30]
70009de6:	843b      	strh	r3, [r7, #32]
70009de8:	e002      	b.n	70009df0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
70009dea:	f04f 33ff 	mov.w	r3, #4294967295
70009dee:	e054      	b.n	70009e9a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
70009df0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
70009df4:	2b09      	cmp	r3, #9
70009df6:	dd06      	ble.n	70009e06 <etharp_find_entry+0x236>
70009df8:	4b2b      	ldr	r3, [pc, #172]	@ (70009ea8 <etharp_find_entry+0x2d8>)
70009dfa:	f240 127f 	movw	r2, #383	@ 0x17f
70009dfe:	492e      	ldr	r1, [pc, #184]	@ (70009eb8 <etharp_find_entry+0x2e8>)
70009e00:	482b      	ldr	r0, [pc, #172]	@ (70009eb0 <etharp_find_entry+0x2e0>)
70009e02:	f009 ff85 	bl	70013d10 <iprintf>
    etharp_free_entry(i);
70009e06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
70009e0a:	4618      	mov	r0, r3
70009e0c:	f7ff fe06 	bl	70009a1c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
70009e10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
70009e14:	2b09      	cmp	r3, #9
70009e16:	dd06      	ble.n	70009e26 <etharp_find_entry+0x256>
70009e18:	4b23      	ldr	r3, [pc, #140]	@ (70009ea8 <etharp_find_entry+0x2d8>)
70009e1a:	f240 1283 	movw	r2, #387	@ 0x183
70009e1e:	4926      	ldr	r1, [pc, #152]	@ (70009eb8 <etharp_find_entry+0x2e8>)
70009e20:	4823      	ldr	r0, [pc, #140]	@ (70009eb0 <etharp_find_entry+0x2e0>)
70009e22:	f009 ff75 	bl	70013d10 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
70009e26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009e2a:	491e      	ldr	r1, [pc, #120]	@ (70009ea4 <etharp_find_entry+0x2d4>)
70009e2c:	4613      	mov	r3, r2
70009e2e:	005b      	lsls	r3, r3, #1
70009e30:	4413      	add	r3, r2
70009e32:	00db      	lsls	r3, r3, #3
70009e34:	440b      	add	r3, r1
70009e36:	3314      	adds	r3, #20
70009e38:	781b      	ldrb	r3, [r3, #0]
70009e3a:	2b00      	cmp	r3, #0
70009e3c:	d006      	beq.n	70009e4c <etharp_find_entry+0x27c>
70009e3e:	4b1a      	ldr	r3, [pc, #104]	@ (70009ea8 <etharp_find_entry+0x2d8>)
70009e40:	f44f 72c2 	mov.w	r2, #388	@ 0x184
70009e44:	491d      	ldr	r1, [pc, #116]	@ (70009ebc <etharp_find_entry+0x2ec>)
70009e46:	481a      	ldr	r0, [pc, #104]	@ (70009eb0 <etharp_find_entry+0x2e0>)
70009e48:	f009 ff62 	bl	70013d10 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
70009e4c:	68fb      	ldr	r3, [r7, #12]
70009e4e:	2b00      	cmp	r3, #0
70009e50:	d00b      	beq.n	70009e6a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
70009e52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009e56:	68fb      	ldr	r3, [r7, #12]
70009e58:	6819      	ldr	r1, [r3, #0]
70009e5a:	4812      	ldr	r0, [pc, #72]	@ (70009ea4 <etharp_find_entry+0x2d4>)
70009e5c:	4613      	mov	r3, r2
70009e5e:	005b      	lsls	r3, r3, #1
70009e60:	4413      	add	r3, r2
70009e62:	00db      	lsls	r3, r3, #3
70009e64:	4403      	add	r3, r0
70009e66:	3304      	adds	r3, #4
70009e68:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
70009e6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009e6e:	490d      	ldr	r1, [pc, #52]	@ (70009ea4 <etharp_find_entry+0x2d4>)
70009e70:	4613      	mov	r3, r2
70009e72:	005b      	lsls	r3, r3, #1
70009e74:	4413      	add	r3, r2
70009e76:	00db      	lsls	r3, r3, #3
70009e78:	440b      	add	r3, r1
70009e7a:	3312      	adds	r3, #18
70009e7c:	2200      	movs	r2, #0
70009e7e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
70009e80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009e84:	4907      	ldr	r1, [pc, #28]	@ (70009ea4 <etharp_find_entry+0x2d4>)
70009e86:	4613      	mov	r3, r2
70009e88:	005b      	lsls	r3, r3, #1
70009e8a:	4413      	add	r3, r2
70009e8c:	00db      	lsls	r3, r3, #3
70009e8e:	440b      	add	r3, r1
70009e90:	3308      	adds	r3, #8
70009e92:	687a      	ldr	r2, [r7, #4]
70009e94:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
70009e96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
70009e9a:	4618      	mov	r0, r3
70009e9c:	3728      	adds	r7, #40	@ 0x28
70009e9e:	46bd      	mov	sp, r7
70009ea0:	bd80      	pop	{r7, pc}
70009ea2:	bf00      	nop
70009ea4:	24005274 	.word	0x24005274
70009ea8:	70014c84 	.word	0x70014c84
70009eac:	70014ce8 	.word	0x70014ce8
70009eb0:	70014d28 	.word	0x70014d28
70009eb4:	70014d50 	.word	0x70014d50
70009eb8:	70014d68 	.word	0x70014d68
70009ebc:	70014d7c 	.word	0x70014d7c

70009ec0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
70009ec0:	b580      	push	{r7, lr}
70009ec2:	b088      	sub	sp, #32
70009ec4:	af02      	add	r7, sp, #8
70009ec6:	60f8      	str	r0, [r7, #12]
70009ec8:	60b9      	str	r1, [r7, #8]
70009eca:	607a      	str	r2, [r7, #4]
70009ecc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
70009ece:	68fb      	ldr	r3, [r7, #12]
70009ed0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
70009ed4:	2b06      	cmp	r3, #6
70009ed6:	d006      	beq.n	70009ee6 <etharp_update_arp_entry+0x26>
70009ed8:	4b48      	ldr	r3, [pc, #288]	@ (70009ffc <etharp_update_arp_entry+0x13c>)
70009eda:	f240 12a9 	movw	r2, #425	@ 0x1a9
70009ede:	4948      	ldr	r1, [pc, #288]	@ (7000a000 <etharp_update_arp_entry+0x140>)
70009ee0:	4848      	ldr	r0, [pc, #288]	@ (7000a004 <etharp_update_arp_entry+0x144>)
70009ee2:	f009 ff15 	bl	70013d10 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
70009ee6:	68bb      	ldr	r3, [r7, #8]
70009ee8:	2b00      	cmp	r3, #0
70009eea:	d012      	beq.n	70009f12 <etharp_update_arp_entry+0x52>
70009eec:	68bb      	ldr	r3, [r7, #8]
70009eee:	681b      	ldr	r3, [r3, #0]
70009ef0:	2b00      	cmp	r3, #0
70009ef2:	d00e      	beq.n	70009f12 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
70009ef4:	68bb      	ldr	r3, [r7, #8]
70009ef6:	681b      	ldr	r3, [r3, #0]
70009ef8:	68f9      	ldr	r1, [r7, #12]
70009efa:	4618      	mov	r0, r3
70009efc:	f001 faec 	bl	7000b4d8 <ip4_addr_isbroadcast_u32>
70009f00:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
70009f02:	2b00      	cmp	r3, #0
70009f04:	d105      	bne.n	70009f12 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
70009f06:	68bb      	ldr	r3, [r7, #8]
70009f08:	681b      	ldr	r3, [r3, #0]
70009f0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
70009f0e:	2be0      	cmp	r3, #224	@ 0xe0
70009f10:	d102      	bne.n	70009f18 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
70009f12:	f06f 030f 	mvn.w	r3, #15
70009f16:	e06c      	b.n	70009ff2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
70009f18:	78fb      	ldrb	r3, [r7, #3]
70009f1a:	68fa      	ldr	r2, [r7, #12]
70009f1c:	4619      	mov	r1, r3
70009f1e:	68b8      	ldr	r0, [r7, #8]
70009f20:	f7ff fe56 	bl	70009bd0 <etharp_find_entry>
70009f24:	4603      	mov	r3, r0
70009f26:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
70009f28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
70009f2c:	2b00      	cmp	r3, #0
70009f2e:	da02      	bge.n	70009f36 <etharp_update_arp_entry+0x76>
    return (err_t)i;
70009f30:	8afb      	ldrh	r3, [r7, #22]
70009f32:	b25b      	sxtb	r3, r3
70009f34:	e05d      	b.n	70009ff2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
70009f36:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
70009f3a:	4933      	ldr	r1, [pc, #204]	@ (7000a008 <etharp_update_arp_entry+0x148>)
70009f3c:	4613      	mov	r3, r2
70009f3e:	005b      	lsls	r3, r3, #1
70009f40:	4413      	add	r3, r2
70009f42:	00db      	lsls	r3, r3, #3
70009f44:	440b      	add	r3, r1
70009f46:	3314      	adds	r3, #20
70009f48:	2202      	movs	r2, #2
70009f4a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
70009f4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
70009f50:	492d      	ldr	r1, [pc, #180]	@ (7000a008 <etharp_update_arp_entry+0x148>)
70009f52:	4613      	mov	r3, r2
70009f54:	005b      	lsls	r3, r3, #1
70009f56:	4413      	add	r3, r2
70009f58:	00db      	lsls	r3, r3, #3
70009f5a:	440b      	add	r3, r1
70009f5c:	3308      	adds	r3, #8
70009f5e:	68fa      	ldr	r2, [r7, #12]
70009f60:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
70009f62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
70009f66:	4613      	mov	r3, r2
70009f68:	005b      	lsls	r3, r3, #1
70009f6a:	4413      	add	r3, r2
70009f6c:	00db      	lsls	r3, r3, #3
70009f6e:	3308      	adds	r3, #8
70009f70:	4a25      	ldr	r2, [pc, #148]	@ (7000a008 <etharp_update_arp_entry+0x148>)
70009f72:	4413      	add	r3, r2
70009f74:	3304      	adds	r3, #4
70009f76:	2206      	movs	r2, #6
70009f78:	6879      	ldr	r1, [r7, #4]
70009f7a:	4618      	mov	r0, r3
70009f7c:	f009 fff9 	bl	70013f72 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
70009f80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
70009f84:	4920      	ldr	r1, [pc, #128]	@ (7000a008 <etharp_update_arp_entry+0x148>)
70009f86:	4613      	mov	r3, r2
70009f88:	005b      	lsls	r3, r3, #1
70009f8a:	4413      	add	r3, r2
70009f8c:	00db      	lsls	r3, r3, #3
70009f8e:	440b      	add	r3, r1
70009f90:	3312      	adds	r3, #18
70009f92:	2200      	movs	r2, #0
70009f94:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
70009f96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
70009f9a:	491b      	ldr	r1, [pc, #108]	@ (7000a008 <etharp_update_arp_entry+0x148>)
70009f9c:	4613      	mov	r3, r2
70009f9e:	005b      	lsls	r3, r3, #1
70009fa0:	4413      	add	r3, r2
70009fa2:	00db      	lsls	r3, r3, #3
70009fa4:	440b      	add	r3, r1
70009fa6:	681b      	ldr	r3, [r3, #0]
70009fa8:	2b00      	cmp	r3, #0
70009faa:	d021      	beq.n	70009ff0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
70009fac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
70009fb0:	4915      	ldr	r1, [pc, #84]	@ (7000a008 <etharp_update_arp_entry+0x148>)
70009fb2:	4613      	mov	r3, r2
70009fb4:	005b      	lsls	r3, r3, #1
70009fb6:	4413      	add	r3, r2
70009fb8:	00db      	lsls	r3, r3, #3
70009fba:	440b      	add	r3, r1
70009fbc:	681b      	ldr	r3, [r3, #0]
70009fbe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
70009fc0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
70009fc4:	4910      	ldr	r1, [pc, #64]	@ (7000a008 <etharp_update_arp_entry+0x148>)
70009fc6:	4613      	mov	r3, r2
70009fc8:	005b      	lsls	r3, r3, #1
70009fca:	4413      	add	r3, r2
70009fcc:	00db      	lsls	r3, r3, #3
70009fce:	440b      	add	r3, r1
70009fd0:	2200      	movs	r2, #0
70009fd2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
70009fd4:	68fb      	ldr	r3, [r7, #12]
70009fd6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
70009fda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
70009fde:	9300      	str	r3, [sp, #0]
70009fe0:	687b      	ldr	r3, [r7, #4]
70009fe2:	6939      	ldr	r1, [r7, #16]
70009fe4:	68f8      	ldr	r0, [r7, #12]
70009fe6:	f000 fd01 	bl	7000a9ec <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
70009fea:	6938      	ldr	r0, [r7, #16]
70009fec:	f003 fc24 	bl	7000d838 <pbuf_free>
  }
  return ERR_OK;
70009ff0:	2300      	movs	r3, #0
}
70009ff2:	4618      	mov	r0, r3
70009ff4:	3718      	adds	r7, #24
70009ff6:	46bd      	mov	sp, r7
70009ff8:	bd80      	pop	{r7, pc}
70009ffa:	bf00      	nop
70009ffc:	70014c84 	.word	0x70014c84
7000a000:	70014da8 	.word	0x70014da8
7000a004:	70014d28 	.word	0x70014d28
7000a008:	24005274 	.word	0x24005274

7000a00c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
7000a00c:	b580      	push	{r7, lr}
7000a00e:	b084      	sub	sp, #16
7000a010:	af00      	add	r7, sp, #0
7000a012:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
7000a014:	2300      	movs	r3, #0
7000a016:	60fb      	str	r3, [r7, #12]
7000a018:	e01e      	b.n	7000a058 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
7000a01a:	4913      	ldr	r1, [pc, #76]	@ (7000a068 <etharp_cleanup_netif+0x5c>)
7000a01c:	68fa      	ldr	r2, [r7, #12]
7000a01e:	4613      	mov	r3, r2
7000a020:	005b      	lsls	r3, r3, #1
7000a022:	4413      	add	r3, r2
7000a024:	00db      	lsls	r3, r3, #3
7000a026:	440b      	add	r3, r1
7000a028:	3314      	adds	r3, #20
7000a02a:	781b      	ldrb	r3, [r3, #0]
7000a02c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
7000a02e:	7afb      	ldrb	r3, [r7, #11]
7000a030:	2b00      	cmp	r3, #0
7000a032:	d00e      	beq.n	7000a052 <etharp_cleanup_netif+0x46>
7000a034:	490c      	ldr	r1, [pc, #48]	@ (7000a068 <etharp_cleanup_netif+0x5c>)
7000a036:	68fa      	ldr	r2, [r7, #12]
7000a038:	4613      	mov	r3, r2
7000a03a:	005b      	lsls	r3, r3, #1
7000a03c:	4413      	add	r3, r2
7000a03e:	00db      	lsls	r3, r3, #3
7000a040:	440b      	add	r3, r1
7000a042:	3308      	adds	r3, #8
7000a044:	681b      	ldr	r3, [r3, #0]
7000a046:	687a      	ldr	r2, [r7, #4]
7000a048:	429a      	cmp	r2, r3
7000a04a:	d102      	bne.n	7000a052 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
7000a04c:	68f8      	ldr	r0, [r7, #12]
7000a04e:	f7ff fce5 	bl	70009a1c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
7000a052:	68fb      	ldr	r3, [r7, #12]
7000a054:	3301      	adds	r3, #1
7000a056:	60fb      	str	r3, [r7, #12]
7000a058:	68fb      	ldr	r3, [r7, #12]
7000a05a:	2b09      	cmp	r3, #9
7000a05c:	dddd      	ble.n	7000a01a <etharp_cleanup_netif+0xe>
    }
  }
}
7000a05e:	bf00      	nop
7000a060:	bf00      	nop
7000a062:	3710      	adds	r7, #16
7000a064:	46bd      	mov	sp, r7
7000a066:	bd80      	pop	{r7, pc}
7000a068:	24005274 	.word	0x24005274

7000a06c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
7000a06c:	b5b0      	push	{r4, r5, r7, lr}
7000a06e:	b08a      	sub	sp, #40	@ 0x28
7000a070:	af04      	add	r7, sp, #16
7000a072:	6078      	str	r0, [r7, #4]
7000a074:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
7000a076:	683b      	ldr	r3, [r7, #0]
7000a078:	2b00      	cmp	r3, #0
7000a07a:	d06f      	beq.n	7000a15c <etharp_input+0xf0>

  hdr = (struct etharp_hdr *)p->payload;
7000a07c:	687b      	ldr	r3, [r7, #4]
7000a07e:	685b      	ldr	r3, [r3, #4]
7000a080:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
7000a082:	693b      	ldr	r3, [r7, #16]
7000a084:	881b      	ldrh	r3, [r3, #0]
7000a086:	b29b      	uxth	r3, r3
7000a088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
7000a08c:	d10c      	bne.n	7000a0a8 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
7000a08e:	693b      	ldr	r3, [r7, #16]
7000a090:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
7000a092:	2b06      	cmp	r3, #6
7000a094:	d108      	bne.n	7000a0a8 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
7000a096:	693b      	ldr	r3, [r7, #16]
7000a098:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
7000a09a:	2b04      	cmp	r3, #4
7000a09c:	d104      	bne.n	7000a0a8 <etharp_input+0x3c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
7000a09e:	693b      	ldr	r3, [r7, #16]
7000a0a0:	885b      	ldrh	r3, [r3, #2]
7000a0a2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
7000a0a4:	2b08      	cmp	r3, #8
7000a0a6:	d003      	beq.n	7000a0b0 <etharp_input+0x44>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
7000a0a8:	6878      	ldr	r0, [r7, #4]
7000a0aa:	f003 fbc5 	bl	7000d838 <pbuf_free>
    return;
7000a0ae:	e055      	b.n	7000a15c <etharp_input+0xf0>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
7000a0b0:	693b      	ldr	r3, [r7, #16]
7000a0b2:	330e      	adds	r3, #14
7000a0b4:	681b      	ldr	r3, [r3, #0]
7000a0b6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
7000a0b8:	693b      	ldr	r3, [r7, #16]
7000a0ba:	3318      	adds	r3, #24
7000a0bc:	681b      	ldr	r3, [r3, #0]
7000a0be:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
7000a0c0:	683b      	ldr	r3, [r7, #0]
7000a0c2:	3304      	adds	r3, #4
7000a0c4:	681b      	ldr	r3, [r3, #0]
7000a0c6:	2b00      	cmp	r3, #0
7000a0c8:	d102      	bne.n	7000a0d0 <etharp_input+0x64>
    for_us = 0;
7000a0ca:	2300      	movs	r3, #0
7000a0cc:	75fb      	strb	r3, [r7, #23]
7000a0ce:	e009      	b.n	7000a0e4 <etharp_input+0x78>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
7000a0d0:	68ba      	ldr	r2, [r7, #8]
7000a0d2:	683b      	ldr	r3, [r7, #0]
7000a0d4:	3304      	adds	r3, #4
7000a0d6:	681b      	ldr	r3, [r3, #0]
7000a0d8:	429a      	cmp	r2, r3
7000a0da:	bf0c      	ite	eq
7000a0dc:	2301      	moveq	r3, #1
7000a0de:	2300      	movne	r3, #0
7000a0e0:	b2db      	uxtb	r3, r3
7000a0e2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
7000a0e4:	693b      	ldr	r3, [r7, #16]
7000a0e6:	f103 0208 	add.w	r2, r3, #8
7000a0ea:	7dfb      	ldrb	r3, [r7, #23]
7000a0ec:	2b00      	cmp	r3, #0
7000a0ee:	d001      	beq.n	7000a0f4 <etharp_input+0x88>
7000a0f0:	2301      	movs	r3, #1
7000a0f2:	e000      	b.n	7000a0f6 <etharp_input+0x8a>
7000a0f4:	2302      	movs	r3, #2
7000a0f6:	f107 010c 	add.w	r1, r7, #12
7000a0fa:	6838      	ldr	r0, [r7, #0]
7000a0fc:	f7ff fee0 	bl	70009ec0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
7000a100:	693b      	ldr	r3, [r7, #16]
7000a102:	88db      	ldrh	r3, [r3, #6]
7000a104:	b29b      	uxth	r3, r3
7000a106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
7000a10a:	d003      	beq.n	7000a114 <etharp_input+0xa8>
7000a10c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
7000a110:	d01e      	beq.n	7000a150 <etharp_input+0xe4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
7000a112:	e020      	b.n	7000a156 <etharp_input+0xea>
      if (for_us) {
7000a114:	7dfb      	ldrb	r3, [r7, #23]
7000a116:	2b00      	cmp	r3, #0
7000a118:	d01c      	beq.n	7000a154 <etharp_input+0xe8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
7000a11a:	683b      	ldr	r3, [r7, #0]
7000a11c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
7000a120:	693b      	ldr	r3, [r7, #16]
7000a122:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
7000a126:	683b      	ldr	r3, [r7, #0]
7000a128:	f103 0526 	add.w	r5, r3, #38	@ 0x26
7000a12c:	683b      	ldr	r3, [r7, #0]
7000a12e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
7000a130:	693a      	ldr	r2, [r7, #16]
7000a132:	3208      	adds	r2, #8
        etharp_raw(netif,
7000a134:	2102      	movs	r1, #2
7000a136:	9103      	str	r1, [sp, #12]
7000a138:	f107 010c 	add.w	r1, r7, #12
7000a13c:	9102      	str	r1, [sp, #8]
7000a13e:	9201      	str	r2, [sp, #4]
7000a140:	9300      	str	r3, [sp, #0]
7000a142:	462b      	mov	r3, r5
7000a144:	4622      	mov	r2, r4
7000a146:	4601      	mov	r1, r0
7000a148:	6838      	ldr	r0, [r7, #0]
7000a14a:	f000 fb01 	bl	7000a750 <etharp_raw>
      break;
7000a14e:	e001      	b.n	7000a154 <etharp_input+0xe8>
      break;
7000a150:	bf00      	nop
7000a152:	e000      	b.n	7000a156 <etharp_input+0xea>
      break;
7000a154:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
7000a156:	6878      	ldr	r0, [r7, #4]
7000a158:	f003 fb6e 	bl	7000d838 <pbuf_free>
}
7000a15c:	3718      	adds	r7, #24
7000a15e:	46bd      	mov	sp, r7
7000a160:	bdb0      	pop	{r4, r5, r7, pc}
	...

7000a164 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
7000a164:	b580      	push	{r7, lr}
7000a166:	b086      	sub	sp, #24
7000a168:	af02      	add	r7, sp, #8
7000a16a:	60f8      	str	r0, [r7, #12]
7000a16c:	60b9      	str	r1, [r7, #8]
7000a16e:	4613      	mov	r3, r2
7000a170:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
7000a172:	79fa      	ldrb	r2, [r7, #7]
7000a174:	4944      	ldr	r1, [pc, #272]	@ (7000a288 <etharp_output_to_arp_index+0x124>)
7000a176:	4613      	mov	r3, r2
7000a178:	005b      	lsls	r3, r3, #1
7000a17a:	4413      	add	r3, r2
7000a17c:	00db      	lsls	r3, r3, #3
7000a17e:	440b      	add	r3, r1
7000a180:	3314      	adds	r3, #20
7000a182:	781b      	ldrb	r3, [r3, #0]
7000a184:	2b01      	cmp	r3, #1
7000a186:	d806      	bhi.n	7000a196 <etharp_output_to_arp_index+0x32>
7000a188:	4b40      	ldr	r3, [pc, #256]	@ (7000a28c <etharp_output_to_arp_index+0x128>)
7000a18a:	f240 22ee 	movw	r2, #750	@ 0x2ee
7000a18e:	4940      	ldr	r1, [pc, #256]	@ (7000a290 <etharp_output_to_arp_index+0x12c>)
7000a190:	4840      	ldr	r0, [pc, #256]	@ (7000a294 <etharp_output_to_arp_index+0x130>)
7000a192:	f009 fdbd 	bl	70013d10 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
7000a196:	79fa      	ldrb	r2, [r7, #7]
7000a198:	493b      	ldr	r1, [pc, #236]	@ (7000a288 <etharp_output_to_arp_index+0x124>)
7000a19a:	4613      	mov	r3, r2
7000a19c:	005b      	lsls	r3, r3, #1
7000a19e:	4413      	add	r3, r2
7000a1a0:	00db      	lsls	r3, r3, #3
7000a1a2:	440b      	add	r3, r1
7000a1a4:	3314      	adds	r3, #20
7000a1a6:	781b      	ldrb	r3, [r3, #0]
7000a1a8:	2b02      	cmp	r3, #2
7000a1aa:	d153      	bne.n	7000a254 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
7000a1ac:	79fa      	ldrb	r2, [r7, #7]
7000a1ae:	4936      	ldr	r1, [pc, #216]	@ (7000a288 <etharp_output_to_arp_index+0x124>)
7000a1b0:	4613      	mov	r3, r2
7000a1b2:	005b      	lsls	r3, r3, #1
7000a1b4:	4413      	add	r3, r2
7000a1b6:	00db      	lsls	r3, r3, #3
7000a1b8:	440b      	add	r3, r1
7000a1ba:	3312      	adds	r3, #18
7000a1bc:	881b      	ldrh	r3, [r3, #0]
7000a1be:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
7000a1c2:	d919      	bls.n	7000a1f8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
7000a1c4:	79fa      	ldrb	r2, [r7, #7]
7000a1c6:	4613      	mov	r3, r2
7000a1c8:	005b      	lsls	r3, r3, #1
7000a1ca:	4413      	add	r3, r2
7000a1cc:	00db      	lsls	r3, r3, #3
7000a1ce:	4a2e      	ldr	r2, [pc, #184]	@ (7000a288 <etharp_output_to_arp_index+0x124>)
7000a1d0:	4413      	add	r3, r2
7000a1d2:	3304      	adds	r3, #4
7000a1d4:	4619      	mov	r1, r3
7000a1d6:	68f8      	ldr	r0, [r7, #12]
7000a1d8:	f000 fb68 	bl	7000a8ac <etharp_request>
7000a1dc:	4603      	mov	r3, r0
7000a1de:	2b00      	cmp	r3, #0
7000a1e0:	d138      	bne.n	7000a254 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
7000a1e2:	79fa      	ldrb	r2, [r7, #7]
7000a1e4:	4928      	ldr	r1, [pc, #160]	@ (7000a288 <etharp_output_to_arp_index+0x124>)
7000a1e6:	4613      	mov	r3, r2
7000a1e8:	005b      	lsls	r3, r3, #1
7000a1ea:	4413      	add	r3, r2
7000a1ec:	00db      	lsls	r3, r3, #3
7000a1ee:	440b      	add	r3, r1
7000a1f0:	3314      	adds	r3, #20
7000a1f2:	2203      	movs	r2, #3
7000a1f4:	701a      	strb	r2, [r3, #0]
7000a1f6:	e02d      	b.n	7000a254 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
7000a1f8:	79fa      	ldrb	r2, [r7, #7]
7000a1fa:	4923      	ldr	r1, [pc, #140]	@ (7000a288 <etharp_output_to_arp_index+0x124>)
7000a1fc:	4613      	mov	r3, r2
7000a1fe:	005b      	lsls	r3, r3, #1
7000a200:	4413      	add	r3, r2
7000a202:	00db      	lsls	r3, r3, #3
7000a204:	440b      	add	r3, r1
7000a206:	3312      	adds	r3, #18
7000a208:	881b      	ldrh	r3, [r3, #0]
7000a20a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
7000a20e:	d321      	bcc.n	7000a254 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
7000a210:	79fa      	ldrb	r2, [r7, #7]
7000a212:	4613      	mov	r3, r2
7000a214:	005b      	lsls	r3, r3, #1
7000a216:	4413      	add	r3, r2
7000a218:	00db      	lsls	r3, r3, #3
7000a21a:	4a1b      	ldr	r2, [pc, #108]	@ (7000a288 <etharp_output_to_arp_index+0x124>)
7000a21c:	4413      	add	r3, r2
7000a21e:	1d19      	adds	r1, r3, #4
7000a220:	79fa      	ldrb	r2, [r7, #7]
7000a222:	4613      	mov	r3, r2
7000a224:	005b      	lsls	r3, r3, #1
7000a226:	4413      	add	r3, r2
7000a228:	00db      	lsls	r3, r3, #3
7000a22a:	3308      	adds	r3, #8
7000a22c:	4a16      	ldr	r2, [pc, #88]	@ (7000a288 <etharp_output_to_arp_index+0x124>)
7000a22e:	4413      	add	r3, r2
7000a230:	3304      	adds	r3, #4
7000a232:	461a      	mov	r2, r3
7000a234:	68f8      	ldr	r0, [r7, #12]
7000a236:	f000 fb17 	bl	7000a868 <etharp_request_dst>
7000a23a:	4603      	mov	r3, r0
7000a23c:	2b00      	cmp	r3, #0
7000a23e:	d109      	bne.n	7000a254 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
7000a240:	79fa      	ldrb	r2, [r7, #7]
7000a242:	4911      	ldr	r1, [pc, #68]	@ (7000a288 <etharp_output_to_arp_index+0x124>)
7000a244:	4613      	mov	r3, r2
7000a246:	005b      	lsls	r3, r3, #1
7000a248:	4413      	add	r3, r2
7000a24a:	00db      	lsls	r3, r3, #3
7000a24c:	440b      	add	r3, r1
7000a24e:	3314      	adds	r3, #20
7000a250:	2203      	movs	r2, #3
7000a252:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
7000a254:	68fb      	ldr	r3, [r7, #12]
7000a256:	f103 0126 	add.w	r1, r3, #38	@ 0x26
7000a25a:	79fa      	ldrb	r2, [r7, #7]
7000a25c:	4613      	mov	r3, r2
7000a25e:	005b      	lsls	r3, r3, #1
7000a260:	4413      	add	r3, r2
7000a262:	00db      	lsls	r3, r3, #3
7000a264:	3308      	adds	r3, #8
7000a266:	4a08      	ldr	r2, [pc, #32]	@ (7000a288 <etharp_output_to_arp_index+0x124>)
7000a268:	4413      	add	r3, r2
7000a26a:	3304      	adds	r3, #4
7000a26c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
7000a270:	9200      	str	r2, [sp, #0]
7000a272:	460a      	mov	r2, r1
7000a274:	68b9      	ldr	r1, [r7, #8]
7000a276:	68f8      	ldr	r0, [r7, #12]
7000a278:	f000 fbb8 	bl	7000a9ec <ethernet_output>
7000a27c:	4603      	mov	r3, r0
}
7000a27e:	4618      	mov	r0, r3
7000a280:	3710      	adds	r7, #16
7000a282:	46bd      	mov	sp, r7
7000a284:	bd80      	pop	{r7, pc}
7000a286:	bf00      	nop
7000a288:	24005274 	.word	0x24005274
7000a28c:	70014c84 	.word	0x70014c84
7000a290:	70014e20 	.word	0x70014e20
7000a294:	70014d28 	.word	0x70014d28

7000a298 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
7000a298:	b580      	push	{r7, lr}
7000a29a:	b08a      	sub	sp, #40	@ 0x28
7000a29c:	af02      	add	r7, sp, #8
7000a29e:	60f8      	str	r0, [r7, #12]
7000a2a0:	60b9      	str	r1, [r7, #8]
7000a2a2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
7000a2a4:	687b      	ldr	r3, [r7, #4]
7000a2a6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
7000a2a8:	68fb      	ldr	r3, [r7, #12]
7000a2aa:	2b00      	cmp	r3, #0
7000a2ac:	d106      	bne.n	7000a2bc <etharp_output+0x24>
7000a2ae:	4b73      	ldr	r3, [pc, #460]	@ (7000a47c <etharp_output+0x1e4>)
7000a2b0:	f240 321e 	movw	r2, #798	@ 0x31e
7000a2b4:	4972      	ldr	r1, [pc, #456]	@ (7000a480 <etharp_output+0x1e8>)
7000a2b6:	4873      	ldr	r0, [pc, #460]	@ (7000a484 <etharp_output+0x1ec>)
7000a2b8:	f009 fd2a 	bl	70013d10 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
7000a2bc:	68bb      	ldr	r3, [r7, #8]
7000a2be:	2b00      	cmp	r3, #0
7000a2c0:	d106      	bne.n	7000a2d0 <etharp_output+0x38>
7000a2c2:	4b6e      	ldr	r3, [pc, #440]	@ (7000a47c <etharp_output+0x1e4>)
7000a2c4:	f240 321f 	movw	r2, #799	@ 0x31f
7000a2c8:	496f      	ldr	r1, [pc, #444]	@ (7000a488 <etharp_output+0x1f0>)
7000a2ca:	486e      	ldr	r0, [pc, #440]	@ (7000a484 <etharp_output+0x1ec>)
7000a2cc:	f009 fd20 	bl	70013d10 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
7000a2d0:	687b      	ldr	r3, [r7, #4]
7000a2d2:	2b00      	cmp	r3, #0
7000a2d4:	d106      	bne.n	7000a2e4 <etharp_output+0x4c>
7000a2d6:	4b69      	ldr	r3, [pc, #420]	@ (7000a47c <etharp_output+0x1e4>)
7000a2d8:	f44f 7248 	mov.w	r2, #800	@ 0x320
7000a2dc:	496b      	ldr	r1, [pc, #428]	@ (7000a48c <etharp_output+0x1f4>)
7000a2de:	4869      	ldr	r0, [pc, #420]	@ (7000a484 <etharp_output+0x1ec>)
7000a2e0:	f009 fd16 	bl	70013d10 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
7000a2e4:	687b      	ldr	r3, [r7, #4]
7000a2e6:	681b      	ldr	r3, [r3, #0]
7000a2e8:	68f9      	ldr	r1, [r7, #12]
7000a2ea:	4618      	mov	r0, r3
7000a2ec:	f001 f8f4 	bl	7000b4d8 <ip4_addr_isbroadcast_u32>
7000a2f0:	4603      	mov	r3, r0
7000a2f2:	2b00      	cmp	r3, #0
7000a2f4:	d002      	beq.n	7000a2fc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
7000a2f6:	4b66      	ldr	r3, [pc, #408]	@ (7000a490 <etharp_output+0x1f8>)
7000a2f8:	61fb      	str	r3, [r7, #28]
7000a2fa:	e0af      	b.n	7000a45c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
7000a2fc:	687b      	ldr	r3, [r7, #4]
7000a2fe:	681b      	ldr	r3, [r3, #0]
7000a300:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
7000a304:	2be0      	cmp	r3, #224	@ 0xe0
7000a306:	d118      	bne.n	7000a33a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
7000a308:	2301      	movs	r3, #1
7000a30a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
7000a30c:	2300      	movs	r3, #0
7000a30e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
7000a310:	235e      	movs	r3, #94	@ 0x5e
7000a312:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
7000a314:	687b      	ldr	r3, [r7, #4]
7000a316:	3301      	adds	r3, #1
7000a318:	781b      	ldrb	r3, [r3, #0]
7000a31a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
7000a31e:	b2db      	uxtb	r3, r3
7000a320:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
7000a322:	687b      	ldr	r3, [r7, #4]
7000a324:	3302      	adds	r3, #2
7000a326:	781b      	ldrb	r3, [r3, #0]
7000a328:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
7000a32a:	687b      	ldr	r3, [r7, #4]
7000a32c:	3303      	adds	r3, #3
7000a32e:	781b      	ldrb	r3, [r3, #0]
7000a330:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
7000a332:	f107 0310 	add.w	r3, r7, #16
7000a336:	61fb      	str	r3, [r7, #28]
7000a338:	e090      	b.n	7000a45c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
7000a33a:	687b      	ldr	r3, [r7, #4]
7000a33c:	681a      	ldr	r2, [r3, #0]
7000a33e:	68fb      	ldr	r3, [r7, #12]
7000a340:	3304      	adds	r3, #4
7000a342:	681b      	ldr	r3, [r3, #0]
7000a344:	405a      	eors	r2, r3
7000a346:	68fb      	ldr	r3, [r7, #12]
7000a348:	3308      	adds	r3, #8
7000a34a:	681b      	ldr	r3, [r3, #0]
7000a34c:	4013      	ands	r3, r2
7000a34e:	2b00      	cmp	r3, #0
7000a350:	d012      	beq.n	7000a378 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
7000a352:	687b      	ldr	r3, [r7, #4]
7000a354:	681b      	ldr	r3, [r3, #0]
7000a356:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
7000a358:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
7000a35c:	4293      	cmp	r3, r2
7000a35e:	d00b      	beq.n	7000a378 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
7000a360:	68fb      	ldr	r3, [r7, #12]
7000a362:	330c      	adds	r3, #12
7000a364:	681b      	ldr	r3, [r3, #0]
7000a366:	2b00      	cmp	r3, #0
7000a368:	d003      	beq.n	7000a372 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
7000a36a:	68fb      	ldr	r3, [r7, #12]
7000a36c:	330c      	adds	r3, #12
7000a36e:	61bb      	str	r3, [r7, #24]
7000a370:	e002      	b.n	7000a378 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
7000a372:	f06f 0303 	mvn.w	r3, #3
7000a376:	e07d      	b.n	7000a474 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
7000a378:	4b46      	ldr	r3, [pc, #280]	@ (7000a494 <etharp_output+0x1fc>)
7000a37a:	781b      	ldrb	r3, [r3, #0]
7000a37c:	4619      	mov	r1, r3
7000a37e:	4a46      	ldr	r2, [pc, #280]	@ (7000a498 <etharp_output+0x200>)
7000a380:	460b      	mov	r3, r1
7000a382:	005b      	lsls	r3, r3, #1
7000a384:	440b      	add	r3, r1
7000a386:	00db      	lsls	r3, r3, #3
7000a388:	4413      	add	r3, r2
7000a38a:	3314      	adds	r3, #20
7000a38c:	781b      	ldrb	r3, [r3, #0]
7000a38e:	2b01      	cmp	r3, #1
7000a390:	d925      	bls.n	7000a3de <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
7000a392:	4b40      	ldr	r3, [pc, #256]	@ (7000a494 <etharp_output+0x1fc>)
7000a394:	781b      	ldrb	r3, [r3, #0]
7000a396:	4619      	mov	r1, r3
7000a398:	4a3f      	ldr	r2, [pc, #252]	@ (7000a498 <etharp_output+0x200>)
7000a39a:	460b      	mov	r3, r1
7000a39c:	005b      	lsls	r3, r3, #1
7000a39e:	440b      	add	r3, r1
7000a3a0:	00db      	lsls	r3, r3, #3
7000a3a2:	4413      	add	r3, r2
7000a3a4:	3308      	adds	r3, #8
7000a3a6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
7000a3a8:	68fa      	ldr	r2, [r7, #12]
7000a3aa:	429a      	cmp	r2, r3
7000a3ac:	d117      	bne.n	7000a3de <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
7000a3ae:	69bb      	ldr	r3, [r7, #24]
7000a3b0:	681a      	ldr	r2, [r3, #0]
7000a3b2:	4b38      	ldr	r3, [pc, #224]	@ (7000a494 <etharp_output+0x1fc>)
7000a3b4:	781b      	ldrb	r3, [r3, #0]
7000a3b6:	4618      	mov	r0, r3
7000a3b8:	4937      	ldr	r1, [pc, #220]	@ (7000a498 <etharp_output+0x200>)
7000a3ba:	4603      	mov	r3, r0
7000a3bc:	005b      	lsls	r3, r3, #1
7000a3be:	4403      	add	r3, r0
7000a3c0:	00db      	lsls	r3, r3, #3
7000a3c2:	440b      	add	r3, r1
7000a3c4:	3304      	adds	r3, #4
7000a3c6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
7000a3c8:	429a      	cmp	r2, r3
7000a3ca:	d108      	bne.n	7000a3de <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
7000a3cc:	4b31      	ldr	r3, [pc, #196]	@ (7000a494 <etharp_output+0x1fc>)
7000a3ce:	781b      	ldrb	r3, [r3, #0]
7000a3d0:	461a      	mov	r2, r3
7000a3d2:	68b9      	ldr	r1, [r7, #8]
7000a3d4:	68f8      	ldr	r0, [r7, #12]
7000a3d6:	f7ff fec5 	bl	7000a164 <etharp_output_to_arp_index>
7000a3da:	4603      	mov	r3, r0
7000a3dc:	e04a      	b.n	7000a474 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
7000a3de:	2300      	movs	r3, #0
7000a3e0:	75fb      	strb	r3, [r7, #23]
7000a3e2:	e031      	b.n	7000a448 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
7000a3e4:	7dfa      	ldrb	r2, [r7, #23]
7000a3e6:	492c      	ldr	r1, [pc, #176]	@ (7000a498 <etharp_output+0x200>)
7000a3e8:	4613      	mov	r3, r2
7000a3ea:	005b      	lsls	r3, r3, #1
7000a3ec:	4413      	add	r3, r2
7000a3ee:	00db      	lsls	r3, r3, #3
7000a3f0:	440b      	add	r3, r1
7000a3f2:	3314      	adds	r3, #20
7000a3f4:	781b      	ldrb	r3, [r3, #0]
7000a3f6:	2b01      	cmp	r3, #1
7000a3f8:	d923      	bls.n	7000a442 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
7000a3fa:	7dfa      	ldrb	r2, [r7, #23]
7000a3fc:	4926      	ldr	r1, [pc, #152]	@ (7000a498 <etharp_output+0x200>)
7000a3fe:	4613      	mov	r3, r2
7000a400:	005b      	lsls	r3, r3, #1
7000a402:	4413      	add	r3, r2
7000a404:	00db      	lsls	r3, r3, #3
7000a406:	440b      	add	r3, r1
7000a408:	3308      	adds	r3, #8
7000a40a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
7000a40c:	68fa      	ldr	r2, [r7, #12]
7000a40e:	429a      	cmp	r2, r3
7000a410:	d117      	bne.n	7000a442 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
7000a412:	69bb      	ldr	r3, [r7, #24]
7000a414:	6819      	ldr	r1, [r3, #0]
7000a416:	7dfa      	ldrb	r2, [r7, #23]
7000a418:	481f      	ldr	r0, [pc, #124]	@ (7000a498 <etharp_output+0x200>)
7000a41a:	4613      	mov	r3, r2
7000a41c:	005b      	lsls	r3, r3, #1
7000a41e:	4413      	add	r3, r2
7000a420:	00db      	lsls	r3, r3, #3
7000a422:	4403      	add	r3, r0
7000a424:	3304      	adds	r3, #4
7000a426:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
7000a428:	4299      	cmp	r1, r3
7000a42a:	d10a      	bne.n	7000a442 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
7000a42c:	4a19      	ldr	r2, [pc, #100]	@ (7000a494 <etharp_output+0x1fc>)
7000a42e:	7dfb      	ldrb	r3, [r7, #23]
7000a430:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
7000a432:	7dfb      	ldrb	r3, [r7, #23]
7000a434:	461a      	mov	r2, r3
7000a436:	68b9      	ldr	r1, [r7, #8]
7000a438:	68f8      	ldr	r0, [r7, #12]
7000a43a:	f7ff fe93 	bl	7000a164 <etharp_output_to_arp_index>
7000a43e:	4603      	mov	r3, r0
7000a440:	e018      	b.n	7000a474 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
7000a442:	7dfb      	ldrb	r3, [r7, #23]
7000a444:	3301      	adds	r3, #1
7000a446:	75fb      	strb	r3, [r7, #23]
7000a448:	7dfb      	ldrb	r3, [r7, #23]
7000a44a:	2b09      	cmp	r3, #9
7000a44c:	d9ca      	bls.n	7000a3e4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
7000a44e:	68ba      	ldr	r2, [r7, #8]
7000a450:	69b9      	ldr	r1, [r7, #24]
7000a452:	68f8      	ldr	r0, [r7, #12]
7000a454:	f000 f822 	bl	7000a49c <etharp_query>
7000a458:	4603      	mov	r3, r0
7000a45a:	e00b      	b.n	7000a474 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
7000a45c:	68fb      	ldr	r3, [r7, #12]
7000a45e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
7000a462:	f44f 6300 	mov.w	r3, #2048	@ 0x800
7000a466:	9300      	str	r3, [sp, #0]
7000a468:	69fb      	ldr	r3, [r7, #28]
7000a46a:	68b9      	ldr	r1, [r7, #8]
7000a46c:	68f8      	ldr	r0, [r7, #12]
7000a46e:	f000 fabd 	bl	7000a9ec <ethernet_output>
7000a472:	4603      	mov	r3, r0
}
7000a474:	4618      	mov	r0, r3
7000a476:	3720      	adds	r7, #32
7000a478:	46bd      	mov	sp, r7
7000a47a:	bd80      	pop	{r7, pc}
7000a47c:	70014c84 	.word	0x70014c84
7000a480:	70014e00 	.word	0x70014e00
7000a484:	70014d28 	.word	0x70014d28
7000a488:	70014e50 	.word	0x70014e50
7000a48c:	70014df0 	.word	0x70014df0
7000a490:	7001724c 	.word	0x7001724c
7000a494:	24005364 	.word	0x24005364
7000a498:	24005274 	.word	0x24005274

7000a49c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
7000a49c:	b580      	push	{r7, lr}
7000a49e:	b08c      	sub	sp, #48	@ 0x30
7000a4a0:	af02      	add	r7, sp, #8
7000a4a2:	60f8      	str	r0, [r7, #12]
7000a4a4:	60b9      	str	r1, [r7, #8]
7000a4a6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
7000a4a8:	68fb      	ldr	r3, [r7, #12]
7000a4aa:	3326      	adds	r3, #38	@ 0x26
7000a4ac:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
7000a4ae:	23ff      	movs	r3, #255	@ 0xff
7000a4b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
7000a4b4:	2300      	movs	r3, #0
7000a4b6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
7000a4b8:	68bb      	ldr	r3, [r7, #8]
7000a4ba:	681b      	ldr	r3, [r3, #0]
7000a4bc:	68f9      	ldr	r1, [r7, #12]
7000a4be:	4618      	mov	r0, r3
7000a4c0:	f001 f80a 	bl	7000b4d8 <ip4_addr_isbroadcast_u32>
7000a4c4:	4603      	mov	r3, r0
7000a4c6:	2b00      	cmp	r3, #0
7000a4c8:	d10c      	bne.n	7000a4e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
7000a4ca:	68bb      	ldr	r3, [r7, #8]
7000a4cc:	681b      	ldr	r3, [r3, #0]
7000a4ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
7000a4d2:	2be0      	cmp	r3, #224	@ 0xe0
7000a4d4:	d006      	beq.n	7000a4e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
7000a4d6:	68bb      	ldr	r3, [r7, #8]
7000a4d8:	2b00      	cmp	r3, #0
7000a4da:	d003      	beq.n	7000a4e4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
7000a4dc:	68bb      	ldr	r3, [r7, #8]
7000a4de:	681b      	ldr	r3, [r3, #0]
7000a4e0:	2b00      	cmp	r3, #0
7000a4e2:	d102      	bne.n	7000a4ea <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
7000a4e4:	f06f 030f 	mvn.w	r3, #15
7000a4e8:	e11d      	b.n	7000a726 <etharp_query+0x28a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
7000a4ea:	68fa      	ldr	r2, [r7, #12]
7000a4ec:	2101      	movs	r1, #1
7000a4ee:	68b8      	ldr	r0, [r7, #8]
7000a4f0:	f7ff fb6e 	bl	70009bd0 <etharp_find_entry>
7000a4f4:	4603      	mov	r3, r0
7000a4f6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
7000a4f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
7000a4fc:	2b00      	cmp	r3, #0
7000a4fe:	da02      	bge.n	7000a506 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
7000a500:	8a7b      	ldrh	r3, [r7, #18]
7000a502:	b25b      	sxtb	r3, r3
7000a504:	e10f      	b.n	7000a726 <etharp_query+0x28a>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
7000a506:	8a7b      	ldrh	r3, [r7, #18]
7000a508:	2b7e      	cmp	r3, #126	@ 0x7e
7000a50a:	d906      	bls.n	7000a51a <etharp_query+0x7e>
7000a50c:	4b88      	ldr	r3, [pc, #544]	@ (7000a730 <etharp_query+0x294>)
7000a50e:	f240 32c1 	movw	r2, #961	@ 0x3c1
7000a512:	4988      	ldr	r1, [pc, #544]	@ (7000a734 <etharp_query+0x298>)
7000a514:	4888      	ldr	r0, [pc, #544]	@ (7000a738 <etharp_query+0x29c>)
7000a516:	f009 fbfb 	bl	70013d10 <iprintf>
  i = (netif_addr_idx_t)i_err;
7000a51a:	8a7b      	ldrh	r3, [r7, #18]
7000a51c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
7000a51e:	7c7a      	ldrb	r2, [r7, #17]
7000a520:	4986      	ldr	r1, [pc, #536]	@ (7000a73c <etharp_query+0x2a0>)
7000a522:	4613      	mov	r3, r2
7000a524:	005b      	lsls	r3, r3, #1
7000a526:	4413      	add	r3, r2
7000a528:	00db      	lsls	r3, r3, #3
7000a52a:	440b      	add	r3, r1
7000a52c:	3314      	adds	r3, #20
7000a52e:	781b      	ldrb	r3, [r3, #0]
7000a530:	2b00      	cmp	r3, #0
7000a532:	d115      	bne.n	7000a560 <etharp_query+0xc4>
    is_new_entry = 1;
7000a534:	2301      	movs	r3, #1
7000a536:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
7000a538:	7c7a      	ldrb	r2, [r7, #17]
7000a53a:	4980      	ldr	r1, [pc, #512]	@ (7000a73c <etharp_query+0x2a0>)
7000a53c:	4613      	mov	r3, r2
7000a53e:	005b      	lsls	r3, r3, #1
7000a540:	4413      	add	r3, r2
7000a542:	00db      	lsls	r3, r3, #3
7000a544:	440b      	add	r3, r1
7000a546:	3314      	adds	r3, #20
7000a548:	2201      	movs	r2, #1
7000a54a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
7000a54c:	7c7a      	ldrb	r2, [r7, #17]
7000a54e:	497b      	ldr	r1, [pc, #492]	@ (7000a73c <etharp_query+0x2a0>)
7000a550:	4613      	mov	r3, r2
7000a552:	005b      	lsls	r3, r3, #1
7000a554:	4413      	add	r3, r2
7000a556:	00db      	lsls	r3, r3, #3
7000a558:	440b      	add	r3, r1
7000a55a:	3308      	adds	r3, #8
7000a55c:	68fa      	ldr	r2, [r7, #12]
7000a55e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
7000a560:	7c7a      	ldrb	r2, [r7, #17]
7000a562:	4976      	ldr	r1, [pc, #472]	@ (7000a73c <etharp_query+0x2a0>)
7000a564:	4613      	mov	r3, r2
7000a566:	005b      	lsls	r3, r3, #1
7000a568:	4413      	add	r3, r2
7000a56a:	00db      	lsls	r3, r3, #3
7000a56c:	440b      	add	r3, r1
7000a56e:	3314      	adds	r3, #20
7000a570:	781b      	ldrb	r3, [r3, #0]
7000a572:	2b01      	cmp	r3, #1
7000a574:	d011      	beq.n	7000a59a <etharp_query+0xfe>
7000a576:	7c7a      	ldrb	r2, [r7, #17]
7000a578:	4970      	ldr	r1, [pc, #448]	@ (7000a73c <etharp_query+0x2a0>)
7000a57a:	4613      	mov	r3, r2
7000a57c:	005b      	lsls	r3, r3, #1
7000a57e:	4413      	add	r3, r2
7000a580:	00db      	lsls	r3, r3, #3
7000a582:	440b      	add	r3, r1
7000a584:	3314      	adds	r3, #20
7000a586:	781b      	ldrb	r3, [r3, #0]
7000a588:	2b01      	cmp	r3, #1
7000a58a:	d806      	bhi.n	7000a59a <etharp_query+0xfe>
7000a58c:	4b68      	ldr	r3, [pc, #416]	@ (7000a730 <etharp_query+0x294>)
7000a58e:	f240 32cd 	movw	r2, #973	@ 0x3cd
7000a592:	496b      	ldr	r1, [pc, #428]	@ (7000a740 <etharp_query+0x2a4>)
7000a594:	4868      	ldr	r0, [pc, #416]	@ (7000a738 <etharp_query+0x29c>)
7000a596:	f009 fbbb 	bl	70013d10 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
7000a59a:	6a3b      	ldr	r3, [r7, #32]
7000a59c:	2b00      	cmp	r3, #0
7000a59e:	d102      	bne.n	7000a5a6 <etharp_query+0x10a>
7000a5a0:	687b      	ldr	r3, [r7, #4]
7000a5a2:	2b00      	cmp	r3, #0
7000a5a4:	d128      	bne.n	7000a5f8 <etharp_query+0x15c>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
7000a5a6:	68b9      	ldr	r1, [r7, #8]
7000a5a8:	68f8      	ldr	r0, [r7, #12]
7000a5aa:	f000 f97f 	bl	7000a8ac <etharp_request>
7000a5ae:	4603      	mov	r3, r0
7000a5b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (result != ERR_OK) {
7000a5b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
7000a5b8:	2b00      	cmp	r3, #0
7000a5ba:	d117      	bne.n	7000a5ec <etharp_query+0x150>
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    } else {
      /* ARP request successfully sent */
      if ((arp_table[i].state == ETHARP_STATE_PENDING) && !is_new_entry) {
7000a5bc:	7c7a      	ldrb	r2, [r7, #17]
7000a5be:	495f      	ldr	r1, [pc, #380]	@ (7000a73c <etharp_query+0x2a0>)
7000a5c0:	4613      	mov	r3, r2
7000a5c2:	005b      	lsls	r3, r3, #1
7000a5c4:	4413      	add	r3, r2
7000a5c6:	00db      	lsls	r3, r3, #3
7000a5c8:	440b      	add	r3, r1
7000a5ca:	3314      	adds	r3, #20
7000a5cc:	781b      	ldrb	r3, [r3, #0]
7000a5ce:	2b01      	cmp	r3, #1
7000a5d0:	d10c      	bne.n	7000a5ec <etharp_query+0x150>
7000a5d2:	6a3b      	ldr	r3, [r7, #32]
7000a5d4:	2b00      	cmp	r3, #0
7000a5d6:	d109      	bne.n	7000a5ec <etharp_query+0x150>
        /* A new ARP request has been sent for a pending entry. Reset the ctime to
           not let it expire too fast. */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: reset ctime for entry %"S16_F"\n", (s16_t)i));
        arp_table[i].ctime = 0;
7000a5d8:	7c7a      	ldrb	r2, [r7, #17]
7000a5da:	4958      	ldr	r1, [pc, #352]	@ (7000a73c <etharp_query+0x2a0>)
7000a5dc:	4613      	mov	r3, r2
7000a5de:	005b      	lsls	r3, r3, #1
7000a5e0:	4413      	add	r3, r2
7000a5e2:	00db      	lsls	r3, r3, #3
7000a5e4:	440b      	add	r3, r1
7000a5e6:	3312      	adds	r3, #18
7000a5e8:	2200      	movs	r2, #0
7000a5ea:	801a      	strh	r2, [r3, #0]
      }
    }
    if (q == NULL) {
7000a5ec:	687b      	ldr	r3, [r7, #4]
7000a5ee:	2b00      	cmp	r3, #0
7000a5f0:	d102      	bne.n	7000a5f8 <etharp_query+0x15c>
      return result;
7000a5f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
7000a5f6:	e096      	b.n	7000a726 <etharp_query+0x28a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
7000a5f8:	687b      	ldr	r3, [r7, #4]
7000a5fa:	2b00      	cmp	r3, #0
7000a5fc:	d106      	bne.n	7000a60c <etharp_query+0x170>
7000a5fe:	4b4c      	ldr	r3, [pc, #304]	@ (7000a730 <etharp_query+0x294>)
7000a600:	f240 32e9 	movw	r2, #1001	@ 0x3e9
7000a604:	494f      	ldr	r1, [pc, #316]	@ (7000a744 <etharp_query+0x2a8>)
7000a606:	484c      	ldr	r0, [pc, #304]	@ (7000a738 <etharp_query+0x29c>)
7000a608:	f009 fb82 	bl	70013d10 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
7000a60c:	7c7a      	ldrb	r2, [r7, #17]
7000a60e:	494b      	ldr	r1, [pc, #300]	@ (7000a73c <etharp_query+0x2a0>)
7000a610:	4613      	mov	r3, r2
7000a612:	005b      	lsls	r3, r3, #1
7000a614:	4413      	add	r3, r2
7000a616:	00db      	lsls	r3, r3, #3
7000a618:	440b      	add	r3, r1
7000a61a:	3314      	adds	r3, #20
7000a61c:	781b      	ldrb	r3, [r3, #0]
7000a61e:	2b01      	cmp	r3, #1
7000a620:	d917      	bls.n	7000a652 <etharp_query+0x1b6>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
7000a622:	4a49      	ldr	r2, [pc, #292]	@ (7000a748 <etharp_query+0x2ac>)
7000a624:	7c7b      	ldrb	r3, [r7, #17]
7000a626:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
7000a628:	7c7a      	ldrb	r2, [r7, #17]
7000a62a:	4613      	mov	r3, r2
7000a62c:	005b      	lsls	r3, r3, #1
7000a62e:	4413      	add	r3, r2
7000a630:	00db      	lsls	r3, r3, #3
7000a632:	3308      	adds	r3, #8
7000a634:	4a41      	ldr	r2, [pc, #260]	@ (7000a73c <etharp_query+0x2a0>)
7000a636:	4413      	add	r3, r2
7000a638:	3304      	adds	r3, #4
7000a63a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
7000a63e:	9200      	str	r2, [sp, #0]
7000a640:	697a      	ldr	r2, [r7, #20]
7000a642:	6879      	ldr	r1, [r7, #4]
7000a644:	68f8      	ldr	r0, [r7, #12]
7000a646:	f000 f9d1 	bl	7000a9ec <ethernet_output>
7000a64a:	4603      	mov	r3, r0
7000a64c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
7000a650:	e067      	b.n	7000a722 <etharp_query+0x286>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
7000a652:	7c7a      	ldrb	r2, [r7, #17]
7000a654:	4939      	ldr	r1, [pc, #228]	@ (7000a73c <etharp_query+0x2a0>)
7000a656:	4613      	mov	r3, r2
7000a658:	005b      	lsls	r3, r3, #1
7000a65a:	4413      	add	r3, r2
7000a65c:	00db      	lsls	r3, r3, #3
7000a65e:	440b      	add	r3, r1
7000a660:	3314      	adds	r3, #20
7000a662:	781b      	ldrb	r3, [r3, #0]
7000a664:	2b01      	cmp	r3, #1
7000a666:	d15c      	bne.n	7000a722 <etharp_query+0x286>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
7000a668:	2300      	movs	r3, #0
7000a66a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
7000a66c:	687b      	ldr	r3, [r7, #4]
7000a66e:	61fb      	str	r3, [r7, #28]
    while (p) {
7000a670:	e01c      	b.n	7000a6ac <etharp_query+0x210>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
7000a672:	69fb      	ldr	r3, [r7, #28]
7000a674:	895a      	ldrh	r2, [r3, #10]
7000a676:	69fb      	ldr	r3, [r7, #28]
7000a678:	891b      	ldrh	r3, [r3, #8]
7000a67a:	429a      	cmp	r2, r3
7000a67c:	d10a      	bne.n	7000a694 <etharp_query+0x1f8>
7000a67e:	69fb      	ldr	r3, [r7, #28]
7000a680:	681b      	ldr	r3, [r3, #0]
7000a682:	2b00      	cmp	r3, #0
7000a684:	d006      	beq.n	7000a694 <etharp_query+0x1f8>
7000a686:	4b2a      	ldr	r3, [pc, #168]	@ (7000a730 <etharp_query+0x294>)
7000a688:	f240 32f9 	movw	r2, #1017	@ 0x3f9
7000a68c:	492f      	ldr	r1, [pc, #188]	@ (7000a74c <etharp_query+0x2b0>)
7000a68e:	482a      	ldr	r0, [pc, #168]	@ (7000a738 <etharp_query+0x29c>)
7000a690:	f009 fb3e 	bl	70013d10 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
7000a694:	69fb      	ldr	r3, [r7, #28]
7000a696:	7b1b      	ldrb	r3, [r3, #12]
7000a698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
7000a69c:	2b00      	cmp	r3, #0
7000a69e:	d002      	beq.n	7000a6a6 <etharp_query+0x20a>
        copy_needed = 1;
7000a6a0:	2301      	movs	r3, #1
7000a6a2:	61bb      	str	r3, [r7, #24]
        break;
7000a6a4:	e005      	b.n	7000a6b2 <etharp_query+0x216>
      }
      p = p->next;
7000a6a6:	69fb      	ldr	r3, [r7, #28]
7000a6a8:	681b      	ldr	r3, [r3, #0]
7000a6aa:	61fb      	str	r3, [r7, #28]
    while (p) {
7000a6ac:	69fb      	ldr	r3, [r7, #28]
7000a6ae:	2b00      	cmp	r3, #0
7000a6b0:	d1df      	bne.n	7000a672 <etharp_query+0x1d6>
    }
    if (copy_needed) {
7000a6b2:	69bb      	ldr	r3, [r7, #24]
7000a6b4:	2b00      	cmp	r3, #0
7000a6b6:	d007      	beq.n	7000a6c8 <etharp_query+0x22c>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
7000a6b8:	687a      	ldr	r2, [r7, #4]
7000a6ba:	f44f 7120 	mov.w	r1, #640	@ 0x280
7000a6be:	200e      	movs	r0, #14
7000a6c0:	f003 fb1e 	bl	7000dd00 <pbuf_clone>
7000a6c4:	61f8      	str	r0, [r7, #28]
7000a6c6:	e004      	b.n	7000a6d2 <etharp_query+0x236>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
7000a6c8:	687b      	ldr	r3, [r7, #4]
7000a6ca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
7000a6cc:	69f8      	ldr	r0, [r7, #28]
7000a6ce:	f003 f959 	bl	7000d984 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
7000a6d2:	69fb      	ldr	r3, [r7, #28]
7000a6d4:	2b00      	cmp	r3, #0
7000a6d6:	d021      	beq.n	7000a71c <etharp_query+0x280>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
7000a6d8:	7c7a      	ldrb	r2, [r7, #17]
7000a6da:	4918      	ldr	r1, [pc, #96]	@ (7000a73c <etharp_query+0x2a0>)
7000a6dc:	4613      	mov	r3, r2
7000a6de:	005b      	lsls	r3, r3, #1
7000a6e0:	4413      	add	r3, r2
7000a6e2:	00db      	lsls	r3, r3, #3
7000a6e4:	440b      	add	r3, r1
7000a6e6:	681b      	ldr	r3, [r3, #0]
7000a6e8:	2b00      	cmp	r3, #0
7000a6ea:	d00a      	beq.n	7000a702 <etharp_query+0x266>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
7000a6ec:	7c7a      	ldrb	r2, [r7, #17]
7000a6ee:	4913      	ldr	r1, [pc, #76]	@ (7000a73c <etharp_query+0x2a0>)
7000a6f0:	4613      	mov	r3, r2
7000a6f2:	005b      	lsls	r3, r3, #1
7000a6f4:	4413      	add	r3, r2
7000a6f6:	00db      	lsls	r3, r3, #3
7000a6f8:	440b      	add	r3, r1
7000a6fa:	681b      	ldr	r3, [r3, #0]
7000a6fc:	4618      	mov	r0, r3
7000a6fe:	f003 f89b 	bl	7000d838 <pbuf_free>
      }
      arp_table[i].q = p;
7000a702:	7c7a      	ldrb	r2, [r7, #17]
7000a704:	490d      	ldr	r1, [pc, #52]	@ (7000a73c <etharp_query+0x2a0>)
7000a706:	4613      	mov	r3, r2
7000a708:	005b      	lsls	r3, r3, #1
7000a70a:	4413      	add	r3, r2
7000a70c:	00db      	lsls	r3, r3, #3
7000a70e:	440b      	add	r3, r1
7000a710:	69fa      	ldr	r2, [r7, #28]
7000a712:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
7000a714:	2300      	movs	r3, #0
7000a716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
7000a71a:	e002      	b.n	7000a722 <etharp_query+0x286>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
7000a71c:	23ff      	movs	r3, #255	@ 0xff
7000a71e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
7000a722:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
7000a726:	4618      	mov	r0, r3
7000a728:	3728      	adds	r7, #40	@ 0x28
7000a72a:	46bd      	mov	sp, r7
7000a72c:	bd80      	pop	{r7, pc}
7000a72e:	bf00      	nop
7000a730:	70014c84 	.word	0x70014c84
7000a734:	70014e5c 	.word	0x70014e5c
7000a738:	70014d28 	.word	0x70014d28
7000a73c:	24005274 	.word	0x24005274
7000a740:	70014e6c 	.word	0x70014e6c
7000a744:	70014e50 	.word	0x70014e50
7000a748:	24005364 	.word	0x24005364
7000a74c:	70014e94 	.word	0x70014e94

7000a750 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
7000a750:	b580      	push	{r7, lr}
7000a752:	b08a      	sub	sp, #40	@ 0x28
7000a754:	af02      	add	r7, sp, #8
7000a756:	60f8      	str	r0, [r7, #12]
7000a758:	60b9      	str	r1, [r7, #8]
7000a75a:	607a      	str	r2, [r7, #4]
7000a75c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
7000a75e:	2300      	movs	r3, #0
7000a760:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
7000a762:	68fb      	ldr	r3, [r7, #12]
7000a764:	2b00      	cmp	r3, #0
7000a766:	d106      	bne.n	7000a776 <etharp_raw+0x26>
7000a768:	4b3a      	ldr	r3, [pc, #232]	@ (7000a854 <etharp_raw+0x104>)
7000a76a:	f240 425f 	movw	r2, #1119	@ 0x45f
7000a76e:	493a      	ldr	r1, [pc, #232]	@ (7000a858 <etharp_raw+0x108>)
7000a770:	483a      	ldr	r0, [pc, #232]	@ (7000a85c <etharp_raw+0x10c>)
7000a772:	f009 facd 	bl	70013d10 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
7000a776:	f44f 7220 	mov.w	r2, #640	@ 0x280
7000a77a:	211c      	movs	r1, #28
7000a77c:	200e      	movs	r0, #14
7000a77e:	f002 fd81 	bl	7000d284 <pbuf_alloc>
7000a782:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
7000a784:	69bb      	ldr	r3, [r7, #24]
7000a786:	2b00      	cmp	r3, #0
7000a788:	d102      	bne.n	7000a790 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
7000a78a:	f04f 33ff 	mov.w	r3, #4294967295
7000a78e:	e05d      	b.n	7000a84c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
7000a790:	69bb      	ldr	r3, [r7, #24]
7000a792:	895b      	ldrh	r3, [r3, #10]
7000a794:	2b1b      	cmp	r3, #27
7000a796:	d806      	bhi.n	7000a7a6 <etharp_raw+0x56>
7000a798:	4b2e      	ldr	r3, [pc, #184]	@ (7000a854 <etharp_raw+0x104>)
7000a79a:	f240 426a 	movw	r2, #1130	@ 0x46a
7000a79e:	4930      	ldr	r1, [pc, #192]	@ (7000a860 <etharp_raw+0x110>)
7000a7a0:	482e      	ldr	r0, [pc, #184]	@ (7000a85c <etharp_raw+0x10c>)
7000a7a2:	f009 fab5 	bl	70013d10 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
7000a7a6:	69bb      	ldr	r3, [r7, #24]
7000a7a8:	685b      	ldr	r3, [r3, #4]
7000a7aa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
7000a7ac:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
7000a7ae:	4618      	mov	r0, r3
7000a7b0:	f7ff f906 	bl	700099c0 <lwip_htons>
7000a7b4:	4603      	mov	r3, r0
7000a7b6:	461a      	mov	r2, r3
7000a7b8:	697b      	ldr	r3, [r7, #20]
7000a7ba:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
7000a7bc:	68fb      	ldr	r3, [r7, #12]
7000a7be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
7000a7c2:	2b06      	cmp	r3, #6
7000a7c4:	d006      	beq.n	7000a7d4 <etharp_raw+0x84>
7000a7c6:	4b23      	ldr	r3, [pc, #140]	@ (7000a854 <etharp_raw+0x104>)
7000a7c8:	f240 4271 	movw	r2, #1137	@ 0x471
7000a7cc:	4925      	ldr	r1, [pc, #148]	@ (7000a864 <etharp_raw+0x114>)
7000a7ce:	4823      	ldr	r0, [pc, #140]	@ (7000a85c <etharp_raw+0x10c>)
7000a7d0:	f009 fa9e 	bl	70013d10 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
7000a7d4:	697b      	ldr	r3, [r7, #20]
7000a7d6:	3308      	adds	r3, #8
7000a7d8:	2206      	movs	r2, #6
7000a7da:	6839      	ldr	r1, [r7, #0]
7000a7dc:	4618      	mov	r0, r3
7000a7de:	f009 fbc8 	bl	70013f72 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
7000a7e2:	697b      	ldr	r3, [r7, #20]
7000a7e4:	3312      	adds	r3, #18
7000a7e6:	2206      	movs	r2, #6
7000a7e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
7000a7ea:	4618      	mov	r0, r3
7000a7ec:	f009 fbc1 	bl	70013f72 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
7000a7f0:	697b      	ldr	r3, [r7, #20]
7000a7f2:	330e      	adds	r3, #14
7000a7f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
7000a7f6:	6812      	ldr	r2, [r2, #0]
7000a7f8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
7000a7fa:	697b      	ldr	r3, [r7, #20]
7000a7fc:	3318      	adds	r3, #24
7000a7fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
7000a800:	6812      	ldr	r2, [r2, #0]
7000a802:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
7000a804:	697b      	ldr	r3, [r7, #20]
7000a806:	2200      	movs	r2, #0
7000a808:	701a      	strb	r2, [r3, #0]
7000a80a:	2200      	movs	r2, #0
7000a80c:	f042 0201 	orr.w	r2, r2, #1
7000a810:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
7000a812:	697b      	ldr	r3, [r7, #20]
7000a814:	2200      	movs	r2, #0
7000a816:	f042 0208 	orr.w	r2, r2, #8
7000a81a:	709a      	strb	r2, [r3, #2]
7000a81c:	2200      	movs	r2, #0
7000a81e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
7000a820:	697b      	ldr	r3, [r7, #20]
7000a822:	2206      	movs	r2, #6
7000a824:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
7000a826:	697b      	ldr	r3, [r7, #20]
7000a828:	2204      	movs	r2, #4
7000a82a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
7000a82c:	f640 0306 	movw	r3, #2054	@ 0x806
7000a830:	9300      	str	r3, [sp, #0]
7000a832:	687b      	ldr	r3, [r7, #4]
7000a834:	68ba      	ldr	r2, [r7, #8]
7000a836:	69b9      	ldr	r1, [r7, #24]
7000a838:	68f8      	ldr	r0, [r7, #12]
7000a83a:	f000 f8d7 	bl	7000a9ec <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
7000a83e:	69b8      	ldr	r0, [r7, #24]
7000a840:	f002 fffa 	bl	7000d838 <pbuf_free>
  p = NULL;
7000a844:	2300      	movs	r3, #0
7000a846:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
7000a848:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
7000a84c:	4618      	mov	r0, r3
7000a84e:	3720      	adds	r7, #32
7000a850:	46bd      	mov	sp, r7
7000a852:	bd80      	pop	{r7, pc}
7000a854:	70014c84 	.word	0x70014c84
7000a858:	70014e00 	.word	0x70014e00
7000a85c:	70014d28 	.word	0x70014d28
7000a860:	70014eb0 	.word	0x70014eb0
7000a864:	70014ee4 	.word	0x70014ee4

7000a868 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
7000a868:	b580      	push	{r7, lr}
7000a86a:	b088      	sub	sp, #32
7000a86c:	af04      	add	r7, sp, #16
7000a86e:	60f8      	str	r0, [r7, #12]
7000a870:	60b9      	str	r1, [r7, #8]
7000a872:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
7000a874:	68fb      	ldr	r3, [r7, #12]
7000a876:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
7000a87a:	68fb      	ldr	r3, [r7, #12]
7000a87c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
7000a880:	68fb      	ldr	r3, [r7, #12]
7000a882:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
7000a884:	2201      	movs	r2, #1
7000a886:	9203      	str	r2, [sp, #12]
7000a888:	68ba      	ldr	r2, [r7, #8]
7000a88a:	9202      	str	r2, [sp, #8]
7000a88c:	4a06      	ldr	r2, [pc, #24]	@ (7000a8a8 <etharp_request_dst+0x40>)
7000a88e:	9201      	str	r2, [sp, #4]
7000a890:	9300      	str	r3, [sp, #0]
7000a892:	4603      	mov	r3, r0
7000a894:	687a      	ldr	r2, [r7, #4]
7000a896:	68f8      	ldr	r0, [r7, #12]
7000a898:	f7ff ff5a 	bl	7000a750 <etharp_raw>
7000a89c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
7000a89e:	4618      	mov	r0, r3
7000a8a0:	3710      	adds	r7, #16
7000a8a2:	46bd      	mov	sp, r7
7000a8a4:	bd80      	pop	{r7, pc}
7000a8a6:	bf00      	nop
7000a8a8:	70017254 	.word	0x70017254

7000a8ac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
7000a8ac:	b580      	push	{r7, lr}
7000a8ae:	b082      	sub	sp, #8
7000a8b0:	af00      	add	r7, sp, #0
7000a8b2:	6078      	str	r0, [r7, #4]
7000a8b4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
7000a8b6:	4a05      	ldr	r2, [pc, #20]	@ (7000a8cc <etharp_request+0x20>)
7000a8b8:	6839      	ldr	r1, [r7, #0]
7000a8ba:	6878      	ldr	r0, [r7, #4]
7000a8bc:	f7ff ffd4 	bl	7000a868 <etharp_request_dst>
7000a8c0:	4603      	mov	r3, r0
}
7000a8c2:	4618      	mov	r0, r3
7000a8c4:	3708      	adds	r7, #8
7000a8c6:	46bd      	mov	sp, r7
7000a8c8:	bd80      	pop	{r7, pc}
7000a8ca:	bf00      	nop
7000a8cc:	7001724c 	.word	0x7001724c

7000a8d0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
7000a8d0:	b580      	push	{r7, lr}
7000a8d2:	b086      	sub	sp, #24
7000a8d4:	af00      	add	r7, sp, #0
7000a8d6:	6078      	str	r0, [r7, #4]
7000a8d8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
7000a8da:	230e      	movs	r3, #14
7000a8dc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
7000a8de:	687b      	ldr	r3, [r7, #4]
7000a8e0:	895b      	ldrh	r3, [r3, #10]
7000a8e2:	2b0e      	cmp	r3, #14
7000a8e4:	d96e      	bls.n	7000a9c4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
7000a8e6:	687b      	ldr	r3, [r7, #4]
7000a8e8:	7bdb      	ldrb	r3, [r3, #15]
7000a8ea:	2b00      	cmp	r3, #0
7000a8ec:	d106      	bne.n	7000a8fc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
7000a8ee:	683b      	ldr	r3, [r7, #0]
7000a8f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000a8f4:	3301      	adds	r3, #1
7000a8f6:	b2da      	uxtb	r2, r3
7000a8f8:	687b      	ldr	r3, [r7, #4]
7000a8fa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
7000a8fc:	687b      	ldr	r3, [r7, #4]
7000a8fe:	685b      	ldr	r3, [r3, #4]
7000a900:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
7000a902:	693b      	ldr	r3, [r7, #16]
7000a904:	7b1a      	ldrb	r2, [r3, #12]
7000a906:	7b5b      	ldrb	r3, [r3, #13]
7000a908:	021b      	lsls	r3, r3, #8
7000a90a:	4313      	orrs	r3, r2
7000a90c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
7000a90e:	693b      	ldr	r3, [r7, #16]
7000a910:	781b      	ldrb	r3, [r3, #0]
7000a912:	f003 0301 	and.w	r3, r3, #1
7000a916:	2b00      	cmp	r3, #0
7000a918:	d023      	beq.n	7000a962 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
7000a91a:	693b      	ldr	r3, [r7, #16]
7000a91c:	781b      	ldrb	r3, [r3, #0]
7000a91e:	2b01      	cmp	r3, #1
7000a920:	d10f      	bne.n	7000a942 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
7000a922:	693b      	ldr	r3, [r7, #16]
7000a924:	785b      	ldrb	r3, [r3, #1]
7000a926:	2b00      	cmp	r3, #0
7000a928:	d11b      	bne.n	7000a962 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
7000a92a:	693b      	ldr	r3, [r7, #16]
7000a92c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
7000a92e:	2b5e      	cmp	r3, #94	@ 0x5e
7000a930:	d117      	bne.n	7000a962 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
7000a932:	687b      	ldr	r3, [r7, #4]
7000a934:	7b5b      	ldrb	r3, [r3, #13]
7000a936:	f043 0310 	orr.w	r3, r3, #16
7000a93a:	b2da      	uxtb	r2, r3
7000a93c:	687b      	ldr	r3, [r7, #4]
7000a93e:	735a      	strb	r2, [r3, #13]
7000a940:	e00f      	b.n	7000a962 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
7000a942:	693b      	ldr	r3, [r7, #16]
7000a944:	2206      	movs	r2, #6
7000a946:	4928      	ldr	r1, [pc, #160]	@ (7000a9e8 <ethernet_input+0x118>)
7000a948:	4618      	mov	r0, r3
7000a94a:	f009 fa36 	bl	70013dba <memcmp>
7000a94e:	4603      	mov	r3, r0
7000a950:	2b00      	cmp	r3, #0
7000a952:	d106      	bne.n	7000a962 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
7000a954:	687b      	ldr	r3, [r7, #4]
7000a956:	7b5b      	ldrb	r3, [r3, #13]
7000a958:	f043 0308 	orr.w	r3, r3, #8
7000a95c:	b2da      	uxtb	r2, r3
7000a95e:	687b      	ldr	r3, [r7, #4]
7000a960:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
7000a962:	89fb      	ldrh	r3, [r7, #14]
7000a964:	2b08      	cmp	r3, #8
7000a966:	d003      	beq.n	7000a970 <ethernet_input+0xa0>
7000a968:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
7000a96c:	d014      	beq.n	7000a998 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
7000a96e:	e032      	b.n	7000a9d6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
7000a970:	683b      	ldr	r3, [r7, #0]
7000a972:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000a976:	f003 0308 	and.w	r3, r3, #8
7000a97a:	2b00      	cmp	r3, #0
7000a97c:	d024      	beq.n	7000a9c8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
7000a97e:	8afb      	ldrh	r3, [r7, #22]
7000a980:	4619      	mov	r1, r3
7000a982:	6878      	ldr	r0, [r7, #4]
7000a984:	f002 fedc 	bl	7000d740 <pbuf_remove_header>
7000a988:	4603      	mov	r3, r0
7000a98a:	2b00      	cmp	r3, #0
7000a98c:	d11e      	bne.n	7000a9cc <ethernet_input+0xfc>
        ip4_input(p, netif);
7000a98e:	6839      	ldr	r1, [r7, #0]
7000a990:	6878      	ldr	r0, [r7, #4]
7000a992:	f000 fba5 	bl	7000b0e0 <ip4_input>
      break;
7000a996:	e013      	b.n	7000a9c0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
7000a998:	683b      	ldr	r3, [r7, #0]
7000a99a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000a99e:	f003 0308 	and.w	r3, r3, #8
7000a9a2:	2b00      	cmp	r3, #0
7000a9a4:	d014      	beq.n	7000a9d0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
7000a9a6:	8afb      	ldrh	r3, [r7, #22]
7000a9a8:	4619      	mov	r1, r3
7000a9aa:	6878      	ldr	r0, [r7, #4]
7000a9ac:	f002 fec8 	bl	7000d740 <pbuf_remove_header>
7000a9b0:	4603      	mov	r3, r0
7000a9b2:	2b00      	cmp	r3, #0
7000a9b4:	d10e      	bne.n	7000a9d4 <ethernet_input+0x104>
        etharp_input(p, netif);
7000a9b6:	6839      	ldr	r1, [r7, #0]
7000a9b8:	6878      	ldr	r0, [r7, #4]
7000a9ba:	f7ff fb57 	bl	7000a06c <etharp_input>
      break;
7000a9be:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
7000a9c0:	2300      	movs	r3, #0
7000a9c2:	e00c      	b.n	7000a9de <ethernet_input+0x10e>
    goto free_and_return;
7000a9c4:	bf00      	nop
7000a9c6:	e006      	b.n	7000a9d6 <ethernet_input+0x106>
        goto free_and_return;
7000a9c8:	bf00      	nop
7000a9ca:	e004      	b.n	7000a9d6 <ethernet_input+0x106>
        goto free_and_return;
7000a9cc:	bf00      	nop
7000a9ce:	e002      	b.n	7000a9d6 <ethernet_input+0x106>
        goto free_and_return;
7000a9d0:	bf00      	nop
7000a9d2:	e000      	b.n	7000a9d6 <ethernet_input+0x106>
        goto free_and_return;
7000a9d4:	bf00      	nop

free_and_return:
  pbuf_free(p);
7000a9d6:	6878      	ldr	r0, [r7, #4]
7000a9d8:	f002 ff2e 	bl	7000d838 <pbuf_free>
  return ERR_OK;
7000a9dc:	2300      	movs	r3, #0
}
7000a9de:	4618      	mov	r0, r3
7000a9e0:	3718      	adds	r7, #24
7000a9e2:	46bd      	mov	sp, r7
7000a9e4:	bd80      	pop	{r7, pc}
7000a9e6:	bf00      	nop
7000a9e8:	7001724c 	.word	0x7001724c

7000a9ec <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
7000a9ec:	b580      	push	{r7, lr}
7000a9ee:	b086      	sub	sp, #24
7000a9f0:	af00      	add	r7, sp, #0
7000a9f2:	60f8      	str	r0, [r7, #12]
7000a9f4:	60b9      	str	r1, [r7, #8]
7000a9f6:	607a      	str	r2, [r7, #4]
7000a9f8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
7000a9fa:	8c3b      	ldrh	r3, [r7, #32]
7000a9fc:	4618      	mov	r0, r3
7000a9fe:	f7fe ffdf 	bl	700099c0 <lwip_htons>
7000aa02:	4603      	mov	r3, r0
7000aa04:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
7000aa06:	210e      	movs	r1, #14
7000aa08:	68b8      	ldr	r0, [r7, #8]
7000aa0a:	f002 fe89 	bl	7000d720 <pbuf_add_header>
7000aa0e:	4603      	mov	r3, r0
7000aa10:	2b00      	cmp	r3, #0
7000aa12:	d125      	bne.n	7000aa60 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
7000aa14:	68bb      	ldr	r3, [r7, #8]
7000aa16:	685b      	ldr	r3, [r3, #4]
7000aa18:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
7000aa1a:	693b      	ldr	r3, [r7, #16]
7000aa1c:	8afa      	ldrh	r2, [r7, #22]
7000aa1e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
7000aa20:	693b      	ldr	r3, [r7, #16]
7000aa22:	2206      	movs	r2, #6
7000aa24:	6839      	ldr	r1, [r7, #0]
7000aa26:	4618      	mov	r0, r3
7000aa28:	f009 faa3 	bl	70013f72 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
7000aa2c:	693b      	ldr	r3, [r7, #16]
7000aa2e:	3306      	adds	r3, #6
7000aa30:	2206      	movs	r2, #6
7000aa32:	6879      	ldr	r1, [r7, #4]
7000aa34:	4618      	mov	r0, r3
7000aa36:	f009 fa9c 	bl	70013f72 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
7000aa3a:	68fb      	ldr	r3, [r7, #12]
7000aa3c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
7000aa40:	2b06      	cmp	r3, #6
7000aa42:	d006      	beq.n	7000aa52 <ethernet_output+0x66>
7000aa44:	4b0a      	ldr	r3, [pc, #40]	@ (7000aa70 <ethernet_output+0x84>)
7000aa46:	f44f 7299 	mov.w	r2, #306	@ 0x132
7000aa4a:	490a      	ldr	r1, [pc, #40]	@ (7000aa74 <ethernet_output+0x88>)
7000aa4c:	480a      	ldr	r0, [pc, #40]	@ (7000aa78 <ethernet_output+0x8c>)
7000aa4e:	f009 f95f 	bl	70013d10 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
7000aa52:	68fb      	ldr	r3, [r7, #12]
7000aa54:	699b      	ldr	r3, [r3, #24]
7000aa56:	68b9      	ldr	r1, [r7, #8]
7000aa58:	68f8      	ldr	r0, [r7, #12]
7000aa5a:	4798      	blx	r3
7000aa5c:	4603      	mov	r3, r0
7000aa5e:	e002      	b.n	7000aa66 <ethernet_output+0x7a>
      goto pbuf_header_failed;
7000aa60:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
7000aa62:	f06f 0301 	mvn.w	r3, #1
}
7000aa66:	4618      	mov	r0, r3
7000aa68:	3718      	adds	r7, #24
7000aa6a:	46bd      	mov	sp, r7
7000aa6c:	bd80      	pop	{r7, pc}
7000aa6e:	bf00      	nop
7000aa70:	70014f28 	.word	0x70014f28
7000aa74:	70014f8c 	.word	0x70014f8c
7000aa78:	70014fc0 	.word	0x70014fc0

7000aa7c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
7000aa7c:	b580      	push	{r7, lr}
7000aa7e:	b08e      	sub	sp, #56	@ 0x38
7000aa80:	af04      	add	r7, sp, #16
7000aa82:	6078      	str	r0, [r7, #4]
7000aa84:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
7000aa86:	4b87      	ldr	r3, [pc, #540]	@ (7000aca4 <icmp_input+0x228>)
7000aa88:	689b      	ldr	r3, [r3, #8]
7000aa8a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
7000aa8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000aa8e:	781b      	ldrb	r3, [r3, #0]
7000aa90:	f003 030f 	and.w	r3, r3, #15
7000aa94:	b2db      	uxtb	r3, r3
7000aa96:	009b      	lsls	r3, r3, #2
7000aa98:	b2db      	uxtb	r3, r3
7000aa9a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
7000aa9c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000aa9e:	2b13      	cmp	r3, #19
7000aaa0:	f240 80e8 	bls.w	7000ac74 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
7000aaa4:	687b      	ldr	r3, [r7, #4]
7000aaa6:	895b      	ldrh	r3, [r3, #10]
7000aaa8:	2b03      	cmp	r3, #3
7000aaaa:	f240 80e5 	bls.w	7000ac78 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
7000aaae:	687b      	ldr	r3, [r7, #4]
7000aab0:	685b      	ldr	r3, [r3, #4]
7000aab2:	781b      	ldrb	r3, [r3, #0]
7000aab4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
7000aab8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
7000aabc:	2b00      	cmp	r3, #0
7000aabe:	f000 80d2 	beq.w	7000ac66 <icmp_input+0x1ea>
7000aac2:	2b08      	cmp	r3, #8
7000aac4:	f040 80d2 	bne.w	7000ac6c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
7000aac8:	4b77      	ldr	r3, [pc, #476]	@ (7000aca8 <icmp_input+0x22c>)
7000aaca:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
7000aacc:	4b75      	ldr	r3, [pc, #468]	@ (7000aca4 <icmp_input+0x228>)
7000aace:	695b      	ldr	r3, [r3, #20]
7000aad0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
7000aad4:	2be0      	cmp	r3, #224	@ 0xe0
7000aad6:	f000 80d6 	beq.w	7000ac86 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
7000aada:	4b72      	ldr	r3, [pc, #456]	@ (7000aca4 <icmp_input+0x228>)
7000aadc:	695b      	ldr	r3, [r3, #20]
7000aade:	4a71      	ldr	r2, [pc, #452]	@ (7000aca4 <icmp_input+0x228>)
7000aae0:	6812      	ldr	r2, [r2, #0]
7000aae2:	4611      	mov	r1, r2
7000aae4:	4618      	mov	r0, r3
7000aae6:	f000 fcf7 	bl	7000b4d8 <ip4_addr_isbroadcast_u32>
7000aaea:	4603      	mov	r3, r0
7000aaec:	2b00      	cmp	r3, #0
7000aaee:	f040 80cc 	bne.w	7000ac8a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
7000aaf2:	687b      	ldr	r3, [r7, #4]
7000aaf4:	891b      	ldrh	r3, [r3, #8]
7000aaf6:	2b07      	cmp	r3, #7
7000aaf8:	f240 80c0 	bls.w	7000ac7c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
7000aafc:	6878      	ldr	r0, [r7, #4]
7000aafe:	f000 f9f0 	bl	7000aee2 <inet_chksum_pbuf>
7000ab02:	4603      	mov	r3, r0
7000ab04:	2b00      	cmp	r3, #0
7000ab06:	d003      	beq.n	7000ab10 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
7000ab08:	6878      	ldr	r0, [r7, #4]
7000ab0a:	f002 fe95 	bl	7000d838 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
7000ab0e:	e0c5      	b.n	7000ac9c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
7000ab10:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000ab12:	330e      	adds	r3, #14
7000ab14:	4619      	mov	r1, r3
7000ab16:	6878      	ldr	r0, [r7, #4]
7000ab18:	f002 fe02 	bl	7000d720 <pbuf_add_header>
7000ab1c:	4603      	mov	r3, r0
7000ab1e:	2b00      	cmp	r3, #0
7000ab20:	d04b      	beq.n	7000abba <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
7000ab22:	687b      	ldr	r3, [r7, #4]
7000ab24:	891a      	ldrh	r2, [r3, #8]
7000ab26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000ab28:	4413      	add	r3, r2
7000ab2a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
7000ab2c:	687b      	ldr	r3, [r7, #4]
7000ab2e:	891b      	ldrh	r3, [r3, #8]
7000ab30:	8b7a      	ldrh	r2, [r7, #26]
7000ab32:	429a      	cmp	r2, r3
7000ab34:	f0c0 80ab 	bcc.w	7000ac8e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
7000ab38:	8b7b      	ldrh	r3, [r7, #26]
7000ab3a:	f44f 7220 	mov.w	r2, #640	@ 0x280
7000ab3e:	4619      	mov	r1, r3
7000ab40:	200e      	movs	r0, #14
7000ab42:	f002 fb9f 	bl	7000d284 <pbuf_alloc>
7000ab46:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
7000ab48:	697b      	ldr	r3, [r7, #20]
7000ab4a:	2b00      	cmp	r3, #0
7000ab4c:	f000 80a1 	beq.w	7000ac92 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
7000ab50:	697b      	ldr	r3, [r7, #20]
7000ab52:	895b      	ldrh	r3, [r3, #10]
7000ab54:	461a      	mov	r2, r3
7000ab56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000ab58:	3308      	adds	r3, #8
7000ab5a:	429a      	cmp	r2, r3
7000ab5c:	d203      	bcs.n	7000ab66 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
7000ab5e:	6978      	ldr	r0, [r7, #20]
7000ab60:	f002 fe6a 	bl	7000d838 <pbuf_free>
          goto icmperr;
7000ab64:	e096      	b.n	7000ac94 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
7000ab66:	697b      	ldr	r3, [r7, #20]
7000ab68:	685b      	ldr	r3, [r3, #4]
7000ab6a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
7000ab6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
7000ab6e:	4618      	mov	r0, r3
7000ab70:	f009 f9ff 	bl	70013f72 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
7000ab74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000ab76:	4619      	mov	r1, r3
7000ab78:	6978      	ldr	r0, [r7, #20]
7000ab7a:	f002 fde1 	bl	7000d740 <pbuf_remove_header>
7000ab7e:	4603      	mov	r3, r0
7000ab80:	2b00      	cmp	r3, #0
7000ab82:	d009      	beq.n	7000ab98 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
7000ab84:	4b49      	ldr	r3, [pc, #292]	@ (7000acac <icmp_input+0x230>)
7000ab86:	22b6      	movs	r2, #182	@ 0xb6
7000ab88:	4949      	ldr	r1, [pc, #292]	@ (7000acb0 <icmp_input+0x234>)
7000ab8a:	484a      	ldr	r0, [pc, #296]	@ (7000acb4 <icmp_input+0x238>)
7000ab8c:	f009 f8c0 	bl	70013d10 <iprintf>
          pbuf_free(r);
7000ab90:	6978      	ldr	r0, [r7, #20]
7000ab92:	f002 fe51 	bl	7000d838 <pbuf_free>
          goto icmperr;
7000ab96:	e07d      	b.n	7000ac94 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
7000ab98:	6879      	ldr	r1, [r7, #4]
7000ab9a:	6978      	ldr	r0, [r7, #20]
7000ab9c:	f002 ff66 	bl	7000da6c <pbuf_copy>
7000aba0:	4603      	mov	r3, r0
7000aba2:	2b00      	cmp	r3, #0
7000aba4:	d003      	beq.n	7000abae <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
7000aba6:	6978      	ldr	r0, [r7, #20]
7000aba8:	f002 fe46 	bl	7000d838 <pbuf_free>
          goto icmperr;
7000abac:	e072      	b.n	7000ac94 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
7000abae:	6878      	ldr	r0, [r7, #4]
7000abb0:	f002 fe42 	bl	7000d838 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
7000abb4:	697b      	ldr	r3, [r7, #20]
7000abb6:	607b      	str	r3, [r7, #4]
7000abb8:	e00f      	b.n	7000abda <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
7000abba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000abbc:	330e      	adds	r3, #14
7000abbe:	4619      	mov	r1, r3
7000abc0:	6878      	ldr	r0, [r7, #4]
7000abc2:	f002 fdbd 	bl	7000d740 <pbuf_remove_header>
7000abc6:	4603      	mov	r3, r0
7000abc8:	2b00      	cmp	r3, #0
7000abca:	d006      	beq.n	7000abda <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
7000abcc:	4b37      	ldr	r3, [pc, #220]	@ (7000acac <icmp_input+0x230>)
7000abce:	22c7      	movs	r2, #199	@ 0xc7
7000abd0:	4939      	ldr	r1, [pc, #228]	@ (7000acb8 <icmp_input+0x23c>)
7000abd2:	4838      	ldr	r0, [pc, #224]	@ (7000acb4 <icmp_input+0x238>)
7000abd4:	f009 f89c 	bl	70013d10 <iprintf>
          goto icmperr;
7000abd8:	e05c      	b.n	7000ac94 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
7000abda:	687b      	ldr	r3, [r7, #4]
7000abdc:	685b      	ldr	r3, [r3, #4]
7000abde:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
7000abe0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000abe2:	4619      	mov	r1, r3
7000abe4:	6878      	ldr	r0, [r7, #4]
7000abe6:	f002 fd9b 	bl	7000d720 <pbuf_add_header>
7000abea:	4603      	mov	r3, r0
7000abec:	2b00      	cmp	r3, #0
7000abee:	d13c      	bne.n	7000ac6a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
7000abf0:	687b      	ldr	r3, [r7, #4]
7000abf2:	685b      	ldr	r3, [r3, #4]
7000abf4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
7000abf6:	69fb      	ldr	r3, [r7, #28]
7000abf8:	681a      	ldr	r2, [r3, #0]
7000abfa:	68fb      	ldr	r3, [r7, #12]
7000abfc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
7000abfe:	4b29      	ldr	r3, [pc, #164]	@ (7000aca4 <icmp_input+0x228>)
7000ac00:	691a      	ldr	r2, [r3, #16]
7000ac02:	68fb      	ldr	r3, [r7, #12]
7000ac04:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
7000ac06:	693b      	ldr	r3, [r7, #16]
7000ac08:	2200      	movs	r2, #0
7000ac0a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
7000ac0c:	693b      	ldr	r3, [r7, #16]
7000ac0e:	885b      	ldrh	r3, [r3, #2]
7000ac10:	b29b      	uxth	r3, r3
7000ac12:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
7000ac16:	4293      	cmp	r3, r2
7000ac18:	d907      	bls.n	7000ac2a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
7000ac1a:	693b      	ldr	r3, [r7, #16]
7000ac1c:	885b      	ldrh	r3, [r3, #2]
7000ac1e:	b29b      	uxth	r3, r3
7000ac20:	3309      	adds	r3, #9
7000ac22:	b29a      	uxth	r2, r3
7000ac24:	693b      	ldr	r3, [r7, #16]
7000ac26:	805a      	strh	r2, [r3, #2]
7000ac28:	e006      	b.n	7000ac38 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
7000ac2a:	693b      	ldr	r3, [r7, #16]
7000ac2c:	885b      	ldrh	r3, [r3, #2]
7000ac2e:	b29b      	uxth	r3, r3
7000ac30:	3308      	adds	r3, #8
7000ac32:	b29a      	uxth	r2, r3
7000ac34:	693b      	ldr	r3, [r7, #16]
7000ac36:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
7000ac38:	68fb      	ldr	r3, [r7, #12]
7000ac3a:	22ff      	movs	r2, #255	@ 0xff
7000ac3c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
7000ac3e:	68fb      	ldr	r3, [r7, #12]
7000ac40:	2200      	movs	r2, #0
7000ac42:	729a      	strb	r2, [r3, #10]
7000ac44:	2200      	movs	r2, #0
7000ac46:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
7000ac48:	683b      	ldr	r3, [r7, #0]
7000ac4a:	9302      	str	r3, [sp, #8]
7000ac4c:	2301      	movs	r3, #1
7000ac4e:	9301      	str	r3, [sp, #4]
7000ac50:	2300      	movs	r3, #0
7000ac52:	9300      	str	r3, [sp, #0]
7000ac54:	23ff      	movs	r3, #255	@ 0xff
7000ac56:	2200      	movs	r2, #0
7000ac58:	69f9      	ldr	r1, [r7, #28]
7000ac5a:	6878      	ldr	r0, [r7, #4]
7000ac5c:	f000 fb64 	bl	7000b328 <ip4_output_if>
7000ac60:	4603      	mov	r3, r0
7000ac62:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
7000ac64:	e001      	b.n	7000ac6a <icmp_input+0x1ee>
      break;
7000ac66:	bf00      	nop
7000ac68:	e000      	b.n	7000ac6c <icmp_input+0x1f0>
      break;
7000ac6a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
7000ac6c:	6878      	ldr	r0, [r7, #4]
7000ac6e:	f002 fde3 	bl	7000d838 <pbuf_free>
  return;
7000ac72:	e013      	b.n	7000ac9c <icmp_input+0x220>
    goto lenerr;
7000ac74:	bf00      	nop
7000ac76:	e002      	b.n	7000ac7e <icmp_input+0x202>
    goto lenerr;
7000ac78:	bf00      	nop
7000ac7a:	e000      	b.n	7000ac7e <icmp_input+0x202>
        goto lenerr;
7000ac7c:	bf00      	nop
lenerr:
  pbuf_free(p);
7000ac7e:	6878      	ldr	r0, [r7, #4]
7000ac80:	f002 fdda 	bl	7000d838 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
7000ac84:	e00a      	b.n	7000ac9c <icmp_input+0x220>
        goto icmperr;
7000ac86:	bf00      	nop
7000ac88:	e004      	b.n	7000ac94 <icmp_input+0x218>
        goto icmperr;
7000ac8a:	bf00      	nop
7000ac8c:	e002      	b.n	7000ac94 <icmp_input+0x218>
          goto icmperr;
7000ac8e:	bf00      	nop
7000ac90:	e000      	b.n	7000ac94 <icmp_input+0x218>
          goto icmperr;
7000ac92:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
7000ac94:	6878      	ldr	r0, [r7, #4]
7000ac96:	f002 fdcf 	bl	7000d838 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
7000ac9a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
7000ac9c:	3728      	adds	r7, #40	@ 0x28
7000ac9e:	46bd      	mov	sp, r7
7000aca0:	bd80      	pop	{r7, pc}
7000aca2:	bf00      	nop
7000aca4:	24005368 	.word	0x24005368
7000aca8:	2400537c 	.word	0x2400537c
7000acac:	70014fe8 	.word	0x70014fe8
7000acb0:	7001504c 	.word	0x7001504c
7000acb4:	70015084 	.word	0x70015084
7000acb8:	700150ac 	.word	0x700150ac

7000acbc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
7000acbc:	b580      	push	{r7, lr}
7000acbe:	b082      	sub	sp, #8
7000acc0:	af00      	add	r7, sp, #0
7000acc2:	6078      	str	r0, [r7, #4]
7000acc4:	460b      	mov	r3, r1
7000acc6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
7000acc8:	78fb      	ldrb	r3, [r7, #3]
7000acca:	461a      	mov	r2, r3
7000accc:	2103      	movs	r1, #3
7000acce:	6878      	ldr	r0, [r7, #4]
7000acd0:	f000 f814 	bl	7000acfc <icmp_send_response>
}
7000acd4:	bf00      	nop
7000acd6:	3708      	adds	r7, #8
7000acd8:	46bd      	mov	sp, r7
7000acda:	bd80      	pop	{r7, pc}

7000acdc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
7000acdc:	b580      	push	{r7, lr}
7000acde:	b082      	sub	sp, #8
7000ace0:	af00      	add	r7, sp, #0
7000ace2:	6078      	str	r0, [r7, #4]
7000ace4:	460b      	mov	r3, r1
7000ace6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
7000ace8:	78fb      	ldrb	r3, [r7, #3]
7000acea:	461a      	mov	r2, r3
7000acec:	210b      	movs	r1, #11
7000acee:	6878      	ldr	r0, [r7, #4]
7000acf0:	f000 f804 	bl	7000acfc <icmp_send_response>
}
7000acf4:	bf00      	nop
7000acf6:	3708      	adds	r7, #8
7000acf8:	46bd      	mov	sp, r7
7000acfa:	bd80      	pop	{r7, pc}

7000acfc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
7000acfc:	b580      	push	{r7, lr}
7000acfe:	b08c      	sub	sp, #48	@ 0x30
7000ad00:	af04      	add	r7, sp, #16
7000ad02:	6078      	str	r0, [r7, #4]
7000ad04:	460b      	mov	r3, r1
7000ad06:	70fb      	strb	r3, [r7, #3]
7000ad08:	4613      	mov	r3, r2
7000ad0a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* Keep IP header + up to 8 bytes */
  response_pkt_len = IP_HLEN + ICMP_DEST_UNREACH_DATASIZE;
7000ad0c:	231c      	movs	r3, #28
7000ad0e:	83fb      	strh	r3, [r7, #30]
  if (p->tot_len < response_pkt_len) {
7000ad10:	687b      	ldr	r3, [r7, #4]
7000ad12:	891b      	ldrh	r3, [r3, #8]
7000ad14:	8bfa      	ldrh	r2, [r7, #30]
7000ad16:	429a      	cmp	r2, r3
7000ad18:	d902      	bls.n	7000ad20 <icmp_send_response+0x24>
    response_pkt_len = p->tot_len;
7000ad1a:	687b      	ldr	r3, [r7, #4]
7000ad1c:	891b      	ldrh	r3, [r3, #8]
7000ad1e:	83fb      	strh	r3, [r7, #30]
  }

  /* ICMP header + part of original packet */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + response_pkt_len, PBUF_RAM);
7000ad20:	8bfb      	ldrh	r3, [r7, #30]
7000ad22:	3308      	adds	r3, #8
7000ad24:	b29b      	uxth	r3, r3
7000ad26:	f44f 7220 	mov.w	r2, #640	@ 0x280
7000ad2a:	4619      	mov	r1, r3
7000ad2c:	2022      	movs	r0, #34	@ 0x22
7000ad2e:	f002 faa9 	bl	7000d284 <pbuf_alloc>
7000ad32:	61b8      	str	r0, [r7, #24]
  if (q == NULL) {
7000ad34:	69bb      	ldr	r3, [r7, #24]
7000ad36:	2b00      	cmp	r3, #0
7000ad38:	d059      	beq.n	7000adee <icmp_send_response+0xf2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
7000ad3a:	69bb      	ldr	r3, [r7, #24]
7000ad3c:	895b      	ldrh	r3, [r3, #10]
7000ad3e:	461a      	mov	r2, r3
7000ad40:	8bfb      	ldrh	r3, [r7, #30]
7000ad42:	3308      	adds	r3, #8
7000ad44:	429a      	cmp	r2, r3
7000ad46:	d206      	bcs.n	7000ad56 <icmp_send_response+0x5a>
7000ad48:	4b2b      	ldr	r3, [pc, #172]	@ (7000adf8 <icmp_send_response+0xfc>)
7000ad4a:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
7000ad4e:	492b      	ldr	r1, [pc, #172]	@ (7000adfc <icmp_send_response+0x100>)
7000ad50:	482b      	ldr	r0, [pc, #172]	@ (7000ae00 <icmp_send_response+0x104>)
7000ad52:	f008 ffdd 	bl	70013d10 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + response_pkt_len)));

  iphdr = (struct ip_hdr *)p->payload;
7000ad56:	687b      	ldr	r3, [r7, #4]
7000ad58:	685b      	ldr	r3, [r3, #4]
7000ad5a:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
7000ad5c:	69bb      	ldr	r3, [r7, #24]
7000ad5e:	685b      	ldr	r3, [r3, #4]
7000ad60:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
7000ad62:	693b      	ldr	r3, [r7, #16]
7000ad64:	78fa      	ldrb	r2, [r7, #3]
7000ad66:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
7000ad68:	693b      	ldr	r3, [r7, #16]
7000ad6a:	78ba      	ldrb	r2, [r7, #2]
7000ad6c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
7000ad6e:	693b      	ldr	r3, [r7, #16]
7000ad70:	2200      	movs	r2, #0
7000ad72:	711a      	strb	r2, [r3, #4]
7000ad74:	2200      	movs	r2, #0
7000ad76:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
7000ad78:	693b      	ldr	r3, [r7, #16]
7000ad7a:	2200      	movs	r2, #0
7000ad7c:	719a      	strb	r2, [r3, #6]
7000ad7e:	2200      	movs	r2, #0
7000ad80:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
7000ad82:	69bb      	ldr	r3, [r7, #24]
7000ad84:	685b      	ldr	r3, [r3, #4]
7000ad86:	f103 0008 	add.w	r0, r3, #8
7000ad8a:	687b      	ldr	r3, [r7, #4]
7000ad8c:	685b      	ldr	r3, [r3, #4]
7000ad8e:	8bfa      	ldrh	r2, [r7, #30]
7000ad90:	4619      	mov	r1, r3
7000ad92:	f009 f8ee 	bl	70013f72 <memcpy>
          response_pkt_len);

  ip4_addr_copy(iphdr_src, iphdr->src);
7000ad96:	697b      	ldr	r3, [r7, #20]
7000ad98:	68db      	ldr	r3, [r3, #12]
7000ad9a:	60bb      	str	r3, [r7, #8]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
7000ad9c:	f107 0308 	add.w	r3, r7, #8
7000ada0:	4618      	mov	r0, r3
7000ada2:	f000 f903 	bl	7000afac <ip4_route>
7000ada6:	60f8      	str	r0, [r7, #12]
#endif
  if (netif != NULL) {
7000ada8:	68fb      	ldr	r3, [r7, #12]
7000adaa:	2b00      	cmp	r3, #0
7000adac:	d01b      	beq.n	7000ade6 <icmp_send_response+0xea>
    /* calculate checksum */
    icmphdr->chksum = 0;
7000adae:	693b      	ldr	r3, [r7, #16]
7000adb0:	2200      	movs	r2, #0
7000adb2:	709a      	strb	r2, [r3, #2]
7000adb4:	2200      	movs	r2, #0
7000adb6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
7000adb8:	69bb      	ldr	r3, [r7, #24]
7000adba:	895b      	ldrh	r3, [r3, #10]
7000adbc:	4619      	mov	r1, r3
7000adbe:	6938      	ldr	r0, [r7, #16]
7000adc0:	f000 f87d 	bl	7000aebe <inet_chksum>
7000adc4:	4603      	mov	r3, r0
7000adc6:	461a      	mov	r2, r3
7000adc8:	693b      	ldr	r3, [r7, #16]
7000adca:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
7000adcc:	f107 0208 	add.w	r2, r7, #8
7000add0:	68fb      	ldr	r3, [r7, #12]
7000add2:	9302      	str	r3, [sp, #8]
7000add4:	2301      	movs	r3, #1
7000add6:	9301      	str	r3, [sp, #4]
7000add8:	2300      	movs	r3, #0
7000adda:	9300      	str	r3, [sp, #0]
7000addc:	23ff      	movs	r3, #255	@ 0xff
7000adde:	2100      	movs	r1, #0
7000ade0:	69b8      	ldr	r0, [r7, #24]
7000ade2:	f000 faa1 	bl	7000b328 <ip4_output_if>
  }
  pbuf_free(q);
7000ade6:	69b8      	ldr	r0, [r7, #24]
7000ade8:	f002 fd26 	bl	7000d838 <pbuf_free>
7000adec:	e000      	b.n	7000adf0 <icmp_send_response+0xf4>
    return;
7000adee:	bf00      	nop
}
7000adf0:	3720      	adds	r7, #32
7000adf2:	46bd      	mov	sp, r7
7000adf4:	bd80      	pop	{r7, pc}
7000adf6:	bf00      	nop
7000adf8:	70014fe8 	.word	0x70014fe8
7000adfc:	700150e0 	.word	0x700150e0
7000ae00:	70015084 	.word	0x70015084

7000ae04 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
7000ae04:	b480      	push	{r7}
7000ae06:	b089      	sub	sp, #36	@ 0x24
7000ae08:	af00      	add	r7, sp, #0
7000ae0a:	6078      	str	r0, [r7, #4]
7000ae0c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
7000ae0e:	687b      	ldr	r3, [r7, #4]
7000ae10:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
7000ae12:	2300      	movs	r3, #0
7000ae14:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
7000ae16:	2300      	movs	r3, #0
7000ae18:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
7000ae1a:	69fb      	ldr	r3, [r7, #28]
7000ae1c:	f003 0301 	and.w	r3, r3, #1
7000ae20:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
7000ae22:	693b      	ldr	r3, [r7, #16]
7000ae24:	2b00      	cmp	r3, #0
7000ae26:	d00d      	beq.n	7000ae44 <lwip_standard_chksum+0x40>
7000ae28:	683b      	ldr	r3, [r7, #0]
7000ae2a:	2b00      	cmp	r3, #0
7000ae2c:	dd0a      	ble.n	7000ae44 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
7000ae2e:	69fa      	ldr	r2, [r7, #28]
7000ae30:	1c53      	adds	r3, r2, #1
7000ae32:	61fb      	str	r3, [r7, #28]
7000ae34:	f107 030e 	add.w	r3, r7, #14
7000ae38:	3301      	adds	r3, #1
7000ae3a:	7812      	ldrb	r2, [r2, #0]
7000ae3c:	701a      	strb	r2, [r3, #0]
    len--;
7000ae3e:	683b      	ldr	r3, [r7, #0]
7000ae40:	3b01      	subs	r3, #1
7000ae42:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
7000ae44:	69fb      	ldr	r3, [r7, #28]
7000ae46:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
7000ae48:	e00a      	b.n	7000ae60 <lwip_standard_chksum+0x5c>
    sum += *ps++;
7000ae4a:	69bb      	ldr	r3, [r7, #24]
7000ae4c:	1c9a      	adds	r2, r3, #2
7000ae4e:	61ba      	str	r2, [r7, #24]
7000ae50:	881b      	ldrh	r3, [r3, #0]
7000ae52:	461a      	mov	r2, r3
7000ae54:	697b      	ldr	r3, [r7, #20]
7000ae56:	4413      	add	r3, r2
7000ae58:	617b      	str	r3, [r7, #20]
    len -= 2;
7000ae5a:	683b      	ldr	r3, [r7, #0]
7000ae5c:	3b02      	subs	r3, #2
7000ae5e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
7000ae60:	683b      	ldr	r3, [r7, #0]
7000ae62:	2b01      	cmp	r3, #1
7000ae64:	dcf1      	bgt.n	7000ae4a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
7000ae66:	683b      	ldr	r3, [r7, #0]
7000ae68:	2b00      	cmp	r3, #0
7000ae6a:	dd04      	ble.n	7000ae76 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
7000ae6c:	f107 030e 	add.w	r3, r7, #14
7000ae70:	69ba      	ldr	r2, [r7, #24]
7000ae72:	7812      	ldrb	r2, [r2, #0]
7000ae74:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
7000ae76:	89fb      	ldrh	r3, [r7, #14]
7000ae78:	461a      	mov	r2, r3
7000ae7a:	697b      	ldr	r3, [r7, #20]
7000ae7c:	4413      	add	r3, r2
7000ae7e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
7000ae80:	697b      	ldr	r3, [r7, #20]
7000ae82:	0c1a      	lsrs	r2, r3, #16
7000ae84:	697b      	ldr	r3, [r7, #20]
7000ae86:	b29b      	uxth	r3, r3
7000ae88:	4413      	add	r3, r2
7000ae8a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
7000ae8c:	697b      	ldr	r3, [r7, #20]
7000ae8e:	0c1a      	lsrs	r2, r3, #16
7000ae90:	697b      	ldr	r3, [r7, #20]
7000ae92:	b29b      	uxth	r3, r3
7000ae94:	4413      	add	r3, r2
7000ae96:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
7000ae98:	693b      	ldr	r3, [r7, #16]
7000ae9a:	2b00      	cmp	r3, #0
7000ae9c:	d007      	beq.n	7000aeae <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
7000ae9e:	697b      	ldr	r3, [r7, #20]
7000aea0:	021b      	lsls	r3, r3, #8
7000aea2:	b29a      	uxth	r2, r3
7000aea4:	697b      	ldr	r3, [r7, #20]
7000aea6:	0a1b      	lsrs	r3, r3, #8
7000aea8:	b2db      	uxtb	r3, r3
7000aeaa:	4313      	orrs	r3, r2
7000aeac:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
7000aeae:	697b      	ldr	r3, [r7, #20]
7000aeb0:	b29b      	uxth	r3, r3
}
7000aeb2:	4618      	mov	r0, r3
7000aeb4:	3724      	adds	r7, #36	@ 0x24
7000aeb6:	46bd      	mov	sp, r7
7000aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
7000aebc:	4770      	bx	lr

7000aebe <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
7000aebe:	b580      	push	{r7, lr}
7000aec0:	b082      	sub	sp, #8
7000aec2:	af00      	add	r7, sp, #0
7000aec4:	6078      	str	r0, [r7, #4]
7000aec6:	460b      	mov	r3, r1
7000aec8:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
7000aeca:	887b      	ldrh	r3, [r7, #2]
7000aecc:	4619      	mov	r1, r3
7000aece:	6878      	ldr	r0, [r7, #4]
7000aed0:	f7ff ff98 	bl	7000ae04 <lwip_standard_chksum>
7000aed4:	4603      	mov	r3, r0
7000aed6:	43db      	mvns	r3, r3
7000aed8:	b29b      	uxth	r3, r3
}
7000aeda:	4618      	mov	r0, r3
7000aedc:	3708      	adds	r7, #8
7000aede:	46bd      	mov	sp, r7
7000aee0:	bd80      	pop	{r7, pc}

7000aee2 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
7000aee2:	b580      	push	{r7, lr}
7000aee4:	b086      	sub	sp, #24
7000aee6:	af00      	add	r7, sp, #0
7000aee8:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
7000aeea:	2300      	movs	r3, #0
7000aeec:	60fb      	str	r3, [r7, #12]

  acc = 0;
7000aeee:	2300      	movs	r3, #0
7000aef0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
7000aef2:	687b      	ldr	r3, [r7, #4]
7000aef4:	613b      	str	r3, [r7, #16]
7000aef6:	e02b      	b.n	7000af50 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
7000aef8:	693b      	ldr	r3, [r7, #16]
7000aefa:	685a      	ldr	r2, [r3, #4]
7000aefc:	693b      	ldr	r3, [r7, #16]
7000aefe:	895b      	ldrh	r3, [r3, #10]
7000af00:	4619      	mov	r1, r3
7000af02:	4610      	mov	r0, r2
7000af04:	f7ff ff7e 	bl	7000ae04 <lwip_standard_chksum>
7000af08:	4603      	mov	r3, r0
7000af0a:	461a      	mov	r2, r3
7000af0c:	697b      	ldr	r3, [r7, #20]
7000af0e:	4413      	add	r3, r2
7000af10:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
7000af12:	697b      	ldr	r3, [r7, #20]
7000af14:	0c1a      	lsrs	r2, r3, #16
7000af16:	697b      	ldr	r3, [r7, #20]
7000af18:	b29b      	uxth	r3, r3
7000af1a:	4413      	add	r3, r2
7000af1c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
7000af1e:	693b      	ldr	r3, [r7, #16]
7000af20:	895b      	ldrh	r3, [r3, #10]
7000af22:	f003 0301 	and.w	r3, r3, #1
7000af26:	b29b      	uxth	r3, r3
7000af28:	2b00      	cmp	r3, #0
7000af2a:	d00e      	beq.n	7000af4a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
7000af2c:	68fb      	ldr	r3, [r7, #12]
7000af2e:	2b00      	cmp	r3, #0
7000af30:	bf0c      	ite	eq
7000af32:	2301      	moveq	r3, #1
7000af34:	2300      	movne	r3, #0
7000af36:	b2db      	uxtb	r3, r3
7000af38:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
7000af3a:	697b      	ldr	r3, [r7, #20]
7000af3c:	021b      	lsls	r3, r3, #8
7000af3e:	b29a      	uxth	r2, r3
7000af40:	697b      	ldr	r3, [r7, #20]
7000af42:	0a1b      	lsrs	r3, r3, #8
7000af44:	b2db      	uxtb	r3, r3
7000af46:	4313      	orrs	r3, r2
7000af48:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
7000af4a:	693b      	ldr	r3, [r7, #16]
7000af4c:	681b      	ldr	r3, [r3, #0]
7000af4e:	613b      	str	r3, [r7, #16]
7000af50:	693b      	ldr	r3, [r7, #16]
7000af52:	2b00      	cmp	r3, #0
7000af54:	d1d0      	bne.n	7000aef8 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
7000af56:	68fb      	ldr	r3, [r7, #12]
7000af58:	2b00      	cmp	r3, #0
7000af5a:	d007      	beq.n	7000af6c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
7000af5c:	697b      	ldr	r3, [r7, #20]
7000af5e:	021b      	lsls	r3, r3, #8
7000af60:	b29a      	uxth	r2, r3
7000af62:	697b      	ldr	r3, [r7, #20]
7000af64:	0a1b      	lsrs	r3, r3, #8
7000af66:	b2db      	uxtb	r3, r3
7000af68:	4313      	orrs	r3, r2
7000af6a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
7000af6c:	697b      	ldr	r3, [r7, #20]
7000af6e:	b29b      	uxth	r3, r3
7000af70:	43db      	mvns	r3, r3
7000af72:	b29b      	uxth	r3, r3
}
7000af74:	4618      	mov	r0, r3
7000af76:	3718      	adds	r7, #24
7000af78:	46bd      	mov	sp, r7
7000af7a:	bd80      	pop	{r7, pc}

7000af7c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
7000af7c:	b580      	push	{r7, lr}
7000af7e:	b082      	sub	sp, #8
7000af80:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
7000af82:	2300      	movs	r3, #0
7000af84:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
7000af86:	f002 ff63 	bl	7000de50 <sys_init>
#endif /* !NO_SYS */
  mem_init();
7000af8a:	f001 f9e1 	bl	7000c350 <mem_init>
  memp_init();
7000af8e:	f001 fd39 	bl	7000ca04 <memp_init>
  pbuf_init();
  netif_init();
7000af92:	f001 fe2b 	bl	7000cbec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
7000af96:	f008 fc01 	bl	7001379c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
7000af9a:	f002 ffd5 	bl	7000df48 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
7000af9e:	f008 fb43 	bl	70013628 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
7000afa2:	bf00      	nop
7000afa4:	3708      	adds	r7, #8
7000afa6:	46bd      	mov	sp, r7
7000afa8:	bd80      	pop	{r7, pc}
	...

7000afac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
7000afac:	b480      	push	{r7}
7000afae:	b085      	sub	sp, #20
7000afb0:	af00      	add	r7, sp, #0
7000afb2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
7000afb4:	4b33      	ldr	r3, [pc, #204]	@ (7000b084 <ip4_route+0xd8>)
7000afb6:	681b      	ldr	r3, [r3, #0]
7000afb8:	60fb      	str	r3, [r7, #12]
7000afba:	e036      	b.n	7000b02a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
7000afbc:	68fb      	ldr	r3, [r7, #12]
7000afbe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000afc2:	f003 0301 	and.w	r3, r3, #1
7000afc6:	b2db      	uxtb	r3, r3
7000afc8:	2b00      	cmp	r3, #0
7000afca:	d02b      	beq.n	7000b024 <ip4_route+0x78>
7000afcc:	68fb      	ldr	r3, [r7, #12]
7000afce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000afd2:	089b      	lsrs	r3, r3, #2
7000afd4:	f003 0301 	and.w	r3, r3, #1
7000afd8:	b2db      	uxtb	r3, r3
7000afda:	2b00      	cmp	r3, #0
7000afdc:	d022      	beq.n	7000b024 <ip4_route+0x78>
7000afde:	68fb      	ldr	r3, [r7, #12]
7000afe0:	3304      	adds	r3, #4
7000afe2:	681b      	ldr	r3, [r3, #0]
7000afe4:	2b00      	cmp	r3, #0
7000afe6:	d01d      	beq.n	7000b024 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
7000afe8:	687b      	ldr	r3, [r7, #4]
7000afea:	681a      	ldr	r2, [r3, #0]
7000afec:	68fb      	ldr	r3, [r7, #12]
7000afee:	3304      	adds	r3, #4
7000aff0:	681b      	ldr	r3, [r3, #0]
7000aff2:	405a      	eors	r2, r3
7000aff4:	68fb      	ldr	r3, [r7, #12]
7000aff6:	3308      	adds	r3, #8
7000aff8:	681b      	ldr	r3, [r3, #0]
7000affa:	4013      	ands	r3, r2
7000affc:	2b00      	cmp	r3, #0
7000affe:	d101      	bne.n	7000b004 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
7000b000:	68fb      	ldr	r3, [r7, #12]
7000b002:	e038      	b.n	7000b076 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
7000b004:	68fb      	ldr	r3, [r7, #12]
7000b006:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000b00a:	f003 0302 	and.w	r3, r3, #2
7000b00e:	2b00      	cmp	r3, #0
7000b010:	d108      	bne.n	7000b024 <ip4_route+0x78>
7000b012:	687b      	ldr	r3, [r7, #4]
7000b014:	681a      	ldr	r2, [r3, #0]
7000b016:	68fb      	ldr	r3, [r7, #12]
7000b018:	330c      	adds	r3, #12
7000b01a:	681b      	ldr	r3, [r3, #0]
7000b01c:	429a      	cmp	r2, r3
7000b01e:	d101      	bne.n	7000b024 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
7000b020:	68fb      	ldr	r3, [r7, #12]
7000b022:	e028      	b.n	7000b076 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
7000b024:	68fb      	ldr	r3, [r7, #12]
7000b026:	681b      	ldr	r3, [r3, #0]
7000b028:	60fb      	str	r3, [r7, #12]
7000b02a:	68fb      	ldr	r3, [r7, #12]
7000b02c:	2b00      	cmp	r3, #0
7000b02e:	d1c5      	bne.n	7000afbc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
7000b030:	4b15      	ldr	r3, [pc, #84]	@ (7000b088 <ip4_route+0xdc>)
7000b032:	681b      	ldr	r3, [r3, #0]
7000b034:	2b00      	cmp	r3, #0
7000b036:	d01a      	beq.n	7000b06e <ip4_route+0xc2>
7000b038:	4b13      	ldr	r3, [pc, #76]	@ (7000b088 <ip4_route+0xdc>)
7000b03a:	681b      	ldr	r3, [r3, #0]
7000b03c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000b040:	f003 0301 	and.w	r3, r3, #1
7000b044:	2b00      	cmp	r3, #0
7000b046:	d012      	beq.n	7000b06e <ip4_route+0xc2>
7000b048:	4b0f      	ldr	r3, [pc, #60]	@ (7000b088 <ip4_route+0xdc>)
7000b04a:	681b      	ldr	r3, [r3, #0]
7000b04c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000b050:	f003 0304 	and.w	r3, r3, #4
7000b054:	2b00      	cmp	r3, #0
7000b056:	d00a      	beq.n	7000b06e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
7000b058:	4b0b      	ldr	r3, [pc, #44]	@ (7000b088 <ip4_route+0xdc>)
7000b05a:	681b      	ldr	r3, [r3, #0]
7000b05c:	3304      	adds	r3, #4
7000b05e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
7000b060:	2b00      	cmp	r3, #0
7000b062:	d004      	beq.n	7000b06e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
7000b064:	687b      	ldr	r3, [r7, #4]
7000b066:	681b      	ldr	r3, [r3, #0]
7000b068:	b2db      	uxtb	r3, r3
7000b06a:	2b7f      	cmp	r3, #127	@ 0x7f
7000b06c:	d101      	bne.n	7000b072 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
7000b06e:	2300      	movs	r3, #0
7000b070:	e001      	b.n	7000b076 <ip4_route+0xca>
  }

  return netif_default;
7000b072:	4b05      	ldr	r3, [pc, #20]	@ (7000b088 <ip4_route+0xdc>)
7000b074:	681b      	ldr	r3, [r3, #0]
}
7000b076:	4618      	mov	r0, r3
7000b078:	3714      	adds	r7, #20
7000b07a:	46bd      	mov	sp, r7
7000b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
7000b080:	4770      	bx	lr
7000b082:	bf00      	nop
7000b084:	24008468 	.word	0x24008468
7000b088:	2400846c 	.word	0x2400846c

7000b08c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
7000b08c:	b580      	push	{r7, lr}
7000b08e:	b082      	sub	sp, #8
7000b090:	af00      	add	r7, sp, #0
7000b092:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
7000b094:	687b      	ldr	r3, [r7, #4]
7000b096:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000b09a:	f003 0301 	and.w	r3, r3, #1
7000b09e:	b2db      	uxtb	r3, r3
7000b0a0:	2b00      	cmp	r3, #0
7000b0a2:	d016      	beq.n	7000b0d2 <ip4_input_accept+0x46>
7000b0a4:	687b      	ldr	r3, [r7, #4]
7000b0a6:	3304      	adds	r3, #4
7000b0a8:	681b      	ldr	r3, [r3, #0]
7000b0aa:	2b00      	cmp	r3, #0
7000b0ac:	d011      	beq.n	7000b0d2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
7000b0ae:	4b0b      	ldr	r3, [pc, #44]	@ (7000b0dc <ip4_input_accept+0x50>)
7000b0b0:	695a      	ldr	r2, [r3, #20]
7000b0b2:	687b      	ldr	r3, [r7, #4]
7000b0b4:	3304      	adds	r3, #4
7000b0b6:	681b      	ldr	r3, [r3, #0]
7000b0b8:	429a      	cmp	r2, r3
7000b0ba:	d008      	beq.n	7000b0ce <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
7000b0bc:	4b07      	ldr	r3, [pc, #28]	@ (7000b0dc <ip4_input_accept+0x50>)
7000b0be:	695b      	ldr	r3, [r3, #20]
7000b0c0:	6879      	ldr	r1, [r7, #4]
7000b0c2:	4618      	mov	r0, r3
7000b0c4:	f000 fa08 	bl	7000b4d8 <ip4_addr_isbroadcast_u32>
7000b0c8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
7000b0ca:	2b00      	cmp	r3, #0
7000b0cc:	d001      	beq.n	7000b0d2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
7000b0ce:	2301      	movs	r3, #1
7000b0d0:	e000      	b.n	7000b0d4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
7000b0d2:	2300      	movs	r3, #0
}
7000b0d4:	4618      	mov	r0, r3
7000b0d6:	3708      	adds	r7, #8
7000b0d8:	46bd      	mov	sp, r7
7000b0da:	bd80      	pop	{r7, pc}
7000b0dc:	24005368 	.word	0x24005368

7000b0e0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
7000b0e0:	b580      	push	{r7, lr}
7000b0e2:	b086      	sub	sp, #24
7000b0e4:	af00      	add	r7, sp, #0
7000b0e6:	6078      	str	r0, [r7, #4]
7000b0e8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
7000b0ea:	687b      	ldr	r3, [r7, #4]
7000b0ec:	685b      	ldr	r3, [r3, #4]
7000b0ee:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
7000b0f0:	697b      	ldr	r3, [r7, #20]
7000b0f2:	781b      	ldrb	r3, [r3, #0]
7000b0f4:	091b      	lsrs	r3, r3, #4
7000b0f6:	b2db      	uxtb	r3, r3
7000b0f8:	2b04      	cmp	r3, #4
7000b0fa:	d004      	beq.n	7000b106 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
7000b0fc:	6878      	ldr	r0, [r7, #4]
7000b0fe:	f002 fb9b 	bl	7000d838 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
7000b102:	2300      	movs	r3, #0
7000b104:	e107      	b.n	7000b316 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
7000b106:	697b      	ldr	r3, [r7, #20]
7000b108:	781b      	ldrb	r3, [r3, #0]
7000b10a:	f003 030f 	and.w	r3, r3, #15
7000b10e:	b2db      	uxtb	r3, r3
7000b110:	009b      	lsls	r3, r3, #2
7000b112:	b2db      	uxtb	r3, r3
7000b114:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
7000b116:	697b      	ldr	r3, [r7, #20]
7000b118:	885b      	ldrh	r3, [r3, #2]
7000b11a:	b29b      	uxth	r3, r3
7000b11c:	4618      	mov	r0, r3
7000b11e:	f7fe fc4f 	bl	700099c0 <lwip_htons>
7000b122:	4603      	mov	r3, r0
7000b124:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
7000b126:	687b      	ldr	r3, [r7, #4]
7000b128:	891b      	ldrh	r3, [r3, #8]
7000b12a:	89ba      	ldrh	r2, [r7, #12]
7000b12c:	429a      	cmp	r2, r3
7000b12e:	d204      	bcs.n	7000b13a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
7000b130:	89bb      	ldrh	r3, [r7, #12]
7000b132:	4619      	mov	r1, r3
7000b134:	6878      	ldr	r0, [r7, #4]
7000b136:	f002 fa03 	bl	7000d540 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
7000b13a:	687b      	ldr	r3, [r7, #4]
7000b13c:	895b      	ldrh	r3, [r3, #10]
7000b13e:	89fa      	ldrh	r2, [r7, #14]
7000b140:	429a      	cmp	r2, r3
7000b142:	d807      	bhi.n	7000b154 <ip4_input+0x74>
7000b144:	687b      	ldr	r3, [r7, #4]
7000b146:	891b      	ldrh	r3, [r3, #8]
7000b148:	89ba      	ldrh	r2, [r7, #12]
7000b14a:	429a      	cmp	r2, r3
7000b14c:	d802      	bhi.n	7000b154 <ip4_input+0x74>
7000b14e:	89fb      	ldrh	r3, [r7, #14]
7000b150:	2b13      	cmp	r3, #19
7000b152:	d804      	bhi.n	7000b15e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
7000b154:	6878      	ldr	r0, [r7, #4]
7000b156:	f002 fb6f 	bl	7000d838 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
7000b15a:	2300      	movs	r3, #0
7000b15c:	e0db      	b.n	7000b316 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
7000b15e:	697b      	ldr	r3, [r7, #20]
7000b160:	691b      	ldr	r3, [r3, #16]
7000b162:	4a6f      	ldr	r2, [pc, #444]	@ (7000b320 <ip4_input+0x240>)
7000b164:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
7000b166:	697b      	ldr	r3, [r7, #20]
7000b168:	68db      	ldr	r3, [r3, #12]
7000b16a:	4a6d      	ldr	r2, [pc, #436]	@ (7000b320 <ip4_input+0x240>)
7000b16c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
7000b16e:	4b6c      	ldr	r3, [pc, #432]	@ (7000b320 <ip4_input+0x240>)
7000b170:	695b      	ldr	r3, [r3, #20]
7000b172:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
7000b176:	2be0      	cmp	r3, #224	@ 0xe0
7000b178:	d112      	bne.n	7000b1a0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
7000b17a:	683b      	ldr	r3, [r7, #0]
7000b17c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000b180:	f003 0301 	and.w	r3, r3, #1
7000b184:	b2db      	uxtb	r3, r3
7000b186:	2b00      	cmp	r3, #0
7000b188:	d007      	beq.n	7000b19a <ip4_input+0xba>
7000b18a:	683b      	ldr	r3, [r7, #0]
7000b18c:	3304      	adds	r3, #4
7000b18e:	681b      	ldr	r3, [r3, #0]
7000b190:	2b00      	cmp	r3, #0
7000b192:	d002      	beq.n	7000b19a <ip4_input+0xba>
      netif = inp;
7000b194:	683b      	ldr	r3, [r7, #0]
7000b196:	613b      	str	r3, [r7, #16]
7000b198:	e02a      	b.n	7000b1f0 <ip4_input+0x110>
    } else {
      netif = NULL;
7000b19a:	2300      	movs	r3, #0
7000b19c:	613b      	str	r3, [r7, #16]
7000b19e:	e027      	b.n	7000b1f0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
7000b1a0:	6838      	ldr	r0, [r7, #0]
7000b1a2:	f7ff ff73 	bl	7000b08c <ip4_input_accept>
7000b1a6:	4603      	mov	r3, r0
7000b1a8:	2b00      	cmp	r3, #0
7000b1aa:	d002      	beq.n	7000b1b2 <ip4_input+0xd2>
      netif = inp;
7000b1ac:	683b      	ldr	r3, [r7, #0]
7000b1ae:	613b      	str	r3, [r7, #16]
7000b1b0:	e01e      	b.n	7000b1f0 <ip4_input+0x110>
    } else {
      netif = NULL;
7000b1b2:	2300      	movs	r3, #0
7000b1b4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
7000b1b6:	4b5a      	ldr	r3, [pc, #360]	@ (7000b320 <ip4_input+0x240>)
7000b1b8:	695b      	ldr	r3, [r3, #20]
7000b1ba:	b2db      	uxtb	r3, r3
7000b1bc:	2b7f      	cmp	r3, #127	@ 0x7f
7000b1be:	d017      	beq.n	7000b1f0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
7000b1c0:	4b58      	ldr	r3, [pc, #352]	@ (7000b324 <ip4_input+0x244>)
7000b1c2:	681b      	ldr	r3, [r3, #0]
7000b1c4:	613b      	str	r3, [r7, #16]
7000b1c6:	e00e      	b.n	7000b1e6 <ip4_input+0x106>
          if (netif == inp) {
7000b1c8:	693a      	ldr	r2, [r7, #16]
7000b1ca:	683b      	ldr	r3, [r7, #0]
7000b1cc:	429a      	cmp	r2, r3
7000b1ce:	d006      	beq.n	7000b1de <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
7000b1d0:	6938      	ldr	r0, [r7, #16]
7000b1d2:	f7ff ff5b 	bl	7000b08c <ip4_input_accept>
7000b1d6:	4603      	mov	r3, r0
7000b1d8:	2b00      	cmp	r3, #0
7000b1da:	d108      	bne.n	7000b1ee <ip4_input+0x10e>
7000b1dc:	e000      	b.n	7000b1e0 <ip4_input+0x100>
            continue;
7000b1de:	bf00      	nop
        NETIF_FOREACH(netif) {
7000b1e0:	693b      	ldr	r3, [r7, #16]
7000b1e2:	681b      	ldr	r3, [r3, #0]
7000b1e4:	613b      	str	r3, [r7, #16]
7000b1e6:	693b      	ldr	r3, [r7, #16]
7000b1e8:	2b00      	cmp	r3, #0
7000b1ea:	d1ed      	bne.n	7000b1c8 <ip4_input+0xe8>
7000b1ec:	e000      	b.n	7000b1f0 <ip4_input+0x110>
            break;
7000b1ee:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
7000b1f0:	4b4b      	ldr	r3, [pc, #300]	@ (7000b320 <ip4_input+0x240>)
7000b1f2:	691b      	ldr	r3, [r3, #16]
7000b1f4:	6839      	ldr	r1, [r7, #0]
7000b1f6:	4618      	mov	r0, r3
7000b1f8:	f000 f96e 	bl	7000b4d8 <ip4_addr_isbroadcast_u32>
7000b1fc:	4603      	mov	r3, r0
7000b1fe:	2b00      	cmp	r3, #0
7000b200:	d105      	bne.n	7000b20e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
7000b202:	4b47      	ldr	r3, [pc, #284]	@ (7000b320 <ip4_input+0x240>)
7000b204:	691b      	ldr	r3, [r3, #16]
7000b206:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
7000b20a:	2be0      	cmp	r3, #224	@ 0xe0
7000b20c:	d104      	bne.n	7000b218 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
7000b20e:	6878      	ldr	r0, [r7, #4]
7000b210:	f002 fb12 	bl	7000d838 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
7000b214:	2300      	movs	r3, #0
7000b216:	e07e      	b.n	7000b316 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
7000b218:	693b      	ldr	r3, [r7, #16]
7000b21a:	2b00      	cmp	r3, #0
7000b21c:	d104      	bne.n	7000b228 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
7000b21e:	6878      	ldr	r0, [r7, #4]
7000b220:	f002 fb0a 	bl	7000d838 <pbuf_free>
    return ERR_OK;
7000b224:	2300      	movs	r3, #0
7000b226:	e076      	b.n	7000b316 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
7000b228:	697b      	ldr	r3, [r7, #20]
7000b22a:	88db      	ldrh	r3, [r3, #6]
7000b22c:	b29b      	uxth	r3, r3
7000b22e:	461a      	mov	r2, r3
7000b230:	f64f 733f 	movw	r3, #65343	@ 0xff3f
7000b234:	4013      	ands	r3, r2
7000b236:	2b00      	cmp	r3, #0
7000b238:	d00b      	beq.n	7000b252 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
7000b23a:	6878      	ldr	r0, [r7, #4]
7000b23c:	f000 fc92 	bl	7000bb64 <ip4_reass>
7000b240:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
7000b242:	687b      	ldr	r3, [r7, #4]
7000b244:	2b00      	cmp	r3, #0
7000b246:	d101      	bne.n	7000b24c <ip4_input+0x16c>
      return ERR_OK;
7000b248:	2300      	movs	r3, #0
7000b24a:	e064      	b.n	7000b316 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
7000b24c:	687b      	ldr	r3, [r7, #4]
7000b24e:	685b      	ldr	r3, [r3, #4]
7000b250:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
7000b252:	4a33      	ldr	r2, [pc, #204]	@ (7000b320 <ip4_input+0x240>)
7000b254:	693b      	ldr	r3, [r7, #16]
7000b256:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
7000b258:	4a31      	ldr	r2, [pc, #196]	@ (7000b320 <ip4_input+0x240>)
7000b25a:	683b      	ldr	r3, [r7, #0]
7000b25c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
7000b25e:	4a30      	ldr	r2, [pc, #192]	@ (7000b320 <ip4_input+0x240>)
7000b260:	697b      	ldr	r3, [r7, #20]
7000b262:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
7000b264:	697b      	ldr	r3, [r7, #20]
7000b266:	781b      	ldrb	r3, [r3, #0]
7000b268:	f003 030f 	and.w	r3, r3, #15
7000b26c:	b2db      	uxtb	r3, r3
7000b26e:	009b      	lsls	r3, r3, #2
7000b270:	b2db      	uxtb	r3, r3
7000b272:	461a      	mov	r2, r3
7000b274:	4b2a      	ldr	r3, [pc, #168]	@ (7000b320 <ip4_input+0x240>)
7000b276:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
7000b278:	89fb      	ldrh	r3, [r7, #14]
7000b27a:	4619      	mov	r1, r3
7000b27c:	6878      	ldr	r0, [r7, #4]
7000b27e:	f002 fa5f 	bl	7000d740 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
7000b282:	697b      	ldr	r3, [r7, #20]
7000b284:	7a5b      	ldrb	r3, [r3, #9]
7000b286:	2b11      	cmp	r3, #17
7000b288:	d006      	beq.n	7000b298 <ip4_input+0x1b8>
7000b28a:	2b11      	cmp	r3, #17
7000b28c:	dc13      	bgt.n	7000b2b6 <ip4_input+0x1d6>
7000b28e:	2b01      	cmp	r3, #1
7000b290:	d00c      	beq.n	7000b2ac <ip4_input+0x1cc>
7000b292:	2b06      	cmp	r3, #6
7000b294:	d005      	beq.n	7000b2a2 <ip4_input+0x1c2>
7000b296:	e00e      	b.n	7000b2b6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
7000b298:	6839      	ldr	r1, [r7, #0]
7000b29a:	6878      	ldr	r0, [r7, #4]
7000b29c:	f008 faf4 	bl	70013888 <udp_input>
        break;
7000b2a0:	e026      	b.n	7000b2f0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
7000b2a2:	6839      	ldr	r1, [r7, #0]
7000b2a4:	6878      	ldr	r0, [r7, #4]
7000b2a6:	f004 f99f 	bl	7000f5e8 <tcp_input>
        break;
7000b2aa:	e021      	b.n	7000b2f0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
7000b2ac:	6839      	ldr	r1, [r7, #0]
7000b2ae:	6878      	ldr	r0, [r7, #4]
7000b2b0:	f7ff fbe4 	bl	7000aa7c <icmp_input>
        break;
7000b2b4:	e01c      	b.n	7000b2f0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
7000b2b6:	4b1a      	ldr	r3, [pc, #104]	@ (7000b320 <ip4_input+0x240>)
7000b2b8:	695b      	ldr	r3, [r3, #20]
7000b2ba:	6939      	ldr	r1, [r7, #16]
7000b2bc:	4618      	mov	r0, r3
7000b2be:	f000 f90b 	bl	7000b4d8 <ip4_addr_isbroadcast_u32>
7000b2c2:	4603      	mov	r3, r0
7000b2c4:	2b00      	cmp	r3, #0
7000b2c6:	d10f      	bne.n	7000b2e8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
7000b2c8:	4b15      	ldr	r3, [pc, #84]	@ (7000b320 <ip4_input+0x240>)
7000b2ca:	695b      	ldr	r3, [r3, #20]
7000b2cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
7000b2d0:	2be0      	cmp	r3, #224	@ 0xe0
7000b2d2:	d009      	beq.n	7000b2e8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
7000b2d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
7000b2d8:	4619      	mov	r1, r3
7000b2da:	6878      	ldr	r0, [r7, #4]
7000b2dc:	f002 fa99 	bl	7000d812 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
7000b2e0:	2102      	movs	r1, #2
7000b2e2:	6878      	ldr	r0, [r7, #4]
7000b2e4:	f7ff fcea 	bl	7000acbc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
7000b2e8:	6878      	ldr	r0, [r7, #4]
7000b2ea:	f002 faa5 	bl	7000d838 <pbuf_free>
        break;
7000b2ee:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
7000b2f0:	4b0b      	ldr	r3, [pc, #44]	@ (7000b320 <ip4_input+0x240>)
7000b2f2:	2200      	movs	r2, #0
7000b2f4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
7000b2f6:	4b0a      	ldr	r3, [pc, #40]	@ (7000b320 <ip4_input+0x240>)
7000b2f8:	2200      	movs	r2, #0
7000b2fa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
7000b2fc:	4b08      	ldr	r3, [pc, #32]	@ (7000b320 <ip4_input+0x240>)
7000b2fe:	2200      	movs	r2, #0
7000b300:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
7000b302:	4b07      	ldr	r3, [pc, #28]	@ (7000b320 <ip4_input+0x240>)
7000b304:	2200      	movs	r2, #0
7000b306:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
7000b308:	4b05      	ldr	r3, [pc, #20]	@ (7000b320 <ip4_input+0x240>)
7000b30a:	2200      	movs	r2, #0
7000b30c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
7000b30e:	4b04      	ldr	r3, [pc, #16]	@ (7000b320 <ip4_input+0x240>)
7000b310:	2200      	movs	r2, #0
7000b312:	615a      	str	r2, [r3, #20]

  return ERR_OK;
7000b314:	2300      	movs	r3, #0
}
7000b316:	4618      	mov	r0, r3
7000b318:	3718      	adds	r7, #24
7000b31a:	46bd      	mov	sp, r7
7000b31c:	bd80      	pop	{r7, pc}
7000b31e:	bf00      	nop
7000b320:	24005368 	.word	0x24005368
7000b324:	24008468 	.word	0x24008468

7000b328 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
7000b328:	b580      	push	{r7, lr}
7000b32a:	b08a      	sub	sp, #40	@ 0x28
7000b32c:	af04      	add	r7, sp, #16
7000b32e:	60f8      	str	r0, [r7, #12]
7000b330:	60b9      	str	r1, [r7, #8]
7000b332:	607a      	str	r2, [r7, #4]
7000b334:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
7000b336:	68bb      	ldr	r3, [r7, #8]
7000b338:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
7000b33a:	687b      	ldr	r3, [r7, #4]
7000b33c:	2b00      	cmp	r3, #0
7000b33e:	d009      	beq.n	7000b354 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
7000b340:	68bb      	ldr	r3, [r7, #8]
7000b342:	2b00      	cmp	r3, #0
7000b344:	d003      	beq.n	7000b34e <ip4_output_if+0x26>
7000b346:	68bb      	ldr	r3, [r7, #8]
7000b348:	681b      	ldr	r3, [r3, #0]
7000b34a:	2b00      	cmp	r3, #0
7000b34c:	d102      	bne.n	7000b354 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
7000b34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000b350:	3304      	adds	r3, #4
7000b352:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
7000b354:	78fa      	ldrb	r2, [r7, #3]
7000b356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000b358:	9302      	str	r3, [sp, #8]
7000b35a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
7000b35e:	9301      	str	r3, [sp, #4]
7000b360:	f897 3020 	ldrb.w	r3, [r7, #32]
7000b364:	9300      	str	r3, [sp, #0]
7000b366:	4613      	mov	r3, r2
7000b368:	687a      	ldr	r2, [r7, #4]
7000b36a:	6979      	ldr	r1, [r7, #20]
7000b36c:	68f8      	ldr	r0, [r7, #12]
7000b36e:	f000 f805 	bl	7000b37c <ip4_output_if_src>
7000b372:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
7000b374:	4618      	mov	r0, r3
7000b376:	3718      	adds	r7, #24
7000b378:	46bd      	mov	sp, r7
7000b37a:	bd80      	pop	{r7, pc}

7000b37c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
7000b37c:	b580      	push	{r7, lr}
7000b37e:	b088      	sub	sp, #32
7000b380:	af00      	add	r7, sp, #0
7000b382:	60f8      	str	r0, [r7, #12]
7000b384:	60b9      	str	r1, [r7, #8]
7000b386:	607a      	str	r2, [r7, #4]
7000b388:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
7000b38a:	68fb      	ldr	r3, [r7, #12]
7000b38c:	7b9b      	ldrb	r3, [r3, #14]
7000b38e:	2b01      	cmp	r3, #1
7000b390:	d006      	beq.n	7000b3a0 <ip4_output_if_src+0x24>
7000b392:	4b4b      	ldr	r3, [pc, #300]	@ (7000b4c0 <ip4_output_if_src+0x144>)
7000b394:	f44f 7255 	mov.w	r2, #852	@ 0x354
7000b398:	494a      	ldr	r1, [pc, #296]	@ (7000b4c4 <ip4_output_if_src+0x148>)
7000b39a:	484b      	ldr	r0, [pc, #300]	@ (7000b4c8 <ip4_output_if_src+0x14c>)
7000b39c:	f008 fcb8 	bl	70013d10 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
7000b3a0:	687b      	ldr	r3, [r7, #4]
7000b3a2:	2b00      	cmp	r3, #0
7000b3a4:	d060      	beq.n	7000b468 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
7000b3a6:	2314      	movs	r3, #20
7000b3a8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
7000b3aa:	2114      	movs	r1, #20
7000b3ac:	68f8      	ldr	r0, [r7, #12]
7000b3ae:	f002 f9b7 	bl	7000d720 <pbuf_add_header>
7000b3b2:	4603      	mov	r3, r0
7000b3b4:	2b00      	cmp	r3, #0
7000b3b6:	d002      	beq.n	7000b3be <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
7000b3b8:	f06f 0301 	mvn.w	r3, #1
7000b3bc:	e07c      	b.n	7000b4b8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
7000b3be:	68fb      	ldr	r3, [r7, #12]
7000b3c0:	685b      	ldr	r3, [r3, #4]
7000b3c2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
7000b3c4:	68fb      	ldr	r3, [r7, #12]
7000b3c6:	895b      	ldrh	r3, [r3, #10]
7000b3c8:	2b13      	cmp	r3, #19
7000b3ca:	d806      	bhi.n	7000b3da <ip4_output_if_src+0x5e>
7000b3cc:	4b3c      	ldr	r3, [pc, #240]	@ (7000b4c0 <ip4_output_if_src+0x144>)
7000b3ce:	f44f 7262 	mov.w	r2, #904	@ 0x388
7000b3d2:	493e      	ldr	r1, [pc, #248]	@ (7000b4cc <ip4_output_if_src+0x150>)
7000b3d4:	483c      	ldr	r0, [pc, #240]	@ (7000b4c8 <ip4_output_if_src+0x14c>)
7000b3d6:	f008 fc9b 	bl	70013d10 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
7000b3da:	69fb      	ldr	r3, [r7, #28]
7000b3dc:	78fa      	ldrb	r2, [r7, #3]
7000b3de:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
7000b3e0:	69fb      	ldr	r3, [r7, #28]
7000b3e2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
7000b3e6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
7000b3e8:	687b      	ldr	r3, [r7, #4]
7000b3ea:	681a      	ldr	r2, [r3, #0]
7000b3ec:	69fb      	ldr	r3, [r7, #28]
7000b3ee:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
7000b3f0:	8b7b      	ldrh	r3, [r7, #26]
7000b3f2:	089b      	lsrs	r3, r3, #2
7000b3f4:	b29b      	uxth	r3, r3
7000b3f6:	b2db      	uxtb	r3, r3
7000b3f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
7000b3fc:	b2da      	uxtb	r2, r3
7000b3fe:	69fb      	ldr	r3, [r7, #28]
7000b400:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
7000b402:	69fb      	ldr	r3, [r7, #28]
7000b404:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
7000b408:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
7000b40a:	68fb      	ldr	r3, [r7, #12]
7000b40c:	891b      	ldrh	r3, [r3, #8]
7000b40e:	4618      	mov	r0, r3
7000b410:	f7fe fad6 	bl	700099c0 <lwip_htons>
7000b414:	4603      	mov	r3, r0
7000b416:	461a      	mov	r2, r3
7000b418:	69fb      	ldr	r3, [r7, #28]
7000b41a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
7000b41c:	69fb      	ldr	r3, [r7, #28]
7000b41e:	2200      	movs	r2, #0
7000b420:	719a      	strb	r2, [r3, #6]
7000b422:	2200      	movs	r2, #0
7000b424:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
7000b426:	4b2a      	ldr	r3, [pc, #168]	@ (7000b4d0 <ip4_output_if_src+0x154>)
7000b428:	881b      	ldrh	r3, [r3, #0]
7000b42a:	4618      	mov	r0, r3
7000b42c:	f7fe fac8 	bl	700099c0 <lwip_htons>
7000b430:	4603      	mov	r3, r0
7000b432:	461a      	mov	r2, r3
7000b434:	69fb      	ldr	r3, [r7, #28]
7000b436:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
7000b438:	4b25      	ldr	r3, [pc, #148]	@ (7000b4d0 <ip4_output_if_src+0x154>)
7000b43a:	881b      	ldrh	r3, [r3, #0]
7000b43c:	3301      	adds	r3, #1
7000b43e:	b29a      	uxth	r2, r3
7000b440:	4b23      	ldr	r3, [pc, #140]	@ (7000b4d0 <ip4_output_if_src+0x154>)
7000b442:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
7000b444:	68bb      	ldr	r3, [r7, #8]
7000b446:	2b00      	cmp	r3, #0
7000b448:	d104      	bne.n	7000b454 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
7000b44a:	4b22      	ldr	r3, [pc, #136]	@ (7000b4d4 <ip4_output_if_src+0x158>)
7000b44c:	681a      	ldr	r2, [r3, #0]
7000b44e:	69fb      	ldr	r3, [r7, #28]
7000b450:	60da      	str	r2, [r3, #12]
7000b452:	e003      	b.n	7000b45c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
7000b454:	68bb      	ldr	r3, [r7, #8]
7000b456:	681a      	ldr	r2, [r3, #0]
7000b458:	69fb      	ldr	r3, [r7, #28]
7000b45a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
7000b45c:	69fb      	ldr	r3, [r7, #28]
7000b45e:	2200      	movs	r2, #0
7000b460:	729a      	strb	r2, [r3, #10]
7000b462:	2200      	movs	r2, #0
7000b464:	72da      	strb	r2, [r3, #11]
7000b466:	e00f      	b.n	7000b488 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
7000b468:	68fb      	ldr	r3, [r7, #12]
7000b46a:	895b      	ldrh	r3, [r3, #10]
7000b46c:	2b13      	cmp	r3, #19
7000b46e:	d802      	bhi.n	7000b476 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
7000b470:	f06f 0301 	mvn.w	r3, #1
7000b474:	e020      	b.n	7000b4b8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
7000b476:	68fb      	ldr	r3, [r7, #12]
7000b478:	685b      	ldr	r3, [r3, #4]
7000b47a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
7000b47c:	69fb      	ldr	r3, [r7, #28]
7000b47e:	691b      	ldr	r3, [r3, #16]
7000b480:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
7000b482:	f107 0314 	add.w	r3, r7, #20
7000b486:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
7000b488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000b48a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
7000b48c:	2b00      	cmp	r3, #0
7000b48e:	d00c      	beq.n	7000b4aa <ip4_output_if_src+0x12e>
7000b490:	68fb      	ldr	r3, [r7, #12]
7000b492:	891a      	ldrh	r2, [r3, #8]
7000b494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000b496:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
7000b498:	429a      	cmp	r2, r3
7000b49a:	d906      	bls.n	7000b4aa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
7000b49c:	687a      	ldr	r2, [r7, #4]
7000b49e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
7000b4a0:	68f8      	ldr	r0, [r7, #12]
7000b4a2:	f000 fd53 	bl	7000bf4c <ip4_frag>
7000b4a6:	4603      	mov	r3, r0
7000b4a8:	e006      	b.n	7000b4b8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
7000b4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000b4ac:	695b      	ldr	r3, [r3, #20]
7000b4ae:	687a      	ldr	r2, [r7, #4]
7000b4b0:	68f9      	ldr	r1, [r7, #12]
7000b4b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
7000b4b4:	4798      	blx	r3
7000b4b6:	4603      	mov	r3, r0
}
7000b4b8:	4618      	mov	r0, r3
7000b4ba:	3720      	adds	r7, #32
7000b4bc:	46bd      	mov	sp, r7
7000b4be:	bd80      	pop	{r7, pc}
7000b4c0:	7001510c 	.word	0x7001510c
7000b4c4:	70015170 	.word	0x70015170
7000b4c8:	7001517c 	.word	0x7001517c
7000b4cc:	700151a4 	.word	0x700151a4
7000b4d0:	24005380 	.word	0x24005380
7000b4d4:	7001725c 	.word	0x7001725c

7000b4d8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
7000b4d8:	b480      	push	{r7}
7000b4da:	b085      	sub	sp, #20
7000b4dc:	af00      	add	r7, sp, #0
7000b4de:	6078      	str	r0, [r7, #4]
7000b4e0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
7000b4e2:	687b      	ldr	r3, [r7, #4]
7000b4e4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
7000b4e6:	687b      	ldr	r3, [r7, #4]
7000b4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
7000b4ec:	d002      	beq.n	7000b4f4 <ip4_addr_isbroadcast_u32+0x1c>
7000b4ee:	687b      	ldr	r3, [r7, #4]
7000b4f0:	2b00      	cmp	r3, #0
7000b4f2:	d101      	bne.n	7000b4f8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
7000b4f4:	2301      	movs	r3, #1
7000b4f6:	e02a      	b.n	7000b54e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
7000b4f8:	683b      	ldr	r3, [r7, #0]
7000b4fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000b4fe:	f003 0302 	and.w	r3, r3, #2
7000b502:	2b00      	cmp	r3, #0
7000b504:	d101      	bne.n	7000b50a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
7000b506:	2300      	movs	r3, #0
7000b508:	e021      	b.n	7000b54e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
7000b50a:	683b      	ldr	r3, [r7, #0]
7000b50c:	3304      	adds	r3, #4
7000b50e:	681b      	ldr	r3, [r3, #0]
7000b510:	687a      	ldr	r2, [r7, #4]
7000b512:	429a      	cmp	r2, r3
7000b514:	d101      	bne.n	7000b51a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
7000b516:	2300      	movs	r3, #0
7000b518:	e019      	b.n	7000b54e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
7000b51a:	68fa      	ldr	r2, [r7, #12]
7000b51c:	683b      	ldr	r3, [r7, #0]
7000b51e:	3304      	adds	r3, #4
7000b520:	681b      	ldr	r3, [r3, #0]
7000b522:	405a      	eors	r2, r3
7000b524:	683b      	ldr	r3, [r7, #0]
7000b526:	3308      	adds	r3, #8
7000b528:	681b      	ldr	r3, [r3, #0]
7000b52a:	4013      	ands	r3, r2
7000b52c:	2b00      	cmp	r3, #0
7000b52e:	d10d      	bne.n	7000b54c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
7000b530:	683b      	ldr	r3, [r7, #0]
7000b532:	3308      	adds	r3, #8
7000b534:	681b      	ldr	r3, [r3, #0]
7000b536:	43da      	mvns	r2, r3
7000b538:	687b      	ldr	r3, [r7, #4]
7000b53a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
7000b53c:	683b      	ldr	r3, [r7, #0]
7000b53e:	3308      	adds	r3, #8
7000b540:	681b      	ldr	r3, [r3, #0]
7000b542:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
7000b544:	429a      	cmp	r2, r3
7000b546:	d101      	bne.n	7000b54c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
7000b548:	2301      	movs	r3, #1
7000b54a:	e000      	b.n	7000b54e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
7000b54c:	2300      	movs	r3, #0
  }
}
7000b54e:	4618      	mov	r0, r3
7000b550:	3714      	adds	r7, #20
7000b552:	46bd      	mov	sp, r7
7000b554:	f85d 7b04 	ldr.w	r7, [sp], #4
7000b558:	4770      	bx	lr
	...

7000b55c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
7000b55c:	b580      	push	{r7, lr}
7000b55e:	b084      	sub	sp, #16
7000b560:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
7000b562:	2300      	movs	r3, #0
7000b564:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
7000b566:	4b12      	ldr	r3, [pc, #72]	@ (7000b5b0 <ip_reass_tmr+0x54>)
7000b568:	681b      	ldr	r3, [r3, #0]
7000b56a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
7000b56c:	e018      	b.n	7000b5a0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
7000b56e:	68fb      	ldr	r3, [r7, #12]
7000b570:	7fdb      	ldrb	r3, [r3, #31]
7000b572:	2b00      	cmp	r3, #0
7000b574:	d00b      	beq.n	7000b58e <ip_reass_tmr+0x32>
      r->timer--;
7000b576:	68fb      	ldr	r3, [r7, #12]
7000b578:	7fdb      	ldrb	r3, [r3, #31]
7000b57a:	3b01      	subs	r3, #1
7000b57c:	b2da      	uxtb	r2, r3
7000b57e:	68fb      	ldr	r3, [r7, #12]
7000b580:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
7000b582:	68fb      	ldr	r3, [r7, #12]
7000b584:	60bb      	str	r3, [r7, #8]
      r = r->next;
7000b586:	68fb      	ldr	r3, [r7, #12]
7000b588:	681b      	ldr	r3, [r3, #0]
7000b58a:	60fb      	str	r3, [r7, #12]
7000b58c:	e008      	b.n	7000b5a0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
7000b58e:	68fb      	ldr	r3, [r7, #12]
7000b590:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
7000b592:	68fb      	ldr	r3, [r7, #12]
7000b594:	681b      	ldr	r3, [r3, #0]
7000b596:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
7000b598:	68b9      	ldr	r1, [r7, #8]
7000b59a:	6878      	ldr	r0, [r7, #4]
7000b59c:	f000 f80a 	bl	7000b5b4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
7000b5a0:	68fb      	ldr	r3, [r7, #12]
7000b5a2:	2b00      	cmp	r3, #0
7000b5a4:	d1e3      	bne.n	7000b56e <ip_reass_tmr+0x12>
    }
  }
}
7000b5a6:	bf00      	nop
7000b5a8:	bf00      	nop
7000b5aa:	3710      	adds	r7, #16
7000b5ac:	46bd      	mov	sp, r7
7000b5ae:	bd80      	pop	{r7, pc}
7000b5b0:	24005384 	.word	0x24005384

7000b5b4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
7000b5b4:	b580      	push	{r7, lr}
7000b5b6:	b088      	sub	sp, #32
7000b5b8:	af00      	add	r7, sp, #0
7000b5ba:	6078      	str	r0, [r7, #4]
7000b5bc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
7000b5be:	2300      	movs	r3, #0
7000b5c0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
7000b5c2:	683a      	ldr	r2, [r7, #0]
7000b5c4:	687b      	ldr	r3, [r7, #4]
7000b5c6:	429a      	cmp	r2, r3
7000b5c8:	d105      	bne.n	7000b5d6 <ip_reass_free_complete_datagram+0x22>
7000b5ca:	4b45      	ldr	r3, [pc, #276]	@ (7000b6e0 <ip_reass_free_complete_datagram+0x12c>)
7000b5cc:	22ab      	movs	r2, #171	@ 0xab
7000b5ce:	4945      	ldr	r1, [pc, #276]	@ (7000b6e4 <ip_reass_free_complete_datagram+0x130>)
7000b5d0:	4845      	ldr	r0, [pc, #276]	@ (7000b6e8 <ip_reass_free_complete_datagram+0x134>)
7000b5d2:	f008 fb9d 	bl	70013d10 <iprintf>
  if (prev != NULL) {
7000b5d6:	683b      	ldr	r3, [r7, #0]
7000b5d8:	2b00      	cmp	r3, #0
7000b5da:	d00a      	beq.n	7000b5f2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
7000b5dc:	683b      	ldr	r3, [r7, #0]
7000b5de:	681b      	ldr	r3, [r3, #0]
7000b5e0:	687a      	ldr	r2, [r7, #4]
7000b5e2:	429a      	cmp	r2, r3
7000b5e4:	d005      	beq.n	7000b5f2 <ip_reass_free_complete_datagram+0x3e>
7000b5e6:	4b3e      	ldr	r3, [pc, #248]	@ (7000b6e0 <ip_reass_free_complete_datagram+0x12c>)
7000b5e8:	22ad      	movs	r2, #173	@ 0xad
7000b5ea:	4940      	ldr	r1, [pc, #256]	@ (7000b6ec <ip_reass_free_complete_datagram+0x138>)
7000b5ec:	483e      	ldr	r0, [pc, #248]	@ (7000b6e8 <ip_reass_free_complete_datagram+0x134>)
7000b5ee:	f008 fb8f 	bl	70013d10 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
7000b5f2:	687b      	ldr	r3, [r7, #4]
7000b5f4:	685b      	ldr	r3, [r3, #4]
7000b5f6:	685b      	ldr	r3, [r3, #4]
7000b5f8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
7000b5fa:	697b      	ldr	r3, [r7, #20]
7000b5fc:	889b      	ldrh	r3, [r3, #4]
7000b5fe:	b29b      	uxth	r3, r3
7000b600:	2b00      	cmp	r3, #0
7000b602:	d12a      	bne.n	7000b65a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
7000b604:	687b      	ldr	r3, [r7, #4]
7000b606:	685b      	ldr	r3, [r3, #4]
7000b608:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
7000b60a:	697b      	ldr	r3, [r7, #20]
7000b60c:	681a      	ldr	r2, [r3, #0]
7000b60e:	687b      	ldr	r3, [r7, #4]
7000b610:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
7000b612:	69bb      	ldr	r3, [r7, #24]
7000b614:	6858      	ldr	r0, [r3, #4]
7000b616:	687b      	ldr	r3, [r7, #4]
7000b618:	3308      	adds	r3, #8
7000b61a:	2214      	movs	r2, #20
7000b61c:	4619      	mov	r1, r3
7000b61e:	f008 fca8 	bl	70013f72 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
7000b622:	2101      	movs	r1, #1
7000b624:	69b8      	ldr	r0, [r7, #24]
7000b626:	f7ff fb59 	bl	7000acdc <icmp_time_exceeded>
    clen = pbuf_clen(p);
7000b62a:	69b8      	ldr	r0, [r7, #24]
7000b62c:	f002 f992 	bl	7000d954 <pbuf_clen>
7000b630:	4603      	mov	r3, r0
7000b632:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
7000b634:	8bfa      	ldrh	r2, [r7, #30]
7000b636:	8a7b      	ldrh	r3, [r7, #18]
7000b638:	4413      	add	r3, r2
7000b63a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
7000b63e:	db05      	blt.n	7000b64c <ip_reass_free_complete_datagram+0x98>
7000b640:	4b27      	ldr	r3, [pc, #156]	@ (7000b6e0 <ip_reass_free_complete_datagram+0x12c>)
7000b642:	22bc      	movs	r2, #188	@ 0xbc
7000b644:	492a      	ldr	r1, [pc, #168]	@ (7000b6f0 <ip_reass_free_complete_datagram+0x13c>)
7000b646:	4828      	ldr	r0, [pc, #160]	@ (7000b6e8 <ip_reass_free_complete_datagram+0x134>)
7000b648:	f008 fb62 	bl	70013d10 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
7000b64c:	8bfa      	ldrh	r2, [r7, #30]
7000b64e:	8a7b      	ldrh	r3, [r7, #18]
7000b650:	4413      	add	r3, r2
7000b652:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
7000b654:	69b8      	ldr	r0, [r7, #24]
7000b656:	f002 f8ef 	bl	7000d838 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
7000b65a:	687b      	ldr	r3, [r7, #4]
7000b65c:	685b      	ldr	r3, [r3, #4]
7000b65e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
7000b660:	e01f      	b.n	7000b6a2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
7000b662:	69bb      	ldr	r3, [r7, #24]
7000b664:	685b      	ldr	r3, [r3, #4]
7000b666:	617b      	str	r3, [r7, #20]
    pcur = p;
7000b668:	69bb      	ldr	r3, [r7, #24]
7000b66a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
7000b66c:	697b      	ldr	r3, [r7, #20]
7000b66e:	681b      	ldr	r3, [r3, #0]
7000b670:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
7000b672:	68f8      	ldr	r0, [r7, #12]
7000b674:	f002 f96e 	bl	7000d954 <pbuf_clen>
7000b678:	4603      	mov	r3, r0
7000b67a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
7000b67c:	8bfa      	ldrh	r2, [r7, #30]
7000b67e:	8a7b      	ldrh	r3, [r7, #18]
7000b680:	4413      	add	r3, r2
7000b682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
7000b686:	db05      	blt.n	7000b694 <ip_reass_free_complete_datagram+0xe0>
7000b688:	4b15      	ldr	r3, [pc, #84]	@ (7000b6e0 <ip_reass_free_complete_datagram+0x12c>)
7000b68a:	22cc      	movs	r2, #204	@ 0xcc
7000b68c:	4918      	ldr	r1, [pc, #96]	@ (7000b6f0 <ip_reass_free_complete_datagram+0x13c>)
7000b68e:	4816      	ldr	r0, [pc, #88]	@ (7000b6e8 <ip_reass_free_complete_datagram+0x134>)
7000b690:	f008 fb3e 	bl	70013d10 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
7000b694:	8bfa      	ldrh	r2, [r7, #30]
7000b696:	8a7b      	ldrh	r3, [r7, #18]
7000b698:	4413      	add	r3, r2
7000b69a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
7000b69c:	68f8      	ldr	r0, [r7, #12]
7000b69e:	f002 f8cb 	bl	7000d838 <pbuf_free>
  while (p != NULL) {
7000b6a2:	69bb      	ldr	r3, [r7, #24]
7000b6a4:	2b00      	cmp	r3, #0
7000b6a6:	d1dc      	bne.n	7000b662 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
7000b6a8:	6839      	ldr	r1, [r7, #0]
7000b6aa:	6878      	ldr	r0, [r7, #4]
7000b6ac:	f000 f8c2 	bl	7000b834 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
7000b6b0:	4b10      	ldr	r3, [pc, #64]	@ (7000b6f4 <ip_reass_free_complete_datagram+0x140>)
7000b6b2:	881b      	ldrh	r3, [r3, #0]
7000b6b4:	8bfa      	ldrh	r2, [r7, #30]
7000b6b6:	429a      	cmp	r2, r3
7000b6b8:	d905      	bls.n	7000b6c6 <ip_reass_free_complete_datagram+0x112>
7000b6ba:	4b09      	ldr	r3, [pc, #36]	@ (7000b6e0 <ip_reass_free_complete_datagram+0x12c>)
7000b6bc:	22d2      	movs	r2, #210	@ 0xd2
7000b6be:	490e      	ldr	r1, [pc, #56]	@ (7000b6f8 <ip_reass_free_complete_datagram+0x144>)
7000b6c0:	4809      	ldr	r0, [pc, #36]	@ (7000b6e8 <ip_reass_free_complete_datagram+0x134>)
7000b6c2:	f008 fb25 	bl	70013d10 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
7000b6c6:	4b0b      	ldr	r3, [pc, #44]	@ (7000b6f4 <ip_reass_free_complete_datagram+0x140>)
7000b6c8:	881a      	ldrh	r2, [r3, #0]
7000b6ca:	8bfb      	ldrh	r3, [r7, #30]
7000b6cc:	1ad3      	subs	r3, r2, r3
7000b6ce:	b29a      	uxth	r2, r3
7000b6d0:	4b08      	ldr	r3, [pc, #32]	@ (7000b6f4 <ip_reass_free_complete_datagram+0x140>)
7000b6d2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
7000b6d4:	8bfb      	ldrh	r3, [r7, #30]
}
7000b6d6:	4618      	mov	r0, r3
7000b6d8:	3720      	adds	r7, #32
7000b6da:	46bd      	mov	sp, r7
7000b6dc:	bd80      	pop	{r7, pc}
7000b6de:	bf00      	nop
7000b6e0:	700151d4 	.word	0x700151d4
7000b6e4:	7001523c 	.word	0x7001523c
7000b6e8:	70015248 	.word	0x70015248
7000b6ec:	70015270 	.word	0x70015270
7000b6f0:	70015284 	.word	0x70015284
7000b6f4:	24005388 	.word	0x24005388
7000b6f8:	700152a4 	.word	0x700152a4

7000b6fc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
7000b6fc:	b580      	push	{r7, lr}
7000b6fe:	b08a      	sub	sp, #40	@ 0x28
7000b700:	af00      	add	r7, sp, #0
7000b702:	6078      	str	r0, [r7, #4]
7000b704:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
7000b706:	2300      	movs	r3, #0
7000b708:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
7000b70a:	2300      	movs	r3, #0
7000b70c:	623b      	str	r3, [r7, #32]
    prev = NULL;
7000b70e:	2300      	movs	r3, #0
7000b710:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
7000b712:	2300      	movs	r3, #0
7000b714:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
7000b716:	2300      	movs	r3, #0
7000b718:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
7000b71a:	4b28      	ldr	r3, [pc, #160]	@ (7000b7bc <ip_reass_remove_oldest_datagram+0xc0>)
7000b71c:	681b      	ldr	r3, [r3, #0]
7000b71e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
7000b720:	e030      	b.n	7000b784 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
7000b722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b724:	695a      	ldr	r2, [r3, #20]
7000b726:	687b      	ldr	r3, [r7, #4]
7000b728:	68db      	ldr	r3, [r3, #12]
7000b72a:	429a      	cmp	r2, r3
7000b72c:	d10c      	bne.n	7000b748 <ip_reass_remove_oldest_datagram+0x4c>
7000b72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b730:	699a      	ldr	r2, [r3, #24]
7000b732:	687b      	ldr	r3, [r7, #4]
7000b734:	691b      	ldr	r3, [r3, #16]
7000b736:	429a      	cmp	r2, r3
7000b738:	d106      	bne.n	7000b748 <ip_reass_remove_oldest_datagram+0x4c>
7000b73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b73c:	899a      	ldrh	r2, [r3, #12]
7000b73e:	687b      	ldr	r3, [r7, #4]
7000b740:	889b      	ldrh	r3, [r3, #4]
7000b742:	b29b      	uxth	r3, r3
7000b744:	429a      	cmp	r2, r3
7000b746:	d014      	beq.n	7000b772 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
7000b748:	693b      	ldr	r3, [r7, #16]
7000b74a:	3301      	adds	r3, #1
7000b74c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
7000b74e:	6a3b      	ldr	r3, [r7, #32]
7000b750:	2b00      	cmp	r3, #0
7000b752:	d104      	bne.n	7000b75e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
7000b754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b756:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
7000b758:	69fb      	ldr	r3, [r7, #28]
7000b75a:	61bb      	str	r3, [r7, #24]
7000b75c:	e009      	b.n	7000b772 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
7000b75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b760:	7fda      	ldrb	r2, [r3, #31]
7000b762:	6a3b      	ldr	r3, [r7, #32]
7000b764:	7fdb      	ldrb	r3, [r3, #31]
7000b766:	429a      	cmp	r2, r3
7000b768:	d803      	bhi.n	7000b772 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
7000b76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b76c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
7000b76e:	69fb      	ldr	r3, [r7, #28]
7000b770:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
7000b772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b774:	681b      	ldr	r3, [r3, #0]
7000b776:	2b00      	cmp	r3, #0
7000b778:	d001      	beq.n	7000b77e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
7000b77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b77c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
7000b77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b780:	681b      	ldr	r3, [r3, #0]
7000b782:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
7000b784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b786:	2b00      	cmp	r3, #0
7000b788:	d1cb      	bne.n	7000b722 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
7000b78a:	6a3b      	ldr	r3, [r7, #32]
7000b78c:	2b00      	cmp	r3, #0
7000b78e:	d008      	beq.n	7000b7a2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
7000b790:	69b9      	ldr	r1, [r7, #24]
7000b792:	6a38      	ldr	r0, [r7, #32]
7000b794:	f7ff ff0e 	bl	7000b5b4 <ip_reass_free_complete_datagram>
7000b798:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
7000b79a:	697a      	ldr	r2, [r7, #20]
7000b79c:	68fb      	ldr	r3, [r7, #12]
7000b79e:	4413      	add	r3, r2
7000b7a0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
7000b7a2:	697a      	ldr	r2, [r7, #20]
7000b7a4:	683b      	ldr	r3, [r7, #0]
7000b7a6:	429a      	cmp	r2, r3
7000b7a8:	da02      	bge.n	7000b7b0 <ip_reass_remove_oldest_datagram+0xb4>
7000b7aa:	693b      	ldr	r3, [r7, #16]
7000b7ac:	2b01      	cmp	r3, #1
7000b7ae:	dcac      	bgt.n	7000b70a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
7000b7b0:	697b      	ldr	r3, [r7, #20]
}
7000b7b2:	4618      	mov	r0, r3
7000b7b4:	3728      	adds	r7, #40	@ 0x28
7000b7b6:	46bd      	mov	sp, r7
7000b7b8:	bd80      	pop	{r7, pc}
7000b7ba:	bf00      	nop
7000b7bc:	24005384 	.word	0x24005384

7000b7c0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
7000b7c0:	b580      	push	{r7, lr}
7000b7c2:	b084      	sub	sp, #16
7000b7c4:	af00      	add	r7, sp, #0
7000b7c6:	6078      	str	r0, [r7, #4]
7000b7c8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
7000b7ca:	2004      	movs	r0, #4
7000b7cc:	f001 f988 	bl	7000cae0 <memp_malloc>
7000b7d0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
7000b7d2:	68fb      	ldr	r3, [r7, #12]
7000b7d4:	2b00      	cmp	r3, #0
7000b7d6:	d110      	bne.n	7000b7fa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
7000b7d8:	6839      	ldr	r1, [r7, #0]
7000b7da:	6878      	ldr	r0, [r7, #4]
7000b7dc:	f7ff ff8e 	bl	7000b6fc <ip_reass_remove_oldest_datagram>
7000b7e0:	4602      	mov	r2, r0
7000b7e2:	683b      	ldr	r3, [r7, #0]
7000b7e4:	4293      	cmp	r3, r2
7000b7e6:	dc03      	bgt.n	7000b7f0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
7000b7e8:	2004      	movs	r0, #4
7000b7ea:	f001 f979 	bl	7000cae0 <memp_malloc>
7000b7ee:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
7000b7f0:	68fb      	ldr	r3, [r7, #12]
7000b7f2:	2b00      	cmp	r3, #0
7000b7f4:	d101      	bne.n	7000b7fa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
7000b7f6:	2300      	movs	r3, #0
7000b7f8:	e016      	b.n	7000b828 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
7000b7fa:	2220      	movs	r2, #32
7000b7fc:	2100      	movs	r1, #0
7000b7fe:	68f8      	ldr	r0, [r7, #12]
7000b800:	f008 faeb 	bl	70013dda <memset>
  ipr->timer = IP_REASS_MAXAGE;
7000b804:	68fb      	ldr	r3, [r7, #12]
7000b806:	220f      	movs	r2, #15
7000b808:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
7000b80a:	4b09      	ldr	r3, [pc, #36]	@ (7000b830 <ip_reass_enqueue_new_datagram+0x70>)
7000b80c:	681a      	ldr	r2, [r3, #0]
7000b80e:	68fb      	ldr	r3, [r7, #12]
7000b810:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
7000b812:	4a07      	ldr	r2, [pc, #28]	@ (7000b830 <ip_reass_enqueue_new_datagram+0x70>)
7000b814:	68fb      	ldr	r3, [r7, #12]
7000b816:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
7000b818:	68fb      	ldr	r3, [r7, #12]
7000b81a:	3308      	adds	r3, #8
7000b81c:	2214      	movs	r2, #20
7000b81e:	6879      	ldr	r1, [r7, #4]
7000b820:	4618      	mov	r0, r3
7000b822:	f008 fba6 	bl	70013f72 <memcpy>
  return ipr;
7000b826:	68fb      	ldr	r3, [r7, #12]
}
7000b828:	4618      	mov	r0, r3
7000b82a:	3710      	adds	r7, #16
7000b82c:	46bd      	mov	sp, r7
7000b82e:	bd80      	pop	{r7, pc}
7000b830:	24005384 	.word	0x24005384

7000b834 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
7000b834:	b580      	push	{r7, lr}
7000b836:	b082      	sub	sp, #8
7000b838:	af00      	add	r7, sp, #0
7000b83a:	6078      	str	r0, [r7, #4]
7000b83c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
7000b83e:	4b10      	ldr	r3, [pc, #64]	@ (7000b880 <ip_reass_dequeue_datagram+0x4c>)
7000b840:	681b      	ldr	r3, [r3, #0]
7000b842:	687a      	ldr	r2, [r7, #4]
7000b844:	429a      	cmp	r2, r3
7000b846:	d104      	bne.n	7000b852 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
7000b848:	687b      	ldr	r3, [r7, #4]
7000b84a:	681b      	ldr	r3, [r3, #0]
7000b84c:	4a0c      	ldr	r2, [pc, #48]	@ (7000b880 <ip_reass_dequeue_datagram+0x4c>)
7000b84e:	6013      	str	r3, [r2, #0]
7000b850:	e00d      	b.n	7000b86e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
7000b852:	683b      	ldr	r3, [r7, #0]
7000b854:	2b00      	cmp	r3, #0
7000b856:	d106      	bne.n	7000b866 <ip_reass_dequeue_datagram+0x32>
7000b858:	4b0a      	ldr	r3, [pc, #40]	@ (7000b884 <ip_reass_dequeue_datagram+0x50>)
7000b85a:	f240 1245 	movw	r2, #325	@ 0x145
7000b85e:	490a      	ldr	r1, [pc, #40]	@ (7000b888 <ip_reass_dequeue_datagram+0x54>)
7000b860:	480a      	ldr	r0, [pc, #40]	@ (7000b88c <ip_reass_dequeue_datagram+0x58>)
7000b862:	f008 fa55 	bl	70013d10 <iprintf>
    prev->next = ipr->next;
7000b866:	687b      	ldr	r3, [r7, #4]
7000b868:	681a      	ldr	r2, [r3, #0]
7000b86a:	683b      	ldr	r3, [r7, #0]
7000b86c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
7000b86e:	6879      	ldr	r1, [r7, #4]
7000b870:	2004      	movs	r0, #4
7000b872:	f001 f99f 	bl	7000cbb4 <memp_free>
}
7000b876:	bf00      	nop
7000b878:	3708      	adds	r7, #8
7000b87a:	46bd      	mov	sp, r7
7000b87c:	bd80      	pop	{r7, pc}
7000b87e:	bf00      	nop
7000b880:	24005384 	.word	0x24005384
7000b884:	700151d4 	.word	0x700151d4
7000b888:	700152c8 	.word	0x700152c8
7000b88c:	70015248 	.word	0x70015248

7000b890 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
7000b890:	b580      	push	{r7, lr}
7000b892:	b08c      	sub	sp, #48	@ 0x30
7000b894:	af00      	add	r7, sp, #0
7000b896:	60f8      	str	r0, [r7, #12]
7000b898:	60b9      	str	r1, [r7, #8]
7000b89a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
7000b89c:	2300      	movs	r3, #0
7000b89e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
7000b8a0:	2301      	movs	r3, #1
7000b8a2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
7000b8a4:	68bb      	ldr	r3, [r7, #8]
7000b8a6:	685b      	ldr	r3, [r3, #4]
7000b8a8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
7000b8aa:	69fb      	ldr	r3, [r7, #28]
7000b8ac:	885b      	ldrh	r3, [r3, #2]
7000b8ae:	b29b      	uxth	r3, r3
7000b8b0:	4618      	mov	r0, r3
7000b8b2:	f7fe f885 	bl	700099c0 <lwip_htons>
7000b8b6:	4603      	mov	r3, r0
7000b8b8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
7000b8ba:	69fb      	ldr	r3, [r7, #28]
7000b8bc:	781b      	ldrb	r3, [r3, #0]
7000b8be:	f003 030f 	and.w	r3, r3, #15
7000b8c2:	b2db      	uxtb	r3, r3
7000b8c4:	009b      	lsls	r3, r3, #2
7000b8c6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
7000b8c8:	7e7b      	ldrb	r3, [r7, #25]
7000b8ca:	b29b      	uxth	r3, r3
7000b8cc:	8b7a      	ldrh	r2, [r7, #26]
7000b8ce:	429a      	cmp	r2, r3
7000b8d0:	d202      	bcs.n	7000b8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
7000b8d2:	f04f 33ff 	mov.w	r3, #4294967295
7000b8d6:	e135      	b.n	7000bb44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
7000b8d8:	7e7b      	ldrb	r3, [r7, #25]
7000b8da:	b29b      	uxth	r3, r3
7000b8dc:	8b7a      	ldrh	r2, [r7, #26]
7000b8de:	1ad3      	subs	r3, r2, r3
7000b8e0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
7000b8e2:	69fb      	ldr	r3, [r7, #28]
7000b8e4:	88db      	ldrh	r3, [r3, #6]
7000b8e6:	b29b      	uxth	r3, r3
7000b8e8:	4618      	mov	r0, r3
7000b8ea:	f7fe f869 	bl	700099c0 <lwip_htons>
7000b8ee:	4603      	mov	r3, r0
7000b8f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
7000b8f4:	b29b      	uxth	r3, r3
7000b8f6:	00db      	lsls	r3, r3, #3
7000b8f8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
7000b8fa:	68bb      	ldr	r3, [r7, #8]
7000b8fc:	685b      	ldr	r3, [r3, #4]
7000b8fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
7000b900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b902:	2200      	movs	r2, #0
7000b904:	701a      	strb	r2, [r3, #0]
7000b906:	2200      	movs	r2, #0
7000b908:	705a      	strb	r2, [r3, #1]
7000b90a:	2200      	movs	r2, #0
7000b90c:	709a      	strb	r2, [r3, #2]
7000b90e:	2200      	movs	r2, #0
7000b910:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
7000b912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b914:	8afa      	ldrh	r2, [r7, #22]
7000b916:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
7000b918:	8afa      	ldrh	r2, [r7, #22]
7000b91a:	8b7b      	ldrh	r3, [r7, #26]
7000b91c:	4413      	add	r3, r2
7000b91e:	b29a      	uxth	r2, r3
7000b920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b922:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
7000b924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b926:	88db      	ldrh	r3, [r3, #6]
7000b928:	b29b      	uxth	r3, r3
7000b92a:	8afa      	ldrh	r2, [r7, #22]
7000b92c:	429a      	cmp	r2, r3
7000b92e:	d902      	bls.n	7000b936 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
7000b930:	f04f 33ff 	mov.w	r3, #4294967295
7000b934:	e106      	b.n	7000bb44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
7000b936:	68fb      	ldr	r3, [r7, #12]
7000b938:	685b      	ldr	r3, [r3, #4]
7000b93a:	627b      	str	r3, [r7, #36]	@ 0x24
7000b93c:	e068      	b.n	7000ba10 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
7000b93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b940:	685b      	ldr	r3, [r3, #4]
7000b942:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
7000b944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b946:	889b      	ldrh	r3, [r3, #4]
7000b948:	b29a      	uxth	r2, r3
7000b94a:	693b      	ldr	r3, [r7, #16]
7000b94c:	889b      	ldrh	r3, [r3, #4]
7000b94e:	b29b      	uxth	r3, r3
7000b950:	429a      	cmp	r2, r3
7000b952:	d235      	bcs.n	7000b9c0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
7000b954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
7000b958:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
7000b95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000b95c:	2b00      	cmp	r3, #0
7000b95e:	d020      	beq.n	7000b9a2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
7000b960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b962:	889b      	ldrh	r3, [r3, #4]
7000b964:	b29a      	uxth	r2, r3
7000b966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000b968:	88db      	ldrh	r3, [r3, #6]
7000b96a:	b29b      	uxth	r3, r3
7000b96c:	429a      	cmp	r2, r3
7000b96e:	d307      	bcc.n	7000b980 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
7000b970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b972:	88db      	ldrh	r3, [r3, #6]
7000b974:	b29a      	uxth	r2, r3
7000b976:	693b      	ldr	r3, [r7, #16]
7000b978:	889b      	ldrh	r3, [r3, #4]
7000b97a:	b29b      	uxth	r3, r3
7000b97c:	429a      	cmp	r2, r3
7000b97e:	d902      	bls.n	7000b986 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
7000b980:	f04f 33ff 	mov.w	r3, #4294967295
7000b984:	e0de      	b.n	7000bb44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
7000b986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000b988:	68ba      	ldr	r2, [r7, #8]
7000b98a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
7000b98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000b98e:	88db      	ldrh	r3, [r3, #6]
7000b990:	b29a      	uxth	r2, r3
7000b992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b994:	889b      	ldrh	r3, [r3, #4]
7000b996:	b29b      	uxth	r3, r3
7000b998:	429a      	cmp	r2, r3
7000b99a:	d03d      	beq.n	7000ba18 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
7000b99c:	2300      	movs	r3, #0
7000b99e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
7000b9a0:	e03a      	b.n	7000ba18 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
7000b9a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b9a4:	88db      	ldrh	r3, [r3, #6]
7000b9a6:	b29a      	uxth	r2, r3
7000b9a8:	693b      	ldr	r3, [r7, #16]
7000b9aa:	889b      	ldrh	r3, [r3, #4]
7000b9ac:	b29b      	uxth	r3, r3
7000b9ae:	429a      	cmp	r2, r3
7000b9b0:	d902      	bls.n	7000b9b8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
7000b9b2:	f04f 33ff 	mov.w	r3, #4294967295
7000b9b6:	e0c5      	b.n	7000bb44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
7000b9b8:	68fb      	ldr	r3, [r7, #12]
7000b9ba:	68ba      	ldr	r2, [r7, #8]
7000b9bc:	605a      	str	r2, [r3, #4]
      break;
7000b9be:	e02b      	b.n	7000ba18 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
7000b9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b9c2:	889b      	ldrh	r3, [r3, #4]
7000b9c4:	b29a      	uxth	r2, r3
7000b9c6:	693b      	ldr	r3, [r7, #16]
7000b9c8:	889b      	ldrh	r3, [r3, #4]
7000b9ca:	b29b      	uxth	r3, r3
7000b9cc:	429a      	cmp	r2, r3
7000b9ce:	d102      	bne.n	7000b9d6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
7000b9d0:	f04f 33ff 	mov.w	r3, #4294967295
7000b9d4:	e0b6      	b.n	7000bb44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
7000b9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b9d8:	889b      	ldrh	r3, [r3, #4]
7000b9da:	b29a      	uxth	r2, r3
7000b9dc:	693b      	ldr	r3, [r7, #16]
7000b9de:	88db      	ldrh	r3, [r3, #6]
7000b9e0:	b29b      	uxth	r3, r3
7000b9e2:	429a      	cmp	r2, r3
7000b9e4:	d202      	bcs.n	7000b9ec <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
7000b9e6:	f04f 33ff 	mov.w	r3, #4294967295
7000b9ea:	e0ab      	b.n	7000bb44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
7000b9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000b9ee:	2b00      	cmp	r3, #0
7000b9f0:	d009      	beq.n	7000ba06 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
7000b9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000b9f4:	88db      	ldrh	r3, [r3, #6]
7000b9f6:	b29a      	uxth	r2, r3
7000b9f8:	693b      	ldr	r3, [r7, #16]
7000b9fa:	889b      	ldrh	r3, [r3, #4]
7000b9fc:	b29b      	uxth	r3, r3
7000b9fe:	429a      	cmp	r2, r3
7000ba00:	d001      	beq.n	7000ba06 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
7000ba02:	2300      	movs	r3, #0
7000ba04:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
7000ba06:	693b      	ldr	r3, [r7, #16]
7000ba08:	681b      	ldr	r3, [r3, #0]
7000ba0a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
7000ba0c:	693b      	ldr	r3, [r7, #16]
7000ba0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
7000ba10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000ba12:	2b00      	cmp	r3, #0
7000ba14:	d193      	bne.n	7000b93e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
7000ba16:	e000      	b.n	7000ba1a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
7000ba18:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
7000ba1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000ba1c:	2b00      	cmp	r3, #0
7000ba1e:	d12d      	bne.n	7000ba7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
7000ba20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000ba22:	2b00      	cmp	r3, #0
7000ba24:	d01c      	beq.n	7000ba60 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
7000ba26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000ba28:	88db      	ldrh	r3, [r3, #6]
7000ba2a:	b29a      	uxth	r2, r3
7000ba2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ba2e:	889b      	ldrh	r3, [r3, #4]
7000ba30:	b29b      	uxth	r3, r3
7000ba32:	429a      	cmp	r2, r3
7000ba34:	d906      	bls.n	7000ba44 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
7000ba36:	4b45      	ldr	r3, [pc, #276]	@ (7000bb4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
7000ba38:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
7000ba3c:	4944      	ldr	r1, [pc, #272]	@ (7000bb50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
7000ba3e:	4845      	ldr	r0, [pc, #276]	@ (7000bb54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
7000ba40:	f008 f966 	bl	70013d10 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
7000ba44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000ba46:	68ba      	ldr	r2, [r7, #8]
7000ba48:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
7000ba4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000ba4c:	88db      	ldrh	r3, [r3, #6]
7000ba4e:	b29a      	uxth	r2, r3
7000ba50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ba52:	889b      	ldrh	r3, [r3, #4]
7000ba54:	b29b      	uxth	r3, r3
7000ba56:	429a      	cmp	r2, r3
7000ba58:	d010      	beq.n	7000ba7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
7000ba5a:	2300      	movs	r3, #0
7000ba5c:	623b      	str	r3, [r7, #32]
7000ba5e:	e00d      	b.n	7000ba7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
7000ba60:	68fb      	ldr	r3, [r7, #12]
7000ba62:	685b      	ldr	r3, [r3, #4]
7000ba64:	2b00      	cmp	r3, #0
7000ba66:	d006      	beq.n	7000ba76 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
7000ba68:	4b38      	ldr	r3, [pc, #224]	@ (7000bb4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
7000ba6a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
7000ba6e:	493a      	ldr	r1, [pc, #232]	@ (7000bb58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
7000ba70:	4838      	ldr	r0, [pc, #224]	@ (7000bb54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
7000ba72:	f008 f94d 	bl	70013d10 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
7000ba76:	68fb      	ldr	r3, [r7, #12]
7000ba78:	68ba      	ldr	r2, [r7, #8]
7000ba7a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
7000ba7c:	687b      	ldr	r3, [r7, #4]
7000ba7e:	2b00      	cmp	r3, #0
7000ba80:	d105      	bne.n	7000ba8e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
7000ba82:	68fb      	ldr	r3, [r7, #12]
7000ba84:	7f9b      	ldrb	r3, [r3, #30]
7000ba86:	f003 0301 	and.w	r3, r3, #1
7000ba8a:	2b00      	cmp	r3, #0
7000ba8c:	d059      	beq.n	7000bb42 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
7000ba8e:	6a3b      	ldr	r3, [r7, #32]
7000ba90:	2b00      	cmp	r3, #0
7000ba92:	d04f      	beq.n	7000bb34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
7000ba94:	68fb      	ldr	r3, [r7, #12]
7000ba96:	685b      	ldr	r3, [r3, #4]
7000ba98:	2b00      	cmp	r3, #0
7000ba9a:	d006      	beq.n	7000baaa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
7000ba9c:	68fb      	ldr	r3, [r7, #12]
7000ba9e:	685b      	ldr	r3, [r3, #4]
7000baa0:	685b      	ldr	r3, [r3, #4]
7000baa2:	889b      	ldrh	r3, [r3, #4]
7000baa4:	b29b      	uxth	r3, r3
7000baa6:	2b00      	cmp	r3, #0
7000baa8:	d002      	beq.n	7000bab0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
7000baaa:	2300      	movs	r3, #0
7000baac:	623b      	str	r3, [r7, #32]
7000baae:	e041      	b.n	7000bb34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
7000bab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000bab2:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
7000bab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000bab6:	681b      	ldr	r3, [r3, #0]
7000bab8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
7000baba:	e012      	b.n	7000bae2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
7000babc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000babe:	685b      	ldr	r3, [r3, #4]
7000bac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
7000bac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bac4:	88db      	ldrh	r3, [r3, #6]
7000bac6:	b29a      	uxth	r2, r3
7000bac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000baca:	889b      	ldrh	r3, [r3, #4]
7000bacc:	b29b      	uxth	r3, r3
7000bace:	429a      	cmp	r2, r3
7000bad0:	d002      	beq.n	7000bad8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
7000bad2:	2300      	movs	r3, #0
7000bad4:	623b      	str	r3, [r7, #32]
            break;
7000bad6:	e007      	b.n	7000bae8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
7000bad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000bada:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
7000badc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000bade:	681b      	ldr	r3, [r3, #0]
7000bae0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
7000bae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000bae4:	2b00      	cmp	r3, #0
7000bae6:	d1e9      	bne.n	7000babc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
7000bae8:	6a3b      	ldr	r3, [r7, #32]
7000baea:	2b00      	cmp	r3, #0
7000baec:	d022      	beq.n	7000bb34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
7000baee:	68fb      	ldr	r3, [r7, #12]
7000baf0:	685b      	ldr	r3, [r3, #4]
7000baf2:	2b00      	cmp	r3, #0
7000baf4:	d106      	bne.n	7000bb04 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
7000baf6:	4b15      	ldr	r3, [pc, #84]	@ (7000bb4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
7000baf8:	f240 12df 	movw	r2, #479	@ 0x1df
7000bafc:	4917      	ldr	r1, [pc, #92]	@ (7000bb5c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
7000bafe:	4815      	ldr	r0, [pc, #84]	@ (7000bb54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
7000bb00:	f008 f906 	bl	70013d10 <iprintf>
          LWIP_ASSERT("sanity check",
7000bb04:	68fb      	ldr	r3, [r7, #12]
7000bb06:	685b      	ldr	r3, [r3, #4]
7000bb08:	685b      	ldr	r3, [r3, #4]
7000bb0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
7000bb0c:	429a      	cmp	r2, r3
7000bb0e:	d106      	bne.n	7000bb1e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
7000bb10:	4b0e      	ldr	r3, [pc, #56]	@ (7000bb4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
7000bb12:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
7000bb16:	4911      	ldr	r1, [pc, #68]	@ (7000bb5c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
7000bb18:	480e      	ldr	r0, [pc, #56]	@ (7000bb54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
7000bb1a:	f008 f8f9 	bl	70013d10 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
7000bb1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000bb20:	681b      	ldr	r3, [r3, #0]
7000bb22:	2b00      	cmp	r3, #0
7000bb24:	d006      	beq.n	7000bb34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
7000bb26:	4b09      	ldr	r3, [pc, #36]	@ (7000bb4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
7000bb28:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
7000bb2c:	490c      	ldr	r1, [pc, #48]	@ (7000bb60 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
7000bb2e:	4809      	ldr	r0, [pc, #36]	@ (7000bb54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
7000bb30:	f008 f8ee 	bl	70013d10 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
7000bb34:	6a3b      	ldr	r3, [r7, #32]
7000bb36:	2b00      	cmp	r3, #0
7000bb38:	bf14      	ite	ne
7000bb3a:	2301      	movne	r3, #1
7000bb3c:	2300      	moveq	r3, #0
7000bb3e:	b2db      	uxtb	r3, r3
7000bb40:	e000      	b.n	7000bb44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
7000bb42:	2300      	movs	r3, #0
}
7000bb44:	4618      	mov	r0, r3
7000bb46:	3730      	adds	r7, #48	@ 0x30
7000bb48:	46bd      	mov	sp, r7
7000bb4a:	bd80      	pop	{r7, pc}
7000bb4c:	700151d4 	.word	0x700151d4
7000bb50:	700152e4 	.word	0x700152e4
7000bb54:	70015248 	.word	0x70015248
7000bb58:	70015304 	.word	0x70015304
7000bb5c:	7001533c 	.word	0x7001533c
7000bb60:	7001534c 	.word	0x7001534c

7000bb64 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
7000bb64:	b580      	push	{r7, lr}
7000bb66:	b08e      	sub	sp, #56	@ 0x38
7000bb68:	af00      	add	r7, sp, #0
7000bb6a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
7000bb6c:	687b      	ldr	r3, [r7, #4]
7000bb6e:	685b      	ldr	r3, [r3, #4]
7000bb70:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
7000bb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bb74:	781b      	ldrb	r3, [r3, #0]
7000bb76:	f003 030f 	and.w	r3, r3, #15
7000bb7a:	b2db      	uxtb	r3, r3
7000bb7c:	009b      	lsls	r3, r3, #2
7000bb7e:	b2db      	uxtb	r3, r3
7000bb80:	2b14      	cmp	r3, #20
7000bb82:	f040 8171 	bne.w	7000be68 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
7000bb86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bb88:	88db      	ldrh	r3, [r3, #6]
7000bb8a:	b29b      	uxth	r3, r3
7000bb8c:	4618      	mov	r0, r3
7000bb8e:	f7fd ff17 	bl	700099c0 <lwip_htons>
7000bb92:	4603      	mov	r3, r0
7000bb94:	f3c3 030c 	ubfx	r3, r3, #0, #13
7000bb98:	b29b      	uxth	r3, r3
7000bb9a:	00db      	lsls	r3, r3, #3
7000bb9c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
7000bb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bba0:	885b      	ldrh	r3, [r3, #2]
7000bba2:	b29b      	uxth	r3, r3
7000bba4:	4618      	mov	r0, r3
7000bba6:	f7fd ff0b 	bl	700099c0 <lwip_htons>
7000bbaa:	4603      	mov	r3, r0
7000bbac:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
7000bbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bbb0:	781b      	ldrb	r3, [r3, #0]
7000bbb2:	f003 030f 	and.w	r3, r3, #15
7000bbb6:	b2db      	uxtb	r3, r3
7000bbb8:	009b      	lsls	r3, r3, #2
7000bbba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
7000bbbe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
7000bbc2:	b29b      	uxth	r3, r3
7000bbc4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
7000bbc6:	429a      	cmp	r2, r3
7000bbc8:	f0c0 8150 	bcc.w	7000be6c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
7000bbcc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
7000bbd0:	b29b      	uxth	r3, r3
7000bbd2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
7000bbd4:	1ad3      	subs	r3, r2, r3
7000bbd6:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
7000bbd8:	6878      	ldr	r0, [r7, #4]
7000bbda:	f001 febb 	bl	7000d954 <pbuf_clen>
7000bbde:	4603      	mov	r3, r0
7000bbe0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
7000bbe2:	4b8c      	ldr	r3, [pc, #560]	@ (7000be14 <ip4_reass+0x2b0>)
7000bbe4:	881b      	ldrh	r3, [r3, #0]
7000bbe6:	461a      	mov	r2, r3
7000bbe8:	8c3b      	ldrh	r3, [r7, #32]
7000bbea:	4413      	add	r3, r2
7000bbec:	2b0a      	cmp	r3, #10
7000bbee:	dd10      	ble.n	7000bc12 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
7000bbf0:	8c3b      	ldrh	r3, [r7, #32]
7000bbf2:	4619      	mov	r1, r3
7000bbf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
7000bbf6:	f7ff fd81 	bl	7000b6fc <ip_reass_remove_oldest_datagram>
7000bbfa:	4603      	mov	r3, r0
7000bbfc:	2b00      	cmp	r3, #0
7000bbfe:	f000 8137 	beq.w	7000be70 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
7000bc02:	4b84      	ldr	r3, [pc, #528]	@ (7000be14 <ip4_reass+0x2b0>)
7000bc04:	881b      	ldrh	r3, [r3, #0]
7000bc06:	461a      	mov	r2, r3
7000bc08:	8c3b      	ldrh	r3, [r7, #32]
7000bc0a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
7000bc0c:	2b0a      	cmp	r3, #10
7000bc0e:	f300 812f 	bgt.w	7000be70 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
7000bc12:	4b81      	ldr	r3, [pc, #516]	@ (7000be18 <ip4_reass+0x2b4>)
7000bc14:	681b      	ldr	r3, [r3, #0]
7000bc16:	633b      	str	r3, [r7, #48]	@ 0x30
7000bc18:	e015      	b.n	7000bc46 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
7000bc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bc1c:	695a      	ldr	r2, [r3, #20]
7000bc1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bc20:	68db      	ldr	r3, [r3, #12]
7000bc22:	429a      	cmp	r2, r3
7000bc24:	d10c      	bne.n	7000bc40 <ip4_reass+0xdc>
7000bc26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bc28:	699a      	ldr	r2, [r3, #24]
7000bc2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bc2c:	691b      	ldr	r3, [r3, #16]
7000bc2e:	429a      	cmp	r2, r3
7000bc30:	d106      	bne.n	7000bc40 <ip4_reass+0xdc>
7000bc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bc34:	899a      	ldrh	r2, [r3, #12]
7000bc36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bc38:	889b      	ldrh	r3, [r3, #4]
7000bc3a:	b29b      	uxth	r3, r3
7000bc3c:	429a      	cmp	r2, r3
7000bc3e:	d006      	beq.n	7000bc4e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
7000bc40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bc42:	681b      	ldr	r3, [r3, #0]
7000bc44:	633b      	str	r3, [r7, #48]	@ 0x30
7000bc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bc48:	2b00      	cmp	r3, #0
7000bc4a:	d1e6      	bne.n	7000bc1a <ip4_reass+0xb6>
7000bc4c:	e000      	b.n	7000bc50 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
7000bc4e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
7000bc50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bc52:	2b00      	cmp	r3, #0
7000bc54:	d109      	bne.n	7000bc6a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
7000bc56:	8c3b      	ldrh	r3, [r7, #32]
7000bc58:	4619      	mov	r1, r3
7000bc5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
7000bc5c:	f7ff fdb0 	bl	7000b7c0 <ip_reass_enqueue_new_datagram>
7000bc60:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
7000bc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bc64:	2b00      	cmp	r3, #0
7000bc66:	d11c      	bne.n	7000bca2 <ip4_reass+0x13e>
      goto nullreturn;
7000bc68:	e105      	b.n	7000be76 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
7000bc6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bc6c:	88db      	ldrh	r3, [r3, #6]
7000bc6e:	b29b      	uxth	r3, r3
7000bc70:	4618      	mov	r0, r3
7000bc72:	f7fd fea5 	bl	700099c0 <lwip_htons>
7000bc76:	4603      	mov	r3, r0
7000bc78:	f3c3 030c 	ubfx	r3, r3, #0, #13
7000bc7c:	2b00      	cmp	r3, #0
7000bc7e:	d110      	bne.n	7000bca2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
7000bc80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bc82:	89db      	ldrh	r3, [r3, #14]
7000bc84:	4618      	mov	r0, r3
7000bc86:	f7fd fe9b 	bl	700099c0 <lwip_htons>
7000bc8a:	4603      	mov	r3, r0
7000bc8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
7000bc90:	2b00      	cmp	r3, #0
7000bc92:	d006      	beq.n	7000bca2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
7000bc94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bc96:	3308      	adds	r3, #8
7000bc98:	2214      	movs	r2, #20
7000bc9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
7000bc9c:	4618      	mov	r0, r3
7000bc9e:	f008 f968 	bl	70013f72 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
7000bca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bca4:	88db      	ldrh	r3, [r3, #6]
7000bca6:	b29b      	uxth	r3, r3
7000bca8:	f003 0320 	and.w	r3, r3, #32
7000bcac:	2b00      	cmp	r3, #0
7000bcae:	bf0c      	ite	eq
7000bcb0:	2301      	moveq	r3, #1
7000bcb2:	2300      	movne	r3, #0
7000bcb4:	b2db      	uxtb	r3, r3
7000bcb6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
7000bcb8:	69fb      	ldr	r3, [r7, #28]
7000bcba:	2b00      	cmp	r3, #0
7000bcbc:	d00e      	beq.n	7000bcdc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
7000bcbe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
7000bcc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
7000bcc2:	4413      	add	r3, r2
7000bcc4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
7000bcc6:	8b7a      	ldrh	r2, [r7, #26]
7000bcc8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
7000bcca:	429a      	cmp	r2, r3
7000bccc:	f0c0 80a0 	bcc.w	7000be10 <ip4_reass+0x2ac>
7000bcd0:	8b7b      	ldrh	r3, [r7, #26]
7000bcd2:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
7000bcd6:	4293      	cmp	r3, r2
7000bcd8:	f200 809a 	bhi.w	7000be10 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
7000bcdc:	69fa      	ldr	r2, [r7, #28]
7000bcde:	6879      	ldr	r1, [r7, #4]
7000bce0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
7000bce2:	f7ff fdd5 	bl	7000b890 <ip_reass_chain_frag_into_datagram_and_validate>
7000bce6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
7000bce8:	697b      	ldr	r3, [r7, #20]
7000bcea:	f1b3 3fff 	cmp.w	r3, #4294967295
7000bcee:	f000 809b 	beq.w	7000be28 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
7000bcf2:	4b48      	ldr	r3, [pc, #288]	@ (7000be14 <ip4_reass+0x2b0>)
7000bcf4:	881a      	ldrh	r2, [r3, #0]
7000bcf6:	8c3b      	ldrh	r3, [r7, #32]
7000bcf8:	4413      	add	r3, r2
7000bcfa:	b29a      	uxth	r2, r3
7000bcfc:	4b45      	ldr	r3, [pc, #276]	@ (7000be14 <ip4_reass+0x2b0>)
7000bcfe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
7000bd00:	69fb      	ldr	r3, [r7, #28]
7000bd02:	2b00      	cmp	r3, #0
7000bd04:	d00d      	beq.n	7000bd22 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
7000bd06:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
7000bd08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
7000bd0a:	4413      	add	r3, r2
7000bd0c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
7000bd0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bd10:	8a7a      	ldrh	r2, [r7, #18]
7000bd12:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
7000bd14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bd16:	7f9b      	ldrb	r3, [r3, #30]
7000bd18:	f043 0301 	orr.w	r3, r3, #1
7000bd1c:	b2da      	uxtb	r2, r3
7000bd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bd20:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
7000bd22:	697b      	ldr	r3, [r7, #20]
7000bd24:	2b01      	cmp	r3, #1
7000bd26:	d171      	bne.n	7000be0c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
7000bd28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bd2a:	8b9b      	ldrh	r3, [r3, #28]
7000bd2c:	3314      	adds	r3, #20
7000bd2e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
7000bd30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bd32:	685b      	ldr	r3, [r3, #4]
7000bd34:	685b      	ldr	r3, [r3, #4]
7000bd36:	681b      	ldr	r3, [r3, #0]
7000bd38:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
7000bd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bd3c:	685b      	ldr	r3, [r3, #4]
7000bd3e:	685b      	ldr	r3, [r3, #4]
7000bd40:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
7000bd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bd44:	3308      	adds	r3, #8
7000bd46:	2214      	movs	r2, #20
7000bd48:	4619      	mov	r1, r3
7000bd4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
7000bd4c:	f008 f911 	bl	70013f72 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
7000bd50:	8a3b      	ldrh	r3, [r7, #16]
7000bd52:	4618      	mov	r0, r3
7000bd54:	f7fd fe34 	bl	700099c0 <lwip_htons>
7000bd58:	4603      	mov	r3, r0
7000bd5a:	461a      	mov	r2, r3
7000bd5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bd5e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
7000bd60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bd62:	2200      	movs	r2, #0
7000bd64:	719a      	strb	r2, [r3, #6]
7000bd66:	2200      	movs	r2, #0
7000bd68:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
7000bd6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bd6c:	2200      	movs	r2, #0
7000bd6e:	729a      	strb	r2, [r3, #10]
7000bd70:	2200      	movs	r2, #0
7000bd72:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
7000bd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bd76:	685b      	ldr	r3, [r3, #4]
7000bd78:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
7000bd7a:	e00d      	b.n	7000bd98 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
7000bd7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7000bd7e:	685b      	ldr	r3, [r3, #4]
7000bd80:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
7000bd82:	2114      	movs	r1, #20
7000bd84:	6b78      	ldr	r0, [r7, #52]	@ 0x34
7000bd86:	f001 fcdb 	bl	7000d740 <pbuf_remove_header>
      pbuf_cat(p, r);
7000bd8a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
7000bd8c:	6878      	ldr	r0, [r7, #4]
7000bd8e:	f001 fe21 	bl	7000d9d4 <pbuf_cat>
      r = iprh->next_pbuf;
7000bd92:	68fb      	ldr	r3, [r7, #12]
7000bd94:	681b      	ldr	r3, [r3, #0]
7000bd96:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
7000bd98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7000bd9a:	2b00      	cmp	r3, #0
7000bd9c:	d1ee      	bne.n	7000bd7c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
7000bd9e:	4b1e      	ldr	r3, [pc, #120]	@ (7000be18 <ip4_reass+0x2b4>)
7000bda0:	681b      	ldr	r3, [r3, #0]
7000bda2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
7000bda4:	429a      	cmp	r2, r3
7000bda6:	d102      	bne.n	7000bdae <ip4_reass+0x24a>
      ipr_prev = NULL;
7000bda8:	2300      	movs	r3, #0
7000bdaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
7000bdac:	e010      	b.n	7000bdd0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
7000bdae:	4b1a      	ldr	r3, [pc, #104]	@ (7000be18 <ip4_reass+0x2b4>)
7000bdb0:	681b      	ldr	r3, [r3, #0]
7000bdb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
7000bdb4:	e007      	b.n	7000bdc6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
7000bdb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000bdb8:	681b      	ldr	r3, [r3, #0]
7000bdba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
7000bdbc:	429a      	cmp	r2, r3
7000bdbe:	d006      	beq.n	7000bdce <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
7000bdc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000bdc2:	681b      	ldr	r3, [r3, #0]
7000bdc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
7000bdc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000bdc8:	2b00      	cmp	r3, #0
7000bdca:	d1f4      	bne.n	7000bdb6 <ip4_reass+0x252>
7000bdcc:	e000      	b.n	7000bdd0 <ip4_reass+0x26c>
          break;
7000bdce:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
7000bdd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
7000bdd2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
7000bdd4:	f7ff fd2e 	bl	7000b834 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
7000bdd8:	6878      	ldr	r0, [r7, #4]
7000bdda:	f001 fdbb 	bl	7000d954 <pbuf_clen>
7000bdde:	4603      	mov	r3, r0
7000bde0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
7000bde2:	4b0c      	ldr	r3, [pc, #48]	@ (7000be14 <ip4_reass+0x2b0>)
7000bde4:	881b      	ldrh	r3, [r3, #0]
7000bde6:	8c3a      	ldrh	r2, [r7, #32]
7000bde8:	429a      	cmp	r2, r3
7000bdea:	d906      	bls.n	7000bdfa <ip4_reass+0x296>
7000bdec:	4b0b      	ldr	r3, [pc, #44]	@ (7000be1c <ip4_reass+0x2b8>)
7000bdee:	f240 229b 	movw	r2, #667	@ 0x29b
7000bdf2:	490b      	ldr	r1, [pc, #44]	@ (7000be20 <ip4_reass+0x2bc>)
7000bdf4:	480b      	ldr	r0, [pc, #44]	@ (7000be24 <ip4_reass+0x2c0>)
7000bdf6:	f007 ff8b 	bl	70013d10 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
7000bdfa:	4b06      	ldr	r3, [pc, #24]	@ (7000be14 <ip4_reass+0x2b0>)
7000bdfc:	881a      	ldrh	r2, [r3, #0]
7000bdfe:	8c3b      	ldrh	r3, [r7, #32]
7000be00:	1ad3      	subs	r3, r2, r3
7000be02:	b29a      	uxth	r2, r3
7000be04:	4b03      	ldr	r3, [pc, #12]	@ (7000be14 <ip4_reass+0x2b0>)
7000be06:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
7000be08:	687b      	ldr	r3, [r7, #4]
7000be0a:	e038      	b.n	7000be7e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
7000be0c:	2300      	movs	r3, #0
7000be0e:	e036      	b.n	7000be7e <ip4_reass+0x31a>
      goto nullreturn_ipr;
7000be10:	bf00      	nop
7000be12:	e00a      	b.n	7000be2a <ip4_reass+0x2c6>
7000be14:	24005388 	.word	0x24005388
7000be18:	24005384 	.word	0x24005384
7000be1c:	700151d4 	.word	0x700151d4
7000be20:	70015370 	.word	0x70015370
7000be24:	70015248 	.word	0x70015248
    goto nullreturn_ipr;
7000be28:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
7000be2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000be2c:	2b00      	cmp	r3, #0
7000be2e:	d106      	bne.n	7000be3e <ip4_reass+0x2da>
7000be30:	4b15      	ldr	r3, [pc, #84]	@ (7000be88 <ip4_reass+0x324>)
7000be32:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
7000be36:	4915      	ldr	r1, [pc, #84]	@ (7000be8c <ip4_reass+0x328>)
7000be38:	4815      	ldr	r0, [pc, #84]	@ (7000be90 <ip4_reass+0x32c>)
7000be3a:	f007 ff69 	bl	70013d10 <iprintf>
  if (ipr->p == NULL) {
7000be3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000be40:	685b      	ldr	r3, [r3, #4]
7000be42:	2b00      	cmp	r3, #0
7000be44:	d116      	bne.n	7000be74 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
7000be46:	4b13      	ldr	r3, [pc, #76]	@ (7000be94 <ip4_reass+0x330>)
7000be48:	681b      	ldr	r3, [r3, #0]
7000be4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
7000be4c:	429a      	cmp	r2, r3
7000be4e:	d006      	beq.n	7000be5e <ip4_reass+0x2fa>
7000be50:	4b0d      	ldr	r3, [pc, #52]	@ (7000be88 <ip4_reass+0x324>)
7000be52:	f240 22ab 	movw	r2, #683	@ 0x2ab
7000be56:	4910      	ldr	r1, [pc, #64]	@ (7000be98 <ip4_reass+0x334>)
7000be58:	480d      	ldr	r0, [pc, #52]	@ (7000be90 <ip4_reass+0x32c>)
7000be5a:	f007 ff59 	bl	70013d10 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
7000be5e:	2100      	movs	r1, #0
7000be60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
7000be62:	f7ff fce7 	bl	7000b834 <ip_reass_dequeue_datagram>
7000be66:	e006      	b.n	7000be76 <ip4_reass+0x312>
    goto nullreturn;
7000be68:	bf00      	nop
7000be6a:	e004      	b.n	7000be76 <ip4_reass+0x312>
    goto nullreturn;
7000be6c:	bf00      	nop
7000be6e:	e002      	b.n	7000be76 <ip4_reass+0x312>
      goto nullreturn;
7000be70:	bf00      	nop
7000be72:	e000      	b.n	7000be76 <ip4_reass+0x312>
  }

nullreturn:
7000be74:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
7000be76:	6878      	ldr	r0, [r7, #4]
7000be78:	f001 fcde 	bl	7000d838 <pbuf_free>
  return NULL;
7000be7c:	2300      	movs	r3, #0
}
7000be7e:	4618      	mov	r0, r3
7000be80:	3738      	adds	r7, #56	@ 0x38
7000be82:	46bd      	mov	sp, r7
7000be84:	bd80      	pop	{r7, pc}
7000be86:	bf00      	nop
7000be88:	700151d4 	.word	0x700151d4
7000be8c:	7001538c 	.word	0x7001538c
7000be90:	70015248 	.word	0x70015248
7000be94:	24005384 	.word	0x24005384
7000be98:	70015398 	.word	0x70015398

7000be9c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
7000be9c:	b580      	push	{r7, lr}
7000be9e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
7000bea0:	2005      	movs	r0, #5
7000bea2:	f000 fe1d 	bl	7000cae0 <memp_malloc>
7000bea6:	4603      	mov	r3, r0
}
7000bea8:	4618      	mov	r0, r3
7000beaa:	bd80      	pop	{r7, pc}

7000beac <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
7000beac:	b580      	push	{r7, lr}
7000beae:	b082      	sub	sp, #8
7000beb0:	af00      	add	r7, sp, #0
7000beb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
7000beb4:	687b      	ldr	r3, [r7, #4]
7000beb6:	2b00      	cmp	r3, #0
7000beb8:	d106      	bne.n	7000bec8 <ip_frag_free_pbuf_custom_ref+0x1c>
7000beba:	4b07      	ldr	r3, [pc, #28]	@ (7000bed8 <ip_frag_free_pbuf_custom_ref+0x2c>)
7000bebc:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
7000bec0:	4906      	ldr	r1, [pc, #24]	@ (7000bedc <ip_frag_free_pbuf_custom_ref+0x30>)
7000bec2:	4807      	ldr	r0, [pc, #28]	@ (7000bee0 <ip_frag_free_pbuf_custom_ref+0x34>)
7000bec4:	f007 ff24 	bl	70013d10 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
7000bec8:	6879      	ldr	r1, [r7, #4]
7000beca:	2005      	movs	r0, #5
7000becc:	f000 fe72 	bl	7000cbb4 <memp_free>
}
7000bed0:	bf00      	nop
7000bed2:	3708      	adds	r7, #8
7000bed4:	46bd      	mov	sp, r7
7000bed6:	bd80      	pop	{r7, pc}
7000bed8:	700151d4 	.word	0x700151d4
7000bedc:	700153b8 	.word	0x700153b8
7000bee0:	70015248 	.word	0x70015248

7000bee4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
7000bee4:	b580      	push	{r7, lr}
7000bee6:	b084      	sub	sp, #16
7000bee8:	af00      	add	r7, sp, #0
7000beea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
7000beec:	687b      	ldr	r3, [r7, #4]
7000beee:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
7000bef0:	68fb      	ldr	r3, [r7, #12]
7000bef2:	2b00      	cmp	r3, #0
7000bef4:	d106      	bne.n	7000bf04 <ipfrag_free_pbuf_custom+0x20>
7000bef6:	4b11      	ldr	r3, [pc, #68]	@ (7000bf3c <ipfrag_free_pbuf_custom+0x58>)
7000bef8:	f240 22ce 	movw	r2, #718	@ 0x2ce
7000befc:	4910      	ldr	r1, [pc, #64]	@ (7000bf40 <ipfrag_free_pbuf_custom+0x5c>)
7000befe:	4811      	ldr	r0, [pc, #68]	@ (7000bf44 <ipfrag_free_pbuf_custom+0x60>)
7000bf00:	f007 ff06 	bl	70013d10 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
7000bf04:	68fa      	ldr	r2, [r7, #12]
7000bf06:	687b      	ldr	r3, [r7, #4]
7000bf08:	429a      	cmp	r2, r3
7000bf0a:	d006      	beq.n	7000bf1a <ipfrag_free_pbuf_custom+0x36>
7000bf0c:	4b0b      	ldr	r3, [pc, #44]	@ (7000bf3c <ipfrag_free_pbuf_custom+0x58>)
7000bf0e:	f240 22cf 	movw	r2, #719	@ 0x2cf
7000bf12:	490d      	ldr	r1, [pc, #52]	@ (7000bf48 <ipfrag_free_pbuf_custom+0x64>)
7000bf14:	480b      	ldr	r0, [pc, #44]	@ (7000bf44 <ipfrag_free_pbuf_custom+0x60>)
7000bf16:	f007 fefb 	bl	70013d10 <iprintf>
  if (pcr->original != NULL) {
7000bf1a:	68fb      	ldr	r3, [r7, #12]
7000bf1c:	695b      	ldr	r3, [r3, #20]
7000bf1e:	2b00      	cmp	r3, #0
7000bf20:	d004      	beq.n	7000bf2c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
7000bf22:	68fb      	ldr	r3, [r7, #12]
7000bf24:	695b      	ldr	r3, [r3, #20]
7000bf26:	4618      	mov	r0, r3
7000bf28:	f001 fc86 	bl	7000d838 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
7000bf2c:	68f8      	ldr	r0, [r7, #12]
7000bf2e:	f7ff ffbd 	bl	7000beac <ip_frag_free_pbuf_custom_ref>
}
7000bf32:	bf00      	nop
7000bf34:	3710      	adds	r7, #16
7000bf36:	46bd      	mov	sp, r7
7000bf38:	bd80      	pop	{r7, pc}
7000bf3a:	bf00      	nop
7000bf3c:	700151d4 	.word	0x700151d4
7000bf40:	700153c4 	.word	0x700153c4
7000bf44:	70015248 	.word	0x70015248
7000bf48:	700153d0 	.word	0x700153d0

7000bf4c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
7000bf4c:	b580      	push	{r7, lr}
7000bf4e:	b094      	sub	sp, #80	@ 0x50
7000bf50:	af02      	add	r7, sp, #8
7000bf52:	60f8      	str	r0, [r7, #12]
7000bf54:	60b9      	str	r1, [r7, #8]
7000bf56:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
7000bf58:	2300      	movs	r3, #0
7000bf5a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
7000bf5e:	68bb      	ldr	r3, [r7, #8]
7000bf60:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
7000bf62:	3b14      	subs	r3, #20
7000bf64:	2b00      	cmp	r3, #0
7000bf66:	da00      	bge.n	7000bf6a <ip4_frag+0x1e>
7000bf68:	3307      	adds	r3, #7
7000bf6a:	10db      	asrs	r3, r3, #3
7000bf6c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
7000bf6e:	2314      	movs	r3, #20
7000bf70:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
7000bf72:	68fb      	ldr	r3, [r7, #12]
7000bf74:	685b      	ldr	r3, [r3, #4]
7000bf76:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
7000bf78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7000bf7a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
7000bf7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bf7e:	781b      	ldrb	r3, [r3, #0]
7000bf80:	f003 030f 	and.w	r3, r3, #15
7000bf84:	b2db      	uxtb	r3, r3
7000bf86:	009b      	lsls	r3, r3, #2
7000bf88:	b2db      	uxtb	r3, r3
7000bf8a:	2b14      	cmp	r3, #20
7000bf8c:	d002      	beq.n	7000bf94 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
7000bf8e:	f06f 0305 	mvn.w	r3, #5
7000bf92:	e109      	b.n	7000c1a8 <ip4_frag+0x25c>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
7000bf94:	68fb      	ldr	r3, [r7, #12]
7000bf96:	895b      	ldrh	r3, [r3, #10]
7000bf98:	2b13      	cmp	r3, #19
7000bf9a:	d802      	bhi.n	7000bfa2 <ip4_frag+0x56>
7000bf9c:	f06f 0305 	mvn.w	r3, #5
7000bfa0:	e102      	b.n	7000c1a8 <ip4_frag+0x25c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
7000bfa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bfa4:	88db      	ldrh	r3, [r3, #6]
7000bfa6:	b29b      	uxth	r3, r3
7000bfa8:	4618      	mov	r0, r3
7000bfaa:	f7fd fd09 	bl	700099c0 <lwip_htons>
7000bfae:	4603      	mov	r3, r0
7000bfb0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
7000bfb2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
7000bfb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
7000bfb8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
7000bfbc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
7000bfbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
7000bfc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
7000bfc4:	68fb      	ldr	r3, [r7, #12]
7000bfc6:	891b      	ldrh	r3, [r3, #8]
7000bfc8:	3b14      	subs	r3, #20
7000bfca:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
7000bfce:	e0e1      	b.n	7000c194 <ip4_frag+0x248>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
7000bfd0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
7000bfd2:	00db      	lsls	r3, r3, #3
7000bfd4:	b29b      	uxth	r3, r3
7000bfd6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
7000bfda:	4293      	cmp	r3, r2
7000bfdc:	bf28      	it	cs
7000bfde:	4613      	movcs	r3, r2
7000bfe0:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
7000bfe2:	f44f 7220 	mov.w	r2, #640	@ 0x280
7000bfe6:	2114      	movs	r1, #20
7000bfe8:	200e      	movs	r0, #14
7000bfea:	f001 f94b 	bl	7000d284 <pbuf_alloc>
7000bfee:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
7000bff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000bff2:	2b00      	cmp	r3, #0
7000bff4:	f000 80d5 	beq.w	7000c1a2 <ip4_frag+0x256>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
7000bff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000bffa:	895b      	ldrh	r3, [r3, #10]
7000bffc:	2b13      	cmp	r3, #19
7000bffe:	d806      	bhi.n	7000c00e <ip4_frag+0xc2>
7000c000:	4b6b      	ldr	r3, [pc, #428]	@ (7000c1b0 <ip4_frag+0x264>)
7000c002:	f44f 7249 	mov.w	r2, #804	@ 0x324
7000c006:	496b      	ldr	r1, [pc, #428]	@ (7000c1b4 <ip4_frag+0x268>)
7000c008:	486b      	ldr	r0, [pc, #428]	@ (7000c1b8 <ip4_frag+0x26c>)
7000c00a:	f007 fe81 	bl	70013d10 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
7000c00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000c010:	685b      	ldr	r3, [r3, #4]
7000c012:	2214      	movs	r2, #20
7000c014:	6b79      	ldr	r1, [r7, #52]	@ 0x34
7000c016:	4618      	mov	r0, r3
7000c018:	f007 ffab 	bl	70013f72 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
7000c01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000c01e:	685b      	ldr	r3, [r3, #4]
7000c020:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
7000c022:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
7000c024:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
7000c028:	e064      	b.n	7000c0f4 <ip4_frag+0x1a8>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
7000c02a:	68fb      	ldr	r3, [r7, #12]
7000c02c:	895a      	ldrh	r2, [r3, #10]
7000c02e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
7000c030:	1ad3      	subs	r3, r2, r3
7000c032:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
7000c034:	68fb      	ldr	r3, [r7, #12]
7000c036:	895b      	ldrh	r3, [r3, #10]
7000c038:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
7000c03a:	429a      	cmp	r2, r3
7000c03c:	d906      	bls.n	7000c04c <ip4_frag+0x100>
7000c03e:	4b5c      	ldr	r3, [pc, #368]	@ (7000c1b0 <ip4_frag+0x264>)
7000c040:	f240 322d 	movw	r2, #813	@ 0x32d
7000c044:	495d      	ldr	r1, [pc, #372]	@ (7000c1bc <ip4_frag+0x270>)
7000c046:	485c      	ldr	r0, [pc, #368]	@ (7000c1b8 <ip4_frag+0x26c>)
7000c048:	f007 fe62 	bl	70013d10 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
7000c04c:	8bfa      	ldrh	r2, [r7, #30]
7000c04e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
7000c052:	4293      	cmp	r3, r2
7000c054:	bf28      	it	cs
7000c056:	4613      	movcs	r3, r2
7000c058:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
7000c05c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
7000c060:	2b00      	cmp	r3, #0
7000c062:	d105      	bne.n	7000c070 <ip4_frag+0x124>
        poff = 0;
7000c064:	2300      	movs	r3, #0
7000c066:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
7000c068:	68fb      	ldr	r3, [r7, #12]
7000c06a:	681b      	ldr	r3, [r3, #0]
7000c06c:	60fb      	str	r3, [r7, #12]
        continue;
7000c06e:	e041      	b.n	7000c0f4 <ip4_frag+0x1a8>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
7000c070:	f7ff ff14 	bl	7000be9c <ip_frag_alloc_pbuf_custom_ref>
7000c074:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
7000c076:	69bb      	ldr	r3, [r7, #24]
7000c078:	2b00      	cmp	r3, #0
7000c07a:	d103      	bne.n	7000c084 <ip4_frag+0x138>
        pbuf_free(rambuf);
7000c07c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
7000c07e:	f001 fbdb 	bl	7000d838 <pbuf_free>
        goto memerr;
7000c082:	e08f      	b.n	7000c1a4 <ip4_frag+0x258>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
7000c084:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
7000c086:	68fb      	ldr	r3, [r7, #12]
7000c088:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
7000c08a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
7000c08c:	4413      	add	r3, r2
7000c08e:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
7000c092:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
7000c096:	9201      	str	r2, [sp, #4]
7000c098:	9300      	str	r3, [sp, #0]
7000c09a:	4603      	mov	r3, r0
7000c09c:	2241      	movs	r2, #65	@ 0x41
7000c09e:	2000      	movs	r0, #0
7000c0a0:	f001 fa1a 	bl	7000d4d8 <pbuf_alloced_custom>
7000c0a4:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
7000c0a6:	697b      	ldr	r3, [r7, #20]
7000c0a8:	2b00      	cmp	r3, #0
7000c0aa:	d106      	bne.n	7000c0ba <ip4_frag+0x16e>
        ip_frag_free_pbuf_custom_ref(pcr);
7000c0ac:	69b8      	ldr	r0, [r7, #24]
7000c0ae:	f7ff fefd 	bl	7000beac <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
7000c0b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
7000c0b4:	f001 fbc0 	bl	7000d838 <pbuf_free>
        goto memerr;
7000c0b8:	e074      	b.n	7000c1a4 <ip4_frag+0x258>
      }
      pbuf_ref(p);
7000c0ba:	68f8      	ldr	r0, [r7, #12]
7000c0bc:	f001 fc62 	bl	7000d984 <pbuf_ref>
      pcr->original = p;
7000c0c0:	69bb      	ldr	r3, [r7, #24]
7000c0c2:	68fa      	ldr	r2, [r7, #12]
7000c0c4:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
7000c0c6:	69bb      	ldr	r3, [r7, #24]
7000c0c8:	4a3d      	ldr	r2, [pc, #244]	@ (7000c1c0 <ip4_frag+0x274>)
7000c0ca:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
7000c0cc:	6979      	ldr	r1, [r7, #20]
7000c0ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
7000c0d0:	f001 fc80 	bl	7000d9d4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
7000c0d4:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
7000c0d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
7000c0dc:	1ad3      	subs	r3, r2, r3
7000c0de:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
7000c0e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
7000c0e6:	2b00      	cmp	r3, #0
7000c0e8:	d004      	beq.n	7000c0f4 <ip4_frag+0x1a8>
        poff = 0;
7000c0ea:	2300      	movs	r3, #0
7000c0ec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
7000c0ee:	68fb      	ldr	r3, [r7, #12]
7000c0f0:	681b      	ldr	r3, [r3, #0]
7000c0f2:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
7000c0f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
7000c0f8:	2b00      	cmp	r3, #0
7000c0fa:	d196      	bne.n	7000c02a <ip4_frag+0xde>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
7000c0fc:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
7000c0fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
7000c102:	4413      	add	r3, r2
7000c104:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
7000c106:	68bb      	ldr	r3, [r7, #8]
7000c108:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
7000c10a:	f1a3 0213 	sub.w	r2, r3, #19
7000c10e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
7000c112:	429a      	cmp	r2, r3
7000c114:	bfcc      	ite	gt
7000c116:	2301      	movgt	r3, #1
7000c118:	2300      	movle	r3, #0
7000c11a:	b2db      	uxtb	r3, r3
7000c11c:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
7000c11e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
7000c122:	f3c3 030c 	ubfx	r3, r3, #0, #13
7000c126:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
7000c128:	6a3b      	ldr	r3, [r7, #32]
7000c12a:	2b00      	cmp	r3, #0
7000c12c:	d002      	beq.n	7000c134 <ip4_frag+0x1e8>
7000c12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000c130:	2b00      	cmp	r3, #0
7000c132:	d003      	beq.n	7000c13c <ip4_frag+0x1f0>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
7000c134:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
7000c136:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
7000c13a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
7000c13c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
7000c13e:	4618      	mov	r0, r3
7000c140:	f7fd fc3e 	bl	700099c0 <lwip_htons>
7000c144:	4603      	mov	r3, r0
7000c146:	461a      	mov	r2, r3
7000c148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000c14a:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
7000c14c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
7000c14e:	3314      	adds	r3, #20
7000c150:	b29b      	uxth	r3, r3
7000c152:	4618      	mov	r0, r3
7000c154:	f7fd fc34 	bl	700099c0 <lwip_htons>
7000c158:	4603      	mov	r3, r0
7000c15a:	461a      	mov	r2, r3
7000c15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000c15e:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
7000c160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000c162:	2200      	movs	r2, #0
7000c164:	729a      	strb	r2, [r3, #10]
7000c166:	2200      	movs	r2, #0
7000c168:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
7000c16a:	68bb      	ldr	r3, [r7, #8]
7000c16c:	695b      	ldr	r3, [r3, #20]
7000c16e:	687a      	ldr	r2, [r7, #4]
7000c170:	6a79      	ldr	r1, [r7, #36]	@ 0x24
7000c172:	68b8      	ldr	r0, [r7, #8]
7000c174:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
7000c176:	6a78      	ldr	r0, [r7, #36]	@ 0x24
7000c178:	f001 fb5e 	bl	7000d838 <pbuf_free>
    left = (u16_t)(left - fragsize);
7000c17c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
7000c180:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
7000c182:	1ad3      	subs	r3, r2, r3
7000c184:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
7000c188:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
7000c18c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
7000c18e:	4413      	add	r3, r2
7000c190:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
7000c194:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
7000c198:	2b00      	cmp	r3, #0
7000c19a:	f47f af19 	bne.w	7000bfd0 <ip4_frag+0x84>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
7000c19e:	2300      	movs	r3, #0
7000c1a0:	e002      	b.n	7000c1a8 <ip4_frag+0x25c>
      goto memerr;
7000c1a2:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
7000c1a4:	f04f 33ff 	mov.w	r3, #4294967295
}
7000c1a8:	4618      	mov	r0, r3
7000c1aa:	3748      	adds	r7, #72	@ 0x48
7000c1ac:	46bd      	mov	sp, r7
7000c1ae:	bd80      	pop	{r7, pc}
7000c1b0:	700151d4 	.word	0x700151d4
7000c1b4:	700153dc 	.word	0x700153dc
7000c1b8:	70015248 	.word	0x70015248
7000c1bc:	700153fc 	.word	0x700153fc
7000c1c0:	7000bee5 	.word	0x7000bee5

7000c1c4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
7000c1c4:	b480      	push	{r7}
7000c1c6:	b083      	sub	sp, #12
7000c1c8:	af00      	add	r7, sp, #0
7000c1ca:	4603      	mov	r3, r0
7000c1cc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
7000c1ce:	4b05      	ldr	r3, [pc, #20]	@ (7000c1e4 <ptr_to_mem+0x20>)
7000c1d0:	681a      	ldr	r2, [r3, #0]
7000c1d2:	88fb      	ldrh	r3, [r7, #6]
7000c1d4:	4413      	add	r3, r2
}
7000c1d6:	4618      	mov	r0, r3
7000c1d8:	370c      	adds	r7, #12
7000c1da:	46bd      	mov	sp, r7
7000c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
7000c1e0:	4770      	bx	lr
7000c1e2:	bf00      	nop
7000c1e4:	2400538c 	.word	0x2400538c

7000c1e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
7000c1e8:	b480      	push	{r7}
7000c1ea:	b083      	sub	sp, #12
7000c1ec:	af00      	add	r7, sp, #0
7000c1ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
7000c1f0:	4b05      	ldr	r3, [pc, #20]	@ (7000c208 <mem_to_ptr+0x20>)
7000c1f2:	681b      	ldr	r3, [r3, #0]
7000c1f4:	687a      	ldr	r2, [r7, #4]
7000c1f6:	1ad3      	subs	r3, r2, r3
7000c1f8:	b29b      	uxth	r3, r3
}
7000c1fa:	4618      	mov	r0, r3
7000c1fc:	370c      	adds	r7, #12
7000c1fe:	46bd      	mov	sp, r7
7000c200:	f85d 7b04 	ldr.w	r7, [sp], #4
7000c204:	4770      	bx	lr
7000c206:	bf00      	nop
7000c208:	2400538c 	.word	0x2400538c

7000c20c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
7000c20c:	b590      	push	{r4, r7, lr}
7000c20e:	b085      	sub	sp, #20
7000c210:	af00      	add	r7, sp, #0
7000c212:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
7000c214:	4b45      	ldr	r3, [pc, #276]	@ (7000c32c <plug_holes+0x120>)
7000c216:	681b      	ldr	r3, [r3, #0]
7000c218:	687a      	ldr	r2, [r7, #4]
7000c21a:	429a      	cmp	r2, r3
7000c21c:	d206      	bcs.n	7000c22c <plug_holes+0x20>
7000c21e:	4b44      	ldr	r3, [pc, #272]	@ (7000c330 <plug_holes+0x124>)
7000c220:	f240 12df 	movw	r2, #479	@ 0x1df
7000c224:	4943      	ldr	r1, [pc, #268]	@ (7000c334 <plug_holes+0x128>)
7000c226:	4844      	ldr	r0, [pc, #272]	@ (7000c338 <plug_holes+0x12c>)
7000c228:	f007 fd72 	bl	70013d10 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
7000c22c:	4b43      	ldr	r3, [pc, #268]	@ (7000c33c <plug_holes+0x130>)
7000c22e:	681b      	ldr	r3, [r3, #0]
7000c230:	687a      	ldr	r2, [r7, #4]
7000c232:	429a      	cmp	r2, r3
7000c234:	d306      	bcc.n	7000c244 <plug_holes+0x38>
7000c236:	4b3e      	ldr	r3, [pc, #248]	@ (7000c330 <plug_holes+0x124>)
7000c238:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
7000c23c:	4940      	ldr	r1, [pc, #256]	@ (7000c340 <plug_holes+0x134>)
7000c23e:	483e      	ldr	r0, [pc, #248]	@ (7000c338 <plug_holes+0x12c>)
7000c240:	f007 fd66 	bl	70013d10 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
7000c244:	687b      	ldr	r3, [r7, #4]
7000c246:	791b      	ldrb	r3, [r3, #4]
7000c248:	2b00      	cmp	r3, #0
7000c24a:	d006      	beq.n	7000c25a <plug_holes+0x4e>
7000c24c:	4b38      	ldr	r3, [pc, #224]	@ (7000c330 <plug_holes+0x124>)
7000c24e:	f240 12e1 	movw	r2, #481	@ 0x1e1
7000c252:	493c      	ldr	r1, [pc, #240]	@ (7000c344 <plug_holes+0x138>)
7000c254:	4838      	ldr	r0, [pc, #224]	@ (7000c338 <plug_holes+0x12c>)
7000c256:	f007 fd5b 	bl	70013d10 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
7000c25a:	687b      	ldr	r3, [r7, #4]
7000c25c:	881b      	ldrh	r3, [r3, #0]
7000c25e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c262:	d906      	bls.n	7000c272 <plug_holes+0x66>
7000c264:	4b32      	ldr	r3, [pc, #200]	@ (7000c330 <plug_holes+0x124>)
7000c266:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
7000c26a:	4937      	ldr	r1, [pc, #220]	@ (7000c348 <plug_holes+0x13c>)
7000c26c:	4832      	ldr	r0, [pc, #200]	@ (7000c338 <plug_holes+0x12c>)
7000c26e:	f007 fd4f 	bl	70013d10 <iprintf>

  nmem = ptr_to_mem(mem->next);
7000c272:	687b      	ldr	r3, [r7, #4]
7000c274:	881b      	ldrh	r3, [r3, #0]
7000c276:	4618      	mov	r0, r3
7000c278:	f7ff ffa4 	bl	7000c1c4 <ptr_to_mem>
7000c27c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
7000c27e:	687a      	ldr	r2, [r7, #4]
7000c280:	68fb      	ldr	r3, [r7, #12]
7000c282:	429a      	cmp	r2, r3
7000c284:	d024      	beq.n	7000c2d0 <plug_holes+0xc4>
7000c286:	68fb      	ldr	r3, [r7, #12]
7000c288:	791b      	ldrb	r3, [r3, #4]
7000c28a:	2b00      	cmp	r3, #0
7000c28c:	d120      	bne.n	7000c2d0 <plug_holes+0xc4>
7000c28e:	4b2b      	ldr	r3, [pc, #172]	@ (7000c33c <plug_holes+0x130>)
7000c290:	681b      	ldr	r3, [r3, #0]
7000c292:	68fa      	ldr	r2, [r7, #12]
7000c294:	429a      	cmp	r2, r3
7000c296:	d01b      	beq.n	7000c2d0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
7000c298:	4b2c      	ldr	r3, [pc, #176]	@ (7000c34c <plug_holes+0x140>)
7000c29a:	681b      	ldr	r3, [r3, #0]
7000c29c:	68fa      	ldr	r2, [r7, #12]
7000c29e:	429a      	cmp	r2, r3
7000c2a0:	d102      	bne.n	7000c2a8 <plug_holes+0x9c>
      lfree = mem;
7000c2a2:	4a2a      	ldr	r2, [pc, #168]	@ (7000c34c <plug_holes+0x140>)
7000c2a4:	687b      	ldr	r3, [r7, #4]
7000c2a6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
7000c2a8:	68fb      	ldr	r3, [r7, #12]
7000c2aa:	881a      	ldrh	r2, [r3, #0]
7000c2ac:	687b      	ldr	r3, [r7, #4]
7000c2ae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
7000c2b0:	68fb      	ldr	r3, [r7, #12]
7000c2b2:	881b      	ldrh	r3, [r3, #0]
7000c2b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c2b8:	d00a      	beq.n	7000c2d0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
7000c2ba:	68fb      	ldr	r3, [r7, #12]
7000c2bc:	881b      	ldrh	r3, [r3, #0]
7000c2be:	4618      	mov	r0, r3
7000c2c0:	f7ff ff80 	bl	7000c1c4 <ptr_to_mem>
7000c2c4:	4604      	mov	r4, r0
7000c2c6:	6878      	ldr	r0, [r7, #4]
7000c2c8:	f7ff ff8e 	bl	7000c1e8 <mem_to_ptr>
7000c2cc:	4603      	mov	r3, r0
7000c2ce:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
7000c2d0:	687b      	ldr	r3, [r7, #4]
7000c2d2:	885b      	ldrh	r3, [r3, #2]
7000c2d4:	4618      	mov	r0, r3
7000c2d6:	f7ff ff75 	bl	7000c1c4 <ptr_to_mem>
7000c2da:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
7000c2dc:	68ba      	ldr	r2, [r7, #8]
7000c2de:	687b      	ldr	r3, [r7, #4]
7000c2e0:	429a      	cmp	r2, r3
7000c2e2:	d01f      	beq.n	7000c324 <plug_holes+0x118>
7000c2e4:	68bb      	ldr	r3, [r7, #8]
7000c2e6:	791b      	ldrb	r3, [r3, #4]
7000c2e8:	2b00      	cmp	r3, #0
7000c2ea:	d11b      	bne.n	7000c324 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
7000c2ec:	4b17      	ldr	r3, [pc, #92]	@ (7000c34c <plug_holes+0x140>)
7000c2ee:	681b      	ldr	r3, [r3, #0]
7000c2f0:	687a      	ldr	r2, [r7, #4]
7000c2f2:	429a      	cmp	r2, r3
7000c2f4:	d102      	bne.n	7000c2fc <plug_holes+0xf0>
      lfree = pmem;
7000c2f6:	4a15      	ldr	r2, [pc, #84]	@ (7000c34c <plug_holes+0x140>)
7000c2f8:	68bb      	ldr	r3, [r7, #8]
7000c2fa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
7000c2fc:	687b      	ldr	r3, [r7, #4]
7000c2fe:	881a      	ldrh	r2, [r3, #0]
7000c300:	68bb      	ldr	r3, [r7, #8]
7000c302:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
7000c304:	687b      	ldr	r3, [r7, #4]
7000c306:	881b      	ldrh	r3, [r3, #0]
7000c308:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c30c:	d00a      	beq.n	7000c324 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
7000c30e:	687b      	ldr	r3, [r7, #4]
7000c310:	881b      	ldrh	r3, [r3, #0]
7000c312:	4618      	mov	r0, r3
7000c314:	f7ff ff56 	bl	7000c1c4 <ptr_to_mem>
7000c318:	4604      	mov	r4, r0
7000c31a:	68b8      	ldr	r0, [r7, #8]
7000c31c:	f7ff ff64 	bl	7000c1e8 <mem_to_ptr>
7000c320:	4603      	mov	r3, r0
7000c322:	8063      	strh	r3, [r4, #2]
    }
  }
}
7000c324:	bf00      	nop
7000c326:	3714      	adds	r7, #20
7000c328:	46bd      	mov	sp, r7
7000c32a:	bd90      	pop	{r4, r7, pc}
7000c32c:	2400538c 	.word	0x2400538c
7000c330:	7001540c 	.word	0x7001540c
7000c334:	70015468 	.word	0x70015468
7000c338:	70015480 	.word	0x70015480
7000c33c:	24005390 	.word	0x24005390
7000c340:	700154a8 	.word	0x700154a8
7000c344:	700154c4 	.word	0x700154c4
7000c348:	700154e0 	.word	0x700154e0
7000c34c:	24005398 	.word	0x24005398

7000c350 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
7000c350:	b580      	push	{r7, lr}
7000c352:	b082      	sub	sp, #8
7000c354:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
7000c356:	4b1d      	ldr	r3, [pc, #116]	@ (7000c3cc <mem_init+0x7c>)
7000c358:	4a1d      	ldr	r2, [pc, #116]	@ (7000c3d0 <mem_init+0x80>)
7000c35a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
7000c35c:	4b1b      	ldr	r3, [pc, #108]	@ (7000c3cc <mem_init+0x7c>)
7000c35e:	681b      	ldr	r3, [r3, #0]
7000c360:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
7000c362:	687b      	ldr	r3, [r7, #4]
7000c364:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
7000c368:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
7000c36a:	687b      	ldr	r3, [r7, #4]
7000c36c:	2200      	movs	r2, #0
7000c36e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
7000c370:	687b      	ldr	r3, [r7, #4]
7000c372:	2200      	movs	r2, #0
7000c374:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
7000c376:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
7000c37a:	f7ff ff23 	bl	7000c1c4 <ptr_to_mem>
7000c37e:	4603      	mov	r3, r0
7000c380:	4a14      	ldr	r2, [pc, #80]	@ (7000c3d4 <mem_init+0x84>)
7000c382:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
7000c384:	4b13      	ldr	r3, [pc, #76]	@ (7000c3d4 <mem_init+0x84>)
7000c386:	681b      	ldr	r3, [r3, #0]
7000c388:	2201      	movs	r2, #1
7000c38a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
7000c38c:	4b11      	ldr	r3, [pc, #68]	@ (7000c3d4 <mem_init+0x84>)
7000c38e:	681b      	ldr	r3, [r3, #0]
7000c390:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
7000c394:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
7000c396:	4b0f      	ldr	r3, [pc, #60]	@ (7000c3d4 <mem_init+0x84>)
7000c398:	681b      	ldr	r3, [r3, #0]
7000c39a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
7000c39e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
7000c3a0:	4b0a      	ldr	r3, [pc, #40]	@ (7000c3cc <mem_init+0x7c>)
7000c3a2:	681b      	ldr	r3, [r3, #0]
7000c3a4:	4a0c      	ldr	r2, [pc, #48]	@ (7000c3d8 <mem_init+0x88>)
7000c3a6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
7000c3a8:	480c      	ldr	r0, [pc, #48]	@ (7000c3dc <mem_init+0x8c>)
7000c3aa:	f001 fd5d 	bl	7000de68 <sys_mutex_new>
7000c3ae:	4603      	mov	r3, r0
7000c3b0:	2b00      	cmp	r3, #0
7000c3b2:	d006      	beq.n	7000c3c2 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
7000c3b4:	4b0a      	ldr	r3, [pc, #40]	@ (7000c3e0 <mem_init+0x90>)
7000c3b6:	f240 221f 	movw	r2, #543	@ 0x21f
7000c3ba:	490a      	ldr	r1, [pc, #40]	@ (7000c3e4 <mem_init+0x94>)
7000c3bc:	480a      	ldr	r0, [pc, #40]	@ (7000c3e8 <mem_init+0x98>)
7000c3be:	f007 fca7 	bl	70013d10 <iprintf>
  }
}
7000c3c2:	bf00      	nop
7000c3c4:	3708      	adds	r7, #8
7000c3c6:	46bd      	mov	sp, r7
7000c3c8:	bd80      	pop	{r7, pc}
7000c3ca:	bf00      	nop
7000c3cc:	2400538c 	.word	0x2400538c
7000c3d0:	24040000 	.word	0x24040000
7000c3d4:	24005390 	.word	0x24005390
7000c3d8:	24005398 	.word	0x24005398
7000c3dc:	24005394 	.word	0x24005394
7000c3e0:	7001540c 	.word	0x7001540c
7000c3e4:	7001550c 	.word	0x7001550c
7000c3e8:	70015480 	.word	0x70015480

7000c3ec <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
7000c3ec:	b580      	push	{r7, lr}
7000c3ee:	b086      	sub	sp, #24
7000c3f0:	af00      	add	r7, sp, #0
7000c3f2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
7000c3f4:	6878      	ldr	r0, [r7, #4]
7000c3f6:	f7ff fef7 	bl	7000c1e8 <mem_to_ptr>
7000c3fa:	4603      	mov	r3, r0
7000c3fc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
7000c3fe:	687b      	ldr	r3, [r7, #4]
7000c400:	881b      	ldrh	r3, [r3, #0]
7000c402:	4618      	mov	r0, r3
7000c404:	f7ff fede 	bl	7000c1c4 <ptr_to_mem>
7000c408:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
7000c40a:	687b      	ldr	r3, [r7, #4]
7000c40c:	885b      	ldrh	r3, [r3, #2]
7000c40e:	4618      	mov	r0, r3
7000c410:	f7ff fed8 	bl	7000c1c4 <ptr_to_mem>
7000c414:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
7000c416:	687b      	ldr	r3, [r7, #4]
7000c418:	881b      	ldrh	r3, [r3, #0]
7000c41a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c41e:	d818      	bhi.n	7000c452 <mem_link_valid+0x66>
7000c420:	687b      	ldr	r3, [r7, #4]
7000c422:	885b      	ldrh	r3, [r3, #2]
7000c424:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c428:	d813      	bhi.n	7000c452 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
7000c42a:	687b      	ldr	r3, [r7, #4]
7000c42c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
7000c42e:	8afa      	ldrh	r2, [r7, #22]
7000c430:	429a      	cmp	r2, r3
7000c432:	d004      	beq.n	7000c43e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
7000c434:	68fb      	ldr	r3, [r7, #12]
7000c436:	881b      	ldrh	r3, [r3, #0]
7000c438:	8afa      	ldrh	r2, [r7, #22]
7000c43a:	429a      	cmp	r2, r3
7000c43c:	d109      	bne.n	7000c452 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
7000c43e:	4b08      	ldr	r3, [pc, #32]	@ (7000c460 <mem_link_valid+0x74>)
7000c440:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
7000c442:	693a      	ldr	r2, [r7, #16]
7000c444:	429a      	cmp	r2, r3
7000c446:	d006      	beq.n	7000c456 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
7000c448:	693b      	ldr	r3, [r7, #16]
7000c44a:	885b      	ldrh	r3, [r3, #2]
7000c44c:	8afa      	ldrh	r2, [r7, #22]
7000c44e:	429a      	cmp	r2, r3
7000c450:	d001      	beq.n	7000c456 <mem_link_valid+0x6a>
    return 0;
7000c452:	2300      	movs	r3, #0
7000c454:	e000      	b.n	7000c458 <mem_link_valid+0x6c>
  }
  return 1;
7000c456:	2301      	movs	r3, #1
}
7000c458:	4618      	mov	r0, r3
7000c45a:	3718      	adds	r7, #24
7000c45c:	46bd      	mov	sp, r7
7000c45e:	bd80      	pop	{r7, pc}
7000c460:	24005390 	.word	0x24005390

7000c464 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
7000c464:	b580      	push	{r7, lr}
7000c466:	b088      	sub	sp, #32
7000c468:	af00      	add	r7, sp, #0
7000c46a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
7000c46c:	687b      	ldr	r3, [r7, #4]
7000c46e:	2b00      	cmp	r3, #0
7000c470:	d070      	beq.n	7000c554 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
7000c472:	687b      	ldr	r3, [r7, #4]
7000c474:	f003 0303 	and.w	r3, r3, #3
7000c478:	2b00      	cmp	r3, #0
7000c47a:	d00d      	beq.n	7000c498 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
7000c47c:	4b37      	ldr	r3, [pc, #220]	@ (7000c55c <mem_free+0xf8>)
7000c47e:	f240 2273 	movw	r2, #627	@ 0x273
7000c482:	4937      	ldr	r1, [pc, #220]	@ (7000c560 <mem_free+0xfc>)
7000c484:	4837      	ldr	r0, [pc, #220]	@ (7000c564 <mem_free+0x100>)
7000c486:	f007 fc43 	bl	70013d10 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
7000c48a:	f001 fd3f 	bl	7000df0c <sys_arch_protect>
7000c48e:	60f8      	str	r0, [r7, #12]
7000c490:	68f8      	ldr	r0, [r7, #12]
7000c492:	f001 fd49 	bl	7000df28 <sys_arch_unprotect>
    return;
7000c496:	e05e      	b.n	7000c556 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
7000c498:	687b      	ldr	r3, [r7, #4]
7000c49a:	3b08      	subs	r3, #8
7000c49c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
7000c49e:	4b32      	ldr	r3, [pc, #200]	@ (7000c568 <mem_free+0x104>)
7000c4a0:	681b      	ldr	r3, [r3, #0]
7000c4a2:	69fa      	ldr	r2, [r7, #28]
7000c4a4:	429a      	cmp	r2, r3
7000c4a6:	d306      	bcc.n	7000c4b6 <mem_free+0x52>
7000c4a8:	687b      	ldr	r3, [r7, #4]
7000c4aa:	f103 020c 	add.w	r2, r3, #12
7000c4ae:	4b2f      	ldr	r3, [pc, #188]	@ (7000c56c <mem_free+0x108>)
7000c4b0:	681b      	ldr	r3, [r3, #0]
7000c4b2:	429a      	cmp	r2, r3
7000c4b4:	d90d      	bls.n	7000c4d2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
7000c4b6:	4b29      	ldr	r3, [pc, #164]	@ (7000c55c <mem_free+0xf8>)
7000c4b8:	f240 227f 	movw	r2, #639	@ 0x27f
7000c4bc:	492c      	ldr	r1, [pc, #176]	@ (7000c570 <mem_free+0x10c>)
7000c4be:	4829      	ldr	r0, [pc, #164]	@ (7000c564 <mem_free+0x100>)
7000c4c0:	f007 fc26 	bl	70013d10 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
7000c4c4:	f001 fd22 	bl	7000df0c <sys_arch_protect>
7000c4c8:	6138      	str	r0, [r7, #16]
7000c4ca:	6938      	ldr	r0, [r7, #16]
7000c4cc:	f001 fd2c 	bl	7000df28 <sys_arch_unprotect>
    return;
7000c4d0:	e041      	b.n	7000c556 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
7000c4d2:	4828      	ldr	r0, [pc, #160]	@ (7000c574 <mem_free+0x110>)
7000c4d4:	f001 fcde 	bl	7000de94 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
7000c4d8:	69fb      	ldr	r3, [r7, #28]
7000c4da:	791b      	ldrb	r3, [r3, #4]
7000c4dc:	2b00      	cmp	r3, #0
7000c4de:	d110      	bne.n	7000c502 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
7000c4e0:	4b1e      	ldr	r3, [pc, #120]	@ (7000c55c <mem_free+0xf8>)
7000c4e2:	f44f 7223 	mov.w	r2, #652	@ 0x28c
7000c4e6:	4924      	ldr	r1, [pc, #144]	@ (7000c578 <mem_free+0x114>)
7000c4e8:	481e      	ldr	r0, [pc, #120]	@ (7000c564 <mem_free+0x100>)
7000c4ea:	f007 fc11 	bl	70013d10 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
7000c4ee:	4821      	ldr	r0, [pc, #132]	@ (7000c574 <mem_free+0x110>)
7000c4f0:	f001 fcdf 	bl	7000deb2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
7000c4f4:	f001 fd0a 	bl	7000df0c <sys_arch_protect>
7000c4f8:	6178      	str	r0, [r7, #20]
7000c4fa:	6978      	ldr	r0, [r7, #20]
7000c4fc:	f001 fd14 	bl	7000df28 <sys_arch_unprotect>
    return;
7000c500:	e029      	b.n	7000c556 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
7000c502:	69f8      	ldr	r0, [r7, #28]
7000c504:	f7ff ff72 	bl	7000c3ec <mem_link_valid>
7000c508:	4603      	mov	r3, r0
7000c50a:	2b00      	cmp	r3, #0
7000c50c:	d110      	bne.n	7000c530 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
7000c50e:	4b13      	ldr	r3, [pc, #76]	@ (7000c55c <mem_free+0xf8>)
7000c510:	f240 2295 	movw	r2, #661	@ 0x295
7000c514:	4919      	ldr	r1, [pc, #100]	@ (7000c57c <mem_free+0x118>)
7000c516:	4813      	ldr	r0, [pc, #76]	@ (7000c564 <mem_free+0x100>)
7000c518:	f007 fbfa 	bl	70013d10 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
7000c51c:	4815      	ldr	r0, [pc, #84]	@ (7000c574 <mem_free+0x110>)
7000c51e:	f001 fcc8 	bl	7000deb2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
7000c522:	f001 fcf3 	bl	7000df0c <sys_arch_protect>
7000c526:	61b8      	str	r0, [r7, #24]
7000c528:	69b8      	ldr	r0, [r7, #24]
7000c52a:	f001 fcfd 	bl	7000df28 <sys_arch_unprotect>
    return;
7000c52e:	e012      	b.n	7000c556 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
7000c530:	69fb      	ldr	r3, [r7, #28]
7000c532:	2200      	movs	r2, #0
7000c534:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
7000c536:	4b12      	ldr	r3, [pc, #72]	@ (7000c580 <mem_free+0x11c>)
7000c538:	681b      	ldr	r3, [r3, #0]
7000c53a:	69fa      	ldr	r2, [r7, #28]
7000c53c:	429a      	cmp	r2, r3
7000c53e:	d202      	bcs.n	7000c546 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
7000c540:	4a0f      	ldr	r2, [pc, #60]	@ (7000c580 <mem_free+0x11c>)
7000c542:	69fb      	ldr	r3, [r7, #28]
7000c544:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
7000c546:	69f8      	ldr	r0, [r7, #28]
7000c548:	f7ff fe60 	bl	7000c20c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
7000c54c:	4809      	ldr	r0, [pc, #36]	@ (7000c574 <mem_free+0x110>)
7000c54e:	f001 fcb0 	bl	7000deb2 <sys_mutex_unlock>
7000c552:	e000      	b.n	7000c556 <mem_free+0xf2>
    return;
7000c554:	bf00      	nop
}
7000c556:	3720      	adds	r7, #32
7000c558:	46bd      	mov	sp, r7
7000c55a:	bd80      	pop	{r7, pc}
7000c55c:	7001540c 	.word	0x7001540c
7000c560:	70015528 	.word	0x70015528
7000c564:	70015480 	.word	0x70015480
7000c568:	2400538c 	.word	0x2400538c
7000c56c:	24005390 	.word	0x24005390
7000c570:	7001554c 	.word	0x7001554c
7000c574:	24005394 	.word	0x24005394
7000c578:	70015568 	.word	0x70015568
7000c57c:	70015590 	.word	0x70015590
7000c580:	24005398 	.word	0x24005398

7000c584 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
7000c584:	b580      	push	{r7, lr}
7000c586:	b088      	sub	sp, #32
7000c588:	af00      	add	r7, sp, #0
7000c58a:	6078      	str	r0, [r7, #4]
7000c58c:	460b      	mov	r3, r1
7000c58e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
7000c590:	887b      	ldrh	r3, [r7, #2]
7000c592:	3303      	adds	r3, #3
7000c594:	b29b      	uxth	r3, r3
7000c596:	f023 0303 	bic.w	r3, r3, #3
7000c59a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
7000c59c:	8bfb      	ldrh	r3, [r7, #30]
7000c59e:	2b0b      	cmp	r3, #11
7000c5a0:	d801      	bhi.n	7000c5a6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
7000c5a2:	230c      	movs	r3, #12
7000c5a4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
7000c5a6:	8bfb      	ldrh	r3, [r7, #30]
7000c5a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c5ac:	d803      	bhi.n	7000c5b6 <mem_trim+0x32>
7000c5ae:	8bfa      	ldrh	r2, [r7, #30]
7000c5b0:	887b      	ldrh	r3, [r7, #2]
7000c5b2:	429a      	cmp	r2, r3
7000c5b4:	d201      	bcs.n	7000c5ba <mem_trim+0x36>
    return NULL;
7000c5b6:	2300      	movs	r3, #0
7000c5b8:	e0d8      	b.n	7000c76c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
7000c5ba:	4b6e      	ldr	r3, [pc, #440]	@ (7000c774 <mem_trim+0x1f0>)
7000c5bc:	681b      	ldr	r3, [r3, #0]
7000c5be:	687a      	ldr	r2, [r7, #4]
7000c5c0:	429a      	cmp	r2, r3
7000c5c2:	d304      	bcc.n	7000c5ce <mem_trim+0x4a>
7000c5c4:	4b6c      	ldr	r3, [pc, #432]	@ (7000c778 <mem_trim+0x1f4>)
7000c5c6:	681b      	ldr	r3, [r3, #0]
7000c5c8:	687a      	ldr	r2, [r7, #4]
7000c5ca:	429a      	cmp	r2, r3
7000c5cc:	d306      	bcc.n	7000c5dc <mem_trim+0x58>
7000c5ce:	4b6b      	ldr	r3, [pc, #428]	@ (7000c77c <mem_trim+0x1f8>)
7000c5d0:	f240 22d1 	movw	r2, #721	@ 0x2d1
7000c5d4:	496a      	ldr	r1, [pc, #424]	@ (7000c780 <mem_trim+0x1fc>)
7000c5d6:	486b      	ldr	r0, [pc, #428]	@ (7000c784 <mem_trim+0x200>)
7000c5d8:	f007 fb9a 	bl	70013d10 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
7000c5dc:	4b65      	ldr	r3, [pc, #404]	@ (7000c774 <mem_trim+0x1f0>)
7000c5de:	681b      	ldr	r3, [r3, #0]
7000c5e0:	687a      	ldr	r2, [r7, #4]
7000c5e2:	429a      	cmp	r2, r3
7000c5e4:	d304      	bcc.n	7000c5f0 <mem_trim+0x6c>
7000c5e6:	4b64      	ldr	r3, [pc, #400]	@ (7000c778 <mem_trim+0x1f4>)
7000c5e8:	681b      	ldr	r3, [r3, #0]
7000c5ea:	687a      	ldr	r2, [r7, #4]
7000c5ec:	429a      	cmp	r2, r3
7000c5ee:	d307      	bcc.n	7000c600 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
7000c5f0:	f001 fc8c 	bl	7000df0c <sys_arch_protect>
7000c5f4:	60b8      	str	r0, [r7, #8]
7000c5f6:	68b8      	ldr	r0, [r7, #8]
7000c5f8:	f001 fc96 	bl	7000df28 <sys_arch_unprotect>
    return rmem;
7000c5fc:	687b      	ldr	r3, [r7, #4]
7000c5fe:	e0b5      	b.n	7000c76c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
7000c600:	687b      	ldr	r3, [r7, #4]
7000c602:	3b08      	subs	r3, #8
7000c604:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
7000c606:	69b8      	ldr	r0, [r7, #24]
7000c608:	f7ff fdee 	bl	7000c1e8 <mem_to_ptr>
7000c60c:	4603      	mov	r3, r0
7000c60e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
7000c610:	69bb      	ldr	r3, [r7, #24]
7000c612:	881a      	ldrh	r2, [r3, #0]
7000c614:	8afb      	ldrh	r3, [r7, #22]
7000c616:	1ad3      	subs	r3, r2, r3
7000c618:	b29b      	uxth	r3, r3
7000c61a:	3b08      	subs	r3, #8
7000c61c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
7000c61e:	8bfa      	ldrh	r2, [r7, #30]
7000c620:	8abb      	ldrh	r3, [r7, #20]
7000c622:	429a      	cmp	r2, r3
7000c624:	d906      	bls.n	7000c634 <mem_trim+0xb0>
7000c626:	4b55      	ldr	r3, [pc, #340]	@ (7000c77c <mem_trim+0x1f8>)
7000c628:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
7000c62c:	4956      	ldr	r1, [pc, #344]	@ (7000c788 <mem_trim+0x204>)
7000c62e:	4855      	ldr	r0, [pc, #340]	@ (7000c784 <mem_trim+0x200>)
7000c630:	f007 fb6e 	bl	70013d10 <iprintf>
  if (newsize > size) {
7000c634:	8bfa      	ldrh	r2, [r7, #30]
7000c636:	8abb      	ldrh	r3, [r7, #20]
7000c638:	429a      	cmp	r2, r3
7000c63a:	d901      	bls.n	7000c640 <mem_trim+0xbc>
    /* not supported */
    return NULL;
7000c63c:	2300      	movs	r3, #0
7000c63e:	e095      	b.n	7000c76c <mem_trim+0x1e8>
  }
  if (newsize == size) {
7000c640:	8bfa      	ldrh	r2, [r7, #30]
7000c642:	8abb      	ldrh	r3, [r7, #20]
7000c644:	429a      	cmp	r2, r3
7000c646:	d101      	bne.n	7000c64c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
7000c648:	687b      	ldr	r3, [r7, #4]
7000c64a:	e08f      	b.n	7000c76c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
7000c64c:	484f      	ldr	r0, [pc, #316]	@ (7000c78c <mem_trim+0x208>)
7000c64e:	f001 fc21 	bl	7000de94 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
7000c652:	69bb      	ldr	r3, [r7, #24]
7000c654:	881b      	ldrh	r3, [r3, #0]
7000c656:	4618      	mov	r0, r3
7000c658:	f7ff fdb4 	bl	7000c1c4 <ptr_to_mem>
7000c65c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
7000c65e:	693b      	ldr	r3, [r7, #16]
7000c660:	791b      	ldrb	r3, [r3, #4]
7000c662:	2b00      	cmp	r3, #0
7000c664:	d13f      	bne.n	7000c6e6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
7000c666:	69bb      	ldr	r3, [r7, #24]
7000c668:	881b      	ldrh	r3, [r3, #0]
7000c66a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c66e:	d106      	bne.n	7000c67e <mem_trim+0xfa>
7000c670:	4b42      	ldr	r3, [pc, #264]	@ (7000c77c <mem_trim+0x1f8>)
7000c672:	f240 22f5 	movw	r2, #757	@ 0x2f5
7000c676:	4946      	ldr	r1, [pc, #280]	@ (7000c790 <mem_trim+0x20c>)
7000c678:	4842      	ldr	r0, [pc, #264]	@ (7000c784 <mem_trim+0x200>)
7000c67a:	f007 fb49 	bl	70013d10 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
7000c67e:	693b      	ldr	r3, [r7, #16]
7000c680:	881b      	ldrh	r3, [r3, #0]
7000c682:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
7000c684:	8afa      	ldrh	r2, [r7, #22]
7000c686:	8bfb      	ldrh	r3, [r7, #30]
7000c688:	4413      	add	r3, r2
7000c68a:	b29b      	uxth	r3, r3
7000c68c:	3308      	adds	r3, #8
7000c68e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
7000c690:	4b40      	ldr	r3, [pc, #256]	@ (7000c794 <mem_trim+0x210>)
7000c692:	681b      	ldr	r3, [r3, #0]
7000c694:	693a      	ldr	r2, [r7, #16]
7000c696:	429a      	cmp	r2, r3
7000c698:	d106      	bne.n	7000c6a8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
7000c69a:	89fb      	ldrh	r3, [r7, #14]
7000c69c:	4618      	mov	r0, r3
7000c69e:	f7ff fd91 	bl	7000c1c4 <ptr_to_mem>
7000c6a2:	4603      	mov	r3, r0
7000c6a4:	4a3b      	ldr	r2, [pc, #236]	@ (7000c794 <mem_trim+0x210>)
7000c6a6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
7000c6a8:	89fb      	ldrh	r3, [r7, #14]
7000c6aa:	4618      	mov	r0, r3
7000c6ac:	f7ff fd8a 	bl	7000c1c4 <ptr_to_mem>
7000c6b0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
7000c6b2:	693b      	ldr	r3, [r7, #16]
7000c6b4:	2200      	movs	r2, #0
7000c6b6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
7000c6b8:	693b      	ldr	r3, [r7, #16]
7000c6ba:	89ba      	ldrh	r2, [r7, #12]
7000c6bc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
7000c6be:	693b      	ldr	r3, [r7, #16]
7000c6c0:	8afa      	ldrh	r2, [r7, #22]
7000c6c2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
7000c6c4:	69bb      	ldr	r3, [r7, #24]
7000c6c6:	89fa      	ldrh	r2, [r7, #14]
7000c6c8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
7000c6ca:	693b      	ldr	r3, [r7, #16]
7000c6cc:	881b      	ldrh	r3, [r3, #0]
7000c6ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c6d2:	d047      	beq.n	7000c764 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
7000c6d4:	693b      	ldr	r3, [r7, #16]
7000c6d6:	881b      	ldrh	r3, [r3, #0]
7000c6d8:	4618      	mov	r0, r3
7000c6da:	f7ff fd73 	bl	7000c1c4 <ptr_to_mem>
7000c6de:	4602      	mov	r2, r0
7000c6e0:	89fb      	ldrh	r3, [r7, #14]
7000c6e2:	8053      	strh	r3, [r2, #2]
7000c6e4:	e03e      	b.n	7000c764 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
7000c6e6:	8bfb      	ldrh	r3, [r7, #30]
7000c6e8:	f103 0214 	add.w	r2, r3, #20
7000c6ec:	8abb      	ldrh	r3, [r7, #20]
7000c6ee:	429a      	cmp	r2, r3
7000c6f0:	d838      	bhi.n	7000c764 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
7000c6f2:	8afa      	ldrh	r2, [r7, #22]
7000c6f4:	8bfb      	ldrh	r3, [r7, #30]
7000c6f6:	4413      	add	r3, r2
7000c6f8:	b29b      	uxth	r3, r3
7000c6fa:	3308      	adds	r3, #8
7000c6fc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
7000c6fe:	69bb      	ldr	r3, [r7, #24]
7000c700:	881b      	ldrh	r3, [r3, #0]
7000c702:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c706:	d106      	bne.n	7000c716 <mem_trim+0x192>
7000c708:	4b1c      	ldr	r3, [pc, #112]	@ (7000c77c <mem_trim+0x1f8>)
7000c70a:	f240 3216 	movw	r2, #790	@ 0x316
7000c70e:	4920      	ldr	r1, [pc, #128]	@ (7000c790 <mem_trim+0x20c>)
7000c710:	481c      	ldr	r0, [pc, #112]	@ (7000c784 <mem_trim+0x200>)
7000c712:	f007 fafd 	bl	70013d10 <iprintf>
    mem2 = ptr_to_mem(ptr2);
7000c716:	89fb      	ldrh	r3, [r7, #14]
7000c718:	4618      	mov	r0, r3
7000c71a:	f7ff fd53 	bl	7000c1c4 <ptr_to_mem>
7000c71e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
7000c720:	4b1c      	ldr	r3, [pc, #112]	@ (7000c794 <mem_trim+0x210>)
7000c722:	681b      	ldr	r3, [r3, #0]
7000c724:	693a      	ldr	r2, [r7, #16]
7000c726:	429a      	cmp	r2, r3
7000c728:	d202      	bcs.n	7000c730 <mem_trim+0x1ac>
      lfree = mem2;
7000c72a:	4a1a      	ldr	r2, [pc, #104]	@ (7000c794 <mem_trim+0x210>)
7000c72c:	693b      	ldr	r3, [r7, #16]
7000c72e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
7000c730:	693b      	ldr	r3, [r7, #16]
7000c732:	2200      	movs	r2, #0
7000c734:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
7000c736:	69bb      	ldr	r3, [r7, #24]
7000c738:	881a      	ldrh	r2, [r3, #0]
7000c73a:	693b      	ldr	r3, [r7, #16]
7000c73c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
7000c73e:	693b      	ldr	r3, [r7, #16]
7000c740:	8afa      	ldrh	r2, [r7, #22]
7000c742:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
7000c744:	69bb      	ldr	r3, [r7, #24]
7000c746:	89fa      	ldrh	r2, [r7, #14]
7000c748:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
7000c74a:	693b      	ldr	r3, [r7, #16]
7000c74c:	881b      	ldrh	r3, [r3, #0]
7000c74e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c752:	d007      	beq.n	7000c764 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
7000c754:	693b      	ldr	r3, [r7, #16]
7000c756:	881b      	ldrh	r3, [r3, #0]
7000c758:	4618      	mov	r0, r3
7000c75a:	f7ff fd33 	bl	7000c1c4 <ptr_to_mem>
7000c75e:	4602      	mov	r2, r0
7000c760:	89fb      	ldrh	r3, [r7, #14]
7000c762:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
7000c764:	4809      	ldr	r0, [pc, #36]	@ (7000c78c <mem_trim+0x208>)
7000c766:	f001 fba4 	bl	7000deb2 <sys_mutex_unlock>
  return rmem;
7000c76a:	687b      	ldr	r3, [r7, #4]
}
7000c76c:	4618      	mov	r0, r3
7000c76e:	3720      	adds	r7, #32
7000c770:	46bd      	mov	sp, r7
7000c772:	bd80      	pop	{r7, pc}
7000c774:	2400538c 	.word	0x2400538c
7000c778:	24005390 	.word	0x24005390
7000c77c:	7001540c 	.word	0x7001540c
7000c780:	700155c4 	.word	0x700155c4
7000c784:	70015480 	.word	0x70015480
7000c788:	700155dc 	.word	0x700155dc
7000c78c:	24005394 	.word	0x24005394
7000c790:	700155fc 	.word	0x700155fc
7000c794:	24005398 	.word	0x24005398

7000c798 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
7000c798:	b580      	push	{r7, lr}
7000c79a:	b088      	sub	sp, #32
7000c79c:	af00      	add	r7, sp, #0
7000c79e:	4603      	mov	r3, r0
7000c7a0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
7000c7a2:	88fb      	ldrh	r3, [r7, #6]
7000c7a4:	2b00      	cmp	r3, #0
7000c7a6:	d101      	bne.n	7000c7ac <mem_malloc+0x14>
    return NULL;
7000c7a8:	2300      	movs	r3, #0
7000c7aa:	e0e2      	b.n	7000c972 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
7000c7ac:	88fb      	ldrh	r3, [r7, #6]
7000c7ae:	3303      	adds	r3, #3
7000c7b0:	b29b      	uxth	r3, r3
7000c7b2:	f023 0303 	bic.w	r3, r3, #3
7000c7b6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
7000c7b8:	8bbb      	ldrh	r3, [r7, #28]
7000c7ba:	2b0b      	cmp	r3, #11
7000c7bc:	d801      	bhi.n	7000c7c2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
7000c7be:	230c      	movs	r3, #12
7000c7c0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
7000c7c2:	8bbb      	ldrh	r3, [r7, #28]
7000c7c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c7c8:	d803      	bhi.n	7000c7d2 <mem_malloc+0x3a>
7000c7ca:	8bba      	ldrh	r2, [r7, #28]
7000c7cc:	88fb      	ldrh	r3, [r7, #6]
7000c7ce:	429a      	cmp	r2, r3
7000c7d0:	d201      	bcs.n	7000c7d6 <mem_malloc+0x3e>
    return NULL;
7000c7d2:	2300      	movs	r3, #0
7000c7d4:	e0cd      	b.n	7000c972 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
7000c7d6:	4869      	ldr	r0, [pc, #420]	@ (7000c97c <mem_malloc+0x1e4>)
7000c7d8:	f001 fb5c 	bl	7000de94 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
7000c7dc:	4b68      	ldr	r3, [pc, #416]	@ (7000c980 <mem_malloc+0x1e8>)
7000c7de:	681b      	ldr	r3, [r3, #0]
7000c7e0:	4618      	mov	r0, r3
7000c7e2:	f7ff fd01 	bl	7000c1e8 <mem_to_ptr>
7000c7e6:	4603      	mov	r3, r0
7000c7e8:	83fb      	strh	r3, [r7, #30]
7000c7ea:	e0b7      	b.n	7000c95c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
7000c7ec:	8bfb      	ldrh	r3, [r7, #30]
7000c7ee:	4618      	mov	r0, r3
7000c7f0:	f7ff fce8 	bl	7000c1c4 <ptr_to_mem>
7000c7f4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
7000c7f6:	697b      	ldr	r3, [r7, #20]
7000c7f8:	791b      	ldrb	r3, [r3, #4]
7000c7fa:	2b00      	cmp	r3, #0
7000c7fc:	f040 80a7 	bne.w	7000c94e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
7000c800:	697b      	ldr	r3, [r7, #20]
7000c802:	881b      	ldrh	r3, [r3, #0]
7000c804:	461a      	mov	r2, r3
7000c806:	8bfb      	ldrh	r3, [r7, #30]
7000c808:	1ad3      	subs	r3, r2, r3
7000c80a:	f1a3 0208 	sub.w	r2, r3, #8
7000c80e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
7000c810:	429a      	cmp	r2, r3
7000c812:	f0c0 809c 	bcc.w	7000c94e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
7000c816:	697b      	ldr	r3, [r7, #20]
7000c818:	881b      	ldrh	r3, [r3, #0]
7000c81a:	461a      	mov	r2, r3
7000c81c:	8bfb      	ldrh	r3, [r7, #30]
7000c81e:	1ad3      	subs	r3, r2, r3
7000c820:	f1a3 0208 	sub.w	r2, r3, #8
7000c824:	8bbb      	ldrh	r3, [r7, #28]
7000c826:	3314      	adds	r3, #20
7000c828:	429a      	cmp	r2, r3
7000c82a:	d333      	bcc.n	7000c894 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
7000c82c:	8bfa      	ldrh	r2, [r7, #30]
7000c82e:	8bbb      	ldrh	r3, [r7, #28]
7000c830:	4413      	add	r3, r2
7000c832:	b29b      	uxth	r3, r3
7000c834:	3308      	adds	r3, #8
7000c836:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
7000c838:	8a7b      	ldrh	r3, [r7, #18]
7000c83a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c83e:	d106      	bne.n	7000c84e <mem_malloc+0xb6>
7000c840:	4b50      	ldr	r3, [pc, #320]	@ (7000c984 <mem_malloc+0x1ec>)
7000c842:	f240 3287 	movw	r2, #903	@ 0x387
7000c846:	4950      	ldr	r1, [pc, #320]	@ (7000c988 <mem_malloc+0x1f0>)
7000c848:	4850      	ldr	r0, [pc, #320]	@ (7000c98c <mem_malloc+0x1f4>)
7000c84a:	f007 fa61 	bl	70013d10 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
7000c84e:	8a7b      	ldrh	r3, [r7, #18]
7000c850:	4618      	mov	r0, r3
7000c852:	f7ff fcb7 	bl	7000c1c4 <ptr_to_mem>
7000c856:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
7000c858:	68fb      	ldr	r3, [r7, #12]
7000c85a:	2200      	movs	r2, #0
7000c85c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
7000c85e:	697b      	ldr	r3, [r7, #20]
7000c860:	881a      	ldrh	r2, [r3, #0]
7000c862:	68fb      	ldr	r3, [r7, #12]
7000c864:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
7000c866:	68fb      	ldr	r3, [r7, #12]
7000c868:	8bfa      	ldrh	r2, [r7, #30]
7000c86a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
7000c86c:	697b      	ldr	r3, [r7, #20]
7000c86e:	8a7a      	ldrh	r2, [r7, #18]
7000c870:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
7000c872:	697b      	ldr	r3, [r7, #20]
7000c874:	2201      	movs	r2, #1
7000c876:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
7000c878:	68fb      	ldr	r3, [r7, #12]
7000c87a:	881b      	ldrh	r3, [r3, #0]
7000c87c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c880:	d00b      	beq.n	7000c89a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
7000c882:	68fb      	ldr	r3, [r7, #12]
7000c884:	881b      	ldrh	r3, [r3, #0]
7000c886:	4618      	mov	r0, r3
7000c888:	f7ff fc9c 	bl	7000c1c4 <ptr_to_mem>
7000c88c:	4602      	mov	r2, r0
7000c88e:	8a7b      	ldrh	r3, [r7, #18]
7000c890:	8053      	strh	r3, [r2, #2]
7000c892:	e002      	b.n	7000c89a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
7000c894:	697b      	ldr	r3, [r7, #20]
7000c896:	2201      	movs	r2, #1
7000c898:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
7000c89a:	4b39      	ldr	r3, [pc, #228]	@ (7000c980 <mem_malloc+0x1e8>)
7000c89c:	681b      	ldr	r3, [r3, #0]
7000c89e:	697a      	ldr	r2, [r7, #20]
7000c8a0:	429a      	cmp	r2, r3
7000c8a2:	d127      	bne.n	7000c8f4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
7000c8a4:	4b36      	ldr	r3, [pc, #216]	@ (7000c980 <mem_malloc+0x1e8>)
7000c8a6:	681b      	ldr	r3, [r3, #0]
7000c8a8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
7000c8aa:	e005      	b.n	7000c8b8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
7000c8ac:	69bb      	ldr	r3, [r7, #24]
7000c8ae:	881b      	ldrh	r3, [r3, #0]
7000c8b0:	4618      	mov	r0, r3
7000c8b2:	f7ff fc87 	bl	7000c1c4 <ptr_to_mem>
7000c8b6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
7000c8b8:	69bb      	ldr	r3, [r7, #24]
7000c8ba:	791b      	ldrb	r3, [r3, #4]
7000c8bc:	2b00      	cmp	r3, #0
7000c8be:	d004      	beq.n	7000c8ca <mem_malloc+0x132>
7000c8c0:	4b33      	ldr	r3, [pc, #204]	@ (7000c990 <mem_malloc+0x1f8>)
7000c8c2:	681b      	ldr	r3, [r3, #0]
7000c8c4:	69ba      	ldr	r2, [r7, #24]
7000c8c6:	429a      	cmp	r2, r3
7000c8c8:	d1f0      	bne.n	7000c8ac <mem_malloc+0x114>
          }
          lfree = cur;
7000c8ca:	4a2d      	ldr	r2, [pc, #180]	@ (7000c980 <mem_malloc+0x1e8>)
7000c8cc:	69bb      	ldr	r3, [r7, #24]
7000c8ce:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
7000c8d0:	4b2b      	ldr	r3, [pc, #172]	@ (7000c980 <mem_malloc+0x1e8>)
7000c8d2:	681a      	ldr	r2, [r3, #0]
7000c8d4:	4b2e      	ldr	r3, [pc, #184]	@ (7000c990 <mem_malloc+0x1f8>)
7000c8d6:	681b      	ldr	r3, [r3, #0]
7000c8d8:	429a      	cmp	r2, r3
7000c8da:	d00b      	beq.n	7000c8f4 <mem_malloc+0x15c>
7000c8dc:	4b28      	ldr	r3, [pc, #160]	@ (7000c980 <mem_malloc+0x1e8>)
7000c8de:	681b      	ldr	r3, [r3, #0]
7000c8e0:	791b      	ldrb	r3, [r3, #4]
7000c8e2:	2b00      	cmp	r3, #0
7000c8e4:	d006      	beq.n	7000c8f4 <mem_malloc+0x15c>
7000c8e6:	4b27      	ldr	r3, [pc, #156]	@ (7000c984 <mem_malloc+0x1ec>)
7000c8e8:	f240 32b5 	movw	r2, #949	@ 0x3b5
7000c8ec:	4929      	ldr	r1, [pc, #164]	@ (7000c994 <mem_malloc+0x1fc>)
7000c8ee:	4827      	ldr	r0, [pc, #156]	@ (7000c98c <mem_malloc+0x1f4>)
7000c8f0:	f007 fa0e 	bl	70013d10 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
7000c8f4:	4821      	ldr	r0, [pc, #132]	@ (7000c97c <mem_malloc+0x1e4>)
7000c8f6:	f001 fadc 	bl	7000deb2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
7000c8fa:	8bba      	ldrh	r2, [r7, #28]
7000c8fc:	697b      	ldr	r3, [r7, #20]
7000c8fe:	4413      	add	r3, r2
7000c900:	3308      	adds	r3, #8
7000c902:	4a23      	ldr	r2, [pc, #140]	@ (7000c990 <mem_malloc+0x1f8>)
7000c904:	6812      	ldr	r2, [r2, #0]
7000c906:	4293      	cmp	r3, r2
7000c908:	d906      	bls.n	7000c918 <mem_malloc+0x180>
7000c90a:	4b1e      	ldr	r3, [pc, #120]	@ (7000c984 <mem_malloc+0x1ec>)
7000c90c:	f240 32b9 	movw	r2, #953	@ 0x3b9
7000c910:	4921      	ldr	r1, [pc, #132]	@ (7000c998 <mem_malloc+0x200>)
7000c912:	481e      	ldr	r0, [pc, #120]	@ (7000c98c <mem_malloc+0x1f4>)
7000c914:	f007 f9fc 	bl	70013d10 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
7000c918:	697b      	ldr	r3, [r7, #20]
7000c91a:	f003 0303 	and.w	r3, r3, #3
7000c91e:	2b00      	cmp	r3, #0
7000c920:	d006      	beq.n	7000c930 <mem_malloc+0x198>
7000c922:	4b18      	ldr	r3, [pc, #96]	@ (7000c984 <mem_malloc+0x1ec>)
7000c924:	f240 32bb 	movw	r2, #955	@ 0x3bb
7000c928:	491c      	ldr	r1, [pc, #112]	@ (7000c99c <mem_malloc+0x204>)
7000c92a:	4818      	ldr	r0, [pc, #96]	@ (7000c98c <mem_malloc+0x1f4>)
7000c92c:	f007 f9f0 	bl	70013d10 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
7000c930:	697b      	ldr	r3, [r7, #20]
7000c932:	f003 0303 	and.w	r3, r3, #3
7000c936:	2b00      	cmp	r3, #0
7000c938:	d006      	beq.n	7000c948 <mem_malloc+0x1b0>
7000c93a:	4b12      	ldr	r3, [pc, #72]	@ (7000c984 <mem_malloc+0x1ec>)
7000c93c:	f240 32bd 	movw	r2, #957	@ 0x3bd
7000c940:	4917      	ldr	r1, [pc, #92]	@ (7000c9a0 <mem_malloc+0x208>)
7000c942:	4812      	ldr	r0, [pc, #72]	@ (7000c98c <mem_malloc+0x1f4>)
7000c944:	f007 f9e4 	bl	70013d10 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
7000c948:	697b      	ldr	r3, [r7, #20]
7000c94a:	3308      	adds	r3, #8
7000c94c:	e011      	b.n	7000c972 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
7000c94e:	8bfb      	ldrh	r3, [r7, #30]
7000c950:	4618      	mov	r0, r3
7000c952:	f7ff fc37 	bl	7000c1c4 <ptr_to_mem>
7000c956:	4603      	mov	r3, r0
7000c958:	881b      	ldrh	r3, [r3, #0]
7000c95a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
7000c95c:	8bfa      	ldrh	r2, [r7, #30]
7000c95e:	8bbb      	ldrh	r3, [r7, #28]
7000c960:	f5c3 4380 	rsb	r3, r3, #16384	@ 0x4000
7000c964:	429a      	cmp	r2, r3
7000c966:	f4ff af41 	bcc.w	7000c7ec <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
7000c96a:	4804      	ldr	r0, [pc, #16]	@ (7000c97c <mem_malloc+0x1e4>)
7000c96c:	f001 faa1 	bl	7000deb2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
7000c970:	2300      	movs	r3, #0
}
7000c972:	4618      	mov	r0, r3
7000c974:	3720      	adds	r7, #32
7000c976:	46bd      	mov	sp, r7
7000c978:	bd80      	pop	{r7, pc}
7000c97a:	bf00      	nop
7000c97c:	24005394 	.word	0x24005394
7000c980:	24005398 	.word	0x24005398
7000c984:	7001540c 	.word	0x7001540c
7000c988:	700155fc 	.word	0x700155fc
7000c98c:	70015480 	.word	0x70015480
7000c990:	24005390 	.word	0x24005390
7000c994:	70015610 	.word	0x70015610
7000c998:	7001562c 	.word	0x7001562c
7000c99c:	7001565c 	.word	0x7001565c
7000c9a0:	7001568c 	.word	0x7001568c

7000c9a4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
7000c9a4:	b480      	push	{r7}
7000c9a6:	b085      	sub	sp, #20
7000c9a8:	af00      	add	r7, sp, #0
7000c9aa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
7000c9ac:	687b      	ldr	r3, [r7, #4]
7000c9ae:	689b      	ldr	r3, [r3, #8]
7000c9b0:	2200      	movs	r2, #0
7000c9b2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
7000c9b4:	687b      	ldr	r3, [r7, #4]
7000c9b6:	685b      	ldr	r3, [r3, #4]
7000c9b8:	3303      	adds	r3, #3
7000c9ba:	f023 0303 	bic.w	r3, r3, #3
7000c9be:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
7000c9c0:	2300      	movs	r3, #0
7000c9c2:	60fb      	str	r3, [r7, #12]
7000c9c4:	e011      	b.n	7000c9ea <memp_init_pool+0x46>
    memp->next = *desc->tab;
7000c9c6:	687b      	ldr	r3, [r7, #4]
7000c9c8:	689b      	ldr	r3, [r3, #8]
7000c9ca:	681a      	ldr	r2, [r3, #0]
7000c9cc:	68bb      	ldr	r3, [r7, #8]
7000c9ce:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
7000c9d0:	687b      	ldr	r3, [r7, #4]
7000c9d2:	689b      	ldr	r3, [r3, #8]
7000c9d4:	68ba      	ldr	r2, [r7, #8]
7000c9d6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
7000c9d8:	687b      	ldr	r3, [r7, #4]
7000c9da:	881b      	ldrh	r3, [r3, #0]
7000c9dc:	461a      	mov	r2, r3
7000c9de:	68bb      	ldr	r3, [r7, #8]
7000c9e0:	4413      	add	r3, r2
7000c9e2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
7000c9e4:	68fb      	ldr	r3, [r7, #12]
7000c9e6:	3301      	adds	r3, #1
7000c9e8:	60fb      	str	r3, [r7, #12]
7000c9ea:	687b      	ldr	r3, [r7, #4]
7000c9ec:	885b      	ldrh	r3, [r3, #2]
7000c9ee:	461a      	mov	r2, r3
7000c9f0:	68fb      	ldr	r3, [r7, #12]
7000c9f2:	4293      	cmp	r3, r2
7000c9f4:	dbe7      	blt.n	7000c9c6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
7000c9f6:	bf00      	nop
7000c9f8:	bf00      	nop
7000c9fa:	3714      	adds	r7, #20
7000c9fc:	46bd      	mov	sp, r7
7000c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
7000ca02:	4770      	bx	lr

7000ca04 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
7000ca04:	b580      	push	{r7, lr}
7000ca06:	b082      	sub	sp, #8
7000ca08:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
7000ca0a:	2300      	movs	r3, #0
7000ca0c:	80fb      	strh	r3, [r7, #6]
7000ca0e:	e009      	b.n	7000ca24 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
7000ca10:	88fb      	ldrh	r3, [r7, #6]
7000ca12:	4a08      	ldr	r2, [pc, #32]	@ (7000ca34 <memp_init+0x30>)
7000ca14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
7000ca18:	4618      	mov	r0, r3
7000ca1a:	f7ff ffc3 	bl	7000c9a4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
7000ca1e:	88fb      	ldrh	r3, [r7, #6]
7000ca20:	3301      	adds	r3, #1
7000ca22:	80fb      	strh	r3, [r7, #6]
7000ca24:	88fb      	ldrh	r3, [r7, #6]
7000ca26:	2b0c      	cmp	r3, #12
7000ca28:	d9f2      	bls.n	7000ca10 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
7000ca2a:	bf00      	nop
7000ca2c:	bf00      	nop
7000ca2e:	3708      	adds	r7, #8
7000ca30:	46bd      	mov	sp, r7
7000ca32:	bd80      	pop	{r7, pc}
7000ca34:	700172fc 	.word	0x700172fc

7000ca38 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
7000ca38:	b580      	push	{r7, lr}
7000ca3a:	b084      	sub	sp, #16
7000ca3c:	af00      	add	r7, sp, #0
7000ca3e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
7000ca40:	f001 fa64 	bl	7000df0c <sys_arch_protect>
7000ca44:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
7000ca46:	687b      	ldr	r3, [r7, #4]
7000ca48:	689b      	ldr	r3, [r3, #8]
7000ca4a:	681b      	ldr	r3, [r3, #0]
7000ca4c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
7000ca4e:	68bb      	ldr	r3, [r7, #8]
7000ca50:	2b00      	cmp	r3, #0
7000ca52:	d015      	beq.n	7000ca80 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
7000ca54:	687b      	ldr	r3, [r7, #4]
7000ca56:	689b      	ldr	r3, [r3, #8]
7000ca58:	68ba      	ldr	r2, [r7, #8]
7000ca5a:	6812      	ldr	r2, [r2, #0]
7000ca5c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
7000ca5e:	68bb      	ldr	r3, [r7, #8]
7000ca60:	f003 0303 	and.w	r3, r3, #3
7000ca64:	2b00      	cmp	r3, #0
7000ca66:	d006      	beq.n	7000ca76 <do_memp_malloc_pool+0x3e>
7000ca68:	4b09      	ldr	r3, [pc, #36]	@ (7000ca90 <do_memp_malloc_pool+0x58>)
7000ca6a:	f44f 728c 	mov.w	r2, #280	@ 0x118
7000ca6e:	4909      	ldr	r1, [pc, #36]	@ (7000ca94 <do_memp_malloc_pool+0x5c>)
7000ca70:	4809      	ldr	r0, [pc, #36]	@ (7000ca98 <do_memp_malloc_pool+0x60>)
7000ca72:	f007 f94d 	bl	70013d10 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
7000ca76:	68f8      	ldr	r0, [r7, #12]
7000ca78:	f001 fa56 	bl	7000df28 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
7000ca7c:	68bb      	ldr	r3, [r7, #8]
7000ca7e:	e003      	b.n	7000ca88 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
7000ca80:	68f8      	ldr	r0, [r7, #12]
7000ca82:	f001 fa51 	bl	7000df28 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
7000ca86:	2300      	movs	r3, #0
}
7000ca88:	4618      	mov	r0, r3
7000ca8a:	3710      	adds	r7, #16
7000ca8c:	46bd      	mov	sp, r7
7000ca8e:	bd80      	pop	{r7, pc}
7000ca90:	700156b0 	.word	0x700156b0
7000ca94:	70015710 	.word	0x70015710
7000ca98:	70015734 	.word	0x70015734

7000ca9c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
7000ca9c:	b580      	push	{r7, lr}
7000ca9e:	b082      	sub	sp, #8
7000caa0:	af00      	add	r7, sp, #0
7000caa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
7000caa4:	687b      	ldr	r3, [r7, #4]
7000caa6:	2b00      	cmp	r3, #0
7000caa8:	d106      	bne.n	7000cab8 <memp_malloc_pool+0x1c>
7000caaa:	4b0a      	ldr	r3, [pc, #40]	@ (7000cad4 <memp_malloc_pool+0x38>)
7000caac:	f44f 729e 	mov.w	r2, #316	@ 0x13c
7000cab0:	4909      	ldr	r1, [pc, #36]	@ (7000cad8 <memp_malloc_pool+0x3c>)
7000cab2:	480a      	ldr	r0, [pc, #40]	@ (7000cadc <memp_malloc_pool+0x40>)
7000cab4:	f007 f92c 	bl	70013d10 <iprintf>
  if (desc == NULL) {
7000cab8:	687b      	ldr	r3, [r7, #4]
7000caba:	2b00      	cmp	r3, #0
7000cabc:	d101      	bne.n	7000cac2 <memp_malloc_pool+0x26>
    return NULL;
7000cabe:	2300      	movs	r3, #0
7000cac0:	e003      	b.n	7000caca <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
7000cac2:	6878      	ldr	r0, [r7, #4]
7000cac4:	f7ff ffb8 	bl	7000ca38 <do_memp_malloc_pool>
7000cac8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
7000caca:	4618      	mov	r0, r3
7000cacc:	3708      	adds	r7, #8
7000cace:	46bd      	mov	sp, r7
7000cad0:	bd80      	pop	{r7, pc}
7000cad2:	bf00      	nop
7000cad4:	700156b0 	.word	0x700156b0
7000cad8:	7001575c 	.word	0x7001575c
7000cadc:	70015734 	.word	0x70015734

7000cae0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
7000cae0:	b580      	push	{r7, lr}
7000cae2:	b084      	sub	sp, #16
7000cae4:	af00      	add	r7, sp, #0
7000cae6:	4603      	mov	r3, r0
7000cae8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
7000caea:	79fb      	ldrb	r3, [r7, #7]
7000caec:	2b0c      	cmp	r3, #12
7000caee:	d901      	bls.n	7000caf4 <memp_malloc+0x14>
7000caf0:	2300      	movs	r3, #0
7000caf2:	e008      	b.n	7000cb06 <memp_malloc+0x26>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
7000caf4:	79fb      	ldrb	r3, [r7, #7]
7000caf6:	4a06      	ldr	r2, [pc, #24]	@ (7000cb10 <memp_malloc+0x30>)
7000caf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
7000cafc:	4618      	mov	r0, r3
7000cafe:	f7ff ff9b 	bl	7000ca38 <do_memp_malloc_pool>
7000cb02:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
7000cb04:	68fb      	ldr	r3, [r7, #12]
}
7000cb06:	4618      	mov	r0, r3
7000cb08:	3710      	adds	r7, #16
7000cb0a:	46bd      	mov	sp, r7
7000cb0c:	bd80      	pop	{r7, pc}
7000cb0e:	bf00      	nop
7000cb10:	700172fc 	.word	0x700172fc

7000cb14 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
7000cb14:	b580      	push	{r7, lr}
7000cb16:	b084      	sub	sp, #16
7000cb18:	af00      	add	r7, sp, #0
7000cb1a:	6078      	str	r0, [r7, #4]
7000cb1c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
7000cb1e:	683b      	ldr	r3, [r7, #0]
7000cb20:	f003 0303 	and.w	r3, r3, #3
7000cb24:	2b00      	cmp	r3, #0
7000cb26:	d006      	beq.n	7000cb36 <do_memp_free_pool+0x22>
7000cb28:	4b0d      	ldr	r3, [pc, #52]	@ (7000cb60 <do_memp_free_pool+0x4c>)
7000cb2a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
7000cb2e:	490d      	ldr	r1, [pc, #52]	@ (7000cb64 <do_memp_free_pool+0x50>)
7000cb30:	480d      	ldr	r0, [pc, #52]	@ (7000cb68 <do_memp_free_pool+0x54>)
7000cb32:	f007 f8ed 	bl	70013d10 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
7000cb36:	683b      	ldr	r3, [r7, #0]
7000cb38:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
7000cb3a:	f001 f9e7 	bl	7000df0c <sys_arch_protect>
7000cb3e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
7000cb40:	687b      	ldr	r3, [r7, #4]
7000cb42:	689b      	ldr	r3, [r3, #8]
7000cb44:	681a      	ldr	r2, [r3, #0]
7000cb46:	68fb      	ldr	r3, [r7, #12]
7000cb48:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
7000cb4a:	687b      	ldr	r3, [r7, #4]
7000cb4c:	689b      	ldr	r3, [r3, #8]
7000cb4e:	68fa      	ldr	r2, [r7, #12]
7000cb50:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
7000cb52:	68b8      	ldr	r0, [r7, #8]
7000cb54:	f001 f9e8 	bl	7000df28 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
7000cb58:	bf00      	nop
7000cb5a:	3710      	adds	r7, #16
7000cb5c:	46bd      	mov	sp, r7
7000cb5e:	bd80      	pop	{r7, pc}
7000cb60:	700156b0 	.word	0x700156b0
7000cb64:	70015770 	.word	0x70015770
7000cb68:	70015734 	.word	0x70015734

7000cb6c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
7000cb6c:	b580      	push	{r7, lr}
7000cb6e:	b082      	sub	sp, #8
7000cb70:	af00      	add	r7, sp, #0
7000cb72:	6078      	str	r0, [r7, #4]
7000cb74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
7000cb76:	687b      	ldr	r3, [r7, #4]
7000cb78:	2b00      	cmp	r3, #0
7000cb7a:	d106      	bne.n	7000cb8a <memp_free_pool+0x1e>
7000cb7c:	4b0a      	ldr	r3, [pc, #40]	@ (7000cba8 <memp_free_pool+0x3c>)
7000cb7e:	f240 1295 	movw	r2, #405	@ 0x195
7000cb82:	490a      	ldr	r1, [pc, #40]	@ (7000cbac <memp_free_pool+0x40>)
7000cb84:	480a      	ldr	r0, [pc, #40]	@ (7000cbb0 <memp_free_pool+0x44>)
7000cb86:	f007 f8c3 	bl	70013d10 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
7000cb8a:	687b      	ldr	r3, [r7, #4]
7000cb8c:	2b00      	cmp	r3, #0
7000cb8e:	d007      	beq.n	7000cba0 <memp_free_pool+0x34>
7000cb90:	683b      	ldr	r3, [r7, #0]
7000cb92:	2b00      	cmp	r3, #0
7000cb94:	d004      	beq.n	7000cba0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
7000cb96:	6839      	ldr	r1, [r7, #0]
7000cb98:	6878      	ldr	r0, [r7, #4]
7000cb9a:	f7ff ffbb 	bl	7000cb14 <do_memp_free_pool>
7000cb9e:	e000      	b.n	7000cba2 <memp_free_pool+0x36>
    return;
7000cba0:	bf00      	nop
}
7000cba2:	3708      	adds	r7, #8
7000cba4:	46bd      	mov	sp, r7
7000cba6:	bd80      	pop	{r7, pc}
7000cba8:	700156b0 	.word	0x700156b0
7000cbac:	7001575c 	.word	0x7001575c
7000cbb0:	70015734 	.word	0x70015734

7000cbb4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
7000cbb4:	b580      	push	{r7, lr}
7000cbb6:	b082      	sub	sp, #8
7000cbb8:	af00      	add	r7, sp, #0
7000cbba:	4603      	mov	r3, r0
7000cbbc:	6039      	str	r1, [r7, #0]
7000cbbe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
7000cbc0:	79fb      	ldrb	r3, [r7, #7]
7000cbc2:	2b0c      	cmp	r3, #12
7000cbc4:	d80c      	bhi.n	7000cbe0 <memp_free+0x2c>

  if (mem == NULL) {
7000cbc6:	683b      	ldr	r3, [r7, #0]
7000cbc8:	2b00      	cmp	r3, #0
7000cbca:	d008      	beq.n	7000cbde <memp_free+0x2a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
7000cbcc:	79fb      	ldrb	r3, [r7, #7]
7000cbce:	4a06      	ldr	r2, [pc, #24]	@ (7000cbe8 <memp_free+0x34>)
7000cbd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
7000cbd4:	6839      	ldr	r1, [r7, #0]
7000cbd6:	4618      	mov	r0, r3
7000cbd8:	f7ff ff9c 	bl	7000cb14 <do_memp_free_pool>
7000cbdc:	e000      	b.n	7000cbe0 <memp_free+0x2c>
    return;
7000cbde:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
7000cbe0:	3708      	adds	r7, #8
7000cbe2:	46bd      	mov	sp, r7
7000cbe4:	bd80      	pop	{r7, pc}
7000cbe6:	bf00      	nop
7000cbe8:	700172fc 	.word	0x700172fc

7000cbec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
7000cbec:	b480      	push	{r7}
7000cbee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
7000cbf0:	bf00      	nop
7000cbf2:	46bd      	mov	sp, r7
7000cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
7000cbf8:	4770      	bx	lr
	...

7000cbfc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
7000cbfc:	b580      	push	{r7, lr}
7000cbfe:	b086      	sub	sp, #24
7000cc00:	af00      	add	r7, sp, #0
7000cc02:	60f8      	str	r0, [r7, #12]
7000cc04:	60b9      	str	r1, [r7, #8]
7000cc06:	607a      	str	r2, [r7, #4]
7000cc08:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
7000cc0a:	68fb      	ldr	r3, [r7, #12]
7000cc0c:	2b00      	cmp	r3, #0
7000cc0e:	d101      	bne.n	7000cc14 <netif_add+0x18>
7000cc10:	2300      	movs	r3, #0
7000cc12:	e09b      	b.n	7000cd4c <netif_add+0x150>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
7000cc14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000cc16:	2b00      	cmp	r3, #0
7000cc18:	d101      	bne.n	7000cc1e <netif_add+0x22>
7000cc1a:	2300      	movs	r3, #0
7000cc1c:	e096      	b.n	7000cd4c <netif_add+0x150>

#if LWIP_IPV4
  if (ipaddr == NULL) {
7000cc1e:	68bb      	ldr	r3, [r7, #8]
7000cc20:	2b00      	cmp	r3, #0
7000cc22:	d101      	bne.n	7000cc28 <netif_add+0x2c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
7000cc24:	4b4b      	ldr	r3, [pc, #300]	@ (7000cd54 <netif_add+0x158>)
7000cc26:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
7000cc28:	687b      	ldr	r3, [r7, #4]
7000cc2a:	2b00      	cmp	r3, #0
7000cc2c:	d101      	bne.n	7000cc32 <netif_add+0x36>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
7000cc2e:	4b49      	ldr	r3, [pc, #292]	@ (7000cd54 <netif_add+0x158>)
7000cc30:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
7000cc32:	683b      	ldr	r3, [r7, #0]
7000cc34:	2b00      	cmp	r3, #0
7000cc36:	d101      	bne.n	7000cc3c <netif_add+0x40>
    gw = ip_2_ip4(IP4_ADDR_ANY);
7000cc38:	4b46      	ldr	r3, [pc, #280]	@ (7000cd54 <netif_add+0x158>)
7000cc3a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
7000cc3c:	68fb      	ldr	r3, [r7, #12]
7000cc3e:	2200      	movs	r2, #0
7000cc40:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
7000cc42:	68fb      	ldr	r3, [r7, #12]
7000cc44:	2200      	movs	r2, #0
7000cc46:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
7000cc48:	68fb      	ldr	r3, [r7, #12]
7000cc4a:	2200      	movs	r2, #0
7000cc4c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
7000cc4e:	68fb      	ldr	r3, [r7, #12]
7000cc50:	4a41      	ldr	r2, [pc, #260]	@ (7000cd58 <netif_add+0x15c>)
7000cc52:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
7000cc54:	68fb      	ldr	r3, [r7, #12]
7000cc56:	2200      	movs	r2, #0
7000cc58:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
7000cc5a:	68fb      	ldr	r3, [r7, #12]
7000cc5c:	2200      	movs	r2, #0
7000cc5e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
7000cc62:	68fb      	ldr	r3, [r7, #12]
7000cc64:	2200      	movs	r2, #0
7000cc66:	61da      	str	r2, [r3, #28]
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */

  /* remember netif specific state information data */
  netif->state = state;
7000cc68:	68fb      	ldr	r3, [r7, #12]
7000cc6a:	6a3a      	ldr	r2, [r7, #32]
7000cc6c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
7000cc6e:	4b3b      	ldr	r3, [pc, #236]	@ (7000cd5c <netif_add+0x160>)
7000cc70:	781a      	ldrb	r2, [r3, #0]
7000cc72:	68fb      	ldr	r3, [r7, #12]
7000cc74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
7000cc78:	68fb      	ldr	r3, [r7, #12]
7000cc7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
7000cc7c:	611a      	str	r2, [r3, #16]
  netif->reschedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
#endif /* ENABLE_LOOPBACK */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
7000cc7e:	683b      	ldr	r3, [r7, #0]
7000cc80:	687a      	ldr	r2, [r7, #4]
7000cc82:	68b9      	ldr	r1, [r7, #8]
7000cc84:	68f8      	ldr	r0, [r7, #12]
7000cc86:	f000 f90f 	bl	7000cea8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
7000cc8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000cc8c:	68f8      	ldr	r0, [r7, #12]
7000cc8e:	4798      	blx	r3
7000cc90:	4603      	mov	r3, r0
7000cc92:	2b00      	cmp	r3, #0
7000cc94:	d001      	beq.n	7000cc9a <netif_add+0x9e>
    return NULL;
7000cc96:	2300      	movs	r3, #0
7000cc98:	e058      	b.n	7000cd4c <netif_add+0x150>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
7000cc9a:	68fb      	ldr	r3, [r7, #12]
7000cc9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000cca0:	2bff      	cmp	r3, #255	@ 0xff
7000cca2:	d103      	bne.n	7000ccac <netif_add+0xb0>
        netif->num = 0;
7000cca4:	68fb      	ldr	r3, [r7, #12]
7000cca6:	2200      	movs	r2, #0
7000cca8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
7000ccac:	2300      	movs	r3, #0
7000ccae:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
7000ccb0:	4b2b      	ldr	r3, [pc, #172]	@ (7000cd60 <netif_add+0x164>)
7000ccb2:	681b      	ldr	r3, [r3, #0]
7000ccb4:	617b      	str	r3, [r7, #20]
7000ccb6:	e02b      	b.n	7000cd10 <netif_add+0x114>
        LWIP_ASSERT("netif already added", netif2 != netif);
7000ccb8:	697a      	ldr	r2, [r7, #20]
7000ccba:	68fb      	ldr	r3, [r7, #12]
7000ccbc:	429a      	cmp	r2, r3
7000ccbe:	d106      	bne.n	7000ccce <netif_add+0xd2>
7000ccc0:	4b28      	ldr	r3, [pc, #160]	@ (7000cd64 <netif_add+0x168>)
7000ccc2:	f44f 72c7 	mov.w	r2, #398	@ 0x18e
7000ccc6:	4928      	ldr	r1, [pc, #160]	@ (7000cd68 <netif_add+0x16c>)
7000ccc8:	4828      	ldr	r0, [pc, #160]	@ (7000cd6c <netif_add+0x170>)
7000ccca:	f007 f821 	bl	70013d10 <iprintf>
        num_netifs++;
7000ccce:	693b      	ldr	r3, [r7, #16]
7000ccd0:	3301      	adds	r3, #1
7000ccd2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
7000ccd4:	693b      	ldr	r3, [r7, #16]
7000ccd6:	2bff      	cmp	r3, #255	@ 0xff
7000ccd8:	dd06      	ble.n	7000cce8 <netif_add+0xec>
7000ccda:	4b22      	ldr	r3, [pc, #136]	@ (7000cd64 <netif_add+0x168>)
7000ccdc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
7000cce0:	4923      	ldr	r1, [pc, #140]	@ (7000cd70 <netif_add+0x174>)
7000cce2:	4822      	ldr	r0, [pc, #136]	@ (7000cd6c <netif_add+0x170>)
7000cce4:	f007 f814 	bl	70013d10 <iprintf>
        if (netif2->num == netif->num) {
7000cce8:	697b      	ldr	r3, [r7, #20]
7000ccea:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
7000ccee:	68fb      	ldr	r3, [r7, #12]
7000ccf0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000ccf4:	429a      	cmp	r2, r3
7000ccf6:	d108      	bne.n	7000cd0a <netif_add+0x10e>
          netif->num++;
7000ccf8:	68fb      	ldr	r3, [r7, #12]
7000ccfa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000ccfe:	3301      	adds	r3, #1
7000cd00:	b2da      	uxtb	r2, r3
7000cd02:	68fb      	ldr	r3, [r7, #12]
7000cd04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
7000cd08:	e005      	b.n	7000cd16 <netif_add+0x11a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
7000cd0a:	697b      	ldr	r3, [r7, #20]
7000cd0c:	681b      	ldr	r3, [r3, #0]
7000cd0e:	617b      	str	r3, [r7, #20]
7000cd10:	697b      	ldr	r3, [r7, #20]
7000cd12:	2b00      	cmp	r3, #0
7000cd14:	d1d0      	bne.n	7000ccb8 <netif_add+0xbc>
        }
      }
    } while (netif2 != NULL);
7000cd16:	697b      	ldr	r3, [r7, #20]
7000cd18:	2b00      	cmp	r3, #0
7000cd1a:	d1be      	bne.n	7000cc9a <netif_add+0x9e>
  }
  if (netif->num == 254) {
7000cd1c:	68fb      	ldr	r3, [r7, #12]
7000cd1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000cd22:	2bfe      	cmp	r3, #254	@ 0xfe
7000cd24:	d103      	bne.n	7000cd2e <netif_add+0x132>
    netif_num = 0;
7000cd26:	4b0d      	ldr	r3, [pc, #52]	@ (7000cd5c <netif_add+0x160>)
7000cd28:	2200      	movs	r2, #0
7000cd2a:	701a      	strb	r2, [r3, #0]
7000cd2c:	e006      	b.n	7000cd3c <netif_add+0x140>
  } else {
    netif_num = (u8_t)(netif->num + 1);
7000cd2e:	68fb      	ldr	r3, [r7, #12]
7000cd30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000cd34:	3301      	adds	r3, #1
7000cd36:	b2da      	uxtb	r2, r3
7000cd38:	4b08      	ldr	r3, [pc, #32]	@ (7000cd5c <netif_add+0x160>)
7000cd3a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
7000cd3c:	4b08      	ldr	r3, [pc, #32]	@ (7000cd60 <netif_add+0x164>)
7000cd3e:	681a      	ldr	r2, [r3, #0]
7000cd40:	68fb      	ldr	r3, [r7, #12]
7000cd42:	601a      	str	r2, [r3, #0]
  netif_list = netif;
7000cd44:	4a06      	ldr	r2, [pc, #24]	@ (7000cd60 <netif_add+0x164>)
7000cd46:	68fb      	ldr	r3, [r7, #12]
7000cd48:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
7000cd4a:	68fb      	ldr	r3, [r7, #12]
}
7000cd4c:	4618      	mov	r0, r3
7000cd4e:	3718      	adds	r7, #24
7000cd50:	46bd      	mov	sp, r7
7000cd52:	bd80      	pop	{r7, pc}
7000cd54:	7001725c 	.word	0x7001725c
7000cd58:	7000d113 	.word	0x7000d113
7000cd5c:	24008470 	.word	0x24008470
7000cd60:	24008468 	.word	0x24008468
7000cd64:	70015790 	.word	0x70015790
7000cd68:	70015850 	.word	0x70015850
7000cd6c:	7001580c 	.word	0x7001580c
7000cd70:	70015864 	.word	0x70015864

7000cd74 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
7000cd74:	b580      	push	{r7, lr}
7000cd76:	b082      	sub	sp, #8
7000cd78:	af00      	add	r7, sp, #0
7000cd7a:	6078      	str	r0, [r7, #4]
7000cd7c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
7000cd7e:	6839      	ldr	r1, [r7, #0]
7000cd80:	6878      	ldr	r0, [r7, #4]
7000cd82:	f002 fbdf 	bl	7000f544 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
7000cd86:	6839      	ldr	r1, [r7, #0]
7000cd88:	6878      	ldr	r0, [r7, #4]
7000cd8a:	f006 fe91 	bl	70013ab0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
7000cd8e:	bf00      	nop
7000cd90:	3708      	adds	r7, #8
7000cd92:	46bd      	mov	sp, r7
7000cd94:	bd80      	pop	{r7, pc}
	...

7000cd98 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
7000cd98:	b580      	push	{r7, lr}
7000cd9a:	b086      	sub	sp, #24
7000cd9c:	af00      	add	r7, sp, #0
7000cd9e:	60f8      	str	r0, [r7, #12]
7000cda0:	60b9      	str	r1, [r7, #8]
7000cda2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
7000cda4:	68bb      	ldr	r3, [r7, #8]
7000cda6:	2b00      	cmp	r3, #0
7000cda8:	d106      	bne.n	7000cdb8 <netif_do_set_ipaddr+0x20>
7000cdaa:	4b1d      	ldr	r3, [pc, #116]	@ (7000ce20 <netif_do_set_ipaddr+0x88>)
7000cdac:	f44f 72e7 	mov.w	r2, #462	@ 0x1ce
7000cdb0:	491c      	ldr	r1, [pc, #112]	@ (7000ce24 <netif_do_set_ipaddr+0x8c>)
7000cdb2:	481d      	ldr	r0, [pc, #116]	@ (7000ce28 <netif_do_set_ipaddr+0x90>)
7000cdb4:	f006 ffac 	bl	70013d10 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
7000cdb8:	687b      	ldr	r3, [r7, #4]
7000cdba:	2b00      	cmp	r3, #0
7000cdbc:	d106      	bne.n	7000cdcc <netif_do_set_ipaddr+0x34>
7000cdbe:	4b18      	ldr	r3, [pc, #96]	@ (7000ce20 <netif_do_set_ipaddr+0x88>)
7000cdc0:	f240 12cf 	movw	r2, #463	@ 0x1cf
7000cdc4:	4917      	ldr	r1, [pc, #92]	@ (7000ce24 <netif_do_set_ipaddr+0x8c>)
7000cdc6:	4818      	ldr	r0, [pc, #96]	@ (7000ce28 <netif_do_set_ipaddr+0x90>)
7000cdc8:	f006 ffa2 	bl	70013d10 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
7000cdcc:	68bb      	ldr	r3, [r7, #8]
7000cdce:	681a      	ldr	r2, [r3, #0]
7000cdd0:	68fb      	ldr	r3, [r7, #12]
7000cdd2:	3304      	adds	r3, #4
7000cdd4:	681b      	ldr	r3, [r3, #0]
7000cdd6:	429a      	cmp	r2, r3
7000cdd8:	d01c      	beq.n	7000ce14 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
7000cdda:	68bb      	ldr	r3, [r7, #8]
7000cddc:	681b      	ldr	r3, [r3, #0]
7000cdde:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
7000cde0:	68fb      	ldr	r3, [r7, #12]
7000cde2:	3304      	adds	r3, #4
7000cde4:	681a      	ldr	r2, [r3, #0]
7000cde6:	687b      	ldr	r3, [r7, #4]
7000cde8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
7000cdea:	f107 0314 	add.w	r3, r7, #20
7000cdee:	4619      	mov	r1, r3
7000cdf0:	6878      	ldr	r0, [r7, #4]
7000cdf2:	f7ff ffbf 	bl	7000cd74 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
7000cdf6:	68bb      	ldr	r3, [r7, #8]
7000cdf8:	2b00      	cmp	r3, #0
7000cdfa:	d002      	beq.n	7000ce02 <netif_do_set_ipaddr+0x6a>
7000cdfc:	68bb      	ldr	r3, [r7, #8]
7000cdfe:	681b      	ldr	r3, [r3, #0]
7000ce00:	e000      	b.n	7000ce04 <netif_do_set_ipaddr+0x6c>
7000ce02:	2300      	movs	r3, #0
7000ce04:	68fa      	ldr	r2, [r7, #12]
7000ce06:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
7000ce08:	2101      	movs	r1, #1
7000ce0a:	68f8      	ldr	r0, [r7, #12]
7000ce0c:	f000 f8c4 	bl	7000cf98 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
7000ce10:	2301      	movs	r3, #1
7000ce12:	e000      	b.n	7000ce16 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
7000ce14:	2300      	movs	r3, #0
}
7000ce16:	4618      	mov	r0, r3
7000ce18:	3718      	adds	r7, #24
7000ce1a:	46bd      	mov	sp, r7
7000ce1c:	bd80      	pop	{r7, pc}
7000ce1e:	bf00      	nop
7000ce20:	70015790 	.word	0x70015790
7000ce24:	70015894 	.word	0x70015894
7000ce28:	7001580c 	.word	0x7001580c

7000ce2c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
7000ce2c:	b480      	push	{r7}
7000ce2e:	b085      	sub	sp, #20
7000ce30:	af00      	add	r7, sp, #0
7000ce32:	60f8      	str	r0, [r7, #12]
7000ce34:	60b9      	str	r1, [r7, #8]
7000ce36:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
7000ce38:	68bb      	ldr	r3, [r7, #8]
7000ce3a:	681a      	ldr	r2, [r3, #0]
7000ce3c:	68fb      	ldr	r3, [r7, #12]
7000ce3e:	3308      	adds	r3, #8
7000ce40:	681b      	ldr	r3, [r3, #0]
7000ce42:	429a      	cmp	r2, r3
7000ce44:	d00a      	beq.n	7000ce5c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
7000ce46:	68bb      	ldr	r3, [r7, #8]
7000ce48:	2b00      	cmp	r3, #0
7000ce4a:	d002      	beq.n	7000ce52 <netif_do_set_netmask+0x26>
7000ce4c:	68bb      	ldr	r3, [r7, #8]
7000ce4e:	681b      	ldr	r3, [r3, #0]
7000ce50:	e000      	b.n	7000ce54 <netif_do_set_netmask+0x28>
7000ce52:	2300      	movs	r3, #0
7000ce54:	68fa      	ldr	r2, [r7, #12]
7000ce56:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
7000ce58:	2301      	movs	r3, #1
7000ce5a:	e000      	b.n	7000ce5e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
7000ce5c:	2300      	movs	r3, #0
}
7000ce5e:	4618      	mov	r0, r3
7000ce60:	3714      	adds	r7, #20
7000ce62:	46bd      	mov	sp, r7
7000ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
7000ce68:	4770      	bx	lr

7000ce6a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
7000ce6a:	b480      	push	{r7}
7000ce6c:	b085      	sub	sp, #20
7000ce6e:	af00      	add	r7, sp, #0
7000ce70:	60f8      	str	r0, [r7, #12]
7000ce72:	60b9      	str	r1, [r7, #8]
7000ce74:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
7000ce76:	68bb      	ldr	r3, [r7, #8]
7000ce78:	681a      	ldr	r2, [r3, #0]
7000ce7a:	68fb      	ldr	r3, [r7, #12]
7000ce7c:	330c      	adds	r3, #12
7000ce7e:	681b      	ldr	r3, [r3, #0]
7000ce80:	429a      	cmp	r2, r3
7000ce82:	d00a      	beq.n	7000ce9a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
7000ce84:	68bb      	ldr	r3, [r7, #8]
7000ce86:	2b00      	cmp	r3, #0
7000ce88:	d002      	beq.n	7000ce90 <netif_do_set_gw+0x26>
7000ce8a:	68bb      	ldr	r3, [r7, #8]
7000ce8c:	681b      	ldr	r3, [r3, #0]
7000ce8e:	e000      	b.n	7000ce92 <netif_do_set_gw+0x28>
7000ce90:	2300      	movs	r3, #0
7000ce92:	68fa      	ldr	r2, [r7, #12]
7000ce94:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
7000ce96:	2301      	movs	r3, #1
7000ce98:	e000      	b.n	7000ce9c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
7000ce9a:	2300      	movs	r3, #0
}
7000ce9c:	4618      	mov	r0, r3
7000ce9e:	3714      	adds	r7, #20
7000cea0:	46bd      	mov	sp, r7
7000cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
7000cea6:	4770      	bx	lr

7000cea8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
7000cea8:	b580      	push	{r7, lr}
7000ceaa:	b088      	sub	sp, #32
7000ceac:	af00      	add	r7, sp, #0
7000ceae:	60f8      	str	r0, [r7, #12]
7000ceb0:	60b9      	str	r1, [r7, #8]
7000ceb2:	607a      	str	r2, [r7, #4]
7000ceb4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
7000ceb6:	2300      	movs	r3, #0
7000ceb8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
7000ceba:	2300      	movs	r3, #0
7000cebc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
7000cebe:	68bb      	ldr	r3, [r7, #8]
7000cec0:	2b00      	cmp	r3, #0
7000cec2:	d101      	bne.n	7000cec8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
7000cec4:	4b1c      	ldr	r3, [pc, #112]	@ (7000cf38 <netif_set_addr+0x90>)
7000cec6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
7000cec8:	687b      	ldr	r3, [r7, #4]
7000ceca:	2b00      	cmp	r3, #0
7000cecc:	d101      	bne.n	7000ced2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
7000cece:	4b1a      	ldr	r3, [pc, #104]	@ (7000cf38 <netif_set_addr+0x90>)
7000ced0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
7000ced2:	683b      	ldr	r3, [r7, #0]
7000ced4:	2b00      	cmp	r3, #0
7000ced6:	d101      	bne.n	7000cedc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
7000ced8:	4b17      	ldr	r3, [pc, #92]	@ (7000cf38 <netif_set_addr+0x90>)
7000ceda:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
7000cedc:	68bb      	ldr	r3, [r7, #8]
7000cede:	2b00      	cmp	r3, #0
7000cee0:	d003      	beq.n	7000ceea <netif_set_addr+0x42>
7000cee2:	68bb      	ldr	r3, [r7, #8]
7000cee4:	681b      	ldr	r3, [r3, #0]
7000cee6:	2b00      	cmp	r3, #0
7000cee8:	d101      	bne.n	7000ceee <netif_set_addr+0x46>
7000ceea:	2301      	movs	r3, #1
7000ceec:	e000      	b.n	7000cef0 <netif_set_addr+0x48>
7000ceee:	2300      	movs	r3, #0
7000cef0:	617b      	str	r3, [r7, #20]
  if (remove) {
7000cef2:	697b      	ldr	r3, [r7, #20]
7000cef4:	2b00      	cmp	r3, #0
7000cef6:	d006      	beq.n	7000cf06 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
7000cef8:	f107 0310 	add.w	r3, r7, #16
7000cefc:	461a      	mov	r2, r3
7000cefe:	68b9      	ldr	r1, [r7, #8]
7000cf00:	68f8      	ldr	r0, [r7, #12]
7000cf02:	f7ff ff49 	bl	7000cd98 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
7000cf06:	69fa      	ldr	r2, [r7, #28]
7000cf08:	6879      	ldr	r1, [r7, #4]
7000cf0a:	68f8      	ldr	r0, [r7, #12]
7000cf0c:	f7ff ff8e 	bl	7000ce2c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
7000cf10:	69ba      	ldr	r2, [r7, #24]
7000cf12:	6839      	ldr	r1, [r7, #0]
7000cf14:	68f8      	ldr	r0, [r7, #12]
7000cf16:	f7ff ffa8 	bl	7000ce6a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
7000cf1a:	697b      	ldr	r3, [r7, #20]
7000cf1c:	2b00      	cmp	r3, #0
7000cf1e:	d106      	bne.n	7000cf2e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
7000cf20:	f107 0310 	add.w	r3, r7, #16
7000cf24:	461a      	mov	r2, r3
7000cf26:	68b9      	ldr	r1, [r7, #8]
7000cf28:	68f8      	ldr	r0, [r7, #12]
7000cf2a:	f7ff ff35 	bl	7000cd98 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
7000cf2e:	bf00      	nop
7000cf30:	3720      	adds	r7, #32
7000cf32:	46bd      	mov	sp, r7
7000cf34:	bd80      	pop	{r7, pc}
7000cf36:	bf00      	nop
7000cf38:	7001725c 	.word	0x7001725c

7000cf3c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
7000cf3c:	b480      	push	{r7}
7000cf3e:	b083      	sub	sp, #12
7000cf40:	af00      	add	r7, sp, #0
7000cf42:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
7000cf44:	4a04      	ldr	r2, [pc, #16]	@ (7000cf58 <netif_set_default+0x1c>)
7000cf46:	687b      	ldr	r3, [r7, #4]
7000cf48:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
7000cf4a:	bf00      	nop
7000cf4c:	370c      	adds	r7, #12
7000cf4e:	46bd      	mov	sp, r7
7000cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
7000cf54:	4770      	bx	lr
7000cf56:	bf00      	nop
7000cf58:	2400846c 	.word	0x2400846c

7000cf5c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
7000cf5c:	b580      	push	{r7, lr}
7000cf5e:	b082      	sub	sp, #8
7000cf60:	af00      	add	r7, sp, #0
7000cf62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
7000cf64:	687b      	ldr	r3, [r7, #4]
7000cf66:	2b00      	cmp	r3, #0
7000cf68:	d013      	beq.n	7000cf92 <netif_set_up+0x36>

  if (!(netif->flags & NETIF_FLAG_UP)) {
7000cf6a:	687b      	ldr	r3, [r7, #4]
7000cf6c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000cf70:	f003 0301 	and.w	r3, r3, #1
7000cf74:	2b00      	cmp	r3, #0
7000cf76:	d10c      	bne.n	7000cf92 <netif_set_up+0x36>
    netif_set_flags(netif, NETIF_FLAG_UP);
7000cf78:	687b      	ldr	r3, [r7, #4]
7000cf7a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000cf7e:	f043 0301 	orr.w	r3, r3, #1
7000cf82:	b2da      	uxtb	r2, r3
7000cf84:	687b      	ldr	r3, [r7, #4]
7000cf86:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
7000cf8a:	2103      	movs	r1, #3
7000cf8c:	6878      	ldr	r0, [r7, #4]
7000cf8e:	f000 f803 	bl	7000cf98 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
7000cf92:	3708      	adds	r7, #8
7000cf94:	46bd      	mov	sp, r7
7000cf96:	bd80      	pop	{r7, pc}

7000cf98 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
7000cf98:	b580      	push	{r7, lr}
7000cf9a:	b082      	sub	sp, #8
7000cf9c:	af00      	add	r7, sp, #0
7000cf9e:	6078      	str	r0, [r7, #4]
7000cfa0:	460b      	mov	r3, r1
7000cfa2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
7000cfa4:	687b      	ldr	r3, [r7, #4]
7000cfa6:	2b00      	cmp	r3, #0
7000cfa8:	d106      	bne.n	7000cfb8 <netif_issue_reports+0x20>
7000cfaa:	4b18      	ldr	r3, [pc, #96]	@ (7000d00c <netif_issue_reports+0x74>)
7000cfac:	f44f 725c 	mov.w	r2, #880	@ 0x370
7000cfb0:	4917      	ldr	r1, [pc, #92]	@ (7000d010 <netif_issue_reports+0x78>)
7000cfb2:	4818      	ldr	r0, [pc, #96]	@ (7000d014 <netif_issue_reports+0x7c>)
7000cfb4:	f006 feac 	bl	70013d10 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
7000cfb8:	687b      	ldr	r3, [r7, #4]
7000cfba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000cfbe:	f003 0304 	and.w	r3, r3, #4
7000cfc2:	2b00      	cmp	r3, #0
7000cfc4:	d01e      	beq.n	7000d004 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
7000cfc6:	687b      	ldr	r3, [r7, #4]
7000cfc8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000cfcc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
7000cfd0:	2b00      	cmp	r3, #0
7000cfd2:	d017      	beq.n	7000d004 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
7000cfd4:	78fb      	ldrb	r3, [r7, #3]
7000cfd6:	f003 0301 	and.w	r3, r3, #1
7000cfda:	2b00      	cmp	r3, #0
7000cfdc:	d013      	beq.n	7000d006 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
7000cfde:	687b      	ldr	r3, [r7, #4]
7000cfe0:	3304      	adds	r3, #4
7000cfe2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
7000cfe4:	2b00      	cmp	r3, #0
7000cfe6:	d00e      	beq.n	7000d006 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
7000cfe8:	687b      	ldr	r3, [r7, #4]
7000cfea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000cfee:	f003 0308 	and.w	r3, r3, #8
7000cff2:	2b00      	cmp	r3, #0
7000cff4:	d007      	beq.n	7000d006 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
7000cff6:	687b      	ldr	r3, [r7, #4]
7000cff8:	3304      	adds	r3, #4
7000cffa:	4619      	mov	r1, r3
7000cffc:	6878      	ldr	r0, [r7, #4]
7000cffe:	f7fd fc55 	bl	7000a8ac <etharp_request>
7000d002:	e000      	b.n	7000d006 <netif_issue_reports+0x6e>
    return;
7000d004:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
7000d006:	3708      	adds	r7, #8
7000d008:	46bd      	mov	sp, r7
7000d00a:	bd80      	pop	{r7, pc}
7000d00c:	70015790 	.word	0x70015790
7000d010:	700158a4 	.word	0x700158a4
7000d014:	7001580c 	.word	0x7001580c

7000d018 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
7000d018:	b580      	push	{r7, lr}
7000d01a:	b082      	sub	sp, #8
7000d01c:	af00      	add	r7, sp, #0
7000d01e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
7000d020:	687b      	ldr	r3, [r7, #4]
7000d022:	2b00      	cmp	r3, #0
7000d024:	d019      	beq.n	7000d05a <netif_set_down+0x42>

  if (netif->flags & NETIF_FLAG_UP) {
7000d026:	687b      	ldr	r3, [r7, #4]
7000d028:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000d02c:	f003 0301 	and.w	r3, r3, #1
7000d030:	2b00      	cmp	r3, #0
7000d032:	d012      	beq.n	7000d05a <netif_set_down+0x42>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
7000d034:	687b      	ldr	r3, [r7, #4]
7000d036:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000d03a:	f023 0301 	bic.w	r3, r3, #1
7000d03e:	b2da      	uxtb	r2, r3
7000d040:	687b      	ldr	r3, [r7, #4]
7000d042:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
7000d046:	687b      	ldr	r3, [r7, #4]
7000d048:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000d04c:	f003 0308 	and.w	r3, r3, #8
7000d050:	2b00      	cmp	r3, #0
7000d052:	d002      	beq.n	7000d05a <netif_set_down+0x42>
      etharp_cleanup_netif(netif);
7000d054:	6878      	ldr	r0, [r7, #4]
7000d056:	f7fc ffd9 	bl	7000a00c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
7000d05a:	3708      	adds	r7, #8
7000d05c:	46bd      	mov	sp, r7
7000d05e:	bd80      	pop	{r7, pc}

7000d060 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
7000d060:	b580      	push	{r7, lr}
7000d062:	b082      	sub	sp, #8
7000d064:	af00      	add	r7, sp, #0
7000d066:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
7000d068:	687b      	ldr	r3, [r7, #4]
7000d06a:	2b00      	cmp	r3, #0
7000d06c:	d01b      	beq.n	7000d0a6 <netif_set_link_up+0x46>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
7000d06e:	687b      	ldr	r3, [r7, #4]
7000d070:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000d074:	f003 0304 	and.w	r3, r3, #4
7000d078:	2b00      	cmp	r3, #0
7000d07a:	d114      	bne.n	7000d0a6 <netif_set_link_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
7000d07c:	687b      	ldr	r3, [r7, #4]
7000d07e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000d082:	f043 0304 	orr.w	r3, r3, #4
7000d086:	b2da      	uxtb	r2, r3
7000d088:	687b      	ldr	r3, [r7, #4]
7000d08a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
7000d08e:	2103      	movs	r1, #3
7000d090:	6878      	ldr	r0, [r7, #4]
7000d092:	f7ff ff81 	bl	7000cf98 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
7000d096:	687b      	ldr	r3, [r7, #4]
7000d098:	69db      	ldr	r3, [r3, #28]
7000d09a:	2b00      	cmp	r3, #0
7000d09c:	d003      	beq.n	7000d0a6 <netif_set_link_up+0x46>
7000d09e:	687b      	ldr	r3, [r7, #4]
7000d0a0:	69db      	ldr	r3, [r3, #28]
7000d0a2:	6878      	ldr	r0, [r7, #4]
7000d0a4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
7000d0a6:	3708      	adds	r7, #8
7000d0a8:	46bd      	mov	sp, r7
7000d0aa:	bd80      	pop	{r7, pc}

7000d0ac <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
7000d0ac:	b580      	push	{r7, lr}
7000d0ae:	b082      	sub	sp, #8
7000d0b0:	af00      	add	r7, sp, #0
7000d0b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
7000d0b4:	687b      	ldr	r3, [r7, #4]
7000d0b6:	2b00      	cmp	r3, #0
7000d0b8:	d017      	beq.n	7000d0ea <netif_set_link_down+0x3e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
7000d0ba:	687b      	ldr	r3, [r7, #4]
7000d0bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000d0c0:	f003 0304 	and.w	r3, r3, #4
7000d0c4:	2b00      	cmp	r3, #0
7000d0c6:	d010      	beq.n	7000d0ea <netif_set_link_down+0x3e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
7000d0c8:	687b      	ldr	r3, [r7, #4]
7000d0ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000d0ce:	f023 0304 	bic.w	r3, r3, #4
7000d0d2:	b2da      	uxtb	r2, r3
7000d0d4:	687b      	ldr	r3, [r7, #4]
7000d0d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#if LWIP_IPV6 && LWIP_ND6_ALLOW_RA_UPDATES
    netif->mtu6 = netif->mtu;
#endif

    NETIF_LINK_CALLBACK(netif);
7000d0da:	687b      	ldr	r3, [r7, #4]
7000d0dc:	69db      	ldr	r3, [r3, #28]
7000d0de:	2b00      	cmp	r3, #0
7000d0e0:	d003      	beq.n	7000d0ea <netif_set_link_down+0x3e>
7000d0e2:	687b      	ldr	r3, [r7, #4]
7000d0e4:	69db      	ldr	r3, [r3, #28]
7000d0e6:	6878      	ldr	r0, [r7, #4]
7000d0e8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
7000d0ea:	3708      	adds	r7, #8
7000d0ec:	46bd      	mov	sp, r7
7000d0ee:	bd80      	pop	{r7, pc}

7000d0f0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
7000d0f0:	b480      	push	{r7}
7000d0f2:	b083      	sub	sp, #12
7000d0f4:	af00      	add	r7, sp, #0
7000d0f6:	6078      	str	r0, [r7, #4]
7000d0f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
7000d0fa:	687b      	ldr	r3, [r7, #4]
7000d0fc:	2b00      	cmp	r3, #0
7000d0fe:	d002      	beq.n	7000d106 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
7000d100:	687b      	ldr	r3, [r7, #4]
7000d102:	683a      	ldr	r2, [r7, #0]
7000d104:	61da      	str	r2, [r3, #28]
  }
}
7000d106:	bf00      	nop
7000d108:	370c      	adds	r7, #12
7000d10a:	46bd      	mov	sp, r7
7000d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
7000d110:	4770      	bx	lr

7000d112 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
7000d112:	b480      	push	{r7}
7000d114:	b085      	sub	sp, #20
7000d116:	af00      	add	r7, sp, #0
7000d118:	60f8      	str	r0, [r7, #12]
7000d11a:	60b9      	str	r1, [r7, #8]
7000d11c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
7000d11e:	f06f 030b 	mvn.w	r3, #11
}
7000d122:	4618      	mov	r0, r3
7000d124:	3714      	adds	r7, #20
7000d126:	46bd      	mov	sp, r7
7000d128:	f85d 7b04 	ldr.w	r7, [sp], #4
7000d12c:	4770      	bx	lr
	...

7000d130 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
7000d130:	b480      	push	{r7}
7000d132:	b085      	sub	sp, #20
7000d134:	af00      	add	r7, sp, #0
7000d136:	4603      	mov	r3, r0
7000d138:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
7000d13a:	79fb      	ldrb	r3, [r7, #7]
7000d13c:	2b00      	cmp	r3, #0
7000d13e:	d013      	beq.n	7000d168 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
7000d140:	4b0d      	ldr	r3, [pc, #52]	@ (7000d178 <netif_get_by_index+0x48>)
7000d142:	681b      	ldr	r3, [r3, #0]
7000d144:	60fb      	str	r3, [r7, #12]
7000d146:	e00c      	b.n	7000d162 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
7000d148:	68fb      	ldr	r3, [r7, #12]
7000d14a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000d14e:	3301      	adds	r3, #1
7000d150:	b2db      	uxtb	r3, r3
7000d152:	79fa      	ldrb	r2, [r7, #7]
7000d154:	429a      	cmp	r2, r3
7000d156:	d101      	bne.n	7000d15c <netif_get_by_index+0x2c>
        return netif; /* found! */
7000d158:	68fb      	ldr	r3, [r7, #12]
7000d15a:	e006      	b.n	7000d16a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
7000d15c:	68fb      	ldr	r3, [r7, #12]
7000d15e:	681b      	ldr	r3, [r3, #0]
7000d160:	60fb      	str	r3, [r7, #12]
7000d162:	68fb      	ldr	r3, [r7, #12]
7000d164:	2b00      	cmp	r3, #0
7000d166:	d1ef      	bne.n	7000d148 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
7000d168:	2300      	movs	r3, #0
}
7000d16a:	4618      	mov	r0, r3
7000d16c:	3714      	adds	r7, #20
7000d16e:	46bd      	mov	sp, r7
7000d170:	f85d 7b04 	ldr.w	r7, [sp], #4
7000d174:	4770      	bx	lr
7000d176:	bf00      	nop
7000d178:	24008468 	.word	0x24008468

7000d17c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
7000d17c:	b580      	push	{r7, lr}
7000d17e:	b082      	sub	sp, #8
7000d180:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
7000d182:	f000 fec3 	bl	7000df0c <sys_arch_protect>
7000d186:	6038      	str	r0, [r7, #0]
7000d188:	4b0d      	ldr	r3, [pc, #52]	@ (7000d1c0 <pbuf_free_ooseq+0x44>)
7000d18a:	2200      	movs	r2, #0
7000d18c:	701a      	strb	r2, [r3, #0]
7000d18e:	6838      	ldr	r0, [r7, #0]
7000d190:	f000 feca 	bl	7000df28 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
7000d194:	4b0b      	ldr	r3, [pc, #44]	@ (7000d1c4 <pbuf_free_ooseq+0x48>)
7000d196:	681b      	ldr	r3, [r3, #0]
7000d198:	607b      	str	r3, [r7, #4]
7000d19a:	e00a      	b.n	7000d1b2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
7000d19c:	687b      	ldr	r3, [r7, #4]
7000d19e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000d1a0:	2b00      	cmp	r3, #0
7000d1a2:	d003      	beq.n	7000d1ac <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
7000d1a4:	6878      	ldr	r0, [r7, #4]
7000d1a6:	f002 fa0b 	bl	7000f5c0 <tcp_free_ooseq>
      return;
7000d1aa:	e005      	b.n	7000d1b8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
7000d1ac:	687b      	ldr	r3, [r7, #4]
7000d1ae:	68db      	ldr	r3, [r3, #12]
7000d1b0:	607b      	str	r3, [r7, #4]
7000d1b2:	687b      	ldr	r3, [r7, #4]
7000d1b4:	2b00      	cmp	r3, #0
7000d1b6:	d1f1      	bne.n	7000d19c <pbuf_free_ooseq+0x20>
    }
  }
}
7000d1b8:	3708      	adds	r7, #8
7000d1ba:	46bd      	mov	sp, r7
7000d1bc:	bd80      	pop	{r7, pc}
7000d1be:	bf00      	nop
7000d1c0:	24008471 	.word	0x24008471
7000d1c4:	24008484 	.word	0x24008484

7000d1c8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
7000d1c8:	b580      	push	{r7, lr}
7000d1ca:	b082      	sub	sp, #8
7000d1cc:	af00      	add	r7, sp, #0
7000d1ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
7000d1d0:	f7ff ffd4 	bl	7000d17c <pbuf_free_ooseq>
}
7000d1d4:	bf00      	nop
7000d1d6:	3708      	adds	r7, #8
7000d1d8:	46bd      	mov	sp, r7
7000d1da:	bd80      	pop	{r7, pc}

7000d1dc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
7000d1dc:	b580      	push	{r7, lr}
7000d1de:	b082      	sub	sp, #8
7000d1e0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
7000d1e2:	f000 fe93 	bl	7000df0c <sys_arch_protect>
7000d1e6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
7000d1e8:	4b0f      	ldr	r3, [pc, #60]	@ (7000d228 <pbuf_pool_is_empty+0x4c>)
7000d1ea:	781b      	ldrb	r3, [r3, #0]
7000d1ec:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
7000d1ee:	4b0e      	ldr	r3, [pc, #56]	@ (7000d228 <pbuf_pool_is_empty+0x4c>)
7000d1f0:	2201      	movs	r2, #1
7000d1f2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
7000d1f4:	6878      	ldr	r0, [r7, #4]
7000d1f6:	f000 fe97 	bl	7000df28 <sys_arch_unprotect>

  if (!queued) {
7000d1fa:	78fb      	ldrb	r3, [r7, #3]
7000d1fc:	2b00      	cmp	r3, #0
7000d1fe:	d10f      	bne.n	7000d220 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
7000d200:	2100      	movs	r1, #0
7000d202:	480a      	ldr	r0, [pc, #40]	@ (7000d22c <pbuf_pool_is_empty+0x50>)
7000d204:	f006 f8a2 	bl	7001334c <tcpip_try_callback>
7000d208:	4603      	mov	r3, r0
7000d20a:	2b00      	cmp	r3, #0
7000d20c:	d008      	beq.n	7000d220 <pbuf_pool_is_empty+0x44>
7000d20e:	f000 fe7d 	bl	7000df0c <sys_arch_protect>
7000d212:	6078      	str	r0, [r7, #4]
7000d214:	4b04      	ldr	r3, [pc, #16]	@ (7000d228 <pbuf_pool_is_empty+0x4c>)
7000d216:	2200      	movs	r2, #0
7000d218:	701a      	strb	r2, [r3, #0]
7000d21a:	6878      	ldr	r0, [r7, #4]
7000d21c:	f000 fe84 	bl	7000df28 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
7000d220:	bf00      	nop
7000d222:	3708      	adds	r7, #8
7000d224:	46bd      	mov	sp, r7
7000d226:	bd80      	pop	{r7, pc}
7000d228:	24008471 	.word	0x24008471
7000d22c:	7000d1c9 	.word	0x7000d1c9

7000d230 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
7000d230:	b480      	push	{r7}
7000d232:	b085      	sub	sp, #20
7000d234:	af00      	add	r7, sp, #0
7000d236:	60f8      	str	r0, [r7, #12]
7000d238:	60b9      	str	r1, [r7, #8]
7000d23a:	4611      	mov	r1, r2
7000d23c:	461a      	mov	r2, r3
7000d23e:	460b      	mov	r3, r1
7000d240:	80fb      	strh	r3, [r7, #6]
7000d242:	4613      	mov	r3, r2
7000d244:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
7000d246:	68fb      	ldr	r3, [r7, #12]
7000d248:	2200      	movs	r2, #0
7000d24a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
7000d24c:	68fb      	ldr	r3, [r7, #12]
7000d24e:	68ba      	ldr	r2, [r7, #8]
7000d250:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
7000d252:	68fb      	ldr	r3, [r7, #12]
7000d254:	88fa      	ldrh	r2, [r7, #6]
7000d256:	811a      	strh	r2, [r3, #8]
  p->len = len;
7000d258:	68fb      	ldr	r3, [r7, #12]
7000d25a:	88ba      	ldrh	r2, [r7, #4]
7000d25c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
7000d25e:	8b3b      	ldrh	r3, [r7, #24]
7000d260:	b2da      	uxtb	r2, r3
7000d262:	68fb      	ldr	r3, [r7, #12]
7000d264:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
7000d266:	68fb      	ldr	r3, [r7, #12]
7000d268:	7f3a      	ldrb	r2, [r7, #28]
7000d26a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
7000d26c:	68fb      	ldr	r3, [r7, #12]
7000d26e:	2201      	movs	r2, #1
7000d270:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
7000d272:	68fb      	ldr	r3, [r7, #12]
7000d274:	2200      	movs	r2, #0
7000d276:	73da      	strb	r2, [r3, #15]
}
7000d278:	bf00      	nop
7000d27a:	3714      	adds	r7, #20
7000d27c:	46bd      	mov	sp, r7
7000d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
7000d282:	4770      	bx	lr

7000d284 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
7000d284:	b580      	push	{r7, lr}
7000d286:	b08c      	sub	sp, #48	@ 0x30
7000d288:	af02      	add	r7, sp, #8
7000d28a:	4603      	mov	r3, r0
7000d28c:	71fb      	strb	r3, [r7, #7]
7000d28e:	460b      	mov	r3, r1
7000d290:	80bb      	strh	r3, [r7, #4]
7000d292:	4613      	mov	r3, r2
7000d294:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
7000d296:	79fb      	ldrb	r3, [r7, #7]
7000d298:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
7000d29a:	887b      	ldrh	r3, [r7, #2]
7000d29c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
7000d2a0:	d07f      	beq.n	7000d3a2 <pbuf_alloc+0x11e>
7000d2a2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
7000d2a6:	f300 80c8 	bgt.w	7000d43a <pbuf_alloc+0x1b6>
7000d2aa:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
7000d2ae:	d010      	beq.n	7000d2d2 <pbuf_alloc+0x4e>
7000d2b0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
7000d2b4:	f300 80c1 	bgt.w	7000d43a <pbuf_alloc+0x1b6>
7000d2b8:	2b01      	cmp	r3, #1
7000d2ba:	d002      	beq.n	7000d2c2 <pbuf_alloc+0x3e>
7000d2bc:	2b41      	cmp	r3, #65	@ 0x41
7000d2be:	f040 80bc 	bne.w	7000d43a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
7000d2c2:	887a      	ldrh	r2, [r7, #2]
7000d2c4:	88bb      	ldrh	r3, [r7, #4]
7000d2c6:	4619      	mov	r1, r3
7000d2c8:	2000      	movs	r0, #0
7000d2ca:	f000 f8d1 	bl	7000d470 <pbuf_alloc_reference>
7000d2ce:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
7000d2d0:	e0bd      	b.n	7000d44e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
7000d2d2:	2300      	movs	r3, #0
7000d2d4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
7000d2d6:	2300      	movs	r3, #0
7000d2d8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
7000d2da:	88bb      	ldrh	r3, [r7, #4]
7000d2dc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
7000d2de:	200c      	movs	r0, #12
7000d2e0:	f7ff fbfe 	bl	7000cae0 <memp_malloc>
7000d2e4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
7000d2e6:	693b      	ldr	r3, [r7, #16]
7000d2e8:	2b00      	cmp	r3, #0
7000d2ea:	d109      	bne.n	7000d300 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
7000d2ec:	f7ff ff76 	bl	7000d1dc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
7000d2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000d2f2:	2b00      	cmp	r3, #0
7000d2f4:	d002      	beq.n	7000d2fc <pbuf_alloc+0x78>
            pbuf_free(p);
7000d2f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
7000d2f8:	f000 fa9e 	bl	7000d838 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
7000d2fc:	2300      	movs	r3, #0
7000d2fe:	e0a7      	b.n	7000d450 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
7000d300:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000d302:	3303      	adds	r3, #3
7000d304:	b29b      	uxth	r3, r3
7000d306:	f023 0303 	bic.w	r3, r3, #3
7000d30a:	b29b      	uxth	r3, r3
7000d30c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
7000d310:	b29b      	uxth	r3, r3
7000d312:	8b7a      	ldrh	r2, [r7, #26]
7000d314:	4293      	cmp	r3, r2
7000d316:	bf28      	it	cs
7000d318:	4613      	movcs	r3, r2
7000d31a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
7000d31c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000d31e:	3310      	adds	r3, #16
7000d320:	693a      	ldr	r2, [r7, #16]
7000d322:	4413      	add	r3, r2
7000d324:	3303      	adds	r3, #3
7000d326:	f023 0303 	bic.w	r3, r3, #3
7000d32a:	4618      	mov	r0, r3
7000d32c:	89f9      	ldrh	r1, [r7, #14]
7000d32e:	8b7a      	ldrh	r2, [r7, #26]
7000d330:	2300      	movs	r3, #0
7000d332:	9301      	str	r3, [sp, #4]
7000d334:	887b      	ldrh	r3, [r7, #2]
7000d336:	9300      	str	r3, [sp, #0]
7000d338:	460b      	mov	r3, r1
7000d33a:	4601      	mov	r1, r0
7000d33c:	6938      	ldr	r0, [r7, #16]
7000d33e:	f7ff ff77 	bl	7000d230 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
7000d342:	693b      	ldr	r3, [r7, #16]
7000d344:	685b      	ldr	r3, [r3, #4]
7000d346:	f003 0303 	and.w	r3, r3, #3
7000d34a:	2b00      	cmp	r3, #0
7000d34c:	d006      	beq.n	7000d35c <pbuf_alloc+0xd8>
7000d34e:	4b42      	ldr	r3, [pc, #264]	@ (7000d458 <pbuf_alloc+0x1d4>)
7000d350:	f44f 7280 	mov.w	r2, #256	@ 0x100
7000d354:	4941      	ldr	r1, [pc, #260]	@ (7000d45c <pbuf_alloc+0x1d8>)
7000d356:	4842      	ldr	r0, [pc, #264]	@ (7000d460 <pbuf_alloc+0x1dc>)
7000d358:	f006 fcda 	bl	70013d10 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
7000d35c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000d35e:	3303      	adds	r3, #3
7000d360:	f023 0303 	bic.w	r3, r3, #3
7000d364:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
7000d368:	d106      	bne.n	7000d378 <pbuf_alloc+0xf4>
7000d36a:	4b3b      	ldr	r3, [pc, #236]	@ (7000d458 <pbuf_alloc+0x1d4>)
7000d36c:	f44f 7281 	mov.w	r2, #258	@ 0x102
7000d370:	493c      	ldr	r1, [pc, #240]	@ (7000d464 <pbuf_alloc+0x1e0>)
7000d372:	483b      	ldr	r0, [pc, #236]	@ (7000d460 <pbuf_alloc+0x1dc>)
7000d374:	f006 fccc 	bl	70013d10 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
7000d378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000d37a:	2b00      	cmp	r3, #0
7000d37c:	d102      	bne.n	7000d384 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
7000d37e:	693b      	ldr	r3, [r7, #16]
7000d380:	627b      	str	r3, [r7, #36]	@ 0x24
7000d382:	e002      	b.n	7000d38a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
7000d384:	69fb      	ldr	r3, [r7, #28]
7000d386:	693a      	ldr	r2, [r7, #16]
7000d388:	601a      	str	r2, [r3, #0]
        }
        last = q;
7000d38a:	693b      	ldr	r3, [r7, #16]
7000d38c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
7000d38e:	8b7a      	ldrh	r2, [r7, #26]
7000d390:	89fb      	ldrh	r3, [r7, #14]
7000d392:	1ad3      	subs	r3, r2, r3
7000d394:	837b      	strh	r3, [r7, #26]
        offset = 0;
7000d396:	2300      	movs	r3, #0
7000d398:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
7000d39a:	8b7b      	ldrh	r3, [r7, #26]
7000d39c:	2b00      	cmp	r3, #0
7000d39e:	d19e      	bne.n	7000d2de <pbuf_alloc+0x5a>
      break;
7000d3a0:	e055      	b.n	7000d44e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
7000d3a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000d3a4:	3303      	adds	r3, #3
7000d3a6:	b29b      	uxth	r3, r3
7000d3a8:	f023 0303 	bic.w	r3, r3, #3
7000d3ac:	b29a      	uxth	r2, r3
7000d3ae:	88bb      	ldrh	r3, [r7, #4]
7000d3b0:	3303      	adds	r3, #3
7000d3b2:	b29b      	uxth	r3, r3
7000d3b4:	f023 0303 	bic.w	r3, r3, #3
7000d3b8:	b29b      	uxth	r3, r3
7000d3ba:	4413      	add	r3, r2
7000d3bc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
7000d3be:	8b3b      	ldrh	r3, [r7, #24]
7000d3c0:	3310      	adds	r3, #16
7000d3c2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
7000d3c4:	8b3a      	ldrh	r2, [r7, #24]
7000d3c6:	88bb      	ldrh	r3, [r7, #4]
7000d3c8:	3303      	adds	r3, #3
7000d3ca:	f023 0303 	bic.w	r3, r3, #3
7000d3ce:	429a      	cmp	r2, r3
7000d3d0:	d306      	bcc.n	7000d3e0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
7000d3d2:	8afa      	ldrh	r2, [r7, #22]
7000d3d4:	88bb      	ldrh	r3, [r7, #4]
7000d3d6:	3303      	adds	r3, #3
7000d3d8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
7000d3dc:	429a      	cmp	r2, r3
7000d3de:	d201      	bcs.n	7000d3e4 <pbuf_alloc+0x160>
        return NULL;
7000d3e0:	2300      	movs	r3, #0
7000d3e2:	e035      	b.n	7000d450 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
7000d3e4:	8afb      	ldrh	r3, [r7, #22]
7000d3e6:	4618      	mov	r0, r3
7000d3e8:	f7ff f9d6 	bl	7000c798 <mem_malloc>
7000d3ec:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
7000d3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000d3f0:	2b00      	cmp	r3, #0
7000d3f2:	d101      	bne.n	7000d3f8 <pbuf_alloc+0x174>
        return NULL;
7000d3f4:	2300      	movs	r3, #0
7000d3f6:	e02b      	b.n	7000d450 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
7000d3f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000d3fa:	3310      	adds	r3, #16
7000d3fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
7000d3fe:	4413      	add	r3, r2
7000d400:	3303      	adds	r3, #3
7000d402:	f023 0303 	bic.w	r3, r3, #3
7000d406:	4618      	mov	r0, r3
7000d408:	88b9      	ldrh	r1, [r7, #4]
7000d40a:	88ba      	ldrh	r2, [r7, #4]
7000d40c:	2300      	movs	r3, #0
7000d40e:	9301      	str	r3, [sp, #4]
7000d410:	887b      	ldrh	r3, [r7, #2]
7000d412:	9300      	str	r3, [sp, #0]
7000d414:	460b      	mov	r3, r1
7000d416:	4601      	mov	r1, r0
7000d418:	6a78      	ldr	r0, [r7, #36]	@ 0x24
7000d41a:	f7ff ff09 	bl	7000d230 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
7000d41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000d420:	685b      	ldr	r3, [r3, #4]
7000d422:	f003 0303 	and.w	r3, r3, #3
7000d426:	2b00      	cmp	r3, #0
7000d428:	d010      	beq.n	7000d44c <pbuf_alloc+0x1c8>
7000d42a:	4b0b      	ldr	r3, [pc, #44]	@ (7000d458 <pbuf_alloc+0x1d4>)
7000d42c:	f44f 7291 	mov.w	r2, #290	@ 0x122
7000d430:	490d      	ldr	r1, [pc, #52]	@ (7000d468 <pbuf_alloc+0x1e4>)
7000d432:	480b      	ldr	r0, [pc, #44]	@ (7000d460 <pbuf_alloc+0x1dc>)
7000d434:	f006 fc6c 	bl	70013d10 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
7000d438:	e008      	b.n	7000d44c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
7000d43a:	4b07      	ldr	r3, [pc, #28]	@ (7000d458 <pbuf_alloc+0x1d4>)
7000d43c:	f240 1227 	movw	r2, #295	@ 0x127
7000d440:	490a      	ldr	r1, [pc, #40]	@ (7000d46c <pbuf_alloc+0x1e8>)
7000d442:	4807      	ldr	r0, [pc, #28]	@ (7000d460 <pbuf_alloc+0x1dc>)
7000d444:	f006 fc64 	bl	70013d10 <iprintf>
      return NULL;
7000d448:	2300      	movs	r3, #0
7000d44a:	e001      	b.n	7000d450 <pbuf_alloc+0x1cc>
      break;
7000d44c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
7000d44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
7000d450:	4618      	mov	r0, r3
7000d452:	3728      	adds	r7, #40	@ 0x28
7000d454:	46bd      	mov	sp, r7
7000d456:	bd80      	pop	{r7, pc}
7000d458:	700158c8 	.word	0x700158c8
7000d45c:	70015928 	.word	0x70015928
7000d460:	70015958 	.word	0x70015958
7000d464:	70015980 	.word	0x70015980
7000d468:	700159b4 	.word	0x700159b4
7000d46c:	700159e0 	.word	0x700159e0

7000d470 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
7000d470:	b580      	push	{r7, lr}
7000d472:	b086      	sub	sp, #24
7000d474:	af02      	add	r7, sp, #8
7000d476:	6078      	str	r0, [r7, #4]
7000d478:	460b      	mov	r3, r1
7000d47a:	807b      	strh	r3, [r7, #2]
7000d47c:	4613      	mov	r3, r2
7000d47e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
7000d480:	883b      	ldrh	r3, [r7, #0]
7000d482:	2b41      	cmp	r3, #65	@ 0x41
7000d484:	d009      	beq.n	7000d49a <pbuf_alloc_reference+0x2a>
7000d486:	883b      	ldrh	r3, [r7, #0]
7000d488:	2b01      	cmp	r3, #1
7000d48a:	d006      	beq.n	7000d49a <pbuf_alloc_reference+0x2a>
7000d48c:	4b0f      	ldr	r3, [pc, #60]	@ (7000d4cc <pbuf_alloc_reference+0x5c>)
7000d48e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
7000d492:	490f      	ldr	r1, [pc, #60]	@ (7000d4d0 <pbuf_alloc_reference+0x60>)
7000d494:	480f      	ldr	r0, [pc, #60]	@ (7000d4d4 <pbuf_alloc_reference+0x64>)
7000d496:	f006 fc3b 	bl	70013d10 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
7000d49a:	200b      	movs	r0, #11
7000d49c:	f7ff fb20 	bl	7000cae0 <memp_malloc>
7000d4a0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
7000d4a2:	68fb      	ldr	r3, [r7, #12]
7000d4a4:	2b00      	cmp	r3, #0
7000d4a6:	d101      	bne.n	7000d4ac <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
7000d4a8:	2300      	movs	r3, #0
7000d4aa:	e00b      	b.n	7000d4c4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
7000d4ac:	8879      	ldrh	r1, [r7, #2]
7000d4ae:	887a      	ldrh	r2, [r7, #2]
7000d4b0:	2300      	movs	r3, #0
7000d4b2:	9301      	str	r3, [sp, #4]
7000d4b4:	883b      	ldrh	r3, [r7, #0]
7000d4b6:	9300      	str	r3, [sp, #0]
7000d4b8:	460b      	mov	r3, r1
7000d4ba:	6879      	ldr	r1, [r7, #4]
7000d4bc:	68f8      	ldr	r0, [r7, #12]
7000d4be:	f7ff feb7 	bl	7000d230 <pbuf_init_alloced_pbuf>
  return p;
7000d4c2:	68fb      	ldr	r3, [r7, #12]
}
7000d4c4:	4618      	mov	r0, r3
7000d4c6:	3710      	adds	r7, #16
7000d4c8:	46bd      	mov	sp, r7
7000d4ca:	bd80      	pop	{r7, pc}
7000d4cc:	700158c8 	.word	0x700158c8
7000d4d0:	700159fc 	.word	0x700159fc
7000d4d4:	70015958 	.word	0x70015958

7000d4d8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
7000d4d8:	b580      	push	{r7, lr}
7000d4da:	b088      	sub	sp, #32
7000d4dc:	af02      	add	r7, sp, #8
7000d4de:	607b      	str	r3, [r7, #4]
7000d4e0:	4603      	mov	r3, r0
7000d4e2:	73fb      	strb	r3, [r7, #15]
7000d4e4:	460b      	mov	r3, r1
7000d4e6:	81bb      	strh	r3, [r7, #12]
7000d4e8:	4613      	mov	r3, r2
7000d4ea:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
7000d4ec:	7bfb      	ldrb	r3, [r7, #15]
7000d4ee:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
7000d4f0:	8a7b      	ldrh	r3, [r7, #18]
7000d4f2:	3303      	adds	r3, #3
7000d4f4:	f023 0203 	bic.w	r2, r3, #3
7000d4f8:	89bb      	ldrh	r3, [r7, #12]
7000d4fa:	441a      	add	r2, r3
7000d4fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
7000d4fe:	429a      	cmp	r2, r3
7000d500:	d901      	bls.n	7000d506 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
7000d502:	2300      	movs	r3, #0
7000d504:	e018      	b.n	7000d538 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
7000d506:	6a3b      	ldr	r3, [r7, #32]
7000d508:	2b00      	cmp	r3, #0
7000d50a:	d007      	beq.n	7000d51c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
7000d50c:	8a7b      	ldrh	r3, [r7, #18]
7000d50e:	3303      	adds	r3, #3
7000d510:	f023 0303 	bic.w	r3, r3, #3
7000d514:	6a3a      	ldr	r2, [r7, #32]
7000d516:	4413      	add	r3, r2
7000d518:	617b      	str	r3, [r7, #20]
7000d51a:	e001      	b.n	7000d520 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
7000d51c:	2300      	movs	r3, #0
7000d51e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
7000d520:	6878      	ldr	r0, [r7, #4]
7000d522:	89b9      	ldrh	r1, [r7, #12]
7000d524:	89ba      	ldrh	r2, [r7, #12]
7000d526:	2302      	movs	r3, #2
7000d528:	9301      	str	r3, [sp, #4]
7000d52a:	897b      	ldrh	r3, [r7, #10]
7000d52c:	9300      	str	r3, [sp, #0]
7000d52e:	460b      	mov	r3, r1
7000d530:	6979      	ldr	r1, [r7, #20]
7000d532:	f7ff fe7d 	bl	7000d230 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
7000d536:	687b      	ldr	r3, [r7, #4]
}
7000d538:	4618      	mov	r0, r3
7000d53a:	3718      	adds	r7, #24
7000d53c:	46bd      	mov	sp, r7
7000d53e:	bd80      	pop	{r7, pc}

7000d540 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
7000d540:	b580      	push	{r7, lr}
7000d542:	b084      	sub	sp, #16
7000d544:	af00      	add	r7, sp, #0
7000d546:	6078      	str	r0, [r7, #4]
7000d548:	460b      	mov	r3, r1
7000d54a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
7000d54c:	687b      	ldr	r3, [r7, #4]
7000d54e:	2b00      	cmp	r3, #0
7000d550:	d106      	bne.n	7000d560 <pbuf_realloc+0x20>
7000d552:	4b3a      	ldr	r3, [pc, #232]	@ (7000d63c <pbuf_realloc+0xfc>)
7000d554:	f44f 72cc 	mov.w	r2, #408	@ 0x198
7000d558:	4939      	ldr	r1, [pc, #228]	@ (7000d640 <pbuf_realloc+0x100>)
7000d55a:	483a      	ldr	r0, [pc, #232]	@ (7000d644 <pbuf_realloc+0x104>)
7000d55c:	f006 fbd8 	bl	70013d10 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
7000d560:	687b      	ldr	r3, [r7, #4]
7000d562:	891b      	ldrh	r3, [r3, #8]
7000d564:	887a      	ldrh	r2, [r7, #2]
7000d566:	429a      	cmp	r2, r3
7000d568:	d263      	bcs.n	7000d632 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
7000d56a:	687b      	ldr	r3, [r7, #4]
7000d56c:	891a      	ldrh	r2, [r3, #8]
7000d56e:	887b      	ldrh	r3, [r7, #2]
7000d570:	1ad3      	subs	r3, r2, r3
7000d572:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
7000d574:	887b      	ldrh	r3, [r7, #2]
7000d576:	817b      	strh	r3, [r7, #10]
  q = p;
7000d578:	687b      	ldr	r3, [r7, #4]
7000d57a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
7000d57c:	e018      	b.n	7000d5b0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
7000d57e:	68fb      	ldr	r3, [r7, #12]
7000d580:	895b      	ldrh	r3, [r3, #10]
7000d582:	897a      	ldrh	r2, [r7, #10]
7000d584:	1ad3      	subs	r3, r2, r3
7000d586:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
7000d588:	68fb      	ldr	r3, [r7, #12]
7000d58a:	891a      	ldrh	r2, [r3, #8]
7000d58c:	893b      	ldrh	r3, [r7, #8]
7000d58e:	1ad3      	subs	r3, r2, r3
7000d590:	b29a      	uxth	r2, r3
7000d592:	68fb      	ldr	r3, [r7, #12]
7000d594:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
7000d596:	68fb      	ldr	r3, [r7, #12]
7000d598:	681b      	ldr	r3, [r3, #0]
7000d59a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
7000d59c:	68fb      	ldr	r3, [r7, #12]
7000d59e:	2b00      	cmp	r3, #0
7000d5a0:	d106      	bne.n	7000d5b0 <pbuf_realloc+0x70>
7000d5a2:	4b26      	ldr	r3, [pc, #152]	@ (7000d63c <pbuf_realloc+0xfc>)
7000d5a4:	f240 12af 	movw	r2, #431	@ 0x1af
7000d5a8:	4927      	ldr	r1, [pc, #156]	@ (7000d648 <pbuf_realloc+0x108>)
7000d5aa:	4826      	ldr	r0, [pc, #152]	@ (7000d644 <pbuf_realloc+0x104>)
7000d5ac:	f006 fbb0 	bl	70013d10 <iprintf>
  while (rem_len > q->len) {
7000d5b0:	68fb      	ldr	r3, [r7, #12]
7000d5b2:	895b      	ldrh	r3, [r3, #10]
7000d5b4:	897a      	ldrh	r2, [r7, #10]
7000d5b6:	429a      	cmp	r2, r3
7000d5b8:	d8e1      	bhi.n	7000d57e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
7000d5ba:	68fb      	ldr	r3, [r7, #12]
7000d5bc:	7b1b      	ldrb	r3, [r3, #12]
7000d5be:	f003 030f 	and.w	r3, r3, #15
7000d5c2:	2b00      	cmp	r3, #0
7000d5c4:	d121      	bne.n	7000d60a <pbuf_realloc+0xca>
7000d5c6:	68fb      	ldr	r3, [r7, #12]
7000d5c8:	895b      	ldrh	r3, [r3, #10]
7000d5ca:	897a      	ldrh	r2, [r7, #10]
7000d5cc:	429a      	cmp	r2, r3
7000d5ce:	d01c      	beq.n	7000d60a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
7000d5d0:	68fb      	ldr	r3, [r7, #12]
7000d5d2:	7b5b      	ldrb	r3, [r3, #13]
7000d5d4:	f003 0302 	and.w	r3, r3, #2
7000d5d8:	2b00      	cmp	r3, #0
7000d5da:	d116      	bne.n	7000d60a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
7000d5dc:	68fb      	ldr	r3, [r7, #12]
7000d5de:	685a      	ldr	r2, [r3, #4]
7000d5e0:	68fb      	ldr	r3, [r7, #12]
7000d5e2:	1ad3      	subs	r3, r2, r3
7000d5e4:	b29a      	uxth	r2, r3
7000d5e6:	897b      	ldrh	r3, [r7, #10]
7000d5e8:	4413      	add	r3, r2
7000d5ea:	b29b      	uxth	r3, r3
7000d5ec:	4619      	mov	r1, r3
7000d5ee:	68f8      	ldr	r0, [r7, #12]
7000d5f0:	f7fe ffc8 	bl	7000c584 <mem_trim>
7000d5f4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
7000d5f6:	68fb      	ldr	r3, [r7, #12]
7000d5f8:	2b00      	cmp	r3, #0
7000d5fa:	d106      	bne.n	7000d60a <pbuf_realloc+0xca>
7000d5fc:	4b0f      	ldr	r3, [pc, #60]	@ (7000d63c <pbuf_realloc+0xfc>)
7000d5fe:	f240 12bd 	movw	r2, #445	@ 0x1bd
7000d602:	4912      	ldr	r1, [pc, #72]	@ (7000d64c <pbuf_realloc+0x10c>)
7000d604:	480f      	ldr	r0, [pc, #60]	@ (7000d644 <pbuf_realloc+0x104>)
7000d606:	f006 fb83 	bl	70013d10 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
7000d60a:	68fb      	ldr	r3, [r7, #12]
7000d60c:	897a      	ldrh	r2, [r7, #10]
7000d60e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
7000d610:	68fb      	ldr	r3, [r7, #12]
7000d612:	895a      	ldrh	r2, [r3, #10]
7000d614:	68fb      	ldr	r3, [r7, #12]
7000d616:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
7000d618:	68fb      	ldr	r3, [r7, #12]
7000d61a:	681b      	ldr	r3, [r3, #0]
7000d61c:	2b00      	cmp	r3, #0
7000d61e:	d004      	beq.n	7000d62a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
7000d620:	68fb      	ldr	r3, [r7, #12]
7000d622:	681b      	ldr	r3, [r3, #0]
7000d624:	4618      	mov	r0, r3
7000d626:	f000 f907 	bl	7000d838 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
7000d62a:	68fb      	ldr	r3, [r7, #12]
7000d62c:	2200      	movs	r2, #0
7000d62e:	601a      	str	r2, [r3, #0]
7000d630:	e000      	b.n	7000d634 <pbuf_realloc+0xf4>
    return;
7000d632:	bf00      	nop

}
7000d634:	3710      	adds	r7, #16
7000d636:	46bd      	mov	sp, r7
7000d638:	bd80      	pop	{r7, pc}
7000d63a:	bf00      	nop
7000d63c:	700158c8 	.word	0x700158c8
7000d640:	70015a10 	.word	0x70015a10
7000d644:	70015958 	.word	0x70015958
7000d648:	70015a28 	.word	0x70015a28
7000d64c:	70015a40 	.word	0x70015a40

7000d650 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
7000d650:	b580      	push	{r7, lr}
7000d652:	b086      	sub	sp, #24
7000d654:	af00      	add	r7, sp, #0
7000d656:	60f8      	str	r0, [r7, #12]
7000d658:	60b9      	str	r1, [r7, #8]
7000d65a:	4613      	mov	r3, r2
7000d65c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
7000d65e:	68fb      	ldr	r3, [r7, #12]
7000d660:	2b00      	cmp	r3, #0
7000d662:	d106      	bne.n	7000d672 <pbuf_add_header_impl+0x22>
7000d664:	4b2b      	ldr	r3, [pc, #172]	@ (7000d714 <pbuf_add_header_impl+0xc4>)
7000d666:	f240 12df 	movw	r2, #479	@ 0x1df
7000d66a:	492b      	ldr	r1, [pc, #172]	@ (7000d718 <pbuf_add_header_impl+0xc8>)
7000d66c:	482b      	ldr	r0, [pc, #172]	@ (7000d71c <pbuf_add_header_impl+0xcc>)
7000d66e:	f006 fb4f 	bl	70013d10 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
7000d672:	68fb      	ldr	r3, [r7, #12]
7000d674:	2b00      	cmp	r3, #0
7000d676:	d003      	beq.n	7000d680 <pbuf_add_header_impl+0x30>
7000d678:	68bb      	ldr	r3, [r7, #8]
7000d67a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
7000d67e:	d301      	bcc.n	7000d684 <pbuf_add_header_impl+0x34>
    return 1;
7000d680:	2301      	movs	r3, #1
7000d682:	e043      	b.n	7000d70c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
7000d684:	68bb      	ldr	r3, [r7, #8]
7000d686:	2b00      	cmp	r3, #0
7000d688:	d101      	bne.n	7000d68e <pbuf_add_header_impl+0x3e>
    return 0;
7000d68a:	2300      	movs	r3, #0
7000d68c:	e03e      	b.n	7000d70c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
7000d68e:	68bb      	ldr	r3, [r7, #8]
7000d690:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
7000d692:	68fb      	ldr	r3, [r7, #12]
7000d694:	891a      	ldrh	r2, [r3, #8]
7000d696:	8a7b      	ldrh	r3, [r7, #18]
7000d698:	4413      	add	r3, r2
7000d69a:	b29b      	uxth	r3, r3
7000d69c:	8a7a      	ldrh	r2, [r7, #18]
7000d69e:	429a      	cmp	r2, r3
7000d6a0:	d901      	bls.n	7000d6a6 <pbuf_add_header_impl+0x56>
    return 1;
7000d6a2:	2301      	movs	r3, #1
7000d6a4:	e032      	b.n	7000d70c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
7000d6a6:	68fb      	ldr	r3, [r7, #12]
7000d6a8:	7b1b      	ldrb	r3, [r3, #12]
7000d6aa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
7000d6ac:	8a3b      	ldrh	r3, [r7, #16]
7000d6ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
7000d6b2:	2b00      	cmp	r3, #0
7000d6b4:	d00c      	beq.n	7000d6d0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
7000d6b6:	68fb      	ldr	r3, [r7, #12]
7000d6b8:	685a      	ldr	r2, [r3, #4]
7000d6ba:	68bb      	ldr	r3, [r7, #8]
7000d6bc:	425b      	negs	r3, r3
7000d6be:	4413      	add	r3, r2
7000d6c0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
7000d6c2:	68fb      	ldr	r3, [r7, #12]
7000d6c4:	3310      	adds	r3, #16
7000d6c6:	697a      	ldr	r2, [r7, #20]
7000d6c8:	429a      	cmp	r2, r3
7000d6ca:	d20d      	bcs.n	7000d6e8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
7000d6cc:	2301      	movs	r3, #1
7000d6ce:	e01d      	b.n	7000d70c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
7000d6d0:	79fb      	ldrb	r3, [r7, #7]
7000d6d2:	2b00      	cmp	r3, #0
7000d6d4:	d006      	beq.n	7000d6e4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
7000d6d6:	68fb      	ldr	r3, [r7, #12]
7000d6d8:	685a      	ldr	r2, [r3, #4]
7000d6da:	68bb      	ldr	r3, [r7, #8]
7000d6dc:	425b      	negs	r3, r3
7000d6de:	4413      	add	r3, r2
7000d6e0:	617b      	str	r3, [r7, #20]
7000d6e2:	e001      	b.n	7000d6e8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
7000d6e4:	2301      	movs	r3, #1
7000d6e6:	e011      	b.n	7000d70c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
7000d6e8:	68fb      	ldr	r3, [r7, #12]
7000d6ea:	697a      	ldr	r2, [r7, #20]
7000d6ec:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
7000d6ee:	68fb      	ldr	r3, [r7, #12]
7000d6f0:	895a      	ldrh	r2, [r3, #10]
7000d6f2:	8a7b      	ldrh	r3, [r7, #18]
7000d6f4:	4413      	add	r3, r2
7000d6f6:	b29a      	uxth	r2, r3
7000d6f8:	68fb      	ldr	r3, [r7, #12]
7000d6fa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
7000d6fc:	68fb      	ldr	r3, [r7, #12]
7000d6fe:	891a      	ldrh	r2, [r3, #8]
7000d700:	8a7b      	ldrh	r3, [r7, #18]
7000d702:	4413      	add	r3, r2
7000d704:	b29a      	uxth	r2, r3
7000d706:	68fb      	ldr	r3, [r7, #12]
7000d708:	811a      	strh	r2, [r3, #8]


  return 0;
7000d70a:	2300      	movs	r3, #0
}
7000d70c:	4618      	mov	r0, r3
7000d70e:	3718      	adds	r7, #24
7000d710:	46bd      	mov	sp, r7
7000d712:	bd80      	pop	{r7, pc}
7000d714:	700158c8 	.word	0x700158c8
7000d718:	70015a5c 	.word	0x70015a5c
7000d71c:	70015958 	.word	0x70015958

7000d720 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
7000d720:	b580      	push	{r7, lr}
7000d722:	b082      	sub	sp, #8
7000d724:	af00      	add	r7, sp, #0
7000d726:	6078      	str	r0, [r7, #4]
7000d728:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
7000d72a:	2200      	movs	r2, #0
7000d72c:	6839      	ldr	r1, [r7, #0]
7000d72e:	6878      	ldr	r0, [r7, #4]
7000d730:	f7ff ff8e 	bl	7000d650 <pbuf_add_header_impl>
7000d734:	4603      	mov	r3, r0
}
7000d736:	4618      	mov	r0, r3
7000d738:	3708      	adds	r7, #8
7000d73a:	46bd      	mov	sp, r7
7000d73c:	bd80      	pop	{r7, pc}
	...

7000d740 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
7000d740:	b580      	push	{r7, lr}
7000d742:	b084      	sub	sp, #16
7000d744:	af00      	add	r7, sp, #0
7000d746:	6078      	str	r0, [r7, #4]
7000d748:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
7000d74a:	687b      	ldr	r3, [r7, #4]
7000d74c:	2b00      	cmp	r3, #0
7000d74e:	d106      	bne.n	7000d75e <pbuf_remove_header+0x1e>
7000d750:	4b1c      	ldr	r3, [pc, #112]	@ (7000d7c4 <pbuf_remove_header+0x84>)
7000d752:	f240 224b 	movw	r2, #587	@ 0x24b
7000d756:	491c      	ldr	r1, [pc, #112]	@ (7000d7c8 <pbuf_remove_header+0x88>)
7000d758:	481c      	ldr	r0, [pc, #112]	@ (7000d7cc <pbuf_remove_header+0x8c>)
7000d75a:	f006 fad9 	bl	70013d10 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
7000d75e:	687b      	ldr	r3, [r7, #4]
7000d760:	2b00      	cmp	r3, #0
7000d762:	d003      	beq.n	7000d76c <pbuf_remove_header+0x2c>
7000d764:	683b      	ldr	r3, [r7, #0]
7000d766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
7000d76a:	d301      	bcc.n	7000d770 <pbuf_remove_header+0x30>
    return 1;
7000d76c:	2301      	movs	r3, #1
7000d76e:	e025      	b.n	7000d7bc <pbuf_remove_header+0x7c>
  }
  if (header_size_decrement == 0) {
7000d770:	683b      	ldr	r3, [r7, #0]
7000d772:	2b00      	cmp	r3, #0
7000d774:	d101      	bne.n	7000d77a <pbuf_remove_header+0x3a>
    return 0;
7000d776:	2300      	movs	r3, #0
7000d778:	e020      	b.n	7000d7bc <pbuf_remove_header+0x7c>
  }

  increment_magnitude = (u16_t)header_size_decrement;
7000d77a:	683b      	ldr	r3, [r7, #0]
7000d77c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
7000d77e:	687b      	ldr	r3, [r7, #4]
7000d780:	895b      	ldrh	r3, [r3, #10]
7000d782:	89fa      	ldrh	r2, [r7, #14]
7000d784:	429a      	cmp	r2, r3
7000d786:	d901      	bls.n	7000d78c <pbuf_remove_header+0x4c>
7000d788:	2301      	movs	r3, #1
7000d78a:	e017      	b.n	7000d7bc <pbuf_remove_header+0x7c>

  /* remember current payload pointer */
  payload = p->payload;
7000d78c:	687b      	ldr	r3, [r7, #4]
7000d78e:	685b      	ldr	r3, [r3, #4]
7000d790:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
7000d792:	687b      	ldr	r3, [r7, #4]
7000d794:	685a      	ldr	r2, [r3, #4]
7000d796:	683b      	ldr	r3, [r7, #0]
7000d798:	441a      	add	r2, r3
7000d79a:	687b      	ldr	r3, [r7, #4]
7000d79c:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
7000d79e:	687b      	ldr	r3, [r7, #4]
7000d7a0:	895a      	ldrh	r2, [r3, #10]
7000d7a2:	89fb      	ldrh	r3, [r7, #14]
7000d7a4:	1ad3      	subs	r3, r2, r3
7000d7a6:	b29a      	uxth	r2, r3
7000d7a8:	687b      	ldr	r3, [r7, #4]
7000d7aa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
7000d7ac:	687b      	ldr	r3, [r7, #4]
7000d7ae:	891a      	ldrh	r2, [r3, #8]
7000d7b0:	89fb      	ldrh	r3, [r7, #14]
7000d7b2:	1ad3      	subs	r3, r2, r3
7000d7b4:	b29a      	uxth	r2, r3
7000d7b6:	687b      	ldr	r3, [r7, #4]
7000d7b8:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
7000d7ba:	2300      	movs	r3, #0
}
7000d7bc:	4618      	mov	r0, r3
7000d7be:	3710      	adds	r7, #16
7000d7c0:	46bd      	mov	sp, r7
7000d7c2:	bd80      	pop	{r7, pc}
7000d7c4:	700158c8 	.word	0x700158c8
7000d7c8:	70015a5c 	.word	0x70015a5c
7000d7cc:	70015958 	.word	0x70015958

7000d7d0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
7000d7d0:	b580      	push	{r7, lr}
7000d7d2:	b082      	sub	sp, #8
7000d7d4:	af00      	add	r7, sp, #0
7000d7d6:	6078      	str	r0, [r7, #4]
7000d7d8:	460b      	mov	r3, r1
7000d7da:	807b      	strh	r3, [r7, #2]
7000d7dc:	4613      	mov	r3, r2
7000d7de:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
7000d7e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
7000d7e4:	2b00      	cmp	r3, #0
7000d7e6:	da08      	bge.n	7000d7fa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
7000d7e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
7000d7ec:	425b      	negs	r3, r3
7000d7ee:	4619      	mov	r1, r3
7000d7f0:	6878      	ldr	r0, [r7, #4]
7000d7f2:	f7ff ffa5 	bl	7000d740 <pbuf_remove_header>
7000d7f6:	4603      	mov	r3, r0
7000d7f8:	e007      	b.n	7000d80a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
7000d7fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
7000d7fe:	787a      	ldrb	r2, [r7, #1]
7000d800:	4619      	mov	r1, r3
7000d802:	6878      	ldr	r0, [r7, #4]
7000d804:	f7ff ff24 	bl	7000d650 <pbuf_add_header_impl>
7000d808:	4603      	mov	r3, r0
  }
}
7000d80a:	4618      	mov	r0, r3
7000d80c:	3708      	adds	r7, #8
7000d80e:	46bd      	mov	sp, r7
7000d810:	bd80      	pop	{r7, pc}

7000d812 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
7000d812:	b580      	push	{r7, lr}
7000d814:	b082      	sub	sp, #8
7000d816:	af00      	add	r7, sp, #0
7000d818:	6078      	str	r0, [r7, #4]
7000d81a:	460b      	mov	r3, r1
7000d81c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
7000d81e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
7000d822:	2201      	movs	r2, #1
7000d824:	4619      	mov	r1, r3
7000d826:	6878      	ldr	r0, [r7, #4]
7000d828:	f7ff ffd2 	bl	7000d7d0 <pbuf_header_impl>
7000d82c:	4603      	mov	r3, r0
}
7000d82e:	4618      	mov	r0, r3
7000d830:	3708      	adds	r7, #8
7000d832:	46bd      	mov	sp, r7
7000d834:	bd80      	pop	{r7, pc}
	...

7000d838 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
7000d838:	b580      	push	{r7, lr}
7000d83a:	b088      	sub	sp, #32
7000d83c:	af00      	add	r7, sp, #0
7000d83e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
7000d840:	687b      	ldr	r3, [r7, #4]
7000d842:	2b00      	cmp	r3, #0
7000d844:	d10b      	bne.n	7000d85e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
7000d846:	687b      	ldr	r3, [r7, #4]
7000d848:	2b00      	cmp	r3, #0
7000d84a:	d106      	bne.n	7000d85a <pbuf_free+0x22>
7000d84c:	4b3b      	ldr	r3, [pc, #236]	@ (7000d93c <pbuf_free+0x104>)
7000d84e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
7000d852:	493b      	ldr	r1, [pc, #236]	@ (7000d940 <pbuf_free+0x108>)
7000d854:	483b      	ldr	r0, [pc, #236]	@ (7000d944 <pbuf_free+0x10c>)
7000d856:	f006 fa5b 	bl	70013d10 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
7000d85a:	2300      	movs	r3, #0
7000d85c:	e069      	b.n	7000d932 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
7000d85e:	2300      	movs	r3, #0
7000d860:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
7000d862:	e062      	b.n	7000d92a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
7000d864:	f000 fb52 	bl	7000df0c <sys_arch_protect>
7000d868:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
7000d86a:	687b      	ldr	r3, [r7, #4]
7000d86c:	7b9b      	ldrb	r3, [r3, #14]
7000d86e:	2b00      	cmp	r3, #0
7000d870:	d106      	bne.n	7000d880 <pbuf_free+0x48>
7000d872:	4b32      	ldr	r3, [pc, #200]	@ (7000d93c <pbuf_free+0x104>)
7000d874:	f240 22f1 	movw	r2, #753	@ 0x2f1
7000d878:	4933      	ldr	r1, [pc, #204]	@ (7000d948 <pbuf_free+0x110>)
7000d87a:	4832      	ldr	r0, [pc, #200]	@ (7000d944 <pbuf_free+0x10c>)
7000d87c:	f006 fa48 	bl	70013d10 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
7000d880:	687b      	ldr	r3, [r7, #4]
7000d882:	7b9b      	ldrb	r3, [r3, #14]
7000d884:	3b01      	subs	r3, #1
7000d886:	b2da      	uxtb	r2, r3
7000d888:	687b      	ldr	r3, [r7, #4]
7000d88a:	739a      	strb	r2, [r3, #14]
7000d88c:	687b      	ldr	r3, [r7, #4]
7000d88e:	7b9b      	ldrb	r3, [r3, #14]
7000d890:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
7000d892:	69b8      	ldr	r0, [r7, #24]
7000d894:	f000 fb48 	bl	7000df28 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
7000d898:	7dfb      	ldrb	r3, [r7, #23]
7000d89a:	2b00      	cmp	r3, #0
7000d89c:	d143      	bne.n	7000d926 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
7000d89e:	687b      	ldr	r3, [r7, #4]
7000d8a0:	681b      	ldr	r3, [r3, #0]
7000d8a2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
7000d8a4:	687b      	ldr	r3, [r7, #4]
7000d8a6:	7b1b      	ldrb	r3, [r3, #12]
7000d8a8:	f003 030f 	and.w	r3, r3, #15
7000d8ac:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
7000d8ae:	687b      	ldr	r3, [r7, #4]
7000d8b0:	7b5b      	ldrb	r3, [r3, #13]
7000d8b2:	f003 0302 	and.w	r3, r3, #2
7000d8b6:	2b00      	cmp	r3, #0
7000d8b8:	d011      	beq.n	7000d8de <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
7000d8ba:	687b      	ldr	r3, [r7, #4]
7000d8bc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
7000d8be:	68bb      	ldr	r3, [r7, #8]
7000d8c0:	691b      	ldr	r3, [r3, #16]
7000d8c2:	2b00      	cmp	r3, #0
7000d8c4:	d106      	bne.n	7000d8d4 <pbuf_free+0x9c>
7000d8c6:	4b1d      	ldr	r3, [pc, #116]	@ (7000d93c <pbuf_free+0x104>)
7000d8c8:	f240 22ff 	movw	r2, #767	@ 0x2ff
7000d8cc:	491f      	ldr	r1, [pc, #124]	@ (7000d94c <pbuf_free+0x114>)
7000d8ce:	481d      	ldr	r0, [pc, #116]	@ (7000d944 <pbuf_free+0x10c>)
7000d8d0:	f006 fa1e 	bl	70013d10 <iprintf>
        pc->custom_free_function(p);
7000d8d4:	68bb      	ldr	r3, [r7, #8]
7000d8d6:	691b      	ldr	r3, [r3, #16]
7000d8d8:	6878      	ldr	r0, [r7, #4]
7000d8da:	4798      	blx	r3
7000d8dc:	e01d      	b.n	7000d91a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
7000d8de:	7bfb      	ldrb	r3, [r7, #15]
7000d8e0:	2b02      	cmp	r3, #2
7000d8e2:	d104      	bne.n	7000d8ee <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
7000d8e4:	6879      	ldr	r1, [r7, #4]
7000d8e6:	200c      	movs	r0, #12
7000d8e8:	f7ff f964 	bl	7000cbb4 <memp_free>
7000d8ec:	e015      	b.n	7000d91a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
7000d8ee:	7bfb      	ldrb	r3, [r7, #15]
7000d8f0:	2b01      	cmp	r3, #1
7000d8f2:	d104      	bne.n	7000d8fe <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
7000d8f4:	6879      	ldr	r1, [r7, #4]
7000d8f6:	200b      	movs	r0, #11
7000d8f8:	f7ff f95c 	bl	7000cbb4 <memp_free>
7000d8fc:	e00d      	b.n	7000d91a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
7000d8fe:	7bfb      	ldrb	r3, [r7, #15]
7000d900:	2b00      	cmp	r3, #0
7000d902:	d103      	bne.n	7000d90c <pbuf_free+0xd4>
          mem_free(p);
7000d904:	6878      	ldr	r0, [r7, #4]
7000d906:	f7fe fdad 	bl	7000c464 <mem_free>
7000d90a:	e006      	b.n	7000d91a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
7000d90c:	4b0b      	ldr	r3, [pc, #44]	@ (7000d93c <pbuf_free+0x104>)
7000d90e:	f240 320f 	movw	r2, #783	@ 0x30f
7000d912:	490f      	ldr	r1, [pc, #60]	@ (7000d950 <pbuf_free+0x118>)
7000d914:	480b      	ldr	r0, [pc, #44]	@ (7000d944 <pbuf_free+0x10c>)
7000d916:	f006 f9fb 	bl	70013d10 <iprintf>
        }
      }
      count++;
7000d91a:	7ffb      	ldrb	r3, [r7, #31]
7000d91c:	3301      	adds	r3, #1
7000d91e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
7000d920:	693b      	ldr	r3, [r7, #16]
7000d922:	607b      	str	r3, [r7, #4]
7000d924:	e001      	b.n	7000d92a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
7000d926:	2300      	movs	r3, #0
7000d928:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
7000d92a:	687b      	ldr	r3, [r7, #4]
7000d92c:	2b00      	cmp	r3, #0
7000d92e:	d199      	bne.n	7000d864 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
7000d930:	7ffb      	ldrb	r3, [r7, #31]
}
7000d932:	4618      	mov	r0, r3
7000d934:	3720      	adds	r7, #32
7000d936:	46bd      	mov	sp, r7
7000d938:	bd80      	pop	{r7, pc}
7000d93a:	bf00      	nop
7000d93c:	700158c8 	.word	0x700158c8
7000d940:	70015a5c 	.word	0x70015a5c
7000d944:	70015958 	.word	0x70015958
7000d948:	70015a68 	.word	0x70015a68
7000d94c:	70015a80 	.word	0x70015a80
7000d950:	70015aa4 	.word	0x70015aa4

7000d954 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
7000d954:	b480      	push	{r7}
7000d956:	b085      	sub	sp, #20
7000d958:	af00      	add	r7, sp, #0
7000d95a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
7000d95c:	2300      	movs	r3, #0
7000d95e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
7000d960:	e005      	b.n	7000d96e <pbuf_clen+0x1a>
    ++len;
7000d962:	89fb      	ldrh	r3, [r7, #14]
7000d964:	3301      	adds	r3, #1
7000d966:	81fb      	strh	r3, [r7, #14]
    p = p->next;
7000d968:	687b      	ldr	r3, [r7, #4]
7000d96a:	681b      	ldr	r3, [r3, #0]
7000d96c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
7000d96e:	687b      	ldr	r3, [r7, #4]
7000d970:	2b00      	cmp	r3, #0
7000d972:	d1f6      	bne.n	7000d962 <pbuf_clen+0xe>
  }
  return len;
7000d974:	89fb      	ldrh	r3, [r7, #14]
}
7000d976:	4618      	mov	r0, r3
7000d978:	3714      	adds	r7, #20
7000d97a:	46bd      	mov	sp, r7
7000d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
7000d980:	4770      	bx	lr
	...

7000d984 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
7000d984:	b580      	push	{r7, lr}
7000d986:	b084      	sub	sp, #16
7000d988:	af00      	add	r7, sp, #0
7000d98a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
7000d98c:	687b      	ldr	r3, [r7, #4]
7000d98e:	2b00      	cmp	r3, #0
7000d990:	d016      	beq.n	7000d9c0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
7000d992:	f000 fabb 	bl	7000df0c <sys_arch_protect>
7000d996:	60f8      	str	r0, [r7, #12]
7000d998:	687b      	ldr	r3, [r7, #4]
7000d99a:	7b9b      	ldrb	r3, [r3, #14]
7000d99c:	3301      	adds	r3, #1
7000d99e:	b2da      	uxtb	r2, r3
7000d9a0:	687b      	ldr	r3, [r7, #4]
7000d9a2:	739a      	strb	r2, [r3, #14]
7000d9a4:	68f8      	ldr	r0, [r7, #12]
7000d9a6:	f000 fabf 	bl	7000df28 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
7000d9aa:	687b      	ldr	r3, [r7, #4]
7000d9ac:	7b9b      	ldrb	r3, [r3, #14]
7000d9ae:	2b00      	cmp	r3, #0
7000d9b0:	d106      	bne.n	7000d9c0 <pbuf_ref+0x3c>
7000d9b2:	4b05      	ldr	r3, [pc, #20]	@ (7000d9c8 <pbuf_ref+0x44>)
7000d9b4:	f240 3242 	movw	r2, #834	@ 0x342
7000d9b8:	4904      	ldr	r1, [pc, #16]	@ (7000d9cc <pbuf_ref+0x48>)
7000d9ba:	4805      	ldr	r0, [pc, #20]	@ (7000d9d0 <pbuf_ref+0x4c>)
7000d9bc:	f006 f9a8 	bl	70013d10 <iprintf>
  }
}
7000d9c0:	bf00      	nop
7000d9c2:	3710      	adds	r7, #16
7000d9c4:	46bd      	mov	sp, r7
7000d9c6:	bd80      	pop	{r7, pc}
7000d9c8:	700158c8 	.word	0x700158c8
7000d9cc:	70015ab8 	.word	0x70015ab8
7000d9d0:	70015958 	.word	0x70015958

7000d9d4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
7000d9d4:	b580      	push	{r7, lr}
7000d9d6:	b084      	sub	sp, #16
7000d9d8:	af00      	add	r7, sp, #0
7000d9da:	6078      	str	r0, [r7, #4]
7000d9dc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
7000d9de:	687b      	ldr	r3, [r7, #4]
7000d9e0:	2b00      	cmp	r3, #0
7000d9e2:	d037      	beq.n	7000da54 <pbuf_cat+0x80>
7000d9e4:	683b      	ldr	r3, [r7, #0]
7000d9e6:	2b00      	cmp	r3, #0
7000d9e8:	d034      	beq.n	7000da54 <pbuf_cat+0x80>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
7000d9ea:	687b      	ldr	r3, [r7, #4]
7000d9ec:	60fb      	str	r3, [r7, #12]
7000d9ee:	e00a      	b.n	7000da06 <pbuf_cat+0x32>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
7000d9f0:	68fb      	ldr	r3, [r7, #12]
7000d9f2:	891a      	ldrh	r2, [r3, #8]
7000d9f4:	683b      	ldr	r3, [r7, #0]
7000d9f6:	891b      	ldrh	r3, [r3, #8]
7000d9f8:	4413      	add	r3, r2
7000d9fa:	b29a      	uxth	r2, r3
7000d9fc:	68fb      	ldr	r3, [r7, #12]
7000d9fe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
7000da00:	68fb      	ldr	r3, [r7, #12]
7000da02:	681b      	ldr	r3, [r3, #0]
7000da04:	60fb      	str	r3, [r7, #12]
7000da06:	68fb      	ldr	r3, [r7, #12]
7000da08:	681b      	ldr	r3, [r3, #0]
7000da0a:	2b00      	cmp	r3, #0
7000da0c:	d1f0      	bne.n	7000d9f0 <pbuf_cat+0x1c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
7000da0e:	68fb      	ldr	r3, [r7, #12]
7000da10:	891a      	ldrh	r2, [r3, #8]
7000da12:	68fb      	ldr	r3, [r7, #12]
7000da14:	895b      	ldrh	r3, [r3, #10]
7000da16:	429a      	cmp	r2, r3
7000da18:	d006      	beq.n	7000da28 <pbuf_cat+0x54>
7000da1a:	4b10      	ldr	r3, [pc, #64]	@ (7000da5c <pbuf_cat+0x88>)
7000da1c:	f240 3262 	movw	r2, #866	@ 0x362
7000da20:	490f      	ldr	r1, [pc, #60]	@ (7000da60 <pbuf_cat+0x8c>)
7000da22:	4810      	ldr	r0, [pc, #64]	@ (7000da64 <pbuf_cat+0x90>)
7000da24:	f006 f974 	bl	70013d10 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
7000da28:	68fb      	ldr	r3, [r7, #12]
7000da2a:	681b      	ldr	r3, [r3, #0]
7000da2c:	2b00      	cmp	r3, #0
7000da2e:	d006      	beq.n	7000da3e <pbuf_cat+0x6a>
7000da30:	4b0a      	ldr	r3, [pc, #40]	@ (7000da5c <pbuf_cat+0x88>)
7000da32:	f240 3263 	movw	r2, #867	@ 0x363
7000da36:	490c      	ldr	r1, [pc, #48]	@ (7000da68 <pbuf_cat+0x94>)
7000da38:	480a      	ldr	r0, [pc, #40]	@ (7000da64 <pbuf_cat+0x90>)
7000da3a:	f006 f969 	bl	70013d10 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
7000da3e:	68fb      	ldr	r3, [r7, #12]
7000da40:	891a      	ldrh	r2, [r3, #8]
7000da42:	683b      	ldr	r3, [r7, #0]
7000da44:	891b      	ldrh	r3, [r3, #8]
7000da46:	4413      	add	r3, r2
7000da48:	b29a      	uxth	r2, r3
7000da4a:	68fb      	ldr	r3, [r7, #12]
7000da4c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
7000da4e:	68fb      	ldr	r3, [r7, #12]
7000da50:	683a      	ldr	r2, [r7, #0]
7000da52:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
7000da54:	3710      	adds	r7, #16
7000da56:	46bd      	mov	sp, r7
7000da58:	bd80      	pop	{r7, pc}
7000da5a:	bf00      	nop
7000da5c:	700158c8 	.word	0x700158c8
7000da60:	70015acc 	.word	0x70015acc
7000da64:	70015958 	.word	0x70015958
7000da68:	70015afc 	.word	0x70015afc

7000da6c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
7000da6c:	b580      	push	{r7, lr}
7000da6e:	b082      	sub	sp, #8
7000da70:	af00      	add	r7, sp, #0
7000da72:	6078      	str	r0, [r7, #4]
7000da74:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
7000da76:	683b      	ldr	r3, [r7, #0]
7000da78:	2b00      	cmp	r3, #0
7000da7a:	d102      	bne.n	7000da82 <pbuf_copy+0x16>
7000da7c:	f06f 030f 	mvn.w	r3, #15
7000da80:	e007      	b.n	7000da92 <pbuf_copy+0x26>
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
7000da82:	683b      	ldr	r3, [r7, #0]
7000da84:	891a      	ldrh	r2, [r3, #8]
7000da86:	2300      	movs	r3, #0
7000da88:	6839      	ldr	r1, [r7, #0]
7000da8a:	6878      	ldr	r0, [r7, #4]
7000da8c:	f000 f806 	bl	7000da9c <pbuf_copy_partial_pbuf>
7000da90:	4603      	mov	r3, r0
}
7000da92:	4618      	mov	r0, r3
7000da94:	3708      	adds	r7, #8
7000da96:	46bd      	mov	sp, r7
7000da98:	bd80      	pop	{r7, pc}
	...

7000da9c <pbuf_copy_partial_pbuf>:
 *                 or p_to is not big enough to hold copy_len at offset
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy_partial_pbuf(struct pbuf *p_to, const struct pbuf *p_from, u16_t copy_len, u16_t offset)
{
7000da9c:	b580      	push	{r7, lr}
7000da9e:	b088      	sub	sp, #32
7000daa0:	af00      	add	r7, sp, #0
7000daa2:	60f8      	str	r0, [r7, #12]
7000daa4:	60b9      	str	r1, [r7, #8]
7000daa6:	4611      	mov	r1, r2
7000daa8:	461a      	mov	r2, r3
7000daaa:	460b      	mov	r3, r1
7000daac:	80fb      	strh	r3, [r7, #6]
7000daae:	4613      	mov	r3, r2
7000dab0:	80bb      	strh	r3, [r7, #4]
  size_t offset_to = offset, offset_from = 0, len_calc;
7000dab2:	88bb      	ldrh	r3, [r7, #4]
7000dab4:	61fb      	str	r3, [r7, #28]
7000dab6:	2300      	movs	r3, #0
7000dab8:	61bb      	str	r3, [r7, #24]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf(%p, %p, %"U16_F", %"U16_F")\n",
              (const void *)p_to, (const void *)p_from, copy_len, offset));

  /* is the copy_len in range? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
7000daba:	68bb      	ldr	r3, [r7, #8]
7000dabc:	2b00      	cmp	r3, #0
7000dabe:	d004      	beq.n	7000daca <pbuf_copy_partial_pbuf+0x2e>
7000dac0:	68bb      	ldr	r3, [r7, #8]
7000dac2:	891b      	ldrh	r3, [r3, #8]
7000dac4:	88fa      	ldrh	r2, [r7, #6]
7000dac6:	429a      	cmp	r2, r3
7000dac8:	d902      	bls.n	7000dad0 <pbuf_copy_partial_pbuf+0x34>
7000daca:	f06f 030f 	mvn.w	r3, #15
7000dace:	e0ae      	b.n	7000dc2e <pbuf_copy_partial_pbuf+0x192>
             (p_from->tot_len >= copy_len)), return ERR_ARG;);
  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
7000dad0:	68fb      	ldr	r3, [r7, #12]
7000dad2:	2b00      	cmp	r3, #0
7000dad4:	d007      	beq.n	7000dae6 <pbuf_copy_partial_pbuf+0x4a>
7000dad6:	68fb      	ldr	r3, [r7, #12]
7000dad8:	891b      	ldrh	r3, [r3, #8]
7000dada:	4619      	mov	r1, r3
7000dadc:	88ba      	ldrh	r2, [r7, #4]
7000dade:	88fb      	ldrh	r3, [r7, #6]
7000dae0:	4413      	add	r3, r2
7000dae2:	4299      	cmp	r1, r3
7000dae4:	da02      	bge.n	7000daec <pbuf_copy_partial_pbuf+0x50>
7000dae6:	f06f 030f 	mvn.w	r3, #15
7000daea:	e0a0      	b.n	7000dc2e <pbuf_copy_partial_pbuf+0x192>
             (p_to->tot_len >= (offset + copy_len))), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
7000daec:	68fb      	ldr	r3, [r7, #12]
7000daee:	895b      	ldrh	r3, [r3, #10]
7000daf0:	461a      	mov	r2, r3
7000daf2:	69fb      	ldr	r3, [r7, #28]
7000daf4:	1ad2      	subs	r2, r2, r3
7000daf6:	68bb      	ldr	r3, [r7, #8]
7000daf8:	895b      	ldrh	r3, [r3, #10]
7000dafa:	4619      	mov	r1, r3
7000dafc:	69bb      	ldr	r3, [r7, #24]
7000dafe:	1acb      	subs	r3, r1, r3
7000db00:	429a      	cmp	r2, r3
7000db02:	d306      	bcc.n	7000db12 <pbuf_copy_partial_pbuf+0x76>
      /* complete current p_from fits into current p_to */
      len_calc = p_from->len - offset_from;
7000db04:	68bb      	ldr	r3, [r7, #8]
7000db06:	895b      	ldrh	r3, [r3, #10]
7000db08:	461a      	mov	r2, r3
7000db0a:	69bb      	ldr	r3, [r7, #24]
7000db0c:	1ad3      	subs	r3, r2, r3
7000db0e:	617b      	str	r3, [r7, #20]
7000db10:	e005      	b.n	7000db1e <pbuf_copy_partial_pbuf+0x82>
    } else {
      /* current p_from does not fit into current p_to */
      len_calc = p_to->len - offset_to;
7000db12:	68fb      	ldr	r3, [r7, #12]
7000db14:	895b      	ldrh	r3, [r3, #10]
7000db16:	461a      	mov	r2, r3
7000db18:	69fb      	ldr	r3, [r7, #28]
7000db1a:	1ad3      	subs	r3, r2, r3
7000db1c:	617b      	str	r3, [r7, #20]
    }
    len = (u16_t)LWIP_MIN(copy_len, len_calc);
7000db1e:	88fb      	ldrh	r3, [r7, #6]
7000db20:	697a      	ldr	r2, [r7, #20]
7000db22:	429a      	cmp	r2, r3
7000db24:	d802      	bhi.n	7000db2c <pbuf_copy_partial_pbuf+0x90>
7000db26:	697b      	ldr	r3, [r7, #20]
7000db28:	b29b      	uxth	r3, r3
7000db2a:	e000      	b.n	7000db2e <pbuf_copy_partial_pbuf+0x92>
7000db2c:	88fb      	ldrh	r3, [r7, #6]
7000db2e:	827b      	strh	r3, [r7, #18]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
7000db30:	68fb      	ldr	r3, [r7, #12]
7000db32:	685a      	ldr	r2, [r3, #4]
7000db34:	69fb      	ldr	r3, [r7, #28]
7000db36:	18d0      	adds	r0, r2, r3
7000db38:	68bb      	ldr	r3, [r7, #8]
7000db3a:	685a      	ldr	r2, [r3, #4]
7000db3c:	69bb      	ldr	r3, [r7, #24]
7000db3e:	4413      	add	r3, r2
7000db40:	8a7a      	ldrh	r2, [r7, #18]
7000db42:	4619      	mov	r1, r3
7000db44:	f006 fa15 	bl	70013f72 <memcpy>
    offset_to += len;
7000db48:	8a7b      	ldrh	r3, [r7, #18]
7000db4a:	69fa      	ldr	r2, [r7, #28]
7000db4c:	4413      	add	r3, r2
7000db4e:	61fb      	str	r3, [r7, #28]
    offset_from += len;
7000db50:	8a7b      	ldrh	r3, [r7, #18]
7000db52:	69ba      	ldr	r2, [r7, #24]
7000db54:	4413      	add	r3, r2
7000db56:	61bb      	str	r3, [r7, #24]
    copy_len -= len;
7000db58:	88fa      	ldrh	r2, [r7, #6]
7000db5a:	8a7b      	ldrh	r3, [r7, #18]
7000db5c:	1ad3      	subs	r3, r2, r3
7000db5e:	80fb      	strh	r3, [r7, #6]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
7000db60:	68fb      	ldr	r3, [r7, #12]
7000db62:	895b      	ldrh	r3, [r3, #10]
7000db64:	461a      	mov	r2, r3
7000db66:	69fb      	ldr	r3, [r7, #28]
7000db68:	4293      	cmp	r3, r2
7000db6a:	d906      	bls.n	7000db7a <pbuf_copy_partial_pbuf+0xde>
7000db6c:	4b32      	ldr	r3, [pc, #200]	@ (7000dc38 <pbuf_copy_partial_pbuf+0x19c>)
7000db6e:	f240 32fa 	movw	r2, #1018	@ 0x3fa
7000db72:	4932      	ldr	r1, [pc, #200]	@ (7000dc3c <pbuf_copy_partial_pbuf+0x1a0>)
7000db74:	4832      	ldr	r0, [pc, #200]	@ (7000dc40 <pbuf_copy_partial_pbuf+0x1a4>)
7000db76:	f006 f8cb 	bl	70013d10 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
7000db7a:	68bb      	ldr	r3, [r7, #8]
7000db7c:	895b      	ldrh	r3, [r3, #10]
7000db7e:	461a      	mov	r2, r3
7000db80:	69bb      	ldr	r3, [r7, #24]
7000db82:	4293      	cmp	r3, r2
7000db84:	d906      	bls.n	7000db94 <pbuf_copy_partial_pbuf+0xf8>
7000db86:	4b2c      	ldr	r3, [pc, #176]	@ (7000dc38 <pbuf_copy_partial_pbuf+0x19c>)
7000db88:	f240 32fb 	movw	r2, #1019	@ 0x3fb
7000db8c:	492d      	ldr	r1, [pc, #180]	@ (7000dc44 <pbuf_copy_partial_pbuf+0x1a8>)
7000db8e:	482c      	ldr	r0, [pc, #176]	@ (7000dc40 <pbuf_copy_partial_pbuf+0x1a4>)
7000db90:	f006 f8be 	bl	70013d10 <iprintf>
    if (offset_from >= p_from->len) {
7000db94:	68bb      	ldr	r3, [r7, #8]
7000db96:	895b      	ldrh	r3, [r3, #10]
7000db98:	461a      	mov	r2, r3
7000db9a:	69bb      	ldr	r3, [r7, #24]
7000db9c:	4293      	cmp	r3, r2
7000db9e:	d30d      	bcc.n	7000dbbc <pbuf_copy_partial_pbuf+0x120>
      /* on to next p_from (if any) */
      offset_from = 0;
7000dba0:	2300      	movs	r3, #0
7000dba2:	61bb      	str	r3, [r7, #24]
      p_from = p_from->next;
7000dba4:	68bb      	ldr	r3, [r7, #8]
7000dba6:	681b      	ldr	r3, [r3, #0]
7000dba8:	60bb      	str	r3, [r7, #8]
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
7000dbaa:	68bb      	ldr	r3, [r7, #8]
7000dbac:	2b00      	cmp	r3, #0
7000dbae:	d105      	bne.n	7000dbbc <pbuf_copy_partial_pbuf+0x120>
7000dbb0:	88fb      	ldrh	r3, [r7, #6]
7000dbb2:	2b00      	cmp	r3, #0
7000dbb4:	d002      	beq.n	7000dbbc <pbuf_copy_partial_pbuf+0x120>
7000dbb6:	f06f 030f 	mvn.w	r3, #15
7000dbba:	e038      	b.n	7000dc2e <pbuf_copy_partial_pbuf+0x192>
    }
    if (offset_to == p_to->len) {
7000dbbc:	68fb      	ldr	r3, [r7, #12]
7000dbbe:	895b      	ldrh	r3, [r3, #10]
7000dbc0:	461a      	mov	r2, r3
7000dbc2:	69fb      	ldr	r3, [r7, #28]
7000dbc4:	4293      	cmp	r3, r2
7000dbc6:	d10d      	bne.n	7000dbe4 <pbuf_copy_partial_pbuf+0x148>
      /* on to next p_to (if any) */
      offset_to = 0;
7000dbc8:	2300      	movs	r3, #0
7000dbca:	61fb      	str	r3, [r7, #28]
      p_to = p_to->next;
7000dbcc:	68fb      	ldr	r3, [r7, #12]
7000dbce:	681b      	ldr	r3, [r3, #0]
7000dbd0:	60fb      	str	r3, [r7, #12]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
7000dbd2:	68fb      	ldr	r3, [r7, #12]
7000dbd4:	2b00      	cmp	r3, #0
7000dbd6:	d105      	bne.n	7000dbe4 <pbuf_copy_partial_pbuf+0x148>
7000dbd8:	88fb      	ldrh	r3, [r7, #6]
7000dbda:	2b00      	cmp	r3, #0
7000dbdc:	d002      	beq.n	7000dbe4 <pbuf_copy_partial_pbuf+0x148>
7000dbde:	f06f 030f 	mvn.w	r3, #15
7000dbe2:	e024      	b.n	7000dc2e <pbuf_copy_partial_pbuf+0x192>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
7000dbe4:	68bb      	ldr	r3, [r7, #8]
7000dbe6:	2b00      	cmp	r3, #0
7000dbe8:	d00c      	beq.n	7000dc04 <pbuf_copy_partial_pbuf+0x168>
7000dbea:	68bb      	ldr	r3, [r7, #8]
7000dbec:	895a      	ldrh	r2, [r3, #10]
7000dbee:	68bb      	ldr	r3, [r7, #8]
7000dbf0:	891b      	ldrh	r3, [r3, #8]
7000dbf2:	429a      	cmp	r2, r3
7000dbf4:	d106      	bne.n	7000dc04 <pbuf_copy_partial_pbuf+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
7000dbf6:	68bb      	ldr	r3, [r7, #8]
7000dbf8:	681b      	ldr	r3, [r3, #0]
7000dbfa:	2b00      	cmp	r3, #0
7000dbfc:	d002      	beq.n	7000dc04 <pbuf_copy_partial_pbuf+0x168>
7000dbfe:	f06f 0305 	mvn.w	r3, #5
7000dc02:	e014      	b.n	7000dc2e <pbuf_copy_partial_pbuf+0x192>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
7000dc04:	68fb      	ldr	r3, [r7, #12]
7000dc06:	2b00      	cmp	r3, #0
7000dc08:	d00c      	beq.n	7000dc24 <pbuf_copy_partial_pbuf+0x188>
7000dc0a:	68fb      	ldr	r3, [r7, #12]
7000dc0c:	895a      	ldrh	r2, [r3, #10]
7000dc0e:	68fb      	ldr	r3, [r7, #12]
7000dc10:	891b      	ldrh	r3, [r3, #8]
7000dc12:	429a      	cmp	r2, r3
7000dc14:	d106      	bne.n	7000dc24 <pbuf_copy_partial_pbuf+0x188>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
7000dc16:	68fb      	ldr	r3, [r7, #12]
7000dc18:	681b      	ldr	r3, [r3, #0]
7000dc1a:	2b00      	cmp	r3, #0
7000dc1c:	d002      	beq.n	7000dc24 <pbuf_copy_partial_pbuf+0x188>
7000dc1e:	f06f 0305 	mvn.w	r3, #5
7000dc22:	e004      	b.n	7000dc2e <pbuf_copy_partial_pbuf+0x192>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (copy_len);
7000dc24:	88fb      	ldrh	r3, [r7, #6]
7000dc26:	2b00      	cmp	r3, #0
7000dc28:	f47f af60 	bne.w	7000daec <pbuf_copy_partial_pbuf+0x50>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf: copy complete.\n"));
  return ERR_OK;
7000dc2c:	2300      	movs	r3, #0
}
7000dc2e:	4618      	mov	r0, r3
7000dc30:	3720      	adds	r7, #32
7000dc32:	46bd      	mov	sp, r7
7000dc34:	bd80      	pop	{r7, pc}
7000dc36:	bf00      	nop
7000dc38:	700158c8 	.word	0x700158c8
7000dc3c:	70015b48 	.word	0x70015b48
7000dc40:	70015958 	.word	0x70015958
7000dc44:	70015b60 	.word	0x70015b60

7000dc48 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
7000dc48:	b580      	push	{r7, lr}
7000dc4a:	b088      	sub	sp, #32
7000dc4c:	af00      	add	r7, sp, #0
7000dc4e:	60f8      	str	r0, [r7, #12]
7000dc50:	60b9      	str	r1, [r7, #8]
7000dc52:	4611      	mov	r1, r2
7000dc54:	461a      	mov	r2, r3
7000dc56:	460b      	mov	r3, r1
7000dc58:	80fb      	strh	r3, [r7, #6]
7000dc5a:	4613      	mov	r3, r2
7000dc5c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
7000dc5e:	2300      	movs	r3, #0
7000dc60:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
7000dc62:	2300      	movs	r3, #0
7000dc64:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
7000dc66:	68fb      	ldr	r3, [r7, #12]
7000dc68:	2b00      	cmp	r3, #0
7000dc6a:	d101      	bne.n	7000dc70 <pbuf_copy_partial+0x28>
7000dc6c:	2300      	movs	r3, #0
7000dc6e:	e043      	b.n	7000dcf8 <pbuf_copy_partial+0xb0>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
7000dc70:	68bb      	ldr	r3, [r7, #8]
7000dc72:	2b00      	cmp	r3, #0
7000dc74:	d101      	bne.n	7000dc7a <pbuf_copy_partial+0x32>
7000dc76:	2300      	movs	r3, #0
7000dc78:	e03e      	b.n	7000dcf8 <pbuf_copy_partial+0xb0>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
7000dc7a:	68fb      	ldr	r3, [r7, #12]
7000dc7c:	61fb      	str	r3, [r7, #28]
7000dc7e:	e034      	b.n	7000dcea <pbuf_copy_partial+0xa2>
    if ((offset != 0) && (offset >= p->len)) {
7000dc80:	88bb      	ldrh	r3, [r7, #4]
7000dc82:	2b00      	cmp	r3, #0
7000dc84:	d00a      	beq.n	7000dc9c <pbuf_copy_partial+0x54>
7000dc86:	69fb      	ldr	r3, [r7, #28]
7000dc88:	895b      	ldrh	r3, [r3, #10]
7000dc8a:	88ba      	ldrh	r2, [r7, #4]
7000dc8c:	429a      	cmp	r2, r3
7000dc8e:	d305      	bcc.n	7000dc9c <pbuf_copy_partial+0x54>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
7000dc90:	69fb      	ldr	r3, [r7, #28]
7000dc92:	895b      	ldrh	r3, [r3, #10]
7000dc94:	88ba      	ldrh	r2, [r7, #4]
7000dc96:	1ad3      	subs	r3, r2, r3
7000dc98:	80bb      	strh	r3, [r7, #4]
7000dc9a:	e023      	b.n	7000dce4 <pbuf_copy_partial+0x9c>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
7000dc9c:	69fb      	ldr	r3, [r7, #28]
7000dc9e:	895a      	ldrh	r2, [r3, #10]
7000dca0:	88bb      	ldrh	r3, [r7, #4]
7000dca2:	1ad3      	subs	r3, r2, r3
7000dca4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
7000dca6:	8b3a      	ldrh	r2, [r7, #24]
7000dca8:	88fb      	ldrh	r3, [r7, #6]
7000dcaa:	429a      	cmp	r2, r3
7000dcac:	d901      	bls.n	7000dcb2 <pbuf_copy_partial+0x6a>
        buf_copy_len = len;
7000dcae:	88fb      	ldrh	r3, [r7, #6]
7000dcb0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
7000dcb2:	8b7b      	ldrh	r3, [r7, #26]
7000dcb4:	68ba      	ldr	r2, [r7, #8]
7000dcb6:	18d0      	adds	r0, r2, r3
7000dcb8:	69fb      	ldr	r3, [r7, #28]
7000dcba:	685a      	ldr	r2, [r3, #4]
7000dcbc:	88bb      	ldrh	r3, [r7, #4]
7000dcbe:	4413      	add	r3, r2
7000dcc0:	8b3a      	ldrh	r2, [r7, #24]
7000dcc2:	4619      	mov	r1, r3
7000dcc4:	f006 f955 	bl	70013f72 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
7000dcc8:	8afa      	ldrh	r2, [r7, #22]
7000dcca:	8b3b      	ldrh	r3, [r7, #24]
7000dccc:	4413      	add	r3, r2
7000dcce:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
7000dcd0:	8b7a      	ldrh	r2, [r7, #26]
7000dcd2:	8b3b      	ldrh	r3, [r7, #24]
7000dcd4:	4413      	add	r3, r2
7000dcd6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
7000dcd8:	88fa      	ldrh	r2, [r7, #6]
7000dcda:	8b3b      	ldrh	r3, [r7, #24]
7000dcdc:	1ad3      	subs	r3, r2, r3
7000dcde:	80fb      	strh	r3, [r7, #6]
      offset = 0;
7000dce0:	2300      	movs	r3, #0
7000dce2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
7000dce4:	69fb      	ldr	r3, [r7, #28]
7000dce6:	681b      	ldr	r3, [r3, #0]
7000dce8:	61fb      	str	r3, [r7, #28]
7000dcea:	88fb      	ldrh	r3, [r7, #6]
7000dcec:	2b00      	cmp	r3, #0
7000dcee:	d002      	beq.n	7000dcf6 <pbuf_copy_partial+0xae>
7000dcf0:	69fb      	ldr	r3, [r7, #28]
7000dcf2:	2b00      	cmp	r3, #0
7000dcf4:	d1c4      	bne.n	7000dc80 <pbuf_copy_partial+0x38>
    }
  }
  return copied_total;
7000dcf6:	8afb      	ldrh	r3, [r7, #22]
}
7000dcf8:	4618      	mov	r0, r3
7000dcfa:	3720      	adds	r7, #32
7000dcfc:	46bd      	mov	sp, r7
7000dcfe:	bd80      	pop	{r7, pc}

7000dd00 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
7000dd00:	b580      	push	{r7, lr}
7000dd02:	b084      	sub	sp, #16
7000dd04:	af00      	add	r7, sp, #0
7000dd06:	4603      	mov	r3, r0
7000dd08:	603a      	str	r2, [r7, #0]
7000dd0a:	71fb      	strb	r3, [r7, #7]
7000dd0c:	460b      	mov	r3, r1
7000dd0e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
7000dd10:	683b      	ldr	r3, [r7, #0]
7000dd12:	8919      	ldrh	r1, [r3, #8]
7000dd14:	88ba      	ldrh	r2, [r7, #4]
7000dd16:	79fb      	ldrb	r3, [r7, #7]
7000dd18:	4618      	mov	r0, r3
7000dd1a:	f7ff fab3 	bl	7000d284 <pbuf_alloc>
7000dd1e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
7000dd20:	68fb      	ldr	r3, [r7, #12]
7000dd22:	2b00      	cmp	r3, #0
7000dd24:	d101      	bne.n	7000dd2a <pbuf_clone+0x2a>
    return NULL;
7000dd26:	2300      	movs	r3, #0
7000dd28:	e011      	b.n	7000dd4e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
7000dd2a:	6839      	ldr	r1, [r7, #0]
7000dd2c:	68f8      	ldr	r0, [r7, #12]
7000dd2e:	f7ff fe9d 	bl	7000da6c <pbuf_copy>
7000dd32:	4603      	mov	r3, r0
7000dd34:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
7000dd36:	f997 300b 	ldrsb.w	r3, [r7, #11]
7000dd3a:	2b00      	cmp	r3, #0
7000dd3c:	d006      	beq.n	7000dd4c <pbuf_clone+0x4c>
7000dd3e:	4b06      	ldr	r3, [pc, #24]	@ (7000dd58 <pbuf_clone+0x58>)
7000dd40:	f240 5246 	movw	r2, #1350	@ 0x546
7000dd44:	4905      	ldr	r1, [pc, #20]	@ (7000dd5c <pbuf_clone+0x5c>)
7000dd46:	4806      	ldr	r0, [pc, #24]	@ (7000dd60 <pbuf_clone+0x60>)
7000dd48:	f005 ffe2 	bl	70013d10 <iprintf>
  return q;
7000dd4c:	68fb      	ldr	r3, [r7, #12]
}
7000dd4e:	4618      	mov	r0, r3
7000dd50:	3710      	adds	r7, #16
7000dd52:	46bd      	mov	sp, r7
7000dd54:	bd80      	pop	{r7, pc}
7000dd56:	bf00      	nop
7000dd58:	700158c8 	.word	0x700158c8
7000dd5c:	70015bc4 	.word	0x70015bc4
7000dd60:	70015958 	.word	0x70015958

7000dd64 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
7000dd64:	b580      	push	{r7, lr}
7000dd66:	b082      	sub	sp, #8
7000dd68:	af00      	add	r7, sp, #0
7000dd6a:	6078      	str	r0, [r7, #4]
7000dd6c:	6039      	str	r1, [r7, #0]
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
7000dd6e:	683b      	ldr	r3, [r7, #0]
7000dd70:	2200      	movs	r2, #0
7000dd72:	2104      	movs	r1, #4
7000dd74:	4618      	mov	r0, r3
7000dd76:	f7f8 f841 	bl	70005dfc <osMessageQueueNew>
7000dd7a:	4602      	mov	r2, r0
7000dd7c:	687b      	ldr	r3, [r7, #4]
7000dd7e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
7000dd80:	687b      	ldr	r3, [r7, #4]
7000dd82:	681b      	ldr	r3, [r3, #0]
7000dd84:	2b00      	cmp	r3, #0
7000dd86:	d102      	bne.n	7000dd8e <sys_mbox_new+0x2a>
    return ERR_MEM;
7000dd88:	f04f 33ff 	mov.w	r3, #4294967295
7000dd8c:	e000      	b.n	7000dd90 <sys_mbox_new+0x2c>

  return ERR_OK;
7000dd8e:	2300      	movs	r3, #0
}
7000dd90:	4618      	mov	r0, r3
7000dd92:	3708      	adds	r7, #8
7000dd94:	46bd      	mov	sp, r7
7000dd96:	bd80      	pop	{r7, pc}

7000dd98 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
7000dd98:	b580      	push	{r7, lr}
7000dd9a:	b084      	sub	sp, #16
7000dd9c:	af00      	add	r7, sp, #0
7000dd9e:	6078      	str	r0, [r7, #4]
7000dda0:	6039      	str	r1, [r7, #0]
  err_t result;
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
7000dda2:	687b      	ldr	r3, [r7, #4]
7000dda4:	6818      	ldr	r0, [r3, #0]
7000dda6:	4639      	mov	r1, r7
7000dda8:	2300      	movs	r3, #0
7000ddaa:	2200      	movs	r2, #0
7000ddac:	f7f8 f898 	bl	70005ee0 <osMessageQueuePut>
7000ddb0:	4603      	mov	r3, r0
7000ddb2:	2b00      	cmp	r3, #0
7000ddb4:	d102      	bne.n	7000ddbc <sys_mbox_trypost+0x24>
  {
    result = ERR_OK;
7000ddb6:	2300      	movs	r3, #0
7000ddb8:	73fb      	strb	r3, [r7, #15]
7000ddba:	e001      	b.n	7000ddc0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
7000ddbc:	23ff      	movs	r3, #255	@ 0xff
7000ddbe:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
7000ddc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
7000ddc4:	4618      	mov	r0, r3
7000ddc6:	3710      	adds	r7, #16
7000ddc8:	46bd      	mov	sp, r7
7000ddca:	bd80      	pop	{r7, pc}

7000ddcc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
7000ddcc:	b580      	push	{r7, lr}
7000ddce:	b086      	sub	sp, #24
7000ddd0:	af00      	add	r7, sp, #0
7000ddd2:	60f8      	str	r0, [r7, #12]
7000ddd4:	60b9      	str	r1, [r7, #8]
7000ddd6:	607a      	str	r2, [r7, #4]
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
7000ddd8:	f7f7 fcfe 	bl	700057d8 <osKernelGetTickCount>
7000dddc:	6178      	str	r0, [r7, #20]

  if(timeout != 0)
7000ddde:	687b      	ldr	r3, [r7, #4]
7000dde0:	2b00      	cmp	r3, #0
7000dde2:	d013      	beq.n	7000de0c <sys_arch_mbox_fetch+0x40>
  {
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
7000dde4:	68fb      	ldr	r3, [r7, #12]
7000dde6:	6818      	ldr	r0, [r3, #0]
7000dde8:	687b      	ldr	r3, [r7, #4]
7000ddea:	2200      	movs	r2, #0
7000ddec:	68b9      	ldr	r1, [r7, #8]
7000ddee:	f7f8 f8d5 	bl	70005f9c <osMessageQueueGet>
7000ddf2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
7000ddf4:	693b      	ldr	r3, [r7, #16]
7000ddf6:	2b00      	cmp	r3, #0
7000ddf8:	d105      	bne.n	7000de06 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
7000ddfa:	f7f7 fced 	bl	700057d8 <osKernelGetTickCount>
7000ddfe:	4602      	mov	r2, r0
7000de00:	697b      	ldr	r3, [r7, #20]
7000de02:	1ad3      	subs	r3, r2, r3
7000de04:	e00f      	b.n	7000de26 <sys_arch_mbox_fetch+0x5a>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
7000de06:	f04f 33ff 	mov.w	r3, #4294967295
7000de0a:	e00c      	b.n	7000de26 <sys_arch_mbox_fetch+0x5a>
    }
  }
  else
  {
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
7000de0c:	68fb      	ldr	r3, [r7, #12]
7000de0e:	6818      	ldr	r0, [r3, #0]
7000de10:	f04f 33ff 	mov.w	r3, #4294967295
7000de14:	2200      	movs	r2, #0
7000de16:	68b9      	ldr	r1, [r7, #8]
7000de18:	f7f8 f8c0 	bl	70005f9c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
7000de1c:	f7f7 fcdc 	bl	700057d8 <osKernelGetTickCount>
7000de20:	4602      	mov	r2, r0
7000de22:	697b      	ldr	r3, [r7, #20]
7000de24:	1ad3      	subs	r3, r2, r3
  }
}
7000de26:	4618      	mov	r0, r3
7000de28:	3718      	adds	r7, #24
7000de2a:	46bd      	mov	sp, r7
7000de2c:	bd80      	pop	{r7, pc}

7000de2e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
7000de2e:	b480      	push	{r7}
7000de30:	b083      	sub	sp, #12
7000de32:	af00      	add	r7, sp, #0
7000de34:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
7000de36:	687b      	ldr	r3, [r7, #4]
7000de38:	681b      	ldr	r3, [r3, #0]
7000de3a:	2b00      	cmp	r3, #0
7000de3c:	d101      	bne.n	7000de42 <sys_mbox_valid+0x14>
    return 0;
7000de3e:	2300      	movs	r3, #0
7000de40:	e000      	b.n	7000de44 <sys_mbox_valid+0x16>
  else
    return 1;
7000de42:	2301      	movs	r3, #1
}
7000de44:	4618      	mov	r0, r3
7000de46:	370c      	adds	r7, #12
7000de48:	46bd      	mov	sp, r7
7000de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000de4e:	4770      	bx	lr

7000de50 <sys_init>:
/*-----------------------------------------------------------------------------------*/
osMutexId_t lwip_sys_mutex;

// Initialize sys arch
void sys_init(void)
{
7000de50:	b580      	push	{r7, lr}
7000de52:	af00      	add	r7, sp, #0
  lwip_sys_mutex = osMutexNew(NULL);
7000de54:	2000      	movs	r0, #0
7000de56:	f7f7 fdab 	bl	700059b0 <osMutexNew>
7000de5a:	4603      	mov	r3, r0
7000de5c:	4a01      	ldr	r2, [pc, #4]	@ (7000de64 <sys_init+0x14>)
7000de5e:	6013      	str	r3, [r2, #0]
}
7000de60:	bf00      	nop
7000de62:	bd80      	pop	{r7, pc}
7000de64:	24008474 	.word	0x24008474

7000de68 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
7000de68:	b580      	push	{r7, lr}
7000de6a:	b082      	sub	sp, #8
7000de6c:	af00      	add	r7, sp, #0
7000de6e:	6078      	str	r0, [r7, #4]

  *mutex = osMutexNew(NULL);
7000de70:	2000      	movs	r0, #0
7000de72:	f7f7 fd9d 	bl	700059b0 <osMutexNew>
7000de76:	4602      	mov	r2, r0
7000de78:	687b      	ldr	r3, [r7, #4]
7000de7a:	601a      	str	r2, [r3, #0]

  if(*mutex == NULL)
7000de7c:	687b      	ldr	r3, [r7, #4]
7000de7e:	681b      	ldr	r3, [r3, #0]
7000de80:	2b00      	cmp	r3, #0
7000de82:	d102      	bne.n	7000de8a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
7000de84:	f04f 33ff 	mov.w	r3, #4294967295
7000de88:	e000      	b.n	7000de8c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
7000de8a:	2300      	movs	r3, #0
}
7000de8c:	4618      	mov	r0, r3
7000de8e:	3708      	adds	r7, #8
7000de90:	46bd      	mov	sp, r7
7000de92:	bd80      	pop	{r7, pc}

7000de94 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
7000de94:	b580      	push	{r7, lr}
7000de96:	b082      	sub	sp, #8
7000de98:	af00      	add	r7, sp, #0
7000de9a:	6078      	str	r0, [r7, #4]
  osMutexAcquire(*mutex, osWaitForever);
7000de9c:	687b      	ldr	r3, [r7, #4]
7000de9e:	681b      	ldr	r3, [r3, #0]
7000dea0:	f04f 31ff 	mov.w	r1, #4294967295
7000dea4:	4618      	mov	r0, r3
7000dea6:	f7f7 fe08 	bl	70005aba <osMutexAcquire>
}
7000deaa:	bf00      	nop
7000deac:	3708      	adds	r7, #8
7000deae:	46bd      	mov	sp, r7
7000deb0:	bd80      	pop	{r7, pc}

7000deb2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
7000deb2:	b580      	push	{r7, lr}
7000deb4:	b082      	sub	sp, #8
7000deb6:	af00      	add	r7, sp, #0
7000deb8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
7000deba:	687b      	ldr	r3, [r7, #4]
7000debc:	681b      	ldr	r3, [r3, #0]
7000debe:	4618      	mov	r0, r3
7000dec0:	f7f7 fe45 	bl	70005b4e <osMutexRelease>
}
7000dec4:	bf00      	nop
7000dec6:	3708      	adds	r7, #8
7000dec8:	46bd      	mov	sp, r7
7000deca:	bd80      	pop	{r7, pc}

7000decc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
7000decc:	b580      	push	{r7, lr}
7000dece:	b08e      	sub	sp, #56	@ 0x38
7000ded0:	af00      	add	r7, sp, #0
7000ded2:	60f8      	str	r0, [r7, #12]
7000ded4:	60b9      	str	r1, [r7, #8]
7000ded6:	607a      	str	r2, [r7, #4]
7000ded8:	603b      	str	r3, [r7, #0]
  const osThreadAttr_t attributes = {
7000deda:	f107 0314 	add.w	r3, r7, #20
7000dede:	2224      	movs	r2, #36	@ 0x24
7000dee0:	2100      	movs	r1, #0
7000dee2:	4618      	mov	r0, r3
7000dee4:	f005 ff79 	bl	70013dda <memset>
7000dee8:	68fb      	ldr	r3, [r7, #12]
7000deea:	617b      	str	r3, [r7, #20]
7000deec:	683b      	ldr	r3, [r7, #0]
7000deee:	62bb      	str	r3, [r7, #40]	@ 0x28
7000def0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
7000def2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
7000def4:	f107 0314 	add.w	r3, r7, #20
7000def8:	461a      	mov	r2, r3
7000defa:	6879      	ldr	r1, [r7, #4]
7000defc:	68b8      	ldr	r0, [r7, #8]
7000defe:	f7f7 fc7f 	bl	70005800 <osThreadNew>
7000df02:	4603      	mov	r3, r0
}
7000df04:	4618      	mov	r0, r3
7000df06:	3738      	adds	r7, #56	@ 0x38
7000df08:	46bd      	mov	sp, r7
7000df0a:	bd80      	pop	{r7, pc}

7000df0c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
7000df0c:	b580      	push	{r7, lr}
7000df0e:	af00      	add	r7, sp, #0
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
7000df10:	4b04      	ldr	r3, [pc, #16]	@ (7000df24 <sys_arch_protect+0x18>)
7000df12:	681b      	ldr	r3, [r3, #0]
7000df14:	f04f 31ff 	mov.w	r1, #4294967295
7000df18:	4618      	mov	r0, r3
7000df1a:	f7f7 fdce 	bl	70005aba <osMutexAcquire>

  return (sys_prot_t)1;
7000df1e:	2301      	movs	r3, #1
}
7000df20:	4618      	mov	r0, r3
7000df22:	bd80      	pop	{r7, pc}
7000df24:	24008474 	.word	0x24008474

7000df28 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
7000df28:	b580      	push	{r7, lr}
7000df2a:	b082      	sub	sp, #8
7000df2c:	af00      	add	r7, sp, #0
7000df2e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
7000df30:	4b04      	ldr	r3, [pc, #16]	@ (7000df44 <sys_arch_unprotect+0x1c>)
7000df32:	681b      	ldr	r3, [r3, #0]
7000df34:	4618      	mov	r0, r3
7000df36:	f7f7 fe0a 	bl	70005b4e <osMutexRelease>
}
7000df3a:	bf00      	nop
7000df3c:	3708      	adds	r7, #8
7000df3e:	46bd      	mov	sp, r7
7000df40:	bd80      	pop	{r7, pc}
7000df42:	bf00      	nop
7000df44:	24008474 	.word	0x24008474

7000df48 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
7000df48:	b580      	push	{r7, lr}
7000df4a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
7000df4c:	f005 fde0 	bl	70013b10 <rand>
7000df50:	4603      	mov	r3, r0
7000df52:	b29b      	uxth	r3, r3
7000df54:	f3c3 030d 	ubfx	r3, r3, #0, #14
7000df58:	b29b      	uxth	r3, r3
7000df5a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
7000df5e:	b29a      	uxth	r2, r3
7000df60:	4b01      	ldr	r3, [pc, #4]	@ (7000df68 <tcp_init+0x20>)
7000df62:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
7000df64:	bf00      	nop
7000df66:	bd80      	pop	{r7, pc}
7000df68:	24000028 	.word	0x24000028

7000df6c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
7000df6c:	b580      	push	{r7, lr}
7000df6e:	b082      	sub	sp, #8
7000df70:	af00      	add	r7, sp, #0
7000df72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
7000df74:	687b      	ldr	r3, [r7, #4]
7000df76:	7d1b      	ldrb	r3, [r3, #20]
7000df78:	2b01      	cmp	r3, #1
7000df7a:	d105      	bne.n	7000df88 <tcp_free+0x1c>
7000df7c:	4b06      	ldr	r3, [pc, #24]	@ (7000df98 <tcp_free+0x2c>)
7000df7e:	22d4      	movs	r2, #212	@ 0xd4
7000df80:	4906      	ldr	r1, [pc, #24]	@ (7000df9c <tcp_free+0x30>)
7000df82:	4807      	ldr	r0, [pc, #28]	@ (7000dfa0 <tcp_free+0x34>)
7000df84:	f005 fec4 	bl	70013d10 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
7000df88:	6879      	ldr	r1, [r7, #4]
7000df8a:	2001      	movs	r0, #1
7000df8c:	f7fe fe12 	bl	7000cbb4 <memp_free>
}
7000df90:	bf00      	nop
7000df92:	3708      	adds	r7, #8
7000df94:	46bd      	mov	sp, r7
7000df96:	bd80      	pop	{r7, pc}
7000df98:	70015c50 	.word	0x70015c50
7000df9c:	70015cac 	.word	0x70015cac
7000dfa0:	70015cc0 	.word	0x70015cc0

7000dfa4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
7000dfa4:	b580      	push	{r7, lr}
7000dfa6:	b082      	sub	sp, #8
7000dfa8:	af00      	add	r7, sp, #0
7000dfaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
7000dfac:	687b      	ldr	r3, [r7, #4]
7000dfae:	7d1b      	ldrb	r3, [r3, #20]
7000dfb0:	2b01      	cmp	r3, #1
7000dfb2:	d105      	bne.n	7000dfc0 <tcp_free_listen+0x1c>
7000dfb4:	4b06      	ldr	r3, [pc, #24]	@ (7000dfd0 <tcp_free_listen+0x2c>)
7000dfb6:	22df      	movs	r2, #223	@ 0xdf
7000dfb8:	4906      	ldr	r1, [pc, #24]	@ (7000dfd4 <tcp_free_listen+0x30>)
7000dfba:	4807      	ldr	r0, [pc, #28]	@ (7000dfd8 <tcp_free_listen+0x34>)
7000dfbc:	f005 fea8 	bl	70013d10 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
7000dfc0:	6879      	ldr	r1, [r7, #4]
7000dfc2:	2002      	movs	r0, #2
7000dfc4:	f7fe fdf6 	bl	7000cbb4 <memp_free>
}
7000dfc8:	bf00      	nop
7000dfca:	3708      	adds	r7, #8
7000dfcc:	46bd      	mov	sp, r7
7000dfce:	bd80      	pop	{r7, pc}
7000dfd0:	70015c50 	.word	0x70015c50
7000dfd4:	70015ce8 	.word	0x70015ce8
7000dfd8:	70015cc0 	.word	0x70015cc0

7000dfdc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
7000dfdc:	b580      	push	{r7, lr}
7000dfde:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
7000dfe0:	f000 fe82 	bl	7000ece8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
7000dfe4:	4b07      	ldr	r3, [pc, #28]	@ (7000e004 <tcp_tmr+0x28>)
7000dfe6:	781b      	ldrb	r3, [r3, #0]
7000dfe8:	3301      	adds	r3, #1
7000dfea:	b2da      	uxtb	r2, r3
7000dfec:	4b05      	ldr	r3, [pc, #20]	@ (7000e004 <tcp_tmr+0x28>)
7000dfee:	701a      	strb	r2, [r3, #0]
7000dff0:	4b04      	ldr	r3, [pc, #16]	@ (7000e004 <tcp_tmr+0x28>)
7000dff2:	781b      	ldrb	r3, [r3, #0]
7000dff4:	f003 0301 	and.w	r3, r3, #1
7000dff8:	2b00      	cmp	r3, #0
7000dffa:	d001      	beq.n	7000e000 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
7000dffc:	f000 fb32 	bl	7000e664 <tcp_slowtmr>
  }
}
7000e000:	bf00      	nop
7000e002:	bd80      	pop	{r7, pc}
7000e004:	2400848d 	.word	0x2400848d

7000e008 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
7000e008:	b580      	push	{r7, lr}
7000e00a:	b084      	sub	sp, #16
7000e00c:	af00      	add	r7, sp, #0
7000e00e:	6078      	str	r0, [r7, #4]
7000e010:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
7000e012:	683b      	ldr	r3, [r7, #0]
7000e014:	2b00      	cmp	r3, #0
7000e016:	d105      	bne.n	7000e024 <tcp_remove_listener+0x1c>
7000e018:	4b0d      	ldr	r3, [pc, #52]	@ (7000e050 <tcp_remove_listener+0x48>)
7000e01a:	22ff      	movs	r2, #255	@ 0xff
7000e01c:	490d      	ldr	r1, [pc, #52]	@ (7000e054 <tcp_remove_listener+0x4c>)
7000e01e:	480e      	ldr	r0, [pc, #56]	@ (7000e058 <tcp_remove_listener+0x50>)
7000e020:	f005 fe76 	bl	70013d10 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
7000e024:	687b      	ldr	r3, [r7, #4]
7000e026:	60fb      	str	r3, [r7, #12]
7000e028:	e00a      	b.n	7000e040 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
7000e02a:	68fb      	ldr	r3, [r7, #12]
7000e02c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
7000e02e:	683a      	ldr	r2, [r7, #0]
7000e030:	429a      	cmp	r2, r3
7000e032:	d102      	bne.n	7000e03a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
7000e034:	68fb      	ldr	r3, [r7, #12]
7000e036:	2200      	movs	r2, #0
7000e038:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
7000e03a:	68fb      	ldr	r3, [r7, #12]
7000e03c:	68db      	ldr	r3, [r3, #12]
7000e03e:	60fb      	str	r3, [r7, #12]
7000e040:	68fb      	ldr	r3, [r7, #12]
7000e042:	2b00      	cmp	r3, #0
7000e044:	d1f1      	bne.n	7000e02a <tcp_remove_listener+0x22>
    }
  }
}
7000e046:	bf00      	nop
7000e048:	bf00      	nop
7000e04a:	3710      	adds	r7, #16
7000e04c:	46bd      	mov	sp, r7
7000e04e:	bd80      	pop	{r7, pc}
7000e050:	70015c50 	.word	0x70015c50
7000e054:	70015d04 	.word	0x70015d04
7000e058:	70015cc0 	.word	0x70015cc0

7000e05c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
7000e05c:	b580      	push	{r7, lr}
7000e05e:	b084      	sub	sp, #16
7000e060:	af00      	add	r7, sp, #0
7000e062:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
7000e064:	687b      	ldr	r3, [r7, #4]
7000e066:	2b00      	cmp	r3, #0
7000e068:	d106      	bne.n	7000e078 <tcp_listen_closed+0x1c>
7000e06a:	4b14      	ldr	r3, [pc, #80]	@ (7000e0bc <tcp_listen_closed+0x60>)
7000e06c:	f240 1211 	movw	r2, #273	@ 0x111
7000e070:	4913      	ldr	r1, [pc, #76]	@ (7000e0c0 <tcp_listen_closed+0x64>)
7000e072:	4814      	ldr	r0, [pc, #80]	@ (7000e0c4 <tcp_listen_closed+0x68>)
7000e074:	f005 fe4c 	bl	70013d10 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
7000e078:	687b      	ldr	r3, [r7, #4]
7000e07a:	7d1b      	ldrb	r3, [r3, #20]
7000e07c:	2b01      	cmp	r3, #1
7000e07e:	d006      	beq.n	7000e08e <tcp_listen_closed+0x32>
7000e080:	4b0e      	ldr	r3, [pc, #56]	@ (7000e0bc <tcp_listen_closed+0x60>)
7000e082:	f44f 7289 	mov.w	r2, #274	@ 0x112
7000e086:	4910      	ldr	r1, [pc, #64]	@ (7000e0c8 <tcp_listen_closed+0x6c>)
7000e088:	480e      	ldr	r0, [pc, #56]	@ (7000e0c4 <tcp_listen_closed+0x68>)
7000e08a:	f005 fe41 	bl	70013d10 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
7000e08e:	2301      	movs	r3, #1
7000e090:	60fb      	str	r3, [r7, #12]
7000e092:	e00b      	b.n	7000e0ac <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
7000e094:	4a0d      	ldr	r2, [pc, #52]	@ (7000e0cc <tcp_listen_closed+0x70>)
7000e096:	68fb      	ldr	r3, [r7, #12]
7000e098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
7000e09c:	681b      	ldr	r3, [r3, #0]
7000e09e:	6879      	ldr	r1, [r7, #4]
7000e0a0:	4618      	mov	r0, r3
7000e0a2:	f7ff ffb1 	bl	7000e008 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
7000e0a6:	68fb      	ldr	r3, [r7, #12]
7000e0a8:	3301      	adds	r3, #1
7000e0aa:	60fb      	str	r3, [r7, #12]
7000e0ac:	68fb      	ldr	r3, [r7, #12]
7000e0ae:	2b03      	cmp	r3, #3
7000e0b0:	d9f0      	bls.n	7000e094 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
7000e0b2:	bf00      	nop
7000e0b4:	bf00      	nop
7000e0b6:	3710      	adds	r7, #16
7000e0b8:	46bd      	mov	sp, r7
7000e0ba:	bd80      	pop	{r7, pc}
7000e0bc:	70015c50 	.word	0x70015c50
7000e0c0:	70015d2c 	.word	0x70015d2c
7000e0c4:	70015cc0 	.word	0x70015cc0
7000e0c8:	70015d38 	.word	0x70015d38
7000e0cc:	70017348 	.word	0x70017348

7000e0d0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
7000e0d0:	b5b0      	push	{r4, r5, r7, lr}
7000e0d2:	b088      	sub	sp, #32
7000e0d4:	af04      	add	r7, sp, #16
7000e0d6:	6078      	str	r0, [r7, #4]
7000e0d8:	460b      	mov	r3, r1
7000e0da:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
7000e0dc:	687b      	ldr	r3, [r7, #4]
7000e0de:	2b00      	cmp	r3, #0
7000e0e0:	d106      	bne.n	7000e0f0 <tcp_close_shutdown+0x20>
7000e0e2:	4b63      	ldr	r3, [pc, #396]	@ (7000e270 <tcp_close_shutdown+0x1a0>)
7000e0e4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
7000e0e8:	4962      	ldr	r1, [pc, #392]	@ (7000e274 <tcp_close_shutdown+0x1a4>)
7000e0ea:	4863      	ldr	r0, [pc, #396]	@ (7000e278 <tcp_close_shutdown+0x1a8>)
7000e0ec:	f005 fe10 	bl	70013d10 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
7000e0f0:	78fb      	ldrb	r3, [r7, #3]
7000e0f2:	2b00      	cmp	r3, #0
7000e0f4:	d066      	beq.n	7000e1c4 <tcp_close_shutdown+0xf4>
7000e0f6:	687b      	ldr	r3, [r7, #4]
7000e0f8:	7d1b      	ldrb	r3, [r3, #20]
7000e0fa:	2b04      	cmp	r3, #4
7000e0fc:	d003      	beq.n	7000e106 <tcp_close_shutdown+0x36>
7000e0fe:	687b      	ldr	r3, [r7, #4]
7000e100:	7d1b      	ldrb	r3, [r3, #20]
7000e102:	2b07      	cmp	r3, #7
7000e104:	d15e      	bne.n	7000e1c4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
7000e106:	687b      	ldr	r3, [r7, #4]
7000e108:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000e10a:	2b00      	cmp	r3, #0
7000e10c:	d104      	bne.n	7000e118 <tcp_close_shutdown+0x48>
7000e10e:	687b      	ldr	r3, [r7, #4]
7000e110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
7000e112:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
7000e116:	d055      	beq.n	7000e1c4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
7000e118:	687b      	ldr	r3, [r7, #4]
7000e11a:	8b5b      	ldrh	r3, [r3, #26]
7000e11c:	f003 0310 	and.w	r3, r3, #16
7000e120:	2b00      	cmp	r3, #0
7000e122:	d106      	bne.n	7000e132 <tcp_close_shutdown+0x62>
7000e124:	4b52      	ldr	r3, [pc, #328]	@ (7000e270 <tcp_close_shutdown+0x1a0>)
7000e126:	f44f 72b2 	mov.w	r2, #356	@ 0x164
7000e12a:	4954      	ldr	r1, [pc, #336]	@ (7000e27c <tcp_close_shutdown+0x1ac>)
7000e12c:	4852      	ldr	r0, [pc, #328]	@ (7000e278 <tcp_close_shutdown+0x1a8>)
7000e12e:	f005 fdef 	bl	70013d10 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
7000e132:	687b      	ldr	r3, [r7, #4]
7000e134:	6d18      	ldr	r0, [r3, #80]	@ 0x50
7000e136:	687b      	ldr	r3, [r7, #4]
7000e138:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
7000e13a:	687d      	ldr	r5, [r7, #4]
7000e13c:	687b      	ldr	r3, [r7, #4]
7000e13e:	3304      	adds	r3, #4
7000e140:	687a      	ldr	r2, [r7, #4]
7000e142:	8ad2      	ldrh	r2, [r2, #22]
7000e144:	6879      	ldr	r1, [r7, #4]
7000e146:	8b09      	ldrh	r1, [r1, #24]
7000e148:	9102      	str	r1, [sp, #8]
7000e14a:	9201      	str	r2, [sp, #4]
7000e14c:	9300      	str	r3, [sp, #0]
7000e14e:	462b      	mov	r3, r5
7000e150:	4622      	mov	r2, r4
7000e152:	4601      	mov	r1, r0
7000e154:	6878      	ldr	r0, [r7, #4]
7000e156:	f004 fe43 	bl	70012de0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
7000e15a:	6878      	ldr	r0, [r7, #4]
7000e15c:	f001 f88a 	bl	7000f274 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
7000e160:	4b47      	ldr	r3, [pc, #284]	@ (7000e280 <tcp_close_shutdown+0x1b0>)
7000e162:	681b      	ldr	r3, [r3, #0]
7000e164:	687a      	ldr	r2, [r7, #4]
7000e166:	429a      	cmp	r2, r3
7000e168:	d105      	bne.n	7000e176 <tcp_close_shutdown+0xa6>
7000e16a:	4b45      	ldr	r3, [pc, #276]	@ (7000e280 <tcp_close_shutdown+0x1b0>)
7000e16c:	681b      	ldr	r3, [r3, #0]
7000e16e:	68db      	ldr	r3, [r3, #12]
7000e170:	4a43      	ldr	r2, [pc, #268]	@ (7000e280 <tcp_close_shutdown+0x1b0>)
7000e172:	6013      	str	r3, [r2, #0]
7000e174:	e013      	b.n	7000e19e <tcp_close_shutdown+0xce>
7000e176:	4b42      	ldr	r3, [pc, #264]	@ (7000e280 <tcp_close_shutdown+0x1b0>)
7000e178:	681b      	ldr	r3, [r3, #0]
7000e17a:	60fb      	str	r3, [r7, #12]
7000e17c:	e00c      	b.n	7000e198 <tcp_close_shutdown+0xc8>
7000e17e:	68fb      	ldr	r3, [r7, #12]
7000e180:	68db      	ldr	r3, [r3, #12]
7000e182:	687a      	ldr	r2, [r7, #4]
7000e184:	429a      	cmp	r2, r3
7000e186:	d104      	bne.n	7000e192 <tcp_close_shutdown+0xc2>
7000e188:	687b      	ldr	r3, [r7, #4]
7000e18a:	68da      	ldr	r2, [r3, #12]
7000e18c:	68fb      	ldr	r3, [r7, #12]
7000e18e:	60da      	str	r2, [r3, #12]
7000e190:	e005      	b.n	7000e19e <tcp_close_shutdown+0xce>
7000e192:	68fb      	ldr	r3, [r7, #12]
7000e194:	68db      	ldr	r3, [r3, #12]
7000e196:	60fb      	str	r3, [r7, #12]
7000e198:	68fb      	ldr	r3, [r7, #12]
7000e19a:	2b00      	cmp	r3, #0
7000e19c:	d1ef      	bne.n	7000e17e <tcp_close_shutdown+0xae>
7000e19e:	687b      	ldr	r3, [r7, #4]
7000e1a0:	2200      	movs	r2, #0
7000e1a2:	60da      	str	r2, [r3, #12]
7000e1a4:	4b37      	ldr	r3, [pc, #220]	@ (7000e284 <tcp_close_shutdown+0x1b4>)
7000e1a6:	2201      	movs	r2, #1
7000e1a8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
7000e1aa:	4b37      	ldr	r3, [pc, #220]	@ (7000e288 <tcp_close_shutdown+0x1b8>)
7000e1ac:	681b      	ldr	r3, [r3, #0]
7000e1ae:	687a      	ldr	r2, [r7, #4]
7000e1b0:	429a      	cmp	r2, r3
7000e1b2:	d102      	bne.n	7000e1ba <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
7000e1b4:	f003 fd10 	bl	70011bd8 <tcp_trigger_input_pcb_close>
7000e1b8:	e002      	b.n	7000e1c0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
7000e1ba:	6878      	ldr	r0, [r7, #4]
7000e1bc:	f7ff fed6 	bl	7000df6c <tcp_free>
      }
      return ERR_OK;
7000e1c0:	2300      	movs	r3, #0
7000e1c2:	e050      	b.n	7000e266 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
7000e1c4:	687b      	ldr	r3, [r7, #4]
7000e1c6:	7d1b      	ldrb	r3, [r3, #20]
7000e1c8:	2b02      	cmp	r3, #2
7000e1ca:	d03b      	beq.n	7000e244 <tcp_close_shutdown+0x174>
7000e1cc:	2b02      	cmp	r3, #2
7000e1ce:	dc44      	bgt.n	7000e25a <tcp_close_shutdown+0x18a>
7000e1d0:	2b00      	cmp	r3, #0
7000e1d2:	d002      	beq.n	7000e1da <tcp_close_shutdown+0x10a>
7000e1d4:	2b01      	cmp	r3, #1
7000e1d6:	d02a      	beq.n	7000e22e <tcp_close_shutdown+0x15e>
7000e1d8:	e03f      	b.n	7000e25a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
7000e1da:	687b      	ldr	r3, [r7, #4]
7000e1dc:	8adb      	ldrh	r3, [r3, #22]
7000e1de:	2b00      	cmp	r3, #0
7000e1e0:	d021      	beq.n	7000e226 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
7000e1e2:	4b2a      	ldr	r3, [pc, #168]	@ (7000e28c <tcp_close_shutdown+0x1bc>)
7000e1e4:	681b      	ldr	r3, [r3, #0]
7000e1e6:	687a      	ldr	r2, [r7, #4]
7000e1e8:	429a      	cmp	r2, r3
7000e1ea:	d105      	bne.n	7000e1f8 <tcp_close_shutdown+0x128>
7000e1ec:	4b27      	ldr	r3, [pc, #156]	@ (7000e28c <tcp_close_shutdown+0x1bc>)
7000e1ee:	681b      	ldr	r3, [r3, #0]
7000e1f0:	68db      	ldr	r3, [r3, #12]
7000e1f2:	4a26      	ldr	r2, [pc, #152]	@ (7000e28c <tcp_close_shutdown+0x1bc>)
7000e1f4:	6013      	str	r3, [r2, #0]
7000e1f6:	e013      	b.n	7000e220 <tcp_close_shutdown+0x150>
7000e1f8:	4b24      	ldr	r3, [pc, #144]	@ (7000e28c <tcp_close_shutdown+0x1bc>)
7000e1fa:	681b      	ldr	r3, [r3, #0]
7000e1fc:	60bb      	str	r3, [r7, #8]
7000e1fe:	e00c      	b.n	7000e21a <tcp_close_shutdown+0x14a>
7000e200:	68bb      	ldr	r3, [r7, #8]
7000e202:	68db      	ldr	r3, [r3, #12]
7000e204:	687a      	ldr	r2, [r7, #4]
7000e206:	429a      	cmp	r2, r3
7000e208:	d104      	bne.n	7000e214 <tcp_close_shutdown+0x144>
7000e20a:	687b      	ldr	r3, [r7, #4]
7000e20c:	68da      	ldr	r2, [r3, #12]
7000e20e:	68bb      	ldr	r3, [r7, #8]
7000e210:	60da      	str	r2, [r3, #12]
7000e212:	e005      	b.n	7000e220 <tcp_close_shutdown+0x150>
7000e214:	68bb      	ldr	r3, [r7, #8]
7000e216:	68db      	ldr	r3, [r3, #12]
7000e218:	60bb      	str	r3, [r7, #8]
7000e21a:	68bb      	ldr	r3, [r7, #8]
7000e21c:	2b00      	cmp	r3, #0
7000e21e:	d1ef      	bne.n	7000e200 <tcp_close_shutdown+0x130>
7000e220:	687b      	ldr	r3, [r7, #4]
7000e222:	2200      	movs	r2, #0
7000e224:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
7000e226:	6878      	ldr	r0, [r7, #4]
7000e228:	f7ff fea0 	bl	7000df6c <tcp_free>
      break;
7000e22c:	e01a      	b.n	7000e264 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
7000e22e:	6878      	ldr	r0, [r7, #4]
7000e230:	f7ff ff14 	bl	7000e05c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
7000e234:	6879      	ldr	r1, [r7, #4]
7000e236:	4816      	ldr	r0, [pc, #88]	@ (7000e290 <tcp_close_shutdown+0x1c0>)
7000e238:	f001 f85e 	bl	7000f2f8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
7000e23c:	6878      	ldr	r0, [r7, #4]
7000e23e:	f7ff feb1 	bl	7000dfa4 <tcp_free_listen>
      break;
7000e242:	e00f      	b.n	7000e264 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
7000e244:	6879      	ldr	r1, [r7, #4]
7000e246:	480e      	ldr	r0, [pc, #56]	@ (7000e280 <tcp_close_shutdown+0x1b0>)
7000e248:	f001 f856 	bl	7000f2f8 <tcp_pcb_remove>
7000e24c:	4b0d      	ldr	r3, [pc, #52]	@ (7000e284 <tcp_close_shutdown+0x1b4>)
7000e24e:	2201      	movs	r2, #1
7000e250:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
7000e252:	6878      	ldr	r0, [r7, #4]
7000e254:	f7ff fe8a 	bl	7000df6c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
7000e258:	e004      	b.n	7000e264 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
7000e25a:	6878      	ldr	r0, [r7, #4]
7000e25c:	f000 f81a 	bl	7000e294 <tcp_close_shutdown_fin>
7000e260:	4603      	mov	r3, r0
7000e262:	e000      	b.n	7000e266 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
7000e264:	2300      	movs	r3, #0
}
7000e266:	4618      	mov	r0, r3
7000e268:	3710      	adds	r7, #16
7000e26a:	46bd      	mov	sp, r7
7000e26c:	bdb0      	pop	{r4, r5, r7, pc}
7000e26e:	bf00      	nop
7000e270:	70015c50 	.word	0x70015c50
7000e274:	70015d50 	.word	0x70015d50
7000e278:	70015cc0 	.word	0x70015cc0
7000e27c:	70015d70 	.word	0x70015d70
7000e280:	24008484 	.word	0x24008484
7000e284:	2400848c 	.word	0x2400848c
7000e288:	240084c4 	.word	0x240084c4
7000e28c:	2400847c 	.word	0x2400847c
7000e290:	24008480 	.word	0x24008480

7000e294 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
7000e294:	b580      	push	{r7, lr}
7000e296:	b084      	sub	sp, #16
7000e298:	af00      	add	r7, sp, #0
7000e29a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
7000e29c:	687b      	ldr	r3, [r7, #4]
7000e29e:	2b00      	cmp	r3, #0
7000e2a0:	d106      	bne.n	7000e2b0 <tcp_close_shutdown_fin+0x1c>
7000e2a2:	4b2e      	ldr	r3, [pc, #184]	@ (7000e35c <tcp_close_shutdown_fin+0xc8>)
7000e2a4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
7000e2a8:	492d      	ldr	r1, [pc, #180]	@ (7000e360 <tcp_close_shutdown_fin+0xcc>)
7000e2aa:	482e      	ldr	r0, [pc, #184]	@ (7000e364 <tcp_close_shutdown_fin+0xd0>)
7000e2ac:	f005 fd30 	bl	70013d10 <iprintf>

  switch (pcb->state) {
7000e2b0:	687b      	ldr	r3, [r7, #4]
7000e2b2:	7d1b      	ldrb	r3, [r3, #20]
7000e2b4:	2b07      	cmp	r3, #7
7000e2b6:	d020      	beq.n	7000e2fa <tcp_close_shutdown_fin+0x66>
7000e2b8:	2b07      	cmp	r3, #7
7000e2ba:	dc2b      	bgt.n	7000e314 <tcp_close_shutdown_fin+0x80>
7000e2bc:	2b03      	cmp	r3, #3
7000e2be:	d002      	beq.n	7000e2c6 <tcp_close_shutdown_fin+0x32>
7000e2c0:	2b04      	cmp	r3, #4
7000e2c2:	d00d      	beq.n	7000e2e0 <tcp_close_shutdown_fin+0x4c>
7000e2c4:	e026      	b.n	7000e314 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
7000e2c6:	6878      	ldr	r0, [r7, #4]
7000e2c8:	f003 fe98 	bl	70011ffc <tcp_send_fin>
7000e2cc:	4603      	mov	r3, r0
7000e2ce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
7000e2d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
7000e2d4:	2b00      	cmp	r3, #0
7000e2d6:	d11f      	bne.n	7000e318 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
7000e2d8:	687b      	ldr	r3, [r7, #4]
7000e2da:	2205      	movs	r2, #5
7000e2dc:	751a      	strb	r2, [r3, #20]
      }
      break;
7000e2de:	e01b      	b.n	7000e318 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
7000e2e0:	6878      	ldr	r0, [r7, #4]
7000e2e2:	f003 fe8b 	bl	70011ffc <tcp_send_fin>
7000e2e6:	4603      	mov	r3, r0
7000e2e8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
7000e2ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
7000e2ee:	2b00      	cmp	r3, #0
7000e2f0:	d114      	bne.n	7000e31c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
7000e2f2:	687b      	ldr	r3, [r7, #4]
7000e2f4:	2205      	movs	r2, #5
7000e2f6:	751a      	strb	r2, [r3, #20]
      }
      break;
7000e2f8:	e010      	b.n	7000e31c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
7000e2fa:	6878      	ldr	r0, [r7, #4]
7000e2fc:	f003 fe7e 	bl	70011ffc <tcp_send_fin>
7000e300:	4603      	mov	r3, r0
7000e302:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
7000e304:	f997 300f 	ldrsb.w	r3, [r7, #15]
7000e308:	2b00      	cmp	r3, #0
7000e30a:	d109      	bne.n	7000e320 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
7000e30c:	687b      	ldr	r3, [r7, #4]
7000e30e:	2209      	movs	r2, #9
7000e310:	751a      	strb	r2, [r3, #20]
      }
      break;
7000e312:	e005      	b.n	7000e320 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
7000e314:	2300      	movs	r3, #0
7000e316:	e01c      	b.n	7000e352 <tcp_close_shutdown_fin+0xbe>
      break;
7000e318:	bf00      	nop
7000e31a:	e002      	b.n	7000e322 <tcp_close_shutdown_fin+0x8e>
      break;
7000e31c:	bf00      	nop
7000e31e:	e000      	b.n	7000e322 <tcp_close_shutdown_fin+0x8e>
      break;
7000e320:	bf00      	nop
  }

  if (err == ERR_OK) {
7000e322:	f997 300f 	ldrsb.w	r3, [r7, #15]
7000e326:	2b00      	cmp	r3, #0
7000e328:	d103      	bne.n	7000e332 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
7000e32a:	6878      	ldr	r0, [r7, #4]
7000e32c:	f003 ffa4 	bl	70012278 <tcp_output>
7000e330:	e00d      	b.n	7000e34e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
7000e332:	f997 300f 	ldrsb.w	r3, [r7, #15]
7000e336:	f1b3 3fff 	cmp.w	r3, #4294967295
7000e33a:	d108      	bne.n	7000e34e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
7000e33c:	687b      	ldr	r3, [r7, #4]
7000e33e:	8b5b      	ldrh	r3, [r3, #26]
7000e340:	f043 0308 	orr.w	r3, r3, #8
7000e344:	b29a      	uxth	r2, r3
7000e346:	687b      	ldr	r3, [r7, #4]
7000e348:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
7000e34a:	2300      	movs	r3, #0
7000e34c:	e001      	b.n	7000e352 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
7000e34e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
7000e352:	4618      	mov	r0, r3
7000e354:	3710      	adds	r7, #16
7000e356:	46bd      	mov	sp, r7
7000e358:	bd80      	pop	{r7, pc}
7000e35a:	bf00      	nop
7000e35c:	70015c50 	.word	0x70015c50
7000e360:	70015d2c 	.word	0x70015d2c
7000e364:	70015cc0 	.word	0x70015cc0

7000e368 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
7000e368:	b580      	push	{r7, lr}
7000e36a:	b082      	sub	sp, #8
7000e36c:	af00      	add	r7, sp, #0
7000e36e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
7000e370:	687b      	ldr	r3, [r7, #4]
7000e372:	2b00      	cmp	r3, #0
7000e374:	d102      	bne.n	7000e37c <tcp_close+0x14>
7000e376:	f06f 030f 	mvn.w	r3, #15
7000e37a:	e00f      	b.n	7000e39c <tcp_close+0x34>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
7000e37c:	687b      	ldr	r3, [r7, #4]
7000e37e:	7d1b      	ldrb	r3, [r3, #20]
7000e380:	2b01      	cmp	r3, #1
7000e382:	d006      	beq.n	7000e392 <tcp_close+0x2a>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
7000e384:	687b      	ldr	r3, [r7, #4]
7000e386:	8b5b      	ldrh	r3, [r3, #26]
7000e388:	f043 0310 	orr.w	r3, r3, #16
7000e38c:	b29a      	uxth	r2, r3
7000e38e:	687b      	ldr	r3, [r7, #4]
7000e390:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
7000e392:	2101      	movs	r1, #1
7000e394:	6878      	ldr	r0, [r7, #4]
7000e396:	f7ff fe9b 	bl	7000e0d0 <tcp_close_shutdown>
7000e39a:	4603      	mov	r3, r0
}
7000e39c:	4618      	mov	r0, r3
7000e39e:	3708      	adds	r7, #8
7000e3a0:	46bd      	mov	sp, r7
7000e3a2:	bd80      	pop	{r7, pc}

7000e3a4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
7000e3a4:	b580      	push	{r7, lr}
7000e3a6:	b08e      	sub	sp, #56	@ 0x38
7000e3a8:	af04      	add	r7, sp, #16
7000e3aa:	6078      	str	r0, [r7, #4]
7000e3ac:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
7000e3ae:	687b      	ldr	r3, [r7, #4]
7000e3b0:	2b00      	cmp	r3, #0
7000e3b2:	f000 809a 	beq.w	7000e4ea <tcp_abandon+0x146>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
7000e3b6:	687b      	ldr	r3, [r7, #4]
7000e3b8:	7d1b      	ldrb	r3, [r3, #20]
7000e3ba:	2b01      	cmp	r3, #1
7000e3bc:	d106      	bne.n	7000e3cc <tcp_abandon+0x28>
7000e3be:	4b4c      	ldr	r3, [pc, #304]	@ (7000e4f0 <tcp_abandon+0x14c>)
7000e3c0:	f44f 7210 	mov.w	r2, #576	@ 0x240
7000e3c4:	494b      	ldr	r1, [pc, #300]	@ (7000e4f4 <tcp_abandon+0x150>)
7000e3c6:	484c      	ldr	r0, [pc, #304]	@ (7000e4f8 <tcp_abandon+0x154>)
7000e3c8:	f005 fca2 	bl	70013d10 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
7000e3cc:	687b      	ldr	r3, [r7, #4]
7000e3ce:	7d1b      	ldrb	r3, [r3, #20]
7000e3d0:	2b0a      	cmp	r3, #10
7000e3d2:	d107      	bne.n	7000e3e4 <tcp_abandon+0x40>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
7000e3d4:	6879      	ldr	r1, [r7, #4]
7000e3d6:	4849      	ldr	r0, [pc, #292]	@ (7000e4fc <tcp_abandon+0x158>)
7000e3d8:	f000 ff8e 	bl	7000f2f8 <tcp_pcb_remove>
    tcp_free(pcb);
7000e3dc:	6878      	ldr	r0, [r7, #4]
7000e3de:	f7ff fdc5 	bl	7000df6c <tcp_free>
7000e3e2:	e082      	b.n	7000e4ea <tcp_abandon+0x146>
  } else {
    int send_rst = 0;
7000e3e4:	2300      	movs	r3, #0
7000e3e6:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
7000e3e8:	2300      	movs	r3, #0
7000e3ea:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
7000e3ec:	687b      	ldr	r3, [r7, #4]
7000e3ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
7000e3f0:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
7000e3f2:	687b      	ldr	r3, [r7, #4]
7000e3f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
7000e3f6:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
7000e3f8:	687b      	ldr	r3, [r7, #4]
7000e3fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
7000e3fe:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
7000e400:	687b      	ldr	r3, [r7, #4]
7000e402:	691b      	ldr	r3, [r3, #16]
7000e404:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
7000e406:	687b      	ldr	r3, [r7, #4]
7000e408:	7d1b      	ldrb	r3, [r3, #20]
7000e40a:	2b00      	cmp	r3, #0
7000e40c:	d126      	bne.n	7000e45c <tcp_abandon+0xb8>
      if (pcb->local_port != 0) {
7000e40e:	687b      	ldr	r3, [r7, #4]
7000e410:	8adb      	ldrh	r3, [r3, #22]
7000e412:	2b00      	cmp	r3, #0
7000e414:	d02e      	beq.n	7000e474 <tcp_abandon+0xd0>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
7000e416:	4b3a      	ldr	r3, [pc, #232]	@ (7000e500 <tcp_abandon+0x15c>)
7000e418:	681b      	ldr	r3, [r3, #0]
7000e41a:	687a      	ldr	r2, [r7, #4]
7000e41c:	429a      	cmp	r2, r3
7000e41e:	d105      	bne.n	7000e42c <tcp_abandon+0x88>
7000e420:	4b37      	ldr	r3, [pc, #220]	@ (7000e500 <tcp_abandon+0x15c>)
7000e422:	681b      	ldr	r3, [r3, #0]
7000e424:	68db      	ldr	r3, [r3, #12]
7000e426:	4a36      	ldr	r2, [pc, #216]	@ (7000e500 <tcp_abandon+0x15c>)
7000e428:	6013      	str	r3, [r2, #0]
7000e42a:	e013      	b.n	7000e454 <tcp_abandon+0xb0>
7000e42c:	4b34      	ldr	r3, [pc, #208]	@ (7000e500 <tcp_abandon+0x15c>)
7000e42e:	681b      	ldr	r3, [r3, #0]
7000e430:	61fb      	str	r3, [r7, #28]
7000e432:	e00c      	b.n	7000e44e <tcp_abandon+0xaa>
7000e434:	69fb      	ldr	r3, [r7, #28]
7000e436:	68db      	ldr	r3, [r3, #12]
7000e438:	687a      	ldr	r2, [r7, #4]
7000e43a:	429a      	cmp	r2, r3
7000e43c:	d104      	bne.n	7000e448 <tcp_abandon+0xa4>
7000e43e:	687b      	ldr	r3, [r7, #4]
7000e440:	68da      	ldr	r2, [r3, #12]
7000e442:	69fb      	ldr	r3, [r7, #28]
7000e444:	60da      	str	r2, [r3, #12]
7000e446:	e005      	b.n	7000e454 <tcp_abandon+0xb0>
7000e448:	69fb      	ldr	r3, [r7, #28]
7000e44a:	68db      	ldr	r3, [r3, #12]
7000e44c:	61fb      	str	r3, [r7, #28]
7000e44e:	69fb      	ldr	r3, [r7, #28]
7000e450:	2b00      	cmp	r3, #0
7000e452:	d1ef      	bne.n	7000e434 <tcp_abandon+0x90>
7000e454:	687b      	ldr	r3, [r7, #4]
7000e456:	2200      	movs	r2, #0
7000e458:	60da      	str	r2, [r3, #12]
7000e45a:	e00b      	b.n	7000e474 <tcp_abandon+0xd0>
      }
    } else {
      send_rst = reset;
7000e45c:	683b      	ldr	r3, [r7, #0]
7000e45e:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
7000e460:	687b      	ldr	r3, [r7, #4]
7000e462:	8adb      	ldrh	r3, [r3, #22]
7000e464:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
7000e466:	6879      	ldr	r1, [r7, #4]
7000e468:	4826      	ldr	r0, [pc, #152]	@ (7000e504 <tcp_abandon+0x160>)
7000e46a:	f000 ff45 	bl	7000f2f8 <tcp_pcb_remove>
7000e46e:	4b26      	ldr	r3, [pc, #152]	@ (7000e508 <tcp_abandon+0x164>)
7000e470:	2201      	movs	r2, #1
7000e472:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
7000e474:	687b      	ldr	r3, [r7, #4]
7000e476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000e478:	2b00      	cmp	r3, #0
7000e47a:	d004      	beq.n	7000e486 <tcp_abandon+0xe2>
      tcp_segs_free(pcb->unacked);
7000e47c:	687b      	ldr	r3, [r7, #4]
7000e47e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000e480:	4618      	mov	r0, r3
7000e482:	f000 fd04 	bl	7000ee8e <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
7000e486:	687b      	ldr	r3, [r7, #4]
7000e488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7000e48a:	2b00      	cmp	r3, #0
7000e48c:	d004      	beq.n	7000e498 <tcp_abandon+0xf4>
      tcp_segs_free(pcb->unsent);
7000e48e:	687b      	ldr	r3, [r7, #4]
7000e490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7000e492:	4618      	mov	r0, r3
7000e494:	f000 fcfb 	bl	7000ee8e <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
7000e498:	687b      	ldr	r3, [r7, #4]
7000e49a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000e49c:	2b00      	cmp	r3, #0
7000e49e:	d004      	beq.n	7000e4aa <tcp_abandon+0x106>
      tcp_segs_free(pcb->ooseq);
7000e4a0:	687b      	ldr	r3, [r7, #4]
7000e4a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000e4a4:	4618      	mov	r0, r3
7000e4a6:	f000 fcf2 	bl	7000ee8e <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
7000e4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000e4ac:	2b00      	cmp	r3, #0
7000e4ae:	d00e      	beq.n	7000e4ce <tcp_abandon+0x12a>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
7000e4b0:	6879      	ldr	r1, [r7, #4]
7000e4b2:	687b      	ldr	r3, [r7, #4]
7000e4b4:	3304      	adds	r3, #4
7000e4b6:	687a      	ldr	r2, [r7, #4]
7000e4b8:	8b12      	ldrh	r2, [r2, #24]
7000e4ba:	9202      	str	r2, [sp, #8]
7000e4bc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
7000e4be:	9201      	str	r2, [sp, #4]
7000e4c0:	9300      	str	r3, [sp, #0]
7000e4c2:	460b      	mov	r3, r1
7000e4c4:	697a      	ldr	r2, [r7, #20]
7000e4c6:	69b9      	ldr	r1, [r7, #24]
7000e4c8:	6878      	ldr	r0, [r7, #4]
7000e4ca:	f004 fc89 	bl	70012de0 <tcp_rst>
    }
    last_state = pcb->state;
7000e4ce:	687b      	ldr	r3, [r7, #4]
7000e4d0:	7d1b      	ldrb	r3, [r3, #20]
7000e4d2:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
7000e4d4:	6878      	ldr	r0, [r7, #4]
7000e4d6:	f7ff fd49 	bl	7000df6c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
7000e4da:	693b      	ldr	r3, [r7, #16]
7000e4dc:	2b00      	cmp	r3, #0
7000e4de:	d004      	beq.n	7000e4ea <tcp_abandon+0x146>
7000e4e0:	693b      	ldr	r3, [r7, #16]
7000e4e2:	f06f 010c 	mvn.w	r1, #12
7000e4e6:	68f8      	ldr	r0, [r7, #12]
7000e4e8:	4798      	blx	r3
  }
}
7000e4ea:	3728      	adds	r7, #40	@ 0x28
7000e4ec:	46bd      	mov	sp, r7
7000e4ee:	bd80      	pop	{r7, pc}
7000e4f0:	70015c50 	.word	0x70015c50
7000e4f4:	70015d8c 	.word	0x70015d8c
7000e4f8:	70015cc0 	.word	0x70015cc0
7000e4fc:	24008488 	.word	0x24008488
7000e500:	2400847c 	.word	0x2400847c
7000e504:	24008484 	.word	0x24008484
7000e508:	2400848c 	.word	0x2400848c

7000e50c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
7000e50c:	b580      	push	{r7, lr}
7000e50e:	b082      	sub	sp, #8
7000e510:	af00      	add	r7, sp, #0
7000e512:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
7000e514:	2101      	movs	r1, #1
7000e516:	6878      	ldr	r0, [r7, #4]
7000e518:	f7ff ff44 	bl	7000e3a4 <tcp_abandon>
}
7000e51c:	bf00      	nop
7000e51e:	3708      	adds	r7, #8
7000e520:	46bd      	mov	sp, r7
7000e522:	bd80      	pop	{r7, pc}

7000e524 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
7000e524:	b580      	push	{r7, lr}
7000e526:	b084      	sub	sp, #16
7000e528:	af00      	add	r7, sp, #0
7000e52a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
7000e52c:	687b      	ldr	r3, [r7, #4]
7000e52e:	2b00      	cmp	r3, #0
7000e530:	d106      	bne.n	7000e540 <tcp_update_rcv_ann_wnd+0x1c>
7000e532:	4b25      	ldr	r3, [pc, #148]	@ (7000e5c8 <tcp_update_rcv_ann_wnd+0xa4>)
7000e534:	f240 32a7 	movw	r2, #935	@ 0x3a7
7000e538:	4924      	ldr	r1, [pc, #144]	@ (7000e5cc <tcp_update_rcv_ann_wnd+0xa8>)
7000e53a:	4825      	ldr	r0, [pc, #148]	@ (7000e5d0 <tcp_update_rcv_ann_wnd+0xac>)
7000e53c:	f005 fbe8 	bl	70013d10 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
7000e540:	687b      	ldr	r3, [r7, #4]
7000e542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
7000e544:	687a      	ldr	r2, [r7, #4]
7000e546:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
7000e548:	4413      	add	r3, r2
7000e54a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
7000e54c:	687b      	ldr	r3, [r7, #4]
7000e54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000e550:	687a      	ldr	r2, [r7, #4]
7000e552:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
7000e554:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
7000e558:	bf28      	it	cs
7000e55a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
7000e55e:	b292      	uxth	r2, r2
7000e560:	4413      	add	r3, r2
7000e562:	68fa      	ldr	r2, [r7, #12]
7000e564:	1ad3      	subs	r3, r2, r3
7000e566:	2b00      	cmp	r3, #0
7000e568:	db08      	blt.n	7000e57c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
7000e56a:	687b      	ldr	r3, [r7, #4]
7000e56c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
7000e56e:	687b      	ldr	r3, [r7, #4]
7000e570:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
7000e572:	687b      	ldr	r3, [r7, #4]
7000e574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000e576:	68fa      	ldr	r2, [r7, #12]
7000e578:	1ad3      	subs	r3, r2, r3
7000e57a:	e020      	b.n	7000e5be <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
7000e57c:	687b      	ldr	r3, [r7, #4]
7000e57e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
7000e580:	687b      	ldr	r3, [r7, #4]
7000e582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000e584:	1ad3      	subs	r3, r2, r3
7000e586:	2b00      	cmp	r3, #0
7000e588:	dd03      	ble.n	7000e592 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
7000e58a:	687b      	ldr	r3, [r7, #4]
7000e58c:	2200      	movs	r2, #0
7000e58e:	855a      	strh	r2, [r3, #42]	@ 0x2a
7000e590:	e014      	b.n	7000e5bc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
7000e592:	687b      	ldr	r3, [r7, #4]
7000e594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000e596:	687b      	ldr	r3, [r7, #4]
7000e598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
7000e59a:	1ad3      	subs	r3, r2, r3
7000e59c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
7000e59e:	68bb      	ldr	r3, [r7, #8]
7000e5a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
7000e5a4:	d306      	bcc.n	7000e5b4 <tcp_update_rcv_ann_wnd+0x90>
7000e5a6:	4b08      	ldr	r3, [pc, #32]	@ (7000e5c8 <tcp_update_rcv_ann_wnd+0xa4>)
7000e5a8:	f240 32b7 	movw	r2, #951	@ 0x3b7
7000e5ac:	4909      	ldr	r1, [pc, #36]	@ (7000e5d4 <tcp_update_rcv_ann_wnd+0xb0>)
7000e5ae:	4808      	ldr	r0, [pc, #32]	@ (7000e5d0 <tcp_update_rcv_ann_wnd+0xac>)
7000e5b0:	f005 fbae 	bl	70013d10 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
7000e5b4:	68bb      	ldr	r3, [r7, #8]
7000e5b6:	b29a      	uxth	r2, r3
7000e5b8:	687b      	ldr	r3, [r7, #4]
7000e5ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
7000e5bc:	2300      	movs	r3, #0
  }
}
7000e5be:	4618      	mov	r0, r3
7000e5c0:	3710      	adds	r7, #16
7000e5c2:	46bd      	mov	sp, r7
7000e5c4:	bd80      	pop	{r7, pc}
7000e5c6:	bf00      	nop
7000e5c8:	70015c50 	.word	0x70015c50
7000e5cc:	70015de0 	.word	0x70015de0
7000e5d0:	70015cc0 	.word	0x70015cc0
7000e5d4:	70015e04 	.word	0x70015e04

7000e5d8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
7000e5d8:	b580      	push	{r7, lr}
7000e5da:	b084      	sub	sp, #16
7000e5dc:	af00      	add	r7, sp, #0
7000e5de:	6078      	str	r0, [r7, #4]
7000e5e0:	460b      	mov	r3, r1
7000e5e2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
7000e5e4:	687b      	ldr	r3, [r7, #4]
7000e5e6:	2b00      	cmp	r3, #0
7000e5e8:	d032      	beq.n	7000e650 <tcp_recved+0x78>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
7000e5ea:	687b      	ldr	r3, [r7, #4]
7000e5ec:	7d1b      	ldrb	r3, [r3, #20]
7000e5ee:	2b01      	cmp	r3, #1
7000e5f0:	d106      	bne.n	7000e600 <tcp_recved+0x28>
7000e5f2:	4b19      	ldr	r3, [pc, #100]	@ (7000e658 <tcp_recved+0x80>)
7000e5f4:	f240 32d3 	movw	r2, #979	@ 0x3d3
7000e5f8:	4918      	ldr	r1, [pc, #96]	@ (7000e65c <tcp_recved+0x84>)
7000e5fa:	4819      	ldr	r0, [pc, #100]	@ (7000e660 <tcp_recved+0x88>)
7000e5fc:	f005 fb88 	bl	70013d10 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
7000e600:	687b      	ldr	r3, [r7, #4]
7000e602:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
7000e604:	887b      	ldrh	r3, [r7, #2]
7000e606:	4413      	add	r3, r2
7000e608:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
7000e60a:	89fb      	ldrh	r3, [r7, #14]
7000e60c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
7000e610:	d804      	bhi.n	7000e61c <tcp_recved+0x44>
7000e612:	687b      	ldr	r3, [r7, #4]
7000e614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
7000e616:	89fa      	ldrh	r2, [r7, #14]
7000e618:	429a      	cmp	r2, r3
7000e61a:	d204      	bcs.n	7000e626 <tcp_recved+0x4e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
7000e61c:	687b      	ldr	r3, [r7, #4]
7000e61e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
7000e622:	851a      	strh	r2, [r3, #40]	@ 0x28
7000e624:	e002      	b.n	7000e62c <tcp_recved+0x54>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
7000e626:	687b      	ldr	r3, [r7, #4]
7000e628:	89fa      	ldrh	r2, [r7, #14]
7000e62a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
7000e62c:	6878      	ldr	r0, [r7, #4]
7000e62e:	f7ff ff79 	bl	7000e524 <tcp_update_rcv_ann_wnd>
7000e632:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
7000e634:	68bb      	ldr	r3, [r7, #8]
7000e636:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
7000e63a:	d309      	bcc.n	7000e650 <tcp_recved+0x78>
    tcp_ack_now(pcb);
7000e63c:	687b      	ldr	r3, [r7, #4]
7000e63e:	8b5b      	ldrh	r3, [r3, #26]
7000e640:	f043 0302 	orr.w	r3, r3, #2
7000e644:	b29a      	uxth	r2, r3
7000e646:	687b      	ldr	r3, [r7, #4]
7000e648:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
7000e64a:	6878      	ldr	r0, [r7, #4]
7000e64c:	f003 fe14 	bl	70012278 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
7000e650:	3710      	adds	r7, #16
7000e652:	46bd      	mov	sp, r7
7000e654:	bd80      	pop	{r7, pc}
7000e656:	bf00      	nop
7000e658:	70015c50 	.word	0x70015c50
7000e65c:	70015e20 	.word	0x70015e20
7000e660:	70015cc0 	.word	0x70015cc0

7000e664 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
7000e664:	b5b0      	push	{r4, r5, r7, lr}
7000e666:	b090      	sub	sp, #64	@ 0x40
7000e668:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
7000e66a:	2300      	movs	r3, #0
7000e66c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
7000e670:	4b95      	ldr	r3, [pc, #596]	@ (7000e8c8 <tcp_slowtmr+0x264>)
7000e672:	681b      	ldr	r3, [r3, #0]
7000e674:	3301      	adds	r3, #1
7000e676:	4a94      	ldr	r2, [pc, #592]	@ (7000e8c8 <tcp_slowtmr+0x264>)
7000e678:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
7000e67a:	4b94      	ldr	r3, [pc, #592]	@ (7000e8cc <tcp_slowtmr+0x268>)
7000e67c:	781b      	ldrb	r3, [r3, #0]
7000e67e:	3301      	adds	r3, #1
7000e680:	b2da      	uxtb	r2, r3
7000e682:	4b92      	ldr	r3, [pc, #584]	@ (7000e8cc <tcp_slowtmr+0x268>)
7000e684:	701a      	strb	r2, [r3, #0]
7000e686:	e000      	b.n	7000e68a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
7000e688:	bf00      	nop
  prev = NULL;
7000e68a:	2300      	movs	r3, #0
7000e68c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
7000e68e:	4b90      	ldr	r3, [pc, #576]	@ (7000e8d0 <tcp_slowtmr+0x26c>)
7000e690:	681b      	ldr	r3, [r3, #0]
7000e692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
7000e694:	e29d      	b.n	7000ebd2 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
7000e696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e698:	7d1b      	ldrb	r3, [r3, #20]
7000e69a:	2b00      	cmp	r3, #0
7000e69c:	d106      	bne.n	7000e6ac <tcp_slowtmr+0x48>
7000e69e:	4b8d      	ldr	r3, [pc, #564]	@ (7000e8d4 <tcp_slowtmr+0x270>)
7000e6a0:	f240 42bf 	movw	r2, #1215	@ 0x4bf
7000e6a4:	498c      	ldr	r1, [pc, #560]	@ (7000e8d8 <tcp_slowtmr+0x274>)
7000e6a6:	488d      	ldr	r0, [pc, #564]	@ (7000e8dc <tcp_slowtmr+0x278>)
7000e6a8:	f005 fb32 	bl	70013d10 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
7000e6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e6ae:	7d1b      	ldrb	r3, [r3, #20]
7000e6b0:	2b01      	cmp	r3, #1
7000e6b2:	d106      	bne.n	7000e6c2 <tcp_slowtmr+0x5e>
7000e6b4:	4b87      	ldr	r3, [pc, #540]	@ (7000e8d4 <tcp_slowtmr+0x270>)
7000e6b6:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
7000e6ba:	4989      	ldr	r1, [pc, #548]	@ (7000e8e0 <tcp_slowtmr+0x27c>)
7000e6bc:	4887      	ldr	r0, [pc, #540]	@ (7000e8dc <tcp_slowtmr+0x278>)
7000e6be:	f005 fb27 	bl	70013d10 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
7000e6c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e6c4:	7d1b      	ldrb	r3, [r3, #20]
7000e6c6:	2b0a      	cmp	r3, #10
7000e6c8:	d106      	bne.n	7000e6d8 <tcp_slowtmr+0x74>
7000e6ca:	4b82      	ldr	r3, [pc, #520]	@ (7000e8d4 <tcp_slowtmr+0x270>)
7000e6cc:	f240 42c1 	movw	r2, #1217	@ 0x4c1
7000e6d0:	4984      	ldr	r1, [pc, #528]	@ (7000e8e4 <tcp_slowtmr+0x280>)
7000e6d2:	4882      	ldr	r0, [pc, #520]	@ (7000e8dc <tcp_slowtmr+0x278>)
7000e6d4:	f005 fb1c 	bl	70013d10 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
7000e6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e6da:	7f9a      	ldrb	r2, [r3, #30]
7000e6dc:	4b7b      	ldr	r3, [pc, #492]	@ (7000e8cc <tcp_slowtmr+0x268>)
7000e6de:	781b      	ldrb	r3, [r3, #0]
7000e6e0:	429a      	cmp	r2, r3
7000e6e2:	d105      	bne.n	7000e6f0 <tcp_slowtmr+0x8c>
      prev = pcb;
7000e6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e6e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
7000e6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e6ea:	68db      	ldr	r3, [r3, #12]
7000e6ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
7000e6ee:	e270      	b.n	7000ebd2 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
7000e6f0:	4b76      	ldr	r3, [pc, #472]	@ (7000e8cc <tcp_slowtmr+0x268>)
7000e6f2:	781a      	ldrb	r2, [r3, #0]
7000e6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e6f6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
7000e6f8:	2300      	movs	r3, #0
7000e6fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
7000e6fe:	2300      	movs	r3, #0
7000e700:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
7000e704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e706:	7d1b      	ldrb	r3, [r3, #20]
7000e708:	2b02      	cmp	r3, #2
7000e70a:	d10a      	bne.n	7000e722 <tcp_slowtmr+0xbe>
7000e70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e70e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
7000e712:	2b05      	cmp	r3, #5
7000e714:	d905      	bls.n	7000e722 <tcp_slowtmr+0xbe>
      ++pcb_remove;
7000e716:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000e71a:	3301      	adds	r3, #1
7000e71c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
7000e720:	e11e      	b.n	7000e960 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
7000e722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e724:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
7000e728:	2b0b      	cmp	r3, #11
7000e72a:	d905      	bls.n	7000e738 <tcp_slowtmr+0xd4>
      ++pcb_remove;
7000e72c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000e730:	3301      	adds	r3, #1
7000e732:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
7000e736:	e113      	b.n	7000e960 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
7000e738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e73a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
7000e73e:	2b00      	cmp	r3, #0
7000e740:	d075      	beq.n	7000e82e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
7000e742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000e746:	2b00      	cmp	r3, #0
7000e748:	d006      	beq.n	7000e758 <tcp_slowtmr+0xf4>
7000e74a:	4b62      	ldr	r3, [pc, #392]	@ (7000e8d4 <tcp_slowtmr+0x270>)
7000e74c:	f240 42d5 	movw	r2, #1237	@ 0x4d5
7000e750:	4965      	ldr	r1, [pc, #404]	@ (7000e8e8 <tcp_slowtmr+0x284>)
7000e752:	4862      	ldr	r0, [pc, #392]	@ (7000e8dc <tcp_slowtmr+0x278>)
7000e754:	f005 fadc 	bl	70013d10 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
7000e758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e75a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7000e75c:	2b00      	cmp	r3, #0
7000e75e:	d106      	bne.n	7000e76e <tcp_slowtmr+0x10a>
7000e760:	4b5c      	ldr	r3, [pc, #368]	@ (7000e8d4 <tcp_slowtmr+0x270>)
7000e762:	f240 42d6 	movw	r2, #1238	@ 0x4d6
7000e766:	4961      	ldr	r1, [pc, #388]	@ (7000e8ec <tcp_slowtmr+0x288>)
7000e768:	485c      	ldr	r0, [pc, #368]	@ (7000e8dc <tcp_slowtmr+0x278>)
7000e76a:	f005 fad1 	bl	70013d10 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
7000e76e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e770:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
7000e774:	2b0b      	cmp	r3, #11
7000e776:	d905      	bls.n	7000e784 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
7000e778:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000e77c:	3301      	adds	r3, #1
7000e77e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
7000e782:	e0ed      	b.n	7000e960 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
7000e784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e786:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
7000e78a:	3b01      	subs	r3, #1
7000e78c:	4a58      	ldr	r2, [pc, #352]	@ (7000e8f0 <tcp_slowtmr+0x28c>)
7000e78e:	5cd3      	ldrb	r3, [r2, r3]
7000e790:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
7000e792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e794:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
7000e798:	7c7a      	ldrb	r2, [r7, #17]
7000e79a:	429a      	cmp	r2, r3
7000e79c:	d907      	bls.n	7000e7ae <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
7000e79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e7a0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
7000e7a4:	3301      	adds	r3, #1
7000e7a6:	b2da      	uxtb	r2, r3
7000e7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e7aa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
7000e7ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e7b0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
7000e7b4:	7c7a      	ldrb	r2, [r7, #17]
7000e7b6:	429a      	cmp	r2, r3
7000e7b8:	f200 80d2 	bhi.w	7000e960 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
7000e7bc:	2301      	movs	r3, #1
7000e7be:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
7000e7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e7c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
7000e7c6:	2b00      	cmp	r3, #0
7000e7c8:	d108      	bne.n	7000e7dc <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
7000e7ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000e7cc:	f004 fbfc 	bl	70012fc8 <tcp_zero_window_probe>
7000e7d0:	4603      	mov	r3, r0
7000e7d2:	2b00      	cmp	r3, #0
7000e7d4:	d014      	beq.n	7000e800 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
7000e7d6:	2300      	movs	r3, #0
7000e7d8:	623b      	str	r3, [r7, #32]
7000e7da:	e011      	b.n	7000e800 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
7000e7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e7de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
7000e7e2:	4619      	mov	r1, r3
7000e7e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000e7e6:	f003 fabf 	bl	70011d68 <tcp_split_unsent_seg>
7000e7ea:	4603      	mov	r3, r0
7000e7ec:	2b00      	cmp	r3, #0
7000e7ee:	d107      	bne.n	7000e800 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
7000e7f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000e7f2:	f003 fd41 	bl	70012278 <tcp_output>
7000e7f6:	4603      	mov	r3, r0
7000e7f8:	2b00      	cmp	r3, #0
7000e7fa:	d101      	bne.n	7000e800 <tcp_slowtmr+0x19c>
                  next_slot = 0;
7000e7fc:	2300      	movs	r3, #0
7000e7fe:	623b      	str	r3, [r7, #32]
            if (next_slot) {
7000e800:	6a3b      	ldr	r3, [r7, #32]
7000e802:	2b00      	cmp	r3, #0
7000e804:	f000 80ac 	beq.w	7000e960 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
7000e808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e80a:	2200      	movs	r2, #0
7000e80c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
7000e810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e812:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
7000e816:	2b06      	cmp	r3, #6
7000e818:	f200 80a2 	bhi.w	7000e960 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
7000e81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e81e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
7000e822:	3301      	adds	r3, #1
7000e824:	b2da      	uxtb	r2, r3
7000e826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e828:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
7000e82c:	e098      	b.n	7000e960 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
7000e82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e830:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
7000e834:	2b00      	cmp	r3, #0
7000e836:	db0f      	blt.n	7000e858 <tcp_slowtmr+0x1f4>
7000e838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e83a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
7000e83e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
7000e842:	4293      	cmp	r3, r2
7000e844:	d008      	beq.n	7000e858 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
7000e846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e848:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
7000e84c:	b29b      	uxth	r3, r3
7000e84e:	3301      	adds	r3, #1
7000e850:	b29b      	uxth	r3, r3
7000e852:	b21a      	sxth	r2, r3
7000e854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e856:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
7000e858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e85a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
7000e85e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e860:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
7000e864:	429a      	cmp	r2, r3
7000e866:	db7b      	blt.n	7000e960 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
7000e868:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000e86a:	f003 fff9 	bl	70012860 <tcp_rexmit_rto_prepare>
7000e86e:	4603      	mov	r3, r0
7000e870:	2b00      	cmp	r3, #0
7000e872:	d007      	beq.n	7000e884 <tcp_slowtmr+0x220>
7000e874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000e878:	2b00      	cmp	r3, #0
7000e87a:	d171      	bne.n	7000e960 <tcp_slowtmr+0x2fc>
7000e87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e87e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7000e880:	2b00      	cmp	r3, #0
7000e882:	d06d      	beq.n	7000e960 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
7000e884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e886:	7d1b      	ldrb	r3, [r3, #20]
7000e888:	2b02      	cmp	r3, #2
7000e88a:	d03a      	beq.n	7000e902 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
7000e88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e88e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
7000e892:	2b0c      	cmp	r3, #12
7000e894:	bf28      	it	cs
7000e896:	230c      	movcs	r3, #12
7000e898:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
7000e89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e89c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
7000e8a0:	10db      	asrs	r3, r3, #3
7000e8a2:	b21b      	sxth	r3, r3
7000e8a4:	461a      	mov	r2, r3
7000e8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e8a8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
7000e8ac:	4413      	add	r3, r2
7000e8ae:	7efa      	ldrb	r2, [r7, #27]
7000e8b0:	4910      	ldr	r1, [pc, #64]	@ (7000e8f4 <tcp_slowtmr+0x290>)
7000e8b2:	5c8a      	ldrb	r2, [r1, r2]
7000e8b4:	4093      	lsls	r3, r2
7000e8b6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
7000e8b8:	697b      	ldr	r3, [r7, #20]
7000e8ba:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
7000e8be:	4293      	cmp	r3, r2
7000e8c0:	dc1a      	bgt.n	7000e8f8 <tcp_slowtmr+0x294>
7000e8c2:	697b      	ldr	r3, [r7, #20]
7000e8c4:	b21a      	sxth	r2, r3
7000e8c6:	e019      	b.n	7000e8fc <tcp_slowtmr+0x298>
7000e8c8:	24008478 	.word	0x24008478
7000e8cc:	2400848e 	.word	0x2400848e
7000e8d0:	24008484 	.word	0x24008484
7000e8d4:	70015c50 	.word	0x70015c50
7000e8d8:	70015e48 	.word	0x70015e48
7000e8dc:	70015cc0 	.word	0x70015cc0
7000e8e0:	70015e74 	.word	0x70015e74
7000e8e4:	70015ea0 	.word	0x70015ea0
7000e8e8:	70015ed0 	.word	0x70015ed0
7000e8ec:	70015f04 	.word	0x70015f04
7000e8f0:	70017340 	.word	0x70017340
7000e8f4:	70017330 	.word	0x70017330
7000e8f8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
7000e8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e8fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
7000e902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e904:	2200      	movs	r2, #0
7000e906:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
7000e908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e90a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
7000e90e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e910:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
7000e914:	4293      	cmp	r3, r2
7000e916:	bf28      	it	cs
7000e918:	4613      	movcs	r3, r2
7000e91a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
7000e91c:	8a7b      	ldrh	r3, [r7, #18]
7000e91e:	085b      	lsrs	r3, r3, #1
7000e920:	b29a      	uxth	r2, r3
7000e922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e924:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
7000e928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e92a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
7000e92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e930:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
7000e932:	005b      	lsls	r3, r3, #1
7000e934:	b29b      	uxth	r3, r3
7000e936:	429a      	cmp	r2, r3
7000e938:	d206      	bcs.n	7000e948 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
7000e93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e93c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
7000e93e:	005b      	lsls	r3, r3, #1
7000e940:	b29a      	uxth	r2, r3
7000e942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e944:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
7000e948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e94a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
7000e94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e94e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
7000e952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e954:	2200      	movs	r2, #0
7000e956:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
7000e95a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000e95c:	f003 fff0 	bl	70012940 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
7000e960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e962:	7d1b      	ldrb	r3, [r3, #20]
7000e964:	2b06      	cmp	r3, #6
7000e966:	d111      	bne.n	7000e98c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
7000e968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e96a:	8b5b      	ldrh	r3, [r3, #26]
7000e96c:	f003 0310 	and.w	r3, r3, #16
7000e970:	2b00      	cmp	r3, #0
7000e972:	d00b      	beq.n	7000e98c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
7000e974:	4b9c      	ldr	r3, [pc, #624]	@ (7000ebe8 <tcp_slowtmr+0x584>)
7000e976:	681a      	ldr	r2, [r3, #0]
7000e978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e97a:	6a1b      	ldr	r3, [r3, #32]
7000e97c:	1ad3      	subs	r3, r2, r3
7000e97e:	2b28      	cmp	r3, #40	@ 0x28
7000e980:	d904      	bls.n	7000e98c <tcp_slowtmr+0x328>
          ++pcb_remove;
7000e982:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000e986:	3301      	adds	r3, #1
7000e988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
7000e98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e98e:	7a5b      	ldrb	r3, [r3, #9]
7000e990:	f003 0308 	and.w	r3, r3, #8
7000e994:	2b00      	cmp	r3, #0
7000e996:	d04a      	beq.n	7000ea2e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
7000e998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e99a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
7000e99c:	2b04      	cmp	r3, #4
7000e99e:	d003      	beq.n	7000e9a8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
7000e9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e9a2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
7000e9a4:	2b07      	cmp	r3, #7
7000e9a6:	d142      	bne.n	7000ea2e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
7000e9a8:	4b8f      	ldr	r3, [pc, #572]	@ (7000ebe8 <tcp_slowtmr+0x584>)
7000e9aa:	681a      	ldr	r2, [r3, #0]
7000e9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e9ae:	6a1b      	ldr	r3, [r3, #32]
7000e9b0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
7000e9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e9b4:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
7000e9b8:	4b8c      	ldr	r3, [pc, #560]	@ (7000ebec <tcp_slowtmr+0x588>)
7000e9ba:	440b      	add	r3, r1
7000e9bc:	498c      	ldr	r1, [pc, #560]	@ (7000ebf0 <tcp_slowtmr+0x58c>)
7000e9be:	fba1 1303 	umull	r1, r3, r1, r3
7000e9c2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
7000e9c4:	429a      	cmp	r2, r3
7000e9c6:	d90a      	bls.n	7000e9de <tcp_slowtmr+0x37a>
        ++pcb_remove;
7000e9c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000e9cc:	3301      	adds	r3, #1
7000e9ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
7000e9d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
7000e9d6:	3301      	adds	r3, #1
7000e9d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
7000e9dc:	e027      	b.n	7000ea2e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
7000e9de:	4b82      	ldr	r3, [pc, #520]	@ (7000ebe8 <tcp_slowtmr+0x584>)
7000e9e0:	681a      	ldr	r2, [r3, #0]
7000e9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e9e4:	6a1b      	ldr	r3, [r3, #32]
7000e9e6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
7000e9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e9ea:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
7000e9ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e9f0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
7000e9f4:	4618      	mov	r0, r3
7000e9f6:	4b7f      	ldr	r3, [pc, #508]	@ (7000ebf4 <tcp_slowtmr+0x590>)
7000e9f8:	fb00 f303 	mul.w	r3, r0, r3
7000e9fc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
7000e9fe:	497c      	ldr	r1, [pc, #496]	@ (7000ebf0 <tcp_slowtmr+0x58c>)
7000ea00:	fba1 1303 	umull	r1, r3, r1, r3
7000ea04:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
7000ea06:	429a      	cmp	r2, r3
7000ea08:	d911      	bls.n	7000ea2e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
7000ea0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000ea0c:	f004 fa9c 	bl	70012f48 <tcp_keepalive>
7000ea10:	4603      	mov	r3, r0
7000ea12:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
7000ea16:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
7000ea1a:	2b00      	cmp	r3, #0
7000ea1c:	d107      	bne.n	7000ea2e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
7000ea1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ea20:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
7000ea24:	3301      	adds	r3, #1
7000ea26:	b2da      	uxtb	r2, r3
7000ea28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ea2a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
7000ea2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ea30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000ea32:	2b00      	cmp	r3, #0
7000ea34:	d011      	beq.n	7000ea5a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
7000ea36:	4b6c      	ldr	r3, [pc, #432]	@ (7000ebe8 <tcp_slowtmr+0x584>)
7000ea38:	681a      	ldr	r2, [r3, #0]
7000ea3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ea3c:	6a1b      	ldr	r3, [r3, #32]
7000ea3e:	1ad2      	subs	r2, r2, r3
7000ea40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ea42:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
7000ea46:	4619      	mov	r1, r3
7000ea48:	460b      	mov	r3, r1
7000ea4a:	005b      	lsls	r3, r3, #1
7000ea4c:	440b      	add	r3, r1
7000ea4e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
7000ea50:	429a      	cmp	r2, r3
7000ea52:	d302      	bcc.n	7000ea5a <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
7000ea54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000ea56:	f000 fdb3 	bl	7000f5c0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
7000ea5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ea5c:	7d1b      	ldrb	r3, [r3, #20]
7000ea5e:	2b03      	cmp	r3, #3
7000ea60:	d10b      	bne.n	7000ea7a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
7000ea62:	4b61      	ldr	r3, [pc, #388]	@ (7000ebe8 <tcp_slowtmr+0x584>)
7000ea64:	681a      	ldr	r2, [r3, #0]
7000ea66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ea68:	6a1b      	ldr	r3, [r3, #32]
7000ea6a:	1ad3      	subs	r3, r2, r3
7000ea6c:	2b28      	cmp	r3, #40	@ 0x28
7000ea6e:	d904      	bls.n	7000ea7a <tcp_slowtmr+0x416>
        ++pcb_remove;
7000ea70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000ea74:	3301      	adds	r3, #1
7000ea76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
7000ea7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ea7c:	7d1b      	ldrb	r3, [r3, #20]
7000ea7e:	2b09      	cmp	r3, #9
7000ea80:	d10b      	bne.n	7000ea9a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
7000ea82:	4b59      	ldr	r3, [pc, #356]	@ (7000ebe8 <tcp_slowtmr+0x584>)
7000ea84:	681a      	ldr	r2, [r3, #0]
7000ea86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ea88:	6a1b      	ldr	r3, [r3, #32]
7000ea8a:	1ad3      	subs	r3, r2, r3
7000ea8c:	2bf0      	cmp	r3, #240	@ 0xf0
7000ea8e:	d904      	bls.n	7000ea9a <tcp_slowtmr+0x436>
        ++pcb_remove;
7000ea90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000ea94:	3301      	adds	r3, #1
7000ea96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
7000ea9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000ea9e:	2b00      	cmp	r3, #0
7000eaa0:	d060      	beq.n	7000eb64 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
7000eaa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eaa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
7000eaa8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
7000eaaa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000eaac:	f000 fbe2 	bl	7000f274 <tcp_pcb_purge>
      if (prev != NULL) {
7000eab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000eab2:	2b00      	cmp	r3, #0
7000eab4:	d010      	beq.n	7000ead8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
7000eab6:	4b50      	ldr	r3, [pc, #320]	@ (7000ebf8 <tcp_slowtmr+0x594>)
7000eab8:	681b      	ldr	r3, [r3, #0]
7000eaba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
7000eabc:	429a      	cmp	r2, r3
7000eabe:	d106      	bne.n	7000eace <tcp_slowtmr+0x46a>
7000eac0:	4b4e      	ldr	r3, [pc, #312]	@ (7000ebfc <tcp_slowtmr+0x598>)
7000eac2:	f240 526e 	movw	r2, #1390	@ 0x56e
7000eac6:	494e      	ldr	r1, [pc, #312]	@ (7000ec00 <tcp_slowtmr+0x59c>)
7000eac8:	484e      	ldr	r0, [pc, #312]	@ (7000ec04 <tcp_slowtmr+0x5a0>)
7000eaca:	f005 f921 	bl	70013d10 <iprintf>
        prev->next = pcb->next;
7000eace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ead0:	68da      	ldr	r2, [r3, #12]
7000ead2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000ead4:	60da      	str	r2, [r3, #12]
7000ead6:	e00f      	b.n	7000eaf8 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
7000ead8:	4b47      	ldr	r3, [pc, #284]	@ (7000ebf8 <tcp_slowtmr+0x594>)
7000eada:	681b      	ldr	r3, [r3, #0]
7000eadc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
7000eade:	429a      	cmp	r2, r3
7000eae0:	d006      	beq.n	7000eaf0 <tcp_slowtmr+0x48c>
7000eae2:	4b46      	ldr	r3, [pc, #280]	@ (7000ebfc <tcp_slowtmr+0x598>)
7000eae4:	f240 5272 	movw	r2, #1394	@ 0x572
7000eae8:	4947      	ldr	r1, [pc, #284]	@ (7000ec08 <tcp_slowtmr+0x5a4>)
7000eaea:	4846      	ldr	r0, [pc, #280]	@ (7000ec04 <tcp_slowtmr+0x5a0>)
7000eaec:	f005 f910 	bl	70013d10 <iprintf>
        tcp_active_pcbs = pcb->next;
7000eaf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eaf2:	68db      	ldr	r3, [r3, #12]
7000eaf4:	4a40      	ldr	r2, [pc, #256]	@ (7000ebf8 <tcp_slowtmr+0x594>)
7000eaf6:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
7000eaf8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
7000eafc:	2b00      	cmp	r3, #0
7000eafe:	d013      	beq.n	7000eb28 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
7000eb00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eb02:	6d18      	ldr	r0, [r3, #80]	@ 0x50
7000eb04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eb06:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
7000eb08:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
7000eb0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eb0c:	3304      	adds	r3, #4
7000eb0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
7000eb10:	8ad2      	ldrh	r2, [r2, #22]
7000eb12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
7000eb14:	8b09      	ldrh	r1, [r1, #24]
7000eb16:	9102      	str	r1, [sp, #8]
7000eb18:	9201      	str	r2, [sp, #4]
7000eb1a:	9300      	str	r3, [sp, #0]
7000eb1c:	462b      	mov	r3, r5
7000eb1e:	4622      	mov	r2, r4
7000eb20:	4601      	mov	r1, r0
7000eb22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000eb24:	f004 f95c 	bl	70012de0 <tcp_rst>
      err_arg = pcb->callback_arg;
7000eb28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eb2a:	691b      	ldr	r3, [r3, #16]
7000eb2c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
7000eb2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eb30:	7d1b      	ldrb	r3, [r3, #20]
7000eb32:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
7000eb34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eb36:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
7000eb38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eb3a:	68db      	ldr	r3, [r3, #12]
7000eb3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
7000eb3e:	6838      	ldr	r0, [r7, #0]
7000eb40:	f7ff fa14 	bl	7000df6c <tcp_free>
      tcp_active_pcbs_changed = 0;
7000eb44:	4b31      	ldr	r3, [pc, #196]	@ (7000ec0c <tcp_slowtmr+0x5a8>)
7000eb46:	2200      	movs	r2, #0
7000eb48:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
7000eb4a:	68fb      	ldr	r3, [r7, #12]
7000eb4c:	2b00      	cmp	r3, #0
7000eb4e:	d004      	beq.n	7000eb5a <tcp_slowtmr+0x4f6>
7000eb50:	68fb      	ldr	r3, [r7, #12]
7000eb52:	f06f 010c 	mvn.w	r1, #12
7000eb56:	68b8      	ldr	r0, [r7, #8]
7000eb58:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
7000eb5a:	4b2c      	ldr	r3, [pc, #176]	@ (7000ec0c <tcp_slowtmr+0x5a8>)
7000eb5c:	781b      	ldrb	r3, [r3, #0]
7000eb5e:	2b00      	cmp	r3, #0
7000eb60:	d037      	beq.n	7000ebd2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
7000eb62:	e592      	b.n	7000e68a <tcp_slowtmr+0x26>
      prev = pcb;
7000eb64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eb66:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
7000eb68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eb6a:	68db      	ldr	r3, [r3, #12]
7000eb6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
7000eb6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000eb70:	7f1b      	ldrb	r3, [r3, #28]
7000eb72:	3301      	adds	r3, #1
7000eb74:	b2da      	uxtb	r2, r3
7000eb76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000eb78:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
7000eb7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000eb7c:	7f1a      	ldrb	r2, [r3, #28]
7000eb7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000eb80:	7f5b      	ldrb	r3, [r3, #29]
7000eb82:	429a      	cmp	r2, r3
7000eb84:	d325      	bcc.n	7000ebd2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
7000eb86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000eb88:	2200      	movs	r2, #0
7000eb8a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
7000eb8c:	4b1f      	ldr	r3, [pc, #124]	@ (7000ec0c <tcp_slowtmr+0x5a8>)
7000eb8e:	2200      	movs	r2, #0
7000eb90:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
7000eb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000eb94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
7000eb98:	2b00      	cmp	r3, #0
7000eb9a:	d00b      	beq.n	7000ebb4 <tcp_slowtmr+0x550>
7000eb9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000eb9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
7000eba2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
7000eba4:	6912      	ldr	r2, [r2, #16]
7000eba6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
7000eba8:	4610      	mov	r0, r2
7000ebaa:	4798      	blx	r3
7000ebac:	4603      	mov	r3, r0
7000ebae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
7000ebb2:	e002      	b.n	7000ebba <tcp_slowtmr+0x556>
7000ebb4:	2300      	movs	r3, #0
7000ebb6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
7000ebba:	4b14      	ldr	r3, [pc, #80]	@ (7000ec0c <tcp_slowtmr+0x5a8>)
7000ebbc:	781b      	ldrb	r3, [r3, #0]
7000ebbe:	2b00      	cmp	r3, #0
7000ebc0:	f47f ad62 	bne.w	7000e688 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
7000ebc4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
7000ebc8:	2b00      	cmp	r3, #0
7000ebca:	d102      	bne.n	7000ebd2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
7000ebcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
7000ebce:	f003 fb53 	bl	70012278 <tcp_output>
  while (pcb != NULL) {
7000ebd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ebd4:	2b00      	cmp	r3, #0
7000ebd6:	f47f ad5e 	bne.w	7000e696 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
7000ebda:	2300      	movs	r3, #0
7000ebdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
7000ebde:	4b0c      	ldr	r3, [pc, #48]	@ (7000ec10 <tcp_slowtmr+0x5ac>)
7000ebe0:	681b      	ldr	r3, [r3, #0]
7000ebe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
7000ebe4:	e069      	b.n	7000ecba <tcp_slowtmr+0x656>
7000ebe6:	bf00      	nop
7000ebe8:	24008478 	.word	0x24008478
7000ebec:	000a4cb8 	.word	0x000a4cb8
7000ebf0:	10624dd3 	.word	0x10624dd3
7000ebf4:	000124f8 	.word	0x000124f8
7000ebf8:	24008484 	.word	0x24008484
7000ebfc:	70015c50 	.word	0x70015c50
7000ec00:	70015f3c 	.word	0x70015f3c
7000ec04:	70015cc0 	.word	0x70015cc0
7000ec08:	70015f68 	.word	0x70015f68
7000ec0c:	2400848c 	.word	0x2400848c
7000ec10:	24008488 	.word	0x24008488
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
7000ec14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ec16:	7d1b      	ldrb	r3, [r3, #20]
7000ec18:	2b0a      	cmp	r3, #10
7000ec1a:	d006      	beq.n	7000ec2a <tcp_slowtmr+0x5c6>
7000ec1c:	4b2b      	ldr	r3, [pc, #172]	@ (7000eccc <tcp_slowtmr+0x668>)
7000ec1e:	f240 52a2 	movw	r2, #1442	@ 0x5a2
7000ec22:	492b      	ldr	r1, [pc, #172]	@ (7000ecd0 <tcp_slowtmr+0x66c>)
7000ec24:	482b      	ldr	r0, [pc, #172]	@ (7000ecd4 <tcp_slowtmr+0x670>)
7000ec26:	f005 f873 	bl	70013d10 <iprintf>
    pcb_remove = 0;
7000ec2a:	2300      	movs	r3, #0
7000ec2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
7000ec30:	4b29      	ldr	r3, [pc, #164]	@ (7000ecd8 <tcp_slowtmr+0x674>)
7000ec32:	681a      	ldr	r2, [r3, #0]
7000ec34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ec36:	6a1b      	ldr	r3, [r3, #32]
7000ec38:	1ad3      	subs	r3, r2, r3
7000ec3a:	2bf0      	cmp	r3, #240	@ 0xf0
7000ec3c:	d904      	bls.n	7000ec48 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
7000ec3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000ec42:	3301      	adds	r3, #1
7000ec44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
7000ec48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000ec4c:	2b00      	cmp	r3, #0
7000ec4e:	d02f      	beq.n	7000ecb0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
7000ec50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000ec52:	f000 fb0f 	bl	7000f274 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
7000ec56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000ec58:	2b00      	cmp	r3, #0
7000ec5a:	d010      	beq.n	7000ec7e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
7000ec5c:	4b1f      	ldr	r3, [pc, #124]	@ (7000ecdc <tcp_slowtmr+0x678>)
7000ec5e:	681b      	ldr	r3, [r3, #0]
7000ec60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
7000ec62:	429a      	cmp	r2, r3
7000ec64:	d106      	bne.n	7000ec74 <tcp_slowtmr+0x610>
7000ec66:	4b19      	ldr	r3, [pc, #100]	@ (7000eccc <tcp_slowtmr+0x668>)
7000ec68:	f44f 62b6 	mov.w	r2, #1456	@ 0x5b0
7000ec6c:	491c      	ldr	r1, [pc, #112]	@ (7000ece0 <tcp_slowtmr+0x67c>)
7000ec6e:	4819      	ldr	r0, [pc, #100]	@ (7000ecd4 <tcp_slowtmr+0x670>)
7000ec70:	f005 f84e 	bl	70013d10 <iprintf>
        prev->next = pcb->next;
7000ec74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ec76:	68da      	ldr	r2, [r3, #12]
7000ec78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000ec7a:	60da      	str	r2, [r3, #12]
7000ec7c:	e00f      	b.n	7000ec9e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
7000ec7e:	4b17      	ldr	r3, [pc, #92]	@ (7000ecdc <tcp_slowtmr+0x678>)
7000ec80:	681b      	ldr	r3, [r3, #0]
7000ec82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
7000ec84:	429a      	cmp	r2, r3
7000ec86:	d006      	beq.n	7000ec96 <tcp_slowtmr+0x632>
7000ec88:	4b10      	ldr	r3, [pc, #64]	@ (7000eccc <tcp_slowtmr+0x668>)
7000ec8a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
7000ec8e:	4915      	ldr	r1, [pc, #84]	@ (7000ece4 <tcp_slowtmr+0x680>)
7000ec90:	4810      	ldr	r0, [pc, #64]	@ (7000ecd4 <tcp_slowtmr+0x670>)
7000ec92:	f005 f83d 	bl	70013d10 <iprintf>
        tcp_tw_pcbs = pcb->next;
7000ec96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ec98:	68db      	ldr	r3, [r3, #12]
7000ec9a:	4a10      	ldr	r2, [pc, #64]	@ (7000ecdc <tcp_slowtmr+0x678>)
7000ec9c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
7000ec9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eca0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
7000eca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eca4:	68db      	ldr	r3, [r3, #12]
7000eca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
7000eca8:	69f8      	ldr	r0, [r7, #28]
7000ecaa:	f7ff f95f 	bl	7000df6c <tcp_free>
7000ecae:	e004      	b.n	7000ecba <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
7000ecb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ecb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
7000ecb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ecb6:	68db      	ldr	r3, [r3, #12]
7000ecb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
7000ecba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ecbc:	2b00      	cmp	r3, #0
7000ecbe:	d1a9      	bne.n	7000ec14 <tcp_slowtmr+0x5b0>
    }
  }
}
7000ecc0:	bf00      	nop
7000ecc2:	bf00      	nop
7000ecc4:	3730      	adds	r7, #48	@ 0x30
7000ecc6:	46bd      	mov	sp, r7
7000ecc8:	bdb0      	pop	{r4, r5, r7, pc}
7000ecca:	bf00      	nop
7000eccc:	70015c50 	.word	0x70015c50
7000ecd0:	70015f94 	.word	0x70015f94
7000ecd4:	70015cc0 	.word	0x70015cc0
7000ecd8:	24008478 	.word	0x24008478
7000ecdc:	24008488 	.word	0x24008488
7000ece0:	70015fc4 	.word	0x70015fc4
7000ece4:	70015fec 	.word	0x70015fec

7000ece8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
7000ece8:	b580      	push	{r7, lr}
7000ecea:	b082      	sub	sp, #8
7000ecec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
7000ecee:	4b2d      	ldr	r3, [pc, #180]	@ (7000eda4 <tcp_fasttmr+0xbc>)
7000ecf0:	781b      	ldrb	r3, [r3, #0]
7000ecf2:	3301      	adds	r3, #1
7000ecf4:	b2da      	uxtb	r2, r3
7000ecf6:	4b2b      	ldr	r3, [pc, #172]	@ (7000eda4 <tcp_fasttmr+0xbc>)
7000ecf8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
7000ecfa:	4b2b      	ldr	r3, [pc, #172]	@ (7000eda8 <tcp_fasttmr+0xc0>)
7000ecfc:	681b      	ldr	r3, [r3, #0]
7000ecfe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
7000ed00:	e048      	b.n	7000ed94 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
7000ed02:	687b      	ldr	r3, [r7, #4]
7000ed04:	7f9a      	ldrb	r2, [r3, #30]
7000ed06:	4b27      	ldr	r3, [pc, #156]	@ (7000eda4 <tcp_fasttmr+0xbc>)
7000ed08:	781b      	ldrb	r3, [r3, #0]
7000ed0a:	429a      	cmp	r2, r3
7000ed0c:	d03f      	beq.n	7000ed8e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
7000ed0e:	4b25      	ldr	r3, [pc, #148]	@ (7000eda4 <tcp_fasttmr+0xbc>)
7000ed10:	781a      	ldrb	r2, [r3, #0]
7000ed12:	687b      	ldr	r3, [r7, #4]
7000ed14:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
7000ed16:	687b      	ldr	r3, [r7, #4]
7000ed18:	8b5b      	ldrh	r3, [r3, #26]
7000ed1a:	f003 0301 	and.w	r3, r3, #1
7000ed1e:	2b00      	cmp	r3, #0
7000ed20:	d010      	beq.n	7000ed44 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
7000ed22:	687b      	ldr	r3, [r7, #4]
7000ed24:	8b5b      	ldrh	r3, [r3, #26]
7000ed26:	f043 0302 	orr.w	r3, r3, #2
7000ed2a:	b29a      	uxth	r2, r3
7000ed2c:	687b      	ldr	r3, [r7, #4]
7000ed2e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
7000ed30:	6878      	ldr	r0, [r7, #4]
7000ed32:	f003 faa1 	bl	70012278 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
7000ed36:	687b      	ldr	r3, [r7, #4]
7000ed38:	8b5b      	ldrh	r3, [r3, #26]
7000ed3a:	f023 0303 	bic.w	r3, r3, #3
7000ed3e:	b29a      	uxth	r2, r3
7000ed40:	687b      	ldr	r3, [r7, #4]
7000ed42:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
7000ed44:	687b      	ldr	r3, [r7, #4]
7000ed46:	8b5b      	ldrh	r3, [r3, #26]
7000ed48:	f003 0308 	and.w	r3, r3, #8
7000ed4c:	2b00      	cmp	r3, #0
7000ed4e:	d009      	beq.n	7000ed64 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
7000ed50:	687b      	ldr	r3, [r7, #4]
7000ed52:	8b5b      	ldrh	r3, [r3, #26]
7000ed54:	f023 0308 	bic.w	r3, r3, #8
7000ed58:	b29a      	uxth	r2, r3
7000ed5a:	687b      	ldr	r3, [r7, #4]
7000ed5c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
7000ed5e:	6878      	ldr	r0, [r7, #4]
7000ed60:	f7ff fa98 	bl	7000e294 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
7000ed64:	687b      	ldr	r3, [r7, #4]
7000ed66:	68db      	ldr	r3, [r3, #12]
7000ed68:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
7000ed6a:	687b      	ldr	r3, [r7, #4]
7000ed6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000ed6e:	2b00      	cmp	r3, #0
7000ed70:	d00a      	beq.n	7000ed88 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
7000ed72:	4b0e      	ldr	r3, [pc, #56]	@ (7000edac <tcp_fasttmr+0xc4>)
7000ed74:	2200      	movs	r2, #0
7000ed76:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
7000ed78:	6878      	ldr	r0, [r7, #4]
7000ed7a:	f000 f819 	bl	7000edb0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
7000ed7e:	4b0b      	ldr	r3, [pc, #44]	@ (7000edac <tcp_fasttmr+0xc4>)
7000ed80:	781b      	ldrb	r3, [r3, #0]
7000ed82:	2b00      	cmp	r3, #0
7000ed84:	d000      	beq.n	7000ed88 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
7000ed86:	e7b8      	b.n	7000ecfa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
7000ed88:	683b      	ldr	r3, [r7, #0]
7000ed8a:	607b      	str	r3, [r7, #4]
7000ed8c:	e002      	b.n	7000ed94 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
7000ed8e:	687b      	ldr	r3, [r7, #4]
7000ed90:	68db      	ldr	r3, [r3, #12]
7000ed92:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
7000ed94:	687b      	ldr	r3, [r7, #4]
7000ed96:	2b00      	cmp	r3, #0
7000ed98:	d1b3      	bne.n	7000ed02 <tcp_fasttmr+0x1a>
    }
  }
}
7000ed9a:	bf00      	nop
7000ed9c:	bf00      	nop
7000ed9e:	3708      	adds	r7, #8
7000eda0:	46bd      	mov	sp, r7
7000eda2:	bd80      	pop	{r7, pc}
7000eda4:	2400848e 	.word	0x2400848e
7000eda8:	24008484 	.word	0x24008484
7000edac:	2400848c 	.word	0x2400848c

7000edb0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
7000edb0:	b590      	push	{r4, r7, lr}
7000edb2:	b085      	sub	sp, #20
7000edb4:	af00      	add	r7, sp, #0
7000edb6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
7000edb8:	687b      	ldr	r3, [r7, #4]
7000edba:	2b00      	cmp	r3, #0
7000edbc:	d102      	bne.n	7000edc4 <tcp_process_refused_data+0x14>
7000edbe:	f06f 030f 	mvn.w	r3, #15
7000edc2:	e060      	b.n	7000ee86 <tcp_process_refused_data+0xd6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
7000edc4:	687b      	ldr	r3, [r7, #4]
7000edc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000edc8:	7b5b      	ldrb	r3, [r3, #13]
7000edca:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
7000edcc:	687b      	ldr	r3, [r7, #4]
7000edce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000edd0:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
7000edd2:	687b      	ldr	r3, [r7, #4]
7000edd4:	2200      	movs	r2, #0
7000edd6:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
7000edd8:	687b      	ldr	r3, [r7, #4]
7000edda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
7000edde:	2b00      	cmp	r3, #0
7000ede0:	d00b      	beq.n	7000edfa <tcp_process_refused_data+0x4a>
7000ede2:	687b      	ldr	r3, [r7, #4]
7000ede4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
7000ede8:	687b      	ldr	r3, [r7, #4]
7000edea:	6918      	ldr	r0, [r3, #16]
7000edec:	2300      	movs	r3, #0
7000edee:	68ba      	ldr	r2, [r7, #8]
7000edf0:	6879      	ldr	r1, [r7, #4]
7000edf2:	47a0      	blx	r4
7000edf4:	4603      	mov	r3, r0
7000edf6:	73fb      	strb	r3, [r7, #15]
7000edf8:	e007      	b.n	7000ee0a <tcp_process_refused_data+0x5a>
7000edfa:	2300      	movs	r3, #0
7000edfc:	68ba      	ldr	r2, [r7, #8]
7000edfe:	6879      	ldr	r1, [r7, #4]
7000ee00:	2000      	movs	r0, #0
7000ee02:	f000 f89d 	bl	7000ef40 <tcp_recv_null>
7000ee06:	4603      	mov	r3, r0
7000ee08:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
7000ee0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
7000ee0e:	2b00      	cmp	r3, #0
7000ee10:	d12a      	bne.n	7000ee68 <tcp_process_refused_data+0xb8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
7000ee12:	7bbb      	ldrb	r3, [r7, #14]
7000ee14:	f003 0320 	and.w	r3, r3, #32
7000ee18:	2b00      	cmp	r3, #0
7000ee1a:	d033      	beq.n	7000ee84 <tcp_process_refused_data+0xd4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
7000ee1c:	687b      	ldr	r3, [r7, #4]
7000ee1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
7000ee20:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
7000ee24:	d005      	beq.n	7000ee32 <tcp_process_refused_data+0x82>
          pcb->rcv_wnd++;
7000ee26:	687b      	ldr	r3, [r7, #4]
7000ee28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
7000ee2a:	3301      	adds	r3, #1
7000ee2c:	b29a      	uxth	r2, r3
7000ee2e:	687b      	ldr	r3, [r7, #4]
7000ee30:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
7000ee32:	687b      	ldr	r3, [r7, #4]
7000ee34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
7000ee38:	2b00      	cmp	r3, #0
7000ee3a:	d00b      	beq.n	7000ee54 <tcp_process_refused_data+0xa4>
7000ee3c:	687b      	ldr	r3, [r7, #4]
7000ee3e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
7000ee42:	687b      	ldr	r3, [r7, #4]
7000ee44:	6918      	ldr	r0, [r3, #16]
7000ee46:	2300      	movs	r3, #0
7000ee48:	2200      	movs	r2, #0
7000ee4a:	6879      	ldr	r1, [r7, #4]
7000ee4c:	47a0      	blx	r4
7000ee4e:	4603      	mov	r3, r0
7000ee50:	73fb      	strb	r3, [r7, #15]
7000ee52:	e001      	b.n	7000ee58 <tcp_process_refused_data+0xa8>
7000ee54:	2300      	movs	r3, #0
7000ee56:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
7000ee58:	f997 300f 	ldrsb.w	r3, [r7, #15]
7000ee5c:	f113 0f0d 	cmn.w	r3, #13
7000ee60:	d110      	bne.n	7000ee84 <tcp_process_refused_data+0xd4>
          return ERR_ABRT;
7000ee62:	f06f 030c 	mvn.w	r3, #12
7000ee66:	e00e      	b.n	7000ee86 <tcp_process_refused_data+0xd6>
        }
      }
    } else if (err == ERR_ABRT) {
7000ee68:	f997 300f 	ldrsb.w	r3, [r7, #15]
7000ee6c:	f113 0f0d 	cmn.w	r3, #13
7000ee70:	d102      	bne.n	7000ee78 <tcp_process_refused_data+0xc8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
7000ee72:	f06f 030c 	mvn.w	r3, #12
7000ee76:	e006      	b.n	7000ee86 <tcp_process_refused_data+0xd6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
7000ee78:	687b      	ldr	r3, [r7, #4]
7000ee7a:	68ba      	ldr	r2, [r7, #8]
7000ee7c:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
7000ee7e:	f06f 0304 	mvn.w	r3, #4
7000ee82:	e000      	b.n	7000ee86 <tcp_process_refused_data+0xd6>
    }
  }
  return ERR_OK;
7000ee84:	2300      	movs	r3, #0
}
7000ee86:	4618      	mov	r0, r3
7000ee88:	3714      	adds	r7, #20
7000ee8a:	46bd      	mov	sp, r7
7000ee8c:	bd90      	pop	{r4, r7, pc}

7000ee8e <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
7000ee8e:	b580      	push	{r7, lr}
7000ee90:	b084      	sub	sp, #16
7000ee92:	af00      	add	r7, sp, #0
7000ee94:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
7000ee96:	e007      	b.n	7000eea8 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
7000ee98:	687b      	ldr	r3, [r7, #4]
7000ee9a:	681b      	ldr	r3, [r3, #0]
7000ee9c:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
7000ee9e:	6878      	ldr	r0, [r7, #4]
7000eea0:	f000 f80a 	bl	7000eeb8 <tcp_seg_free>
    seg = next;
7000eea4:	68fb      	ldr	r3, [r7, #12]
7000eea6:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
7000eea8:	687b      	ldr	r3, [r7, #4]
7000eeaa:	2b00      	cmp	r3, #0
7000eeac:	d1f4      	bne.n	7000ee98 <tcp_segs_free+0xa>
  }
}
7000eeae:	bf00      	nop
7000eeb0:	bf00      	nop
7000eeb2:	3710      	adds	r7, #16
7000eeb4:	46bd      	mov	sp, r7
7000eeb6:	bd80      	pop	{r7, pc}

7000eeb8 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
7000eeb8:	b580      	push	{r7, lr}
7000eeba:	b082      	sub	sp, #8
7000eebc:	af00      	add	r7, sp, #0
7000eebe:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
7000eec0:	687b      	ldr	r3, [r7, #4]
7000eec2:	2b00      	cmp	r3, #0
7000eec4:	d00c      	beq.n	7000eee0 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
7000eec6:	687b      	ldr	r3, [r7, #4]
7000eec8:	685b      	ldr	r3, [r3, #4]
7000eeca:	2b00      	cmp	r3, #0
7000eecc:	d004      	beq.n	7000eed8 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
7000eece:	687b      	ldr	r3, [r7, #4]
7000eed0:	685b      	ldr	r3, [r3, #4]
7000eed2:	4618      	mov	r0, r3
7000eed4:	f7fe fcb0 	bl	7000d838 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
7000eed8:	6879      	ldr	r1, [r7, #4]
7000eeda:	2003      	movs	r0, #3
7000eedc:	f7fd fe6a 	bl	7000cbb4 <memp_free>
  }
}
7000eee0:	bf00      	nop
7000eee2:	3708      	adds	r7, #8
7000eee4:	46bd      	mov	sp, r7
7000eee6:	bd80      	pop	{r7, pc}

7000eee8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
7000eee8:	b580      	push	{r7, lr}
7000eeea:	b084      	sub	sp, #16
7000eeec:	af00      	add	r7, sp, #0
7000eeee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
7000eef0:	687b      	ldr	r3, [r7, #4]
7000eef2:	2b00      	cmp	r3, #0
7000eef4:	d106      	bne.n	7000ef04 <tcp_seg_copy+0x1c>
7000eef6:	4b0f      	ldr	r3, [pc, #60]	@ (7000ef34 <tcp_seg_copy+0x4c>)
7000eef8:	f240 6283 	movw	r2, #1667	@ 0x683
7000eefc:	490e      	ldr	r1, [pc, #56]	@ (7000ef38 <tcp_seg_copy+0x50>)
7000eefe:	480f      	ldr	r0, [pc, #60]	@ (7000ef3c <tcp_seg_copy+0x54>)
7000ef00:	f004 ff06 	bl	70013d10 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
7000ef04:	2003      	movs	r0, #3
7000ef06:	f7fd fdeb 	bl	7000cae0 <memp_malloc>
7000ef0a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
7000ef0c:	68fb      	ldr	r3, [r7, #12]
7000ef0e:	2b00      	cmp	r3, #0
7000ef10:	d101      	bne.n	7000ef16 <tcp_seg_copy+0x2e>
    return NULL;
7000ef12:	2300      	movs	r3, #0
7000ef14:	e00a      	b.n	7000ef2c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
7000ef16:	2210      	movs	r2, #16
7000ef18:	6879      	ldr	r1, [r7, #4]
7000ef1a:	68f8      	ldr	r0, [r7, #12]
7000ef1c:	f005 f829 	bl	70013f72 <memcpy>
  pbuf_ref(cseg->p);
7000ef20:	68fb      	ldr	r3, [r7, #12]
7000ef22:	685b      	ldr	r3, [r3, #4]
7000ef24:	4618      	mov	r0, r3
7000ef26:	f7fe fd2d 	bl	7000d984 <pbuf_ref>
  return cseg;
7000ef2a:	68fb      	ldr	r3, [r7, #12]
}
7000ef2c:	4618      	mov	r0, r3
7000ef2e:	3710      	adds	r7, #16
7000ef30:	46bd      	mov	sp, r7
7000ef32:	bd80      	pop	{r7, pc}
7000ef34:	70015c50 	.word	0x70015c50
7000ef38:	70016014 	.word	0x70016014
7000ef3c:	70015cc0 	.word	0x70015cc0

7000ef40 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
7000ef40:	b580      	push	{r7, lr}
7000ef42:	b084      	sub	sp, #16
7000ef44:	af00      	add	r7, sp, #0
7000ef46:	60f8      	str	r0, [r7, #12]
7000ef48:	60b9      	str	r1, [r7, #8]
7000ef4a:	607a      	str	r2, [r7, #4]
7000ef4c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
7000ef4e:	68bb      	ldr	r3, [r7, #8]
7000ef50:	2b00      	cmp	r3, #0
7000ef52:	d102      	bne.n	7000ef5a <tcp_recv_null+0x1a>
7000ef54:	f06f 030f 	mvn.w	r3, #15
7000ef58:	e016      	b.n	7000ef88 <tcp_recv_null+0x48>

  if (p != NULL) {
7000ef5a:	687b      	ldr	r3, [r7, #4]
7000ef5c:	2b00      	cmp	r3, #0
7000ef5e:	d009      	beq.n	7000ef74 <tcp_recv_null+0x34>
    tcp_recved(pcb, p->tot_len);
7000ef60:	687b      	ldr	r3, [r7, #4]
7000ef62:	891b      	ldrh	r3, [r3, #8]
7000ef64:	4619      	mov	r1, r3
7000ef66:	68b8      	ldr	r0, [r7, #8]
7000ef68:	f7ff fb36 	bl	7000e5d8 <tcp_recved>
    pbuf_free(p);
7000ef6c:	6878      	ldr	r0, [r7, #4]
7000ef6e:	f7fe fc63 	bl	7000d838 <pbuf_free>
7000ef72:	e008      	b.n	7000ef86 <tcp_recv_null+0x46>
  } else if (err == ERR_OK) {
7000ef74:	f997 3003 	ldrsb.w	r3, [r7, #3]
7000ef78:	2b00      	cmp	r3, #0
7000ef7a:	d104      	bne.n	7000ef86 <tcp_recv_null+0x46>
    return tcp_close(pcb);
7000ef7c:	68b8      	ldr	r0, [r7, #8]
7000ef7e:	f7ff f9f3 	bl	7000e368 <tcp_close>
7000ef82:	4603      	mov	r3, r0
7000ef84:	e000      	b.n	7000ef88 <tcp_recv_null+0x48>
  }
  return ERR_OK;
7000ef86:	2300      	movs	r3, #0
}
7000ef88:	4618      	mov	r0, r3
7000ef8a:	3710      	adds	r7, #16
7000ef8c:	46bd      	mov	sp, r7
7000ef8e:	bd80      	pop	{r7, pc}

7000ef90 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
7000ef90:	b580      	push	{r7, lr}
7000ef92:	b086      	sub	sp, #24
7000ef94:	af00      	add	r7, sp, #0
7000ef96:	4603      	mov	r3, r0
7000ef98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
7000ef9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
7000ef9e:	2b00      	cmp	r3, #0
7000efa0:	db01      	blt.n	7000efa6 <tcp_kill_prio+0x16>
7000efa2:	79fb      	ldrb	r3, [r7, #7]
7000efa4:	e000      	b.n	7000efa8 <tcp_kill_prio+0x18>
7000efa6:	237f      	movs	r3, #127	@ 0x7f
7000efa8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
7000efaa:	7afb      	ldrb	r3, [r7, #11]
7000efac:	2b00      	cmp	r3, #0
7000efae:	d034      	beq.n	7000f01a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
7000efb0:	7afb      	ldrb	r3, [r7, #11]
7000efb2:	3b01      	subs	r3, #1
7000efb4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
7000efb6:	2300      	movs	r3, #0
7000efb8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
7000efba:	2300      	movs	r3, #0
7000efbc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
7000efbe:	4b19      	ldr	r3, [pc, #100]	@ (7000f024 <tcp_kill_prio+0x94>)
7000efc0:	681b      	ldr	r3, [r3, #0]
7000efc2:	617b      	str	r3, [r7, #20]
7000efc4:	e01f      	b.n	7000f006 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
7000efc6:	697b      	ldr	r3, [r7, #20]
7000efc8:	7d5b      	ldrb	r3, [r3, #21]
7000efca:	7afa      	ldrb	r2, [r7, #11]
7000efcc:	429a      	cmp	r2, r3
7000efce:	d80c      	bhi.n	7000efea <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
7000efd0:	697b      	ldr	r3, [r7, #20]
7000efd2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
7000efd4:	7afa      	ldrb	r2, [r7, #11]
7000efd6:	429a      	cmp	r2, r3
7000efd8:	d112      	bne.n	7000f000 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
7000efda:	4b13      	ldr	r3, [pc, #76]	@ (7000f028 <tcp_kill_prio+0x98>)
7000efdc:	681a      	ldr	r2, [r3, #0]
7000efde:	697b      	ldr	r3, [r7, #20]
7000efe0:	6a1b      	ldr	r3, [r3, #32]
7000efe2:	1ad3      	subs	r3, r2, r3
7000efe4:	68fa      	ldr	r2, [r7, #12]
7000efe6:	429a      	cmp	r2, r3
7000efe8:	d80a      	bhi.n	7000f000 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
7000efea:	4b0f      	ldr	r3, [pc, #60]	@ (7000f028 <tcp_kill_prio+0x98>)
7000efec:	681a      	ldr	r2, [r3, #0]
7000efee:	697b      	ldr	r3, [r7, #20]
7000eff0:	6a1b      	ldr	r3, [r3, #32]
7000eff2:	1ad3      	subs	r3, r2, r3
7000eff4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
7000eff6:	697b      	ldr	r3, [r7, #20]
7000eff8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
7000effa:	697b      	ldr	r3, [r7, #20]
7000effc:	7d5b      	ldrb	r3, [r3, #21]
7000effe:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
7000f000:	697b      	ldr	r3, [r7, #20]
7000f002:	68db      	ldr	r3, [r3, #12]
7000f004:	617b      	str	r3, [r7, #20]
7000f006:	697b      	ldr	r3, [r7, #20]
7000f008:	2b00      	cmp	r3, #0
7000f00a:	d1dc      	bne.n	7000efc6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
7000f00c:	693b      	ldr	r3, [r7, #16]
7000f00e:	2b00      	cmp	r3, #0
7000f010:	d004      	beq.n	7000f01c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
7000f012:	6938      	ldr	r0, [r7, #16]
7000f014:	f7ff fa7a 	bl	7000e50c <tcp_abort>
7000f018:	e000      	b.n	7000f01c <tcp_kill_prio+0x8c>
    return;
7000f01a:	bf00      	nop
  }
}
7000f01c:	3718      	adds	r7, #24
7000f01e:	46bd      	mov	sp, r7
7000f020:	bd80      	pop	{r7, pc}
7000f022:	bf00      	nop
7000f024:	24008484 	.word	0x24008484
7000f028:	24008478 	.word	0x24008478

7000f02c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
7000f02c:	b580      	push	{r7, lr}
7000f02e:	b086      	sub	sp, #24
7000f030:	af00      	add	r7, sp, #0
7000f032:	4603      	mov	r3, r0
7000f034:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
7000f036:	79fb      	ldrb	r3, [r7, #7]
7000f038:	2b08      	cmp	r3, #8
7000f03a:	d009      	beq.n	7000f050 <tcp_kill_state+0x24>
7000f03c:	79fb      	ldrb	r3, [r7, #7]
7000f03e:	2b09      	cmp	r3, #9
7000f040:	d006      	beq.n	7000f050 <tcp_kill_state+0x24>
7000f042:	4b1a      	ldr	r3, [pc, #104]	@ (7000f0ac <tcp_kill_state+0x80>)
7000f044:	f240 62de 	movw	r2, #1758	@ 0x6de
7000f048:	4919      	ldr	r1, [pc, #100]	@ (7000f0b0 <tcp_kill_state+0x84>)
7000f04a:	481a      	ldr	r0, [pc, #104]	@ (7000f0b4 <tcp_kill_state+0x88>)
7000f04c:	f004 fe60 	bl	70013d10 <iprintf>

  inactivity = 0;
7000f050:	2300      	movs	r3, #0
7000f052:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
7000f054:	2300      	movs	r3, #0
7000f056:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
7000f058:	4b17      	ldr	r3, [pc, #92]	@ (7000f0b8 <tcp_kill_state+0x8c>)
7000f05a:	681b      	ldr	r3, [r3, #0]
7000f05c:	617b      	str	r3, [r7, #20]
7000f05e:	e017      	b.n	7000f090 <tcp_kill_state+0x64>
    if (pcb->state == state) {
7000f060:	697b      	ldr	r3, [r7, #20]
7000f062:	7d1b      	ldrb	r3, [r3, #20]
7000f064:	79fa      	ldrb	r2, [r7, #7]
7000f066:	429a      	cmp	r2, r3
7000f068:	d10f      	bne.n	7000f08a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
7000f06a:	4b14      	ldr	r3, [pc, #80]	@ (7000f0bc <tcp_kill_state+0x90>)
7000f06c:	681a      	ldr	r2, [r3, #0]
7000f06e:	697b      	ldr	r3, [r7, #20]
7000f070:	6a1b      	ldr	r3, [r3, #32]
7000f072:	1ad3      	subs	r3, r2, r3
7000f074:	68fa      	ldr	r2, [r7, #12]
7000f076:	429a      	cmp	r2, r3
7000f078:	d807      	bhi.n	7000f08a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
7000f07a:	4b10      	ldr	r3, [pc, #64]	@ (7000f0bc <tcp_kill_state+0x90>)
7000f07c:	681a      	ldr	r2, [r3, #0]
7000f07e:	697b      	ldr	r3, [r7, #20]
7000f080:	6a1b      	ldr	r3, [r3, #32]
7000f082:	1ad3      	subs	r3, r2, r3
7000f084:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
7000f086:	697b      	ldr	r3, [r7, #20]
7000f088:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
7000f08a:	697b      	ldr	r3, [r7, #20]
7000f08c:	68db      	ldr	r3, [r3, #12]
7000f08e:	617b      	str	r3, [r7, #20]
7000f090:	697b      	ldr	r3, [r7, #20]
7000f092:	2b00      	cmp	r3, #0
7000f094:	d1e4      	bne.n	7000f060 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
7000f096:	693b      	ldr	r3, [r7, #16]
7000f098:	2b00      	cmp	r3, #0
7000f09a:	d003      	beq.n	7000f0a4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
7000f09c:	2100      	movs	r1, #0
7000f09e:	6938      	ldr	r0, [r7, #16]
7000f0a0:	f7ff f980 	bl	7000e3a4 <tcp_abandon>
  }
}
7000f0a4:	bf00      	nop
7000f0a6:	3718      	adds	r7, #24
7000f0a8:	46bd      	mov	sp, r7
7000f0aa:	bd80      	pop	{r7, pc}
7000f0ac:	70015c50 	.word	0x70015c50
7000f0b0:	70016030 	.word	0x70016030
7000f0b4:	70015cc0 	.word	0x70015cc0
7000f0b8:	24008484 	.word	0x24008484
7000f0bc:	24008478 	.word	0x24008478

7000f0c0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
7000f0c0:	b580      	push	{r7, lr}
7000f0c2:	b084      	sub	sp, #16
7000f0c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
7000f0c6:	2300      	movs	r3, #0
7000f0c8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
7000f0ca:	2300      	movs	r3, #0
7000f0cc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
7000f0ce:	4b12      	ldr	r3, [pc, #72]	@ (7000f118 <tcp_kill_timewait+0x58>)
7000f0d0:	681b      	ldr	r3, [r3, #0]
7000f0d2:	60fb      	str	r3, [r7, #12]
7000f0d4:	e012      	b.n	7000f0fc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
7000f0d6:	4b11      	ldr	r3, [pc, #68]	@ (7000f11c <tcp_kill_timewait+0x5c>)
7000f0d8:	681a      	ldr	r2, [r3, #0]
7000f0da:	68fb      	ldr	r3, [r7, #12]
7000f0dc:	6a1b      	ldr	r3, [r3, #32]
7000f0de:	1ad3      	subs	r3, r2, r3
7000f0e0:	687a      	ldr	r2, [r7, #4]
7000f0e2:	429a      	cmp	r2, r3
7000f0e4:	d807      	bhi.n	7000f0f6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
7000f0e6:	4b0d      	ldr	r3, [pc, #52]	@ (7000f11c <tcp_kill_timewait+0x5c>)
7000f0e8:	681a      	ldr	r2, [r3, #0]
7000f0ea:	68fb      	ldr	r3, [r7, #12]
7000f0ec:	6a1b      	ldr	r3, [r3, #32]
7000f0ee:	1ad3      	subs	r3, r2, r3
7000f0f0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
7000f0f2:	68fb      	ldr	r3, [r7, #12]
7000f0f4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
7000f0f6:	68fb      	ldr	r3, [r7, #12]
7000f0f8:	68db      	ldr	r3, [r3, #12]
7000f0fa:	60fb      	str	r3, [r7, #12]
7000f0fc:	68fb      	ldr	r3, [r7, #12]
7000f0fe:	2b00      	cmp	r3, #0
7000f100:	d1e9      	bne.n	7000f0d6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
7000f102:	68bb      	ldr	r3, [r7, #8]
7000f104:	2b00      	cmp	r3, #0
7000f106:	d002      	beq.n	7000f10e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
7000f108:	68b8      	ldr	r0, [r7, #8]
7000f10a:	f7ff f9ff 	bl	7000e50c <tcp_abort>
  }
}
7000f10e:	bf00      	nop
7000f110:	3710      	adds	r7, #16
7000f112:	46bd      	mov	sp, r7
7000f114:	bd80      	pop	{r7, pc}
7000f116:	bf00      	nop
7000f118:	24008488 	.word	0x24008488
7000f11c:	24008478 	.word	0x24008478

7000f120 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
7000f120:	b580      	push	{r7, lr}
7000f122:	b082      	sub	sp, #8
7000f124:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
7000f126:	4b10      	ldr	r3, [pc, #64]	@ (7000f168 <tcp_handle_closepend+0x48>)
7000f128:	681b      	ldr	r3, [r3, #0]
7000f12a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
7000f12c:	e014      	b.n	7000f158 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
7000f12e:	687b      	ldr	r3, [r7, #4]
7000f130:	68db      	ldr	r3, [r3, #12]
7000f132:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
7000f134:	687b      	ldr	r3, [r7, #4]
7000f136:	8b5b      	ldrh	r3, [r3, #26]
7000f138:	f003 0308 	and.w	r3, r3, #8
7000f13c:	2b00      	cmp	r3, #0
7000f13e:	d009      	beq.n	7000f154 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
7000f140:	687b      	ldr	r3, [r7, #4]
7000f142:	8b5b      	ldrh	r3, [r3, #26]
7000f144:	f023 0308 	bic.w	r3, r3, #8
7000f148:	b29a      	uxth	r2, r3
7000f14a:	687b      	ldr	r3, [r7, #4]
7000f14c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
7000f14e:	6878      	ldr	r0, [r7, #4]
7000f150:	f7ff f8a0 	bl	7000e294 <tcp_close_shutdown_fin>
    }
    pcb = next;
7000f154:	683b      	ldr	r3, [r7, #0]
7000f156:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
7000f158:	687b      	ldr	r3, [r7, #4]
7000f15a:	2b00      	cmp	r3, #0
7000f15c:	d1e7      	bne.n	7000f12e <tcp_handle_closepend+0xe>
  }
}
7000f15e:	bf00      	nop
7000f160:	bf00      	nop
7000f162:	3708      	adds	r7, #8
7000f164:	46bd      	mov	sp, r7
7000f166:	bd80      	pop	{r7, pc}
7000f168:	24008484 	.word	0x24008484

7000f16c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
7000f16c:	b580      	push	{r7, lr}
7000f16e:	b084      	sub	sp, #16
7000f170:	af00      	add	r7, sp, #0
7000f172:	4603      	mov	r3, r0
7000f174:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
7000f176:	2001      	movs	r0, #1
7000f178:	f7fd fcb2 	bl	7000cae0 <memp_malloc>
7000f17c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
7000f17e:	68fb      	ldr	r3, [r7, #12]
7000f180:	2b00      	cmp	r3, #0
7000f182:	d126      	bne.n	7000f1d2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
7000f184:	f7ff ffcc 	bl	7000f120 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
7000f188:	f7ff ff9a 	bl	7000f0c0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
7000f18c:	2001      	movs	r0, #1
7000f18e:	f7fd fca7 	bl	7000cae0 <memp_malloc>
7000f192:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
7000f194:	68fb      	ldr	r3, [r7, #12]
7000f196:	2b00      	cmp	r3, #0
7000f198:	d11b      	bne.n	7000f1d2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
7000f19a:	2009      	movs	r0, #9
7000f19c:	f7ff ff46 	bl	7000f02c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
7000f1a0:	2001      	movs	r0, #1
7000f1a2:	f7fd fc9d 	bl	7000cae0 <memp_malloc>
7000f1a6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
7000f1a8:	68fb      	ldr	r3, [r7, #12]
7000f1aa:	2b00      	cmp	r3, #0
7000f1ac:	d111      	bne.n	7000f1d2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
7000f1ae:	2008      	movs	r0, #8
7000f1b0:	f7ff ff3c 	bl	7000f02c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
7000f1b4:	2001      	movs	r0, #1
7000f1b6:	f7fd fc93 	bl	7000cae0 <memp_malloc>
7000f1ba:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
7000f1bc:	68fb      	ldr	r3, [r7, #12]
7000f1be:	2b00      	cmp	r3, #0
7000f1c0:	d107      	bne.n	7000f1d2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
7000f1c2:	79fb      	ldrb	r3, [r7, #7]
7000f1c4:	4618      	mov	r0, r3
7000f1c6:	f7ff fee3 	bl	7000ef90 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
7000f1ca:	2001      	movs	r0, #1
7000f1cc:	f7fd fc88 	bl	7000cae0 <memp_malloc>
7000f1d0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
7000f1d2:	68fb      	ldr	r3, [r7, #12]
7000f1d4:	2b00      	cmp	r3, #0
7000f1d6:	d03f      	beq.n	7000f258 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
7000f1d8:	229c      	movs	r2, #156	@ 0x9c
7000f1da:	2100      	movs	r1, #0
7000f1dc:	68f8      	ldr	r0, [r7, #12]
7000f1de:	f004 fdfc 	bl	70013dda <memset>
    pcb->prio = prio;
7000f1e2:	68fb      	ldr	r3, [r7, #12]
7000f1e4:	79fa      	ldrb	r2, [r7, #7]
7000f1e6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
7000f1e8:	68fb      	ldr	r3, [r7, #12]
7000f1ea:	f44f 6286 	mov.w	r2, #1072	@ 0x430
7000f1ee:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
7000f1f2:	68fb      	ldr	r3, [r7, #12]
7000f1f4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
7000f1f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
7000f1fa:	68fb      	ldr	r3, [r7, #12]
7000f1fc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
7000f1fe:	68fb      	ldr	r3, [r7, #12]
7000f200:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
7000f202:	68fb      	ldr	r3, [r7, #12]
7000f204:	22ff      	movs	r2, #255	@ 0xff
7000f206:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
7000f208:	68fb      	ldr	r3, [r7, #12]
7000f20a:	f44f 7206 	mov.w	r2, #536	@ 0x218
7000f20e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
7000f210:	68fb      	ldr	r3, [r7, #12]
7000f212:	2206      	movs	r2, #6
7000f214:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
7000f218:	68fb      	ldr	r3, [r7, #12]
7000f21a:	2206      	movs	r2, #6
7000f21c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
7000f21e:	68fb      	ldr	r3, [r7, #12]
7000f220:	f64f 72ff 	movw	r2, #65535	@ 0xffff
7000f224:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
7000f226:	68fb      	ldr	r3, [r7, #12]
7000f228:	2201      	movs	r2, #1
7000f22a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
7000f22e:	4b0d      	ldr	r3, [pc, #52]	@ (7000f264 <tcp_alloc+0xf8>)
7000f230:	681a      	ldr	r2, [r3, #0]
7000f232:	68fb      	ldr	r3, [r7, #12]
7000f234:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
7000f236:	4b0c      	ldr	r3, [pc, #48]	@ (7000f268 <tcp_alloc+0xfc>)
7000f238:	781a      	ldrb	r2, [r3, #0]
7000f23a:	68fb      	ldr	r3, [r7, #12]
7000f23c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
7000f23e:	68fb      	ldr	r3, [r7, #12]
7000f240:	f44f 6286 	mov.w	r2, #1072	@ 0x430
7000f244:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
7000f248:	68fb      	ldr	r3, [r7, #12]
7000f24a:	4a08      	ldr	r2, [pc, #32]	@ (7000f26c <tcp_alloc+0x100>)
7000f24c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
7000f250:	68fb      	ldr	r3, [r7, #12]
7000f252:	4a07      	ldr	r2, [pc, #28]	@ (7000f270 <tcp_alloc+0x104>)
7000f254:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
7000f258:	68fb      	ldr	r3, [r7, #12]
}
7000f25a:	4618      	mov	r0, r3
7000f25c:	3710      	adds	r7, #16
7000f25e:	46bd      	mov	sp, r7
7000f260:	bd80      	pop	{r7, pc}
7000f262:	bf00      	nop
7000f264:	24008478 	.word	0x24008478
7000f268:	2400848e 	.word	0x2400848e
7000f26c:	7000ef41 	.word	0x7000ef41
7000f270:	006ddd00 	.word	0x006ddd00

7000f274 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
7000f274:	b580      	push	{r7, lr}
7000f276:	b082      	sub	sp, #8
7000f278:	af00      	add	r7, sp, #0
7000f27a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
7000f27c:	687b      	ldr	r3, [r7, #4]
7000f27e:	2b00      	cmp	r3, #0
7000f280:	d037      	beq.n	7000f2f2 <tcp_pcb_purge+0x7e>

  if (pcb->state != CLOSED &&
7000f282:	687b      	ldr	r3, [r7, #4]
7000f284:	7d1b      	ldrb	r3, [r3, #20]
7000f286:	2b00      	cmp	r3, #0
7000f288:	d033      	beq.n	7000f2f2 <tcp_pcb_purge+0x7e>
      pcb->state != TIME_WAIT &&
7000f28a:	687b      	ldr	r3, [r7, #4]
7000f28c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
7000f28e:	2b0a      	cmp	r3, #10
7000f290:	d02f      	beq.n	7000f2f2 <tcp_pcb_purge+0x7e>
      pcb->state != LISTEN) {
7000f292:	687b      	ldr	r3, [r7, #4]
7000f294:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
7000f296:	2b01      	cmp	r3, #1
7000f298:	d02b      	beq.n	7000f2f2 <tcp_pcb_purge+0x7e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
7000f29a:	687b      	ldr	r3, [r7, #4]
7000f29c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000f29e:	2b00      	cmp	r3, #0
7000f2a0:	d007      	beq.n	7000f2b2 <tcp_pcb_purge+0x3e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
7000f2a2:	687b      	ldr	r3, [r7, #4]
7000f2a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000f2a6:	4618      	mov	r0, r3
7000f2a8:	f7fe fac6 	bl	7000d838 <pbuf_free>
      pcb->refused_data = NULL;
7000f2ac:	687b      	ldr	r3, [r7, #4]
7000f2ae:	2200      	movs	r2, #0
7000f2b0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
7000f2b2:	687b      	ldr	r3, [r7, #4]
7000f2b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000f2b6:	2b00      	cmp	r3, #0
7000f2b8:	d002      	beq.n	7000f2c0 <tcp_pcb_purge+0x4c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
7000f2ba:	6878      	ldr	r0, [r7, #4]
7000f2bc:	f000 f980 	bl	7000f5c0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
7000f2c0:	687b      	ldr	r3, [r7, #4]
7000f2c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
7000f2c6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
7000f2c8:	687b      	ldr	r3, [r7, #4]
7000f2ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7000f2cc:	4618      	mov	r0, r3
7000f2ce:	f7ff fdde 	bl	7000ee8e <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
7000f2d2:	687b      	ldr	r3, [r7, #4]
7000f2d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000f2d6:	4618      	mov	r0, r3
7000f2d8:	f7ff fdd9 	bl	7000ee8e <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
7000f2dc:	687b      	ldr	r3, [r7, #4]
7000f2de:	2200      	movs	r2, #0
7000f2e0:	66da      	str	r2, [r3, #108]	@ 0x6c
7000f2e2:	687b      	ldr	r3, [r7, #4]
7000f2e4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
7000f2e6:	687b      	ldr	r3, [r7, #4]
7000f2e8:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
7000f2ea:	687b      	ldr	r3, [r7, #4]
7000f2ec:	2200      	movs	r2, #0
7000f2ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
7000f2f2:	3708      	adds	r7, #8
7000f2f4:	46bd      	mov	sp, r7
7000f2f6:	bd80      	pop	{r7, pc}

7000f2f8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
7000f2f8:	b580      	push	{r7, lr}
7000f2fa:	b084      	sub	sp, #16
7000f2fc:	af00      	add	r7, sp, #0
7000f2fe:	6078      	str	r0, [r7, #4]
7000f300:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
7000f302:	683b      	ldr	r3, [r7, #0]
7000f304:	2b00      	cmp	r3, #0
7000f306:	d106      	bne.n	7000f316 <tcp_pcb_remove+0x1e>
7000f308:	4b3e      	ldr	r3, [pc, #248]	@ (7000f404 <tcp_pcb_remove+0x10c>)
7000f30a:	f640 0287 	movw	r2, #2183	@ 0x887
7000f30e:	493e      	ldr	r1, [pc, #248]	@ (7000f408 <tcp_pcb_remove+0x110>)
7000f310:	483e      	ldr	r0, [pc, #248]	@ (7000f40c <tcp_pcb_remove+0x114>)
7000f312:	f004 fcfd 	bl	70013d10 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
7000f316:	687b      	ldr	r3, [r7, #4]
7000f318:	2b00      	cmp	r3, #0
7000f31a:	d106      	bne.n	7000f32a <tcp_pcb_remove+0x32>
7000f31c:	4b39      	ldr	r3, [pc, #228]	@ (7000f404 <tcp_pcb_remove+0x10c>)
7000f31e:	f640 0288 	movw	r2, #2184	@ 0x888
7000f322:	493b      	ldr	r1, [pc, #236]	@ (7000f410 <tcp_pcb_remove+0x118>)
7000f324:	4839      	ldr	r0, [pc, #228]	@ (7000f40c <tcp_pcb_remove+0x114>)
7000f326:	f004 fcf3 	bl	70013d10 <iprintf>

  TCP_RMV(pcblist, pcb);
7000f32a:	687b      	ldr	r3, [r7, #4]
7000f32c:	681b      	ldr	r3, [r3, #0]
7000f32e:	683a      	ldr	r2, [r7, #0]
7000f330:	429a      	cmp	r2, r3
7000f332:	d105      	bne.n	7000f340 <tcp_pcb_remove+0x48>
7000f334:	687b      	ldr	r3, [r7, #4]
7000f336:	681b      	ldr	r3, [r3, #0]
7000f338:	68da      	ldr	r2, [r3, #12]
7000f33a:	687b      	ldr	r3, [r7, #4]
7000f33c:	601a      	str	r2, [r3, #0]
7000f33e:	e013      	b.n	7000f368 <tcp_pcb_remove+0x70>
7000f340:	687b      	ldr	r3, [r7, #4]
7000f342:	681b      	ldr	r3, [r3, #0]
7000f344:	60fb      	str	r3, [r7, #12]
7000f346:	e00c      	b.n	7000f362 <tcp_pcb_remove+0x6a>
7000f348:	68fb      	ldr	r3, [r7, #12]
7000f34a:	68db      	ldr	r3, [r3, #12]
7000f34c:	683a      	ldr	r2, [r7, #0]
7000f34e:	429a      	cmp	r2, r3
7000f350:	d104      	bne.n	7000f35c <tcp_pcb_remove+0x64>
7000f352:	683b      	ldr	r3, [r7, #0]
7000f354:	68da      	ldr	r2, [r3, #12]
7000f356:	68fb      	ldr	r3, [r7, #12]
7000f358:	60da      	str	r2, [r3, #12]
7000f35a:	e005      	b.n	7000f368 <tcp_pcb_remove+0x70>
7000f35c:	68fb      	ldr	r3, [r7, #12]
7000f35e:	68db      	ldr	r3, [r3, #12]
7000f360:	60fb      	str	r3, [r7, #12]
7000f362:	68fb      	ldr	r3, [r7, #12]
7000f364:	2b00      	cmp	r3, #0
7000f366:	d1ef      	bne.n	7000f348 <tcp_pcb_remove+0x50>
7000f368:	683b      	ldr	r3, [r7, #0]
7000f36a:	2200      	movs	r2, #0
7000f36c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
7000f36e:	6838      	ldr	r0, [r7, #0]
7000f370:	f7ff ff80 	bl	7000f274 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
7000f374:	683b      	ldr	r3, [r7, #0]
7000f376:	7d1b      	ldrb	r3, [r3, #20]
7000f378:	2b0a      	cmp	r3, #10
7000f37a:	d013      	beq.n	7000f3a4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
7000f37c:	683b      	ldr	r3, [r7, #0]
7000f37e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
7000f380:	2b01      	cmp	r3, #1
7000f382:	d00f      	beq.n	7000f3a4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
7000f384:	683b      	ldr	r3, [r7, #0]
7000f386:	8b5b      	ldrh	r3, [r3, #26]
7000f388:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
7000f38c:	2b00      	cmp	r3, #0
7000f38e:	d009      	beq.n	7000f3a4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
7000f390:	683b      	ldr	r3, [r7, #0]
7000f392:	8b5b      	ldrh	r3, [r3, #26]
7000f394:	f043 0302 	orr.w	r3, r3, #2
7000f398:	b29a      	uxth	r2, r3
7000f39a:	683b      	ldr	r3, [r7, #0]
7000f39c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
7000f39e:	6838      	ldr	r0, [r7, #0]
7000f3a0:	f002 ff6a 	bl	70012278 <tcp_output>
  }

  if (pcb->state != LISTEN) {
7000f3a4:	683b      	ldr	r3, [r7, #0]
7000f3a6:	7d1b      	ldrb	r3, [r3, #20]
7000f3a8:	2b01      	cmp	r3, #1
7000f3aa:	d020      	beq.n	7000f3ee <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
7000f3ac:	683b      	ldr	r3, [r7, #0]
7000f3ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7000f3b0:	2b00      	cmp	r3, #0
7000f3b2:	d006      	beq.n	7000f3c2 <tcp_pcb_remove+0xca>
7000f3b4:	4b13      	ldr	r3, [pc, #76]	@ (7000f404 <tcp_pcb_remove+0x10c>)
7000f3b6:	f640 0297 	movw	r2, #2199	@ 0x897
7000f3ba:	4916      	ldr	r1, [pc, #88]	@ (7000f414 <tcp_pcb_remove+0x11c>)
7000f3bc:	4813      	ldr	r0, [pc, #76]	@ (7000f40c <tcp_pcb_remove+0x114>)
7000f3be:	f004 fca7 	bl	70013d10 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
7000f3c2:	683b      	ldr	r3, [r7, #0]
7000f3c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000f3c6:	2b00      	cmp	r3, #0
7000f3c8:	d006      	beq.n	7000f3d8 <tcp_pcb_remove+0xe0>
7000f3ca:	4b0e      	ldr	r3, [pc, #56]	@ (7000f404 <tcp_pcb_remove+0x10c>)
7000f3cc:	f640 0298 	movw	r2, #2200	@ 0x898
7000f3d0:	4911      	ldr	r1, [pc, #68]	@ (7000f418 <tcp_pcb_remove+0x120>)
7000f3d2:	480e      	ldr	r0, [pc, #56]	@ (7000f40c <tcp_pcb_remove+0x114>)
7000f3d4:	f004 fc9c 	bl	70013d10 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
7000f3d8:	683b      	ldr	r3, [r7, #0]
7000f3da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000f3dc:	2b00      	cmp	r3, #0
7000f3de:	d006      	beq.n	7000f3ee <tcp_pcb_remove+0xf6>
7000f3e0:	4b08      	ldr	r3, [pc, #32]	@ (7000f404 <tcp_pcb_remove+0x10c>)
7000f3e2:	f640 029a 	movw	r2, #2202	@ 0x89a
7000f3e6:	490d      	ldr	r1, [pc, #52]	@ (7000f41c <tcp_pcb_remove+0x124>)
7000f3e8:	4808      	ldr	r0, [pc, #32]	@ (7000f40c <tcp_pcb_remove+0x114>)
7000f3ea:	f004 fc91 	bl	70013d10 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
7000f3ee:	683b      	ldr	r3, [r7, #0]
7000f3f0:	2200      	movs	r2, #0
7000f3f2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
7000f3f4:	683b      	ldr	r3, [r7, #0]
7000f3f6:	2200      	movs	r2, #0
7000f3f8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
7000f3fa:	bf00      	nop
7000f3fc:	3710      	adds	r7, #16
7000f3fe:	46bd      	mov	sp, r7
7000f400:	bd80      	pop	{r7, pc}
7000f402:	bf00      	nop
7000f404:	70015c50 	.word	0x70015c50
7000f408:	700160d8 	.word	0x700160d8
7000f40c:	70015cc0 	.word	0x70015cc0
7000f410:	700160f4 	.word	0x700160f4
7000f414:	70016114 	.word	0x70016114
7000f418:	7001612c 	.word	0x7001612c
7000f41c:	70016148 	.word	0x70016148

7000f420 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
7000f420:	b580      	push	{r7, lr}
7000f422:	b082      	sub	sp, #8
7000f424:	af00      	add	r7, sp, #0
7000f426:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
7000f428:	687b      	ldr	r3, [r7, #4]
7000f42a:	2b00      	cmp	r3, #0
7000f42c:	d106      	bne.n	7000f43c <tcp_next_iss+0x1c>
7000f42e:	4b0a      	ldr	r3, [pc, #40]	@ (7000f458 <tcp_next_iss+0x38>)
7000f430:	f640 02b3 	movw	r2, #2227	@ 0x8b3
7000f434:	4909      	ldr	r1, [pc, #36]	@ (7000f45c <tcp_next_iss+0x3c>)
7000f436:	480a      	ldr	r0, [pc, #40]	@ (7000f460 <tcp_next_iss+0x40>)
7000f438:	f004 fc6a 	bl	70013d10 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
7000f43c:	4b09      	ldr	r3, [pc, #36]	@ (7000f464 <tcp_next_iss+0x44>)
7000f43e:	681a      	ldr	r2, [r3, #0]
7000f440:	4b09      	ldr	r3, [pc, #36]	@ (7000f468 <tcp_next_iss+0x48>)
7000f442:	681b      	ldr	r3, [r3, #0]
7000f444:	4413      	add	r3, r2
7000f446:	4a07      	ldr	r2, [pc, #28]	@ (7000f464 <tcp_next_iss+0x44>)
7000f448:	6013      	str	r3, [r2, #0]
  return iss;
7000f44a:	4b06      	ldr	r3, [pc, #24]	@ (7000f464 <tcp_next_iss+0x44>)
7000f44c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
7000f44e:	4618      	mov	r0, r3
7000f450:	3708      	adds	r7, #8
7000f452:	46bd      	mov	sp, r7
7000f454:	bd80      	pop	{r7, pc}
7000f456:	bf00      	nop
7000f458:	70015c50 	.word	0x70015c50
7000f45c:	70016160 	.word	0x70016160
7000f460:	70015cc0 	.word	0x70015cc0
7000f464:	2400002c 	.word	0x2400002c
7000f468:	24008478 	.word	0x24008478

7000f46c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
7000f46c:	b580      	push	{r7, lr}
7000f46e:	b086      	sub	sp, #24
7000f470:	af00      	add	r7, sp, #0
7000f472:	4603      	mov	r3, r0
7000f474:	60b9      	str	r1, [r7, #8]
7000f476:	607a      	str	r2, [r7, #4]
7000f478:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
7000f47a:	687b      	ldr	r3, [r7, #4]
7000f47c:	2b00      	cmp	r3, #0
7000f47e:	d106      	bne.n	7000f48e <tcp_eff_send_mss_netif+0x22>
7000f480:	4b14      	ldr	r3, [pc, #80]	@ (7000f4d4 <tcp_eff_send_mss_netif+0x68>)
7000f482:	f640 02c9 	movw	r2, #2249	@ 0x8c9
7000f486:	4914      	ldr	r1, [pc, #80]	@ (7000f4d8 <tcp_eff_send_mss_netif+0x6c>)
7000f488:	4814      	ldr	r0, [pc, #80]	@ (7000f4dc <tcp_eff_send_mss_netif+0x70>)
7000f48a:	f004 fc41 	bl	70013d10 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
7000f48e:	68bb      	ldr	r3, [r7, #8]
7000f490:	2b00      	cmp	r3, #0
7000f492:	d101      	bne.n	7000f498 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
7000f494:	89fb      	ldrh	r3, [r7, #14]
7000f496:	e019      	b.n	7000f4cc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
7000f498:	68bb      	ldr	r3, [r7, #8]
7000f49a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
7000f49c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
7000f49e:	8afb      	ldrh	r3, [r7, #22]
7000f4a0:	2b00      	cmp	r3, #0
7000f4a2:	d012      	beq.n	7000f4ca <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
7000f4a4:	2328      	movs	r3, #40	@ 0x28
7000f4a6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
7000f4a8:	8afa      	ldrh	r2, [r7, #22]
7000f4aa:	8abb      	ldrh	r3, [r7, #20]
7000f4ac:	429a      	cmp	r2, r3
7000f4ae:	d904      	bls.n	7000f4ba <tcp_eff_send_mss_netif+0x4e>
7000f4b0:	8afa      	ldrh	r2, [r7, #22]
7000f4b2:	8abb      	ldrh	r3, [r7, #20]
7000f4b4:	1ad3      	subs	r3, r2, r3
7000f4b6:	b29b      	uxth	r3, r3
7000f4b8:	e000      	b.n	7000f4bc <tcp_eff_send_mss_netif+0x50>
7000f4ba:	2300      	movs	r3, #0
7000f4bc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
7000f4be:	8a7a      	ldrh	r2, [r7, #18]
7000f4c0:	89fb      	ldrh	r3, [r7, #14]
7000f4c2:	4293      	cmp	r3, r2
7000f4c4:	bf28      	it	cs
7000f4c6:	4613      	movcs	r3, r2
7000f4c8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
7000f4ca:	89fb      	ldrh	r3, [r7, #14]
}
7000f4cc:	4618      	mov	r0, r3
7000f4ce:	3718      	adds	r7, #24
7000f4d0:	46bd      	mov	sp, r7
7000f4d2:	bd80      	pop	{r7, pc}
7000f4d4:	70015c50 	.word	0x70015c50
7000f4d8:	7001617c 	.word	0x7001617c
7000f4dc:	70015cc0 	.word	0x70015cc0

7000f4e0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
7000f4e0:	b580      	push	{r7, lr}
7000f4e2:	b084      	sub	sp, #16
7000f4e4:	af00      	add	r7, sp, #0
7000f4e6:	6078      	str	r0, [r7, #4]
7000f4e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
7000f4ea:	683b      	ldr	r3, [r7, #0]
7000f4ec:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
7000f4ee:	687b      	ldr	r3, [r7, #4]
7000f4f0:	2b00      	cmp	r3, #0
7000f4f2:	d119      	bne.n	7000f528 <tcp_netif_ip_addr_changed_pcblist+0x48>
7000f4f4:	4b10      	ldr	r3, [pc, #64]	@ (7000f538 <tcp_netif_ip_addr_changed_pcblist+0x58>)
7000f4f6:	f640 1204 	movw	r2, #2308	@ 0x904
7000f4fa:	4910      	ldr	r1, [pc, #64]	@ (7000f53c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
7000f4fc:	4810      	ldr	r0, [pc, #64]	@ (7000f540 <tcp_netif_ip_addr_changed_pcblist+0x60>)
7000f4fe:	f004 fc07 	bl	70013d10 <iprintf>

  while (pcb != NULL) {
7000f502:	e011      	b.n	7000f528 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
7000f504:	68fb      	ldr	r3, [r7, #12]
7000f506:	681a      	ldr	r2, [r3, #0]
7000f508:	687b      	ldr	r3, [r7, #4]
7000f50a:	681b      	ldr	r3, [r3, #0]
7000f50c:	429a      	cmp	r2, r3
7000f50e:	d108      	bne.n	7000f522 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
7000f510:	68fb      	ldr	r3, [r7, #12]
7000f512:	68db      	ldr	r3, [r3, #12]
7000f514:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
7000f516:	68f8      	ldr	r0, [r7, #12]
7000f518:	f7fe fff8 	bl	7000e50c <tcp_abort>
      pcb = next;
7000f51c:	68bb      	ldr	r3, [r7, #8]
7000f51e:	60fb      	str	r3, [r7, #12]
7000f520:	e002      	b.n	7000f528 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
7000f522:	68fb      	ldr	r3, [r7, #12]
7000f524:	68db      	ldr	r3, [r3, #12]
7000f526:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
7000f528:	68fb      	ldr	r3, [r7, #12]
7000f52a:	2b00      	cmp	r3, #0
7000f52c:	d1ea      	bne.n	7000f504 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
7000f52e:	bf00      	nop
7000f530:	bf00      	nop
7000f532:	3710      	adds	r7, #16
7000f534:	46bd      	mov	sp, r7
7000f536:	bd80      	pop	{r7, pc}
7000f538:	70015c50 	.word	0x70015c50
7000f53c:	700161a4 	.word	0x700161a4
7000f540:	70015cc0 	.word	0x70015cc0

7000f544 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
7000f544:	b580      	push	{r7, lr}
7000f546:	b084      	sub	sp, #16
7000f548:	af00      	add	r7, sp, #0
7000f54a:	6078      	str	r0, [r7, #4]
7000f54c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
7000f54e:	687b      	ldr	r3, [r7, #4]
7000f550:	2b00      	cmp	r3, #0
7000f552:	d02a      	beq.n	7000f5aa <tcp_netif_ip_addr_changed+0x66>
7000f554:	687b      	ldr	r3, [r7, #4]
7000f556:	681b      	ldr	r3, [r3, #0]
7000f558:	2b00      	cmp	r3, #0
7000f55a:	d026      	beq.n	7000f5aa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
7000f55c:	4b15      	ldr	r3, [pc, #84]	@ (7000f5b4 <tcp_netif_ip_addr_changed+0x70>)
7000f55e:	681b      	ldr	r3, [r3, #0]
7000f560:	4619      	mov	r1, r3
7000f562:	6878      	ldr	r0, [r7, #4]
7000f564:	f7ff ffbc 	bl	7000f4e0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
7000f568:	4b13      	ldr	r3, [pc, #76]	@ (7000f5b8 <tcp_netif_ip_addr_changed+0x74>)
7000f56a:	681b      	ldr	r3, [r3, #0]
7000f56c:	4619      	mov	r1, r3
7000f56e:	6878      	ldr	r0, [r7, #4]
7000f570:	f7ff ffb6 	bl	7000f4e0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
7000f574:	683b      	ldr	r3, [r7, #0]
7000f576:	2b00      	cmp	r3, #0
7000f578:	d017      	beq.n	7000f5aa <tcp_netif_ip_addr_changed+0x66>
7000f57a:	683b      	ldr	r3, [r7, #0]
7000f57c:	681b      	ldr	r3, [r3, #0]
7000f57e:	2b00      	cmp	r3, #0
7000f580:	d013      	beq.n	7000f5aa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
7000f582:	4b0e      	ldr	r3, [pc, #56]	@ (7000f5bc <tcp_netif_ip_addr_changed+0x78>)
7000f584:	681b      	ldr	r3, [r3, #0]
7000f586:	60fb      	str	r3, [r7, #12]
7000f588:	e00c      	b.n	7000f5a4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
7000f58a:	68fb      	ldr	r3, [r7, #12]
7000f58c:	681a      	ldr	r2, [r3, #0]
7000f58e:	687b      	ldr	r3, [r7, #4]
7000f590:	681b      	ldr	r3, [r3, #0]
7000f592:	429a      	cmp	r2, r3
7000f594:	d103      	bne.n	7000f59e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
7000f596:	683b      	ldr	r3, [r7, #0]
7000f598:	681a      	ldr	r2, [r3, #0]
7000f59a:	68fb      	ldr	r3, [r7, #12]
7000f59c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
7000f59e:	68fb      	ldr	r3, [r7, #12]
7000f5a0:	68db      	ldr	r3, [r3, #12]
7000f5a2:	60fb      	str	r3, [r7, #12]
7000f5a4:	68fb      	ldr	r3, [r7, #12]
7000f5a6:	2b00      	cmp	r3, #0
7000f5a8:	d1ef      	bne.n	7000f58a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
7000f5aa:	bf00      	nop
7000f5ac:	3710      	adds	r7, #16
7000f5ae:	46bd      	mov	sp, r7
7000f5b0:	bd80      	pop	{r7, pc}
7000f5b2:	bf00      	nop
7000f5b4:	24008484 	.word	0x24008484
7000f5b8:	2400847c 	.word	0x2400847c
7000f5bc:	24008480 	.word	0x24008480

7000f5c0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
7000f5c0:	b580      	push	{r7, lr}
7000f5c2:	b082      	sub	sp, #8
7000f5c4:	af00      	add	r7, sp, #0
7000f5c6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
7000f5c8:	687b      	ldr	r3, [r7, #4]
7000f5ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000f5cc:	2b00      	cmp	r3, #0
7000f5ce:	d007      	beq.n	7000f5e0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
7000f5d0:	687b      	ldr	r3, [r7, #4]
7000f5d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000f5d4:	4618      	mov	r0, r3
7000f5d6:	f7ff fc5a 	bl	7000ee8e <tcp_segs_free>
    pcb->ooseq = NULL;
7000f5da:	687b      	ldr	r3, [r7, #4]
7000f5dc:	2200      	movs	r2, #0
7000f5de:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
7000f5e0:	bf00      	nop
7000f5e2:	3708      	adds	r7, #8
7000f5e4:	46bd      	mov	sp, r7
7000f5e6:	bd80      	pop	{r7, pc}

7000f5e8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
7000f5e8:	b590      	push	{r4, r7, lr}
7000f5ea:	b08d      	sub	sp, #52	@ 0x34
7000f5ec:	af04      	add	r7, sp, #16
7000f5ee:	6078      	str	r0, [r7, #4]
7000f5f0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
7000f5f2:	687b      	ldr	r3, [r7, #4]
7000f5f4:	2b00      	cmp	r3, #0
7000f5f6:	d105      	bne.n	7000f604 <tcp_input+0x1c>
7000f5f8:	4b9b      	ldr	r3, [pc, #620]	@ (7000f868 <tcp_input+0x280>)
7000f5fa:	2283      	movs	r2, #131	@ 0x83
7000f5fc:	499b      	ldr	r1, [pc, #620]	@ (7000f86c <tcp_input+0x284>)
7000f5fe:	489c      	ldr	r0, [pc, #624]	@ (7000f870 <tcp_input+0x288>)
7000f600:	f004 fb86 	bl	70013d10 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
7000f604:	687b      	ldr	r3, [r7, #4]
7000f606:	685b      	ldr	r3, [r3, #4]
7000f608:	4a9a      	ldr	r2, [pc, #616]	@ (7000f874 <tcp_input+0x28c>)
7000f60a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
7000f60c:	687b      	ldr	r3, [r7, #4]
7000f60e:	895b      	ldrh	r3, [r3, #10]
7000f610:	2b13      	cmp	r3, #19
7000f612:	f240 83d1 	bls.w	7000fdb8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
7000f616:	4b98      	ldr	r3, [pc, #608]	@ (7000f878 <tcp_input+0x290>)
7000f618:	695b      	ldr	r3, [r3, #20]
7000f61a:	4a97      	ldr	r2, [pc, #604]	@ (7000f878 <tcp_input+0x290>)
7000f61c:	6812      	ldr	r2, [r2, #0]
7000f61e:	4611      	mov	r1, r2
7000f620:	4618      	mov	r0, r3
7000f622:	f7fb ff59 	bl	7000b4d8 <ip4_addr_isbroadcast_u32>
7000f626:	4603      	mov	r3, r0
7000f628:	2b00      	cmp	r3, #0
7000f62a:	f040 83c7 	bne.w	7000fdbc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
7000f62e:	4b92      	ldr	r3, [pc, #584]	@ (7000f878 <tcp_input+0x290>)
7000f630:	695b      	ldr	r3, [r3, #20]
7000f632:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
7000f636:	2be0      	cmp	r3, #224	@ 0xe0
7000f638:	f000 83c0 	beq.w	7000fdbc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
7000f63c:	4b8d      	ldr	r3, [pc, #564]	@ (7000f874 <tcp_input+0x28c>)
7000f63e:	681b      	ldr	r3, [r3, #0]
7000f640:	899b      	ldrh	r3, [r3, #12]
7000f642:	b29b      	uxth	r3, r3
7000f644:	4618      	mov	r0, r3
7000f646:	f7fa f9bb 	bl	700099c0 <lwip_htons>
7000f64a:	4603      	mov	r3, r0
7000f64c:	0b1b      	lsrs	r3, r3, #12
7000f64e:	b29b      	uxth	r3, r3
7000f650:	b2db      	uxtb	r3, r3
7000f652:	009b      	lsls	r3, r3, #2
7000f654:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
7000f656:	7cbb      	ldrb	r3, [r7, #18]
7000f658:	2b13      	cmp	r3, #19
7000f65a:	f240 83b1 	bls.w	7000fdc0 <tcp_input+0x7d8>
7000f65e:	7cbb      	ldrb	r3, [r7, #18]
7000f660:	b29a      	uxth	r2, r3
7000f662:	687b      	ldr	r3, [r7, #4]
7000f664:	891b      	ldrh	r3, [r3, #8]
7000f666:	429a      	cmp	r2, r3
7000f668:	f200 83aa 	bhi.w	7000fdc0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
7000f66c:	7cbb      	ldrb	r3, [r7, #18]
7000f66e:	b29b      	uxth	r3, r3
7000f670:	3b14      	subs	r3, #20
7000f672:	b29a      	uxth	r2, r3
7000f674:	4b81      	ldr	r3, [pc, #516]	@ (7000f87c <tcp_input+0x294>)
7000f676:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
7000f678:	4b81      	ldr	r3, [pc, #516]	@ (7000f880 <tcp_input+0x298>)
7000f67a:	2200      	movs	r2, #0
7000f67c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
7000f67e:	687b      	ldr	r3, [r7, #4]
7000f680:	895a      	ldrh	r2, [r3, #10]
7000f682:	7cbb      	ldrb	r3, [r7, #18]
7000f684:	b29b      	uxth	r3, r3
7000f686:	429a      	cmp	r2, r3
7000f688:	d309      	bcc.n	7000f69e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
7000f68a:	4b7c      	ldr	r3, [pc, #496]	@ (7000f87c <tcp_input+0x294>)
7000f68c:	881a      	ldrh	r2, [r3, #0]
7000f68e:	4b7d      	ldr	r3, [pc, #500]	@ (7000f884 <tcp_input+0x29c>)
7000f690:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
7000f692:	7cbb      	ldrb	r3, [r7, #18]
7000f694:	4619      	mov	r1, r3
7000f696:	6878      	ldr	r0, [r7, #4]
7000f698:	f7fe f852 	bl	7000d740 <pbuf_remove_header>
7000f69c:	e04e      	b.n	7000f73c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
7000f69e:	687b      	ldr	r3, [r7, #4]
7000f6a0:	681b      	ldr	r3, [r3, #0]
7000f6a2:	2b00      	cmp	r3, #0
7000f6a4:	d105      	bne.n	7000f6b2 <tcp_input+0xca>
7000f6a6:	4b70      	ldr	r3, [pc, #448]	@ (7000f868 <tcp_input+0x280>)
7000f6a8:	22c2      	movs	r2, #194	@ 0xc2
7000f6aa:	4977      	ldr	r1, [pc, #476]	@ (7000f888 <tcp_input+0x2a0>)
7000f6ac:	4870      	ldr	r0, [pc, #448]	@ (7000f870 <tcp_input+0x288>)
7000f6ae:	f004 fb2f 	bl	70013d10 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
7000f6b2:	2114      	movs	r1, #20
7000f6b4:	6878      	ldr	r0, [r7, #4]
7000f6b6:	f7fe f843 	bl	7000d740 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
7000f6ba:	687b      	ldr	r3, [r7, #4]
7000f6bc:	895a      	ldrh	r2, [r3, #10]
7000f6be:	4b71      	ldr	r3, [pc, #452]	@ (7000f884 <tcp_input+0x29c>)
7000f6c0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
7000f6c2:	4b6e      	ldr	r3, [pc, #440]	@ (7000f87c <tcp_input+0x294>)
7000f6c4:	881a      	ldrh	r2, [r3, #0]
7000f6c6:	4b6f      	ldr	r3, [pc, #444]	@ (7000f884 <tcp_input+0x29c>)
7000f6c8:	881b      	ldrh	r3, [r3, #0]
7000f6ca:	1ad3      	subs	r3, r2, r3
7000f6cc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
7000f6ce:	4b6d      	ldr	r3, [pc, #436]	@ (7000f884 <tcp_input+0x29c>)
7000f6d0:	881b      	ldrh	r3, [r3, #0]
7000f6d2:	4619      	mov	r1, r3
7000f6d4:	6878      	ldr	r0, [r7, #4]
7000f6d6:	f7fe f833 	bl	7000d740 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
7000f6da:	687b      	ldr	r3, [r7, #4]
7000f6dc:	681b      	ldr	r3, [r3, #0]
7000f6de:	895b      	ldrh	r3, [r3, #10]
7000f6e0:	8a3a      	ldrh	r2, [r7, #16]
7000f6e2:	429a      	cmp	r2, r3
7000f6e4:	f200 836e 	bhi.w	7000fdc4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
7000f6e8:	687b      	ldr	r3, [r7, #4]
7000f6ea:	681b      	ldr	r3, [r3, #0]
7000f6ec:	685b      	ldr	r3, [r3, #4]
7000f6ee:	4a64      	ldr	r2, [pc, #400]	@ (7000f880 <tcp_input+0x298>)
7000f6f0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
7000f6f2:	687b      	ldr	r3, [r7, #4]
7000f6f4:	681b      	ldr	r3, [r3, #0]
7000f6f6:	8a3a      	ldrh	r2, [r7, #16]
7000f6f8:	4611      	mov	r1, r2
7000f6fa:	4618      	mov	r0, r3
7000f6fc:	f7fe f820 	bl	7000d740 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
7000f700:	687b      	ldr	r3, [r7, #4]
7000f702:	891a      	ldrh	r2, [r3, #8]
7000f704:	8a3b      	ldrh	r3, [r7, #16]
7000f706:	1ad3      	subs	r3, r2, r3
7000f708:	b29a      	uxth	r2, r3
7000f70a:	687b      	ldr	r3, [r7, #4]
7000f70c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
7000f70e:	687b      	ldr	r3, [r7, #4]
7000f710:	895b      	ldrh	r3, [r3, #10]
7000f712:	2b00      	cmp	r3, #0
7000f714:	d005      	beq.n	7000f722 <tcp_input+0x13a>
7000f716:	4b54      	ldr	r3, [pc, #336]	@ (7000f868 <tcp_input+0x280>)
7000f718:	22df      	movs	r2, #223	@ 0xdf
7000f71a:	495c      	ldr	r1, [pc, #368]	@ (7000f88c <tcp_input+0x2a4>)
7000f71c:	4854      	ldr	r0, [pc, #336]	@ (7000f870 <tcp_input+0x288>)
7000f71e:	f004 faf7 	bl	70013d10 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
7000f722:	687b      	ldr	r3, [r7, #4]
7000f724:	891a      	ldrh	r2, [r3, #8]
7000f726:	687b      	ldr	r3, [r7, #4]
7000f728:	681b      	ldr	r3, [r3, #0]
7000f72a:	891b      	ldrh	r3, [r3, #8]
7000f72c:	429a      	cmp	r2, r3
7000f72e:	d005      	beq.n	7000f73c <tcp_input+0x154>
7000f730:	4b4d      	ldr	r3, [pc, #308]	@ (7000f868 <tcp_input+0x280>)
7000f732:	22e0      	movs	r2, #224	@ 0xe0
7000f734:	4956      	ldr	r1, [pc, #344]	@ (7000f890 <tcp_input+0x2a8>)
7000f736:	484e      	ldr	r0, [pc, #312]	@ (7000f870 <tcp_input+0x288>)
7000f738:	f004 faea 	bl	70013d10 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
7000f73c:	4b4d      	ldr	r3, [pc, #308]	@ (7000f874 <tcp_input+0x28c>)
7000f73e:	681b      	ldr	r3, [r3, #0]
7000f740:	881b      	ldrh	r3, [r3, #0]
7000f742:	b29b      	uxth	r3, r3
7000f744:	4a4b      	ldr	r2, [pc, #300]	@ (7000f874 <tcp_input+0x28c>)
7000f746:	6814      	ldr	r4, [r2, #0]
7000f748:	4618      	mov	r0, r3
7000f74a:	f7fa f939 	bl	700099c0 <lwip_htons>
7000f74e:	4603      	mov	r3, r0
7000f750:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
7000f752:	4b48      	ldr	r3, [pc, #288]	@ (7000f874 <tcp_input+0x28c>)
7000f754:	681b      	ldr	r3, [r3, #0]
7000f756:	885b      	ldrh	r3, [r3, #2]
7000f758:	b29b      	uxth	r3, r3
7000f75a:	4a46      	ldr	r2, [pc, #280]	@ (7000f874 <tcp_input+0x28c>)
7000f75c:	6814      	ldr	r4, [r2, #0]
7000f75e:	4618      	mov	r0, r3
7000f760:	f7fa f92e 	bl	700099c0 <lwip_htons>
7000f764:	4603      	mov	r3, r0
7000f766:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
7000f768:	4b42      	ldr	r3, [pc, #264]	@ (7000f874 <tcp_input+0x28c>)
7000f76a:	681b      	ldr	r3, [r3, #0]
7000f76c:	685b      	ldr	r3, [r3, #4]
7000f76e:	4a41      	ldr	r2, [pc, #260]	@ (7000f874 <tcp_input+0x28c>)
7000f770:	6814      	ldr	r4, [r2, #0]
7000f772:	4618      	mov	r0, r3
7000f774:	f7fa f939 	bl	700099ea <lwip_htonl>
7000f778:	4603      	mov	r3, r0
7000f77a:	6063      	str	r3, [r4, #4]
7000f77c:	6863      	ldr	r3, [r4, #4]
7000f77e:	4a45      	ldr	r2, [pc, #276]	@ (7000f894 <tcp_input+0x2ac>)
7000f780:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
7000f782:	4b3c      	ldr	r3, [pc, #240]	@ (7000f874 <tcp_input+0x28c>)
7000f784:	681b      	ldr	r3, [r3, #0]
7000f786:	689b      	ldr	r3, [r3, #8]
7000f788:	4a3a      	ldr	r2, [pc, #232]	@ (7000f874 <tcp_input+0x28c>)
7000f78a:	6814      	ldr	r4, [r2, #0]
7000f78c:	4618      	mov	r0, r3
7000f78e:	f7fa f92c 	bl	700099ea <lwip_htonl>
7000f792:	4603      	mov	r3, r0
7000f794:	60a3      	str	r3, [r4, #8]
7000f796:	68a3      	ldr	r3, [r4, #8]
7000f798:	4a3f      	ldr	r2, [pc, #252]	@ (7000f898 <tcp_input+0x2b0>)
7000f79a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
7000f79c:	4b35      	ldr	r3, [pc, #212]	@ (7000f874 <tcp_input+0x28c>)
7000f79e:	681b      	ldr	r3, [r3, #0]
7000f7a0:	89db      	ldrh	r3, [r3, #14]
7000f7a2:	b29b      	uxth	r3, r3
7000f7a4:	4a33      	ldr	r2, [pc, #204]	@ (7000f874 <tcp_input+0x28c>)
7000f7a6:	6814      	ldr	r4, [r2, #0]
7000f7a8:	4618      	mov	r0, r3
7000f7aa:	f7fa f909 	bl	700099c0 <lwip_htons>
7000f7ae:	4603      	mov	r3, r0
7000f7b0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
7000f7b2:	4b30      	ldr	r3, [pc, #192]	@ (7000f874 <tcp_input+0x28c>)
7000f7b4:	681b      	ldr	r3, [r3, #0]
7000f7b6:	899b      	ldrh	r3, [r3, #12]
7000f7b8:	b29b      	uxth	r3, r3
7000f7ba:	4618      	mov	r0, r3
7000f7bc:	f7fa f900 	bl	700099c0 <lwip_htons>
7000f7c0:	4603      	mov	r3, r0
7000f7c2:	b2db      	uxtb	r3, r3
7000f7c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
7000f7c8:	b2da      	uxtb	r2, r3
7000f7ca:	4b34      	ldr	r3, [pc, #208]	@ (7000f89c <tcp_input+0x2b4>)
7000f7cc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
7000f7ce:	687b      	ldr	r3, [r7, #4]
7000f7d0:	891a      	ldrh	r2, [r3, #8]
7000f7d2:	4b33      	ldr	r3, [pc, #204]	@ (7000f8a0 <tcp_input+0x2b8>)
7000f7d4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
7000f7d6:	4b31      	ldr	r3, [pc, #196]	@ (7000f89c <tcp_input+0x2b4>)
7000f7d8:	781b      	ldrb	r3, [r3, #0]
7000f7da:	f003 0303 	and.w	r3, r3, #3
7000f7de:	2b00      	cmp	r3, #0
7000f7e0:	d00c      	beq.n	7000f7fc <tcp_input+0x214>
    tcplen++;
7000f7e2:	4b2f      	ldr	r3, [pc, #188]	@ (7000f8a0 <tcp_input+0x2b8>)
7000f7e4:	881b      	ldrh	r3, [r3, #0]
7000f7e6:	3301      	adds	r3, #1
7000f7e8:	b29a      	uxth	r2, r3
7000f7ea:	4b2d      	ldr	r3, [pc, #180]	@ (7000f8a0 <tcp_input+0x2b8>)
7000f7ec:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
7000f7ee:	687b      	ldr	r3, [r7, #4]
7000f7f0:	891a      	ldrh	r2, [r3, #8]
7000f7f2:	4b2b      	ldr	r3, [pc, #172]	@ (7000f8a0 <tcp_input+0x2b8>)
7000f7f4:	881b      	ldrh	r3, [r3, #0]
7000f7f6:	429a      	cmp	r2, r3
7000f7f8:	f200 82e6 	bhi.w	7000fdc8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
7000f7fc:	2300      	movs	r3, #0
7000f7fe:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
7000f800:	4b28      	ldr	r3, [pc, #160]	@ (7000f8a4 <tcp_input+0x2bc>)
7000f802:	681b      	ldr	r3, [r3, #0]
7000f804:	61fb      	str	r3, [r7, #28]
7000f806:	e09d      	b.n	7000f944 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
7000f808:	69fb      	ldr	r3, [r7, #28]
7000f80a:	7d1b      	ldrb	r3, [r3, #20]
7000f80c:	2b00      	cmp	r3, #0
7000f80e:	d105      	bne.n	7000f81c <tcp_input+0x234>
7000f810:	4b15      	ldr	r3, [pc, #84]	@ (7000f868 <tcp_input+0x280>)
7000f812:	22fb      	movs	r2, #251	@ 0xfb
7000f814:	4924      	ldr	r1, [pc, #144]	@ (7000f8a8 <tcp_input+0x2c0>)
7000f816:	4816      	ldr	r0, [pc, #88]	@ (7000f870 <tcp_input+0x288>)
7000f818:	f004 fa7a 	bl	70013d10 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
7000f81c:	69fb      	ldr	r3, [r7, #28]
7000f81e:	7d1b      	ldrb	r3, [r3, #20]
7000f820:	2b0a      	cmp	r3, #10
7000f822:	d105      	bne.n	7000f830 <tcp_input+0x248>
7000f824:	4b10      	ldr	r3, [pc, #64]	@ (7000f868 <tcp_input+0x280>)
7000f826:	22fc      	movs	r2, #252	@ 0xfc
7000f828:	4920      	ldr	r1, [pc, #128]	@ (7000f8ac <tcp_input+0x2c4>)
7000f82a:	4811      	ldr	r0, [pc, #68]	@ (7000f870 <tcp_input+0x288>)
7000f82c:	f004 fa70 	bl	70013d10 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
7000f830:	69fb      	ldr	r3, [r7, #28]
7000f832:	7d1b      	ldrb	r3, [r3, #20]
7000f834:	2b01      	cmp	r3, #1
7000f836:	d105      	bne.n	7000f844 <tcp_input+0x25c>
7000f838:	4b0b      	ldr	r3, [pc, #44]	@ (7000f868 <tcp_input+0x280>)
7000f83a:	22fd      	movs	r2, #253	@ 0xfd
7000f83c:	491c      	ldr	r1, [pc, #112]	@ (7000f8b0 <tcp_input+0x2c8>)
7000f83e:	480c      	ldr	r0, [pc, #48]	@ (7000f870 <tcp_input+0x288>)
7000f840:	f004 fa66 	bl	70013d10 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
7000f844:	69fb      	ldr	r3, [r7, #28]
7000f846:	7a1b      	ldrb	r3, [r3, #8]
7000f848:	2b00      	cmp	r3, #0
7000f84a:	d033      	beq.n	7000f8b4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
7000f84c:	69fb      	ldr	r3, [r7, #28]
7000f84e:	7a1a      	ldrb	r2, [r3, #8]
7000f850:	4b09      	ldr	r3, [pc, #36]	@ (7000f878 <tcp_input+0x290>)
7000f852:	685b      	ldr	r3, [r3, #4]
7000f854:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000f858:	3301      	adds	r3, #1
7000f85a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
7000f85c:	429a      	cmp	r2, r3
7000f85e:	d029      	beq.n	7000f8b4 <tcp_input+0x2cc>
      prev = pcb;
7000f860:	69fb      	ldr	r3, [r7, #28]
7000f862:	61bb      	str	r3, [r7, #24]
      continue;
7000f864:	e06b      	b.n	7000f93e <tcp_input+0x356>
7000f866:	bf00      	nop
7000f868:	700161d8 	.word	0x700161d8
7000f86c:	70016238 	.word	0x70016238
7000f870:	70016250 	.word	0x70016250
7000f874:	240084a0 	.word	0x240084a0
7000f878:	24005368 	.word	0x24005368
7000f87c:	240084a4 	.word	0x240084a4
7000f880:	240084a8 	.word	0x240084a8
7000f884:	240084a6 	.word	0x240084a6
7000f888:	70016278 	.word	0x70016278
7000f88c:	70016288 	.word	0x70016288
7000f890:	70016294 	.word	0x70016294
7000f894:	240084b0 	.word	0x240084b0
7000f898:	240084b4 	.word	0x240084b4
7000f89c:	240084bc 	.word	0x240084bc
7000f8a0:	240084ba 	.word	0x240084ba
7000f8a4:	24008484 	.word	0x24008484
7000f8a8:	700162b4 	.word	0x700162b4
7000f8ac:	700162dc 	.word	0x700162dc
7000f8b0:	70016308 	.word	0x70016308
    }

    if (pcb->remote_port == tcphdr->src &&
7000f8b4:	69fb      	ldr	r3, [r7, #28]
7000f8b6:	8b1a      	ldrh	r2, [r3, #24]
7000f8b8:	4b72      	ldr	r3, [pc, #456]	@ (7000fa84 <tcp_input+0x49c>)
7000f8ba:	681b      	ldr	r3, [r3, #0]
7000f8bc:	881b      	ldrh	r3, [r3, #0]
7000f8be:	b29b      	uxth	r3, r3
7000f8c0:	429a      	cmp	r2, r3
7000f8c2:	d13a      	bne.n	7000f93a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
7000f8c4:	69fb      	ldr	r3, [r7, #28]
7000f8c6:	8ada      	ldrh	r2, [r3, #22]
7000f8c8:	4b6e      	ldr	r3, [pc, #440]	@ (7000fa84 <tcp_input+0x49c>)
7000f8ca:	681b      	ldr	r3, [r3, #0]
7000f8cc:	885b      	ldrh	r3, [r3, #2]
7000f8ce:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
7000f8d0:	429a      	cmp	r2, r3
7000f8d2:	d132      	bne.n	7000f93a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
7000f8d4:	69fb      	ldr	r3, [r7, #28]
7000f8d6:	685a      	ldr	r2, [r3, #4]
7000f8d8:	4b6b      	ldr	r3, [pc, #428]	@ (7000fa88 <tcp_input+0x4a0>)
7000f8da:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
7000f8dc:	429a      	cmp	r2, r3
7000f8de:	d12c      	bne.n	7000f93a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
7000f8e0:	69fb      	ldr	r3, [r7, #28]
7000f8e2:	681a      	ldr	r2, [r3, #0]
7000f8e4:	4b68      	ldr	r3, [pc, #416]	@ (7000fa88 <tcp_input+0x4a0>)
7000f8e6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
7000f8e8:	429a      	cmp	r2, r3
7000f8ea:	d126      	bne.n	7000f93a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
7000f8ec:	69fb      	ldr	r3, [r7, #28]
7000f8ee:	68db      	ldr	r3, [r3, #12]
7000f8f0:	69fa      	ldr	r2, [r7, #28]
7000f8f2:	429a      	cmp	r2, r3
7000f8f4:	d106      	bne.n	7000f904 <tcp_input+0x31c>
7000f8f6:	4b65      	ldr	r3, [pc, #404]	@ (7000fa8c <tcp_input+0x4a4>)
7000f8f8:	f240 120d 	movw	r2, #269	@ 0x10d
7000f8fc:	4964      	ldr	r1, [pc, #400]	@ (7000fa90 <tcp_input+0x4a8>)
7000f8fe:	4865      	ldr	r0, [pc, #404]	@ (7000fa94 <tcp_input+0x4ac>)
7000f900:	f004 fa06 	bl	70013d10 <iprintf>
      if (prev != NULL) {
7000f904:	69bb      	ldr	r3, [r7, #24]
7000f906:	2b00      	cmp	r3, #0
7000f908:	d00a      	beq.n	7000f920 <tcp_input+0x338>
        prev->next = pcb->next;
7000f90a:	69fb      	ldr	r3, [r7, #28]
7000f90c:	68da      	ldr	r2, [r3, #12]
7000f90e:	69bb      	ldr	r3, [r7, #24]
7000f910:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
7000f912:	4b61      	ldr	r3, [pc, #388]	@ (7000fa98 <tcp_input+0x4b0>)
7000f914:	681a      	ldr	r2, [r3, #0]
7000f916:	69fb      	ldr	r3, [r7, #28]
7000f918:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
7000f91a:	4a5f      	ldr	r2, [pc, #380]	@ (7000fa98 <tcp_input+0x4b0>)
7000f91c:	69fb      	ldr	r3, [r7, #28]
7000f91e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
7000f920:	69fb      	ldr	r3, [r7, #28]
7000f922:	68db      	ldr	r3, [r3, #12]
7000f924:	69fa      	ldr	r2, [r7, #28]
7000f926:	429a      	cmp	r2, r3
7000f928:	d111      	bne.n	7000f94e <tcp_input+0x366>
7000f92a:	4b58      	ldr	r3, [pc, #352]	@ (7000fa8c <tcp_input+0x4a4>)
7000f92c:	f240 1215 	movw	r2, #277	@ 0x115
7000f930:	495a      	ldr	r1, [pc, #360]	@ (7000fa9c <tcp_input+0x4b4>)
7000f932:	4858      	ldr	r0, [pc, #352]	@ (7000fa94 <tcp_input+0x4ac>)
7000f934:	f004 f9ec 	bl	70013d10 <iprintf>
      break;
7000f938:	e009      	b.n	7000f94e <tcp_input+0x366>
    }
    prev = pcb;
7000f93a:	69fb      	ldr	r3, [r7, #28]
7000f93c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
7000f93e:	69fb      	ldr	r3, [r7, #28]
7000f940:	68db      	ldr	r3, [r3, #12]
7000f942:	61fb      	str	r3, [r7, #28]
7000f944:	69fb      	ldr	r3, [r7, #28]
7000f946:	2b00      	cmp	r3, #0
7000f948:	f47f af5e 	bne.w	7000f808 <tcp_input+0x220>
7000f94c:	e000      	b.n	7000f950 <tcp_input+0x368>
      break;
7000f94e:	bf00      	nop
  }

  if (pcb == NULL) {
7000f950:	69fb      	ldr	r3, [r7, #28]
7000f952:	2b00      	cmp	r3, #0
7000f954:	f040 80aa 	bne.w	7000faac <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
7000f958:	4b51      	ldr	r3, [pc, #324]	@ (7000faa0 <tcp_input+0x4b8>)
7000f95a:	681b      	ldr	r3, [r3, #0]
7000f95c:	61fb      	str	r3, [r7, #28]
7000f95e:	e03f      	b.n	7000f9e0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
7000f960:	69fb      	ldr	r3, [r7, #28]
7000f962:	7d1b      	ldrb	r3, [r3, #20]
7000f964:	2b0a      	cmp	r3, #10
7000f966:	d006      	beq.n	7000f976 <tcp_input+0x38e>
7000f968:	4b48      	ldr	r3, [pc, #288]	@ (7000fa8c <tcp_input+0x4a4>)
7000f96a:	f240 121f 	movw	r2, #287	@ 0x11f
7000f96e:	494d      	ldr	r1, [pc, #308]	@ (7000faa4 <tcp_input+0x4bc>)
7000f970:	4848      	ldr	r0, [pc, #288]	@ (7000fa94 <tcp_input+0x4ac>)
7000f972:	f004 f9cd 	bl	70013d10 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
7000f976:	69fb      	ldr	r3, [r7, #28]
7000f978:	7a1b      	ldrb	r3, [r3, #8]
7000f97a:	2b00      	cmp	r3, #0
7000f97c:	d009      	beq.n	7000f992 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
7000f97e:	69fb      	ldr	r3, [r7, #28]
7000f980:	7a1a      	ldrb	r2, [r3, #8]
7000f982:	4b41      	ldr	r3, [pc, #260]	@ (7000fa88 <tcp_input+0x4a0>)
7000f984:	685b      	ldr	r3, [r3, #4]
7000f986:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000f98a:	3301      	adds	r3, #1
7000f98c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
7000f98e:	429a      	cmp	r2, r3
7000f990:	d122      	bne.n	7000f9d8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
7000f992:	69fb      	ldr	r3, [r7, #28]
7000f994:	8b1a      	ldrh	r2, [r3, #24]
7000f996:	4b3b      	ldr	r3, [pc, #236]	@ (7000fa84 <tcp_input+0x49c>)
7000f998:	681b      	ldr	r3, [r3, #0]
7000f99a:	881b      	ldrh	r3, [r3, #0]
7000f99c:	b29b      	uxth	r3, r3
7000f99e:	429a      	cmp	r2, r3
7000f9a0:	d11b      	bne.n	7000f9da <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
7000f9a2:	69fb      	ldr	r3, [r7, #28]
7000f9a4:	8ada      	ldrh	r2, [r3, #22]
7000f9a6:	4b37      	ldr	r3, [pc, #220]	@ (7000fa84 <tcp_input+0x49c>)
7000f9a8:	681b      	ldr	r3, [r3, #0]
7000f9aa:	885b      	ldrh	r3, [r3, #2]
7000f9ac:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
7000f9ae:	429a      	cmp	r2, r3
7000f9b0:	d113      	bne.n	7000f9da <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
7000f9b2:	69fb      	ldr	r3, [r7, #28]
7000f9b4:	685a      	ldr	r2, [r3, #4]
7000f9b6:	4b34      	ldr	r3, [pc, #208]	@ (7000fa88 <tcp_input+0x4a0>)
7000f9b8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
7000f9ba:	429a      	cmp	r2, r3
7000f9bc:	d10d      	bne.n	7000f9da <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
7000f9be:	69fb      	ldr	r3, [r7, #28]
7000f9c0:	681a      	ldr	r2, [r3, #0]
7000f9c2:	4b31      	ldr	r3, [pc, #196]	@ (7000fa88 <tcp_input+0x4a0>)
7000f9c4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
7000f9c6:	429a      	cmp	r2, r3
7000f9c8:	d107      	bne.n	7000f9da <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
7000f9ca:	69f8      	ldr	r0, [r7, #28]
7000f9cc:	f000 fb56 	bl	7001007c <tcp_timewait_input>
        }
        pbuf_free(p);
7000f9d0:	6878      	ldr	r0, [r7, #4]
7000f9d2:	f7fd ff31 	bl	7000d838 <pbuf_free>
        return;
7000f9d6:	e1fd      	b.n	7000fdd4 <tcp_input+0x7ec>
        continue;
7000f9d8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
7000f9da:	69fb      	ldr	r3, [r7, #28]
7000f9dc:	68db      	ldr	r3, [r3, #12]
7000f9de:	61fb      	str	r3, [r7, #28]
7000f9e0:	69fb      	ldr	r3, [r7, #28]
7000f9e2:	2b00      	cmp	r3, #0
7000f9e4:	d1bc      	bne.n	7000f960 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
7000f9e6:	2300      	movs	r3, #0
7000f9e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
7000f9ea:	4b2f      	ldr	r3, [pc, #188]	@ (7000faa8 <tcp_input+0x4c0>)
7000f9ec:	681b      	ldr	r3, [r3, #0]
7000f9ee:	617b      	str	r3, [r7, #20]
7000f9f0:	e02a      	b.n	7000fa48 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
7000f9f2:	697b      	ldr	r3, [r7, #20]
7000f9f4:	7a1b      	ldrb	r3, [r3, #8]
7000f9f6:	2b00      	cmp	r3, #0
7000f9f8:	d00c      	beq.n	7000fa14 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
7000f9fa:	697b      	ldr	r3, [r7, #20]
7000f9fc:	7a1a      	ldrb	r2, [r3, #8]
7000f9fe:	4b22      	ldr	r3, [pc, #136]	@ (7000fa88 <tcp_input+0x4a0>)
7000fa00:	685b      	ldr	r3, [r3, #4]
7000fa02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000fa06:	3301      	adds	r3, #1
7000fa08:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
7000fa0a:	429a      	cmp	r2, r3
7000fa0c:	d002      	beq.n	7000fa14 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
7000fa0e:	697b      	ldr	r3, [r7, #20]
7000fa10:	61bb      	str	r3, [r7, #24]
        continue;
7000fa12:	e016      	b.n	7000fa42 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
7000fa14:	697b      	ldr	r3, [r7, #20]
7000fa16:	8ada      	ldrh	r2, [r3, #22]
7000fa18:	4b1a      	ldr	r3, [pc, #104]	@ (7000fa84 <tcp_input+0x49c>)
7000fa1a:	681b      	ldr	r3, [r3, #0]
7000fa1c:	885b      	ldrh	r3, [r3, #2]
7000fa1e:	b29b      	uxth	r3, r3
7000fa20:	429a      	cmp	r2, r3
7000fa22:	d10c      	bne.n	7000fa3e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
7000fa24:	697b      	ldr	r3, [r7, #20]
7000fa26:	681a      	ldr	r2, [r3, #0]
7000fa28:	4b17      	ldr	r3, [pc, #92]	@ (7000fa88 <tcp_input+0x4a0>)
7000fa2a:	695b      	ldr	r3, [r3, #20]
7000fa2c:	429a      	cmp	r2, r3
7000fa2e:	d00f      	beq.n	7000fa50 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
7000fa30:	697b      	ldr	r3, [r7, #20]
7000fa32:	2b00      	cmp	r3, #0
7000fa34:	d00d      	beq.n	7000fa52 <tcp_input+0x46a>
7000fa36:	697b      	ldr	r3, [r7, #20]
7000fa38:	681b      	ldr	r3, [r3, #0]
7000fa3a:	2b00      	cmp	r3, #0
7000fa3c:	d009      	beq.n	7000fa52 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
7000fa3e:	697b      	ldr	r3, [r7, #20]
7000fa40:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
7000fa42:	697b      	ldr	r3, [r7, #20]
7000fa44:	68db      	ldr	r3, [r3, #12]
7000fa46:	617b      	str	r3, [r7, #20]
7000fa48:	697b      	ldr	r3, [r7, #20]
7000fa4a:	2b00      	cmp	r3, #0
7000fa4c:	d1d1      	bne.n	7000f9f2 <tcp_input+0x40a>
7000fa4e:	e000      	b.n	7000fa52 <tcp_input+0x46a>
            break;
7000fa50:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
7000fa52:	697b      	ldr	r3, [r7, #20]
7000fa54:	2b00      	cmp	r3, #0
7000fa56:	d029      	beq.n	7000faac <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
7000fa58:	69bb      	ldr	r3, [r7, #24]
7000fa5a:	2b00      	cmp	r3, #0
7000fa5c:	d00a      	beq.n	7000fa74 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
7000fa5e:	697b      	ldr	r3, [r7, #20]
7000fa60:	68da      	ldr	r2, [r3, #12]
7000fa62:	69bb      	ldr	r3, [r7, #24]
7000fa64:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
7000fa66:	4b10      	ldr	r3, [pc, #64]	@ (7000faa8 <tcp_input+0x4c0>)
7000fa68:	681a      	ldr	r2, [r3, #0]
7000fa6a:	697b      	ldr	r3, [r7, #20]
7000fa6c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
7000fa6e:	4a0e      	ldr	r2, [pc, #56]	@ (7000faa8 <tcp_input+0x4c0>)
7000fa70:	697b      	ldr	r3, [r7, #20]
7000fa72:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
7000fa74:	6978      	ldr	r0, [r7, #20]
7000fa76:	f000 fa03 	bl	7000fe80 <tcp_listen_input>
      }
      pbuf_free(p);
7000fa7a:	6878      	ldr	r0, [r7, #4]
7000fa7c:	f7fd fedc 	bl	7000d838 <pbuf_free>
      return;
7000fa80:	e1a8      	b.n	7000fdd4 <tcp_input+0x7ec>
7000fa82:	bf00      	nop
7000fa84:	240084a0 	.word	0x240084a0
7000fa88:	24005368 	.word	0x24005368
7000fa8c:	700161d8 	.word	0x700161d8
7000fa90:	70016330 	.word	0x70016330
7000fa94:	70016250 	.word	0x70016250
7000fa98:	24008484 	.word	0x24008484
7000fa9c:	7001635c 	.word	0x7001635c
7000faa0:	24008488 	.word	0x24008488
7000faa4:	70016388 	.word	0x70016388
7000faa8:	24008480 	.word	0x24008480
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
7000faac:	69fb      	ldr	r3, [r7, #28]
7000faae:	2b00      	cmp	r3, #0
7000fab0:	f000 8158 	beq.w	7000fd64 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
7000fab4:	4b95      	ldr	r3, [pc, #596]	@ (7000fd0c <tcp_input+0x724>)
7000fab6:	2200      	movs	r2, #0
7000fab8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
7000faba:	687b      	ldr	r3, [r7, #4]
7000fabc:	891a      	ldrh	r2, [r3, #8]
7000fabe:	4b93      	ldr	r3, [pc, #588]	@ (7000fd0c <tcp_input+0x724>)
7000fac0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
7000fac2:	4a92      	ldr	r2, [pc, #584]	@ (7000fd0c <tcp_input+0x724>)
7000fac4:	687b      	ldr	r3, [r7, #4]
7000fac6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
7000fac8:	4b91      	ldr	r3, [pc, #580]	@ (7000fd10 <tcp_input+0x728>)
7000faca:	681b      	ldr	r3, [r3, #0]
7000facc:	4a8f      	ldr	r2, [pc, #572]	@ (7000fd0c <tcp_input+0x724>)
7000face:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
7000fad0:	4b90      	ldr	r3, [pc, #576]	@ (7000fd14 <tcp_input+0x72c>)
7000fad2:	2200      	movs	r2, #0
7000fad4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
7000fad6:	4b90      	ldr	r3, [pc, #576]	@ (7000fd18 <tcp_input+0x730>)
7000fad8:	2200      	movs	r2, #0
7000fada:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
7000fadc:	4b8f      	ldr	r3, [pc, #572]	@ (7000fd1c <tcp_input+0x734>)
7000fade:	2200      	movs	r2, #0
7000fae0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
7000fae2:	4b8f      	ldr	r3, [pc, #572]	@ (7000fd20 <tcp_input+0x738>)
7000fae4:	781b      	ldrb	r3, [r3, #0]
7000fae6:	f003 0308 	and.w	r3, r3, #8
7000faea:	2b00      	cmp	r3, #0
7000faec:	d006      	beq.n	7000fafc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
7000faee:	687b      	ldr	r3, [r7, #4]
7000faf0:	7b5b      	ldrb	r3, [r3, #13]
7000faf2:	f043 0301 	orr.w	r3, r3, #1
7000faf6:	b2da      	uxtb	r2, r3
7000faf8:	687b      	ldr	r3, [r7, #4]
7000fafa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
7000fafc:	69fb      	ldr	r3, [r7, #28]
7000fafe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000fb00:	2b00      	cmp	r3, #0
7000fb02:	d017      	beq.n	7000fb34 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
7000fb04:	69f8      	ldr	r0, [r7, #28]
7000fb06:	f7ff f953 	bl	7000edb0 <tcp_process_refused_data>
7000fb0a:	4603      	mov	r3, r0
7000fb0c:	f113 0f0d 	cmn.w	r3, #13
7000fb10:	d007      	beq.n	7000fb22 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
7000fb12:	69fb      	ldr	r3, [r7, #28]
7000fb14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
7000fb16:	2b00      	cmp	r3, #0
7000fb18:	d00c      	beq.n	7000fb34 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
7000fb1a:	4b82      	ldr	r3, [pc, #520]	@ (7000fd24 <tcp_input+0x73c>)
7000fb1c:	881b      	ldrh	r3, [r3, #0]
7000fb1e:	2b00      	cmp	r3, #0
7000fb20:	d008      	beq.n	7000fb34 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
7000fb22:	69fb      	ldr	r3, [r7, #28]
7000fb24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
7000fb26:	2b00      	cmp	r3, #0
7000fb28:	f040 80e3 	bne.w	7000fcf2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
7000fb2c:	69f8      	ldr	r0, [r7, #28]
7000fb2e:	f003 f9a9 	bl	70012e84 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
7000fb32:	e0de      	b.n	7000fcf2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
7000fb34:	4a7c      	ldr	r2, [pc, #496]	@ (7000fd28 <tcp_input+0x740>)
7000fb36:	69fb      	ldr	r3, [r7, #28]
7000fb38:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
7000fb3a:	69f8      	ldr	r0, [r7, #28]
7000fb3c:	f000 fb18 	bl	70010170 <tcp_process>
7000fb40:	4603      	mov	r3, r0
7000fb42:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
7000fb44:	f997 3013 	ldrsb.w	r3, [r7, #19]
7000fb48:	f113 0f0d 	cmn.w	r3, #13
7000fb4c:	f000 80d3 	beq.w	7000fcf6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
7000fb50:	4b71      	ldr	r3, [pc, #452]	@ (7000fd18 <tcp_input+0x730>)
7000fb52:	781b      	ldrb	r3, [r3, #0]
7000fb54:	f003 0308 	and.w	r3, r3, #8
7000fb58:	2b00      	cmp	r3, #0
7000fb5a:	d015      	beq.n	7000fb88 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
7000fb5c:	69fb      	ldr	r3, [r7, #28]
7000fb5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
7000fb62:	2b00      	cmp	r3, #0
7000fb64:	d008      	beq.n	7000fb78 <tcp_input+0x590>
7000fb66:	69fb      	ldr	r3, [r7, #28]
7000fb68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
7000fb6c:	69fa      	ldr	r2, [r7, #28]
7000fb6e:	6912      	ldr	r2, [r2, #16]
7000fb70:	f06f 010d 	mvn.w	r1, #13
7000fb74:	4610      	mov	r0, r2
7000fb76:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
7000fb78:	69f9      	ldr	r1, [r7, #28]
7000fb7a:	486c      	ldr	r0, [pc, #432]	@ (7000fd2c <tcp_input+0x744>)
7000fb7c:	f7ff fbbc 	bl	7000f2f8 <tcp_pcb_remove>
        tcp_free(pcb);
7000fb80:	69f8      	ldr	r0, [r7, #28]
7000fb82:	f7fe f9f3 	bl	7000df6c <tcp_free>
7000fb86:	e0da      	b.n	7000fd3e <tcp_input+0x756>
      } else {
        err = ERR_OK;
7000fb88:	2300      	movs	r3, #0
7000fb8a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
7000fb8c:	4b63      	ldr	r3, [pc, #396]	@ (7000fd1c <tcp_input+0x734>)
7000fb8e:	881b      	ldrh	r3, [r3, #0]
7000fb90:	2b00      	cmp	r3, #0
7000fb92:	d01d      	beq.n	7000fbd0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
7000fb94:	4b61      	ldr	r3, [pc, #388]	@ (7000fd1c <tcp_input+0x734>)
7000fb96:	881b      	ldrh	r3, [r3, #0]
7000fb98:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
7000fb9a:	69fb      	ldr	r3, [r7, #28]
7000fb9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
7000fba0:	2b00      	cmp	r3, #0
7000fba2:	d00a      	beq.n	7000fbba <tcp_input+0x5d2>
7000fba4:	69fb      	ldr	r3, [r7, #28]
7000fba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
7000fbaa:	69fa      	ldr	r2, [r7, #28]
7000fbac:	6910      	ldr	r0, [r2, #16]
7000fbae:	89fa      	ldrh	r2, [r7, #14]
7000fbb0:	69f9      	ldr	r1, [r7, #28]
7000fbb2:	4798      	blx	r3
7000fbb4:	4603      	mov	r3, r0
7000fbb6:	74fb      	strb	r3, [r7, #19]
7000fbb8:	e001      	b.n	7000fbbe <tcp_input+0x5d6>
7000fbba:	2300      	movs	r3, #0
7000fbbc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
7000fbbe:	f997 3013 	ldrsb.w	r3, [r7, #19]
7000fbc2:	f113 0f0d 	cmn.w	r3, #13
7000fbc6:	f000 8098 	beq.w	7000fcfa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
7000fbca:	4b54      	ldr	r3, [pc, #336]	@ (7000fd1c <tcp_input+0x734>)
7000fbcc:	2200      	movs	r2, #0
7000fbce:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
7000fbd0:	69f8      	ldr	r0, [r7, #28]
7000fbd2:	f000 f915 	bl	7000fe00 <tcp_input_delayed_close>
7000fbd6:	4603      	mov	r3, r0
7000fbd8:	2b00      	cmp	r3, #0
7000fbda:	f040 8090 	bne.w	7000fcfe <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
7000fbde:	4b4d      	ldr	r3, [pc, #308]	@ (7000fd14 <tcp_input+0x72c>)
7000fbe0:	681b      	ldr	r3, [r3, #0]
7000fbe2:	2b00      	cmp	r3, #0
7000fbe4:	d041      	beq.n	7000fc6a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
7000fbe6:	69fb      	ldr	r3, [r7, #28]
7000fbe8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000fbea:	2b00      	cmp	r3, #0
7000fbec:	d006      	beq.n	7000fbfc <tcp_input+0x614>
7000fbee:	4b50      	ldr	r3, [pc, #320]	@ (7000fd30 <tcp_input+0x748>)
7000fbf0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
7000fbf4:	494f      	ldr	r1, [pc, #316]	@ (7000fd34 <tcp_input+0x74c>)
7000fbf6:	4850      	ldr	r0, [pc, #320]	@ (7000fd38 <tcp_input+0x750>)
7000fbf8:	f004 f88a 	bl	70013d10 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
7000fbfc:	69fb      	ldr	r3, [r7, #28]
7000fbfe:	8b5b      	ldrh	r3, [r3, #26]
7000fc00:	f003 0310 	and.w	r3, r3, #16
7000fc04:	2b00      	cmp	r3, #0
7000fc06:	d008      	beq.n	7000fc1a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
7000fc08:	4b42      	ldr	r3, [pc, #264]	@ (7000fd14 <tcp_input+0x72c>)
7000fc0a:	681b      	ldr	r3, [r3, #0]
7000fc0c:	4618      	mov	r0, r3
7000fc0e:	f7fd fe13 	bl	7000d838 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
7000fc12:	69f8      	ldr	r0, [r7, #28]
7000fc14:	f7fe fc7a 	bl	7000e50c <tcp_abort>
            goto aborted;
7000fc18:	e091      	b.n	7000fd3e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
7000fc1a:	69fb      	ldr	r3, [r7, #28]
7000fc1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
7000fc20:	2b00      	cmp	r3, #0
7000fc22:	d00c      	beq.n	7000fc3e <tcp_input+0x656>
7000fc24:	69fb      	ldr	r3, [r7, #28]
7000fc26:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
7000fc2a:	69fb      	ldr	r3, [r7, #28]
7000fc2c:	6918      	ldr	r0, [r3, #16]
7000fc2e:	4b39      	ldr	r3, [pc, #228]	@ (7000fd14 <tcp_input+0x72c>)
7000fc30:	681a      	ldr	r2, [r3, #0]
7000fc32:	2300      	movs	r3, #0
7000fc34:	69f9      	ldr	r1, [r7, #28]
7000fc36:	47a0      	blx	r4
7000fc38:	4603      	mov	r3, r0
7000fc3a:	74fb      	strb	r3, [r7, #19]
7000fc3c:	e008      	b.n	7000fc50 <tcp_input+0x668>
7000fc3e:	4b35      	ldr	r3, [pc, #212]	@ (7000fd14 <tcp_input+0x72c>)
7000fc40:	681a      	ldr	r2, [r3, #0]
7000fc42:	2300      	movs	r3, #0
7000fc44:	69f9      	ldr	r1, [r7, #28]
7000fc46:	2000      	movs	r0, #0
7000fc48:	f7ff f97a 	bl	7000ef40 <tcp_recv_null>
7000fc4c:	4603      	mov	r3, r0
7000fc4e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
7000fc50:	f997 3013 	ldrsb.w	r3, [r7, #19]
7000fc54:	f113 0f0d 	cmn.w	r3, #13
7000fc58:	d053      	beq.n	7000fd02 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
7000fc5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
7000fc5e:	2b00      	cmp	r3, #0
7000fc60:	d003      	beq.n	7000fc6a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
7000fc62:	4b2c      	ldr	r3, [pc, #176]	@ (7000fd14 <tcp_input+0x72c>)
7000fc64:	681a      	ldr	r2, [r3, #0]
7000fc66:	69fb      	ldr	r3, [r7, #28]
7000fc68:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
7000fc6a:	4b2b      	ldr	r3, [pc, #172]	@ (7000fd18 <tcp_input+0x730>)
7000fc6c:	781b      	ldrb	r3, [r3, #0]
7000fc6e:	f003 0320 	and.w	r3, r3, #32
7000fc72:	2b00      	cmp	r3, #0
7000fc74:	d030      	beq.n	7000fcd8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
7000fc76:	69fb      	ldr	r3, [r7, #28]
7000fc78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000fc7a:	2b00      	cmp	r3, #0
7000fc7c:	d009      	beq.n	7000fc92 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
7000fc7e:	69fb      	ldr	r3, [r7, #28]
7000fc80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000fc82:	7b5a      	ldrb	r2, [r3, #13]
7000fc84:	69fb      	ldr	r3, [r7, #28]
7000fc86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000fc88:	f042 0220 	orr.w	r2, r2, #32
7000fc8c:	b2d2      	uxtb	r2, r2
7000fc8e:	735a      	strb	r2, [r3, #13]
7000fc90:	e022      	b.n	7000fcd8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
7000fc92:	69fb      	ldr	r3, [r7, #28]
7000fc94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
7000fc96:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
7000fc9a:	d005      	beq.n	7000fca8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
7000fc9c:	69fb      	ldr	r3, [r7, #28]
7000fc9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
7000fca0:	3301      	adds	r3, #1
7000fca2:	b29a      	uxth	r2, r3
7000fca4:	69fb      	ldr	r3, [r7, #28]
7000fca6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
7000fca8:	69fb      	ldr	r3, [r7, #28]
7000fcaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
7000fcae:	2b00      	cmp	r3, #0
7000fcb0:	d00b      	beq.n	7000fcca <tcp_input+0x6e2>
7000fcb2:	69fb      	ldr	r3, [r7, #28]
7000fcb4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
7000fcb8:	69fb      	ldr	r3, [r7, #28]
7000fcba:	6918      	ldr	r0, [r3, #16]
7000fcbc:	2300      	movs	r3, #0
7000fcbe:	2200      	movs	r2, #0
7000fcc0:	69f9      	ldr	r1, [r7, #28]
7000fcc2:	47a0      	blx	r4
7000fcc4:	4603      	mov	r3, r0
7000fcc6:	74fb      	strb	r3, [r7, #19]
7000fcc8:	e001      	b.n	7000fcce <tcp_input+0x6e6>
7000fcca:	2300      	movs	r3, #0
7000fccc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
7000fcce:	f997 3013 	ldrsb.w	r3, [r7, #19]
7000fcd2:	f113 0f0d 	cmn.w	r3, #13
7000fcd6:	d016      	beq.n	7000fd06 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
7000fcd8:	4b13      	ldr	r3, [pc, #76]	@ (7000fd28 <tcp_input+0x740>)
7000fcda:	2200      	movs	r2, #0
7000fcdc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
7000fcde:	69f8      	ldr	r0, [r7, #28]
7000fce0:	f000 f88e 	bl	7000fe00 <tcp_input_delayed_close>
7000fce4:	4603      	mov	r3, r0
7000fce6:	2b00      	cmp	r3, #0
7000fce8:	d128      	bne.n	7000fd3c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
7000fcea:	69f8      	ldr	r0, [r7, #28]
7000fcec:	f002 fac4 	bl	70012278 <tcp_output>
7000fcf0:	e025      	b.n	7000fd3e <tcp_input+0x756>
        goto aborted;
7000fcf2:	bf00      	nop
7000fcf4:	e023      	b.n	7000fd3e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
7000fcf6:	bf00      	nop
7000fcf8:	e021      	b.n	7000fd3e <tcp_input+0x756>
              goto aborted;
7000fcfa:	bf00      	nop
7000fcfc:	e01f      	b.n	7000fd3e <tcp_input+0x756>
          goto aborted;
7000fcfe:	bf00      	nop
7000fd00:	e01d      	b.n	7000fd3e <tcp_input+0x756>
            goto aborted;
7000fd02:	bf00      	nop
7000fd04:	e01b      	b.n	7000fd3e <tcp_input+0x756>
              goto aborted;
7000fd06:	bf00      	nop
7000fd08:	e019      	b.n	7000fd3e <tcp_input+0x756>
7000fd0a:	bf00      	nop
7000fd0c:	24008490 	.word	0x24008490
7000fd10:	240084a0 	.word	0x240084a0
7000fd14:	240084c0 	.word	0x240084c0
7000fd18:	240084bd 	.word	0x240084bd
7000fd1c:	240084b8 	.word	0x240084b8
7000fd20:	240084bc 	.word	0x240084bc
7000fd24:	240084ba 	.word	0x240084ba
7000fd28:	240084c4 	.word	0x240084c4
7000fd2c:	24008484 	.word	0x24008484
7000fd30:	700161d8 	.word	0x700161d8
7000fd34:	700163b8 	.word	0x700163b8
7000fd38:	70016250 	.word	0x70016250
          goto aborted;
7000fd3c:	bf00      	nop
    tcp_input_pcb = NULL;
7000fd3e:	4b27      	ldr	r3, [pc, #156]	@ (7000fddc <tcp_input+0x7f4>)
7000fd40:	2200      	movs	r2, #0
7000fd42:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
7000fd44:	4b26      	ldr	r3, [pc, #152]	@ (7000fde0 <tcp_input+0x7f8>)
7000fd46:	2200      	movs	r2, #0
7000fd48:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
7000fd4a:	4b26      	ldr	r3, [pc, #152]	@ (7000fde4 <tcp_input+0x7fc>)
7000fd4c:	685b      	ldr	r3, [r3, #4]
7000fd4e:	2b00      	cmp	r3, #0
7000fd50:	d03f      	beq.n	7000fdd2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
7000fd52:	4b24      	ldr	r3, [pc, #144]	@ (7000fde4 <tcp_input+0x7fc>)
7000fd54:	685b      	ldr	r3, [r3, #4]
7000fd56:	4618      	mov	r0, r3
7000fd58:	f7fd fd6e 	bl	7000d838 <pbuf_free>
      inseg.p = NULL;
7000fd5c:	4b21      	ldr	r3, [pc, #132]	@ (7000fde4 <tcp_input+0x7fc>)
7000fd5e:	2200      	movs	r2, #0
7000fd60:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
7000fd62:	e036      	b.n	7000fdd2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
7000fd64:	4b20      	ldr	r3, [pc, #128]	@ (7000fde8 <tcp_input+0x800>)
7000fd66:	681b      	ldr	r3, [r3, #0]
7000fd68:	899b      	ldrh	r3, [r3, #12]
7000fd6a:	b29b      	uxth	r3, r3
7000fd6c:	4618      	mov	r0, r3
7000fd6e:	f7f9 fe27 	bl	700099c0 <lwip_htons>
7000fd72:	4603      	mov	r3, r0
7000fd74:	b2db      	uxtb	r3, r3
7000fd76:	f003 0304 	and.w	r3, r3, #4
7000fd7a:	2b00      	cmp	r3, #0
7000fd7c:	d118      	bne.n	7000fdb0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
7000fd7e:	4b1b      	ldr	r3, [pc, #108]	@ (7000fdec <tcp_input+0x804>)
7000fd80:	6819      	ldr	r1, [r3, #0]
7000fd82:	4b1b      	ldr	r3, [pc, #108]	@ (7000fdf0 <tcp_input+0x808>)
7000fd84:	881b      	ldrh	r3, [r3, #0]
7000fd86:	461a      	mov	r2, r3
7000fd88:	4b1a      	ldr	r3, [pc, #104]	@ (7000fdf4 <tcp_input+0x80c>)
7000fd8a:	681b      	ldr	r3, [r3, #0]
7000fd8c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
7000fd8e:	4b16      	ldr	r3, [pc, #88]	@ (7000fde8 <tcp_input+0x800>)
7000fd90:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
7000fd92:	885b      	ldrh	r3, [r3, #2]
7000fd94:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
7000fd96:	4a14      	ldr	r2, [pc, #80]	@ (7000fde8 <tcp_input+0x800>)
7000fd98:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
7000fd9a:	8812      	ldrh	r2, [r2, #0]
7000fd9c:	b292      	uxth	r2, r2
7000fd9e:	9202      	str	r2, [sp, #8]
7000fda0:	9301      	str	r3, [sp, #4]
7000fda2:	4b15      	ldr	r3, [pc, #84]	@ (7000fdf8 <tcp_input+0x810>)
7000fda4:	9300      	str	r3, [sp, #0]
7000fda6:	4b15      	ldr	r3, [pc, #84]	@ (7000fdfc <tcp_input+0x814>)
7000fda8:	4602      	mov	r2, r0
7000fdaa:	2000      	movs	r0, #0
7000fdac:	f003 f818 	bl	70012de0 <tcp_rst>
    pbuf_free(p);
7000fdb0:	6878      	ldr	r0, [r7, #4]
7000fdb2:	f7fd fd41 	bl	7000d838 <pbuf_free>
  return;
7000fdb6:	e00c      	b.n	7000fdd2 <tcp_input+0x7ea>
    goto dropped;
7000fdb8:	bf00      	nop
7000fdba:	e006      	b.n	7000fdca <tcp_input+0x7e2>
    goto dropped;
7000fdbc:	bf00      	nop
7000fdbe:	e004      	b.n	7000fdca <tcp_input+0x7e2>
    goto dropped;
7000fdc0:	bf00      	nop
7000fdc2:	e002      	b.n	7000fdca <tcp_input+0x7e2>
      goto dropped;
7000fdc4:	bf00      	nop
7000fdc6:	e000      	b.n	7000fdca <tcp_input+0x7e2>
      goto dropped;
7000fdc8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
7000fdca:	6878      	ldr	r0, [r7, #4]
7000fdcc:	f7fd fd34 	bl	7000d838 <pbuf_free>
7000fdd0:	e000      	b.n	7000fdd4 <tcp_input+0x7ec>
  return;
7000fdd2:	bf00      	nop
}
7000fdd4:	3724      	adds	r7, #36	@ 0x24
7000fdd6:	46bd      	mov	sp, r7
7000fdd8:	bd90      	pop	{r4, r7, pc}
7000fdda:	bf00      	nop
7000fddc:	240084c4 	.word	0x240084c4
7000fde0:	240084c0 	.word	0x240084c0
7000fde4:	24008490 	.word	0x24008490
7000fde8:	240084a0 	.word	0x240084a0
7000fdec:	240084b4 	.word	0x240084b4
7000fdf0:	240084ba 	.word	0x240084ba
7000fdf4:	240084b0 	.word	0x240084b0
7000fdf8:	24005378 	.word	0x24005378
7000fdfc:	2400537c 	.word	0x2400537c

7000fe00 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
7000fe00:	b580      	push	{r7, lr}
7000fe02:	b082      	sub	sp, #8
7000fe04:	af00      	add	r7, sp, #0
7000fe06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
7000fe08:	687b      	ldr	r3, [r7, #4]
7000fe0a:	2b00      	cmp	r3, #0
7000fe0c:	d106      	bne.n	7000fe1c <tcp_input_delayed_close+0x1c>
7000fe0e:	4b17      	ldr	r3, [pc, #92]	@ (7000fe6c <tcp_input_delayed_close+0x6c>)
7000fe10:	f240 225a 	movw	r2, #602	@ 0x25a
7000fe14:	4916      	ldr	r1, [pc, #88]	@ (7000fe70 <tcp_input_delayed_close+0x70>)
7000fe16:	4817      	ldr	r0, [pc, #92]	@ (7000fe74 <tcp_input_delayed_close+0x74>)
7000fe18:	f003 ff7a 	bl	70013d10 <iprintf>

  if (recv_flags & TF_CLOSED) {
7000fe1c:	4b16      	ldr	r3, [pc, #88]	@ (7000fe78 <tcp_input_delayed_close+0x78>)
7000fe1e:	781b      	ldrb	r3, [r3, #0]
7000fe20:	f003 0310 	and.w	r3, r3, #16
7000fe24:	2b00      	cmp	r3, #0
7000fe26:	d01c      	beq.n	7000fe62 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
7000fe28:	687b      	ldr	r3, [r7, #4]
7000fe2a:	8b5b      	ldrh	r3, [r3, #26]
7000fe2c:	f003 0310 	and.w	r3, r3, #16
7000fe30:	2b00      	cmp	r3, #0
7000fe32:	d10d      	bne.n	7000fe50 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
7000fe34:	687b      	ldr	r3, [r7, #4]
7000fe36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
7000fe3a:	2b00      	cmp	r3, #0
7000fe3c:	d008      	beq.n	7000fe50 <tcp_input_delayed_close+0x50>
7000fe3e:	687b      	ldr	r3, [r7, #4]
7000fe40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
7000fe44:	687a      	ldr	r2, [r7, #4]
7000fe46:	6912      	ldr	r2, [r2, #16]
7000fe48:	f06f 010e 	mvn.w	r1, #14
7000fe4c:	4610      	mov	r0, r2
7000fe4e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
7000fe50:	6879      	ldr	r1, [r7, #4]
7000fe52:	480a      	ldr	r0, [pc, #40]	@ (7000fe7c <tcp_input_delayed_close+0x7c>)
7000fe54:	f7ff fa50 	bl	7000f2f8 <tcp_pcb_remove>
    tcp_free(pcb);
7000fe58:	6878      	ldr	r0, [r7, #4]
7000fe5a:	f7fe f887 	bl	7000df6c <tcp_free>
    return 1;
7000fe5e:	2301      	movs	r3, #1
7000fe60:	e000      	b.n	7000fe64 <tcp_input_delayed_close+0x64>
  }
  return 0;
7000fe62:	2300      	movs	r3, #0
}
7000fe64:	4618      	mov	r0, r3
7000fe66:	3708      	adds	r7, #8
7000fe68:	46bd      	mov	sp, r7
7000fe6a:	bd80      	pop	{r7, pc}
7000fe6c:	700161d8 	.word	0x700161d8
7000fe70:	700163d4 	.word	0x700163d4
7000fe74:	70016250 	.word	0x70016250
7000fe78:	240084bd 	.word	0x240084bd
7000fe7c:	24008484 	.word	0x24008484

7000fe80 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
7000fe80:	b590      	push	{r4, r7, lr}
7000fe82:	b08b      	sub	sp, #44	@ 0x2c
7000fe84:	af04      	add	r7, sp, #16
7000fe86:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
7000fe88:	4b6f      	ldr	r3, [pc, #444]	@ (70010048 <tcp_listen_input+0x1c8>)
7000fe8a:	781b      	ldrb	r3, [r3, #0]
7000fe8c:	f003 0304 	and.w	r3, r3, #4
7000fe90:	2b00      	cmp	r3, #0
7000fe92:	f040 80d2 	bne.w	7001003a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
7000fe96:	687b      	ldr	r3, [r7, #4]
7000fe98:	2b00      	cmp	r3, #0
7000fe9a:	d106      	bne.n	7000feaa <tcp_listen_input+0x2a>
7000fe9c:	4b6b      	ldr	r3, [pc, #428]	@ (7001004c <tcp_listen_input+0x1cc>)
7000fe9e:	f240 2281 	movw	r2, #641	@ 0x281
7000fea2:	496b      	ldr	r1, [pc, #428]	@ (70010050 <tcp_listen_input+0x1d0>)
7000fea4:	486b      	ldr	r0, [pc, #428]	@ (70010054 <tcp_listen_input+0x1d4>)
7000fea6:	f003 ff33 	bl	70013d10 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
7000feaa:	4b67      	ldr	r3, [pc, #412]	@ (70010048 <tcp_listen_input+0x1c8>)
7000feac:	781b      	ldrb	r3, [r3, #0]
7000feae:	f003 0310 	and.w	r3, r3, #16
7000feb2:	2b00      	cmp	r3, #0
7000feb4:	d019      	beq.n	7000feea <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
7000feb6:	4b68      	ldr	r3, [pc, #416]	@ (70010058 <tcp_listen_input+0x1d8>)
7000feb8:	6819      	ldr	r1, [r3, #0]
7000feba:	4b68      	ldr	r3, [pc, #416]	@ (7001005c <tcp_listen_input+0x1dc>)
7000febc:	881b      	ldrh	r3, [r3, #0]
7000febe:	461a      	mov	r2, r3
7000fec0:	4b67      	ldr	r3, [pc, #412]	@ (70010060 <tcp_listen_input+0x1e0>)
7000fec2:	681b      	ldr	r3, [r3, #0]
7000fec4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
7000fec6:	4b67      	ldr	r3, [pc, #412]	@ (70010064 <tcp_listen_input+0x1e4>)
7000fec8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
7000feca:	885b      	ldrh	r3, [r3, #2]
7000fecc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
7000fece:	4a65      	ldr	r2, [pc, #404]	@ (70010064 <tcp_listen_input+0x1e4>)
7000fed0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
7000fed2:	8812      	ldrh	r2, [r2, #0]
7000fed4:	b292      	uxth	r2, r2
7000fed6:	9202      	str	r2, [sp, #8]
7000fed8:	9301      	str	r3, [sp, #4]
7000feda:	4b63      	ldr	r3, [pc, #396]	@ (70010068 <tcp_listen_input+0x1e8>)
7000fedc:	9300      	str	r3, [sp, #0]
7000fede:	4b63      	ldr	r3, [pc, #396]	@ (7001006c <tcp_listen_input+0x1ec>)
7000fee0:	4602      	mov	r2, r0
7000fee2:	6878      	ldr	r0, [r7, #4]
7000fee4:	f002 ff7c 	bl	70012de0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
7000fee8:	e0a9      	b.n	7001003e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
7000feea:	4b57      	ldr	r3, [pc, #348]	@ (70010048 <tcp_listen_input+0x1c8>)
7000feec:	781b      	ldrb	r3, [r3, #0]
7000feee:	f003 0302 	and.w	r3, r3, #2
7000fef2:	2b00      	cmp	r3, #0
7000fef4:	f000 80a3 	beq.w	7001003e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
7000fef8:	687b      	ldr	r3, [r7, #4]
7000fefa:	7d5b      	ldrb	r3, [r3, #21]
7000fefc:	4618      	mov	r0, r3
7000fefe:	f7ff f935 	bl	7000f16c <tcp_alloc>
7000ff02:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
7000ff04:	697b      	ldr	r3, [r7, #20]
7000ff06:	2b00      	cmp	r3, #0
7000ff08:	d111      	bne.n	7000ff2e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
7000ff0a:	687b      	ldr	r3, [r7, #4]
7000ff0c:	699b      	ldr	r3, [r3, #24]
7000ff0e:	2b00      	cmp	r3, #0
7000ff10:	d00a      	beq.n	7000ff28 <tcp_listen_input+0xa8>
7000ff12:	687b      	ldr	r3, [r7, #4]
7000ff14:	699b      	ldr	r3, [r3, #24]
7000ff16:	687a      	ldr	r2, [r7, #4]
7000ff18:	6910      	ldr	r0, [r2, #16]
7000ff1a:	f04f 32ff 	mov.w	r2, #4294967295
7000ff1e:	2100      	movs	r1, #0
7000ff20:	4798      	blx	r3
7000ff22:	4603      	mov	r3, r0
7000ff24:	73bb      	strb	r3, [r7, #14]
      return;
7000ff26:	e08b      	b.n	70010040 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
7000ff28:	23f0      	movs	r3, #240	@ 0xf0
7000ff2a:	73bb      	strb	r3, [r7, #14]
      return;
7000ff2c:	e088      	b.n	70010040 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
7000ff2e:	4b50      	ldr	r3, [pc, #320]	@ (70010070 <tcp_listen_input+0x1f0>)
7000ff30:	695a      	ldr	r2, [r3, #20]
7000ff32:	697b      	ldr	r3, [r7, #20]
7000ff34:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
7000ff36:	4b4e      	ldr	r3, [pc, #312]	@ (70010070 <tcp_listen_input+0x1f0>)
7000ff38:	691a      	ldr	r2, [r3, #16]
7000ff3a:	697b      	ldr	r3, [r7, #20]
7000ff3c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
7000ff3e:	687b      	ldr	r3, [r7, #4]
7000ff40:	8ada      	ldrh	r2, [r3, #22]
7000ff42:	697b      	ldr	r3, [r7, #20]
7000ff44:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
7000ff46:	4b47      	ldr	r3, [pc, #284]	@ (70010064 <tcp_listen_input+0x1e4>)
7000ff48:	681b      	ldr	r3, [r3, #0]
7000ff4a:	881b      	ldrh	r3, [r3, #0]
7000ff4c:	b29a      	uxth	r2, r3
7000ff4e:	697b      	ldr	r3, [r7, #20]
7000ff50:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
7000ff52:	697b      	ldr	r3, [r7, #20]
7000ff54:	2203      	movs	r2, #3
7000ff56:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
7000ff58:	4b41      	ldr	r3, [pc, #260]	@ (70010060 <tcp_listen_input+0x1e0>)
7000ff5a:	681b      	ldr	r3, [r3, #0]
7000ff5c:	1c5a      	adds	r2, r3, #1
7000ff5e:	697b      	ldr	r3, [r7, #20]
7000ff60:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
7000ff62:	697b      	ldr	r3, [r7, #20]
7000ff64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
7000ff66:	697b      	ldr	r3, [r7, #20]
7000ff68:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
7000ff6a:	6978      	ldr	r0, [r7, #20]
7000ff6c:	f7ff fa58 	bl	7000f420 <tcp_next_iss>
7000ff70:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
7000ff72:	697b      	ldr	r3, [r7, #20]
7000ff74:	693a      	ldr	r2, [r7, #16]
7000ff76:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
7000ff78:	697b      	ldr	r3, [r7, #20]
7000ff7a:	693a      	ldr	r2, [r7, #16]
7000ff7c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
7000ff7e:	697b      	ldr	r3, [r7, #20]
7000ff80:	693a      	ldr	r2, [r7, #16]
7000ff82:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
7000ff84:	697b      	ldr	r3, [r7, #20]
7000ff86:	693a      	ldr	r2, [r7, #16]
7000ff88:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
7000ff8a:	4b35      	ldr	r3, [pc, #212]	@ (70010060 <tcp_listen_input+0x1e0>)
7000ff8c:	681b      	ldr	r3, [r3, #0]
7000ff8e:	1e5a      	subs	r2, r3, #1
7000ff90:	697b      	ldr	r3, [r7, #20]
7000ff92:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
7000ff94:	687b      	ldr	r3, [r7, #4]
7000ff96:	691a      	ldr	r2, [r3, #16]
7000ff98:	697b      	ldr	r3, [r7, #20]
7000ff9a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
7000ff9c:	697b      	ldr	r3, [r7, #20]
7000ff9e:	687a      	ldr	r2, [r7, #4]
7000ffa0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
7000ffa2:	687b      	ldr	r3, [r7, #4]
7000ffa4:	7a5b      	ldrb	r3, [r3, #9]
7000ffa6:	f003 030c 	and.w	r3, r3, #12
7000ffaa:	b2da      	uxtb	r2, r3
7000ffac:	697b      	ldr	r3, [r7, #20]
7000ffae:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
7000ffb0:	687b      	ldr	r3, [r7, #4]
7000ffb2:	7a1a      	ldrb	r2, [r3, #8]
7000ffb4:	697b      	ldr	r3, [r7, #20]
7000ffb6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
7000ffb8:	4b2e      	ldr	r3, [pc, #184]	@ (70010074 <tcp_listen_input+0x1f4>)
7000ffba:	681a      	ldr	r2, [r3, #0]
7000ffbc:	697b      	ldr	r3, [r7, #20]
7000ffbe:	60da      	str	r2, [r3, #12]
7000ffc0:	4a2c      	ldr	r2, [pc, #176]	@ (70010074 <tcp_listen_input+0x1f4>)
7000ffc2:	697b      	ldr	r3, [r7, #20]
7000ffc4:	6013      	str	r3, [r2, #0]
7000ffc6:	f003 fa6f 	bl	700134a8 <tcp_timer_needed>
7000ffca:	4b2b      	ldr	r3, [pc, #172]	@ (70010078 <tcp_listen_input+0x1f8>)
7000ffcc:	2201      	movs	r2, #1
7000ffce:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
7000ffd0:	6978      	ldr	r0, [r7, #20]
7000ffd2:	f001 fd8b 	bl	70011aec <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
7000ffd6:	4b23      	ldr	r3, [pc, #140]	@ (70010064 <tcp_listen_input+0x1e4>)
7000ffd8:	681b      	ldr	r3, [r3, #0]
7000ffda:	89db      	ldrh	r3, [r3, #14]
7000ffdc:	b29a      	uxth	r2, r3
7000ffde:	697b      	ldr	r3, [r7, #20]
7000ffe0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
7000ffe4:	697b      	ldr	r3, [r7, #20]
7000ffe6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
7000ffea:	697b      	ldr	r3, [r7, #20]
7000ffec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
7000fff0:	697b      	ldr	r3, [r7, #20]
7000fff2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
7000fff4:	697b      	ldr	r3, [r7, #20]
7000fff6:	3304      	adds	r3, #4
7000fff8:	4618      	mov	r0, r3
7000fffa:	f7fa ffd7 	bl	7000afac <ip4_route>
7000fffe:	4601      	mov	r1, r0
70010000:	697b      	ldr	r3, [r7, #20]
70010002:	3304      	adds	r3, #4
70010004:	461a      	mov	r2, r3
70010006:	4620      	mov	r0, r4
70010008:	f7ff fa30 	bl	7000f46c <tcp_eff_send_mss_netif>
7001000c:	4603      	mov	r3, r0
7001000e:	461a      	mov	r2, r3
70010010:	697b      	ldr	r3, [r7, #20]
70010012:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
70010014:	2112      	movs	r1, #18
70010016:	6978      	ldr	r0, [r7, #20]
70010018:	f002 f840 	bl	7001209c <tcp_enqueue_flags>
7001001c:	4603      	mov	r3, r0
7001001e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
70010020:	f997 300f 	ldrsb.w	r3, [r7, #15]
70010024:	2b00      	cmp	r3, #0
70010026:	d004      	beq.n	70010032 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
70010028:	2100      	movs	r1, #0
7001002a:	6978      	ldr	r0, [r7, #20]
7001002c:	f7fe f9ba 	bl	7000e3a4 <tcp_abandon>
      return;
70010030:	e006      	b.n	70010040 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
70010032:	6978      	ldr	r0, [r7, #20]
70010034:	f002 f920 	bl	70012278 <tcp_output>
  return;
70010038:	e001      	b.n	7001003e <tcp_listen_input+0x1be>
    return;
7001003a:	bf00      	nop
7001003c:	e000      	b.n	70010040 <tcp_listen_input+0x1c0>
  return;
7001003e:	bf00      	nop
}
70010040:	371c      	adds	r7, #28
70010042:	46bd      	mov	sp, r7
70010044:	bd90      	pop	{r4, r7, pc}
70010046:	bf00      	nop
70010048:	240084bc 	.word	0x240084bc
7001004c:	700161d8 	.word	0x700161d8
70010050:	700163fc 	.word	0x700163fc
70010054:	70016250 	.word	0x70016250
70010058:	240084b4 	.word	0x240084b4
7001005c:	240084ba 	.word	0x240084ba
70010060:	240084b0 	.word	0x240084b0
70010064:	240084a0 	.word	0x240084a0
70010068:	24005378 	.word	0x24005378
7001006c:	2400537c 	.word	0x2400537c
70010070:	24005368 	.word	0x24005368
70010074:	24008484 	.word	0x24008484
70010078:	2400848c 	.word	0x2400848c

7001007c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
7001007c:	b580      	push	{r7, lr}
7001007e:	b086      	sub	sp, #24
70010080:	af04      	add	r7, sp, #16
70010082:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
70010084:	4b2f      	ldr	r3, [pc, #188]	@ (70010144 <tcp_timewait_input+0xc8>)
70010086:	781b      	ldrb	r3, [r3, #0]
70010088:	f003 0304 	and.w	r3, r3, #4
7001008c:	2b00      	cmp	r3, #0
7001008e:	d153      	bne.n	70010138 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
70010090:	687b      	ldr	r3, [r7, #4]
70010092:	2b00      	cmp	r3, #0
70010094:	d106      	bne.n	700100a4 <tcp_timewait_input+0x28>
70010096:	4b2c      	ldr	r3, [pc, #176]	@ (70010148 <tcp_timewait_input+0xcc>)
70010098:	f240 22ee 	movw	r2, #750	@ 0x2ee
7001009c:	492b      	ldr	r1, [pc, #172]	@ (7001014c <tcp_timewait_input+0xd0>)
7001009e:	482c      	ldr	r0, [pc, #176]	@ (70010150 <tcp_timewait_input+0xd4>)
700100a0:	f003 fe36 	bl	70013d10 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
700100a4:	4b27      	ldr	r3, [pc, #156]	@ (70010144 <tcp_timewait_input+0xc8>)
700100a6:	781b      	ldrb	r3, [r3, #0]
700100a8:	f003 0302 	and.w	r3, r3, #2
700100ac:	2b00      	cmp	r3, #0
700100ae:	d02a      	beq.n	70010106 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
700100b0:	4b28      	ldr	r3, [pc, #160]	@ (70010154 <tcp_timewait_input+0xd8>)
700100b2:	681a      	ldr	r2, [r3, #0]
700100b4:	687b      	ldr	r3, [r7, #4]
700100b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700100b8:	1ad3      	subs	r3, r2, r3
700100ba:	2b00      	cmp	r3, #0
700100bc:	db2d      	blt.n	7001011a <tcp_timewait_input+0x9e>
700100be:	4b25      	ldr	r3, [pc, #148]	@ (70010154 <tcp_timewait_input+0xd8>)
700100c0:	681a      	ldr	r2, [r3, #0]
700100c2:	687b      	ldr	r3, [r7, #4]
700100c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700100c6:	6879      	ldr	r1, [r7, #4]
700100c8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
700100ca:	440b      	add	r3, r1
700100cc:	1ad3      	subs	r3, r2, r3
700100ce:	2b00      	cmp	r3, #0
700100d0:	dc23      	bgt.n	7001011a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
700100d2:	4b21      	ldr	r3, [pc, #132]	@ (70010158 <tcp_timewait_input+0xdc>)
700100d4:	6819      	ldr	r1, [r3, #0]
700100d6:	4b21      	ldr	r3, [pc, #132]	@ (7001015c <tcp_timewait_input+0xe0>)
700100d8:	881b      	ldrh	r3, [r3, #0]
700100da:	461a      	mov	r2, r3
700100dc:	4b1d      	ldr	r3, [pc, #116]	@ (70010154 <tcp_timewait_input+0xd8>)
700100de:	681b      	ldr	r3, [r3, #0]
700100e0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
700100e2:	4b1f      	ldr	r3, [pc, #124]	@ (70010160 <tcp_timewait_input+0xe4>)
700100e4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
700100e6:	885b      	ldrh	r3, [r3, #2]
700100e8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
700100ea:	4a1d      	ldr	r2, [pc, #116]	@ (70010160 <tcp_timewait_input+0xe4>)
700100ec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
700100ee:	8812      	ldrh	r2, [r2, #0]
700100f0:	b292      	uxth	r2, r2
700100f2:	9202      	str	r2, [sp, #8]
700100f4:	9301      	str	r3, [sp, #4]
700100f6:	4b1b      	ldr	r3, [pc, #108]	@ (70010164 <tcp_timewait_input+0xe8>)
700100f8:	9300      	str	r3, [sp, #0]
700100fa:	4b1b      	ldr	r3, [pc, #108]	@ (70010168 <tcp_timewait_input+0xec>)
700100fc:	4602      	mov	r2, r0
700100fe:	6878      	ldr	r0, [r7, #4]
70010100:	f002 fe6e 	bl	70012de0 <tcp_rst>
      return;
70010104:	e01b      	b.n	7001013e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
70010106:	4b0f      	ldr	r3, [pc, #60]	@ (70010144 <tcp_timewait_input+0xc8>)
70010108:	781b      	ldrb	r3, [r3, #0]
7001010a:	f003 0301 	and.w	r3, r3, #1
7001010e:	2b00      	cmp	r3, #0
70010110:	d003      	beq.n	7001011a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
70010112:	4b16      	ldr	r3, [pc, #88]	@ (7001016c <tcp_timewait_input+0xf0>)
70010114:	681a      	ldr	r2, [r3, #0]
70010116:	687b      	ldr	r3, [r7, #4]
70010118:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
7001011a:	4b10      	ldr	r3, [pc, #64]	@ (7001015c <tcp_timewait_input+0xe0>)
7001011c:	881b      	ldrh	r3, [r3, #0]
7001011e:	2b00      	cmp	r3, #0
70010120:	d00c      	beq.n	7001013c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
70010122:	687b      	ldr	r3, [r7, #4]
70010124:	8b5b      	ldrh	r3, [r3, #26]
70010126:	f043 0302 	orr.w	r3, r3, #2
7001012a:	b29a      	uxth	r2, r3
7001012c:	687b      	ldr	r3, [r7, #4]
7001012e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
70010130:	6878      	ldr	r0, [r7, #4]
70010132:	f002 f8a1 	bl	70012278 <tcp_output>
  }
  return;
70010136:	e001      	b.n	7001013c <tcp_timewait_input+0xc0>
    return;
70010138:	bf00      	nop
7001013a:	e000      	b.n	7001013e <tcp_timewait_input+0xc2>
  return;
7001013c:	bf00      	nop
}
7001013e:	3708      	adds	r7, #8
70010140:	46bd      	mov	sp, r7
70010142:	bd80      	pop	{r7, pc}
70010144:	240084bc 	.word	0x240084bc
70010148:	700161d8 	.word	0x700161d8
7001014c:	7001641c 	.word	0x7001641c
70010150:	70016250 	.word	0x70016250
70010154:	240084b0 	.word	0x240084b0
70010158:	240084b4 	.word	0x240084b4
7001015c:	240084ba 	.word	0x240084ba
70010160:	240084a0 	.word	0x240084a0
70010164:	24005378 	.word	0x24005378
70010168:	2400537c 	.word	0x2400537c
7001016c:	24008478 	.word	0x24008478

70010170 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
70010170:	b590      	push	{r4, r7, lr}
70010172:	b08d      	sub	sp, #52	@ 0x34
70010174:	af04      	add	r7, sp, #16
70010176:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
70010178:	2300      	movs	r3, #0
7001017a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
7001017c:	2300      	movs	r3, #0
7001017e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
70010180:	687b      	ldr	r3, [r7, #4]
70010182:	2b00      	cmp	r3, #0
70010184:	d106      	bne.n	70010194 <tcp_process+0x24>
70010186:	4b9d      	ldr	r3, [pc, #628]	@ (700103fc <tcp_process+0x28c>)
70010188:	f44f 7247 	mov.w	r2, #796	@ 0x31c
7001018c:	499c      	ldr	r1, [pc, #624]	@ (70010400 <tcp_process+0x290>)
7001018e:	489d      	ldr	r0, [pc, #628]	@ (70010404 <tcp_process+0x294>)
70010190:	f003 fdbe 	bl	70013d10 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
70010194:	4b9c      	ldr	r3, [pc, #624]	@ (70010408 <tcp_process+0x298>)
70010196:	781b      	ldrb	r3, [r3, #0]
70010198:	f003 0304 	and.w	r3, r3, #4
7001019c:	2b00      	cmp	r3, #0
7001019e:	d04e      	beq.n	7001023e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
700101a0:	687b      	ldr	r3, [r7, #4]
700101a2:	7d1b      	ldrb	r3, [r3, #20]
700101a4:	2b02      	cmp	r3, #2
700101a6:	d108      	bne.n	700101ba <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
700101a8:	687b      	ldr	r3, [r7, #4]
700101aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
700101ac:	4b97      	ldr	r3, [pc, #604]	@ (7001040c <tcp_process+0x29c>)
700101ae:	681b      	ldr	r3, [r3, #0]
700101b0:	429a      	cmp	r2, r3
700101b2:	d123      	bne.n	700101fc <tcp_process+0x8c>
        acceptable = 1;
700101b4:	2301      	movs	r3, #1
700101b6:	76fb      	strb	r3, [r7, #27]
700101b8:	e020      	b.n	700101fc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
700101ba:	687b      	ldr	r3, [r7, #4]
700101bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
700101be:	4b94      	ldr	r3, [pc, #592]	@ (70010410 <tcp_process+0x2a0>)
700101c0:	681b      	ldr	r3, [r3, #0]
700101c2:	429a      	cmp	r2, r3
700101c4:	d102      	bne.n	700101cc <tcp_process+0x5c>
        acceptable = 1;
700101c6:	2301      	movs	r3, #1
700101c8:	76fb      	strb	r3, [r7, #27]
700101ca:	e017      	b.n	700101fc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
700101cc:	4b90      	ldr	r3, [pc, #576]	@ (70010410 <tcp_process+0x2a0>)
700101ce:	681a      	ldr	r2, [r3, #0]
700101d0:	687b      	ldr	r3, [r7, #4]
700101d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700101d4:	1ad3      	subs	r3, r2, r3
700101d6:	2b00      	cmp	r3, #0
700101d8:	db10      	blt.n	700101fc <tcp_process+0x8c>
700101da:	4b8d      	ldr	r3, [pc, #564]	@ (70010410 <tcp_process+0x2a0>)
700101dc:	681a      	ldr	r2, [r3, #0]
700101de:	687b      	ldr	r3, [r7, #4]
700101e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700101e2:	6879      	ldr	r1, [r7, #4]
700101e4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
700101e6:	440b      	add	r3, r1
700101e8:	1ad3      	subs	r3, r2, r3
700101ea:	2b00      	cmp	r3, #0
700101ec:	dc06      	bgt.n	700101fc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
700101ee:	687b      	ldr	r3, [r7, #4]
700101f0:	8b5b      	ldrh	r3, [r3, #26]
700101f2:	f043 0302 	orr.w	r3, r3, #2
700101f6:	b29a      	uxth	r2, r3
700101f8:	687b      	ldr	r3, [r7, #4]
700101fa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
700101fc:	7efb      	ldrb	r3, [r7, #27]
700101fe:	2b00      	cmp	r3, #0
70010200:	d01b      	beq.n	7001023a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
70010202:	687b      	ldr	r3, [r7, #4]
70010204:	7d1b      	ldrb	r3, [r3, #20]
70010206:	2b00      	cmp	r3, #0
70010208:	d106      	bne.n	70010218 <tcp_process+0xa8>
7001020a:	4b7c      	ldr	r3, [pc, #496]	@ (700103fc <tcp_process+0x28c>)
7001020c:	f44f 724e 	mov.w	r2, #824	@ 0x338
70010210:	4980      	ldr	r1, [pc, #512]	@ (70010414 <tcp_process+0x2a4>)
70010212:	487c      	ldr	r0, [pc, #496]	@ (70010404 <tcp_process+0x294>)
70010214:	f003 fd7c 	bl	70013d10 <iprintf>
      recv_flags |= TF_RESET;
70010218:	4b7f      	ldr	r3, [pc, #508]	@ (70010418 <tcp_process+0x2a8>)
7001021a:	781b      	ldrb	r3, [r3, #0]
7001021c:	f043 0308 	orr.w	r3, r3, #8
70010220:	b2da      	uxtb	r2, r3
70010222:	4b7d      	ldr	r3, [pc, #500]	@ (70010418 <tcp_process+0x2a8>)
70010224:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
70010226:	687b      	ldr	r3, [r7, #4]
70010228:	8b5b      	ldrh	r3, [r3, #26]
7001022a:	f023 0301 	bic.w	r3, r3, #1
7001022e:	b29a      	uxth	r2, r3
70010230:	687b      	ldr	r3, [r7, #4]
70010232:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
70010234:	f06f 030d 	mvn.w	r3, #13
70010238:	e37a      	b.n	70010930 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
7001023a:	2300      	movs	r3, #0
7001023c:	e378      	b.n	70010930 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
7001023e:	4b72      	ldr	r3, [pc, #456]	@ (70010408 <tcp_process+0x298>)
70010240:	781b      	ldrb	r3, [r3, #0]
70010242:	f003 0302 	and.w	r3, r3, #2
70010246:	2b00      	cmp	r3, #0
70010248:	d010      	beq.n	7001026c <tcp_process+0xfc>
7001024a:	687b      	ldr	r3, [r7, #4]
7001024c:	7d1b      	ldrb	r3, [r3, #20]
7001024e:	2b02      	cmp	r3, #2
70010250:	d00c      	beq.n	7001026c <tcp_process+0xfc>
70010252:	687b      	ldr	r3, [r7, #4]
70010254:	7d1b      	ldrb	r3, [r3, #20]
70010256:	2b03      	cmp	r3, #3
70010258:	d008      	beq.n	7001026c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
7001025a:	687b      	ldr	r3, [r7, #4]
7001025c:	8b5b      	ldrh	r3, [r3, #26]
7001025e:	f043 0302 	orr.w	r3, r3, #2
70010262:	b29a      	uxth	r2, r3
70010264:	687b      	ldr	r3, [r7, #4]
70010266:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
70010268:	2300      	movs	r3, #0
7001026a:	e361      	b.n	70010930 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
7001026c:	687b      	ldr	r3, [r7, #4]
7001026e:	8b5b      	ldrh	r3, [r3, #26]
70010270:	f003 0310 	and.w	r3, r3, #16
70010274:	2b00      	cmp	r3, #0
70010276:	d103      	bne.n	70010280 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
70010278:	4b68      	ldr	r3, [pc, #416]	@ (7001041c <tcp_process+0x2ac>)
7001027a:	681a      	ldr	r2, [r3, #0]
7001027c:	687b      	ldr	r3, [r7, #4]
7001027e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
70010280:	687b      	ldr	r3, [r7, #4]
70010282:	2200      	movs	r2, #0
70010284:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
70010288:	687b      	ldr	r3, [r7, #4]
7001028a:	2200      	movs	r2, #0
7001028c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
70010290:	6878      	ldr	r0, [r7, #4]
70010292:	f001 fc2b 	bl	70011aec <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
70010296:	687b      	ldr	r3, [r7, #4]
70010298:	7d1b      	ldrb	r3, [r3, #20]
7001029a:	3b02      	subs	r3, #2
7001029c:	2b07      	cmp	r3, #7
7001029e:	f200 8337 	bhi.w	70010910 <tcp_process+0x7a0>
700102a2:	a201      	add	r2, pc, #4	@ (adr r2, 700102a8 <tcp_process+0x138>)
700102a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
700102a8:	700102c9 	.word	0x700102c9
700102ac:	700104f9 	.word	0x700104f9
700102b0:	70010671 	.word	0x70010671
700102b4:	7001069b 	.word	0x7001069b
700102b8:	700107bf 	.word	0x700107bf
700102bc:	70010671 	.word	0x70010671
700102c0:	7001084b 	.word	0x7001084b
700102c4:	700108db 	.word	0x700108db
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %s %"U32_F"\n",
                                    ackno, pcb->snd_nxt, pcb->unacked ? "" : " empty:",
                                    pcb->unacked ? lwip_ntohl(pcb->unacked->tcphdr->seqno) : 0));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
700102c8:	4b4f      	ldr	r3, [pc, #316]	@ (70010408 <tcp_process+0x298>)
700102ca:	781b      	ldrb	r3, [r3, #0]
700102cc:	f003 0310 	and.w	r3, r3, #16
700102d0:	2b00      	cmp	r3, #0
700102d2:	f000 80e4 	beq.w	7001049e <tcp_process+0x32e>
700102d6:	4b4c      	ldr	r3, [pc, #304]	@ (70010408 <tcp_process+0x298>)
700102d8:	781b      	ldrb	r3, [r3, #0]
700102da:	f003 0302 	and.w	r3, r3, #2
700102de:	2b00      	cmp	r3, #0
700102e0:	f000 80dd 	beq.w	7001049e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
700102e4:	687b      	ldr	r3, [r7, #4]
700102e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
700102e8:	1c5a      	adds	r2, r3, #1
700102ea:	4b48      	ldr	r3, [pc, #288]	@ (7001040c <tcp_process+0x29c>)
700102ec:	681b      	ldr	r3, [r3, #0]
700102ee:	429a      	cmp	r2, r3
700102f0:	f040 80d5 	bne.w	7001049e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
700102f4:	4b46      	ldr	r3, [pc, #280]	@ (70010410 <tcp_process+0x2a0>)
700102f6:	681b      	ldr	r3, [r3, #0]
700102f8:	1c5a      	adds	r2, r3, #1
700102fa:	687b      	ldr	r3, [r7, #4]
700102fc:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
700102fe:	687b      	ldr	r3, [r7, #4]
70010300:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
70010302:	687b      	ldr	r3, [r7, #4]
70010304:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
70010306:	4b41      	ldr	r3, [pc, #260]	@ (7001040c <tcp_process+0x29c>)
70010308:	681a      	ldr	r2, [r3, #0]
7001030a:	687b      	ldr	r3, [r7, #4]
7001030c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
7001030e:	4b44      	ldr	r3, [pc, #272]	@ (70010420 <tcp_process+0x2b0>)
70010310:	681b      	ldr	r3, [r3, #0]
70010312:	89db      	ldrh	r3, [r3, #14]
70010314:	b29a      	uxth	r2, r3
70010316:	687b      	ldr	r3, [r7, #4]
70010318:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
7001031c:	687b      	ldr	r3, [r7, #4]
7001031e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
70010322:	687b      	ldr	r3, [r7, #4]
70010324:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
70010328:	4b39      	ldr	r3, [pc, #228]	@ (70010410 <tcp_process+0x2a0>)
7001032a:	681b      	ldr	r3, [r3, #0]
7001032c:	1e5a      	subs	r2, r3, #1
7001032e:	687b      	ldr	r3, [r7, #4]
70010330:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
70010332:	687b      	ldr	r3, [r7, #4]
70010334:	2204      	movs	r2, #4
70010336:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
70010338:	687b      	ldr	r3, [r7, #4]
7001033a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
7001033c:	687b      	ldr	r3, [r7, #4]
7001033e:	3304      	adds	r3, #4
70010340:	4618      	mov	r0, r3
70010342:	f7fa fe33 	bl	7000afac <ip4_route>
70010346:	4601      	mov	r1, r0
70010348:	687b      	ldr	r3, [r7, #4]
7001034a:	3304      	adds	r3, #4
7001034c:	461a      	mov	r2, r3
7001034e:	4620      	mov	r0, r4
70010350:	f7ff f88c 	bl	7000f46c <tcp_eff_send_mss_netif>
70010354:	4603      	mov	r3, r0
70010356:	461a      	mov	r2, r3
70010358:	687b      	ldr	r3, [r7, #4]
7001035a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
7001035c:	687b      	ldr	r3, [r7, #4]
7001035e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70010360:	009a      	lsls	r2, r3, #2
70010362:	687b      	ldr	r3, [r7, #4]
70010364:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70010366:	005b      	lsls	r3, r3, #1
70010368:	f241 111c 	movw	r1, #4380	@ 0x111c
7001036c:	428b      	cmp	r3, r1
7001036e:	bf38      	it	cc
70010370:	460b      	movcc	r3, r1
70010372:	429a      	cmp	r2, r3
70010374:	d204      	bcs.n	70010380 <tcp_process+0x210>
70010376:	687b      	ldr	r3, [r7, #4]
70010378:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
7001037a:	009b      	lsls	r3, r3, #2
7001037c:	b29b      	uxth	r3, r3
7001037e:	e00d      	b.n	7001039c <tcp_process+0x22c>
70010380:	687b      	ldr	r3, [r7, #4]
70010382:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70010384:	005b      	lsls	r3, r3, #1
70010386:	f241 121c 	movw	r2, #4380	@ 0x111c
7001038a:	4293      	cmp	r3, r2
7001038c:	d904      	bls.n	70010398 <tcp_process+0x228>
7001038e:	687b      	ldr	r3, [r7, #4]
70010390:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70010392:	005b      	lsls	r3, r3, #1
70010394:	b29b      	uxth	r3, r3
70010396:	e001      	b.n	7001039c <tcp_process+0x22c>
70010398:	f241 131c 	movw	r3, #4380	@ 0x111c
7001039c:	687a      	ldr	r2, [r7, #4]
7001039e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
700103a2:	687b      	ldr	r3, [r7, #4]
700103a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
700103a8:	2b00      	cmp	r3, #0
700103aa:	d106      	bne.n	700103ba <tcp_process+0x24a>
700103ac:	4b13      	ldr	r3, [pc, #76]	@ (700103fc <tcp_process+0x28c>)
700103ae:	f240 326d 	movw	r2, #877	@ 0x36d
700103b2:	491c      	ldr	r1, [pc, #112]	@ (70010424 <tcp_process+0x2b4>)
700103b4:	4813      	ldr	r0, [pc, #76]	@ (70010404 <tcp_process+0x294>)
700103b6:	f003 fcab 	bl	70013d10 <iprintf>
        --pcb->snd_queuelen;
700103ba:	687b      	ldr	r3, [r7, #4]
700103bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
700103c0:	3b01      	subs	r3, #1
700103c2:	b29a      	uxth	r2, r3
700103c4:	687b      	ldr	r3, [r7, #4]
700103c6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
700103ca:	687b      	ldr	r3, [r7, #4]
700103cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
700103ce:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
700103d0:	69fb      	ldr	r3, [r7, #28]
700103d2:	2b00      	cmp	r3, #0
700103d4:	d12a      	bne.n	7001042c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
700103d6:	687b      	ldr	r3, [r7, #4]
700103d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
700103da:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
700103dc:	69fb      	ldr	r3, [r7, #28]
700103de:	2b00      	cmp	r3, #0
700103e0:	d106      	bne.n	700103f0 <tcp_process+0x280>
700103e2:	4b06      	ldr	r3, [pc, #24]	@ (700103fc <tcp_process+0x28c>)
700103e4:	f240 3275 	movw	r2, #885	@ 0x375
700103e8:	490f      	ldr	r1, [pc, #60]	@ (70010428 <tcp_process+0x2b8>)
700103ea:	4806      	ldr	r0, [pc, #24]	@ (70010404 <tcp_process+0x294>)
700103ec:	f003 fc90 	bl	70013d10 <iprintf>
          pcb->unsent = rseg->next;
700103f0:	69fb      	ldr	r3, [r7, #28]
700103f2:	681a      	ldr	r2, [r3, #0]
700103f4:	687b      	ldr	r3, [r7, #4]
700103f6:	66da      	str	r2, [r3, #108]	@ 0x6c
700103f8:	e01c      	b.n	70010434 <tcp_process+0x2c4>
700103fa:	bf00      	nop
700103fc:	700161d8 	.word	0x700161d8
70010400:	7001643c 	.word	0x7001643c
70010404:	70016250 	.word	0x70016250
70010408:	240084bc 	.word	0x240084bc
7001040c:	240084b4 	.word	0x240084b4
70010410:	240084b0 	.word	0x240084b0
70010414:	70016458 	.word	0x70016458
70010418:	240084bd 	.word	0x240084bd
7001041c:	24008478 	.word	0x24008478
70010420:	240084a0 	.word	0x240084a0
70010424:	70016478 	.word	0x70016478
70010428:	70016490 	.word	0x70016490
        } else {
          pcb->unacked = rseg->next;
7001042c:	69fb      	ldr	r3, [r7, #28]
7001042e:	681a      	ldr	r2, [r3, #0]
70010430:	687b      	ldr	r3, [r7, #4]
70010432:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
70010434:	69f8      	ldr	r0, [r7, #28]
70010436:	f7fe fd3f 	bl	7000eeb8 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
7001043a:	687b      	ldr	r3, [r7, #4]
7001043c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7001043e:	2b00      	cmp	r3, #0
70010440:	d104      	bne.n	7001044c <tcp_process+0x2dc>
          pcb->rtime = -1;
70010442:	687b      	ldr	r3, [r7, #4]
70010444:	f64f 72ff 	movw	r2, #65535	@ 0xffff
70010448:	861a      	strh	r2, [r3, #48]	@ 0x30
7001044a:	e006      	b.n	7001045a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
7001044c:	687b      	ldr	r3, [r7, #4]
7001044e:	2200      	movs	r2, #0
70010450:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
70010452:	687b      	ldr	r3, [r7, #4]
70010454:	2200      	movs	r2, #0
70010456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
7001045a:	687b      	ldr	r3, [r7, #4]
7001045c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
70010460:	2b00      	cmp	r3, #0
70010462:	d00a      	beq.n	7001047a <tcp_process+0x30a>
70010464:	687b      	ldr	r3, [r7, #4]
70010466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
7001046a:	687a      	ldr	r2, [r7, #4]
7001046c:	6910      	ldr	r0, [r2, #16]
7001046e:	2200      	movs	r2, #0
70010470:	6879      	ldr	r1, [r7, #4]
70010472:	4798      	blx	r3
70010474:	4603      	mov	r3, r0
70010476:	76bb      	strb	r3, [r7, #26]
70010478:	e001      	b.n	7001047e <tcp_process+0x30e>
7001047a:	2300      	movs	r3, #0
7001047c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
7001047e:	f997 301a 	ldrsb.w	r3, [r7, #26]
70010482:	f113 0f0d 	cmn.w	r3, #13
70010486:	d102      	bne.n	7001048e <tcp_process+0x31e>
          return ERR_ABRT;
70010488:	f06f 030c 	mvn.w	r3, #12
7001048c:	e250      	b.n	70010930 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
7001048e:	687b      	ldr	r3, [r7, #4]
70010490:	8b5b      	ldrh	r3, [r3, #26]
70010492:	f043 0302 	orr.w	r3, r3, #2
70010496:	b29a      	uxth	r2, r3
70010498:	687b      	ldr	r3, [r7, #4]
7001049a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
7001049c:	e23a      	b.n	70010914 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
7001049e:	4b98      	ldr	r3, [pc, #608]	@ (70010700 <tcp_process+0x590>)
700104a0:	781b      	ldrb	r3, [r3, #0]
700104a2:	f003 0310 	and.w	r3, r3, #16
700104a6:	2b00      	cmp	r3, #0
700104a8:	f000 8234 	beq.w	70010914 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
700104ac:	4b95      	ldr	r3, [pc, #596]	@ (70010704 <tcp_process+0x594>)
700104ae:	6819      	ldr	r1, [r3, #0]
700104b0:	4b95      	ldr	r3, [pc, #596]	@ (70010708 <tcp_process+0x598>)
700104b2:	881b      	ldrh	r3, [r3, #0]
700104b4:	461a      	mov	r2, r3
700104b6:	4b95      	ldr	r3, [pc, #596]	@ (7001070c <tcp_process+0x59c>)
700104b8:	681b      	ldr	r3, [r3, #0]
700104ba:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
700104bc:	4b94      	ldr	r3, [pc, #592]	@ (70010710 <tcp_process+0x5a0>)
700104be:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
700104c0:	885b      	ldrh	r3, [r3, #2]
700104c2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
700104c4:	4a92      	ldr	r2, [pc, #584]	@ (70010710 <tcp_process+0x5a0>)
700104c6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
700104c8:	8812      	ldrh	r2, [r2, #0]
700104ca:	b292      	uxth	r2, r2
700104cc:	9202      	str	r2, [sp, #8]
700104ce:	9301      	str	r3, [sp, #4]
700104d0:	4b90      	ldr	r3, [pc, #576]	@ (70010714 <tcp_process+0x5a4>)
700104d2:	9300      	str	r3, [sp, #0]
700104d4:	4b90      	ldr	r3, [pc, #576]	@ (70010718 <tcp_process+0x5a8>)
700104d6:	4602      	mov	r2, r0
700104d8:	6878      	ldr	r0, [r7, #4]
700104da:	f002 fc81 	bl	70012de0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
700104de:	687b      	ldr	r3, [r7, #4]
700104e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
700104e4:	2b05      	cmp	r3, #5
700104e6:	f200 8215 	bhi.w	70010914 <tcp_process+0x7a4>
          pcb->rtime = 0;
700104ea:	687b      	ldr	r3, [r7, #4]
700104ec:	2200      	movs	r2, #0
700104ee:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
700104f0:	6878      	ldr	r0, [r7, #4]
700104f2:	f002 fa4d 	bl	70012990 <tcp_rexmit_rto>
      break;
700104f6:	e20d      	b.n	70010914 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
700104f8:	4b81      	ldr	r3, [pc, #516]	@ (70010700 <tcp_process+0x590>)
700104fa:	781b      	ldrb	r3, [r3, #0]
700104fc:	f003 0310 	and.w	r3, r3, #16
70010500:	2b00      	cmp	r3, #0
70010502:	f000 80a1 	beq.w	70010648 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
70010506:	4b7f      	ldr	r3, [pc, #508]	@ (70010704 <tcp_process+0x594>)
70010508:	681a      	ldr	r2, [r3, #0]
7001050a:	687b      	ldr	r3, [r7, #4]
7001050c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
7001050e:	1ad3      	subs	r3, r2, r3
70010510:	3b01      	subs	r3, #1
70010512:	2b00      	cmp	r3, #0
70010514:	db7e      	blt.n	70010614 <tcp_process+0x4a4>
70010516:	4b7b      	ldr	r3, [pc, #492]	@ (70010704 <tcp_process+0x594>)
70010518:	681a      	ldr	r2, [r3, #0]
7001051a:	687b      	ldr	r3, [r7, #4]
7001051c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
7001051e:	1ad3      	subs	r3, r2, r3
70010520:	2b00      	cmp	r3, #0
70010522:	dc77      	bgt.n	70010614 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
70010524:	687b      	ldr	r3, [r7, #4]
70010526:	2204      	movs	r2, #4
70010528:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
7001052a:	687b      	ldr	r3, [r7, #4]
7001052c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
7001052e:	2b00      	cmp	r3, #0
70010530:	d102      	bne.n	70010538 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
70010532:	23fa      	movs	r3, #250	@ 0xfa
70010534:	76bb      	strb	r3, [r7, #26]
70010536:	e01d      	b.n	70010574 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
70010538:	687b      	ldr	r3, [r7, #4]
7001053a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
7001053c:	699b      	ldr	r3, [r3, #24]
7001053e:	2b00      	cmp	r3, #0
70010540:	d106      	bne.n	70010550 <tcp_process+0x3e0>
70010542:	4b76      	ldr	r3, [pc, #472]	@ (7001071c <tcp_process+0x5ac>)
70010544:	f240 32a9 	movw	r2, #937	@ 0x3a9
70010548:	4975      	ldr	r1, [pc, #468]	@ (70010720 <tcp_process+0x5b0>)
7001054a:	4876      	ldr	r0, [pc, #472]	@ (70010724 <tcp_process+0x5b4>)
7001054c:	f003 fbe0 	bl	70013d10 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
70010550:	687b      	ldr	r3, [r7, #4]
70010552:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
70010554:	699b      	ldr	r3, [r3, #24]
70010556:	2b00      	cmp	r3, #0
70010558:	d00a      	beq.n	70010570 <tcp_process+0x400>
7001055a:	687b      	ldr	r3, [r7, #4]
7001055c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
7001055e:	699b      	ldr	r3, [r3, #24]
70010560:	687a      	ldr	r2, [r7, #4]
70010562:	6910      	ldr	r0, [r2, #16]
70010564:	2200      	movs	r2, #0
70010566:	6879      	ldr	r1, [r7, #4]
70010568:	4798      	blx	r3
7001056a:	4603      	mov	r3, r0
7001056c:	76bb      	strb	r3, [r7, #26]
7001056e:	e001      	b.n	70010574 <tcp_process+0x404>
70010570:	23f0      	movs	r3, #240	@ 0xf0
70010572:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
70010574:	f997 301a 	ldrsb.w	r3, [r7, #26]
70010578:	2b00      	cmp	r3, #0
7001057a:	d00a      	beq.n	70010592 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
7001057c:	f997 301a 	ldrsb.w	r3, [r7, #26]
70010580:	f113 0f0d 	cmn.w	r3, #13
70010584:	d002      	beq.n	7001058c <tcp_process+0x41c>
              tcp_abort(pcb);
70010586:	6878      	ldr	r0, [r7, #4]
70010588:	f7fd ffc0 	bl	7000e50c <tcp_abort>
            }
            return ERR_ABRT;
7001058c:	f06f 030c 	mvn.w	r3, #12
70010590:	e1ce      	b.n	70010930 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
70010592:	6878      	ldr	r0, [r7, #4]
70010594:	f000 fae0 	bl	70010b58 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
70010598:	4b63      	ldr	r3, [pc, #396]	@ (70010728 <tcp_process+0x5b8>)
7001059a:	881b      	ldrh	r3, [r3, #0]
7001059c:	2b00      	cmp	r3, #0
7001059e:	d005      	beq.n	700105ac <tcp_process+0x43c>
            recv_acked--;
700105a0:	4b61      	ldr	r3, [pc, #388]	@ (70010728 <tcp_process+0x5b8>)
700105a2:	881b      	ldrh	r3, [r3, #0]
700105a4:	3b01      	subs	r3, #1
700105a6:	b29a      	uxth	r2, r3
700105a8:	4b5f      	ldr	r3, [pc, #380]	@ (70010728 <tcp_process+0x5b8>)
700105aa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
700105ac:	687b      	ldr	r3, [r7, #4]
700105ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
700105b0:	009a      	lsls	r2, r3, #2
700105b2:	687b      	ldr	r3, [r7, #4]
700105b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
700105b6:	005b      	lsls	r3, r3, #1
700105b8:	f241 111c 	movw	r1, #4380	@ 0x111c
700105bc:	428b      	cmp	r3, r1
700105be:	bf38      	it	cc
700105c0:	460b      	movcc	r3, r1
700105c2:	429a      	cmp	r2, r3
700105c4:	d204      	bcs.n	700105d0 <tcp_process+0x460>
700105c6:	687b      	ldr	r3, [r7, #4]
700105c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
700105ca:	009b      	lsls	r3, r3, #2
700105cc:	b29b      	uxth	r3, r3
700105ce:	e00d      	b.n	700105ec <tcp_process+0x47c>
700105d0:	687b      	ldr	r3, [r7, #4]
700105d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
700105d4:	005b      	lsls	r3, r3, #1
700105d6:	f241 121c 	movw	r2, #4380	@ 0x111c
700105da:	4293      	cmp	r3, r2
700105dc:	d904      	bls.n	700105e8 <tcp_process+0x478>
700105de:	687b      	ldr	r3, [r7, #4]
700105e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
700105e2:	005b      	lsls	r3, r3, #1
700105e4:	b29b      	uxth	r3, r3
700105e6:	e001      	b.n	700105ec <tcp_process+0x47c>
700105e8:	f241 131c 	movw	r3, #4380	@ 0x111c
700105ec:	687a      	ldr	r2, [r7, #4]
700105ee:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
700105f2:	4b4e      	ldr	r3, [pc, #312]	@ (7001072c <tcp_process+0x5bc>)
700105f4:	781b      	ldrb	r3, [r3, #0]
700105f6:	f003 0320 	and.w	r3, r3, #32
700105fa:	2b00      	cmp	r3, #0
700105fc:	d037      	beq.n	7001066e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
700105fe:	687b      	ldr	r3, [r7, #4]
70010600:	8b5b      	ldrh	r3, [r3, #26]
70010602:	f043 0302 	orr.w	r3, r3, #2
70010606:	b29a      	uxth	r2, r3
70010608:	687b      	ldr	r3, [r7, #4]
7001060a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
7001060c:	687b      	ldr	r3, [r7, #4]
7001060e:	2207      	movs	r2, #7
70010610:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
70010612:	e02c      	b.n	7001066e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
70010614:	4b3b      	ldr	r3, [pc, #236]	@ (70010704 <tcp_process+0x594>)
70010616:	6819      	ldr	r1, [r3, #0]
70010618:	4b3b      	ldr	r3, [pc, #236]	@ (70010708 <tcp_process+0x598>)
7001061a:	881b      	ldrh	r3, [r3, #0]
7001061c:	461a      	mov	r2, r3
7001061e:	4b3b      	ldr	r3, [pc, #236]	@ (7001070c <tcp_process+0x59c>)
70010620:	681b      	ldr	r3, [r3, #0]
70010622:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
70010624:	4b3a      	ldr	r3, [pc, #232]	@ (70010710 <tcp_process+0x5a0>)
70010626:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
70010628:	885b      	ldrh	r3, [r3, #2]
7001062a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
7001062c:	4a38      	ldr	r2, [pc, #224]	@ (70010710 <tcp_process+0x5a0>)
7001062e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
70010630:	8812      	ldrh	r2, [r2, #0]
70010632:	b292      	uxth	r2, r2
70010634:	9202      	str	r2, [sp, #8]
70010636:	9301      	str	r3, [sp, #4]
70010638:	4b36      	ldr	r3, [pc, #216]	@ (70010714 <tcp_process+0x5a4>)
7001063a:	9300      	str	r3, [sp, #0]
7001063c:	4b36      	ldr	r3, [pc, #216]	@ (70010718 <tcp_process+0x5a8>)
7001063e:	4602      	mov	r2, r0
70010640:	6878      	ldr	r0, [r7, #4]
70010642:	f002 fbcd 	bl	70012de0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
70010646:	e167      	b.n	70010918 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
70010648:	4b2d      	ldr	r3, [pc, #180]	@ (70010700 <tcp_process+0x590>)
7001064a:	781b      	ldrb	r3, [r3, #0]
7001064c:	f003 0302 	and.w	r3, r3, #2
70010650:	2b00      	cmp	r3, #0
70010652:	f000 8161 	beq.w	70010918 <tcp_process+0x7a8>
70010656:	687b      	ldr	r3, [r7, #4]
70010658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
7001065a:	1e5a      	subs	r2, r3, #1
7001065c:	4b2b      	ldr	r3, [pc, #172]	@ (7001070c <tcp_process+0x59c>)
7001065e:	681b      	ldr	r3, [r3, #0]
70010660:	429a      	cmp	r2, r3
70010662:	f040 8159 	bne.w	70010918 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
70010666:	6878      	ldr	r0, [r7, #4]
70010668:	f002 f9b4 	bl	700129d4 <tcp_rexmit>
      break;
7001066c:	e154      	b.n	70010918 <tcp_process+0x7a8>
7001066e:	e153      	b.n	70010918 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
70010670:	6878      	ldr	r0, [r7, #4]
70010672:	f000 fa71 	bl	70010b58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
70010676:	4b2d      	ldr	r3, [pc, #180]	@ (7001072c <tcp_process+0x5bc>)
70010678:	781b      	ldrb	r3, [r3, #0]
7001067a:	f003 0320 	and.w	r3, r3, #32
7001067e:	2b00      	cmp	r3, #0
70010680:	f000 814c 	beq.w	7001091c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
70010684:	687b      	ldr	r3, [r7, #4]
70010686:	8b5b      	ldrh	r3, [r3, #26]
70010688:	f043 0302 	orr.w	r3, r3, #2
7001068c:	b29a      	uxth	r2, r3
7001068e:	687b      	ldr	r3, [r7, #4]
70010690:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
70010692:	687b      	ldr	r3, [r7, #4]
70010694:	2207      	movs	r2, #7
70010696:	751a      	strb	r2, [r3, #20]
      }
      break;
70010698:	e140      	b.n	7001091c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
7001069a:	6878      	ldr	r0, [r7, #4]
7001069c:	f000 fa5c 	bl	70010b58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
700106a0:	4b22      	ldr	r3, [pc, #136]	@ (7001072c <tcp_process+0x5bc>)
700106a2:	781b      	ldrb	r3, [r3, #0]
700106a4:	f003 0320 	and.w	r3, r3, #32
700106a8:	2b00      	cmp	r3, #0
700106aa:	d071      	beq.n	70010790 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
700106ac:	4b14      	ldr	r3, [pc, #80]	@ (70010700 <tcp_process+0x590>)
700106ae:	781b      	ldrb	r3, [r3, #0]
700106b0:	f003 0310 	and.w	r3, r3, #16
700106b4:	2b00      	cmp	r3, #0
700106b6:	d060      	beq.n	7001077a <tcp_process+0x60a>
700106b8:	687b      	ldr	r3, [r7, #4]
700106ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
700106bc:	4b11      	ldr	r3, [pc, #68]	@ (70010704 <tcp_process+0x594>)
700106be:	681b      	ldr	r3, [r3, #0]
700106c0:	429a      	cmp	r2, r3
700106c2:	d15a      	bne.n	7001077a <tcp_process+0x60a>
            pcb->unsent == NULL) {
700106c4:	687b      	ldr	r3, [r7, #4]
700106c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
700106c8:	2b00      	cmp	r3, #0
700106ca:	d156      	bne.n	7001077a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
700106cc:	687b      	ldr	r3, [r7, #4]
700106ce:	8b5b      	ldrh	r3, [r3, #26]
700106d0:	f043 0302 	orr.w	r3, r3, #2
700106d4:	b29a      	uxth	r2, r3
700106d6:	687b      	ldr	r3, [r7, #4]
700106d8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
700106da:	6878      	ldr	r0, [r7, #4]
700106dc:	f7fe fdca 	bl	7000f274 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
700106e0:	4b13      	ldr	r3, [pc, #76]	@ (70010730 <tcp_process+0x5c0>)
700106e2:	681b      	ldr	r3, [r3, #0]
700106e4:	687a      	ldr	r2, [r7, #4]
700106e6:	429a      	cmp	r2, r3
700106e8:	d105      	bne.n	700106f6 <tcp_process+0x586>
700106ea:	4b11      	ldr	r3, [pc, #68]	@ (70010730 <tcp_process+0x5c0>)
700106ec:	681b      	ldr	r3, [r3, #0]
700106ee:	68db      	ldr	r3, [r3, #12]
700106f0:	4a0f      	ldr	r2, [pc, #60]	@ (70010730 <tcp_process+0x5c0>)
700106f2:	6013      	str	r3, [r2, #0]
700106f4:	e02e      	b.n	70010754 <tcp_process+0x5e4>
700106f6:	4b0e      	ldr	r3, [pc, #56]	@ (70010730 <tcp_process+0x5c0>)
700106f8:	681b      	ldr	r3, [r3, #0]
700106fa:	617b      	str	r3, [r7, #20]
700106fc:	e027      	b.n	7001074e <tcp_process+0x5de>
700106fe:	bf00      	nop
70010700:	240084bc 	.word	0x240084bc
70010704:	240084b4 	.word	0x240084b4
70010708:	240084ba 	.word	0x240084ba
7001070c:	240084b0 	.word	0x240084b0
70010710:	240084a0 	.word	0x240084a0
70010714:	24005378 	.word	0x24005378
70010718:	2400537c 	.word	0x2400537c
7001071c:	700161d8 	.word	0x700161d8
70010720:	700164a4 	.word	0x700164a4
70010724:	70016250 	.word	0x70016250
70010728:	240084b8 	.word	0x240084b8
7001072c:	240084bd 	.word	0x240084bd
70010730:	24008484 	.word	0x24008484
70010734:	697b      	ldr	r3, [r7, #20]
70010736:	68db      	ldr	r3, [r3, #12]
70010738:	687a      	ldr	r2, [r7, #4]
7001073a:	429a      	cmp	r2, r3
7001073c:	d104      	bne.n	70010748 <tcp_process+0x5d8>
7001073e:	687b      	ldr	r3, [r7, #4]
70010740:	68da      	ldr	r2, [r3, #12]
70010742:	697b      	ldr	r3, [r7, #20]
70010744:	60da      	str	r2, [r3, #12]
70010746:	e005      	b.n	70010754 <tcp_process+0x5e4>
70010748:	697b      	ldr	r3, [r7, #20]
7001074a:	68db      	ldr	r3, [r3, #12]
7001074c:	617b      	str	r3, [r7, #20]
7001074e:	697b      	ldr	r3, [r7, #20]
70010750:	2b00      	cmp	r3, #0
70010752:	d1ef      	bne.n	70010734 <tcp_process+0x5c4>
70010754:	687b      	ldr	r3, [r7, #4]
70010756:	2200      	movs	r2, #0
70010758:	60da      	str	r2, [r3, #12]
7001075a:	4b77      	ldr	r3, [pc, #476]	@ (70010938 <tcp_process+0x7c8>)
7001075c:	2201      	movs	r2, #1
7001075e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
70010760:	687b      	ldr	r3, [r7, #4]
70010762:	220a      	movs	r2, #10
70010764:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
70010766:	4b75      	ldr	r3, [pc, #468]	@ (7001093c <tcp_process+0x7cc>)
70010768:	681a      	ldr	r2, [r3, #0]
7001076a:	687b      	ldr	r3, [r7, #4]
7001076c:	60da      	str	r2, [r3, #12]
7001076e:	4a73      	ldr	r2, [pc, #460]	@ (7001093c <tcp_process+0x7cc>)
70010770:	687b      	ldr	r3, [r7, #4]
70010772:	6013      	str	r3, [r2, #0]
70010774:	f002 fe98 	bl	700134a8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
70010778:	e0d2      	b.n	70010920 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
7001077a:	687b      	ldr	r3, [r7, #4]
7001077c:	8b5b      	ldrh	r3, [r3, #26]
7001077e:	f043 0302 	orr.w	r3, r3, #2
70010782:	b29a      	uxth	r2, r3
70010784:	687b      	ldr	r3, [r7, #4]
70010786:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
70010788:	687b      	ldr	r3, [r7, #4]
7001078a:	2208      	movs	r2, #8
7001078c:	751a      	strb	r2, [r3, #20]
      break;
7001078e:	e0c7      	b.n	70010920 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
70010790:	4b6b      	ldr	r3, [pc, #428]	@ (70010940 <tcp_process+0x7d0>)
70010792:	781b      	ldrb	r3, [r3, #0]
70010794:	f003 0310 	and.w	r3, r3, #16
70010798:	2b00      	cmp	r3, #0
7001079a:	f000 80c1 	beq.w	70010920 <tcp_process+0x7b0>
7001079e:	687b      	ldr	r3, [r7, #4]
700107a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
700107a2:	4b68      	ldr	r3, [pc, #416]	@ (70010944 <tcp_process+0x7d4>)
700107a4:	681b      	ldr	r3, [r3, #0]
700107a6:	429a      	cmp	r2, r3
700107a8:	f040 80ba 	bne.w	70010920 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
700107ac:	687b      	ldr	r3, [r7, #4]
700107ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
700107b0:	2b00      	cmp	r3, #0
700107b2:	f040 80b5 	bne.w	70010920 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
700107b6:	687b      	ldr	r3, [r7, #4]
700107b8:	2206      	movs	r2, #6
700107ba:	751a      	strb	r2, [r3, #20]
      break;
700107bc:	e0b0      	b.n	70010920 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
700107be:	6878      	ldr	r0, [r7, #4]
700107c0:	f000 f9ca 	bl	70010b58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
700107c4:	4b60      	ldr	r3, [pc, #384]	@ (70010948 <tcp_process+0x7d8>)
700107c6:	781b      	ldrb	r3, [r3, #0]
700107c8:	f003 0320 	and.w	r3, r3, #32
700107cc:	2b00      	cmp	r3, #0
700107ce:	f000 80a9 	beq.w	70010924 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
700107d2:	687b      	ldr	r3, [r7, #4]
700107d4:	8b5b      	ldrh	r3, [r3, #26]
700107d6:	f043 0302 	orr.w	r3, r3, #2
700107da:	b29a      	uxth	r2, r3
700107dc:	687b      	ldr	r3, [r7, #4]
700107de:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
700107e0:	6878      	ldr	r0, [r7, #4]
700107e2:	f7fe fd47 	bl	7000f274 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
700107e6:	4b59      	ldr	r3, [pc, #356]	@ (7001094c <tcp_process+0x7dc>)
700107e8:	681b      	ldr	r3, [r3, #0]
700107ea:	687a      	ldr	r2, [r7, #4]
700107ec:	429a      	cmp	r2, r3
700107ee:	d105      	bne.n	700107fc <tcp_process+0x68c>
700107f0:	4b56      	ldr	r3, [pc, #344]	@ (7001094c <tcp_process+0x7dc>)
700107f2:	681b      	ldr	r3, [r3, #0]
700107f4:	68db      	ldr	r3, [r3, #12]
700107f6:	4a55      	ldr	r2, [pc, #340]	@ (7001094c <tcp_process+0x7dc>)
700107f8:	6013      	str	r3, [r2, #0]
700107fa:	e013      	b.n	70010824 <tcp_process+0x6b4>
700107fc:	4b53      	ldr	r3, [pc, #332]	@ (7001094c <tcp_process+0x7dc>)
700107fe:	681b      	ldr	r3, [r3, #0]
70010800:	613b      	str	r3, [r7, #16]
70010802:	e00c      	b.n	7001081e <tcp_process+0x6ae>
70010804:	693b      	ldr	r3, [r7, #16]
70010806:	68db      	ldr	r3, [r3, #12]
70010808:	687a      	ldr	r2, [r7, #4]
7001080a:	429a      	cmp	r2, r3
7001080c:	d104      	bne.n	70010818 <tcp_process+0x6a8>
7001080e:	687b      	ldr	r3, [r7, #4]
70010810:	68da      	ldr	r2, [r3, #12]
70010812:	693b      	ldr	r3, [r7, #16]
70010814:	60da      	str	r2, [r3, #12]
70010816:	e005      	b.n	70010824 <tcp_process+0x6b4>
70010818:	693b      	ldr	r3, [r7, #16]
7001081a:	68db      	ldr	r3, [r3, #12]
7001081c:	613b      	str	r3, [r7, #16]
7001081e:	693b      	ldr	r3, [r7, #16]
70010820:	2b00      	cmp	r3, #0
70010822:	d1ef      	bne.n	70010804 <tcp_process+0x694>
70010824:	687b      	ldr	r3, [r7, #4]
70010826:	2200      	movs	r2, #0
70010828:	60da      	str	r2, [r3, #12]
7001082a:	4b43      	ldr	r3, [pc, #268]	@ (70010938 <tcp_process+0x7c8>)
7001082c:	2201      	movs	r2, #1
7001082e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
70010830:	687b      	ldr	r3, [r7, #4]
70010832:	220a      	movs	r2, #10
70010834:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
70010836:	4b41      	ldr	r3, [pc, #260]	@ (7001093c <tcp_process+0x7cc>)
70010838:	681a      	ldr	r2, [r3, #0]
7001083a:	687b      	ldr	r3, [r7, #4]
7001083c:	60da      	str	r2, [r3, #12]
7001083e:	4a3f      	ldr	r2, [pc, #252]	@ (7001093c <tcp_process+0x7cc>)
70010840:	687b      	ldr	r3, [r7, #4]
70010842:	6013      	str	r3, [r2, #0]
70010844:	f002 fe30 	bl	700134a8 <tcp_timer_needed>
      }
      break;
70010848:	e06c      	b.n	70010924 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
7001084a:	6878      	ldr	r0, [r7, #4]
7001084c:	f000 f984 	bl	70010b58 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
70010850:	4b3b      	ldr	r3, [pc, #236]	@ (70010940 <tcp_process+0x7d0>)
70010852:	781b      	ldrb	r3, [r3, #0]
70010854:	f003 0310 	and.w	r3, r3, #16
70010858:	2b00      	cmp	r3, #0
7001085a:	d065      	beq.n	70010928 <tcp_process+0x7b8>
7001085c:	687b      	ldr	r3, [r7, #4]
7001085e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
70010860:	4b38      	ldr	r3, [pc, #224]	@ (70010944 <tcp_process+0x7d4>)
70010862:	681b      	ldr	r3, [r3, #0]
70010864:	429a      	cmp	r2, r3
70010866:	d15f      	bne.n	70010928 <tcp_process+0x7b8>
70010868:	687b      	ldr	r3, [r7, #4]
7001086a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7001086c:	2b00      	cmp	r3, #0
7001086e:	d15b      	bne.n	70010928 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
70010870:	6878      	ldr	r0, [r7, #4]
70010872:	f7fe fcff 	bl	7000f274 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
70010876:	4b35      	ldr	r3, [pc, #212]	@ (7001094c <tcp_process+0x7dc>)
70010878:	681b      	ldr	r3, [r3, #0]
7001087a:	687a      	ldr	r2, [r7, #4]
7001087c:	429a      	cmp	r2, r3
7001087e:	d105      	bne.n	7001088c <tcp_process+0x71c>
70010880:	4b32      	ldr	r3, [pc, #200]	@ (7001094c <tcp_process+0x7dc>)
70010882:	681b      	ldr	r3, [r3, #0]
70010884:	68db      	ldr	r3, [r3, #12]
70010886:	4a31      	ldr	r2, [pc, #196]	@ (7001094c <tcp_process+0x7dc>)
70010888:	6013      	str	r3, [r2, #0]
7001088a:	e013      	b.n	700108b4 <tcp_process+0x744>
7001088c:	4b2f      	ldr	r3, [pc, #188]	@ (7001094c <tcp_process+0x7dc>)
7001088e:	681b      	ldr	r3, [r3, #0]
70010890:	60fb      	str	r3, [r7, #12]
70010892:	e00c      	b.n	700108ae <tcp_process+0x73e>
70010894:	68fb      	ldr	r3, [r7, #12]
70010896:	68db      	ldr	r3, [r3, #12]
70010898:	687a      	ldr	r2, [r7, #4]
7001089a:	429a      	cmp	r2, r3
7001089c:	d104      	bne.n	700108a8 <tcp_process+0x738>
7001089e:	687b      	ldr	r3, [r7, #4]
700108a0:	68da      	ldr	r2, [r3, #12]
700108a2:	68fb      	ldr	r3, [r7, #12]
700108a4:	60da      	str	r2, [r3, #12]
700108a6:	e005      	b.n	700108b4 <tcp_process+0x744>
700108a8:	68fb      	ldr	r3, [r7, #12]
700108aa:	68db      	ldr	r3, [r3, #12]
700108ac:	60fb      	str	r3, [r7, #12]
700108ae:	68fb      	ldr	r3, [r7, #12]
700108b0:	2b00      	cmp	r3, #0
700108b2:	d1ef      	bne.n	70010894 <tcp_process+0x724>
700108b4:	687b      	ldr	r3, [r7, #4]
700108b6:	2200      	movs	r2, #0
700108b8:	60da      	str	r2, [r3, #12]
700108ba:	4b1f      	ldr	r3, [pc, #124]	@ (70010938 <tcp_process+0x7c8>)
700108bc:	2201      	movs	r2, #1
700108be:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
700108c0:	687b      	ldr	r3, [r7, #4]
700108c2:	220a      	movs	r2, #10
700108c4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
700108c6:	4b1d      	ldr	r3, [pc, #116]	@ (7001093c <tcp_process+0x7cc>)
700108c8:	681a      	ldr	r2, [r3, #0]
700108ca:	687b      	ldr	r3, [r7, #4]
700108cc:	60da      	str	r2, [r3, #12]
700108ce:	4a1b      	ldr	r2, [pc, #108]	@ (7001093c <tcp_process+0x7cc>)
700108d0:	687b      	ldr	r3, [r7, #4]
700108d2:	6013      	str	r3, [r2, #0]
700108d4:	f002 fde8 	bl	700134a8 <tcp_timer_needed>
      }
      break;
700108d8:	e026      	b.n	70010928 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
700108da:	6878      	ldr	r0, [r7, #4]
700108dc:	f000 f93c 	bl	70010b58 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
700108e0:	4b17      	ldr	r3, [pc, #92]	@ (70010940 <tcp_process+0x7d0>)
700108e2:	781b      	ldrb	r3, [r3, #0]
700108e4:	f003 0310 	and.w	r3, r3, #16
700108e8:	2b00      	cmp	r3, #0
700108ea:	d01f      	beq.n	7001092c <tcp_process+0x7bc>
700108ec:	687b      	ldr	r3, [r7, #4]
700108ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
700108f0:	4b14      	ldr	r3, [pc, #80]	@ (70010944 <tcp_process+0x7d4>)
700108f2:	681b      	ldr	r3, [r3, #0]
700108f4:	429a      	cmp	r2, r3
700108f6:	d119      	bne.n	7001092c <tcp_process+0x7bc>
700108f8:	687b      	ldr	r3, [r7, #4]
700108fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
700108fc:	2b00      	cmp	r3, #0
700108fe:	d115      	bne.n	7001092c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
70010900:	4b11      	ldr	r3, [pc, #68]	@ (70010948 <tcp_process+0x7d8>)
70010902:	781b      	ldrb	r3, [r3, #0]
70010904:	f043 0310 	orr.w	r3, r3, #16
70010908:	b2da      	uxtb	r2, r3
7001090a:	4b0f      	ldr	r3, [pc, #60]	@ (70010948 <tcp_process+0x7d8>)
7001090c:	701a      	strb	r2, [r3, #0]
      }
      break;
7001090e:	e00d      	b.n	7001092c <tcp_process+0x7bc>
    default:
      break;
70010910:	bf00      	nop
70010912:	e00c      	b.n	7001092e <tcp_process+0x7be>
      break;
70010914:	bf00      	nop
70010916:	e00a      	b.n	7001092e <tcp_process+0x7be>
      break;
70010918:	bf00      	nop
7001091a:	e008      	b.n	7001092e <tcp_process+0x7be>
      break;
7001091c:	bf00      	nop
7001091e:	e006      	b.n	7001092e <tcp_process+0x7be>
      break;
70010920:	bf00      	nop
70010922:	e004      	b.n	7001092e <tcp_process+0x7be>
      break;
70010924:	bf00      	nop
70010926:	e002      	b.n	7001092e <tcp_process+0x7be>
      break;
70010928:	bf00      	nop
7001092a:	e000      	b.n	7001092e <tcp_process+0x7be>
      break;
7001092c:	bf00      	nop
  }
  return ERR_OK;
7001092e:	2300      	movs	r3, #0
}
70010930:	4618      	mov	r0, r3
70010932:	3724      	adds	r7, #36	@ 0x24
70010934:	46bd      	mov	sp, r7
70010936:	bd90      	pop	{r4, r7, pc}
70010938:	2400848c 	.word	0x2400848c
7001093c:	24008488 	.word	0x24008488
70010940:	240084bc 	.word	0x240084bc
70010944:	240084b4 	.word	0x240084b4
70010948:	240084bd 	.word	0x240084bd
7001094c:	24008484 	.word	0x24008484

70010950 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
70010950:	b590      	push	{r4, r7, lr}
70010952:	b085      	sub	sp, #20
70010954:	af00      	add	r7, sp, #0
70010956:	6078      	str	r0, [r7, #4]
70010958:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
7001095a:	687b      	ldr	r3, [r7, #4]
7001095c:	2b00      	cmp	r3, #0
7001095e:	d106      	bne.n	7001096e <tcp_oos_insert_segment+0x1e>
70010960:	4b3b      	ldr	r3, [pc, #236]	@ (70010a50 <tcp_oos_insert_segment+0x100>)
70010962:	f44f 6284 	mov.w	r2, #1056	@ 0x420
70010966:	493b      	ldr	r1, [pc, #236]	@ (70010a54 <tcp_oos_insert_segment+0x104>)
70010968:	483b      	ldr	r0, [pc, #236]	@ (70010a58 <tcp_oos_insert_segment+0x108>)
7001096a:	f003 f9d1 	bl	70013d10 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
7001096e:	687b      	ldr	r3, [r7, #4]
70010970:	68db      	ldr	r3, [r3, #12]
70010972:	899b      	ldrh	r3, [r3, #12]
70010974:	b29b      	uxth	r3, r3
70010976:	4618      	mov	r0, r3
70010978:	f7f9 f822 	bl	700099c0 <lwip_htons>
7001097c:	4603      	mov	r3, r0
7001097e:	b2db      	uxtb	r3, r3
70010980:	f003 0301 	and.w	r3, r3, #1
70010984:	2b00      	cmp	r3, #0
70010986:	d028      	beq.n	700109da <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
70010988:	6838      	ldr	r0, [r7, #0]
7001098a:	f7fe fa80 	bl	7000ee8e <tcp_segs_free>
    next = NULL;
7001098e:	2300      	movs	r3, #0
70010990:	603b      	str	r3, [r7, #0]
70010992:	e056      	b.n	70010a42 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
70010994:	683b      	ldr	r3, [r7, #0]
70010996:	68db      	ldr	r3, [r3, #12]
70010998:	899b      	ldrh	r3, [r3, #12]
7001099a:	b29b      	uxth	r3, r3
7001099c:	4618      	mov	r0, r3
7001099e:	f7f9 f80f 	bl	700099c0 <lwip_htons>
700109a2:	4603      	mov	r3, r0
700109a4:	b2db      	uxtb	r3, r3
700109a6:	f003 0301 	and.w	r3, r3, #1
700109aa:	2b00      	cmp	r3, #0
700109ac:	d00d      	beq.n	700109ca <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
700109ae:	687b      	ldr	r3, [r7, #4]
700109b0:	68db      	ldr	r3, [r3, #12]
700109b2:	899b      	ldrh	r3, [r3, #12]
700109b4:	b29c      	uxth	r4, r3
700109b6:	2001      	movs	r0, #1
700109b8:	f7f9 f802 	bl	700099c0 <lwip_htons>
700109bc:	4603      	mov	r3, r0
700109be:	461a      	mov	r2, r3
700109c0:	687b      	ldr	r3, [r7, #4]
700109c2:	68db      	ldr	r3, [r3, #12]
700109c4:	4322      	orrs	r2, r4
700109c6:	b292      	uxth	r2, r2
700109c8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
700109ca:	683b      	ldr	r3, [r7, #0]
700109cc:	60fb      	str	r3, [r7, #12]
      next = next->next;
700109ce:	683b      	ldr	r3, [r7, #0]
700109d0:	681b      	ldr	r3, [r3, #0]
700109d2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
700109d4:	68f8      	ldr	r0, [r7, #12]
700109d6:	f7fe fa6f 	bl	7000eeb8 <tcp_seg_free>
    while (next &&
700109da:	683b      	ldr	r3, [r7, #0]
700109dc:	2b00      	cmp	r3, #0
700109de:	d00e      	beq.n	700109fe <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
700109e0:	687b      	ldr	r3, [r7, #4]
700109e2:	891b      	ldrh	r3, [r3, #8]
700109e4:	461a      	mov	r2, r3
700109e6:	4b1d      	ldr	r3, [pc, #116]	@ (70010a5c <tcp_oos_insert_segment+0x10c>)
700109e8:	681b      	ldr	r3, [r3, #0]
700109ea:	441a      	add	r2, r3
700109ec:	683b      	ldr	r3, [r7, #0]
700109ee:	68db      	ldr	r3, [r3, #12]
700109f0:	685b      	ldr	r3, [r3, #4]
700109f2:	6839      	ldr	r1, [r7, #0]
700109f4:	8909      	ldrh	r1, [r1, #8]
700109f6:	440b      	add	r3, r1
700109f8:	1ad3      	subs	r3, r2, r3
    while (next &&
700109fa:	2b00      	cmp	r3, #0
700109fc:	daca      	bge.n	70010994 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
700109fe:	683b      	ldr	r3, [r7, #0]
70010a00:	2b00      	cmp	r3, #0
70010a02:	d01e      	beq.n	70010a42 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
70010a04:	687b      	ldr	r3, [r7, #4]
70010a06:	891b      	ldrh	r3, [r3, #8]
70010a08:	461a      	mov	r2, r3
70010a0a:	4b14      	ldr	r3, [pc, #80]	@ (70010a5c <tcp_oos_insert_segment+0x10c>)
70010a0c:	681b      	ldr	r3, [r3, #0]
70010a0e:	441a      	add	r2, r3
70010a10:	683b      	ldr	r3, [r7, #0]
70010a12:	68db      	ldr	r3, [r3, #12]
70010a14:	685b      	ldr	r3, [r3, #4]
70010a16:	1ad3      	subs	r3, r2, r3
    if (next &&
70010a18:	2b00      	cmp	r3, #0
70010a1a:	dd12      	ble.n	70010a42 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
70010a1c:	683b      	ldr	r3, [r7, #0]
70010a1e:	68db      	ldr	r3, [r3, #12]
70010a20:	685b      	ldr	r3, [r3, #4]
70010a22:	b29a      	uxth	r2, r3
70010a24:	4b0d      	ldr	r3, [pc, #52]	@ (70010a5c <tcp_oos_insert_segment+0x10c>)
70010a26:	681b      	ldr	r3, [r3, #0]
70010a28:	b29b      	uxth	r3, r3
70010a2a:	1ad3      	subs	r3, r2, r3
70010a2c:	b29a      	uxth	r2, r3
70010a2e:	687b      	ldr	r3, [r7, #4]
70010a30:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
70010a32:	687b      	ldr	r3, [r7, #4]
70010a34:	685a      	ldr	r2, [r3, #4]
70010a36:	687b      	ldr	r3, [r7, #4]
70010a38:	891b      	ldrh	r3, [r3, #8]
70010a3a:	4619      	mov	r1, r3
70010a3c:	4610      	mov	r0, r2
70010a3e:	f7fc fd7f 	bl	7000d540 <pbuf_realloc>
    }
  }
  cseg->next = next;
70010a42:	687b      	ldr	r3, [r7, #4]
70010a44:	683a      	ldr	r2, [r7, #0]
70010a46:	601a      	str	r2, [r3, #0]
}
70010a48:	bf00      	nop
70010a4a:	3714      	adds	r7, #20
70010a4c:	46bd      	mov	sp, r7
70010a4e:	bd90      	pop	{r4, r7, pc}
70010a50:	700161d8 	.word	0x700161d8
70010a54:	700164c4 	.word	0x700164c4
70010a58:	70016250 	.word	0x70016250
70010a5c:	240084b0 	.word	0x240084b0

70010a60 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
70010a60:	b5b0      	push	{r4, r5, r7, lr}
70010a62:	b086      	sub	sp, #24
70010a64:	af00      	add	r7, sp, #0
70010a66:	60f8      	str	r0, [r7, #12]
70010a68:	60b9      	str	r1, [r7, #8]
70010a6a:	607a      	str	r2, [r7, #4]
70010a6c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
70010a6e:	e03e      	b.n	70010aee <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
70010a70:	68bb      	ldr	r3, [r7, #8]
70010a72:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
70010a74:	68bb      	ldr	r3, [r7, #8]
70010a76:	681b      	ldr	r3, [r3, #0]
70010a78:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
70010a7a:	697b      	ldr	r3, [r7, #20]
70010a7c:	685b      	ldr	r3, [r3, #4]
70010a7e:	4618      	mov	r0, r3
70010a80:	f7fc ff68 	bl	7000d954 <pbuf_clen>
70010a84:	4603      	mov	r3, r0
70010a86:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
70010a88:	68fb      	ldr	r3, [r7, #12]
70010a8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
70010a8e:	8a7a      	ldrh	r2, [r7, #18]
70010a90:	429a      	cmp	r2, r3
70010a92:	d906      	bls.n	70010aa2 <tcp_free_acked_segments+0x42>
70010a94:	4b2a      	ldr	r3, [pc, #168]	@ (70010b40 <tcp_free_acked_segments+0xe0>)
70010a96:	f44f 628b 	mov.w	r2, #1112	@ 0x458
70010a9a:	492a      	ldr	r1, [pc, #168]	@ (70010b44 <tcp_free_acked_segments+0xe4>)
70010a9c:	482a      	ldr	r0, [pc, #168]	@ (70010b48 <tcp_free_acked_segments+0xe8>)
70010a9e:	f003 f937 	bl	70013d10 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
70010aa2:	68fb      	ldr	r3, [r7, #12]
70010aa4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
70010aa8:	8a7b      	ldrh	r3, [r7, #18]
70010aaa:	1ad3      	subs	r3, r2, r3
70010aac:	b29a      	uxth	r2, r3
70010aae:	68fb      	ldr	r3, [r7, #12]
70010ab0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
70010ab4:	697b      	ldr	r3, [r7, #20]
70010ab6:	891a      	ldrh	r2, [r3, #8]
70010ab8:	4b24      	ldr	r3, [pc, #144]	@ (70010b4c <tcp_free_acked_segments+0xec>)
70010aba:	881b      	ldrh	r3, [r3, #0]
70010abc:	4413      	add	r3, r2
70010abe:	b29a      	uxth	r2, r3
70010ac0:	4b22      	ldr	r3, [pc, #136]	@ (70010b4c <tcp_free_acked_segments+0xec>)
70010ac2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
70010ac4:	6978      	ldr	r0, [r7, #20]
70010ac6:	f7fe f9f7 	bl	7000eeb8 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
70010aca:	68fb      	ldr	r3, [r7, #12]
70010acc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
70010ad0:	2b00      	cmp	r3, #0
70010ad2:	d00c      	beq.n	70010aee <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
70010ad4:	68bb      	ldr	r3, [r7, #8]
70010ad6:	2b00      	cmp	r3, #0
70010ad8:	d109      	bne.n	70010aee <tcp_free_acked_segments+0x8e>
70010ada:	683b      	ldr	r3, [r7, #0]
70010adc:	2b00      	cmp	r3, #0
70010ade:	d106      	bne.n	70010aee <tcp_free_acked_segments+0x8e>
70010ae0:	4b17      	ldr	r3, [pc, #92]	@ (70010b40 <tcp_free_acked_segments+0xe0>)
70010ae2:	f240 4262 	movw	r2, #1122	@ 0x462
70010ae6:	491a      	ldr	r1, [pc, #104]	@ (70010b50 <tcp_free_acked_segments+0xf0>)
70010ae8:	4817      	ldr	r0, [pc, #92]	@ (70010b48 <tcp_free_acked_segments+0xe8>)
70010aea:	f003 f911 	bl	70013d10 <iprintf>
  while (seg_list != NULL &&
70010aee:	68bb      	ldr	r3, [r7, #8]
70010af0:	2b00      	cmp	r3, #0
70010af2:	d020      	beq.n	70010b36 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
70010af4:	68bb      	ldr	r3, [r7, #8]
70010af6:	68db      	ldr	r3, [r3, #12]
70010af8:	685b      	ldr	r3, [r3, #4]
70010afa:	4618      	mov	r0, r3
70010afc:	f7f8 ff75 	bl	700099ea <lwip_htonl>
70010b00:	4604      	mov	r4, r0
70010b02:	68bb      	ldr	r3, [r7, #8]
70010b04:	891b      	ldrh	r3, [r3, #8]
70010b06:	461d      	mov	r5, r3
70010b08:	68bb      	ldr	r3, [r7, #8]
70010b0a:	68db      	ldr	r3, [r3, #12]
70010b0c:	899b      	ldrh	r3, [r3, #12]
70010b0e:	b29b      	uxth	r3, r3
70010b10:	4618      	mov	r0, r3
70010b12:	f7f8 ff55 	bl	700099c0 <lwip_htons>
70010b16:	4603      	mov	r3, r0
70010b18:	b2db      	uxtb	r3, r3
70010b1a:	f003 0303 	and.w	r3, r3, #3
70010b1e:	2b00      	cmp	r3, #0
70010b20:	d001      	beq.n	70010b26 <tcp_free_acked_segments+0xc6>
70010b22:	2301      	movs	r3, #1
70010b24:	e000      	b.n	70010b28 <tcp_free_acked_segments+0xc8>
70010b26:	2300      	movs	r3, #0
70010b28:	442b      	add	r3, r5
70010b2a:	18e2      	adds	r2, r4, r3
70010b2c:	4b09      	ldr	r3, [pc, #36]	@ (70010b54 <tcp_free_acked_segments+0xf4>)
70010b2e:	681b      	ldr	r3, [r3, #0]
70010b30:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
70010b32:	2b00      	cmp	r3, #0
70010b34:	dd9c      	ble.n	70010a70 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
70010b36:	68bb      	ldr	r3, [r7, #8]
}
70010b38:	4618      	mov	r0, r3
70010b3a:	3718      	adds	r7, #24
70010b3c:	46bd      	mov	sp, r7
70010b3e:	bdb0      	pop	{r4, r5, r7, pc}
70010b40:	700161d8 	.word	0x700161d8
70010b44:	700164ec 	.word	0x700164ec
70010b48:	70016250 	.word	0x70016250
70010b4c:	240084b8 	.word	0x240084b8
70010b50:	70016514 	.word	0x70016514
70010b54:	240084b4 	.word	0x240084b4

70010b58 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
70010b58:	b5b0      	push	{r4, r5, r7, lr}
70010b5a:	b094      	sub	sp, #80	@ 0x50
70010b5c:	af00      	add	r7, sp, #0
70010b5e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
70010b60:	2300      	movs	r3, #0
70010b62:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
70010b64:	687b      	ldr	r3, [r7, #4]
70010b66:	2b00      	cmp	r3, #0
70010b68:	d106      	bne.n	70010b78 <tcp_receive+0x20>
70010b6a:	4b91      	ldr	r3, [pc, #580]	@ (70010db0 <tcp_receive+0x258>)
70010b6c:	f240 427c 	movw	r2, #1148	@ 0x47c
70010b70:	4990      	ldr	r1, [pc, #576]	@ (70010db4 <tcp_receive+0x25c>)
70010b72:	4891      	ldr	r0, [pc, #580]	@ (70010db8 <tcp_receive+0x260>)
70010b74:	f003 f8cc 	bl	70013d10 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
70010b78:	687b      	ldr	r3, [r7, #4]
70010b7a:	7d1b      	ldrb	r3, [r3, #20]
70010b7c:	2b03      	cmp	r3, #3
70010b7e:	d806      	bhi.n	70010b8e <tcp_receive+0x36>
70010b80:	4b8b      	ldr	r3, [pc, #556]	@ (70010db0 <tcp_receive+0x258>)
70010b82:	f240 427d 	movw	r2, #1149	@ 0x47d
70010b86:	498d      	ldr	r1, [pc, #564]	@ (70010dbc <tcp_receive+0x264>)
70010b88:	488b      	ldr	r0, [pc, #556]	@ (70010db8 <tcp_receive+0x260>)
70010b8a:	f003 f8c1 	bl	70013d10 <iprintf>

  if (flags & TCP_ACK) {
70010b8e:	4b8c      	ldr	r3, [pc, #560]	@ (70010dc0 <tcp_receive+0x268>)
70010b90:	781b      	ldrb	r3, [r3, #0]
70010b92:	f003 0310 	and.w	r3, r3, #16
70010b96:	2b00      	cmp	r3, #0
70010b98:	f000 8264 	beq.w	70011064 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
70010b9c:	687b      	ldr	r3, [r7, #4]
70010b9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
70010ba2:	461a      	mov	r2, r3
70010ba4:	687b      	ldr	r3, [r7, #4]
70010ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
70010ba8:	4413      	add	r3, r2
70010baa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
70010bac:	687b      	ldr	r3, [r7, #4]
70010bae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
70010bb0:	4b84      	ldr	r3, [pc, #528]	@ (70010dc4 <tcp_receive+0x26c>)
70010bb2:	681b      	ldr	r3, [r3, #0]
70010bb4:	1ad3      	subs	r3, r2, r3
70010bb6:	2b00      	cmp	r3, #0
70010bb8:	db1b      	blt.n	70010bf2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
70010bba:	687b      	ldr	r3, [r7, #4]
70010bbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
70010bbe:	4b81      	ldr	r3, [pc, #516]	@ (70010dc4 <tcp_receive+0x26c>)
70010bc0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
70010bc2:	429a      	cmp	r2, r3
70010bc4:	d106      	bne.n	70010bd4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
70010bc6:	687b      	ldr	r3, [r7, #4]
70010bc8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
70010bca:	4b7f      	ldr	r3, [pc, #508]	@ (70010dc8 <tcp_receive+0x270>)
70010bcc:	681b      	ldr	r3, [r3, #0]
70010bce:	1ad3      	subs	r3, r2, r3
70010bd0:	2b00      	cmp	r3, #0
70010bd2:	db0e      	blt.n	70010bf2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
70010bd4:	687b      	ldr	r3, [r7, #4]
70010bd6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
70010bd8:	4b7b      	ldr	r3, [pc, #492]	@ (70010dc8 <tcp_receive+0x270>)
70010bda:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
70010bdc:	429a      	cmp	r2, r3
70010bde:	d125      	bne.n	70010c2c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
70010be0:	4b7a      	ldr	r3, [pc, #488]	@ (70010dcc <tcp_receive+0x274>)
70010be2:	681b      	ldr	r3, [r3, #0]
70010be4:	89db      	ldrh	r3, [r3, #14]
70010be6:	b29a      	uxth	r2, r3
70010be8:	687b      	ldr	r3, [r7, #4]
70010bea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
70010bee:	429a      	cmp	r2, r3
70010bf0:	d91c      	bls.n	70010c2c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
70010bf2:	4b76      	ldr	r3, [pc, #472]	@ (70010dcc <tcp_receive+0x274>)
70010bf4:	681b      	ldr	r3, [r3, #0]
70010bf6:	89db      	ldrh	r3, [r3, #14]
70010bf8:	b29a      	uxth	r2, r3
70010bfa:	687b      	ldr	r3, [r7, #4]
70010bfc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
70010c00:	687b      	ldr	r3, [r7, #4]
70010c02:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
70010c06:	687b      	ldr	r3, [r7, #4]
70010c08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
70010c0c:	429a      	cmp	r2, r3
70010c0e:	d205      	bcs.n	70010c1c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
70010c10:	687b      	ldr	r3, [r7, #4]
70010c12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
70010c16:	687b      	ldr	r3, [r7, #4]
70010c18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
70010c1c:	4b69      	ldr	r3, [pc, #420]	@ (70010dc4 <tcp_receive+0x26c>)
70010c1e:	681a      	ldr	r2, [r3, #0]
70010c20:	687b      	ldr	r3, [r7, #4]
70010c22:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
70010c24:	4b68      	ldr	r3, [pc, #416]	@ (70010dc8 <tcp_receive+0x270>)
70010c26:	681a      	ldr	r2, [r3, #0]
70010c28:	687b      	ldr	r3, [r7, #4]
70010c2a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
70010c2c:	4b66      	ldr	r3, [pc, #408]	@ (70010dc8 <tcp_receive+0x270>)
70010c2e:	681a      	ldr	r2, [r3, #0]
70010c30:	687b      	ldr	r3, [r7, #4]
70010c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70010c34:	1ad3      	subs	r3, r2, r3
70010c36:	2b00      	cmp	r3, #0
70010c38:	dc58      	bgt.n	70010cec <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
70010c3a:	4b65      	ldr	r3, [pc, #404]	@ (70010dd0 <tcp_receive+0x278>)
70010c3c:	881b      	ldrh	r3, [r3, #0]
70010c3e:	2b00      	cmp	r3, #0
70010c40:	d14b      	bne.n	70010cda <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
70010c42:	687b      	ldr	r3, [r7, #4]
70010c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
70010c46:	687a      	ldr	r2, [r7, #4]
70010c48:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
70010c4c:	4413      	add	r3, r2
70010c4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
70010c50:	429a      	cmp	r2, r3
70010c52:	d142      	bne.n	70010cda <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
70010c54:	687b      	ldr	r3, [r7, #4]
70010c56:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
70010c5a:	2b00      	cmp	r3, #0
70010c5c:	db3d      	blt.n	70010cda <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
70010c5e:	687b      	ldr	r3, [r7, #4]
70010c60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
70010c62:	4b59      	ldr	r3, [pc, #356]	@ (70010dc8 <tcp_receive+0x270>)
70010c64:	681b      	ldr	r3, [r3, #0]
70010c66:	429a      	cmp	r2, r3
70010c68:	d137      	bne.n	70010cda <tcp_receive+0x182>
              found_dupack = 1;
70010c6a:	2301      	movs	r3, #1
70010c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
70010c6e:	687b      	ldr	r3, [r7, #4]
70010c70:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
70010c74:	2bff      	cmp	r3, #255	@ 0xff
70010c76:	d007      	beq.n	70010c88 <tcp_receive+0x130>
                ++pcb->dupacks;
70010c78:	687b      	ldr	r3, [r7, #4]
70010c7a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
70010c7e:	3301      	adds	r3, #1
70010c80:	b2da      	uxtb	r2, r3
70010c82:	687b      	ldr	r3, [r7, #4]
70010c84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
70010c88:	687b      	ldr	r3, [r7, #4]
70010c8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
70010c8e:	2b03      	cmp	r3, #3
70010c90:	d91b      	bls.n	70010cca <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
70010c92:	687b      	ldr	r3, [r7, #4]
70010c94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
70010c98:	687b      	ldr	r3, [r7, #4]
70010c9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70010c9c:	4413      	add	r3, r2
70010c9e:	b29a      	uxth	r2, r3
70010ca0:	687b      	ldr	r3, [r7, #4]
70010ca2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
70010ca6:	429a      	cmp	r2, r3
70010ca8:	d30a      	bcc.n	70010cc0 <tcp_receive+0x168>
70010caa:	687b      	ldr	r3, [r7, #4]
70010cac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
70010cb0:	687b      	ldr	r3, [r7, #4]
70010cb2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70010cb4:	4413      	add	r3, r2
70010cb6:	b29a      	uxth	r2, r3
70010cb8:	687b      	ldr	r3, [r7, #4]
70010cba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
70010cbe:	e004      	b.n	70010cca <tcp_receive+0x172>
70010cc0:	687b      	ldr	r3, [r7, #4]
70010cc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
70010cc6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
70010cca:	687b      	ldr	r3, [r7, #4]
70010ccc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
70010cd0:	2b02      	cmp	r3, #2
70010cd2:	d902      	bls.n	70010cda <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
70010cd4:	6878      	ldr	r0, [r7, #4]
70010cd6:	f001 fee9 	bl	70012aac <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
70010cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
70010cdc:	2b00      	cmp	r3, #0
70010cde:	f040 8161 	bne.w	70010fa4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
70010ce2:	687b      	ldr	r3, [r7, #4]
70010ce4:	2200      	movs	r2, #0
70010ce6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
70010cea:	e15b      	b.n	70010fa4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
70010cec:	4b36      	ldr	r3, [pc, #216]	@ (70010dc8 <tcp_receive+0x270>)
70010cee:	681a      	ldr	r2, [r3, #0]
70010cf0:	687b      	ldr	r3, [r7, #4]
70010cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70010cf4:	1ad3      	subs	r3, r2, r3
70010cf6:	3b01      	subs	r3, #1
70010cf8:	2b00      	cmp	r3, #0
70010cfa:	f2c0 814e 	blt.w	70010f9a <tcp_receive+0x442>
70010cfe:	4b32      	ldr	r3, [pc, #200]	@ (70010dc8 <tcp_receive+0x270>)
70010d00:	681a      	ldr	r2, [r3, #0]
70010d02:	687b      	ldr	r3, [r7, #4]
70010d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70010d06:	1ad3      	subs	r3, r2, r3
70010d08:	2b00      	cmp	r3, #0
70010d0a:	f300 8146 	bgt.w	70010f9a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
70010d0e:	687b      	ldr	r3, [r7, #4]
70010d10:	8b5b      	ldrh	r3, [r3, #26]
70010d12:	f003 0304 	and.w	r3, r3, #4
70010d16:	2b00      	cmp	r3, #0
70010d18:	d010      	beq.n	70010d3c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
70010d1a:	687b      	ldr	r3, [r7, #4]
70010d1c:	8b5b      	ldrh	r3, [r3, #26]
70010d1e:	f023 0304 	bic.w	r3, r3, #4
70010d22:	b29a      	uxth	r2, r3
70010d24:	687b      	ldr	r3, [r7, #4]
70010d26:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
70010d28:	687b      	ldr	r3, [r7, #4]
70010d2a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
70010d2e:	687b      	ldr	r3, [r7, #4]
70010d30:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
70010d34:	687b      	ldr	r3, [r7, #4]
70010d36:	2200      	movs	r2, #0
70010d38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
70010d3c:	687b      	ldr	r3, [r7, #4]
70010d3e:	2200      	movs	r2, #0
70010d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
70010d44:	687b      	ldr	r3, [r7, #4]
70010d46:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
70010d4a:	10db      	asrs	r3, r3, #3
70010d4c:	b21b      	sxth	r3, r3
70010d4e:	b29a      	uxth	r2, r3
70010d50:	687b      	ldr	r3, [r7, #4]
70010d52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
70010d56:	b29b      	uxth	r3, r3
70010d58:	4413      	add	r3, r2
70010d5a:	b29b      	uxth	r3, r3
70010d5c:	b21a      	sxth	r2, r3
70010d5e:	687b      	ldr	r3, [r7, #4]
70010d60:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
70010d64:	4b18      	ldr	r3, [pc, #96]	@ (70010dc8 <tcp_receive+0x270>)
70010d66:	681b      	ldr	r3, [r3, #0]
70010d68:	b29a      	uxth	r2, r3
70010d6a:	687b      	ldr	r3, [r7, #4]
70010d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70010d6e:	b29b      	uxth	r3, r3
70010d70:	1ad3      	subs	r3, r2, r3
70010d72:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
70010d74:	687b      	ldr	r3, [r7, #4]
70010d76:	2200      	movs	r2, #0
70010d78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
70010d7c:	4b12      	ldr	r3, [pc, #72]	@ (70010dc8 <tcp_receive+0x270>)
70010d7e:	681a      	ldr	r2, [r3, #0]
70010d80:	687b      	ldr	r3, [r7, #4]
70010d82:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
70010d84:	687b      	ldr	r3, [r7, #4]
70010d86:	7d1b      	ldrb	r3, [r3, #20]
70010d88:	2b03      	cmp	r3, #3
70010d8a:	f240 8097 	bls.w	70010ebc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
70010d8e:	687b      	ldr	r3, [r7, #4]
70010d90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
70010d94:	687b      	ldr	r3, [r7, #4]
70010d96:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
70010d9a:	429a      	cmp	r2, r3
70010d9c:	d245      	bcs.n	70010e2a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
70010d9e:	687b      	ldr	r3, [r7, #4]
70010da0:	8b5b      	ldrh	r3, [r3, #26]
70010da2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
70010da6:	2b00      	cmp	r3, #0
70010da8:	d014      	beq.n	70010dd4 <tcp_receive+0x27c>
70010daa:	2301      	movs	r3, #1
70010dac:	e013      	b.n	70010dd6 <tcp_receive+0x27e>
70010dae:	bf00      	nop
70010db0:	700161d8 	.word	0x700161d8
70010db4:	70016534 	.word	0x70016534
70010db8:	70016250 	.word	0x70016250
70010dbc:	70016550 	.word	0x70016550
70010dc0:	240084bc 	.word	0x240084bc
70010dc4:	240084b0 	.word	0x240084b0
70010dc8:	240084b4 	.word	0x240084b4
70010dcc:	240084a0 	.word	0x240084a0
70010dd0:	240084ba 	.word	0x240084ba
70010dd4:	2302      	movs	r3, #2
70010dd6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
70010dda:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
70010dde:	b29a      	uxth	r2, r3
70010de0:	687b      	ldr	r3, [r7, #4]
70010de2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70010de4:	fb12 f303 	smulbb	r3, r2, r3
70010de8:	b29b      	uxth	r3, r3
70010dea:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
70010dec:	4293      	cmp	r3, r2
70010dee:	bf28      	it	cs
70010df0:	4613      	movcs	r3, r2
70010df2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
70010df4:	687b      	ldr	r3, [r7, #4]
70010df6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
70010dfa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
70010dfc:	4413      	add	r3, r2
70010dfe:	b29a      	uxth	r2, r3
70010e00:	687b      	ldr	r3, [r7, #4]
70010e02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
70010e06:	429a      	cmp	r2, r3
70010e08:	d309      	bcc.n	70010e1e <tcp_receive+0x2c6>
70010e0a:	687b      	ldr	r3, [r7, #4]
70010e0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
70010e10:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
70010e12:	4413      	add	r3, r2
70010e14:	b29a      	uxth	r2, r3
70010e16:	687b      	ldr	r3, [r7, #4]
70010e18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
70010e1c:	e04e      	b.n	70010ebc <tcp_receive+0x364>
70010e1e:	687b      	ldr	r3, [r7, #4]
70010e20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
70010e24:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
70010e28:	e048      	b.n	70010ebc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
70010e2a:	687b      	ldr	r3, [r7, #4]
70010e2c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
70010e30:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
70010e32:	4413      	add	r3, r2
70010e34:	b29a      	uxth	r2, r3
70010e36:	687b      	ldr	r3, [r7, #4]
70010e38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
70010e3c:	429a      	cmp	r2, r3
70010e3e:	d309      	bcc.n	70010e54 <tcp_receive+0x2fc>
70010e40:	687b      	ldr	r3, [r7, #4]
70010e42:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
70010e46:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
70010e48:	4413      	add	r3, r2
70010e4a:	b29a      	uxth	r2, r3
70010e4c:	687b      	ldr	r3, [r7, #4]
70010e4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
70010e52:	e004      	b.n	70010e5e <tcp_receive+0x306>
70010e54:	687b      	ldr	r3, [r7, #4]
70010e56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
70010e5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
70010e5e:	687b      	ldr	r3, [r7, #4]
70010e60:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
70010e64:	687b      	ldr	r3, [r7, #4]
70010e66:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
70010e6a:	429a      	cmp	r2, r3
70010e6c:	d326      	bcc.n	70010ebc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
70010e6e:	687b      	ldr	r3, [r7, #4]
70010e70:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
70010e74:	687b      	ldr	r3, [r7, #4]
70010e76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
70010e7a:	1ad3      	subs	r3, r2, r3
70010e7c:	b29a      	uxth	r2, r3
70010e7e:	687b      	ldr	r3, [r7, #4]
70010e80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
70010e84:	687b      	ldr	r3, [r7, #4]
70010e86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
70010e8a:	687b      	ldr	r3, [r7, #4]
70010e8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70010e8e:	4413      	add	r3, r2
70010e90:	b29a      	uxth	r2, r3
70010e92:	687b      	ldr	r3, [r7, #4]
70010e94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
70010e98:	429a      	cmp	r2, r3
70010e9a:	d30a      	bcc.n	70010eb2 <tcp_receive+0x35a>
70010e9c:	687b      	ldr	r3, [r7, #4]
70010e9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
70010ea2:	687b      	ldr	r3, [r7, #4]
70010ea4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70010ea6:	4413      	add	r3, r2
70010ea8:	b29a      	uxth	r2, r3
70010eaa:	687b      	ldr	r3, [r7, #4]
70010eac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
70010eb0:	e004      	b.n	70010ebc <tcp_receive+0x364>
70010eb2:	687b      	ldr	r3, [r7, #4]
70010eb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
70010eb8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
70010ebc:	687b      	ldr	r3, [r7, #4]
70010ebe:	6f19      	ldr	r1, [r3, #112]	@ 0x70
70010ec0:	687b      	ldr	r3, [r7, #4]
70010ec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70010ec4:	4a98      	ldr	r2, [pc, #608]	@ (70011128 <tcp_receive+0x5d0>)
70010ec6:	6878      	ldr	r0, [r7, #4]
70010ec8:	f7ff fdca 	bl	70010a60 <tcp_free_acked_segments>
70010ecc:	4602      	mov	r2, r0
70010ece:	687b      	ldr	r3, [r7, #4]
70010ed0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
70010ed2:	687b      	ldr	r3, [r7, #4]
70010ed4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
70010ed6:	687b      	ldr	r3, [r7, #4]
70010ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70010eda:	4a94      	ldr	r2, [pc, #592]	@ (7001112c <tcp_receive+0x5d4>)
70010edc:	6878      	ldr	r0, [r7, #4]
70010ede:	f7ff fdbf 	bl	70010a60 <tcp_free_acked_segments>
70010ee2:	4602      	mov	r2, r0
70010ee4:	687b      	ldr	r3, [r7, #4]
70010ee6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
70010ee8:	687b      	ldr	r3, [r7, #4]
70010eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70010eec:	2b00      	cmp	r3, #0
70010eee:	d104      	bne.n	70010efa <tcp_receive+0x3a2>
        pcb->rtime = -1;
70010ef0:	687b      	ldr	r3, [r7, #4]
70010ef2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
70010ef6:	861a      	strh	r2, [r3, #48]	@ 0x30
70010ef8:	e002      	b.n	70010f00 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
70010efa:	687b      	ldr	r3, [r7, #4]
70010efc:	2200      	movs	r2, #0
70010efe:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
70010f00:	687b      	ldr	r3, [r7, #4]
70010f02:	2200      	movs	r2, #0
70010f04:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
70010f06:	687b      	ldr	r3, [r7, #4]
70010f08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70010f0a:	2b00      	cmp	r3, #0
70010f0c:	d103      	bne.n	70010f16 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
70010f0e:	687b      	ldr	r3, [r7, #4]
70010f10:	2200      	movs	r2, #0
70010f12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
70010f16:	687b      	ldr	r3, [r7, #4]
70010f18:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
70010f1c:	4b84      	ldr	r3, [pc, #528]	@ (70011130 <tcp_receive+0x5d8>)
70010f1e:	881b      	ldrh	r3, [r3, #0]
70010f20:	4413      	add	r3, r2
70010f22:	b29a      	uxth	r2, r3
70010f24:	687b      	ldr	r3, [r7, #4]
70010f26:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
70010f2a:	687b      	ldr	r3, [r7, #4]
70010f2c:	8b5b      	ldrh	r3, [r3, #26]
70010f2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
70010f32:	2b00      	cmp	r3, #0
70010f34:	d035      	beq.n	70010fa2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
70010f36:	687b      	ldr	r3, [r7, #4]
70010f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70010f3a:	2b00      	cmp	r3, #0
70010f3c:	d118      	bne.n	70010f70 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
70010f3e:	687b      	ldr	r3, [r7, #4]
70010f40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70010f42:	2b00      	cmp	r3, #0
70010f44:	d00c      	beq.n	70010f60 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
70010f46:	687b      	ldr	r3, [r7, #4]
70010f48:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
70010f4a:	687b      	ldr	r3, [r7, #4]
70010f4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70010f4e:	68db      	ldr	r3, [r3, #12]
70010f50:	685b      	ldr	r3, [r3, #4]
70010f52:	4618      	mov	r0, r3
70010f54:	f7f8 fd49 	bl	700099ea <lwip_htonl>
70010f58:	4603      	mov	r3, r0
70010f5a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
70010f5c:	2b00      	cmp	r3, #0
70010f5e:	dc20      	bgt.n	70010fa2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
70010f60:	687b      	ldr	r3, [r7, #4]
70010f62:	8b5b      	ldrh	r3, [r3, #26]
70010f64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
70010f68:	b29a      	uxth	r2, r3
70010f6a:	687b      	ldr	r3, [r7, #4]
70010f6c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
70010f6e:	e018      	b.n	70010fa2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
70010f70:	687b      	ldr	r3, [r7, #4]
70010f72:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
70010f74:	687b      	ldr	r3, [r7, #4]
70010f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70010f78:	68db      	ldr	r3, [r3, #12]
70010f7a:	685b      	ldr	r3, [r3, #4]
70010f7c:	4618      	mov	r0, r3
70010f7e:	f7f8 fd34 	bl	700099ea <lwip_htonl>
70010f82:	4603      	mov	r3, r0
70010f84:	1ae3      	subs	r3, r4, r3
70010f86:	2b00      	cmp	r3, #0
70010f88:	dc0b      	bgt.n	70010fa2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
70010f8a:	687b      	ldr	r3, [r7, #4]
70010f8c:	8b5b      	ldrh	r3, [r3, #26]
70010f8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
70010f92:	b29a      	uxth	r2, r3
70010f94:	687b      	ldr	r3, [r7, #4]
70010f96:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
70010f98:	e003      	b.n	70010fa2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
70010f9a:	6878      	ldr	r0, [r7, #4]
70010f9c:	f001 ff72 	bl	70012e84 <tcp_send_empty_ack>
70010fa0:	e000      	b.n	70010fa4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
70010fa2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
70010fa4:	687b      	ldr	r3, [r7, #4]
70010fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
70010fa8:	2b00      	cmp	r3, #0
70010faa:	d05b      	beq.n	70011064 <tcp_receive+0x50c>
70010fac:	687b      	ldr	r3, [r7, #4]
70010fae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
70010fb0:	4b60      	ldr	r3, [pc, #384]	@ (70011134 <tcp_receive+0x5dc>)
70010fb2:	681b      	ldr	r3, [r3, #0]
70010fb4:	1ad3      	subs	r3, r2, r3
70010fb6:	2b00      	cmp	r3, #0
70010fb8:	da54      	bge.n	70011064 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
70010fba:	4b5f      	ldr	r3, [pc, #380]	@ (70011138 <tcp_receive+0x5e0>)
70010fbc:	681b      	ldr	r3, [r3, #0]
70010fbe:	b29a      	uxth	r2, r3
70010fc0:	687b      	ldr	r3, [r7, #4]
70010fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
70010fc4:	b29b      	uxth	r3, r3
70010fc6:	1ad3      	subs	r3, r2, r3
70010fc8:	b29b      	uxth	r3, r3
70010fca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
70010fce:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
70010fd2:	687b      	ldr	r3, [r7, #4]
70010fd4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
70010fd8:	10db      	asrs	r3, r3, #3
70010fda:	b21b      	sxth	r3, r3
70010fdc:	b29b      	uxth	r3, r3
70010fde:	1ad3      	subs	r3, r2, r3
70010fe0:	b29b      	uxth	r3, r3
70010fe2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
70010fe6:	687b      	ldr	r3, [r7, #4]
70010fe8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
70010fec:	b29a      	uxth	r2, r3
70010fee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
70010ff2:	4413      	add	r3, r2
70010ff4:	b29b      	uxth	r3, r3
70010ff6:	b21a      	sxth	r2, r3
70010ff8:	687b      	ldr	r3, [r7, #4]
70010ffa:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
70010ffc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
70011000:	2b00      	cmp	r3, #0
70011002:	da05      	bge.n	70011010 <tcp_receive+0x4b8>
        m = (s16_t) - m;
70011004:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
70011008:	425b      	negs	r3, r3
7001100a:	b29b      	uxth	r3, r3
7001100c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
70011010:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
70011014:	687b      	ldr	r3, [r7, #4]
70011016:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
7001101a:	109b      	asrs	r3, r3, #2
7001101c:	b21b      	sxth	r3, r3
7001101e:	b29b      	uxth	r3, r3
70011020:	1ad3      	subs	r3, r2, r3
70011022:	b29b      	uxth	r3, r3
70011024:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
70011028:	687b      	ldr	r3, [r7, #4]
7001102a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
7001102e:	b29a      	uxth	r2, r3
70011030:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
70011034:	4413      	add	r3, r2
70011036:	b29b      	uxth	r3, r3
70011038:	b21a      	sxth	r2, r3
7001103a:	687b      	ldr	r3, [r7, #4]
7001103c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
7001103e:	687b      	ldr	r3, [r7, #4]
70011040:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
70011044:	10db      	asrs	r3, r3, #3
70011046:	b21b      	sxth	r3, r3
70011048:	b29a      	uxth	r2, r3
7001104a:	687b      	ldr	r3, [r7, #4]
7001104c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
70011050:	b29b      	uxth	r3, r3
70011052:	4413      	add	r3, r2
70011054:	b29b      	uxth	r3, r3
70011056:	b21a      	sxth	r2, r3
70011058:	687b      	ldr	r3, [r7, #4]
7001105a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
7001105e:	687b      	ldr	r3, [r7, #4]
70011060:	2200      	movs	r2, #0
70011062:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
70011064:	4b35      	ldr	r3, [pc, #212]	@ (7001113c <tcp_receive+0x5e4>)
70011066:	881b      	ldrh	r3, [r3, #0]
70011068:	2b00      	cmp	r3, #0
7001106a:	f000 84df 	beq.w	70011a2c <tcp_receive+0xed4>
7001106e:	687b      	ldr	r3, [r7, #4]
70011070:	7d1b      	ldrb	r3, [r3, #20]
70011072:	2b06      	cmp	r3, #6
70011074:	f200 84da 	bhi.w	70011a2c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
70011078:	687b      	ldr	r3, [r7, #4]
7001107a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
7001107c:	4b30      	ldr	r3, [pc, #192]	@ (70011140 <tcp_receive+0x5e8>)
7001107e:	681b      	ldr	r3, [r3, #0]
70011080:	1ad3      	subs	r3, r2, r3
70011082:	3b01      	subs	r3, #1
70011084:	2b00      	cmp	r3, #0
70011086:	f2c0 808f 	blt.w	700111a8 <tcp_receive+0x650>
7001108a:	687b      	ldr	r3, [r7, #4]
7001108c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
7001108e:	4b2b      	ldr	r3, [pc, #172]	@ (7001113c <tcp_receive+0x5e4>)
70011090:	881b      	ldrh	r3, [r3, #0]
70011092:	4619      	mov	r1, r3
70011094:	4b2a      	ldr	r3, [pc, #168]	@ (70011140 <tcp_receive+0x5e8>)
70011096:	681b      	ldr	r3, [r3, #0]
70011098:	440b      	add	r3, r1
7001109a:	1ad3      	subs	r3, r2, r3
7001109c:	3301      	adds	r3, #1
7001109e:	2b00      	cmp	r3, #0
700110a0:	f300 8082 	bgt.w	700111a8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
700110a4:	4b27      	ldr	r3, [pc, #156]	@ (70011144 <tcp_receive+0x5ec>)
700110a6:	685b      	ldr	r3, [r3, #4]
700110a8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
700110aa:	687b      	ldr	r3, [r7, #4]
700110ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
700110ae:	4b24      	ldr	r3, [pc, #144]	@ (70011140 <tcp_receive+0x5e8>)
700110b0:	681b      	ldr	r3, [r3, #0]
700110b2:	1ad3      	subs	r3, r2, r3
700110b4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
700110b6:	4b23      	ldr	r3, [pc, #140]	@ (70011144 <tcp_receive+0x5ec>)
700110b8:	685b      	ldr	r3, [r3, #4]
700110ba:	2b00      	cmp	r3, #0
700110bc:	d106      	bne.n	700110cc <tcp_receive+0x574>
700110be:	4b22      	ldr	r3, [pc, #136]	@ (70011148 <tcp_receive+0x5f0>)
700110c0:	f240 5295 	movw	r2, #1429	@ 0x595
700110c4:	4921      	ldr	r1, [pc, #132]	@ (7001114c <tcp_receive+0x5f4>)
700110c6:	4822      	ldr	r0, [pc, #136]	@ (70011150 <tcp_receive+0x5f8>)
700110c8:	f002 fe22 	bl	70013d10 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
700110cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700110ce:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
700110d2:	4293      	cmp	r3, r2
700110d4:	d906      	bls.n	700110e4 <tcp_receive+0x58c>
700110d6:	4b1c      	ldr	r3, [pc, #112]	@ (70011148 <tcp_receive+0x5f0>)
700110d8:	f240 5296 	movw	r2, #1430	@ 0x596
700110dc:	491d      	ldr	r1, [pc, #116]	@ (70011154 <tcp_receive+0x5fc>)
700110de:	481c      	ldr	r0, [pc, #112]	@ (70011150 <tcp_receive+0x5f8>)
700110e0:	f002 fe16 	bl	70013d10 <iprintf>
      off = (u16_t)off32;
700110e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700110e6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
700110ea:	4b16      	ldr	r3, [pc, #88]	@ (70011144 <tcp_receive+0x5ec>)
700110ec:	685b      	ldr	r3, [r3, #4]
700110ee:	891b      	ldrh	r3, [r3, #8]
700110f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
700110f4:	429a      	cmp	r2, r3
700110f6:	d906      	bls.n	70011106 <tcp_receive+0x5ae>
700110f8:	4b13      	ldr	r3, [pc, #76]	@ (70011148 <tcp_receive+0x5f0>)
700110fa:	f44f 62b3 	mov.w	r2, #1432	@ 0x598
700110fe:	4916      	ldr	r1, [pc, #88]	@ (70011158 <tcp_receive+0x600>)
70011100:	4813      	ldr	r0, [pc, #76]	@ (70011150 <tcp_receive+0x5f8>)
70011102:	f002 fe05 	bl	70013d10 <iprintf>
      inseg.len -= off;
70011106:	4b0f      	ldr	r3, [pc, #60]	@ (70011144 <tcp_receive+0x5ec>)
70011108:	891a      	ldrh	r2, [r3, #8]
7001110a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
7001110e:	1ad3      	subs	r3, r2, r3
70011110:	b29a      	uxth	r2, r3
70011112:	4b0c      	ldr	r3, [pc, #48]	@ (70011144 <tcp_receive+0x5ec>)
70011114:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
70011116:	4b0b      	ldr	r3, [pc, #44]	@ (70011144 <tcp_receive+0x5ec>)
70011118:	685b      	ldr	r3, [r3, #4]
7001111a:	891a      	ldrh	r2, [r3, #8]
7001111c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
70011120:	1ad3      	subs	r3, r2, r3
70011122:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
70011124:	e02a      	b.n	7001117c <tcp_receive+0x624>
70011126:	bf00      	nop
70011128:	7001656c 	.word	0x7001656c
7001112c:	70016574 	.word	0x70016574
70011130:	240084b8 	.word	0x240084b8
70011134:	240084b4 	.word	0x240084b4
70011138:	24008478 	.word	0x24008478
7001113c:	240084ba 	.word	0x240084ba
70011140:	240084b0 	.word	0x240084b0
70011144:	24008490 	.word	0x24008490
70011148:	700161d8 	.word	0x700161d8
7001114c:	7001657c 	.word	0x7001657c
70011150:	70016250 	.word	0x70016250
70011154:	7001658c 	.word	0x7001658c
70011158:	7001659c 	.word	0x7001659c
        off -= p->len;
7001115c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
7001115e:	895b      	ldrh	r3, [r3, #10]
70011160:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
70011164:	1ad3      	subs	r3, r2, r3
70011166:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
7001116a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
7001116c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
7001116e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
70011170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
70011172:	2200      	movs	r2, #0
70011174:	815a      	strh	r2, [r3, #10]
        p = p->next;
70011176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
70011178:	681b      	ldr	r3, [r3, #0]
7001117a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
7001117c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
7001117e:	895b      	ldrh	r3, [r3, #10]
70011180:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
70011184:	429a      	cmp	r2, r3
70011186:	d8e9      	bhi.n	7001115c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
70011188:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
7001118c:	4619      	mov	r1, r3
7001118e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
70011190:	f7fc fad6 	bl	7000d740 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
70011194:	687b      	ldr	r3, [r7, #4]
70011196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70011198:	4a90      	ldr	r2, [pc, #576]	@ (700113dc <tcp_receive+0x884>)
7001119a:	6013      	str	r3, [r2, #0]
7001119c:	4b90      	ldr	r3, [pc, #576]	@ (700113e0 <tcp_receive+0x888>)
7001119e:	68db      	ldr	r3, [r3, #12]
700111a0:	4a8e      	ldr	r2, [pc, #568]	@ (700113dc <tcp_receive+0x884>)
700111a2:	6812      	ldr	r2, [r2, #0]
700111a4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
700111a6:	e00d      	b.n	700111c4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
700111a8:	4b8c      	ldr	r3, [pc, #560]	@ (700113dc <tcp_receive+0x884>)
700111aa:	681a      	ldr	r2, [r3, #0]
700111ac:	687b      	ldr	r3, [r7, #4]
700111ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700111b0:	1ad3      	subs	r3, r2, r3
700111b2:	2b00      	cmp	r3, #0
700111b4:	da06      	bge.n	700111c4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
700111b6:	687b      	ldr	r3, [r7, #4]
700111b8:	8b5b      	ldrh	r3, [r3, #26]
700111ba:	f043 0302 	orr.w	r3, r3, #2
700111be:	b29a      	uxth	r2, r3
700111c0:	687b      	ldr	r3, [r7, #4]
700111c2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
700111c4:	4b85      	ldr	r3, [pc, #532]	@ (700113dc <tcp_receive+0x884>)
700111c6:	681a      	ldr	r2, [r3, #0]
700111c8:	687b      	ldr	r3, [r7, #4]
700111ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700111cc:	1ad3      	subs	r3, r2, r3
700111ce:	2b00      	cmp	r3, #0
700111d0:	f2c0 8427 	blt.w	70011a22 <tcp_receive+0xeca>
700111d4:	4b81      	ldr	r3, [pc, #516]	@ (700113dc <tcp_receive+0x884>)
700111d6:	681a      	ldr	r2, [r3, #0]
700111d8:	687b      	ldr	r3, [r7, #4]
700111da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700111dc:	6879      	ldr	r1, [r7, #4]
700111de:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
700111e0:	440b      	add	r3, r1
700111e2:	1ad3      	subs	r3, r2, r3
700111e4:	3301      	adds	r3, #1
700111e6:	2b00      	cmp	r3, #0
700111e8:	f300 841b 	bgt.w	70011a22 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
700111ec:	687b      	ldr	r3, [r7, #4]
700111ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
700111f0:	4b7a      	ldr	r3, [pc, #488]	@ (700113dc <tcp_receive+0x884>)
700111f2:	681b      	ldr	r3, [r3, #0]
700111f4:	429a      	cmp	r2, r3
700111f6:	f040 8298 	bne.w	7001172a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
700111fa:	4b79      	ldr	r3, [pc, #484]	@ (700113e0 <tcp_receive+0x888>)
700111fc:	891c      	ldrh	r4, [r3, #8]
700111fe:	4b78      	ldr	r3, [pc, #480]	@ (700113e0 <tcp_receive+0x888>)
70011200:	68db      	ldr	r3, [r3, #12]
70011202:	899b      	ldrh	r3, [r3, #12]
70011204:	b29b      	uxth	r3, r3
70011206:	4618      	mov	r0, r3
70011208:	f7f8 fbda 	bl	700099c0 <lwip_htons>
7001120c:	4603      	mov	r3, r0
7001120e:	b2db      	uxtb	r3, r3
70011210:	f003 0303 	and.w	r3, r3, #3
70011214:	2b00      	cmp	r3, #0
70011216:	d001      	beq.n	7001121c <tcp_receive+0x6c4>
70011218:	2301      	movs	r3, #1
7001121a:	e000      	b.n	7001121e <tcp_receive+0x6c6>
7001121c:	2300      	movs	r3, #0
7001121e:	4423      	add	r3, r4
70011220:	b29a      	uxth	r2, r3
70011222:	4b70      	ldr	r3, [pc, #448]	@ (700113e4 <tcp_receive+0x88c>)
70011224:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
70011226:	687b      	ldr	r3, [r7, #4]
70011228:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
7001122a:	4b6e      	ldr	r3, [pc, #440]	@ (700113e4 <tcp_receive+0x88c>)
7001122c:	881b      	ldrh	r3, [r3, #0]
7001122e:	429a      	cmp	r2, r3
70011230:	d274      	bcs.n	7001131c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
70011232:	4b6b      	ldr	r3, [pc, #428]	@ (700113e0 <tcp_receive+0x888>)
70011234:	68db      	ldr	r3, [r3, #12]
70011236:	899b      	ldrh	r3, [r3, #12]
70011238:	b29b      	uxth	r3, r3
7001123a:	4618      	mov	r0, r3
7001123c:	f7f8 fbc0 	bl	700099c0 <lwip_htons>
70011240:	4603      	mov	r3, r0
70011242:	b2db      	uxtb	r3, r3
70011244:	f003 0301 	and.w	r3, r3, #1
70011248:	2b00      	cmp	r3, #0
7001124a:	d01e      	beq.n	7001128a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
7001124c:	4b64      	ldr	r3, [pc, #400]	@ (700113e0 <tcp_receive+0x888>)
7001124e:	68db      	ldr	r3, [r3, #12]
70011250:	899b      	ldrh	r3, [r3, #12]
70011252:	b29b      	uxth	r3, r3
70011254:	b21b      	sxth	r3, r3
70011256:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
7001125a:	b21c      	sxth	r4, r3
7001125c:	4b60      	ldr	r3, [pc, #384]	@ (700113e0 <tcp_receive+0x888>)
7001125e:	68db      	ldr	r3, [r3, #12]
70011260:	899b      	ldrh	r3, [r3, #12]
70011262:	b29b      	uxth	r3, r3
70011264:	4618      	mov	r0, r3
70011266:	f7f8 fbab 	bl	700099c0 <lwip_htons>
7001126a:	4603      	mov	r3, r0
7001126c:	b2db      	uxtb	r3, r3
7001126e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
70011272:	b29b      	uxth	r3, r3
70011274:	4618      	mov	r0, r3
70011276:	f7f8 fba3 	bl	700099c0 <lwip_htons>
7001127a:	4603      	mov	r3, r0
7001127c:	b21b      	sxth	r3, r3
7001127e:	4323      	orrs	r3, r4
70011280:	b21a      	sxth	r2, r3
70011282:	4b57      	ldr	r3, [pc, #348]	@ (700113e0 <tcp_receive+0x888>)
70011284:	68db      	ldr	r3, [r3, #12]
70011286:	b292      	uxth	r2, r2
70011288:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
7001128a:	687b      	ldr	r3, [r7, #4]
7001128c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
7001128e:	4b54      	ldr	r3, [pc, #336]	@ (700113e0 <tcp_receive+0x888>)
70011290:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
70011292:	4b53      	ldr	r3, [pc, #332]	@ (700113e0 <tcp_receive+0x888>)
70011294:	68db      	ldr	r3, [r3, #12]
70011296:	899b      	ldrh	r3, [r3, #12]
70011298:	b29b      	uxth	r3, r3
7001129a:	4618      	mov	r0, r3
7001129c:	f7f8 fb90 	bl	700099c0 <lwip_htons>
700112a0:	4603      	mov	r3, r0
700112a2:	b2db      	uxtb	r3, r3
700112a4:	f003 0302 	and.w	r3, r3, #2
700112a8:	2b00      	cmp	r3, #0
700112aa:	d005      	beq.n	700112b8 <tcp_receive+0x760>
            inseg.len -= 1;
700112ac:	4b4c      	ldr	r3, [pc, #304]	@ (700113e0 <tcp_receive+0x888>)
700112ae:	891b      	ldrh	r3, [r3, #8]
700112b0:	3b01      	subs	r3, #1
700112b2:	b29a      	uxth	r2, r3
700112b4:	4b4a      	ldr	r3, [pc, #296]	@ (700113e0 <tcp_receive+0x888>)
700112b6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
700112b8:	4b49      	ldr	r3, [pc, #292]	@ (700113e0 <tcp_receive+0x888>)
700112ba:	685b      	ldr	r3, [r3, #4]
700112bc:	4a48      	ldr	r2, [pc, #288]	@ (700113e0 <tcp_receive+0x888>)
700112be:	8912      	ldrh	r2, [r2, #8]
700112c0:	4611      	mov	r1, r2
700112c2:	4618      	mov	r0, r3
700112c4:	f7fc f93c 	bl	7000d540 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
700112c8:	4b45      	ldr	r3, [pc, #276]	@ (700113e0 <tcp_receive+0x888>)
700112ca:	891c      	ldrh	r4, [r3, #8]
700112cc:	4b44      	ldr	r3, [pc, #272]	@ (700113e0 <tcp_receive+0x888>)
700112ce:	68db      	ldr	r3, [r3, #12]
700112d0:	899b      	ldrh	r3, [r3, #12]
700112d2:	b29b      	uxth	r3, r3
700112d4:	4618      	mov	r0, r3
700112d6:	f7f8 fb73 	bl	700099c0 <lwip_htons>
700112da:	4603      	mov	r3, r0
700112dc:	b2db      	uxtb	r3, r3
700112de:	f003 0303 	and.w	r3, r3, #3
700112e2:	2b00      	cmp	r3, #0
700112e4:	d001      	beq.n	700112ea <tcp_receive+0x792>
700112e6:	2301      	movs	r3, #1
700112e8:	e000      	b.n	700112ec <tcp_receive+0x794>
700112ea:	2300      	movs	r3, #0
700112ec:	4423      	add	r3, r4
700112ee:	b29a      	uxth	r2, r3
700112f0:	4b3c      	ldr	r3, [pc, #240]	@ (700113e4 <tcp_receive+0x88c>)
700112f2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
700112f4:	4b3b      	ldr	r3, [pc, #236]	@ (700113e4 <tcp_receive+0x88c>)
700112f6:	881b      	ldrh	r3, [r3, #0]
700112f8:	461a      	mov	r2, r3
700112fa:	4b38      	ldr	r3, [pc, #224]	@ (700113dc <tcp_receive+0x884>)
700112fc:	681b      	ldr	r3, [r3, #0]
700112fe:	441a      	add	r2, r3
70011300:	687b      	ldr	r3, [r7, #4]
70011302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70011304:	6879      	ldr	r1, [r7, #4]
70011306:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
70011308:	440b      	add	r3, r1
7001130a:	429a      	cmp	r2, r3
7001130c:	d006      	beq.n	7001131c <tcp_receive+0x7c4>
7001130e:	4b36      	ldr	r3, [pc, #216]	@ (700113e8 <tcp_receive+0x890>)
70011310:	f240 52cc 	movw	r2, #1484	@ 0x5cc
70011314:	4935      	ldr	r1, [pc, #212]	@ (700113ec <tcp_receive+0x894>)
70011316:	4836      	ldr	r0, [pc, #216]	@ (700113f0 <tcp_receive+0x898>)
70011318:	f002 fcfa 	bl	70013d10 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
7001131c:	687b      	ldr	r3, [r7, #4]
7001131e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70011320:	2b00      	cmp	r3, #0
70011322:	f000 80e6 	beq.w	700114f2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
70011326:	4b2e      	ldr	r3, [pc, #184]	@ (700113e0 <tcp_receive+0x888>)
70011328:	68db      	ldr	r3, [r3, #12]
7001132a:	899b      	ldrh	r3, [r3, #12]
7001132c:	b29b      	uxth	r3, r3
7001132e:	4618      	mov	r0, r3
70011330:	f7f8 fb46 	bl	700099c0 <lwip_htons>
70011334:	4603      	mov	r3, r0
70011336:	b2db      	uxtb	r3, r3
70011338:	f003 0301 	and.w	r3, r3, #1
7001133c:	2b00      	cmp	r3, #0
7001133e:	d010      	beq.n	70011362 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
70011340:	e00a      	b.n	70011358 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
70011342:	687b      	ldr	r3, [r7, #4]
70011344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70011346:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
70011348:	687b      	ldr	r3, [r7, #4]
7001134a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7001134c:	681a      	ldr	r2, [r3, #0]
7001134e:	687b      	ldr	r3, [r7, #4]
70011350:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
70011352:	68f8      	ldr	r0, [r7, #12]
70011354:	f7fd fdb0 	bl	7000eeb8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
70011358:	687b      	ldr	r3, [r7, #4]
7001135a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7001135c:	2b00      	cmp	r3, #0
7001135e:	d1f0      	bne.n	70011342 <tcp_receive+0x7ea>
70011360:	e0c7      	b.n	700114f2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
70011362:	687b      	ldr	r3, [r7, #4]
70011364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70011366:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
70011368:	e051      	b.n	7001140e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
7001136a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
7001136c:	68db      	ldr	r3, [r3, #12]
7001136e:	899b      	ldrh	r3, [r3, #12]
70011370:	b29b      	uxth	r3, r3
70011372:	4618      	mov	r0, r3
70011374:	f7f8 fb24 	bl	700099c0 <lwip_htons>
70011378:	4603      	mov	r3, r0
7001137a:	b2db      	uxtb	r3, r3
7001137c:	f003 0301 	and.w	r3, r3, #1
70011380:	2b00      	cmp	r3, #0
70011382:	d03c      	beq.n	700113fe <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
70011384:	4b16      	ldr	r3, [pc, #88]	@ (700113e0 <tcp_receive+0x888>)
70011386:	68db      	ldr	r3, [r3, #12]
70011388:	899b      	ldrh	r3, [r3, #12]
7001138a:	b29b      	uxth	r3, r3
7001138c:	4618      	mov	r0, r3
7001138e:	f7f8 fb17 	bl	700099c0 <lwip_htons>
70011392:	4603      	mov	r3, r0
70011394:	b2db      	uxtb	r3, r3
70011396:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
7001139a:	2b00      	cmp	r3, #0
7001139c:	d12f      	bne.n	700113fe <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
7001139e:	4b10      	ldr	r3, [pc, #64]	@ (700113e0 <tcp_receive+0x888>)
700113a0:	68db      	ldr	r3, [r3, #12]
700113a2:	899b      	ldrh	r3, [r3, #12]
700113a4:	b29c      	uxth	r4, r3
700113a6:	2001      	movs	r0, #1
700113a8:	f7f8 fb0a 	bl	700099c0 <lwip_htons>
700113ac:	4603      	mov	r3, r0
700113ae:	461a      	mov	r2, r3
700113b0:	4b0b      	ldr	r3, [pc, #44]	@ (700113e0 <tcp_receive+0x888>)
700113b2:	68db      	ldr	r3, [r3, #12]
700113b4:	4322      	orrs	r2, r4
700113b6:	b292      	uxth	r2, r2
700113b8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
700113ba:	4b09      	ldr	r3, [pc, #36]	@ (700113e0 <tcp_receive+0x888>)
700113bc:	891c      	ldrh	r4, [r3, #8]
700113be:	4b08      	ldr	r3, [pc, #32]	@ (700113e0 <tcp_receive+0x888>)
700113c0:	68db      	ldr	r3, [r3, #12]
700113c2:	899b      	ldrh	r3, [r3, #12]
700113c4:	b29b      	uxth	r3, r3
700113c6:	4618      	mov	r0, r3
700113c8:	f7f8 fafa 	bl	700099c0 <lwip_htons>
700113cc:	4603      	mov	r3, r0
700113ce:	b2db      	uxtb	r3, r3
700113d0:	f003 0303 	and.w	r3, r3, #3
700113d4:	2b00      	cmp	r3, #0
700113d6:	d00d      	beq.n	700113f4 <tcp_receive+0x89c>
700113d8:	2301      	movs	r3, #1
700113da:	e00c      	b.n	700113f6 <tcp_receive+0x89e>
700113dc:	240084b0 	.word	0x240084b0
700113e0:	24008490 	.word	0x24008490
700113e4:	240084ba 	.word	0x240084ba
700113e8:	700161d8 	.word	0x700161d8
700113ec:	700165ac 	.word	0x700165ac
700113f0:	70016250 	.word	0x70016250
700113f4:	2300      	movs	r3, #0
700113f6:	4423      	add	r3, r4
700113f8:	b29a      	uxth	r2, r3
700113fa:	4b98      	ldr	r3, [pc, #608]	@ (7001165c <tcp_receive+0xb04>)
700113fc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
700113fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70011400:	613b      	str	r3, [r7, #16]
              next = next->next;
70011402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70011404:	681b      	ldr	r3, [r3, #0]
70011406:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
70011408:	6938      	ldr	r0, [r7, #16]
7001140a:	f7fd fd55 	bl	7000eeb8 <tcp_seg_free>
            while (next &&
7001140e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70011410:	2b00      	cmp	r3, #0
70011412:	d00e      	beq.n	70011432 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
70011414:	4b91      	ldr	r3, [pc, #580]	@ (7001165c <tcp_receive+0xb04>)
70011416:	881b      	ldrh	r3, [r3, #0]
70011418:	461a      	mov	r2, r3
7001141a:	4b91      	ldr	r3, [pc, #580]	@ (70011660 <tcp_receive+0xb08>)
7001141c:	681b      	ldr	r3, [r3, #0]
7001141e:	441a      	add	r2, r3
70011420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70011422:	68db      	ldr	r3, [r3, #12]
70011424:	685b      	ldr	r3, [r3, #4]
70011426:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
70011428:	8909      	ldrh	r1, [r1, #8]
7001142a:	440b      	add	r3, r1
7001142c:	1ad3      	subs	r3, r2, r3
            while (next &&
7001142e:	2b00      	cmp	r3, #0
70011430:	da9b      	bge.n	7001136a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
70011432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70011434:	2b00      	cmp	r3, #0
70011436:	d059      	beq.n	700114ec <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
70011438:	4b88      	ldr	r3, [pc, #544]	@ (7001165c <tcp_receive+0xb04>)
7001143a:	881b      	ldrh	r3, [r3, #0]
7001143c:	461a      	mov	r2, r3
7001143e:	4b88      	ldr	r3, [pc, #544]	@ (70011660 <tcp_receive+0xb08>)
70011440:	681b      	ldr	r3, [r3, #0]
70011442:	441a      	add	r2, r3
70011444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70011446:	68db      	ldr	r3, [r3, #12]
70011448:	685b      	ldr	r3, [r3, #4]
7001144a:	1ad3      	subs	r3, r2, r3
            if (next &&
7001144c:	2b00      	cmp	r3, #0
7001144e:	dd4d      	ble.n	700114ec <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
70011450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70011452:	68db      	ldr	r3, [r3, #12]
70011454:	685b      	ldr	r3, [r3, #4]
70011456:	b29a      	uxth	r2, r3
70011458:	4b81      	ldr	r3, [pc, #516]	@ (70011660 <tcp_receive+0xb08>)
7001145a:	681b      	ldr	r3, [r3, #0]
7001145c:	b29b      	uxth	r3, r3
7001145e:	1ad3      	subs	r3, r2, r3
70011460:	b29a      	uxth	r2, r3
70011462:	4b80      	ldr	r3, [pc, #512]	@ (70011664 <tcp_receive+0xb0c>)
70011464:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
70011466:	4b7f      	ldr	r3, [pc, #508]	@ (70011664 <tcp_receive+0xb0c>)
70011468:	68db      	ldr	r3, [r3, #12]
7001146a:	899b      	ldrh	r3, [r3, #12]
7001146c:	b29b      	uxth	r3, r3
7001146e:	4618      	mov	r0, r3
70011470:	f7f8 faa6 	bl	700099c0 <lwip_htons>
70011474:	4603      	mov	r3, r0
70011476:	b2db      	uxtb	r3, r3
70011478:	f003 0302 	and.w	r3, r3, #2
7001147c:	2b00      	cmp	r3, #0
7001147e:	d005      	beq.n	7001148c <tcp_receive+0x934>
                inseg.len -= 1;
70011480:	4b78      	ldr	r3, [pc, #480]	@ (70011664 <tcp_receive+0xb0c>)
70011482:	891b      	ldrh	r3, [r3, #8]
70011484:	3b01      	subs	r3, #1
70011486:	b29a      	uxth	r2, r3
70011488:	4b76      	ldr	r3, [pc, #472]	@ (70011664 <tcp_receive+0xb0c>)
7001148a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
7001148c:	4b75      	ldr	r3, [pc, #468]	@ (70011664 <tcp_receive+0xb0c>)
7001148e:	685b      	ldr	r3, [r3, #4]
70011490:	4a74      	ldr	r2, [pc, #464]	@ (70011664 <tcp_receive+0xb0c>)
70011492:	8912      	ldrh	r2, [r2, #8]
70011494:	4611      	mov	r1, r2
70011496:	4618      	mov	r0, r3
70011498:	f7fc f852 	bl	7000d540 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
7001149c:	4b71      	ldr	r3, [pc, #452]	@ (70011664 <tcp_receive+0xb0c>)
7001149e:	891c      	ldrh	r4, [r3, #8]
700114a0:	4b70      	ldr	r3, [pc, #448]	@ (70011664 <tcp_receive+0xb0c>)
700114a2:	68db      	ldr	r3, [r3, #12]
700114a4:	899b      	ldrh	r3, [r3, #12]
700114a6:	b29b      	uxth	r3, r3
700114a8:	4618      	mov	r0, r3
700114aa:	f7f8 fa89 	bl	700099c0 <lwip_htons>
700114ae:	4603      	mov	r3, r0
700114b0:	b2db      	uxtb	r3, r3
700114b2:	f003 0303 	and.w	r3, r3, #3
700114b6:	2b00      	cmp	r3, #0
700114b8:	d001      	beq.n	700114be <tcp_receive+0x966>
700114ba:	2301      	movs	r3, #1
700114bc:	e000      	b.n	700114c0 <tcp_receive+0x968>
700114be:	2300      	movs	r3, #0
700114c0:	4423      	add	r3, r4
700114c2:	b29a      	uxth	r2, r3
700114c4:	4b65      	ldr	r3, [pc, #404]	@ (7001165c <tcp_receive+0xb04>)
700114c6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
700114c8:	4b64      	ldr	r3, [pc, #400]	@ (7001165c <tcp_receive+0xb04>)
700114ca:	881b      	ldrh	r3, [r3, #0]
700114cc:	461a      	mov	r2, r3
700114ce:	4b64      	ldr	r3, [pc, #400]	@ (70011660 <tcp_receive+0xb08>)
700114d0:	681b      	ldr	r3, [r3, #0]
700114d2:	441a      	add	r2, r3
700114d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
700114d6:	68db      	ldr	r3, [r3, #12]
700114d8:	685b      	ldr	r3, [r3, #4]
700114da:	429a      	cmp	r2, r3
700114dc:	d006      	beq.n	700114ec <tcp_receive+0x994>
700114de:	4b62      	ldr	r3, [pc, #392]	@ (70011668 <tcp_receive+0xb10>)
700114e0:	f240 52fd 	movw	r2, #1533	@ 0x5fd
700114e4:	4961      	ldr	r1, [pc, #388]	@ (7001166c <tcp_receive+0xb14>)
700114e6:	4862      	ldr	r0, [pc, #392]	@ (70011670 <tcp_receive+0xb18>)
700114e8:	f002 fc12 	bl	70013d10 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
700114ec:	687b      	ldr	r3, [r7, #4]
700114ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
700114f0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
700114f2:	4b5a      	ldr	r3, [pc, #360]	@ (7001165c <tcp_receive+0xb04>)
700114f4:	881b      	ldrh	r3, [r3, #0]
700114f6:	461a      	mov	r2, r3
700114f8:	4b59      	ldr	r3, [pc, #356]	@ (70011660 <tcp_receive+0xb08>)
700114fa:	681b      	ldr	r3, [r3, #0]
700114fc:	441a      	add	r2, r3
700114fe:	687b      	ldr	r3, [r7, #4]
70011500:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
70011502:	687b      	ldr	r3, [r7, #4]
70011504:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
70011506:	4b55      	ldr	r3, [pc, #340]	@ (7001165c <tcp_receive+0xb04>)
70011508:	881b      	ldrh	r3, [r3, #0]
7001150a:	429a      	cmp	r2, r3
7001150c:	d206      	bcs.n	7001151c <tcp_receive+0x9c4>
7001150e:	4b56      	ldr	r3, [pc, #344]	@ (70011668 <tcp_receive+0xb10>)
70011510:	f44f 62c1 	mov.w	r2, #1544	@ 0x608
70011514:	4957      	ldr	r1, [pc, #348]	@ (70011674 <tcp_receive+0xb1c>)
70011516:	4856      	ldr	r0, [pc, #344]	@ (70011670 <tcp_receive+0xb18>)
70011518:	f002 fbfa 	bl	70013d10 <iprintf>
        pcb->rcv_wnd -= tcplen;
7001151c:	687b      	ldr	r3, [r7, #4]
7001151e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
70011520:	4b4e      	ldr	r3, [pc, #312]	@ (7001165c <tcp_receive+0xb04>)
70011522:	881b      	ldrh	r3, [r3, #0]
70011524:	1ad3      	subs	r3, r2, r3
70011526:	b29a      	uxth	r2, r3
70011528:	687b      	ldr	r3, [r7, #4]
7001152a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
7001152c:	6878      	ldr	r0, [r7, #4]
7001152e:	f7fc fff9 	bl	7000e524 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
70011532:	4b4c      	ldr	r3, [pc, #304]	@ (70011664 <tcp_receive+0xb0c>)
70011534:	685b      	ldr	r3, [r3, #4]
70011536:	891b      	ldrh	r3, [r3, #8]
70011538:	2b00      	cmp	r3, #0
7001153a:	d006      	beq.n	7001154a <tcp_receive+0x9f2>
          recv_data = inseg.p;
7001153c:	4b49      	ldr	r3, [pc, #292]	@ (70011664 <tcp_receive+0xb0c>)
7001153e:	685b      	ldr	r3, [r3, #4]
70011540:	4a4d      	ldr	r2, [pc, #308]	@ (70011678 <tcp_receive+0xb20>)
70011542:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
70011544:	4b47      	ldr	r3, [pc, #284]	@ (70011664 <tcp_receive+0xb0c>)
70011546:	2200      	movs	r2, #0
70011548:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
7001154a:	4b46      	ldr	r3, [pc, #280]	@ (70011664 <tcp_receive+0xb0c>)
7001154c:	68db      	ldr	r3, [r3, #12]
7001154e:	899b      	ldrh	r3, [r3, #12]
70011550:	b29b      	uxth	r3, r3
70011552:	4618      	mov	r0, r3
70011554:	f7f8 fa34 	bl	700099c0 <lwip_htons>
70011558:	4603      	mov	r3, r0
7001155a:	b2db      	uxtb	r3, r3
7001155c:	f003 0301 	and.w	r3, r3, #1
70011560:	2b00      	cmp	r3, #0
70011562:	f000 80b8 	beq.w	700116d6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
70011566:	4b45      	ldr	r3, [pc, #276]	@ (7001167c <tcp_receive+0xb24>)
70011568:	781b      	ldrb	r3, [r3, #0]
7001156a:	f043 0320 	orr.w	r3, r3, #32
7001156e:	b2da      	uxtb	r2, r3
70011570:	4b42      	ldr	r3, [pc, #264]	@ (7001167c <tcp_receive+0xb24>)
70011572:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
70011574:	e0af      	b.n	700116d6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
70011576:	687b      	ldr	r3, [r7, #4]
70011578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7001157a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
7001157c:	687b      	ldr	r3, [r7, #4]
7001157e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70011580:	68db      	ldr	r3, [r3, #12]
70011582:	685b      	ldr	r3, [r3, #4]
70011584:	4a36      	ldr	r2, [pc, #216]	@ (70011660 <tcp_receive+0xb08>)
70011586:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
70011588:	68bb      	ldr	r3, [r7, #8]
7001158a:	891b      	ldrh	r3, [r3, #8]
7001158c:	461c      	mov	r4, r3
7001158e:	68bb      	ldr	r3, [r7, #8]
70011590:	68db      	ldr	r3, [r3, #12]
70011592:	899b      	ldrh	r3, [r3, #12]
70011594:	b29b      	uxth	r3, r3
70011596:	4618      	mov	r0, r3
70011598:	f7f8 fa12 	bl	700099c0 <lwip_htons>
7001159c:	4603      	mov	r3, r0
7001159e:	b2db      	uxtb	r3, r3
700115a0:	f003 0303 	and.w	r3, r3, #3
700115a4:	2b00      	cmp	r3, #0
700115a6:	d001      	beq.n	700115ac <tcp_receive+0xa54>
700115a8:	2301      	movs	r3, #1
700115aa:	e000      	b.n	700115ae <tcp_receive+0xa56>
700115ac:	2300      	movs	r3, #0
700115ae:	191a      	adds	r2, r3, r4
700115b0:	687b      	ldr	r3, [r7, #4]
700115b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700115b4:	441a      	add	r2, r3
700115b6:	687b      	ldr	r3, [r7, #4]
700115b8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
700115ba:	687b      	ldr	r3, [r7, #4]
700115bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
700115be:	461c      	mov	r4, r3
700115c0:	68bb      	ldr	r3, [r7, #8]
700115c2:	891b      	ldrh	r3, [r3, #8]
700115c4:	461d      	mov	r5, r3
700115c6:	68bb      	ldr	r3, [r7, #8]
700115c8:	68db      	ldr	r3, [r3, #12]
700115ca:	899b      	ldrh	r3, [r3, #12]
700115cc:	b29b      	uxth	r3, r3
700115ce:	4618      	mov	r0, r3
700115d0:	f7f8 f9f6 	bl	700099c0 <lwip_htons>
700115d4:	4603      	mov	r3, r0
700115d6:	b2db      	uxtb	r3, r3
700115d8:	f003 0303 	and.w	r3, r3, #3
700115dc:	2b00      	cmp	r3, #0
700115de:	d001      	beq.n	700115e4 <tcp_receive+0xa8c>
700115e0:	2301      	movs	r3, #1
700115e2:	e000      	b.n	700115e6 <tcp_receive+0xa8e>
700115e4:	2300      	movs	r3, #0
700115e6:	442b      	add	r3, r5
700115e8:	429c      	cmp	r4, r3
700115ea:	d206      	bcs.n	700115fa <tcp_receive+0xaa2>
700115ec:	4b1e      	ldr	r3, [pc, #120]	@ (70011668 <tcp_receive+0xb10>)
700115ee:	f240 622c 	movw	r2, #1580	@ 0x62c
700115f2:	4923      	ldr	r1, [pc, #140]	@ (70011680 <tcp_receive+0xb28>)
700115f4:	481e      	ldr	r0, [pc, #120]	@ (70011670 <tcp_receive+0xb18>)
700115f6:	f002 fb8b 	bl	70013d10 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
700115fa:	68bb      	ldr	r3, [r7, #8]
700115fc:	891b      	ldrh	r3, [r3, #8]
700115fe:	461c      	mov	r4, r3
70011600:	68bb      	ldr	r3, [r7, #8]
70011602:	68db      	ldr	r3, [r3, #12]
70011604:	899b      	ldrh	r3, [r3, #12]
70011606:	b29b      	uxth	r3, r3
70011608:	4618      	mov	r0, r3
7001160a:	f7f8 f9d9 	bl	700099c0 <lwip_htons>
7001160e:	4603      	mov	r3, r0
70011610:	b2db      	uxtb	r3, r3
70011612:	f003 0303 	and.w	r3, r3, #3
70011616:	2b00      	cmp	r3, #0
70011618:	d001      	beq.n	7001161e <tcp_receive+0xac6>
7001161a:	2301      	movs	r3, #1
7001161c:	e000      	b.n	70011620 <tcp_receive+0xac8>
7001161e:	2300      	movs	r3, #0
70011620:	1919      	adds	r1, r3, r4
70011622:	687b      	ldr	r3, [r7, #4]
70011624:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
70011626:	b28b      	uxth	r3, r1
70011628:	1ad3      	subs	r3, r2, r3
7001162a:	b29a      	uxth	r2, r3
7001162c:	687b      	ldr	r3, [r7, #4]
7001162e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
70011630:	6878      	ldr	r0, [r7, #4]
70011632:	f7fc ff77 	bl	7000e524 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
70011636:	68bb      	ldr	r3, [r7, #8]
70011638:	685b      	ldr	r3, [r3, #4]
7001163a:	891b      	ldrh	r3, [r3, #8]
7001163c:	2b00      	cmp	r3, #0
7001163e:	d028      	beq.n	70011692 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
70011640:	4b0d      	ldr	r3, [pc, #52]	@ (70011678 <tcp_receive+0xb20>)
70011642:	681b      	ldr	r3, [r3, #0]
70011644:	2b00      	cmp	r3, #0
70011646:	d01d      	beq.n	70011684 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
70011648:	4b0b      	ldr	r3, [pc, #44]	@ (70011678 <tcp_receive+0xb20>)
7001164a:	681a      	ldr	r2, [r3, #0]
7001164c:	68bb      	ldr	r3, [r7, #8]
7001164e:	685b      	ldr	r3, [r3, #4]
70011650:	4619      	mov	r1, r3
70011652:	4610      	mov	r0, r2
70011654:	f7fc f9be 	bl	7000d9d4 <pbuf_cat>
70011658:	e018      	b.n	7001168c <tcp_receive+0xb34>
7001165a:	bf00      	nop
7001165c:	240084ba 	.word	0x240084ba
70011660:	240084b0 	.word	0x240084b0
70011664:	24008490 	.word	0x24008490
70011668:	700161d8 	.word	0x700161d8
7001166c:	700165e4 	.word	0x700165e4
70011670:	70016250 	.word	0x70016250
70011674:	70016620 	.word	0x70016620
70011678:	240084c0 	.word	0x240084c0
7001167c:	240084bd 	.word	0x240084bd
70011680:	70016640 	.word	0x70016640
            } else {
              recv_data = cseg->p;
70011684:	68bb      	ldr	r3, [r7, #8]
70011686:	685b      	ldr	r3, [r3, #4]
70011688:	4a70      	ldr	r2, [pc, #448]	@ (7001184c <tcp_receive+0xcf4>)
7001168a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
7001168c:	68bb      	ldr	r3, [r7, #8]
7001168e:	2200      	movs	r2, #0
70011690:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
70011692:	68bb      	ldr	r3, [r7, #8]
70011694:	68db      	ldr	r3, [r3, #12]
70011696:	899b      	ldrh	r3, [r3, #12]
70011698:	b29b      	uxth	r3, r3
7001169a:	4618      	mov	r0, r3
7001169c:	f7f8 f990 	bl	700099c0 <lwip_htons>
700116a0:	4603      	mov	r3, r0
700116a2:	b2db      	uxtb	r3, r3
700116a4:	f003 0301 	and.w	r3, r3, #1
700116a8:	2b00      	cmp	r3, #0
700116aa:	d00d      	beq.n	700116c8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
700116ac:	4b68      	ldr	r3, [pc, #416]	@ (70011850 <tcp_receive+0xcf8>)
700116ae:	781b      	ldrb	r3, [r3, #0]
700116b0:	f043 0320 	orr.w	r3, r3, #32
700116b4:	b2da      	uxtb	r2, r3
700116b6:	4b66      	ldr	r3, [pc, #408]	@ (70011850 <tcp_receive+0xcf8>)
700116b8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
700116ba:	687b      	ldr	r3, [r7, #4]
700116bc:	7d1b      	ldrb	r3, [r3, #20]
700116be:	2b04      	cmp	r3, #4
700116c0:	d102      	bne.n	700116c8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
700116c2:	687b      	ldr	r3, [r7, #4]
700116c4:	2207      	movs	r2, #7
700116c6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
700116c8:	68bb      	ldr	r3, [r7, #8]
700116ca:	681a      	ldr	r2, [r3, #0]
700116cc:	687b      	ldr	r3, [r7, #4]
700116ce:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
700116d0:	68b8      	ldr	r0, [r7, #8]
700116d2:	f7fd fbf1 	bl	7000eeb8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
700116d6:	687b      	ldr	r3, [r7, #4]
700116d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
700116da:	2b00      	cmp	r3, #0
700116dc:	d008      	beq.n	700116f0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
700116de:	687b      	ldr	r3, [r7, #4]
700116e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
700116e2:	68db      	ldr	r3, [r3, #12]
700116e4:	685a      	ldr	r2, [r3, #4]
700116e6:	687b      	ldr	r3, [r7, #4]
700116e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
700116ea:	429a      	cmp	r2, r3
700116ec:	f43f af43 	beq.w	70011576 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
700116f0:	687b      	ldr	r3, [r7, #4]
700116f2:	8b5b      	ldrh	r3, [r3, #26]
700116f4:	f003 0301 	and.w	r3, r3, #1
700116f8:	2b00      	cmp	r3, #0
700116fa:	d00e      	beq.n	7001171a <tcp_receive+0xbc2>
700116fc:	687b      	ldr	r3, [r7, #4]
700116fe:	8b5b      	ldrh	r3, [r3, #26]
70011700:	f023 0301 	bic.w	r3, r3, #1
70011704:	b29a      	uxth	r2, r3
70011706:	687b      	ldr	r3, [r7, #4]
70011708:	835a      	strh	r2, [r3, #26]
7001170a:	687b      	ldr	r3, [r7, #4]
7001170c:	8b5b      	ldrh	r3, [r3, #26]
7001170e:	f043 0302 	orr.w	r3, r3, #2
70011712:	b29a      	uxth	r2, r3
70011714:	687b      	ldr	r3, [r7, #4]
70011716:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
70011718:	e187      	b.n	70011a2a <tcp_receive+0xed2>
        tcp_ack(pcb);
7001171a:	687b      	ldr	r3, [r7, #4]
7001171c:	8b5b      	ldrh	r3, [r3, #26]
7001171e:	f043 0301 	orr.w	r3, r3, #1
70011722:	b29a      	uxth	r2, r3
70011724:	687b      	ldr	r3, [r7, #4]
70011726:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
70011728:	e17f      	b.n	70011a2a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
7001172a:	687b      	ldr	r3, [r7, #4]
7001172c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7001172e:	2b00      	cmp	r3, #0
70011730:	d106      	bne.n	70011740 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
70011732:	4848      	ldr	r0, [pc, #288]	@ (70011854 <tcp_receive+0xcfc>)
70011734:	f7fd fbd8 	bl	7000eee8 <tcp_seg_copy>
70011738:	4602      	mov	r2, r0
7001173a:	687b      	ldr	r3, [r7, #4]
7001173c:	675a      	str	r2, [r3, #116]	@ 0x74
7001173e:	e16c      	b.n	70011a1a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
70011740:	2300      	movs	r3, #0
70011742:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
70011744:	687b      	ldr	r3, [r7, #4]
70011746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70011748:	63bb      	str	r3, [r7, #56]	@ 0x38
7001174a:	e156      	b.n	700119fa <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
7001174c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7001174e:	68db      	ldr	r3, [r3, #12]
70011750:	685a      	ldr	r2, [r3, #4]
70011752:	4b41      	ldr	r3, [pc, #260]	@ (70011858 <tcp_receive+0xd00>)
70011754:	681b      	ldr	r3, [r3, #0]
70011756:	429a      	cmp	r2, r3
70011758:	d11d      	bne.n	70011796 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
7001175a:	4b3e      	ldr	r3, [pc, #248]	@ (70011854 <tcp_receive+0xcfc>)
7001175c:	891a      	ldrh	r2, [r3, #8]
7001175e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70011760:	891b      	ldrh	r3, [r3, #8]
70011762:	429a      	cmp	r2, r3
70011764:	f240 814e 	bls.w	70011a04 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
70011768:	483a      	ldr	r0, [pc, #232]	@ (70011854 <tcp_receive+0xcfc>)
7001176a:	f7fd fbbd 	bl	7000eee8 <tcp_seg_copy>
7001176e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
70011770:	697b      	ldr	r3, [r7, #20]
70011772:	2b00      	cmp	r3, #0
70011774:	f000 8148 	beq.w	70011a08 <tcp_receive+0xeb0>
                  if (prev != NULL) {
70011778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7001177a:	2b00      	cmp	r3, #0
7001177c:	d003      	beq.n	70011786 <tcp_receive+0xc2e>
                    prev->next = cseg;
7001177e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70011780:	697a      	ldr	r2, [r7, #20]
70011782:	601a      	str	r2, [r3, #0]
70011784:	e002      	b.n	7001178c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
70011786:	687b      	ldr	r3, [r7, #4]
70011788:	697a      	ldr	r2, [r7, #20]
7001178a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
7001178c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
7001178e:	6978      	ldr	r0, [r7, #20]
70011790:	f7ff f8de 	bl	70010950 <tcp_oos_insert_segment>
                }
                break;
70011794:	e138      	b.n	70011a08 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
70011796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70011798:	2b00      	cmp	r3, #0
7001179a:	d117      	bne.n	700117cc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
7001179c:	4b2e      	ldr	r3, [pc, #184]	@ (70011858 <tcp_receive+0xd00>)
7001179e:	681a      	ldr	r2, [r3, #0]
700117a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700117a2:	68db      	ldr	r3, [r3, #12]
700117a4:	685b      	ldr	r3, [r3, #4]
700117a6:	1ad3      	subs	r3, r2, r3
700117a8:	2b00      	cmp	r3, #0
700117aa:	da57      	bge.n	7001185c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
700117ac:	4829      	ldr	r0, [pc, #164]	@ (70011854 <tcp_receive+0xcfc>)
700117ae:	f7fd fb9b 	bl	7000eee8 <tcp_seg_copy>
700117b2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
700117b4:	69bb      	ldr	r3, [r7, #24]
700117b6:	2b00      	cmp	r3, #0
700117b8:	f000 8128 	beq.w	70011a0c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
700117bc:	687b      	ldr	r3, [r7, #4]
700117be:	69ba      	ldr	r2, [r7, #24]
700117c0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
700117c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
700117c4:	69b8      	ldr	r0, [r7, #24]
700117c6:	f7ff f8c3 	bl	70010950 <tcp_oos_insert_segment>
                  }
                  break;
700117ca:	e11f      	b.n	70011a0c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
700117cc:	4b22      	ldr	r3, [pc, #136]	@ (70011858 <tcp_receive+0xd00>)
700117ce:	681a      	ldr	r2, [r3, #0]
700117d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
700117d2:	68db      	ldr	r3, [r3, #12]
700117d4:	685b      	ldr	r3, [r3, #4]
700117d6:	1ad3      	subs	r3, r2, r3
700117d8:	3b01      	subs	r3, #1
700117da:	2b00      	cmp	r3, #0
700117dc:	db3e      	blt.n	7001185c <tcp_receive+0xd04>
700117de:	4b1e      	ldr	r3, [pc, #120]	@ (70011858 <tcp_receive+0xd00>)
700117e0:	681a      	ldr	r2, [r3, #0]
700117e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700117e4:	68db      	ldr	r3, [r3, #12]
700117e6:	685b      	ldr	r3, [r3, #4]
700117e8:	1ad3      	subs	r3, r2, r3
700117ea:	3301      	adds	r3, #1
700117ec:	2b00      	cmp	r3, #0
700117ee:	dc35      	bgt.n	7001185c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
700117f0:	4818      	ldr	r0, [pc, #96]	@ (70011854 <tcp_receive+0xcfc>)
700117f2:	f7fd fb79 	bl	7000eee8 <tcp_seg_copy>
700117f6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
700117f8:	69fb      	ldr	r3, [r7, #28]
700117fa:	2b00      	cmp	r3, #0
700117fc:	f000 8108 	beq.w	70011a10 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
70011800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70011802:	68db      	ldr	r3, [r3, #12]
70011804:	685b      	ldr	r3, [r3, #4]
70011806:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
70011808:	8912      	ldrh	r2, [r2, #8]
7001180a:	441a      	add	r2, r3
7001180c:	4b12      	ldr	r3, [pc, #72]	@ (70011858 <tcp_receive+0xd00>)
7001180e:	681b      	ldr	r3, [r3, #0]
70011810:	1ad3      	subs	r3, r2, r3
70011812:	2b00      	cmp	r3, #0
70011814:	dd12      	ble.n	7001183c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
70011816:	4b10      	ldr	r3, [pc, #64]	@ (70011858 <tcp_receive+0xd00>)
70011818:	681b      	ldr	r3, [r3, #0]
7001181a:	b29a      	uxth	r2, r3
7001181c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7001181e:	68db      	ldr	r3, [r3, #12]
70011820:	685b      	ldr	r3, [r3, #4]
70011822:	b29b      	uxth	r3, r3
70011824:	1ad3      	subs	r3, r2, r3
70011826:	b29a      	uxth	r2, r3
70011828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7001182a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
7001182c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7001182e:	685a      	ldr	r2, [r3, #4]
70011830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70011832:	891b      	ldrh	r3, [r3, #8]
70011834:	4619      	mov	r1, r3
70011836:	4610      	mov	r0, r2
70011838:	f7fb fe82 	bl	7000d540 <pbuf_realloc>
                    }
                    prev->next = cseg;
7001183c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7001183e:	69fa      	ldr	r2, [r7, #28]
70011840:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
70011842:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
70011844:	69f8      	ldr	r0, [r7, #28]
70011846:	f7ff f883 	bl	70010950 <tcp_oos_insert_segment>
                  }
                  break;
7001184a:	e0e1      	b.n	70011a10 <tcp_receive+0xeb8>
7001184c:	240084c0 	.word	0x240084c0
70011850:	240084bd 	.word	0x240084bd
70011854:	24008490 	.word	0x24008490
70011858:	240084b0 	.word	0x240084b0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
7001185c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7001185e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
70011860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70011862:	681b      	ldr	r3, [r3, #0]
70011864:	2b00      	cmp	r3, #0
70011866:	f040 80c5 	bne.w	700119f4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
7001186a:	4b7f      	ldr	r3, [pc, #508]	@ (70011a68 <tcp_receive+0xf10>)
7001186c:	681a      	ldr	r2, [r3, #0]
7001186e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70011870:	68db      	ldr	r3, [r3, #12]
70011872:	685b      	ldr	r3, [r3, #4]
70011874:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
70011876:	2b00      	cmp	r3, #0
70011878:	f340 80bc 	ble.w	700119f4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
7001187c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7001187e:	68db      	ldr	r3, [r3, #12]
70011880:	899b      	ldrh	r3, [r3, #12]
70011882:	b29b      	uxth	r3, r3
70011884:	4618      	mov	r0, r3
70011886:	f7f8 f89b 	bl	700099c0 <lwip_htons>
7001188a:	4603      	mov	r3, r0
7001188c:	b2db      	uxtb	r3, r3
7001188e:	f003 0301 	and.w	r3, r3, #1
70011892:	2b00      	cmp	r3, #0
70011894:	f040 80be 	bne.w	70011a14 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
70011898:	4874      	ldr	r0, [pc, #464]	@ (70011a6c <tcp_receive+0xf14>)
7001189a:	f7fd fb25 	bl	7000eee8 <tcp_seg_copy>
7001189e:	4602      	mov	r2, r0
700118a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700118a2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
700118a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700118a6:	681b      	ldr	r3, [r3, #0]
700118a8:	2b00      	cmp	r3, #0
700118aa:	f000 80b5 	beq.w	70011a18 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
700118ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700118b0:	68db      	ldr	r3, [r3, #12]
700118b2:	685b      	ldr	r3, [r3, #4]
700118b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
700118b6:	8912      	ldrh	r2, [r2, #8]
700118b8:	441a      	add	r2, r3
700118ba:	4b6b      	ldr	r3, [pc, #428]	@ (70011a68 <tcp_receive+0xf10>)
700118bc:	681b      	ldr	r3, [r3, #0]
700118be:	1ad3      	subs	r3, r2, r3
700118c0:	2b00      	cmp	r3, #0
700118c2:	dd12      	ble.n	700118ea <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
700118c4:	4b68      	ldr	r3, [pc, #416]	@ (70011a68 <tcp_receive+0xf10>)
700118c6:	681b      	ldr	r3, [r3, #0]
700118c8:	b29a      	uxth	r2, r3
700118ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700118cc:	68db      	ldr	r3, [r3, #12]
700118ce:	685b      	ldr	r3, [r3, #4]
700118d0:	b29b      	uxth	r3, r3
700118d2:	1ad3      	subs	r3, r2, r3
700118d4:	b29a      	uxth	r2, r3
700118d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700118d8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
700118da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700118dc:	685a      	ldr	r2, [r3, #4]
700118de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700118e0:	891b      	ldrh	r3, [r3, #8]
700118e2:	4619      	mov	r1, r3
700118e4:	4610      	mov	r0, r2
700118e6:	f7fb fe2b 	bl	7000d540 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
700118ea:	4b61      	ldr	r3, [pc, #388]	@ (70011a70 <tcp_receive+0xf18>)
700118ec:	881b      	ldrh	r3, [r3, #0]
700118ee:	461a      	mov	r2, r3
700118f0:	4b5d      	ldr	r3, [pc, #372]	@ (70011a68 <tcp_receive+0xf10>)
700118f2:	681b      	ldr	r3, [r3, #0]
700118f4:	441a      	add	r2, r3
700118f6:	687b      	ldr	r3, [r7, #4]
700118f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700118fa:	6879      	ldr	r1, [r7, #4]
700118fc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
700118fe:	440b      	add	r3, r1
70011900:	1ad3      	subs	r3, r2, r3
70011902:	2b00      	cmp	r3, #0
70011904:	f340 8088 	ble.w	70011a18 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
70011908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7001190a:	681b      	ldr	r3, [r3, #0]
7001190c:	68db      	ldr	r3, [r3, #12]
7001190e:	899b      	ldrh	r3, [r3, #12]
70011910:	b29b      	uxth	r3, r3
70011912:	4618      	mov	r0, r3
70011914:	f7f8 f854 	bl	700099c0 <lwip_htons>
70011918:	4603      	mov	r3, r0
7001191a:	b2db      	uxtb	r3, r3
7001191c:	f003 0301 	and.w	r3, r3, #1
70011920:	2b00      	cmp	r3, #0
70011922:	d021      	beq.n	70011968 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
70011924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70011926:	681b      	ldr	r3, [r3, #0]
70011928:	68db      	ldr	r3, [r3, #12]
7001192a:	899b      	ldrh	r3, [r3, #12]
7001192c:	b29b      	uxth	r3, r3
7001192e:	b21b      	sxth	r3, r3
70011930:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
70011934:	b21c      	sxth	r4, r3
70011936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70011938:	681b      	ldr	r3, [r3, #0]
7001193a:	68db      	ldr	r3, [r3, #12]
7001193c:	899b      	ldrh	r3, [r3, #12]
7001193e:	b29b      	uxth	r3, r3
70011940:	4618      	mov	r0, r3
70011942:	f7f8 f83d 	bl	700099c0 <lwip_htons>
70011946:	4603      	mov	r3, r0
70011948:	b2db      	uxtb	r3, r3
7001194a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
7001194e:	b29b      	uxth	r3, r3
70011950:	4618      	mov	r0, r3
70011952:	f7f8 f835 	bl	700099c0 <lwip_htons>
70011956:	4603      	mov	r3, r0
70011958:	b21b      	sxth	r3, r3
7001195a:	4323      	orrs	r3, r4
7001195c:	b21a      	sxth	r2, r3
7001195e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70011960:	681b      	ldr	r3, [r3, #0]
70011962:	68db      	ldr	r3, [r3, #12]
70011964:	b292      	uxth	r2, r2
70011966:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
70011968:	687b      	ldr	r3, [r7, #4]
7001196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
7001196c:	b29a      	uxth	r2, r3
7001196e:	687b      	ldr	r3, [r7, #4]
70011970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
70011972:	4413      	add	r3, r2
70011974:	b299      	uxth	r1, r3
70011976:	4b3c      	ldr	r3, [pc, #240]	@ (70011a68 <tcp_receive+0xf10>)
70011978:	681b      	ldr	r3, [r3, #0]
7001197a:	b29a      	uxth	r2, r3
7001197c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7001197e:	681b      	ldr	r3, [r3, #0]
70011980:	1a8a      	subs	r2, r1, r2
70011982:	b292      	uxth	r2, r2
70011984:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
70011986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70011988:	681b      	ldr	r3, [r3, #0]
7001198a:	685a      	ldr	r2, [r3, #4]
7001198c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7001198e:	681b      	ldr	r3, [r3, #0]
70011990:	891b      	ldrh	r3, [r3, #8]
70011992:	4619      	mov	r1, r3
70011994:	4610      	mov	r0, r2
70011996:	f7fb fdd3 	bl	7000d540 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
7001199a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7001199c:	681b      	ldr	r3, [r3, #0]
7001199e:	891c      	ldrh	r4, [r3, #8]
700119a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700119a2:	681b      	ldr	r3, [r3, #0]
700119a4:	68db      	ldr	r3, [r3, #12]
700119a6:	899b      	ldrh	r3, [r3, #12]
700119a8:	b29b      	uxth	r3, r3
700119aa:	4618      	mov	r0, r3
700119ac:	f7f8 f808 	bl	700099c0 <lwip_htons>
700119b0:	4603      	mov	r3, r0
700119b2:	b2db      	uxtb	r3, r3
700119b4:	f003 0303 	and.w	r3, r3, #3
700119b8:	2b00      	cmp	r3, #0
700119ba:	d001      	beq.n	700119c0 <tcp_receive+0xe68>
700119bc:	2301      	movs	r3, #1
700119be:	e000      	b.n	700119c2 <tcp_receive+0xe6a>
700119c0:	2300      	movs	r3, #0
700119c2:	4423      	add	r3, r4
700119c4:	b29a      	uxth	r2, r3
700119c6:	4b2a      	ldr	r3, [pc, #168]	@ (70011a70 <tcp_receive+0xf18>)
700119c8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
700119ca:	4b29      	ldr	r3, [pc, #164]	@ (70011a70 <tcp_receive+0xf18>)
700119cc:	881b      	ldrh	r3, [r3, #0]
700119ce:	461a      	mov	r2, r3
700119d0:	4b25      	ldr	r3, [pc, #148]	@ (70011a68 <tcp_receive+0xf10>)
700119d2:	681b      	ldr	r3, [r3, #0]
700119d4:	441a      	add	r2, r3
700119d6:	687b      	ldr	r3, [r7, #4]
700119d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700119da:	6879      	ldr	r1, [r7, #4]
700119dc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
700119de:	440b      	add	r3, r1
700119e0:	429a      	cmp	r2, r3
700119e2:	d019      	beq.n	70011a18 <tcp_receive+0xec0>
700119e4:	4b23      	ldr	r3, [pc, #140]	@ (70011a74 <tcp_receive+0xf1c>)
700119e6:	f240 62f9 	movw	r2, #1785	@ 0x6f9
700119ea:	4923      	ldr	r1, [pc, #140]	@ (70011a78 <tcp_receive+0xf20>)
700119ec:	4823      	ldr	r0, [pc, #140]	@ (70011a7c <tcp_receive+0xf24>)
700119ee:	f002 f98f 	bl	70013d10 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
700119f2:	e011      	b.n	70011a18 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
700119f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700119f6:	681b      	ldr	r3, [r3, #0]
700119f8:	63bb      	str	r3, [r7, #56]	@ 0x38
700119fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700119fc:	2b00      	cmp	r3, #0
700119fe:	f47f aea5 	bne.w	7001174c <tcp_receive+0xbf4>
70011a02:	e00a      	b.n	70011a1a <tcp_receive+0xec2>
                break;
70011a04:	bf00      	nop
70011a06:	e008      	b.n	70011a1a <tcp_receive+0xec2>
                break;
70011a08:	bf00      	nop
70011a0a:	e006      	b.n	70011a1a <tcp_receive+0xec2>
                  break;
70011a0c:	bf00      	nop
70011a0e:	e004      	b.n	70011a1a <tcp_receive+0xec2>
                  break;
70011a10:	bf00      	nop
70011a12:	e002      	b.n	70011a1a <tcp_receive+0xec2>
                  break;
70011a14:	bf00      	nop
70011a16:	e000      	b.n	70011a1a <tcp_receive+0xec2>
                break;
70011a18:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
70011a1a:	6878      	ldr	r0, [r7, #4]
70011a1c:	f001 fa32 	bl	70012e84 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
70011a20:	e003      	b.n	70011a2a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
70011a22:	6878      	ldr	r0, [r7, #4]
70011a24:	f001 fa2e 	bl	70012e84 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
70011a28:	e01a      	b.n	70011a60 <tcp_receive+0xf08>
70011a2a:	e019      	b.n	70011a60 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
70011a2c:	4b0e      	ldr	r3, [pc, #56]	@ (70011a68 <tcp_receive+0xf10>)
70011a2e:	681a      	ldr	r2, [r3, #0]
70011a30:	687b      	ldr	r3, [r7, #4]
70011a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70011a34:	1ad3      	subs	r3, r2, r3
70011a36:	2b00      	cmp	r3, #0
70011a38:	db0a      	blt.n	70011a50 <tcp_receive+0xef8>
70011a3a:	4b0b      	ldr	r3, [pc, #44]	@ (70011a68 <tcp_receive+0xf10>)
70011a3c:	681a      	ldr	r2, [r3, #0]
70011a3e:	687b      	ldr	r3, [r7, #4]
70011a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70011a42:	6879      	ldr	r1, [r7, #4]
70011a44:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
70011a46:	440b      	add	r3, r1
70011a48:	1ad3      	subs	r3, r2, r3
70011a4a:	3301      	adds	r3, #1
70011a4c:	2b00      	cmp	r3, #0
70011a4e:	dd07      	ble.n	70011a60 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
70011a50:	687b      	ldr	r3, [r7, #4]
70011a52:	8b5b      	ldrh	r3, [r3, #26]
70011a54:	f043 0302 	orr.w	r3, r3, #2
70011a58:	b29a      	uxth	r2, r3
70011a5a:	687b      	ldr	r3, [r7, #4]
70011a5c:	835a      	strh	r2, [r3, #26]
    }
  }
}
70011a5e:	e7ff      	b.n	70011a60 <tcp_receive+0xf08>
70011a60:	bf00      	nop
70011a62:	3750      	adds	r7, #80	@ 0x50
70011a64:	46bd      	mov	sp, r7
70011a66:	bdb0      	pop	{r4, r5, r7, pc}
70011a68:	240084b0 	.word	0x240084b0
70011a6c:	24008490 	.word	0x24008490
70011a70:	240084ba 	.word	0x240084ba
70011a74:	700161d8 	.word	0x700161d8
70011a78:	700165ac 	.word	0x700165ac
70011a7c:	70016250 	.word	0x70016250

70011a80 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
70011a80:	b480      	push	{r7}
70011a82:	b083      	sub	sp, #12
70011a84:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
70011a86:	4b15      	ldr	r3, [pc, #84]	@ (70011adc <tcp_get_next_optbyte+0x5c>)
70011a88:	881b      	ldrh	r3, [r3, #0]
70011a8a:	1c5a      	adds	r2, r3, #1
70011a8c:	b291      	uxth	r1, r2
70011a8e:	4a13      	ldr	r2, [pc, #76]	@ (70011adc <tcp_get_next_optbyte+0x5c>)
70011a90:	8011      	strh	r1, [r2, #0]
70011a92:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
70011a94:	4b12      	ldr	r3, [pc, #72]	@ (70011ae0 <tcp_get_next_optbyte+0x60>)
70011a96:	681b      	ldr	r3, [r3, #0]
70011a98:	2b00      	cmp	r3, #0
70011a9a:	d004      	beq.n	70011aa6 <tcp_get_next_optbyte+0x26>
70011a9c:	4b11      	ldr	r3, [pc, #68]	@ (70011ae4 <tcp_get_next_optbyte+0x64>)
70011a9e:	881b      	ldrh	r3, [r3, #0]
70011aa0:	88fa      	ldrh	r2, [r7, #6]
70011aa2:	429a      	cmp	r2, r3
70011aa4:	d208      	bcs.n	70011ab8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
70011aa6:	4b10      	ldr	r3, [pc, #64]	@ (70011ae8 <tcp_get_next_optbyte+0x68>)
70011aa8:	681b      	ldr	r3, [r3, #0]
70011aaa:	3314      	adds	r3, #20
70011aac:	603b      	str	r3, [r7, #0]
    return opts[optidx];
70011aae:	88fb      	ldrh	r3, [r7, #6]
70011ab0:	683a      	ldr	r2, [r7, #0]
70011ab2:	4413      	add	r3, r2
70011ab4:	781b      	ldrb	r3, [r3, #0]
70011ab6:	e00b      	b.n	70011ad0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
70011ab8:	88fb      	ldrh	r3, [r7, #6]
70011aba:	b2da      	uxtb	r2, r3
70011abc:	4b09      	ldr	r3, [pc, #36]	@ (70011ae4 <tcp_get_next_optbyte+0x64>)
70011abe:	881b      	ldrh	r3, [r3, #0]
70011ac0:	b2db      	uxtb	r3, r3
70011ac2:	1ad3      	subs	r3, r2, r3
70011ac4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
70011ac6:	4b06      	ldr	r3, [pc, #24]	@ (70011ae0 <tcp_get_next_optbyte+0x60>)
70011ac8:	681a      	ldr	r2, [r3, #0]
70011aca:	797b      	ldrb	r3, [r7, #5]
70011acc:	4413      	add	r3, r2
70011ace:	781b      	ldrb	r3, [r3, #0]
  }
}
70011ad0:	4618      	mov	r0, r3
70011ad2:	370c      	adds	r7, #12
70011ad4:	46bd      	mov	sp, r7
70011ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
70011ada:	4770      	bx	lr
70011adc:	240084ac 	.word	0x240084ac
70011ae0:	240084a8 	.word	0x240084a8
70011ae4:	240084a6 	.word	0x240084a6
70011ae8:	240084a0 	.word	0x240084a0

70011aec <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
70011aec:	b580      	push	{r7, lr}
70011aee:	b084      	sub	sp, #16
70011af0:	af00      	add	r7, sp, #0
70011af2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
70011af4:	687b      	ldr	r3, [r7, #4]
70011af6:	2b00      	cmp	r3, #0
70011af8:	d106      	bne.n	70011b08 <tcp_parseopt+0x1c>
70011afa:	4b32      	ldr	r3, [pc, #200]	@ (70011bc4 <tcp_parseopt+0xd8>)
70011afc:	f240 727e 	movw	r2, #1918	@ 0x77e
70011b00:	4931      	ldr	r1, [pc, #196]	@ (70011bc8 <tcp_parseopt+0xdc>)
70011b02:	4832      	ldr	r0, [pc, #200]	@ (70011bcc <tcp_parseopt+0xe0>)
70011b04:	f002 f904 	bl	70013d10 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
70011b08:	4b31      	ldr	r3, [pc, #196]	@ (70011bd0 <tcp_parseopt+0xe4>)
70011b0a:	881b      	ldrh	r3, [r3, #0]
70011b0c:	2b00      	cmp	r3, #0
70011b0e:	d056      	beq.n	70011bbe <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
70011b10:	4b30      	ldr	r3, [pc, #192]	@ (70011bd4 <tcp_parseopt+0xe8>)
70011b12:	2200      	movs	r2, #0
70011b14:	801a      	strh	r2, [r3, #0]
70011b16:	e046      	b.n	70011ba6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
70011b18:	f7ff ffb2 	bl	70011a80 <tcp_get_next_optbyte>
70011b1c:	4603      	mov	r3, r0
70011b1e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
70011b20:	7bfb      	ldrb	r3, [r7, #15]
70011b22:	2b02      	cmp	r3, #2
70011b24:	d006      	beq.n	70011b34 <tcp_parseopt+0x48>
70011b26:	2b02      	cmp	r3, #2
70011b28:	dc2a      	bgt.n	70011b80 <tcp_parseopt+0x94>
70011b2a:	2b00      	cmp	r3, #0
70011b2c:	d042      	beq.n	70011bb4 <tcp_parseopt+0xc8>
70011b2e:	2b01      	cmp	r3, #1
70011b30:	d038      	beq.n	70011ba4 <tcp_parseopt+0xb8>
70011b32:	e025      	b.n	70011b80 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
70011b34:	f7ff ffa4 	bl	70011a80 <tcp_get_next_optbyte>
70011b38:	4603      	mov	r3, r0
70011b3a:	2b04      	cmp	r3, #4
70011b3c:	d13c      	bne.n	70011bb8 <tcp_parseopt+0xcc>
70011b3e:	4b25      	ldr	r3, [pc, #148]	@ (70011bd4 <tcp_parseopt+0xe8>)
70011b40:	881b      	ldrh	r3, [r3, #0]
70011b42:	3301      	adds	r3, #1
70011b44:	4a22      	ldr	r2, [pc, #136]	@ (70011bd0 <tcp_parseopt+0xe4>)
70011b46:	8812      	ldrh	r2, [r2, #0]
70011b48:	4293      	cmp	r3, r2
70011b4a:	da35      	bge.n	70011bb8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
70011b4c:	f7ff ff98 	bl	70011a80 <tcp_get_next_optbyte>
70011b50:	4603      	mov	r3, r0
70011b52:	021b      	lsls	r3, r3, #8
70011b54:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
70011b56:	f7ff ff93 	bl	70011a80 <tcp_get_next_optbyte>
70011b5a:	4603      	mov	r3, r0
70011b5c:	461a      	mov	r2, r3
70011b5e:	89bb      	ldrh	r3, [r7, #12]
70011b60:	4313      	orrs	r3, r2
70011b62:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
70011b64:	89bb      	ldrh	r3, [r7, #12]
70011b66:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
70011b6a:	d804      	bhi.n	70011b76 <tcp_parseopt+0x8a>
70011b6c:	89bb      	ldrh	r3, [r7, #12]
70011b6e:	2b00      	cmp	r3, #0
70011b70:	d001      	beq.n	70011b76 <tcp_parseopt+0x8a>
70011b72:	89ba      	ldrh	r2, [r7, #12]
70011b74:	e001      	b.n	70011b7a <tcp_parseopt+0x8e>
70011b76:	f44f 7206 	mov.w	r2, #536	@ 0x218
70011b7a:	687b      	ldr	r3, [r7, #4]
70011b7c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
70011b7e:	e012      	b.n	70011ba6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
70011b80:	f7ff ff7e 	bl	70011a80 <tcp_get_next_optbyte>
70011b84:	4603      	mov	r3, r0
70011b86:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
70011b88:	7afb      	ldrb	r3, [r7, #11]
70011b8a:	2b01      	cmp	r3, #1
70011b8c:	d916      	bls.n	70011bbc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
70011b8e:	7afb      	ldrb	r3, [r7, #11]
70011b90:	b29a      	uxth	r2, r3
70011b92:	4b10      	ldr	r3, [pc, #64]	@ (70011bd4 <tcp_parseopt+0xe8>)
70011b94:	881b      	ldrh	r3, [r3, #0]
70011b96:	4413      	add	r3, r2
70011b98:	b29b      	uxth	r3, r3
70011b9a:	3b02      	subs	r3, #2
70011b9c:	b29a      	uxth	r2, r3
70011b9e:	4b0d      	ldr	r3, [pc, #52]	@ (70011bd4 <tcp_parseopt+0xe8>)
70011ba0:	801a      	strh	r2, [r3, #0]
70011ba2:	e000      	b.n	70011ba6 <tcp_parseopt+0xba>
          break;
70011ba4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
70011ba6:	4b0b      	ldr	r3, [pc, #44]	@ (70011bd4 <tcp_parseopt+0xe8>)
70011ba8:	881a      	ldrh	r2, [r3, #0]
70011baa:	4b09      	ldr	r3, [pc, #36]	@ (70011bd0 <tcp_parseopt+0xe4>)
70011bac:	881b      	ldrh	r3, [r3, #0]
70011bae:	429a      	cmp	r2, r3
70011bb0:	d3b2      	bcc.n	70011b18 <tcp_parseopt+0x2c>
70011bb2:	e004      	b.n	70011bbe <tcp_parseopt+0xd2>
          return;
70011bb4:	bf00      	nop
70011bb6:	e002      	b.n	70011bbe <tcp_parseopt+0xd2>
            return;
70011bb8:	bf00      	nop
70011bba:	e000      	b.n	70011bbe <tcp_parseopt+0xd2>
            return;
70011bbc:	bf00      	nop
      }
    }
  }
}
70011bbe:	3710      	adds	r7, #16
70011bc0:	46bd      	mov	sp, r7
70011bc2:	bd80      	pop	{r7, pc}
70011bc4:	700161d8 	.word	0x700161d8
70011bc8:	70016668 	.word	0x70016668
70011bcc:	70016250 	.word	0x70016250
70011bd0:	240084a4 	.word	0x240084a4
70011bd4:	240084ac 	.word	0x240084ac

70011bd8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
70011bd8:	b480      	push	{r7}
70011bda:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
70011bdc:	4b05      	ldr	r3, [pc, #20]	@ (70011bf4 <tcp_trigger_input_pcb_close+0x1c>)
70011bde:	781b      	ldrb	r3, [r3, #0]
70011be0:	f043 0310 	orr.w	r3, r3, #16
70011be4:	b2da      	uxtb	r2, r3
70011be6:	4b03      	ldr	r3, [pc, #12]	@ (70011bf4 <tcp_trigger_input_pcb_close+0x1c>)
70011be8:	701a      	strb	r2, [r3, #0]
}
70011bea:	bf00      	nop
70011bec:	46bd      	mov	sp, r7
70011bee:	f85d 7b04 	ldr.w	r7, [sp], #4
70011bf2:	4770      	bx	lr
70011bf4:	240084bd 	.word	0x240084bd

70011bf8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
70011bf8:	b580      	push	{r7, lr}
70011bfa:	b084      	sub	sp, #16
70011bfc:	af00      	add	r7, sp, #0
70011bfe:	60f8      	str	r0, [r7, #12]
70011c00:	60b9      	str	r1, [r7, #8]
70011c02:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
70011c04:	68fb      	ldr	r3, [r7, #12]
70011c06:	2b00      	cmp	r3, #0
70011c08:	d00a      	beq.n	70011c20 <tcp_route+0x28>
70011c0a:	68fb      	ldr	r3, [r7, #12]
70011c0c:	7a1b      	ldrb	r3, [r3, #8]
70011c0e:	2b00      	cmp	r3, #0
70011c10:	d006      	beq.n	70011c20 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
70011c12:	68fb      	ldr	r3, [r7, #12]
70011c14:	7a1b      	ldrb	r3, [r3, #8]
70011c16:	4618      	mov	r0, r3
70011c18:	f7fb fa8a 	bl	7000d130 <netif_get_by_index>
70011c1c:	4603      	mov	r3, r0
70011c1e:	e003      	b.n	70011c28 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
70011c20:	6878      	ldr	r0, [r7, #4]
70011c22:	f7f9 f9c3 	bl	7000afac <ip4_route>
70011c26:	4603      	mov	r3, r0
  }
}
70011c28:	4618      	mov	r0, r3
70011c2a:	3710      	adds	r7, #16
70011c2c:	46bd      	mov	sp, r7
70011c2e:	bd80      	pop	{r7, pc}

70011c30 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
70011c30:	b590      	push	{r4, r7, lr}
70011c32:	b087      	sub	sp, #28
70011c34:	af00      	add	r7, sp, #0
70011c36:	60f8      	str	r0, [r7, #12]
70011c38:	60b9      	str	r1, [r7, #8]
70011c3a:	603b      	str	r3, [r7, #0]
70011c3c:	4613      	mov	r3, r2
70011c3e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
70011c40:	68fb      	ldr	r3, [r7, #12]
70011c42:	2b00      	cmp	r3, #0
70011c44:	d105      	bne.n	70011c52 <tcp_create_segment+0x22>
70011c46:	4b43      	ldr	r3, [pc, #268]	@ (70011d54 <tcp_create_segment+0x124>)
70011c48:	22a3      	movs	r2, #163	@ 0xa3
70011c4a:	4943      	ldr	r1, [pc, #268]	@ (70011d58 <tcp_create_segment+0x128>)
70011c4c:	4843      	ldr	r0, [pc, #268]	@ (70011d5c <tcp_create_segment+0x12c>)
70011c4e:	f002 f85f 	bl	70013d10 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
70011c52:	68bb      	ldr	r3, [r7, #8]
70011c54:	2b00      	cmp	r3, #0
70011c56:	d105      	bne.n	70011c64 <tcp_create_segment+0x34>
70011c58:	4b3e      	ldr	r3, [pc, #248]	@ (70011d54 <tcp_create_segment+0x124>)
70011c5a:	22a4      	movs	r2, #164	@ 0xa4
70011c5c:	4940      	ldr	r1, [pc, #256]	@ (70011d60 <tcp_create_segment+0x130>)
70011c5e:	483f      	ldr	r0, [pc, #252]	@ (70011d5c <tcp_create_segment+0x12c>)
70011c60:	f002 f856 	bl	70013d10 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
70011c64:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
70011c68:	009b      	lsls	r3, r3, #2
70011c6a:	b2db      	uxtb	r3, r3
70011c6c:	f003 0304 	and.w	r3, r3, #4
70011c70:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
70011c72:	2003      	movs	r0, #3
70011c74:	f7fa ff34 	bl	7000cae0 <memp_malloc>
70011c78:	6138      	str	r0, [r7, #16]
70011c7a:	693b      	ldr	r3, [r7, #16]
70011c7c:	2b00      	cmp	r3, #0
70011c7e:	d104      	bne.n	70011c8a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
70011c80:	68b8      	ldr	r0, [r7, #8]
70011c82:	f7fb fdd9 	bl	7000d838 <pbuf_free>
    return NULL;
70011c86:	2300      	movs	r3, #0
70011c88:	e060      	b.n	70011d4c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
70011c8a:	693b      	ldr	r3, [r7, #16]
70011c8c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
70011c90:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
70011c92:	693b      	ldr	r3, [r7, #16]
70011c94:	2200      	movs	r2, #0
70011c96:	601a      	str	r2, [r3, #0]
  seg->p = p;
70011c98:	693b      	ldr	r3, [r7, #16]
70011c9a:	68ba      	ldr	r2, [r7, #8]
70011c9c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
70011c9e:	68bb      	ldr	r3, [r7, #8]
70011ca0:	891a      	ldrh	r2, [r3, #8]
70011ca2:	7dfb      	ldrb	r3, [r7, #23]
70011ca4:	b29b      	uxth	r3, r3
70011ca6:	429a      	cmp	r2, r3
70011ca8:	d205      	bcs.n	70011cb6 <tcp_create_segment+0x86>
70011caa:	4b2a      	ldr	r3, [pc, #168]	@ (70011d54 <tcp_create_segment+0x124>)
70011cac:	22b0      	movs	r2, #176	@ 0xb0
70011cae:	492d      	ldr	r1, [pc, #180]	@ (70011d64 <tcp_create_segment+0x134>)
70011cb0:	482a      	ldr	r0, [pc, #168]	@ (70011d5c <tcp_create_segment+0x12c>)
70011cb2:	f002 f82d 	bl	70013d10 <iprintf>
  seg->len = p->tot_len - optlen;
70011cb6:	68bb      	ldr	r3, [r7, #8]
70011cb8:	891a      	ldrh	r2, [r3, #8]
70011cba:	7dfb      	ldrb	r3, [r7, #23]
70011cbc:	b29b      	uxth	r3, r3
70011cbe:	1ad3      	subs	r3, r2, r3
70011cc0:	b29a      	uxth	r2, r3
70011cc2:	693b      	ldr	r3, [r7, #16]
70011cc4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
70011cc6:	2114      	movs	r1, #20
70011cc8:	68b8      	ldr	r0, [r7, #8]
70011cca:	f7fb fd29 	bl	7000d720 <pbuf_add_header>
70011cce:	4603      	mov	r3, r0
70011cd0:	2b00      	cmp	r3, #0
70011cd2:	d004      	beq.n	70011cde <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
70011cd4:	6938      	ldr	r0, [r7, #16]
70011cd6:	f7fd f8ef 	bl	7000eeb8 <tcp_seg_free>
    return NULL;
70011cda:	2300      	movs	r3, #0
70011cdc:	e036      	b.n	70011d4c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
70011cde:	693b      	ldr	r3, [r7, #16]
70011ce0:	685b      	ldr	r3, [r3, #4]
70011ce2:	685a      	ldr	r2, [r3, #4]
70011ce4:	693b      	ldr	r3, [r7, #16]
70011ce6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
70011ce8:	68fb      	ldr	r3, [r7, #12]
70011cea:	8ada      	ldrh	r2, [r3, #22]
70011cec:	693b      	ldr	r3, [r7, #16]
70011cee:	68dc      	ldr	r4, [r3, #12]
70011cf0:	4610      	mov	r0, r2
70011cf2:	f7f7 fe65 	bl	700099c0 <lwip_htons>
70011cf6:	4603      	mov	r3, r0
70011cf8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
70011cfa:	68fb      	ldr	r3, [r7, #12]
70011cfc:	8b1a      	ldrh	r2, [r3, #24]
70011cfe:	693b      	ldr	r3, [r7, #16]
70011d00:	68dc      	ldr	r4, [r3, #12]
70011d02:	4610      	mov	r0, r2
70011d04:	f7f7 fe5c 	bl	700099c0 <lwip_htons>
70011d08:	4603      	mov	r3, r0
70011d0a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
70011d0c:	693b      	ldr	r3, [r7, #16]
70011d0e:	68dc      	ldr	r4, [r3, #12]
70011d10:	6838      	ldr	r0, [r7, #0]
70011d12:	f7f7 fe6a 	bl	700099ea <lwip_htonl>
70011d16:	4603      	mov	r3, r0
70011d18:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
70011d1a:	7dfb      	ldrb	r3, [r7, #23]
70011d1c:	089b      	lsrs	r3, r3, #2
70011d1e:	b2db      	uxtb	r3, r3
70011d20:	3305      	adds	r3, #5
70011d22:	b29b      	uxth	r3, r3
70011d24:	031b      	lsls	r3, r3, #12
70011d26:	b29a      	uxth	r2, r3
70011d28:	79fb      	ldrb	r3, [r7, #7]
70011d2a:	b29b      	uxth	r3, r3
70011d2c:	4313      	orrs	r3, r2
70011d2e:	b29a      	uxth	r2, r3
70011d30:	693b      	ldr	r3, [r7, #16]
70011d32:	68dc      	ldr	r4, [r3, #12]
70011d34:	4610      	mov	r0, r2
70011d36:	f7f7 fe43 	bl	700099c0 <lwip_htons>
70011d3a:	4603      	mov	r3, r0
70011d3c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
70011d3e:	693b      	ldr	r3, [r7, #16]
70011d40:	68db      	ldr	r3, [r3, #12]
70011d42:	2200      	movs	r2, #0
70011d44:	749a      	strb	r2, [r3, #18]
70011d46:	2200      	movs	r2, #0
70011d48:	74da      	strb	r2, [r3, #19]
  return seg;
70011d4a:	693b      	ldr	r3, [r7, #16]
}
70011d4c:	4618      	mov	r0, r3
70011d4e:	371c      	adds	r7, #28
70011d50:	46bd      	mov	sp, r7
70011d52:	bd90      	pop	{r4, r7, pc}
70011d54:	70016684 	.word	0x70016684
70011d58:	700166e4 	.word	0x700166e4
70011d5c:	70016704 	.word	0x70016704
70011d60:	7001672c 	.word	0x7001672c
70011d64:	70016750 	.word	0x70016750

70011d68 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
70011d68:	b590      	push	{r4, r7, lr}
70011d6a:	b08b      	sub	sp, #44	@ 0x2c
70011d6c:	af02      	add	r7, sp, #8
70011d6e:	6078      	str	r0, [r7, #4]
70011d70:	460b      	mov	r3, r1
70011d72:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
70011d74:	2300      	movs	r3, #0
70011d76:	61fb      	str	r3, [r7, #28]
70011d78:	2300      	movs	r3, #0
70011d7a:	613b      	str	r3, [r7, #16]
  struct pbuf *p = NULL;
70011d7c:	2300      	movs	r3, #0
70011d7e:	61bb      	str	r3, [r7, #24]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
70011d80:	687b      	ldr	r3, [r7, #4]
70011d82:	2b00      	cmp	r3, #0
70011d84:	d106      	bne.n	70011d94 <tcp_split_unsent_seg+0x2c>
70011d86:	4b96      	ldr	r3, [pc, #600]	@ (70011fe0 <tcp_split_unsent_seg+0x278>)
70011d88:	f240 324b 	movw	r2, #843	@ 0x34b
70011d8c:	4995      	ldr	r1, [pc, #596]	@ (70011fe4 <tcp_split_unsent_seg+0x27c>)
70011d8e:	4896      	ldr	r0, [pc, #600]	@ (70011fe8 <tcp_split_unsent_seg+0x280>)
70011d90:	f001 ffbe 	bl	70013d10 <iprintf>

  useg = pcb->unsent;
70011d94:	687b      	ldr	r3, [r7, #4]
70011d96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70011d98:	613b      	str	r3, [r7, #16]
  if (useg == NULL) {
70011d9a:	693b      	ldr	r3, [r7, #16]
70011d9c:	2b00      	cmp	r3, #0
70011d9e:	d102      	bne.n	70011da6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
70011da0:	f04f 33ff 	mov.w	r3, #4294967295
70011da4:	e117      	b.n	70011fd6 <tcp_split_unsent_seg+0x26e>
  }

  if (split == 0) {
70011da6:	887b      	ldrh	r3, [r7, #2]
70011da8:	2b00      	cmp	r3, #0
70011daa:	d109      	bne.n	70011dc0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
70011dac:	4b8c      	ldr	r3, [pc, #560]	@ (70011fe0 <tcp_split_unsent_seg+0x278>)
70011dae:	f240 3253 	movw	r2, #851	@ 0x353
70011db2:	498e      	ldr	r1, [pc, #568]	@ (70011fec <tcp_split_unsent_seg+0x284>)
70011db4:	488c      	ldr	r0, [pc, #560]	@ (70011fe8 <tcp_split_unsent_seg+0x280>)
70011db6:	f001 ffab 	bl	70013d10 <iprintf>
    return ERR_VAL;
70011dba:	f06f 0305 	mvn.w	r3, #5
70011dbe:	e10a      	b.n	70011fd6 <tcp_split_unsent_seg+0x26e>
  }

  if (useg->len <= split) {
70011dc0:	693b      	ldr	r3, [r7, #16]
70011dc2:	891b      	ldrh	r3, [r3, #8]
70011dc4:	887a      	ldrh	r2, [r7, #2]
70011dc6:	429a      	cmp	r2, r3
70011dc8:	d301      	bcc.n	70011dce <tcp_split_unsent_seg+0x66>
    return ERR_OK;
70011dca:	2300      	movs	r3, #0
70011dcc:	e103      	b.n	70011fd6 <tcp_split_unsent_seg+0x26e>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
70011dce:	687b      	ldr	r3, [r7, #4]
70011dd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70011dd2:	887a      	ldrh	r2, [r7, #2]
70011dd4:	429a      	cmp	r2, r3
70011dd6:	d906      	bls.n	70011de6 <tcp_split_unsent_seg+0x7e>
70011dd8:	4b81      	ldr	r3, [pc, #516]	@ (70011fe0 <tcp_split_unsent_seg+0x278>)
70011dda:	f240 325b 	movw	r2, #859	@ 0x35b
70011dde:	4984      	ldr	r1, [pc, #528]	@ (70011ff0 <tcp_split_unsent_seg+0x288>)
70011de0:	4881      	ldr	r0, [pc, #516]	@ (70011fe8 <tcp_split_unsent_seg+0x280>)
70011de2:	f001 ff95 	bl	70013d10 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
70011de6:	693b      	ldr	r3, [r7, #16]
70011de8:	891b      	ldrh	r3, [r3, #8]
70011dea:	2b00      	cmp	r3, #0
70011dec:	d106      	bne.n	70011dfc <tcp_split_unsent_seg+0x94>
70011dee:	4b7c      	ldr	r3, [pc, #496]	@ (70011fe0 <tcp_split_unsent_seg+0x278>)
70011df0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
70011df4:	497f      	ldr	r1, [pc, #508]	@ (70011ff4 <tcp_split_unsent_seg+0x28c>)
70011df6:	487c      	ldr	r0, [pc, #496]	@ (70011fe8 <tcp_split_unsent_seg+0x280>)
70011df8:	f001 ff8a 	bl	70013d10 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
70011dfc:	693b      	ldr	r3, [r7, #16]
70011dfe:	7a9b      	ldrb	r3, [r3, #10]
70011e00:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
70011e02:	7bfb      	ldrb	r3, [r7, #15]
70011e04:	009b      	lsls	r3, r3, #2
70011e06:	b2db      	uxtb	r3, r3
70011e08:	f003 0304 	and.w	r3, r3, #4
70011e0c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
70011e0e:	693b      	ldr	r3, [r7, #16]
70011e10:	891a      	ldrh	r2, [r3, #8]
70011e12:	887b      	ldrh	r3, [r7, #2]
70011e14:	1ad3      	subs	r3, r2, r3
70011e16:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
70011e18:	7bbb      	ldrb	r3, [r7, #14]
70011e1a:	b29a      	uxth	r2, r3
70011e1c:	89bb      	ldrh	r3, [r7, #12]
70011e1e:	4413      	add	r3, r2
70011e20:	b29b      	uxth	r3, r3
70011e22:	f44f 7220 	mov.w	r2, #640	@ 0x280
70011e26:	4619      	mov	r1, r3
70011e28:	2036      	movs	r0, #54	@ 0x36
70011e2a:	f7fb fa2b 	bl	7000d284 <pbuf_alloc>
70011e2e:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
70011e30:	69bb      	ldr	r3, [r7, #24]
70011e32:	2b00      	cmp	r3, #0
70011e34:	f000 80ba 	beq.w	70011fac <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
70011e38:	693b      	ldr	r3, [r7, #16]
70011e3a:	685b      	ldr	r3, [r3, #4]
70011e3c:	891a      	ldrh	r2, [r3, #8]
70011e3e:	693b      	ldr	r3, [r7, #16]
70011e40:	891b      	ldrh	r3, [r3, #8]
70011e42:	1ad3      	subs	r3, r2, r3
70011e44:	b29a      	uxth	r2, r3
70011e46:	887b      	ldrh	r3, [r7, #2]
70011e48:	4413      	add	r3, r2
70011e4a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
70011e4c:	693b      	ldr	r3, [r7, #16]
70011e4e:	6858      	ldr	r0, [r3, #4]
70011e50:	69bb      	ldr	r3, [r7, #24]
70011e52:	685a      	ldr	r2, [r3, #4]
70011e54:	7bbb      	ldrb	r3, [r7, #14]
70011e56:	18d1      	adds	r1, r2, r3
70011e58:	897b      	ldrh	r3, [r7, #10]
70011e5a:	89ba      	ldrh	r2, [r7, #12]
70011e5c:	f7fb fef4 	bl	7000dc48 <pbuf_copy_partial>
70011e60:	4603      	mov	r3, r0
70011e62:	461a      	mov	r2, r3
70011e64:	89bb      	ldrh	r3, [r7, #12]
70011e66:	4293      	cmp	r3, r2
70011e68:	f040 80a2 	bne.w	70011fb0 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
70011e6c:	693b      	ldr	r3, [r7, #16]
70011e6e:	68db      	ldr	r3, [r3, #12]
70011e70:	899b      	ldrh	r3, [r3, #12]
70011e72:	b29b      	uxth	r3, r3
70011e74:	4618      	mov	r0, r3
70011e76:	f7f7 fda3 	bl	700099c0 <lwip_htons>
70011e7a:	4603      	mov	r3, r0
70011e7c:	b2db      	uxtb	r3, r3
70011e7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
70011e82:	75fb      	strb	r3, [r7, #23]
  remainder_flags = 0; /* ACK added in tcp_output() */
70011e84:	2300      	movs	r3, #0
70011e86:	75bb      	strb	r3, [r7, #22]

  if (split_flags & TCP_PSH) {
70011e88:	7dfb      	ldrb	r3, [r7, #23]
70011e8a:	f003 0308 	and.w	r3, r3, #8
70011e8e:	2b00      	cmp	r3, #0
70011e90:	d007      	beq.n	70011ea2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
70011e92:	7dfb      	ldrb	r3, [r7, #23]
70011e94:	f023 0308 	bic.w	r3, r3, #8
70011e98:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_PSH;
70011e9a:	7dbb      	ldrb	r3, [r7, #22]
70011e9c:	f043 0308 	orr.w	r3, r3, #8
70011ea0:	75bb      	strb	r3, [r7, #22]
  }
  if (split_flags & TCP_FIN) {
70011ea2:	7dfb      	ldrb	r3, [r7, #23]
70011ea4:	f003 0301 	and.w	r3, r3, #1
70011ea8:	2b00      	cmp	r3, #0
70011eaa:	d007      	beq.n	70011ebc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
70011eac:	7dfb      	ldrb	r3, [r7, #23]
70011eae:	f023 0301 	bic.w	r3, r3, #1
70011eb2:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_FIN;
70011eb4:	7dbb      	ldrb	r3, [r7, #22]
70011eb6:	f043 0301 	orr.w	r3, r3, #1
70011eba:	75bb      	strb	r3, [r7, #22]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
70011ebc:	693b      	ldr	r3, [r7, #16]
70011ebe:	68db      	ldr	r3, [r3, #12]
70011ec0:	685b      	ldr	r3, [r3, #4]
70011ec2:	4618      	mov	r0, r3
70011ec4:	f7f7 fd91 	bl	700099ea <lwip_htonl>
70011ec8:	4602      	mov	r2, r0
70011eca:	887b      	ldrh	r3, [r7, #2]
70011ecc:	18d1      	adds	r1, r2, r3
70011ece:	7dba      	ldrb	r2, [r7, #22]
70011ed0:	7bfb      	ldrb	r3, [r7, #15]
70011ed2:	9300      	str	r3, [sp, #0]
70011ed4:	460b      	mov	r3, r1
70011ed6:	69b9      	ldr	r1, [r7, #24]
70011ed8:	6878      	ldr	r0, [r7, #4]
70011eda:	f7ff fea9 	bl	70011c30 <tcp_create_segment>
70011ede:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
70011ee0:	69fb      	ldr	r3, [r7, #28]
70011ee2:	2b00      	cmp	r3, #0
70011ee4:	d102      	bne.n	70011eec <tcp_split_unsent_seg+0x184>
    p = NULL; /* Freed by tcp_create_segment */
70011ee6:	2300      	movs	r3, #0
70011ee8:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
70011eea:	e062      	b.n	70011fb2 <tcp_split_unsent_seg+0x24a>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
70011eec:	693b      	ldr	r3, [r7, #16]
70011eee:	685b      	ldr	r3, [r3, #4]
70011ef0:	4618      	mov	r0, r3
70011ef2:	f7fb fd2f 	bl	7000d954 <pbuf_clen>
70011ef6:	4603      	mov	r3, r0
70011ef8:	461a      	mov	r2, r3
70011efa:	687b      	ldr	r3, [r7, #4]
70011efc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
70011f00:	1a9b      	subs	r3, r3, r2
70011f02:	b29a      	uxth	r2, r3
70011f04:	687b      	ldr	r3, [r7, #4]
70011f06:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
70011f0a:	693b      	ldr	r3, [r7, #16]
70011f0c:	6858      	ldr	r0, [r3, #4]
70011f0e:	693b      	ldr	r3, [r7, #16]
70011f10:	685b      	ldr	r3, [r3, #4]
70011f12:	891a      	ldrh	r2, [r3, #8]
70011f14:	89bb      	ldrh	r3, [r7, #12]
70011f16:	1ad3      	subs	r3, r2, r3
70011f18:	b29b      	uxth	r3, r3
70011f1a:	4619      	mov	r1, r3
70011f1c:	f7fb fb10 	bl	7000d540 <pbuf_realloc>
  useg->len -= remainder;
70011f20:	693b      	ldr	r3, [r7, #16]
70011f22:	891a      	ldrh	r2, [r3, #8]
70011f24:	89bb      	ldrh	r3, [r7, #12]
70011f26:	1ad3      	subs	r3, r2, r3
70011f28:	b29a      	uxth	r2, r3
70011f2a:	693b      	ldr	r3, [r7, #16]
70011f2c:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
70011f2e:	693b      	ldr	r3, [r7, #16]
70011f30:	68db      	ldr	r3, [r3, #12]
70011f32:	899b      	ldrh	r3, [r3, #12]
70011f34:	b29c      	uxth	r4, r3
70011f36:	7dfb      	ldrb	r3, [r7, #23]
70011f38:	b29b      	uxth	r3, r3
70011f3a:	4618      	mov	r0, r3
70011f3c:	f7f7 fd40 	bl	700099c0 <lwip_htons>
70011f40:	4603      	mov	r3, r0
70011f42:	461a      	mov	r2, r3
70011f44:	693b      	ldr	r3, [r7, #16]
70011f46:	68db      	ldr	r3, [r3, #12]
70011f48:	4322      	orrs	r2, r4
70011f4a:	b292      	uxth	r2, r2
70011f4c:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
70011f4e:	693b      	ldr	r3, [r7, #16]
70011f50:	685b      	ldr	r3, [r3, #4]
70011f52:	4618      	mov	r0, r3
70011f54:	f7fb fcfe 	bl	7000d954 <pbuf_clen>
70011f58:	4603      	mov	r3, r0
70011f5a:	461a      	mov	r2, r3
70011f5c:	687b      	ldr	r3, [r7, #4]
70011f5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
70011f62:	4413      	add	r3, r2
70011f64:	b29a      	uxth	r2, r3
70011f66:	687b      	ldr	r3, [r7, #4]
70011f68:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
70011f6c:	69fb      	ldr	r3, [r7, #28]
70011f6e:	685b      	ldr	r3, [r3, #4]
70011f70:	4618      	mov	r0, r3
70011f72:	f7fb fcef 	bl	7000d954 <pbuf_clen>
70011f76:	4603      	mov	r3, r0
70011f78:	461a      	mov	r2, r3
70011f7a:	687b      	ldr	r3, [r7, #4]
70011f7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
70011f80:	4413      	add	r3, r2
70011f82:	b29a      	uxth	r2, r3
70011f84:	687b      	ldr	r3, [r7, #4]
70011f86:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
70011f8a:	693b      	ldr	r3, [r7, #16]
70011f8c:	681a      	ldr	r2, [r3, #0]
70011f8e:	69fb      	ldr	r3, [r7, #28]
70011f90:	601a      	str	r2, [r3, #0]
  useg->next = seg;
70011f92:	693b      	ldr	r3, [r7, #16]
70011f94:	69fa      	ldr	r2, [r7, #28]
70011f96:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
70011f98:	69fb      	ldr	r3, [r7, #28]
70011f9a:	681b      	ldr	r3, [r3, #0]
70011f9c:	2b00      	cmp	r3, #0
70011f9e:	d103      	bne.n	70011fa8 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
70011fa0:	687b      	ldr	r3, [r7, #4]
70011fa2:	2200      	movs	r2, #0
70011fa4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
70011fa8:	2300      	movs	r3, #0
70011faa:	e014      	b.n	70011fd6 <tcp_split_unsent_seg+0x26e>
    goto memerr;
70011fac:	bf00      	nop
70011fae:	e000      	b.n	70011fb2 <tcp_split_unsent_seg+0x24a>
    goto memerr;
70011fb0:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
70011fb2:	69fb      	ldr	r3, [r7, #28]
70011fb4:	2b00      	cmp	r3, #0
70011fb6:	d006      	beq.n	70011fc6 <tcp_split_unsent_seg+0x25e>
70011fb8:	4b09      	ldr	r3, [pc, #36]	@ (70011fe0 <tcp_split_unsent_seg+0x278>)
70011fba:	f240 32d9 	movw	r2, #985	@ 0x3d9
70011fbe:	490e      	ldr	r1, [pc, #56]	@ (70011ff8 <tcp_split_unsent_seg+0x290>)
70011fc0:	4809      	ldr	r0, [pc, #36]	@ (70011fe8 <tcp_split_unsent_seg+0x280>)
70011fc2:	f001 fea5 	bl	70013d10 <iprintf>
  if (p != NULL) {
70011fc6:	69bb      	ldr	r3, [r7, #24]
70011fc8:	2b00      	cmp	r3, #0
70011fca:	d002      	beq.n	70011fd2 <tcp_split_unsent_seg+0x26a>
    pbuf_free(p);
70011fcc:	69b8      	ldr	r0, [r7, #24]
70011fce:	f7fb fc33 	bl	7000d838 <pbuf_free>
  }

  return ERR_MEM;
70011fd2:	f04f 33ff 	mov.w	r3, #4294967295
}
70011fd6:	4618      	mov	r0, r3
70011fd8:	3724      	adds	r7, #36	@ 0x24
70011fda:	46bd      	mov	sp, r7
70011fdc:	bd90      	pop	{r4, r7, pc}
70011fde:	bf00      	nop
70011fe0:	70016684 	.word	0x70016684
70011fe4:	700169f8 	.word	0x700169f8
70011fe8:	70016704 	.word	0x70016704
70011fec:	70016a1c 	.word	0x70016a1c
70011ff0:	70016a40 	.word	0x70016a40
70011ff4:	70016a50 	.word	0x70016a50
70011ff8:	70016a60 	.word	0x70016a60

70011ffc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
70011ffc:	b590      	push	{r4, r7, lr}
70011ffe:	b085      	sub	sp, #20
70012000:	af00      	add	r7, sp, #0
70012002:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
70012004:	687b      	ldr	r3, [r7, #4]
70012006:	2b00      	cmp	r3, #0
70012008:	d106      	bne.n	70012018 <tcp_send_fin+0x1c>
7001200a:	4b21      	ldr	r3, [pc, #132]	@ (70012090 <tcp_send_fin+0x94>)
7001200c:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
70012010:	4920      	ldr	r1, [pc, #128]	@ (70012094 <tcp_send_fin+0x98>)
70012012:	4821      	ldr	r0, [pc, #132]	@ (70012098 <tcp_send_fin+0x9c>)
70012014:	f001 fe7c 	bl	70013d10 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
70012018:	687b      	ldr	r3, [r7, #4]
7001201a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7001201c:	2b00      	cmp	r3, #0
7001201e:	d02e      	beq.n	7001207e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
70012020:	687b      	ldr	r3, [r7, #4]
70012022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70012024:	60fb      	str	r3, [r7, #12]
70012026:	e002      	b.n	7001202e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
70012028:	68fb      	ldr	r3, [r7, #12]
7001202a:	681b      	ldr	r3, [r3, #0]
7001202c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
7001202e:	68fb      	ldr	r3, [r7, #12]
70012030:	681b      	ldr	r3, [r3, #0]
70012032:	2b00      	cmp	r3, #0
70012034:	d1f8      	bne.n	70012028 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
70012036:	68fb      	ldr	r3, [r7, #12]
70012038:	68db      	ldr	r3, [r3, #12]
7001203a:	899b      	ldrh	r3, [r3, #12]
7001203c:	b29b      	uxth	r3, r3
7001203e:	4618      	mov	r0, r3
70012040:	f7f7 fcbe 	bl	700099c0 <lwip_htons>
70012044:	4603      	mov	r3, r0
70012046:	b2db      	uxtb	r3, r3
70012048:	f003 0307 	and.w	r3, r3, #7
7001204c:	2b00      	cmp	r3, #0
7001204e:	d116      	bne.n	7001207e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
70012050:	68fb      	ldr	r3, [r7, #12]
70012052:	68db      	ldr	r3, [r3, #12]
70012054:	899b      	ldrh	r3, [r3, #12]
70012056:	b29c      	uxth	r4, r3
70012058:	2001      	movs	r0, #1
7001205a:	f7f7 fcb1 	bl	700099c0 <lwip_htons>
7001205e:	4603      	mov	r3, r0
70012060:	461a      	mov	r2, r3
70012062:	68fb      	ldr	r3, [r7, #12]
70012064:	68db      	ldr	r3, [r3, #12]
70012066:	4322      	orrs	r2, r4
70012068:	b292      	uxth	r2, r2
7001206a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
7001206c:	687b      	ldr	r3, [r7, #4]
7001206e:	8b5b      	ldrh	r3, [r3, #26]
70012070:	f043 0320 	orr.w	r3, r3, #32
70012074:	b29a      	uxth	r2, r3
70012076:	687b      	ldr	r3, [r7, #4]
70012078:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
7001207a:	2300      	movs	r3, #0
7001207c:	e004      	b.n	70012088 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
7001207e:	2101      	movs	r1, #1
70012080:	6878      	ldr	r0, [r7, #4]
70012082:	f000 f80b 	bl	7001209c <tcp_enqueue_flags>
70012086:	4603      	mov	r3, r0
}
70012088:	4618      	mov	r0, r3
7001208a:	3714      	adds	r7, #20
7001208c:	46bd      	mov	sp, r7
7001208e:	bd90      	pop	{r4, r7, pc}
70012090:	70016684 	.word	0x70016684
70012094:	70016a6c 	.word	0x70016a6c
70012098:	70016704 	.word	0x70016704

7001209c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
7001209c:	b580      	push	{r7, lr}
7001209e:	b08a      	sub	sp, #40	@ 0x28
700120a0:	af02      	add	r7, sp, #8
700120a2:	6078      	str	r0, [r7, #4]
700120a4:	460b      	mov	r3, r1
700120a6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
700120a8:	2300      	movs	r3, #0
700120aa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
700120ac:	2300      	movs	r3, #0
700120ae:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
700120b0:	78fb      	ldrb	r3, [r7, #3]
700120b2:	f003 0303 	and.w	r3, r3, #3
700120b6:	2b00      	cmp	r3, #0
700120b8:	d106      	bne.n	700120c8 <tcp_enqueue_flags+0x2c>
700120ba:	4b67      	ldr	r3, [pc, #412]	@ (70012258 <tcp_enqueue_flags+0x1bc>)
700120bc:	f240 4212 	movw	r2, #1042	@ 0x412
700120c0:	4966      	ldr	r1, [pc, #408]	@ (7001225c <tcp_enqueue_flags+0x1c0>)
700120c2:	4867      	ldr	r0, [pc, #412]	@ (70012260 <tcp_enqueue_flags+0x1c4>)
700120c4:	f001 fe24 	bl	70013d10 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
700120c8:	687b      	ldr	r3, [r7, #4]
700120ca:	2b00      	cmp	r3, #0
700120cc:	d106      	bne.n	700120dc <tcp_enqueue_flags+0x40>
700120ce:	4b62      	ldr	r3, [pc, #392]	@ (70012258 <tcp_enqueue_flags+0x1bc>)
700120d0:	f240 4214 	movw	r2, #1044	@ 0x414
700120d4:	4963      	ldr	r1, [pc, #396]	@ (70012264 <tcp_enqueue_flags+0x1c8>)
700120d6:	4862      	ldr	r0, [pc, #392]	@ (70012260 <tcp_enqueue_flags+0x1c4>)
700120d8:	f001 fe1a 	bl	70013d10 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
700120dc:	78fb      	ldrb	r3, [r7, #3]
700120de:	f003 0302 	and.w	r3, r3, #2
700120e2:	2b00      	cmp	r3, #0
700120e4:	d001      	beq.n	700120ea <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
700120e6:	2301      	movs	r3, #1
700120e8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
700120ea:	7ffb      	ldrb	r3, [r7, #31]
700120ec:	009b      	lsls	r3, r3, #2
700120ee:	b2db      	uxtb	r3, r3
700120f0:	f003 0304 	and.w	r3, r3, #4
700120f4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
700120f6:	7dfb      	ldrb	r3, [r7, #23]
700120f8:	b29b      	uxth	r3, r3
700120fa:	f44f 7220 	mov.w	r2, #640	@ 0x280
700120fe:	4619      	mov	r1, r3
70012100:	2036      	movs	r0, #54	@ 0x36
70012102:	f7fb f8bf 	bl	7000d284 <pbuf_alloc>
70012106:	6138      	str	r0, [r7, #16]
70012108:	693b      	ldr	r3, [r7, #16]
7001210a:	2b00      	cmp	r3, #0
7001210c:	d109      	bne.n	70012122 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
7001210e:	687b      	ldr	r3, [r7, #4]
70012110:	8b5b      	ldrh	r3, [r3, #26]
70012112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
70012116:	b29a      	uxth	r2, r3
70012118:	687b      	ldr	r3, [r7, #4]
7001211a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
7001211c:	f04f 33ff 	mov.w	r3, #4294967295
70012120:	e095      	b.n	7001224e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
70012122:	693b      	ldr	r3, [r7, #16]
70012124:	895a      	ldrh	r2, [r3, #10]
70012126:	7dfb      	ldrb	r3, [r7, #23]
70012128:	b29b      	uxth	r3, r3
7001212a:	429a      	cmp	r2, r3
7001212c:	d206      	bcs.n	7001213c <tcp_enqueue_flags+0xa0>
7001212e:	4b4a      	ldr	r3, [pc, #296]	@ (70012258 <tcp_enqueue_flags+0x1bc>)
70012130:	f240 423a 	movw	r2, #1082	@ 0x43a
70012134:	494c      	ldr	r1, [pc, #304]	@ (70012268 <tcp_enqueue_flags+0x1cc>)
70012136:	484a      	ldr	r0, [pc, #296]	@ (70012260 <tcp_enqueue_flags+0x1c4>)
70012138:	f001 fdea 	bl	70013d10 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
7001213c:	687b      	ldr	r3, [r7, #4]
7001213e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
70012140:	78fa      	ldrb	r2, [r7, #3]
70012142:	7ffb      	ldrb	r3, [r7, #31]
70012144:	9300      	str	r3, [sp, #0]
70012146:	460b      	mov	r3, r1
70012148:	6939      	ldr	r1, [r7, #16]
7001214a:	6878      	ldr	r0, [r7, #4]
7001214c:	f7ff fd70 	bl	70011c30 <tcp_create_segment>
70012150:	60f8      	str	r0, [r7, #12]
70012152:	68fb      	ldr	r3, [r7, #12]
70012154:	2b00      	cmp	r3, #0
70012156:	d109      	bne.n	7001216c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
70012158:	687b      	ldr	r3, [r7, #4]
7001215a:	8b5b      	ldrh	r3, [r3, #26]
7001215c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
70012160:	b29a      	uxth	r2, r3
70012162:	687b      	ldr	r3, [r7, #4]
70012164:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
70012166:	f04f 33ff 	mov.w	r3, #4294967295
7001216a:	e070      	b.n	7001224e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
7001216c:	68fb      	ldr	r3, [r7, #12]
7001216e:	68db      	ldr	r3, [r3, #12]
70012170:	f003 0303 	and.w	r3, r3, #3
70012174:	2b00      	cmp	r3, #0
70012176:	d006      	beq.n	70012186 <tcp_enqueue_flags+0xea>
70012178:	4b37      	ldr	r3, [pc, #220]	@ (70012258 <tcp_enqueue_flags+0x1bc>)
7001217a:	f240 4243 	movw	r2, #1091	@ 0x443
7001217e:	493b      	ldr	r1, [pc, #236]	@ (7001226c <tcp_enqueue_flags+0x1d0>)
70012180:	4837      	ldr	r0, [pc, #220]	@ (70012260 <tcp_enqueue_flags+0x1c4>)
70012182:	f001 fdc5 	bl	70013d10 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
70012186:	68fb      	ldr	r3, [r7, #12]
70012188:	891b      	ldrh	r3, [r3, #8]
7001218a:	2b00      	cmp	r3, #0
7001218c:	d006      	beq.n	7001219c <tcp_enqueue_flags+0x100>
7001218e:	4b32      	ldr	r3, [pc, #200]	@ (70012258 <tcp_enqueue_flags+0x1bc>)
70012190:	f240 4244 	movw	r2, #1092	@ 0x444
70012194:	4936      	ldr	r1, [pc, #216]	@ (70012270 <tcp_enqueue_flags+0x1d4>)
70012196:	4832      	ldr	r0, [pc, #200]	@ (70012260 <tcp_enqueue_flags+0x1c4>)
70012198:	f001 fdba 	bl	70013d10 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
7001219c:	687b      	ldr	r3, [r7, #4]
7001219e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
700121a0:	2b00      	cmp	r3, #0
700121a2:	d103      	bne.n	700121ac <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
700121a4:	687b      	ldr	r3, [r7, #4]
700121a6:	68fa      	ldr	r2, [r7, #12]
700121a8:	66da      	str	r2, [r3, #108]	@ 0x6c
700121aa:	e00d      	b.n	700121c8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
700121ac:	687b      	ldr	r3, [r7, #4]
700121ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
700121b0:	61bb      	str	r3, [r7, #24]
700121b2:	e002      	b.n	700121ba <tcp_enqueue_flags+0x11e>
700121b4:	69bb      	ldr	r3, [r7, #24]
700121b6:	681b      	ldr	r3, [r3, #0]
700121b8:	61bb      	str	r3, [r7, #24]
700121ba:	69bb      	ldr	r3, [r7, #24]
700121bc:	681b      	ldr	r3, [r3, #0]
700121be:	2b00      	cmp	r3, #0
700121c0:	d1f8      	bne.n	700121b4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
700121c2:	69bb      	ldr	r3, [r7, #24]
700121c4:	68fa      	ldr	r2, [r7, #12]
700121c6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
700121c8:	687b      	ldr	r3, [r7, #4]
700121ca:	2200      	movs	r2, #0
700121cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
700121d0:	78fb      	ldrb	r3, [r7, #3]
700121d2:	f003 0302 	and.w	r3, r3, #2
700121d6:	2b00      	cmp	r3, #0
700121d8:	d104      	bne.n	700121e4 <tcp_enqueue_flags+0x148>
700121da:	78fb      	ldrb	r3, [r7, #3]
700121dc:	f003 0301 	and.w	r3, r3, #1
700121e0:	2b00      	cmp	r3, #0
700121e2:	d004      	beq.n	700121ee <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
700121e4:	687b      	ldr	r3, [r7, #4]
700121e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
700121e8:	1c5a      	adds	r2, r3, #1
700121ea:	687b      	ldr	r3, [r7, #4]
700121ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
700121ee:	78fb      	ldrb	r3, [r7, #3]
700121f0:	f003 0301 	and.w	r3, r3, #1
700121f4:	2b00      	cmp	r3, #0
700121f6:	d006      	beq.n	70012206 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
700121f8:	687b      	ldr	r3, [r7, #4]
700121fa:	8b5b      	ldrh	r3, [r3, #26]
700121fc:	f043 0320 	orr.w	r3, r3, #32
70012200:	b29a      	uxth	r2, r3
70012202:	687b      	ldr	r3, [r7, #4]
70012204:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
70012206:	68fb      	ldr	r3, [r7, #12]
70012208:	685b      	ldr	r3, [r3, #4]
7001220a:	4618      	mov	r0, r3
7001220c:	f7fb fba2 	bl	7000d954 <pbuf_clen>
70012210:	4603      	mov	r3, r0
70012212:	461a      	mov	r2, r3
70012214:	687b      	ldr	r3, [r7, #4]
70012216:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
7001221a:	4413      	add	r3, r2
7001221c:	b29a      	uxth	r2, r3
7001221e:	687b      	ldr	r3, [r7, #4]
70012220:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
70012224:	687b      	ldr	r3, [r7, #4]
70012226:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
7001222a:	2b00      	cmp	r3, #0
7001222c:	d00e      	beq.n	7001224c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
7001222e:	687b      	ldr	r3, [r7, #4]
70012230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70012232:	2b00      	cmp	r3, #0
70012234:	d10a      	bne.n	7001224c <tcp_enqueue_flags+0x1b0>
70012236:	687b      	ldr	r3, [r7, #4]
70012238:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7001223a:	2b00      	cmp	r3, #0
7001223c:	d106      	bne.n	7001224c <tcp_enqueue_flags+0x1b0>
7001223e:	4b06      	ldr	r3, [pc, #24]	@ (70012258 <tcp_enqueue_flags+0x1bc>)
70012240:	f240 4266 	movw	r2, #1126	@ 0x466
70012244:	490b      	ldr	r1, [pc, #44]	@ (70012274 <tcp_enqueue_flags+0x1d8>)
70012246:	4806      	ldr	r0, [pc, #24]	@ (70012260 <tcp_enqueue_flags+0x1c4>)
70012248:	f001 fd62 	bl	70013d10 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
7001224c:	2300      	movs	r3, #0
}
7001224e:	4618      	mov	r0, r3
70012250:	3720      	adds	r7, #32
70012252:	46bd      	mov	sp, r7
70012254:	bd80      	pop	{r7, pc}
70012256:	bf00      	nop
70012258:	70016684 	.word	0x70016684
7001225c:	70016a88 	.word	0x70016a88
70012260:	70016704 	.word	0x70016704
70012264:	70016ae0 	.word	0x70016ae0
70012268:	70016b00 	.word	0x70016b00
7001226c:	70016b3c 	.word	0x70016b3c
70012270:	70016b54 	.word	0x70016b54
70012274:	70016b80 	.word	0x70016b80

70012278 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
70012278:	b5b0      	push	{r4, r5, r7, lr}
7001227a:	b08a      	sub	sp, #40	@ 0x28
7001227c:	af00      	add	r7, sp, #0
7001227e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
70012280:	687b      	ldr	r3, [r7, #4]
70012282:	2b00      	cmp	r3, #0
70012284:	d106      	bne.n	70012294 <tcp_output+0x1c>
70012286:	4b8a      	ldr	r3, [pc, #552]	@ (700124b0 <tcp_output+0x238>)
70012288:	f240 42e2 	movw	r2, #1250	@ 0x4e2
7001228c:	4989      	ldr	r1, [pc, #548]	@ (700124b4 <tcp_output+0x23c>)
7001228e:	488a      	ldr	r0, [pc, #552]	@ (700124b8 <tcp_output+0x240>)
70012290:	f001 fd3e 	bl	70013d10 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
70012294:	687b      	ldr	r3, [r7, #4]
70012296:	7d1b      	ldrb	r3, [r3, #20]
70012298:	2b01      	cmp	r3, #1
7001229a:	d106      	bne.n	700122aa <tcp_output+0x32>
7001229c:	4b84      	ldr	r3, [pc, #528]	@ (700124b0 <tcp_output+0x238>)
7001229e:	f240 42e4 	movw	r2, #1252	@ 0x4e4
700122a2:	4986      	ldr	r1, [pc, #536]	@ (700124bc <tcp_output+0x244>)
700122a4:	4884      	ldr	r0, [pc, #528]	@ (700124b8 <tcp_output+0x240>)
700122a6:	f001 fd33 	bl	70013d10 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
700122aa:	4b85      	ldr	r3, [pc, #532]	@ (700124c0 <tcp_output+0x248>)
700122ac:	681b      	ldr	r3, [r3, #0]
700122ae:	687a      	ldr	r2, [r7, #4]
700122b0:	429a      	cmp	r2, r3
700122b2:	d101      	bne.n	700122b8 <tcp_output+0x40>
    return ERR_OK;
700122b4:	2300      	movs	r3, #0
700122b6:	e1ce      	b.n	70012656 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
700122b8:	687b      	ldr	r3, [r7, #4]
700122ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
700122be:	687b      	ldr	r3, [r7, #4]
700122c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
700122c4:	4293      	cmp	r3, r2
700122c6:	bf28      	it	cs
700122c8:	4613      	movcs	r3, r2
700122ca:	b29b      	uxth	r3, r3
700122cc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
700122ce:	687b      	ldr	r3, [r7, #4]
700122d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
700122d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
700122d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700122d6:	2b00      	cmp	r3, #0
700122d8:	d10b      	bne.n	700122f2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
700122da:	687b      	ldr	r3, [r7, #4]
700122dc:	8b5b      	ldrh	r3, [r3, #26]
700122de:	f003 0302 	and.w	r3, r3, #2
700122e2:	2b00      	cmp	r3, #0
700122e4:	f000 81aa 	beq.w	7001263c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
700122e8:	6878      	ldr	r0, [r7, #4]
700122ea:	f000 fdcb 	bl	70012e84 <tcp_send_empty_ack>
700122ee:	4603      	mov	r3, r0
700122f0:	e1b1      	b.n	70012656 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
700122f2:	6879      	ldr	r1, [r7, #4]
700122f4:	687b      	ldr	r3, [r7, #4]
700122f6:	3304      	adds	r3, #4
700122f8:	461a      	mov	r2, r3
700122fa:	6878      	ldr	r0, [r7, #4]
700122fc:	f7ff fc7c 	bl	70011bf8 <tcp_route>
70012300:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
70012302:	697b      	ldr	r3, [r7, #20]
70012304:	2b00      	cmp	r3, #0
70012306:	d102      	bne.n	7001230e <tcp_output+0x96>
    return ERR_RTE;
70012308:	f06f 0303 	mvn.w	r3, #3
7001230c:	e1a3      	b.n	70012656 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
7001230e:	687b      	ldr	r3, [r7, #4]
70012310:	2b00      	cmp	r3, #0
70012312:	d003      	beq.n	7001231c <tcp_output+0xa4>
70012314:	687b      	ldr	r3, [r7, #4]
70012316:	681b      	ldr	r3, [r3, #0]
70012318:	2b00      	cmp	r3, #0
7001231a:	d111      	bne.n	70012340 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
7001231c:	697b      	ldr	r3, [r7, #20]
7001231e:	2b00      	cmp	r3, #0
70012320:	d002      	beq.n	70012328 <tcp_output+0xb0>
70012322:	697b      	ldr	r3, [r7, #20]
70012324:	3304      	adds	r3, #4
70012326:	e000      	b.n	7001232a <tcp_output+0xb2>
70012328:	2300      	movs	r3, #0
7001232a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
7001232c:	693b      	ldr	r3, [r7, #16]
7001232e:	2b00      	cmp	r3, #0
70012330:	d102      	bne.n	70012338 <tcp_output+0xc0>
      return ERR_RTE;
70012332:	f06f 0303 	mvn.w	r3, #3
70012336:	e18e      	b.n	70012656 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
70012338:	693b      	ldr	r3, [r7, #16]
7001233a:	681a      	ldr	r2, [r3, #0]
7001233c:	687b      	ldr	r3, [r7, #4]
7001233e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
70012340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70012342:	68db      	ldr	r3, [r3, #12]
70012344:	685b      	ldr	r3, [r3, #4]
70012346:	4618      	mov	r0, r3
70012348:	f7f7 fb4f 	bl	700099ea <lwip_htonl>
7001234c:	4602      	mov	r2, r0
7001234e:	687b      	ldr	r3, [r7, #4]
70012350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70012352:	1ad3      	subs	r3, r2, r3
70012354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70012356:	8912      	ldrh	r2, [r2, #8]
70012358:	4413      	add	r3, r2
7001235a:	69ba      	ldr	r2, [r7, #24]
7001235c:	429a      	cmp	r2, r3
7001235e:	d227      	bcs.n	700123b0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
70012360:	687b      	ldr	r3, [r7, #4]
70012362:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
70012366:	461a      	mov	r2, r3
70012368:	69bb      	ldr	r3, [r7, #24]
7001236a:	4293      	cmp	r3, r2
7001236c:	d114      	bne.n	70012398 <tcp_output+0x120>
7001236e:	687b      	ldr	r3, [r7, #4]
70012370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70012372:	2b00      	cmp	r3, #0
70012374:	d110      	bne.n	70012398 <tcp_output+0x120>
70012376:	687b      	ldr	r3, [r7, #4]
70012378:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
7001237c:	2b00      	cmp	r3, #0
7001237e:	d10b      	bne.n	70012398 <tcp_output+0x120>
      pcb->persist_cnt = 0;
70012380:	687b      	ldr	r3, [r7, #4]
70012382:	2200      	movs	r2, #0
70012384:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
70012388:	687b      	ldr	r3, [r7, #4]
7001238a:	2201      	movs	r2, #1
7001238c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
70012390:	687b      	ldr	r3, [r7, #4]
70012392:	2200      	movs	r2, #0
70012394:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
70012398:	687b      	ldr	r3, [r7, #4]
7001239a:	8b5b      	ldrh	r3, [r3, #26]
7001239c:	f003 0302 	and.w	r3, r3, #2
700123a0:	2b00      	cmp	r3, #0
700123a2:	f000 814d 	beq.w	70012640 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
700123a6:	6878      	ldr	r0, [r7, #4]
700123a8:	f000 fd6c 	bl	70012e84 <tcp_send_empty_ack>
700123ac:	4603      	mov	r3, r0
700123ae:	e152      	b.n	70012656 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
700123b0:	687b      	ldr	r3, [r7, #4]
700123b2:	2200      	movs	r2, #0
700123b4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
700123b8:	687b      	ldr	r3, [r7, #4]
700123ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
700123bc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
700123be:	6a3b      	ldr	r3, [r7, #32]
700123c0:	2b00      	cmp	r3, #0
700123c2:	f000 811c 	beq.w	700125fe <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
700123c6:	e002      	b.n	700123ce <tcp_output+0x156>
700123c8:	6a3b      	ldr	r3, [r7, #32]
700123ca:	681b      	ldr	r3, [r3, #0]
700123cc:	623b      	str	r3, [r7, #32]
700123ce:	6a3b      	ldr	r3, [r7, #32]
700123d0:	681b      	ldr	r3, [r3, #0]
700123d2:	2b00      	cmp	r3, #0
700123d4:	d1f8      	bne.n	700123c8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
700123d6:	e112      	b.n	700125fe <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
700123d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700123da:	68db      	ldr	r3, [r3, #12]
700123dc:	899b      	ldrh	r3, [r3, #12]
700123de:	b29b      	uxth	r3, r3
700123e0:	4618      	mov	r0, r3
700123e2:	f7f7 faed 	bl	700099c0 <lwip_htons>
700123e6:	4603      	mov	r3, r0
700123e8:	b2db      	uxtb	r3, r3
700123ea:	f003 0304 	and.w	r3, r3, #4
700123ee:	2b00      	cmp	r3, #0
700123f0:	d006      	beq.n	70012400 <tcp_output+0x188>
700123f2:	4b2f      	ldr	r3, [pc, #188]	@ (700124b0 <tcp_output+0x238>)
700123f4:	f240 5237 	movw	r2, #1335	@ 0x537
700123f8:	4932      	ldr	r1, [pc, #200]	@ (700124c4 <tcp_output+0x24c>)
700123fa:	482f      	ldr	r0, [pc, #188]	@ (700124b8 <tcp_output+0x240>)
700123fc:	f001 fc88 	bl	70013d10 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
70012400:	687b      	ldr	r3, [r7, #4]
70012402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70012404:	2b00      	cmp	r3, #0
70012406:	d01f      	beq.n	70012448 <tcp_output+0x1d0>
70012408:	687b      	ldr	r3, [r7, #4]
7001240a:	8b5b      	ldrh	r3, [r3, #26]
7001240c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
70012410:	2b00      	cmp	r3, #0
70012412:	d119      	bne.n	70012448 <tcp_output+0x1d0>
70012414:	687b      	ldr	r3, [r7, #4]
70012416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70012418:	2b00      	cmp	r3, #0
7001241a:	d00b      	beq.n	70012434 <tcp_output+0x1bc>
7001241c:	687b      	ldr	r3, [r7, #4]
7001241e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70012420:	681b      	ldr	r3, [r3, #0]
70012422:	2b00      	cmp	r3, #0
70012424:	d110      	bne.n	70012448 <tcp_output+0x1d0>
70012426:	687b      	ldr	r3, [r7, #4]
70012428:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7001242a:	891a      	ldrh	r2, [r3, #8]
7001242c:	687b      	ldr	r3, [r7, #4]
7001242e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70012430:	429a      	cmp	r2, r3
70012432:	d209      	bcs.n	70012448 <tcp_output+0x1d0>
70012434:	687b      	ldr	r3, [r7, #4]
70012436:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
7001243a:	2b00      	cmp	r3, #0
7001243c:	d004      	beq.n	70012448 <tcp_output+0x1d0>
7001243e:	687b      	ldr	r3, [r7, #4]
70012440:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
70012444:	2b08      	cmp	r3, #8
70012446:	d901      	bls.n	7001244c <tcp_output+0x1d4>
70012448:	2301      	movs	r3, #1
7001244a:	e000      	b.n	7001244e <tcp_output+0x1d6>
7001244c:	2300      	movs	r3, #0
7001244e:	2b00      	cmp	r3, #0
70012450:	d106      	bne.n	70012460 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
70012452:	687b      	ldr	r3, [r7, #4]
70012454:	8b5b      	ldrh	r3, [r3, #26]
70012456:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
7001245a:	2b00      	cmp	r3, #0
7001245c:	f000 80e4 	beq.w	70012628 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
70012460:	687b      	ldr	r3, [r7, #4]
70012462:	7d1b      	ldrb	r3, [r3, #20]
70012464:	2b02      	cmp	r3, #2
70012466:	d00d      	beq.n	70012484 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
70012468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7001246a:	68db      	ldr	r3, [r3, #12]
7001246c:	899b      	ldrh	r3, [r3, #12]
7001246e:	b29c      	uxth	r4, r3
70012470:	2010      	movs	r0, #16
70012472:	f7f7 faa5 	bl	700099c0 <lwip_htons>
70012476:	4603      	mov	r3, r0
70012478:	461a      	mov	r2, r3
7001247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7001247c:	68db      	ldr	r3, [r3, #12]
7001247e:	4322      	orrs	r2, r4
70012480:	b292      	uxth	r2, r2
70012482:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
70012484:	697a      	ldr	r2, [r7, #20]
70012486:	6879      	ldr	r1, [r7, #4]
70012488:	6a78      	ldr	r0, [r7, #36]	@ 0x24
7001248a:	f000 f909 	bl	700126a0 <tcp_output_segment>
7001248e:	4603      	mov	r3, r0
70012490:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
70012492:	f997 300f 	ldrsb.w	r3, [r7, #15]
70012496:	2b00      	cmp	r3, #0
70012498:	d016      	beq.n	700124c8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
7001249a:	687b      	ldr	r3, [r7, #4]
7001249c:	8b5b      	ldrh	r3, [r3, #26]
7001249e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
700124a2:	b29a      	uxth	r2, r3
700124a4:	687b      	ldr	r3, [r7, #4]
700124a6:	835a      	strh	r2, [r3, #26]
      return err;
700124a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
700124ac:	e0d3      	b.n	70012656 <tcp_output+0x3de>
700124ae:	bf00      	nop
700124b0:	70016684 	.word	0x70016684
700124b4:	70016ba8 	.word	0x70016ba8
700124b8:	70016704 	.word	0x70016704
700124bc:	70016bc0 	.word	0x70016bc0
700124c0:	240084c4 	.word	0x240084c4
700124c4:	70016be8 	.word	0x70016be8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
700124c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700124ca:	681a      	ldr	r2, [r3, #0]
700124cc:	687b      	ldr	r3, [r7, #4]
700124ce:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
700124d0:	687b      	ldr	r3, [r7, #4]
700124d2:	7d1b      	ldrb	r3, [r3, #20]
700124d4:	2b02      	cmp	r3, #2
700124d6:	d006      	beq.n	700124e6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
700124d8:	687b      	ldr	r3, [r7, #4]
700124da:	8b5b      	ldrh	r3, [r3, #26]
700124dc:	f023 0303 	bic.w	r3, r3, #3
700124e0:	b29a      	uxth	r2, r3
700124e2:	687b      	ldr	r3, [r7, #4]
700124e4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
700124e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700124e8:	68db      	ldr	r3, [r3, #12]
700124ea:	685b      	ldr	r3, [r3, #4]
700124ec:	4618      	mov	r0, r3
700124ee:	f7f7 fa7c 	bl	700099ea <lwip_htonl>
700124f2:	4604      	mov	r4, r0
700124f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700124f6:	891b      	ldrh	r3, [r3, #8]
700124f8:	461d      	mov	r5, r3
700124fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700124fc:	68db      	ldr	r3, [r3, #12]
700124fe:	899b      	ldrh	r3, [r3, #12]
70012500:	b29b      	uxth	r3, r3
70012502:	4618      	mov	r0, r3
70012504:	f7f7 fa5c 	bl	700099c0 <lwip_htons>
70012508:	4603      	mov	r3, r0
7001250a:	b2db      	uxtb	r3, r3
7001250c:	f003 0303 	and.w	r3, r3, #3
70012510:	2b00      	cmp	r3, #0
70012512:	d001      	beq.n	70012518 <tcp_output+0x2a0>
70012514:	2301      	movs	r3, #1
70012516:	e000      	b.n	7001251a <tcp_output+0x2a2>
70012518:	2300      	movs	r3, #0
7001251a:	442b      	add	r3, r5
7001251c:	4423      	add	r3, r4
7001251e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
70012520:	687b      	ldr	r3, [r7, #4]
70012522:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
70012524:	68bb      	ldr	r3, [r7, #8]
70012526:	1ad3      	subs	r3, r2, r3
70012528:	2b00      	cmp	r3, #0
7001252a:	da02      	bge.n	70012532 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
7001252c:	687b      	ldr	r3, [r7, #4]
7001252e:	68ba      	ldr	r2, [r7, #8]
70012530:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
70012532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70012534:	891b      	ldrh	r3, [r3, #8]
70012536:	461c      	mov	r4, r3
70012538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7001253a:	68db      	ldr	r3, [r3, #12]
7001253c:	899b      	ldrh	r3, [r3, #12]
7001253e:	b29b      	uxth	r3, r3
70012540:	4618      	mov	r0, r3
70012542:	f7f7 fa3d 	bl	700099c0 <lwip_htons>
70012546:	4603      	mov	r3, r0
70012548:	b2db      	uxtb	r3, r3
7001254a:	f003 0303 	and.w	r3, r3, #3
7001254e:	2b00      	cmp	r3, #0
70012550:	d001      	beq.n	70012556 <tcp_output+0x2de>
70012552:	2301      	movs	r3, #1
70012554:	e000      	b.n	70012558 <tcp_output+0x2e0>
70012556:	2300      	movs	r3, #0
70012558:	4423      	add	r3, r4
7001255a:	2b00      	cmp	r3, #0
7001255c:	d049      	beq.n	700125f2 <tcp_output+0x37a>
      seg->next = NULL;
7001255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70012560:	2200      	movs	r2, #0
70012562:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
70012564:	687b      	ldr	r3, [r7, #4]
70012566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70012568:	2b00      	cmp	r3, #0
7001256a:	d105      	bne.n	70012578 <tcp_output+0x300>
        pcb->unacked = seg;
7001256c:	687b      	ldr	r3, [r7, #4]
7001256e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70012570:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
70012572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70012574:	623b      	str	r3, [r7, #32]
70012576:	e03f      	b.n	700125f8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
70012578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7001257a:	68db      	ldr	r3, [r3, #12]
7001257c:	685b      	ldr	r3, [r3, #4]
7001257e:	4618      	mov	r0, r3
70012580:	f7f7 fa33 	bl	700099ea <lwip_htonl>
70012584:	4604      	mov	r4, r0
70012586:	6a3b      	ldr	r3, [r7, #32]
70012588:	68db      	ldr	r3, [r3, #12]
7001258a:	685b      	ldr	r3, [r3, #4]
7001258c:	4618      	mov	r0, r3
7001258e:	f7f7 fa2c 	bl	700099ea <lwip_htonl>
70012592:	4603      	mov	r3, r0
70012594:	1ae3      	subs	r3, r4, r3
70012596:	2b00      	cmp	r3, #0
70012598:	da24      	bge.n	700125e4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
7001259a:	687b      	ldr	r3, [r7, #4]
7001259c:	3370      	adds	r3, #112	@ 0x70
7001259e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
700125a0:	e002      	b.n	700125a8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
700125a2:	69fb      	ldr	r3, [r7, #28]
700125a4:	681b      	ldr	r3, [r3, #0]
700125a6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
700125a8:	69fb      	ldr	r3, [r7, #28]
700125aa:	681b      	ldr	r3, [r3, #0]
700125ac:	2b00      	cmp	r3, #0
700125ae:	d011      	beq.n	700125d4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
700125b0:	69fb      	ldr	r3, [r7, #28]
700125b2:	681b      	ldr	r3, [r3, #0]
700125b4:	68db      	ldr	r3, [r3, #12]
700125b6:	685b      	ldr	r3, [r3, #4]
700125b8:	4618      	mov	r0, r3
700125ba:	f7f7 fa16 	bl	700099ea <lwip_htonl>
700125be:	4604      	mov	r4, r0
700125c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700125c2:	68db      	ldr	r3, [r3, #12]
700125c4:	685b      	ldr	r3, [r3, #4]
700125c6:	4618      	mov	r0, r3
700125c8:	f7f7 fa0f 	bl	700099ea <lwip_htonl>
700125cc:	4603      	mov	r3, r0
700125ce:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
700125d0:	2b00      	cmp	r3, #0
700125d2:	dbe6      	blt.n	700125a2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
700125d4:	69fb      	ldr	r3, [r7, #28]
700125d6:	681a      	ldr	r2, [r3, #0]
700125d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700125da:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
700125dc:	69fb      	ldr	r3, [r7, #28]
700125de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
700125e0:	601a      	str	r2, [r3, #0]
700125e2:	e009      	b.n	700125f8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
700125e4:	6a3b      	ldr	r3, [r7, #32]
700125e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
700125e8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
700125ea:	6a3b      	ldr	r3, [r7, #32]
700125ec:	681b      	ldr	r3, [r3, #0]
700125ee:	623b      	str	r3, [r7, #32]
700125f0:	e002      	b.n	700125f8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
700125f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
700125f4:	f7fc fc60 	bl	7000eeb8 <tcp_seg_free>
    }
    seg = pcb->unsent;
700125f8:	687b      	ldr	r3, [r7, #4]
700125fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
700125fc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
700125fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70012600:	2b00      	cmp	r3, #0
70012602:	d012      	beq.n	7001262a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
70012604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70012606:	68db      	ldr	r3, [r3, #12]
70012608:	685b      	ldr	r3, [r3, #4]
7001260a:	4618      	mov	r0, r3
7001260c:	f7f7 f9ed 	bl	700099ea <lwip_htonl>
70012610:	4602      	mov	r2, r0
70012612:	687b      	ldr	r3, [r7, #4]
70012614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70012616:	1ad3      	subs	r3, r2, r3
70012618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
7001261a:	8912      	ldrh	r2, [r2, #8]
7001261c:	4413      	add	r3, r2
  while (seg != NULL &&
7001261e:	69ba      	ldr	r2, [r7, #24]
70012620:	429a      	cmp	r2, r3
70012622:	f4bf aed9 	bcs.w	700123d8 <tcp_output+0x160>
70012626:	e000      	b.n	7001262a <tcp_output+0x3b2>
      break;
70012628:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
7001262a:	687b      	ldr	r3, [r7, #4]
7001262c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7001262e:	2b00      	cmp	r3, #0
70012630:	d108      	bne.n	70012644 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
70012632:	687b      	ldr	r3, [r7, #4]
70012634:	2200      	movs	r2, #0
70012636:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
7001263a:	e004      	b.n	70012646 <tcp_output+0x3ce>
    goto output_done;
7001263c:	bf00      	nop
7001263e:	e002      	b.n	70012646 <tcp_output+0x3ce>
    goto output_done;
70012640:	bf00      	nop
70012642:	e000      	b.n	70012646 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
70012644:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
70012646:	687b      	ldr	r3, [r7, #4]
70012648:	8b5b      	ldrh	r3, [r3, #26]
7001264a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
7001264e:	b29a      	uxth	r2, r3
70012650:	687b      	ldr	r3, [r7, #4]
70012652:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
70012654:	2300      	movs	r3, #0
}
70012656:	4618      	mov	r0, r3
70012658:	3728      	adds	r7, #40	@ 0x28
7001265a:	46bd      	mov	sp, r7
7001265c:	bdb0      	pop	{r4, r5, r7, pc}
7001265e:	bf00      	nop

70012660 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
70012660:	b580      	push	{r7, lr}
70012662:	b082      	sub	sp, #8
70012664:	af00      	add	r7, sp, #0
70012666:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
70012668:	687b      	ldr	r3, [r7, #4]
7001266a:	2b00      	cmp	r3, #0
7001266c:	d106      	bne.n	7001267c <tcp_output_segment_busy+0x1c>
7001266e:	4b09      	ldr	r3, [pc, #36]	@ (70012694 <tcp_output_segment_busy+0x34>)
70012670:	f240 529b 	movw	r2, #1435	@ 0x59b
70012674:	4908      	ldr	r1, [pc, #32]	@ (70012698 <tcp_output_segment_busy+0x38>)
70012676:	4809      	ldr	r0, [pc, #36]	@ (7001269c <tcp_output_segment_busy+0x3c>)
70012678:	f001 fb4a 	bl	70013d10 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
7001267c:	687b      	ldr	r3, [r7, #4]
7001267e:	685b      	ldr	r3, [r3, #4]
70012680:	7b9b      	ldrb	r3, [r3, #14]
70012682:	2b01      	cmp	r3, #1
70012684:	d001      	beq.n	7001268a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
70012686:	2301      	movs	r3, #1
70012688:	e000      	b.n	7001268c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
7001268a:	2300      	movs	r3, #0
}
7001268c:	4618      	mov	r0, r3
7001268e:	3708      	adds	r7, #8
70012690:	46bd      	mov	sp, r7
70012692:	bd80      	pop	{r7, pc}
70012694:	70016684 	.word	0x70016684
70012698:	70016c00 	.word	0x70016c00
7001269c:	70016704 	.word	0x70016704

700126a0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
700126a0:	b5b0      	push	{r4, r5, r7, lr}
700126a2:	b08c      	sub	sp, #48	@ 0x30
700126a4:	af04      	add	r7, sp, #16
700126a6:	60f8      	str	r0, [r7, #12]
700126a8:	60b9      	str	r1, [r7, #8]
700126aa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
700126ac:	68fb      	ldr	r3, [r7, #12]
700126ae:	2b00      	cmp	r3, #0
700126b0:	d106      	bne.n	700126c0 <tcp_output_segment+0x20>
700126b2:	4b64      	ldr	r3, [pc, #400]	@ (70012844 <tcp_output_segment+0x1a4>)
700126b4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
700126b8:	4963      	ldr	r1, [pc, #396]	@ (70012848 <tcp_output_segment+0x1a8>)
700126ba:	4864      	ldr	r0, [pc, #400]	@ (7001284c <tcp_output_segment+0x1ac>)
700126bc:	f001 fb28 	bl	70013d10 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
700126c0:	68bb      	ldr	r3, [r7, #8]
700126c2:	2b00      	cmp	r3, #0
700126c4:	d106      	bne.n	700126d4 <tcp_output_segment+0x34>
700126c6:	4b5f      	ldr	r3, [pc, #380]	@ (70012844 <tcp_output_segment+0x1a4>)
700126c8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
700126cc:	4960      	ldr	r1, [pc, #384]	@ (70012850 <tcp_output_segment+0x1b0>)
700126ce:	485f      	ldr	r0, [pc, #380]	@ (7001284c <tcp_output_segment+0x1ac>)
700126d0:	f001 fb1e 	bl	70013d10 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
700126d4:	687b      	ldr	r3, [r7, #4]
700126d6:	2b00      	cmp	r3, #0
700126d8:	d106      	bne.n	700126e8 <tcp_output_segment+0x48>
700126da:	4b5a      	ldr	r3, [pc, #360]	@ (70012844 <tcp_output_segment+0x1a4>)
700126dc:	f240 52bb 	movw	r2, #1467	@ 0x5bb
700126e0:	495c      	ldr	r1, [pc, #368]	@ (70012854 <tcp_output_segment+0x1b4>)
700126e2:	485a      	ldr	r0, [pc, #360]	@ (7001284c <tcp_output_segment+0x1ac>)
700126e4:	f001 fb14 	bl	70013d10 <iprintf>

  if (tcp_output_segment_busy(seg)) {
700126e8:	68f8      	ldr	r0, [r7, #12]
700126ea:	f7ff ffb9 	bl	70012660 <tcp_output_segment_busy>
700126ee:	4603      	mov	r3, r0
700126f0:	2b00      	cmp	r3, #0
700126f2:	d001      	beq.n	700126f8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
700126f4:	2300      	movs	r3, #0
700126f6:	e0a1      	b.n	7001283c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
700126f8:	68bb      	ldr	r3, [r7, #8]
700126fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
700126fc:	68fb      	ldr	r3, [r7, #12]
700126fe:	68dc      	ldr	r4, [r3, #12]
70012700:	4610      	mov	r0, r2
70012702:	f7f7 f972 	bl	700099ea <lwip_htonl>
70012706:	4603      	mov	r3, r0
70012708:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
7001270a:	68bb      	ldr	r3, [r7, #8]
7001270c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
7001270e:	68fb      	ldr	r3, [r7, #12]
70012710:	68dc      	ldr	r4, [r3, #12]
70012712:	4610      	mov	r0, r2
70012714:	f7f7 f954 	bl	700099c0 <lwip_htons>
70012718:	4603      	mov	r3, r0
7001271a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
7001271c:	68bb      	ldr	r3, [r7, #8]
7001271e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70012720:	68ba      	ldr	r2, [r7, #8]
70012722:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
70012724:	441a      	add	r2, r3
70012726:	68bb      	ldr	r3, [r7, #8]
70012728:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
7001272a:	68fb      	ldr	r3, [r7, #12]
7001272c:	68db      	ldr	r3, [r3, #12]
7001272e:	3314      	adds	r3, #20
70012730:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
70012732:	68fb      	ldr	r3, [r7, #12]
70012734:	7a9b      	ldrb	r3, [r3, #10]
70012736:	f003 0301 	and.w	r3, r3, #1
7001273a:	2b00      	cmp	r3, #0
7001273c:	d015      	beq.n	7001276a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
7001273e:	68bb      	ldr	r3, [r7, #8]
70012740:	3304      	adds	r3, #4
70012742:	461a      	mov	r2, r3
70012744:	6879      	ldr	r1, [r7, #4]
70012746:	f44f 7006 	mov.w	r0, #536	@ 0x218
7001274a:	f7fc fe8f 	bl	7000f46c <tcp_eff_send_mss_netif>
7001274e:	4603      	mov	r3, r0
70012750:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
70012752:	8b7b      	ldrh	r3, [r7, #26]
70012754:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
70012758:	4618      	mov	r0, r3
7001275a:	f7f7 f946 	bl	700099ea <lwip_htonl>
7001275e:	4602      	mov	r2, r0
70012760:	69fb      	ldr	r3, [r7, #28]
70012762:	601a      	str	r2, [r3, #0]
    opts += 1;
70012764:	69fb      	ldr	r3, [r7, #28]
70012766:	3304      	adds	r3, #4
70012768:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
7001276a:	68bb      	ldr	r3, [r7, #8]
7001276c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
70012770:	2b00      	cmp	r3, #0
70012772:	da02      	bge.n	7001277a <tcp_output_segment+0xda>
    pcb->rtime = 0;
70012774:	68bb      	ldr	r3, [r7, #8]
70012776:	2200      	movs	r2, #0
70012778:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
7001277a:	68bb      	ldr	r3, [r7, #8]
7001277c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
7001277e:	2b00      	cmp	r3, #0
70012780:	d10c      	bne.n	7001279c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
70012782:	4b35      	ldr	r3, [pc, #212]	@ (70012858 <tcp_output_segment+0x1b8>)
70012784:	681a      	ldr	r2, [r3, #0]
70012786:	68bb      	ldr	r3, [r7, #8]
70012788:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
7001278a:	68fb      	ldr	r3, [r7, #12]
7001278c:	68db      	ldr	r3, [r3, #12]
7001278e:	685b      	ldr	r3, [r3, #4]
70012790:	4618      	mov	r0, r3
70012792:	f7f7 f92a 	bl	700099ea <lwip_htonl>
70012796:	4602      	mov	r2, r0
70012798:	68bb      	ldr	r3, [r7, #8]
7001279a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
7001279c:	68fb      	ldr	r3, [r7, #12]
7001279e:	68da      	ldr	r2, [r3, #12]
700127a0:	68fb      	ldr	r3, [r7, #12]
700127a2:	685b      	ldr	r3, [r3, #4]
700127a4:	685b      	ldr	r3, [r3, #4]
700127a6:	1ad3      	subs	r3, r2, r3
700127a8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
700127aa:	68fb      	ldr	r3, [r7, #12]
700127ac:	685b      	ldr	r3, [r3, #4]
700127ae:	8959      	ldrh	r1, [r3, #10]
700127b0:	68fb      	ldr	r3, [r7, #12]
700127b2:	685b      	ldr	r3, [r3, #4]
700127b4:	8b3a      	ldrh	r2, [r7, #24]
700127b6:	1a8a      	subs	r2, r1, r2
700127b8:	b292      	uxth	r2, r2
700127ba:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
700127bc:	68fb      	ldr	r3, [r7, #12]
700127be:	685b      	ldr	r3, [r3, #4]
700127c0:	8919      	ldrh	r1, [r3, #8]
700127c2:	68fb      	ldr	r3, [r7, #12]
700127c4:	685b      	ldr	r3, [r3, #4]
700127c6:	8b3a      	ldrh	r2, [r7, #24]
700127c8:	1a8a      	subs	r2, r1, r2
700127ca:	b292      	uxth	r2, r2
700127cc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
700127ce:	68fb      	ldr	r3, [r7, #12]
700127d0:	685b      	ldr	r3, [r3, #4]
700127d2:	68fa      	ldr	r2, [r7, #12]
700127d4:	68d2      	ldr	r2, [r2, #12]
700127d6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
700127d8:	68fb      	ldr	r3, [r7, #12]
700127da:	68db      	ldr	r3, [r3, #12]
700127dc:	2200      	movs	r2, #0
700127de:	741a      	strb	r2, [r3, #16]
700127e0:	2200      	movs	r2, #0
700127e2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
700127e4:	68fb      	ldr	r3, [r7, #12]
700127e6:	68da      	ldr	r2, [r3, #12]
700127e8:	68fb      	ldr	r3, [r7, #12]
700127ea:	7a9b      	ldrb	r3, [r3, #10]
700127ec:	f003 0301 	and.w	r3, r3, #1
700127f0:	2b00      	cmp	r3, #0
700127f2:	d001      	beq.n	700127f8 <tcp_output_segment+0x158>
700127f4:	2318      	movs	r3, #24
700127f6:	e000      	b.n	700127fa <tcp_output_segment+0x15a>
700127f8:	2314      	movs	r3, #20
700127fa:	4413      	add	r3, r2
700127fc:	69fa      	ldr	r2, [r7, #28]
700127fe:	429a      	cmp	r2, r3
70012800:	d006      	beq.n	70012810 <tcp_output_segment+0x170>
70012802:	4b10      	ldr	r3, [pc, #64]	@ (70012844 <tcp_output_segment+0x1a4>)
70012804:	f240 621d 	movw	r2, #1565	@ 0x61d
70012808:	4914      	ldr	r1, [pc, #80]	@ (7001285c <tcp_output_segment+0x1bc>)
7001280a:	4810      	ldr	r0, [pc, #64]	@ (7001284c <tcp_output_segment+0x1ac>)
7001280c:	f001 fa80 	bl	70013d10 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
70012810:	68fb      	ldr	r3, [r7, #12]
70012812:	6858      	ldr	r0, [r3, #4]
70012814:	68b9      	ldr	r1, [r7, #8]
70012816:	68bb      	ldr	r3, [r7, #8]
70012818:	1d1c      	adds	r4, r3, #4
7001281a:	68bb      	ldr	r3, [r7, #8]
7001281c:	7add      	ldrb	r5, [r3, #11]
7001281e:	68bb      	ldr	r3, [r7, #8]
70012820:	7a9b      	ldrb	r3, [r3, #10]
70012822:	687a      	ldr	r2, [r7, #4]
70012824:	9202      	str	r2, [sp, #8]
70012826:	2206      	movs	r2, #6
70012828:	9201      	str	r2, [sp, #4]
7001282a:	9300      	str	r3, [sp, #0]
7001282c:	462b      	mov	r3, r5
7001282e:	4622      	mov	r2, r4
70012830:	f7f8 fd7a 	bl	7000b328 <ip4_output_if>
70012834:	4603      	mov	r3, r0
70012836:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
70012838:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
7001283c:	4618      	mov	r0, r3
7001283e:	3720      	adds	r7, #32
70012840:	46bd      	mov	sp, r7
70012842:	bdb0      	pop	{r4, r5, r7, pc}
70012844:	70016684 	.word	0x70016684
70012848:	70016c28 	.word	0x70016c28
7001284c:	70016704 	.word	0x70016704
70012850:	70016c48 	.word	0x70016c48
70012854:	70016c68 	.word	0x70016c68
70012858:	24008478 	.word	0x24008478
7001285c:	70016c8c 	.word	0x70016c8c

70012860 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
70012860:	b5b0      	push	{r4, r5, r7, lr}
70012862:	b084      	sub	sp, #16
70012864:	af00      	add	r7, sp, #0
70012866:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
70012868:	687b      	ldr	r3, [r7, #4]
7001286a:	2b00      	cmp	r3, #0
7001286c:	d106      	bne.n	7001287c <tcp_rexmit_rto_prepare+0x1c>
7001286e:	4b31      	ldr	r3, [pc, #196]	@ (70012934 <tcp_rexmit_rto_prepare+0xd4>)
70012870:	f240 6264 	movw	r2, #1636	@ 0x664
70012874:	4930      	ldr	r1, [pc, #192]	@ (70012938 <tcp_rexmit_rto_prepare+0xd8>)
70012876:	4831      	ldr	r0, [pc, #196]	@ (7001293c <tcp_rexmit_rto_prepare+0xdc>)
70012878:	f001 fa4a 	bl	70013d10 <iprintf>

  if (pcb->unacked == NULL) {
7001287c:	687b      	ldr	r3, [r7, #4]
7001287e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70012880:	2b00      	cmp	r3, #0
70012882:	d102      	bne.n	7001288a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
70012884:	f06f 0305 	mvn.w	r3, #5
70012888:	e050      	b.n	7001292c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
7001288a:	687b      	ldr	r3, [r7, #4]
7001288c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7001288e:	60fb      	str	r3, [r7, #12]
70012890:	e00b      	b.n	700128aa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
70012892:	68f8      	ldr	r0, [r7, #12]
70012894:	f7ff fee4 	bl	70012660 <tcp_output_segment_busy>
70012898:	4603      	mov	r3, r0
7001289a:	2b00      	cmp	r3, #0
7001289c:	d002      	beq.n	700128a4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
7001289e:	f06f 0305 	mvn.w	r3, #5
700128a2:	e043      	b.n	7001292c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
700128a4:	68fb      	ldr	r3, [r7, #12]
700128a6:	681b      	ldr	r3, [r3, #0]
700128a8:	60fb      	str	r3, [r7, #12]
700128aa:	68fb      	ldr	r3, [r7, #12]
700128ac:	681b      	ldr	r3, [r3, #0]
700128ae:	2b00      	cmp	r3, #0
700128b0:	d1ef      	bne.n	70012892 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
700128b2:	68f8      	ldr	r0, [r7, #12]
700128b4:	f7ff fed4 	bl	70012660 <tcp_output_segment_busy>
700128b8:	4603      	mov	r3, r0
700128ba:	2b00      	cmp	r3, #0
700128bc:	d002      	beq.n	700128c4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
700128be:	f06f 0305 	mvn.w	r3, #5
700128c2:	e033      	b.n	7001292c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
700128c4:	687b      	ldr	r3, [r7, #4]
700128c6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
700128c8:	68fb      	ldr	r3, [r7, #12]
700128ca:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
700128cc:	687b      	ldr	r3, [r7, #4]
700128ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
700128d0:	687b      	ldr	r3, [r7, #4]
700128d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
700128d4:	687b      	ldr	r3, [r7, #4]
700128d6:	2200      	movs	r2, #0
700128d8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
700128da:	687b      	ldr	r3, [r7, #4]
700128dc:	8b5b      	ldrh	r3, [r3, #26]
700128de:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
700128e2:	b29a      	uxth	r2, r3
700128e4:	687b      	ldr	r3, [r7, #4]
700128e6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
700128e8:	68fb      	ldr	r3, [r7, #12]
700128ea:	68db      	ldr	r3, [r3, #12]
700128ec:	685b      	ldr	r3, [r3, #4]
700128ee:	4618      	mov	r0, r3
700128f0:	f7f7 f87b 	bl	700099ea <lwip_htonl>
700128f4:	4604      	mov	r4, r0
700128f6:	68fb      	ldr	r3, [r7, #12]
700128f8:	891b      	ldrh	r3, [r3, #8]
700128fa:	461d      	mov	r5, r3
700128fc:	68fb      	ldr	r3, [r7, #12]
700128fe:	68db      	ldr	r3, [r3, #12]
70012900:	899b      	ldrh	r3, [r3, #12]
70012902:	b29b      	uxth	r3, r3
70012904:	4618      	mov	r0, r3
70012906:	f7f7 f85b 	bl	700099c0 <lwip_htons>
7001290a:	4603      	mov	r3, r0
7001290c:	b2db      	uxtb	r3, r3
7001290e:	f003 0303 	and.w	r3, r3, #3
70012912:	2b00      	cmp	r3, #0
70012914:	d001      	beq.n	7001291a <tcp_rexmit_rto_prepare+0xba>
70012916:	2301      	movs	r3, #1
70012918:	e000      	b.n	7001291c <tcp_rexmit_rto_prepare+0xbc>
7001291a:	2300      	movs	r3, #0
7001291c:	442b      	add	r3, r5
7001291e:	18e2      	adds	r2, r4, r3
70012920:	687b      	ldr	r3, [r7, #4]
70012922:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
70012924:	687b      	ldr	r3, [r7, #4]
70012926:	2200      	movs	r2, #0
70012928:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
7001292a:	2300      	movs	r3, #0
}
7001292c:	4618      	mov	r0, r3
7001292e:	3710      	adds	r7, #16
70012930:	46bd      	mov	sp, r7
70012932:	bdb0      	pop	{r4, r5, r7, pc}
70012934:	70016684 	.word	0x70016684
70012938:	70016ca0 	.word	0x70016ca0
7001293c:	70016704 	.word	0x70016704

70012940 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
70012940:	b580      	push	{r7, lr}
70012942:	b082      	sub	sp, #8
70012944:	af00      	add	r7, sp, #0
70012946:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
70012948:	687b      	ldr	r3, [r7, #4]
7001294a:	2b00      	cmp	r3, #0
7001294c:	d106      	bne.n	7001295c <tcp_rexmit_rto_commit+0x1c>
7001294e:	4b0d      	ldr	r3, [pc, #52]	@ (70012984 <tcp_rexmit_rto_commit+0x44>)
70012950:	f240 6299 	movw	r2, #1689	@ 0x699
70012954:	490c      	ldr	r1, [pc, #48]	@ (70012988 <tcp_rexmit_rto_commit+0x48>)
70012956:	480d      	ldr	r0, [pc, #52]	@ (7001298c <tcp_rexmit_rto_commit+0x4c>)
70012958:	f001 f9da 	bl	70013d10 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
7001295c:	687b      	ldr	r3, [r7, #4]
7001295e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
70012962:	2bff      	cmp	r3, #255	@ 0xff
70012964:	d007      	beq.n	70012976 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
70012966:	687b      	ldr	r3, [r7, #4]
70012968:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
7001296c:	3301      	adds	r3, #1
7001296e:	b2da      	uxtb	r2, r3
70012970:	687b      	ldr	r3, [r7, #4]
70012972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
70012976:	6878      	ldr	r0, [r7, #4]
70012978:	f7ff fc7e 	bl	70012278 <tcp_output>
}
7001297c:	bf00      	nop
7001297e:	3708      	adds	r7, #8
70012980:	46bd      	mov	sp, r7
70012982:	bd80      	pop	{r7, pc}
70012984:	70016684 	.word	0x70016684
70012988:	70016cc4 	.word	0x70016cc4
7001298c:	70016704 	.word	0x70016704

70012990 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
70012990:	b580      	push	{r7, lr}
70012992:	b082      	sub	sp, #8
70012994:	af00      	add	r7, sp, #0
70012996:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
70012998:	687b      	ldr	r3, [r7, #4]
7001299a:	2b00      	cmp	r3, #0
7001299c:	d106      	bne.n	700129ac <tcp_rexmit_rto+0x1c>
7001299e:	4b0a      	ldr	r3, [pc, #40]	@ (700129c8 <tcp_rexmit_rto+0x38>)
700129a0:	f240 62ae 	movw	r2, #1710	@ 0x6ae
700129a4:	4909      	ldr	r1, [pc, #36]	@ (700129cc <tcp_rexmit_rto+0x3c>)
700129a6:	480a      	ldr	r0, [pc, #40]	@ (700129d0 <tcp_rexmit_rto+0x40>)
700129a8:	f001 f9b2 	bl	70013d10 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
700129ac:	6878      	ldr	r0, [r7, #4]
700129ae:	f7ff ff57 	bl	70012860 <tcp_rexmit_rto_prepare>
700129b2:	4603      	mov	r3, r0
700129b4:	2b00      	cmp	r3, #0
700129b6:	d102      	bne.n	700129be <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
700129b8:	6878      	ldr	r0, [r7, #4]
700129ba:	f7ff ffc1 	bl	70012940 <tcp_rexmit_rto_commit>
  }
}
700129be:	bf00      	nop
700129c0:	3708      	adds	r7, #8
700129c2:	46bd      	mov	sp, r7
700129c4:	bd80      	pop	{r7, pc}
700129c6:	bf00      	nop
700129c8:	70016684 	.word	0x70016684
700129cc:	70016ce8 	.word	0x70016ce8
700129d0:	70016704 	.word	0x70016704

700129d4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
700129d4:	b590      	push	{r4, r7, lr}
700129d6:	b085      	sub	sp, #20
700129d8:	af00      	add	r7, sp, #0
700129da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
700129dc:	687b      	ldr	r3, [r7, #4]
700129de:	2b00      	cmp	r3, #0
700129e0:	d106      	bne.n	700129f0 <tcp_rexmit+0x1c>
700129e2:	4b2f      	ldr	r3, [pc, #188]	@ (70012aa0 <tcp_rexmit+0xcc>)
700129e4:	f240 62c2 	movw	r2, #1730	@ 0x6c2
700129e8:	492e      	ldr	r1, [pc, #184]	@ (70012aa4 <tcp_rexmit+0xd0>)
700129ea:	482f      	ldr	r0, [pc, #188]	@ (70012aa8 <tcp_rexmit+0xd4>)
700129ec:	f001 f990 	bl	70013d10 <iprintf>

  if (pcb->unacked == NULL) {
700129f0:	687b      	ldr	r3, [r7, #4]
700129f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
700129f4:	2b00      	cmp	r3, #0
700129f6:	d102      	bne.n	700129fe <tcp_rexmit+0x2a>
    return ERR_VAL;
700129f8:	f06f 0305 	mvn.w	r3, #5
700129fc:	e04c      	b.n	70012a98 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
700129fe:	687b      	ldr	r3, [r7, #4]
70012a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70012a02:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
70012a04:	68b8      	ldr	r0, [r7, #8]
70012a06:	f7ff fe2b 	bl	70012660 <tcp_output_segment_busy>
70012a0a:	4603      	mov	r3, r0
70012a0c:	2b00      	cmp	r3, #0
70012a0e:	d002      	beq.n	70012a16 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
70012a10:	f06f 0305 	mvn.w	r3, #5
70012a14:	e040      	b.n	70012a98 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
70012a16:	68bb      	ldr	r3, [r7, #8]
70012a18:	681a      	ldr	r2, [r3, #0]
70012a1a:	687b      	ldr	r3, [r7, #4]
70012a1c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
70012a1e:	687b      	ldr	r3, [r7, #4]
70012a20:	336c      	adds	r3, #108	@ 0x6c
70012a22:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
70012a24:	e002      	b.n	70012a2c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
70012a26:	68fb      	ldr	r3, [r7, #12]
70012a28:	681b      	ldr	r3, [r3, #0]
70012a2a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
70012a2c:	68fb      	ldr	r3, [r7, #12]
70012a2e:	681b      	ldr	r3, [r3, #0]
70012a30:	2b00      	cmp	r3, #0
70012a32:	d011      	beq.n	70012a58 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
70012a34:	68fb      	ldr	r3, [r7, #12]
70012a36:	681b      	ldr	r3, [r3, #0]
70012a38:	68db      	ldr	r3, [r3, #12]
70012a3a:	685b      	ldr	r3, [r3, #4]
70012a3c:	4618      	mov	r0, r3
70012a3e:	f7f6 ffd4 	bl	700099ea <lwip_htonl>
70012a42:	4604      	mov	r4, r0
70012a44:	68bb      	ldr	r3, [r7, #8]
70012a46:	68db      	ldr	r3, [r3, #12]
70012a48:	685b      	ldr	r3, [r3, #4]
70012a4a:	4618      	mov	r0, r3
70012a4c:	f7f6 ffcd 	bl	700099ea <lwip_htonl>
70012a50:	4603      	mov	r3, r0
70012a52:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
70012a54:	2b00      	cmp	r3, #0
70012a56:	dbe6      	blt.n	70012a26 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
70012a58:	68fb      	ldr	r3, [r7, #12]
70012a5a:	681a      	ldr	r2, [r3, #0]
70012a5c:	68bb      	ldr	r3, [r7, #8]
70012a5e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
70012a60:	68fb      	ldr	r3, [r7, #12]
70012a62:	68ba      	ldr	r2, [r7, #8]
70012a64:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
70012a66:	68bb      	ldr	r3, [r7, #8]
70012a68:	681b      	ldr	r3, [r3, #0]
70012a6a:	2b00      	cmp	r3, #0
70012a6c:	d103      	bne.n	70012a76 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
70012a6e:	687b      	ldr	r3, [r7, #4]
70012a70:	2200      	movs	r2, #0
70012a72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
70012a76:	687b      	ldr	r3, [r7, #4]
70012a78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
70012a7c:	2bff      	cmp	r3, #255	@ 0xff
70012a7e:	d007      	beq.n	70012a90 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
70012a80:	687b      	ldr	r3, [r7, #4]
70012a82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
70012a86:	3301      	adds	r3, #1
70012a88:	b2da      	uxtb	r2, r3
70012a8a:	687b      	ldr	r3, [r7, #4]
70012a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
70012a90:	687b      	ldr	r3, [r7, #4]
70012a92:	2200      	movs	r2, #0
70012a94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
70012a96:	2300      	movs	r3, #0
}
70012a98:	4618      	mov	r0, r3
70012a9a:	3714      	adds	r7, #20
70012a9c:	46bd      	mov	sp, r7
70012a9e:	bd90      	pop	{r4, r7, pc}
70012aa0:	70016684 	.word	0x70016684
70012aa4:	70016d04 	.word	0x70016d04
70012aa8:	70016704 	.word	0x70016704

70012aac <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
70012aac:	b580      	push	{r7, lr}
70012aae:	b082      	sub	sp, #8
70012ab0:	af00      	add	r7, sp, #0
70012ab2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
70012ab4:	687b      	ldr	r3, [r7, #4]
70012ab6:	2b00      	cmp	r3, #0
70012ab8:	d106      	bne.n	70012ac8 <tcp_rexmit_fast+0x1c>
70012aba:	4b2a      	ldr	r3, [pc, #168]	@ (70012b64 <tcp_rexmit_fast+0xb8>)
70012abc:	f240 62fa 	movw	r2, #1786	@ 0x6fa
70012ac0:	4929      	ldr	r1, [pc, #164]	@ (70012b68 <tcp_rexmit_fast+0xbc>)
70012ac2:	482a      	ldr	r0, [pc, #168]	@ (70012b6c <tcp_rexmit_fast+0xc0>)
70012ac4:	f001 f924 	bl	70013d10 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
70012ac8:	687b      	ldr	r3, [r7, #4]
70012aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70012acc:	2b00      	cmp	r3, #0
70012ace:	d045      	beq.n	70012b5c <tcp_rexmit_fast+0xb0>
70012ad0:	687b      	ldr	r3, [r7, #4]
70012ad2:	8b5b      	ldrh	r3, [r3, #26]
70012ad4:	f003 0304 	and.w	r3, r3, #4
70012ad8:	2b00      	cmp	r3, #0
70012ada:	d13f      	bne.n	70012b5c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
70012adc:	6878      	ldr	r0, [r7, #4]
70012ade:	f7ff ff79 	bl	700129d4 <tcp_rexmit>
70012ae2:	4603      	mov	r3, r0
70012ae4:	2b00      	cmp	r3, #0
70012ae6:	d139      	bne.n	70012b5c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
70012ae8:	687b      	ldr	r3, [r7, #4]
70012aea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
70012aee:	687b      	ldr	r3, [r7, #4]
70012af0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
70012af4:	4293      	cmp	r3, r2
70012af6:	bf28      	it	cs
70012af8:	4613      	movcs	r3, r2
70012afa:	b29b      	uxth	r3, r3
70012afc:	2b00      	cmp	r3, #0
70012afe:	da00      	bge.n	70012b02 <tcp_rexmit_fast+0x56>
70012b00:	3301      	adds	r3, #1
70012b02:	105b      	asrs	r3, r3, #1
70012b04:	b29a      	uxth	r2, r3
70012b06:	687b      	ldr	r3, [r7, #4]
70012b08:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
70012b0c:	687b      	ldr	r3, [r7, #4]
70012b0e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
70012b12:	461a      	mov	r2, r3
70012b14:	687b      	ldr	r3, [r7, #4]
70012b16:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70012b18:	005b      	lsls	r3, r3, #1
70012b1a:	429a      	cmp	r2, r3
70012b1c:	d206      	bcs.n	70012b2c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
70012b1e:	687b      	ldr	r3, [r7, #4]
70012b20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70012b22:	005b      	lsls	r3, r3, #1
70012b24:	b29a      	uxth	r2, r3
70012b26:	687b      	ldr	r3, [r7, #4]
70012b28:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
70012b2c:	687b      	ldr	r3, [r7, #4]
70012b2e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
70012b32:	687b      	ldr	r3, [r7, #4]
70012b34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70012b36:	4619      	mov	r1, r3
70012b38:	0049      	lsls	r1, r1, #1
70012b3a:	440b      	add	r3, r1
70012b3c:	b29b      	uxth	r3, r3
70012b3e:	4413      	add	r3, r2
70012b40:	b29a      	uxth	r2, r3
70012b42:	687b      	ldr	r3, [r7, #4]
70012b44:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
70012b48:	687b      	ldr	r3, [r7, #4]
70012b4a:	8b5b      	ldrh	r3, [r3, #26]
70012b4c:	f043 0304 	orr.w	r3, r3, #4
70012b50:	b29a      	uxth	r2, r3
70012b52:	687b      	ldr	r3, [r7, #4]
70012b54:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
70012b56:	687b      	ldr	r3, [r7, #4]
70012b58:	2200      	movs	r2, #0
70012b5a:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
70012b5c:	bf00      	nop
70012b5e:	3708      	adds	r7, #8
70012b60:	46bd      	mov	sp, r7
70012b62:	bd80      	pop	{r7, pc}
70012b64:	70016684 	.word	0x70016684
70012b68:	70016d1c 	.word	0x70016d1c
70012b6c:	70016704 	.word	0x70016704

70012b70 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
70012b70:	b580      	push	{r7, lr}
70012b72:	b086      	sub	sp, #24
70012b74:	af00      	add	r7, sp, #0
70012b76:	60f8      	str	r0, [r7, #12]
70012b78:	607b      	str	r3, [r7, #4]
70012b7a:	460b      	mov	r3, r1
70012b7c:	817b      	strh	r3, [r7, #10]
70012b7e:	4613      	mov	r3, r2
70012b80:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
70012b82:	897a      	ldrh	r2, [r7, #10]
70012b84:	893b      	ldrh	r3, [r7, #8]
70012b86:	4413      	add	r3, r2
70012b88:	b29b      	uxth	r3, r3
70012b8a:	3314      	adds	r3, #20
70012b8c:	b29b      	uxth	r3, r3
70012b8e:	f44f 7220 	mov.w	r2, #640	@ 0x280
70012b92:	4619      	mov	r1, r3
70012b94:	2022      	movs	r0, #34	@ 0x22
70012b96:	f7fa fb75 	bl	7000d284 <pbuf_alloc>
70012b9a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
70012b9c:	697b      	ldr	r3, [r7, #20]
70012b9e:	2b00      	cmp	r3, #0
70012ba0:	d04d      	beq.n	70012c3e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
70012ba2:	897b      	ldrh	r3, [r7, #10]
70012ba4:	3313      	adds	r3, #19
70012ba6:	697a      	ldr	r2, [r7, #20]
70012ba8:	8952      	ldrh	r2, [r2, #10]
70012baa:	4293      	cmp	r3, r2
70012bac:	db06      	blt.n	70012bbc <tcp_output_alloc_header_common+0x4c>
70012bae:	4b26      	ldr	r3, [pc, #152]	@ (70012c48 <tcp_output_alloc_header_common+0xd8>)
70012bb0:	f240 7224 	movw	r2, #1828	@ 0x724
70012bb4:	4925      	ldr	r1, [pc, #148]	@ (70012c4c <tcp_output_alloc_header_common+0xdc>)
70012bb6:	4826      	ldr	r0, [pc, #152]	@ (70012c50 <tcp_output_alloc_header_common+0xe0>)
70012bb8:	f001 f8aa 	bl	70013d10 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
70012bbc:	697b      	ldr	r3, [r7, #20]
70012bbe:	685b      	ldr	r3, [r3, #4]
70012bc0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
70012bc2:	8c3b      	ldrh	r3, [r7, #32]
70012bc4:	4618      	mov	r0, r3
70012bc6:	f7f6 fefb 	bl	700099c0 <lwip_htons>
70012bca:	4603      	mov	r3, r0
70012bcc:	461a      	mov	r2, r3
70012bce:	693b      	ldr	r3, [r7, #16]
70012bd0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
70012bd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
70012bd4:	4618      	mov	r0, r3
70012bd6:	f7f6 fef3 	bl	700099c0 <lwip_htons>
70012bda:	4603      	mov	r3, r0
70012bdc:	461a      	mov	r2, r3
70012bde:	693b      	ldr	r3, [r7, #16]
70012be0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
70012be2:	693b      	ldr	r3, [r7, #16]
70012be4:	687a      	ldr	r2, [r7, #4]
70012be6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
70012be8:	68f8      	ldr	r0, [r7, #12]
70012bea:	f7f6 fefe 	bl	700099ea <lwip_htonl>
70012bee:	4602      	mov	r2, r0
70012bf0:	693b      	ldr	r3, [r7, #16]
70012bf2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
70012bf4:	897b      	ldrh	r3, [r7, #10]
70012bf6:	089b      	lsrs	r3, r3, #2
70012bf8:	b29b      	uxth	r3, r3
70012bfa:	3305      	adds	r3, #5
70012bfc:	b29b      	uxth	r3, r3
70012bfe:	031b      	lsls	r3, r3, #12
70012c00:	b29a      	uxth	r2, r3
70012c02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
70012c06:	b29b      	uxth	r3, r3
70012c08:	4313      	orrs	r3, r2
70012c0a:	b29b      	uxth	r3, r3
70012c0c:	4618      	mov	r0, r3
70012c0e:	f7f6 fed7 	bl	700099c0 <lwip_htons>
70012c12:	4603      	mov	r3, r0
70012c14:	461a      	mov	r2, r3
70012c16:	693b      	ldr	r3, [r7, #16]
70012c18:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
70012c1a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
70012c1c:	4618      	mov	r0, r3
70012c1e:	f7f6 fecf 	bl	700099c0 <lwip_htons>
70012c22:	4603      	mov	r3, r0
70012c24:	461a      	mov	r2, r3
70012c26:	693b      	ldr	r3, [r7, #16]
70012c28:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
70012c2a:	693b      	ldr	r3, [r7, #16]
70012c2c:	2200      	movs	r2, #0
70012c2e:	741a      	strb	r2, [r3, #16]
70012c30:	2200      	movs	r2, #0
70012c32:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
70012c34:	693b      	ldr	r3, [r7, #16]
70012c36:	2200      	movs	r2, #0
70012c38:	749a      	strb	r2, [r3, #18]
70012c3a:	2200      	movs	r2, #0
70012c3c:	74da      	strb	r2, [r3, #19]
  }
  return p;
70012c3e:	697b      	ldr	r3, [r7, #20]
}
70012c40:	4618      	mov	r0, r3
70012c42:	3718      	adds	r7, #24
70012c44:	46bd      	mov	sp, r7
70012c46:	bd80      	pop	{r7, pc}
70012c48:	70016684 	.word	0x70016684
70012c4c:	70016d3c 	.word	0x70016d3c
70012c50:	70016704 	.word	0x70016704

70012c54 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
70012c54:	b5b0      	push	{r4, r5, r7, lr}
70012c56:	b08a      	sub	sp, #40	@ 0x28
70012c58:	af04      	add	r7, sp, #16
70012c5a:	60f8      	str	r0, [r7, #12]
70012c5c:	607b      	str	r3, [r7, #4]
70012c5e:	460b      	mov	r3, r1
70012c60:	817b      	strh	r3, [r7, #10]
70012c62:	4613      	mov	r3, r2
70012c64:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
70012c66:	68fb      	ldr	r3, [r7, #12]
70012c68:	2b00      	cmp	r3, #0
70012c6a:	d106      	bne.n	70012c7a <tcp_output_alloc_header+0x26>
70012c6c:	4b15      	ldr	r3, [pc, #84]	@ (70012cc4 <tcp_output_alloc_header+0x70>)
70012c6e:	f240 7243 	movw	r2, #1859	@ 0x743
70012c72:	4915      	ldr	r1, [pc, #84]	@ (70012cc8 <tcp_output_alloc_header+0x74>)
70012c74:	4815      	ldr	r0, [pc, #84]	@ (70012ccc <tcp_output_alloc_header+0x78>)
70012c76:	f001 f84b 	bl	70013d10 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
70012c7a:	68fb      	ldr	r3, [r7, #12]
70012c7c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
70012c7e:	68fb      	ldr	r3, [r7, #12]
70012c80:	8adb      	ldrh	r3, [r3, #22]
70012c82:	68fa      	ldr	r2, [r7, #12]
70012c84:	8b12      	ldrh	r2, [r2, #24]
70012c86:	68f9      	ldr	r1, [r7, #12]
70012c88:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
70012c8a:	893d      	ldrh	r5, [r7, #8]
70012c8c:	897c      	ldrh	r4, [r7, #10]
70012c8e:	9103      	str	r1, [sp, #12]
70012c90:	2110      	movs	r1, #16
70012c92:	9102      	str	r1, [sp, #8]
70012c94:	9201      	str	r2, [sp, #4]
70012c96:	9300      	str	r3, [sp, #0]
70012c98:	687b      	ldr	r3, [r7, #4]
70012c9a:	462a      	mov	r2, r5
70012c9c:	4621      	mov	r1, r4
70012c9e:	f7ff ff67 	bl	70012b70 <tcp_output_alloc_header_common>
70012ca2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
70012ca4:	697b      	ldr	r3, [r7, #20]
70012ca6:	2b00      	cmp	r3, #0
70012ca8:	d006      	beq.n	70012cb8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
70012caa:	68fb      	ldr	r3, [r7, #12]
70012cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70012cae:	68fa      	ldr	r2, [r7, #12]
70012cb0:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
70012cb2:	441a      	add	r2, r3
70012cb4:	68fb      	ldr	r3, [r7, #12]
70012cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
70012cb8:	697b      	ldr	r3, [r7, #20]
}
70012cba:	4618      	mov	r0, r3
70012cbc:	3718      	adds	r7, #24
70012cbe:	46bd      	mov	sp, r7
70012cc0:	bdb0      	pop	{r4, r5, r7, pc}
70012cc2:	bf00      	nop
70012cc4:	70016684 	.word	0x70016684
70012cc8:	70016d6c 	.word	0x70016d6c
70012ccc:	70016704 	.word	0x70016704

70012cd0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
70012cd0:	b580      	push	{r7, lr}
70012cd2:	b088      	sub	sp, #32
70012cd4:	af00      	add	r7, sp, #0
70012cd6:	60f8      	str	r0, [r7, #12]
70012cd8:	60b9      	str	r1, [r7, #8]
70012cda:	4611      	mov	r1, r2
70012cdc:	461a      	mov	r2, r3
70012cde:	460b      	mov	r3, r1
70012ce0:	71fb      	strb	r3, [r7, #7]
70012ce2:	4613      	mov	r3, r2
70012ce4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
70012ce6:	2300      	movs	r3, #0
70012ce8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
70012cea:	68bb      	ldr	r3, [r7, #8]
70012cec:	2b00      	cmp	r3, #0
70012cee:	d106      	bne.n	70012cfe <tcp_output_fill_options+0x2e>
70012cf0:	4b12      	ldr	r3, [pc, #72]	@ (70012d3c <tcp_output_fill_options+0x6c>)
70012cf2:	f240 7257 	movw	r2, #1879	@ 0x757
70012cf6:	4912      	ldr	r1, [pc, #72]	@ (70012d40 <tcp_output_fill_options+0x70>)
70012cf8:	4812      	ldr	r0, [pc, #72]	@ (70012d44 <tcp_output_fill_options+0x74>)
70012cfa:	f001 f809 	bl	70013d10 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
70012cfe:	68bb      	ldr	r3, [r7, #8]
70012d00:	685b      	ldr	r3, [r3, #4]
70012d02:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
70012d04:	69bb      	ldr	r3, [r7, #24]
70012d06:	3314      	adds	r3, #20
70012d08:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
70012d0a:	8bfb      	ldrh	r3, [r7, #30]
70012d0c:	009b      	lsls	r3, r3, #2
70012d0e:	461a      	mov	r2, r3
70012d10:	79fb      	ldrb	r3, [r7, #7]
70012d12:	009b      	lsls	r3, r3, #2
70012d14:	f003 0304 	and.w	r3, r3, #4
70012d18:	4413      	add	r3, r2
70012d1a:	3314      	adds	r3, #20
70012d1c:	69ba      	ldr	r2, [r7, #24]
70012d1e:	4413      	add	r3, r2
70012d20:	697a      	ldr	r2, [r7, #20]
70012d22:	429a      	cmp	r2, r3
70012d24:	d006      	beq.n	70012d34 <tcp_output_fill_options+0x64>
70012d26:	4b05      	ldr	r3, [pc, #20]	@ (70012d3c <tcp_output_fill_options+0x6c>)
70012d28:	f240 7276 	movw	r2, #1910	@ 0x776
70012d2c:	4906      	ldr	r1, [pc, #24]	@ (70012d48 <tcp_output_fill_options+0x78>)
70012d2e:	4805      	ldr	r0, [pc, #20]	@ (70012d44 <tcp_output_fill_options+0x74>)
70012d30:	f000 ffee 	bl	70013d10 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
70012d34:	bf00      	nop
70012d36:	3720      	adds	r7, #32
70012d38:	46bd      	mov	sp, r7
70012d3a:	bd80      	pop	{r7, pc}
70012d3c:	70016684 	.word	0x70016684
70012d40:	70016d94 	.word	0x70016d94
70012d44:	70016704 	.word	0x70016704
70012d48:	70016c8c 	.word	0x70016c8c

70012d4c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
70012d4c:	b580      	push	{r7, lr}
70012d4e:	b08a      	sub	sp, #40	@ 0x28
70012d50:	af04      	add	r7, sp, #16
70012d52:	60f8      	str	r0, [r7, #12]
70012d54:	60b9      	str	r1, [r7, #8]
70012d56:	607a      	str	r2, [r7, #4]
70012d58:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
70012d5a:	68bb      	ldr	r3, [r7, #8]
70012d5c:	2b00      	cmp	r3, #0
70012d5e:	d106      	bne.n	70012d6e <tcp_output_control_segment+0x22>
70012d60:	4b1c      	ldr	r3, [pc, #112]	@ (70012dd4 <tcp_output_control_segment+0x88>)
70012d62:	f44f 62f1 	mov.w	r2, #1928	@ 0x788
70012d66:	491c      	ldr	r1, [pc, #112]	@ (70012dd8 <tcp_output_control_segment+0x8c>)
70012d68:	481c      	ldr	r0, [pc, #112]	@ (70012ddc <tcp_output_control_segment+0x90>)
70012d6a:	f000 ffd1 	bl	70013d10 <iprintf>

  netif = tcp_route(pcb, src, dst);
70012d6e:	683a      	ldr	r2, [r7, #0]
70012d70:	6879      	ldr	r1, [r7, #4]
70012d72:	68f8      	ldr	r0, [r7, #12]
70012d74:	f7fe ff40 	bl	70011bf8 <tcp_route>
70012d78:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
70012d7a:	693b      	ldr	r3, [r7, #16]
70012d7c:	2b00      	cmp	r3, #0
70012d7e:	d102      	bne.n	70012d86 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
70012d80:	23fc      	movs	r3, #252	@ 0xfc
70012d82:	75fb      	strb	r3, [r7, #23]
70012d84:	e01c      	b.n	70012dc0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
70012d86:	68fb      	ldr	r3, [r7, #12]
70012d88:	2b00      	cmp	r3, #0
70012d8a:	d006      	beq.n	70012d9a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
70012d8c:	68fb      	ldr	r3, [r7, #12]
70012d8e:	7adb      	ldrb	r3, [r3, #11]
70012d90:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
70012d92:	68fb      	ldr	r3, [r7, #12]
70012d94:	7a9b      	ldrb	r3, [r3, #10]
70012d96:	757b      	strb	r3, [r7, #21]
70012d98:	e003      	b.n	70012da2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
70012d9a:	23ff      	movs	r3, #255	@ 0xff
70012d9c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
70012d9e:	2300      	movs	r3, #0
70012da0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
70012da2:	7dba      	ldrb	r2, [r7, #22]
70012da4:	693b      	ldr	r3, [r7, #16]
70012da6:	9302      	str	r3, [sp, #8]
70012da8:	2306      	movs	r3, #6
70012daa:	9301      	str	r3, [sp, #4]
70012dac:	7d7b      	ldrb	r3, [r7, #21]
70012dae:	9300      	str	r3, [sp, #0]
70012db0:	4613      	mov	r3, r2
70012db2:	683a      	ldr	r2, [r7, #0]
70012db4:	6879      	ldr	r1, [r7, #4]
70012db6:	68b8      	ldr	r0, [r7, #8]
70012db8:	f7f8 fab6 	bl	7000b328 <ip4_output_if>
70012dbc:	4603      	mov	r3, r0
70012dbe:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
70012dc0:	68b8      	ldr	r0, [r7, #8]
70012dc2:	f7fa fd39 	bl	7000d838 <pbuf_free>
  return err;
70012dc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
70012dca:	4618      	mov	r0, r3
70012dcc:	3718      	adds	r7, #24
70012dce:	46bd      	mov	sp, r7
70012dd0:	bd80      	pop	{r7, pc}
70012dd2:	bf00      	nop
70012dd4:	70016684 	.word	0x70016684
70012dd8:	70016dbc 	.word	0x70016dbc
70012ddc:	70016704 	.word	0x70016704

70012de0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
70012de0:	b590      	push	{r4, r7, lr}
70012de2:	b08b      	sub	sp, #44	@ 0x2c
70012de4:	af04      	add	r7, sp, #16
70012de6:	60f8      	str	r0, [r7, #12]
70012de8:	60b9      	str	r1, [r7, #8]
70012dea:	607a      	str	r2, [r7, #4]
70012dec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
70012dee:	683b      	ldr	r3, [r7, #0]
70012df0:	2b00      	cmp	r3, #0
70012df2:	d106      	bne.n	70012e02 <tcp_rst+0x22>
70012df4:	4b1f      	ldr	r3, [pc, #124]	@ (70012e74 <tcp_rst+0x94>)
70012df6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
70012dfa:	491f      	ldr	r1, [pc, #124]	@ (70012e78 <tcp_rst+0x98>)
70012dfc:	481f      	ldr	r0, [pc, #124]	@ (70012e7c <tcp_rst+0x9c>)
70012dfe:	f000 ff87 	bl	70013d10 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
70012e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70012e04:	2b00      	cmp	r3, #0
70012e06:	d106      	bne.n	70012e16 <tcp_rst+0x36>
70012e08:	4b1a      	ldr	r3, [pc, #104]	@ (70012e74 <tcp_rst+0x94>)
70012e0a:	f240 72c6 	movw	r2, #1990	@ 0x7c6
70012e0e:	491c      	ldr	r1, [pc, #112]	@ (70012e80 <tcp_rst+0xa0>)
70012e10:	481a      	ldr	r0, [pc, #104]	@ (70012e7c <tcp_rst+0x9c>)
70012e12:	f000 ff7d 	bl	70013d10 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
70012e16:	2300      	movs	r3, #0
70012e18:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
70012e1a:	f246 0308 	movw	r3, #24584	@ 0x6008
70012e1e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
70012e20:	7dfb      	ldrb	r3, [r7, #23]
70012e22:	b29c      	uxth	r4, r3
70012e24:	68b8      	ldr	r0, [r7, #8]
70012e26:	f7f6 fde0 	bl	700099ea <lwip_htonl>
70012e2a:	4602      	mov	r2, r0
70012e2c:	8abb      	ldrh	r3, [r7, #20]
70012e2e:	9303      	str	r3, [sp, #12]
70012e30:	2314      	movs	r3, #20
70012e32:	9302      	str	r3, [sp, #8]
70012e34:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
70012e36:	9301      	str	r3, [sp, #4]
70012e38:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
70012e3a:	9300      	str	r3, [sp, #0]
70012e3c:	4613      	mov	r3, r2
70012e3e:	2200      	movs	r2, #0
70012e40:	4621      	mov	r1, r4
70012e42:	6878      	ldr	r0, [r7, #4]
70012e44:	f7ff fe94 	bl	70012b70 <tcp_output_alloc_header_common>
70012e48:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
70012e4a:	693b      	ldr	r3, [r7, #16]
70012e4c:	2b00      	cmp	r3, #0
70012e4e:	d00c      	beq.n	70012e6a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, 0);
70012e50:	2300      	movs	r3, #0
70012e52:	2200      	movs	r2, #0
70012e54:	6939      	ldr	r1, [r7, #16]
70012e56:	68f8      	ldr	r0, [r7, #12]
70012e58:	f7ff ff3a 	bl	70012cd0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
70012e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70012e5e:	683a      	ldr	r2, [r7, #0]
70012e60:	6939      	ldr	r1, [r7, #16]
70012e62:	68f8      	ldr	r0, [r7, #12]
70012e64:	f7ff ff72 	bl	70012d4c <tcp_output_control_segment>
70012e68:	e000      	b.n	70012e6c <tcp_rst+0x8c>
    return;
70012e6a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
70012e6c:	371c      	adds	r7, #28
70012e6e:	46bd      	mov	sp, r7
70012e70:	bd90      	pop	{r4, r7, pc}
70012e72:	bf00      	nop
70012e74:	70016684 	.word	0x70016684
70012e78:	70016de8 	.word	0x70016de8
70012e7c:	70016704 	.word	0x70016704
70012e80:	70016e04 	.word	0x70016e04

70012e84 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
70012e84:	b590      	push	{r4, r7, lr}
70012e86:	b087      	sub	sp, #28
70012e88:	af00      	add	r7, sp, #0
70012e8a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
70012e8c:	2300      	movs	r3, #0
70012e8e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
70012e90:	2300      	movs	r3, #0
70012e92:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
70012e94:	687b      	ldr	r3, [r7, #4]
70012e96:	2b00      	cmp	r3, #0
70012e98:	d106      	bne.n	70012ea8 <tcp_send_empty_ack+0x24>
70012e9a:	4b28      	ldr	r3, [pc, #160]	@ (70012f3c <tcp_send_empty_ack+0xb8>)
70012e9c:	f240 72eb 	movw	r2, #2027	@ 0x7eb
70012ea0:	4927      	ldr	r1, [pc, #156]	@ (70012f40 <tcp_send_empty_ack+0xbc>)
70012ea2:	4828      	ldr	r0, [pc, #160]	@ (70012f44 <tcp_send_empty_ack+0xc0>)
70012ea4:	f000 ff34 	bl	70013d10 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
70012ea8:	7dfb      	ldrb	r3, [r7, #23]
70012eaa:	009b      	lsls	r3, r3, #2
70012eac:	b2db      	uxtb	r3, r3
70012eae:	f003 0304 	and.w	r3, r3, #4
70012eb2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
70012eb4:	7d7b      	ldrb	r3, [r7, #21]
70012eb6:	b29c      	uxth	r4, r3
70012eb8:	687b      	ldr	r3, [r7, #4]
70012eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70012ebc:	4618      	mov	r0, r3
70012ebe:	f7f6 fd94 	bl	700099ea <lwip_htonl>
70012ec2:	4603      	mov	r3, r0
70012ec4:	2200      	movs	r2, #0
70012ec6:	4621      	mov	r1, r4
70012ec8:	6878      	ldr	r0, [r7, #4]
70012eca:	f7ff fec3 	bl	70012c54 <tcp_output_alloc_header>
70012ece:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
70012ed0:	693b      	ldr	r3, [r7, #16]
70012ed2:	2b00      	cmp	r3, #0
70012ed4:	d109      	bne.n	70012eea <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
70012ed6:	687b      	ldr	r3, [r7, #4]
70012ed8:	8b5b      	ldrh	r3, [r3, #26]
70012eda:	f043 0303 	orr.w	r3, r3, #3
70012ede:	b29a      	uxth	r2, r3
70012ee0:	687b      	ldr	r3, [r7, #4]
70012ee2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
70012ee4:	f06f 0301 	mvn.w	r3, #1
70012ee8:	e023      	b.n	70012f32 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
70012eea:	7dbb      	ldrb	r3, [r7, #22]
70012eec:	7dfa      	ldrb	r2, [r7, #23]
70012eee:	6939      	ldr	r1, [r7, #16]
70012ef0:	6878      	ldr	r0, [r7, #4]
70012ef2:	f7ff feed 	bl	70012cd0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
70012ef6:	687a      	ldr	r2, [r7, #4]
70012ef8:	687b      	ldr	r3, [r7, #4]
70012efa:	3304      	adds	r3, #4
70012efc:	6939      	ldr	r1, [r7, #16]
70012efe:	6878      	ldr	r0, [r7, #4]
70012f00:	f7ff ff24 	bl	70012d4c <tcp_output_control_segment>
70012f04:	4603      	mov	r3, r0
70012f06:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
70012f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
70012f0c:	2b00      	cmp	r3, #0
70012f0e:	d007      	beq.n	70012f20 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
70012f10:	687b      	ldr	r3, [r7, #4]
70012f12:	8b5b      	ldrh	r3, [r3, #26]
70012f14:	f043 0303 	orr.w	r3, r3, #3
70012f18:	b29a      	uxth	r2, r3
70012f1a:	687b      	ldr	r3, [r7, #4]
70012f1c:	835a      	strh	r2, [r3, #26]
70012f1e:	e006      	b.n	70012f2e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
70012f20:	687b      	ldr	r3, [r7, #4]
70012f22:	8b5b      	ldrh	r3, [r3, #26]
70012f24:	f023 0303 	bic.w	r3, r3, #3
70012f28:	b29a      	uxth	r2, r3
70012f2a:	687b      	ldr	r3, [r7, #4]
70012f2c:	835a      	strh	r2, [r3, #26]
  }

  return err;
70012f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
70012f32:	4618      	mov	r0, r3
70012f34:	371c      	adds	r7, #28
70012f36:	46bd      	mov	sp, r7
70012f38:	bd90      	pop	{r4, r7, pc}
70012f3a:	bf00      	nop
70012f3c:	70016684 	.word	0x70016684
70012f40:	70016e20 	.word	0x70016e20
70012f44:	70016704 	.word	0x70016704

70012f48 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
70012f48:	b590      	push	{r4, r7, lr}
70012f4a:	b087      	sub	sp, #28
70012f4c:	af00      	add	r7, sp, #0
70012f4e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
70012f50:	2300      	movs	r3, #0
70012f52:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
70012f54:	687b      	ldr	r3, [r7, #4]
70012f56:	2b00      	cmp	r3, #0
70012f58:	d106      	bne.n	70012f68 <tcp_keepalive+0x20>
70012f5a:	4b18      	ldr	r3, [pc, #96]	@ (70012fbc <tcp_keepalive+0x74>)
70012f5c:	f640 0225 	movw	r2, #2085	@ 0x825
70012f60:	4917      	ldr	r1, [pc, #92]	@ (70012fc0 <tcp_keepalive+0x78>)
70012f62:	4818      	ldr	r0, [pc, #96]	@ (70012fc4 <tcp_keepalive+0x7c>)
70012f64:	f000 fed4 	bl	70013d10 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
70012f68:	7dfb      	ldrb	r3, [r7, #23]
70012f6a:	b29c      	uxth	r4, r3
70012f6c:	687b      	ldr	r3, [r7, #4]
70012f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70012f70:	3b01      	subs	r3, #1
70012f72:	4618      	mov	r0, r3
70012f74:	f7f6 fd39 	bl	700099ea <lwip_htonl>
70012f78:	4603      	mov	r3, r0
70012f7a:	2200      	movs	r2, #0
70012f7c:	4621      	mov	r1, r4
70012f7e:	6878      	ldr	r0, [r7, #4]
70012f80:	f7ff fe68 	bl	70012c54 <tcp_output_alloc_header>
70012f84:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
70012f86:	693b      	ldr	r3, [r7, #16]
70012f88:	2b00      	cmp	r3, #0
70012f8a:	d102      	bne.n	70012f92 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
70012f8c:	f04f 33ff 	mov.w	r3, #4294967295
70012f90:	e010      	b.n	70012fb4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
70012f92:	2300      	movs	r3, #0
70012f94:	2200      	movs	r2, #0
70012f96:	6939      	ldr	r1, [r7, #16]
70012f98:	6878      	ldr	r0, [r7, #4]
70012f9a:	f7ff fe99 	bl	70012cd0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
70012f9e:	687a      	ldr	r2, [r7, #4]
70012fa0:	687b      	ldr	r3, [r7, #4]
70012fa2:	3304      	adds	r3, #4
70012fa4:	6939      	ldr	r1, [r7, #16]
70012fa6:	6878      	ldr	r0, [r7, #4]
70012fa8:	f7ff fed0 	bl	70012d4c <tcp_output_control_segment>
70012fac:	4603      	mov	r3, r0
70012fae:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
70012fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
70012fb4:	4618      	mov	r0, r3
70012fb6:	371c      	adds	r7, #28
70012fb8:	46bd      	mov	sp, r7
70012fba:	bd90      	pop	{r4, r7, pc}
70012fbc:	70016684 	.word	0x70016684
70012fc0:	70016e40 	.word	0x70016e40
70012fc4:	70016704 	.word	0x70016704

70012fc8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
70012fc8:	b590      	push	{r4, r7, lr}
70012fca:	b08b      	sub	sp, #44	@ 0x2c
70012fcc:	af00      	add	r7, sp, #0
70012fce:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
70012fd0:	2300      	movs	r3, #0
70012fd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
70012fd6:	687b      	ldr	r3, [r7, #4]
70012fd8:	2b00      	cmp	r3, #0
70012fda:	d106      	bne.n	70012fea <tcp_zero_window_probe+0x22>
70012fdc:	4b4c      	ldr	r3, [pc, #304]	@ (70013110 <tcp_zero_window_probe+0x148>)
70012fde:	f44f 6205 	mov.w	r2, #2128	@ 0x850
70012fe2:	494c      	ldr	r1, [pc, #304]	@ (70013114 <tcp_zero_window_probe+0x14c>)
70012fe4:	484c      	ldr	r0, [pc, #304]	@ (70013118 <tcp_zero_window_probe+0x150>)
70012fe6:	f000 fe93 	bl	70013d10 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
70012fea:	687b      	ldr	r3, [r7, #4]
70012fec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70012fee:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
70012ff0:	6a3b      	ldr	r3, [r7, #32]
70012ff2:	2b00      	cmp	r3, #0
70012ff4:	d101      	bne.n	70012ffa <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
70012ff6:	2300      	movs	r3, #0
70012ff8:	e085      	b.n	70013106 <tcp_zero_window_probe+0x13e>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
70012ffa:	687b      	ldr	r3, [r7, #4]
70012ffc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
70013000:	2bff      	cmp	r3, #255	@ 0xff
70013002:	d007      	beq.n	70013014 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
70013004:	687b      	ldr	r3, [r7, #4]
70013006:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
7001300a:	3301      	adds	r3, #1
7001300c:	b2da      	uxtb	r2, r3
7001300e:	687b      	ldr	r3, [r7, #4]
70013010:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
70013014:	6a3b      	ldr	r3, [r7, #32]
70013016:	68db      	ldr	r3, [r3, #12]
70013018:	899b      	ldrh	r3, [r3, #12]
7001301a:	b29b      	uxth	r3, r3
7001301c:	4618      	mov	r0, r3
7001301e:	f7f6 fccf 	bl	700099c0 <lwip_htons>
70013022:	4603      	mov	r3, r0
70013024:	b2db      	uxtb	r3, r3
70013026:	f003 0301 	and.w	r3, r3, #1
7001302a:	2b00      	cmp	r3, #0
7001302c:	d005      	beq.n	7001303a <tcp_zero_window_probe+0x72>
7001302e:	6a3b      	ldr	r3, [r7, #32]
70013030:	891b      	ldrh	r3, [r3, #8]
70013032:	2b00      	cmp	r3, #0
70013034:	d101      	bne.n	7001303a <tcp_zero_window_probe+0x72>
70013036:	2301      	movs	r3, #1
70013038:	e000      	b.n	7001303c <tcp_zero_window_probe+0x74>
7001303a:	2300      	movs	r3, #0
7001303c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
7001303e:	7ffb      	ldrb	r3, [r7, #31]
70013040:	2b00      	cmp	r3, #0
70013042:	bf0c      	ite	eq
70013044:	2301      	moveq	r3, #1
70013046:	2300      	movne	r3, #0
70013048:	b2db      	uxtb	r3, r3
7001304a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
7001304c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
70013050:	b299      	uxth	r1, r3
70013052:	6a3b      	ldr	r3, [r7, #32]
70013054:	68db      	ldr	r3, [r3, #12]
70013056:	685b      	ldr	r3, [r3, #4]
70013058:	8bba      	ldrh	r2, [r7, #28]
7001305a:	6878      	ldr	r0, [r7, #4]
7001305c:	f7ff fdfa 	bl	70012c54 <tcp_output_alloc_header>
70013060:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
70013062:	69bb      	ldr	r3, [r7, #24]
70013064:	2b00      	cmp	r3, #0
70013066:	d102      	bne.n	7001306e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
70013068:	f04f 33ff 	mov.w	r3, #4294967295
7001306c:	e04b      	b.n	70013106 <tcp_zero_window_probe+0x13e>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
7001306e:	69bb      	ldr	r3, [r7, #24]
70013070:	685b      	ldr	r3, [r3, #4]
70013072:	617b      	str	r3, [r7, #20]

  if (is_fin) {
70013074:	7ffb      	ldrb	r3, [r7, #31]
70013076:	2b00      	cmp	r3, #0
70013078:	d011      	beq.n	7001309e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
7001307a:	697b      	ldr	r3, [r7, #20]
7001307c:	899b      	ldrh	r3, [r3, #12]
7001307e:	b29b      	uxth	r3, r3
70013080:	b21b      	sxth	r3, r3
70013082:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
70013086:	b21c      	sxth	r4, r3
70013088:	2011      	movs	r0, #17
7001308a:	f7f6 fc99 	bl	700099c0 <lwip_htons>
7001308e:	4603      	mov	r3, r0
70013090:	b21b      	sxth	r3, r3
70013092:	4323      	orrs	r3, r4
70013094:	b21b      	sxth	r3, r3
70013096:	b29a      	uxth	r2, r3
70013098:	697b      	ldr	r3, [r7, #20]
7001309a:	819a      	strh	r2, [r3, #12]
7001309c:	e010      	b.n	700130c0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
7001309e:	69bb      	ldr	r3, [r7, #24]
700130a0:	685b      	ldr	r3, [r3, #4]
700130a2:	3314      	adds	r3, #20
700130a4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
700130a6:	6a3b      	ldr	r3, [r7, #32]
700130a8:	6858      	ldr	r0, [r3, #4]
700130aa:	6a3b      	ldr	r3, [r7, #32]
700130ac:	685b      	ldr	r3, [r3, #4]
700130ae:	891a      	ldrh	r2, [r3, #8]
700130b0:	6a3b      	ldr	r3, [r7, #32]
700130b2:	891b      	ldrh	r3, [r3, #8]
700130b4:	1ad3      	subs	r3, r2, r3
700130b6:	b29b      	uxth	r3, r3
700130b8:	2201      	movs	r2, #1
700130ba:	6939      	ldr	r1, [r7, #16]
700130bc:	f7fa fdc4 	bl	7000dc48 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
700130c0:	6a3b      	ldr	r3, [r7, #32]
700130c2:	68db      	ldr	r3, [r3, #12]
700130c4:	685b      	ldr	r3, [r3, #4]
700130c6:	4618      	mov	r0, r3
700130c8:	f7f6 fc8f 	bl	700099ea <lwip_htonl>
700130cc:	4603      	mov	r3, r0
700130ce:	3301      	adds	r3, #1
700130d0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
700130d2:	687b      	ldr	r3, [r7, #4]
700130d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
700130d6:	68fb      	ldr	r3, [r7, #12]
700130d8:	1ad3      	subs	r3, r2, r3
700130da:	2b00      	cmp	r3, #0
700130dc:	da02      	bge.n	700130e4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
700130de:	687b      	ldr	r3, [r7, #4]
700130e0:	68fa      	ldr	r2, [r7, #12]
700130e2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, 0);
700130e4:	2300      	movs	r3, #0
700130e6:	2200      	movs	r2, #0
700130e8:	69b9      	ldr	r1, [r7, #24]
700130ea:	6878      	ldr	r0, [r7, #4]
700130ec:	f7ff fdf0 	bl	70012cd0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
700130f0:	687a      	ldr	r2, [r7, #4]
700130f2:	687b      	ldr	r3, [r7, #4]
700130f4:	3304      	adds	r3, #4
700130f6:	69b9      	ldr	r1, [r7, #24]
700130f8:	6878      	ldr	r0, [r7, #4]
700130fa:	f7ff fe27 	bl	70012d4c <tcp_output_control_segment>
700130fe:	4603      	mov	r3, r0
70013100:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
70013102:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
70013106:	4618      	mov	r0, r3
70013108:	372c      	adds	r7, #44	@ 0x2c
7001310a:	46bd      	mov	sp, r7
7001310c:	bd90      	pop	{r4, r7, pc}
7001310e:	bf00      	nop
70013110:	70016684 	.word	0x70016684
70013114:	70016e5c 	.word	0x70016e5c
70013118:	70016704 	.word	0x70016704

7001311c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
7001311c:	b580      	push	{r7, lr}
7001311e:	b084      	sub	sp, #16
70013120:	af00      	add	r7, sp, #0
70013122:	6078      	str	r0, [r7, #4]
70013124:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
70013126:	f000 fb01 	bl	7001372c <sys_timeouts_sleeptime>
7001312a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
7001312c:	68fb      	ldr	r3, [r7, #12]
7001312e:	f1b3 3fff 	cmp.w	r3, #4294967295
70013132:	d10b      	bne.n	7001314c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
70013134:	4813      	ldr	r0, [pc, #76]	@ (70013184 <tcpip_timeouts_mbox_fetch+0x68>)
70013136:	f7fa febc 	bl	7000deb2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
7001313a:	2200      	movs	r2, #0
7001313c:	6839      	ldr	r1, [r7, #0]
7001313e:	6878      	ldr	r0, [r7, #4]
70013140:	f7fa fe44 	bl	7000ddcc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
70013144:	480f      	ldr	r0, [pc, #60]	@ (70013184 <tcpip_timeouts_mbox_fetch+0x68>)
70013146:	f7fa fea5 	bl	7000de94 <sys_mutex_lock>
    return;
7001314a:	e018      	b.n	7001317e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
7001314c:	68fb      	ldr	r3, [r7, #12]
7001314e:	2b00      	cmp	r3, #0
70013150:	d102      	bne.n	70013158 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
70013152:	f000 fab1 	bl	700136b8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
70013156:	e7e6      	b.n	70013126 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
70013158:	480a      	ldr	r0, [pc, #40]	@ (70013184 <tcpip_timeouts_mbox_fetch+0x68>)
7001315a:	f7fa feaa 	bl	7000deb2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
7001315e:	68fa      	ldr	r2, [r7, #12]
70013160:	6839      	ldr	r1, [r7, #0]
70013162:	6878      	ldr	r0, [r7, #4]
70013164:	f7fa fe32 	bl	7000ddcc <sys_arch_mbox_fetch>
70013168:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
7001316a:	4806      	ldr	r0, [pc, #24]	@ (70013184 <tcpip_timeouts_mbox_fetch+0x68>)
7001316c:	f7fa fe92 	bl	7000de94 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
70013170:	68bb      	ldr	r3, [r7, #8]
70013172:	f1b3 3fff 	cmp.w	r3, #4294967295
70013176:	d102      	bne.n	7001317e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
70013178:	f000 fa9e 	bl	700136b8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
7001317c:	e7d3      	b.n	70013126 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
7001317e:	3710      	adds	r7, #16
70013180:	46bd      	mov	sp, r7
70013182:	bd80      	pop	{r7, pc}
70013184:	240084d4 	.word	0x240084d4

70013188 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
70013188:	b580      	push	{r7, lr}
7001318a:	b084      	sub	sp, #16
7001318c:	af00      	add	r7, sp, #0
7001318e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
70013190:	4810      	ldr	r0, [pc, #64]	@ (700131d4 <tcpip_thread+0x4c>)
70013192:	f7fa fe7f 	bl	7000de94 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
70013196:	4b10      	ldr	r3, [pc, #64]	@ (700131d8 <tcpip_thread+0x50>)
70013198:	681b      	ldr	r3, [r3, #0]
7001319a:	2b00      	cmp	r3, #0
7001319c:	d005      	beq.n	700131aa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
7001319e:	4b0e      	ldr	r3, [pc, #56]	@ (700131d8 <tcpip_thread+0x50>)
700131a0:	681b      	ldr	r3, [r3, #0]
700131a2:	4a0e      	ldr	r2, [pc, #56]	@ (700131dc <tcpip_thread+0x54>)
700131a4:	6812      	ldr	r2, [r2, #0]
700131a6:	4610      	mov	r0, r2
700131a8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
700131aa:	f107 030c 	add.w	r3, r7, #12
700131ae:	4619      	mov	r1, r3
700131b0:	480b      	ldr	r0, [pc, #44]	@ (700131e0 <tcpip_thread+0x58>)
700131b2:	f7ff ffb3 	bl	7001311c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
700131b6:	68fb      	ldr	r3, [r7, #12]
700131b8:	2b00      	cmp	r3, #0
700131ba:	d106      	bne.n	700131ca <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
700131bc:	4b09      	ldr	r3, [pc, #36]	@ (700131e4 <tcpip_thread+0x5c>)
700131be:	2291      	movs	r2, #145	@ 0x91
700131c0:	4909      	ldr	r1, [pc, #36]	@ (700131e8 <tcpip_thread+0x60>)
700131c2:	480a      	ldr	r0, [pc, #40]	@ (700131ec <tcpip_thread+0x64>)
700131c4:	f000 fda4 	bl	70013d10 <iprintf>
      continue;
700131c8:	e003      	b.n	700131d2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
700131ca:	68fb      	ldr	r3, [r7, #12]
700131cc:	4618      	mov	r0, r3
700131ce:	f000 f80f 	bl	700131f0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
700131d2:	e7ea      	b.n	700131aa <tcpip_thread+0x22>
700131d4:	240084d4 	.word	0x240084d4
700131d8:	240084c8 	.word	0x240084c8
700131dc:	240084cc 	.word	0x240084cc
700131e0:	240084d0 	.word	0x240084d0
700131e4:	70016e80 	.word	0x70016e80
700131e8:	70016ee0 	.word	0x70016ee0
700131ec:	70016f00 	.word	0x70016f00

700131f0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
700131f0:	b580      	push	{r7, lr}
700131f2:	b082      	sub	sp, #8
700131f4:	af00      	add	r7, sp, #0
700131f6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
700131f8:	687b      	ldr	r3, [r7, #4]
700131fa:	781b      	ldrb	r3, [r3, #0]
700131fc:	2b02      	cmp	r3, #2
700131fe:	d026      	beq.n	7001324e <tcpip_thread_handle_msg+0x5e>
70013200:	2b02      	cmp	r3, #2
70013202:	dc2b      	bgt.n	7001325c <tcpip_thread_handle_msg+0x6c>
70013204:	2b00      	cmp	r3, #0
70013206:	d002      	beq.n	7001320e <tcpip_thread_handle_msg+0x1e>
70013208:	2b01      	cmp	r3, #1
7001320a:	d015      	beq.n	70013238 <tcpip_thread_handle_msg+0x48>
7001320c:	e026      	b.n	7001325c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
7001320e:	687b      	ldr	r3, [r7, #4]
70013210:	68db      	ldr	r3, [r3, #12]
70013212:	687a      	ldr	r2, [r7, #4]
70013214:	6850      	ldr	r0, [r2, #4]
70013216:	687a      	ldr	r2, [r7, #4]
70013218:	6892      	ldr	r2, [r2, #8]
7001321a:	4611      	mov	r1, r2
7001321c:	4798      	blx	r3
7001321e:	4603      	mov	r3, r0
70013220:	2b00      	cmp	r3, #0
70013222:	d004      	beq.n	7001322e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
70013224:	687b      	ldr	r3, [r7, #4]
70013226:	685b      	ldr	r3, [r3, #4]
70013228:	4618      	mov	r0, r3
7001322a:	f7fa fb05 	bl	7000d838 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
7001322e:	6879      	ldr	r1, [r7, #4]
70013230:	2009      	movs	r0, #9
70013232:	f7f9 fcbf 	bl	7000cbb4 <memp_free>
      break;
70013236:	e018      	b.n	7001326a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
70013238:	687b      	ldr	r3, [r7, #4]
7001323a:	685b      	ldr	r3, [r3, #4]
7001323c:	687a      	ldr	r2, [r7, #4]
7001323e:	6892      	ldr	r2, [r2, #8]
70013240:	4610      	mov	r0, r2
70013242:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
70013244:	6879      	ldr	r1, [r7, #4]
70013246:	2008      	movs	r0, #8
70013248:	f7f9 fcb4 	bl	7000cbb4 <memp_free>
      break;
7001324c:	e00d      	b.n	7001326a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
7001324e:	687b      	ldr	r3, [r7, #4]
70013250:	685b      	ldr	r3, [r3, #4]
70013252:	687a      	ldr	r2, [r7, #4]
70013254:	6892      	ldr	r2, [r2, #8]
70013256:	4610      	mov	r0, r2
70013258:	4798      	blx	r3
      break;
7001325a:	e006      	b.n	7001326a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
7001325c:	4b05      	ldr	r3, [pc, #20]	@ (70013274 <tcpip_thread_handle_msg+0x84>)
7001325e:	22cf      	movs	r2, #207	@ 0xcf
70013260:	4905      	ldr	r1, [pc, #20]	@ (70013278 <tcpip_thread_handle_msg+0x88>)
70013262:	4806      	ldr	r0, [pc, #24]	@ (7001327c <tcpip_thread_handle_msg+0x8c>)
70013264:	f000 fd54 	bl	70013d10 <iprintf>
      break;
70013268:	bf00      	nop
  }
}
7001326a:	bf00      	nop
7001326c:	3708      	adds	r7, #8
7001326e:	46bd      	mov	sp, r7
70013270:	bd80      	pop	{r7, pc}
70013272:	bf00      	nop
70013274:	70016e80 	.word	0x70016e80
70013278:	70016ee0 	.word	0x70016ee0
7001327c:	70016f00 	.word	0x70016f00

70013280 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
70013280:	b580      	push	{r7, lr}
70013282:	b086      	sub	sp, #24
70013284:	af00      	add	r7, sp, #0
70013286:	60f8      	str	r0, [r7, #12]
70013288:	60b9      	str	r1, [r7, #8]
7001328a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
7001328c:	481a      	ldr	r0, [pc, #104]	@ (700132f8 <tcpip_inpkt+0x78>)
7001328e:	f7fa fdce 	bl	7000de2e <sys_mbox_valid>
70013292:	4603      	mov	r3, r0
70013294:	2b00      	cmp	r3, #0
70013296:	d105      	bne.n	700132a4 <tcpip_inpkt+0x24>
70013298:	4b18      	ldr	r3, [pc, #96]	@ (700132fc <tcpip_inpkt+0x7c>)
7001329a:	22fc      	movs	r2, #252	@ 0xfc
7001329c:	4918      	ldr	r1, [pc, #96]	@ (70013300 <tcpip_inpkt+0x80>)
7001329e:	4819      	ldr	r0, [pc, #100]	@ (70013304 <tcpip_inpkt+0x84>)
700132a0:	f000 fd36 	bl	70013d10 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
700132a4:	2009      	movs	r0, #9
700132a6:	f7f9 fc1b 	bl	7000cae0 <memp_malloc>
700132aa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
700132ac:	697b      	ldr	r3, [r7, #20]
700132ae:	2b00      	cmp	r3, #0
700132b0:	d102      	bne.n	700132b8 <tcpip_inpkt+0x38>
    return ERR_MEM;
700132b2:	f04f 33ff 	mov.w	r3, #4294967295
700132b6:	e01a      	b.n	700132ee <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
700132b8:	697b      	ldr	r3, [r7, #20]
700132ba:	2200      	movs	r2, #0
700132bc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
700132be:	697b      	ldr	r3, [r7, #20]
700132c0:	68fa      	ldr	r2, [r7, #12]
700132c2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
700132c4:	697b      	ldr	r3, [r7, #20]
700132c6:	68ba      	ldr	r2, [r7, #8]
700132c8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
700132ca:	697b      	ldr	r3, [r7, #20]
700132cc:	687a      	ldr	r2, [r7, #4]
700132ce:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
700132d0:	6979      	ldr	r1, [r7, #20]
700132d2:	4809      	ldr	r0, [pc, #36]	@ (700132f8 <tcpip_inpkt+0x78>)
700132d4:	f7fa fd60 	bl	7000dd98 <sys_mbox_trypost>
700132d8:	4603      	mov	r3, r0
700132da:	2b00      	cmp	r3, #0
700132dc:	d006      	beq.n	700132ec <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
700132de:	6979      	ldr	r1, [r7, #20]
700132e0:	2009      	movs	r0, #9
700132e2:	f7f9 fc67 	bl	7000cbb4 <memp_free>
    return ERR_MEM;
700132e6:	f04f 33ff 	mov.w	r3, #4294967295
700132ea:	e000      	b.n	700132ee <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
700132ec:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
700132ee:	4618      	mov	r0, r3
700132f0:	3718      	adds	r7, #24
700132f2:	46bd      	mov	sp, r7
700132f4:	bd80      	pop	{r7, pc}
700132f6:	bf00      	nop
700132f8:	240084d0 	.word	0x240084d0
700132fc:	70016e80 	.word	0x70016e80
70013300:	70016f28 	.word	0x70016f28
70013304:	70016f00 	.word	0x70016f00

70013308 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
70013308:	b580      	push	{r7, lr}
7001330a:	b082      	sub	sp, #8
7001330c:	af00      	add	r7, sp, #0
7001330e:	6078      	str	r0, [r7, #4]
70013310:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
70013312:	683b      	ldr	r3, [r7, #0]
70013314:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
70013318:	f003 0318 	and.w	r3, r3, #24
7001331c:	2b00      	cmp	r3, #0
7001331e:	d006      	beq.n	7001332e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
70013320:	4a08      	ldr	r2, [pc, #32]	@ (70013344 <tcpip_input+0x3c>)
70013322:	6839      	ldr	r1, [r7, #0]
70013324:	6878      	ldr	r0, [r7, #4]
70013326:	f7ff ffab 	bl	70013280 <tcpip_inpkt>
7001332a:	4603      	mov	r3, r0
7001332c:	e005      	b.n	7001333a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
7001332e:	4a06      	ldr	r2, [pc, #24]	@ (70013348 <tcpip_input+0x40>)
70013330:	6839      	ldr	r1, [r7, #0]
70013332:	6878      	ldr	r0, [r7, #4]
70013334:	f7ff ffa4 	bl	70013280 <tcpip_inpkt>
70013338:	4603      	mov	r3, r0
}
7001333a:	4618      	mov	r0, r3
7001333c:	3708      	adds	r7, #8
7001333e:	46bd      	mov	sp, r7
70013340:	bd80      	pop	{r7, pc}
70013342:	bf00      	nop
70013344:	7000a8d1 	.word	0x7000a8d1
70013348:	7000b0e1 	.word	0x7000b0e1

7001334c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
7001334c:	b580      	push	{r7, lr}
7001334e:	b084      	sub	sp, #16
70013350:	af00      	add	r7, sp, #0
70013352:	6078      	str	r0, [r7, #4]
70013354:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
70013356:	4819      	ldr	r0, [pc, #100]	@ (700133bc <tcpip_try_callback+0x70>)
70013358:	f7fa fd69 	bl	7000de2e <sys_mbox_valid>
7001335c:	4603      	mov	r3, r0
7001335e:	2b00      	cmp	r3, #0
70013360:	d106      	bne.n	70013370 <tcpip_try_callback+0x24>
70013362:	4b17      	ldr	r3, [pc, #92]	@ (700133c0 <tcpip_try_callback+0x74>)
70013364:	f240 125d 	movw	r2, #349	@ 0x15d
70013368:	4916      	ldr	r1, [pc, #88]	@ (700133c4 <tcpip_try_callback+0x78>)
7001336a:	4817      	ldr	r0, [pc, #92]	@ (700133c8 <tcpip_try_callback+0x7c>)
7001336c:	f000 fcd0 	bl	70013d10 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
70013370:	2008      	movs	r0, #8
70013372:	f7f9 fbb5 	bl	7000cae0 <memp_malloc>
70013376:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
70013378:	68fb      	ldr	r3, [r7, #12]
7001337a:	2b00      	cmp	r3, #0
7001337c:	d102      	bne.n	70013384 <tcpip_try_callback+0x38>
    return ERR_MEM;
7001337e:	f04f 33ff 	mov.w	r3, #4294967295
70013382:	e017      	b.n	700133b4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
70013384:	68fb      	ldr	r3, [r7, #12]
70013386:	2201      	movs	r2, #1
70013388:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
7001338a:	68fb      	ldr	r3, [r7, #12]
7001338c:	687a      	ldr	r2, [r7, #4]
7001338e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
70013390:	68fb      	ldr	r3, [r7, #12]
70013392:	683a      	ldr	r2, [r7, #0]
70013394:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
70013396:	68f9      	ldr	r1, [r7, #12]
70013398:	4808      	ldr	r0, [pc, #32]	@ (700133bc <tcpip_try_callback+0x70>)
7001339a:	f7fa fcfd 	bl	7000dd98 <sys_mbox_trypost>
7001339e:	4603      	mov	r3, r0
700133a0:	2b00      	cmp	r3, #0
700133a2:	d006      	beq.n	700133b2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
700133a4:	68f9      	ldr	r1, [r7, #12]
700133a6:	2008      	movs	r0, #8
700133a8:	f7f9 fc04 	bl	7000cbb4 <memp_free>
    return ERR_MEM;
700133ac:	f04f 33ff 	mov.w	r3, #4294967295
700133b0:	e000      	b.n	700133b4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
700133b2:	2300      	movs	r3, #0
}
700133b4:	4618      	mov	r0, r3
700133b6:	3710      	adds	r7, #16
700133b8:	46bd      	mov	sp, r7
700133ba:	bd80      	pop	{r7, pc}
700133bc:	240084d0 	.word	0x240084d0
700133c0:	70016e80 	.word	0x70016e80
700133c4:	70016f28 	.word	0x70016f28
700133c8:	70016f00 	.word	0x70016f00

700133cc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
700133cc:	b580      	push	{r7, lr}
700133ce:	b084      	sub	sp, #16
700133d0:	af02      	add	r7, sp, #8
700133d2:	6078      	str	r0, [r7, #4]
700133d4:	6039      	str	r1, [r7, #0]
  lwip_init();
700133d6:	f7f7 fdd1 	bl	7000af7c <lwip_init>

  tcpip_init_done = initfunc;
700133da:	4a17      	ldr	r2, [pc, #92]	@ (70013438 <tcpip_init+0x6c>)
700133dc:	687b      	ldr	r3, [r7, #4]
700133de:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
700133e0:	4a16      	ldr	r2, [pc, #88]	@ (7001343c <tcpip_init+0x70>)
700133e2:	683b      	ldr	r3, [r7, #0]
700133e4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
700133e6:	2106      	movs	r1, #6
700133e8:	4815      	ldr	r0, [pc, #84]	@ (70013440 <tcpip_init+0x74>)
700133ea:	f7fa fcbb 	bl	7000dd64 <sys_mbox_new>
700133ee:	4603      	mov	r3, r0
700133f0:	2b00      	cmp	r3, #0
700133f2:	d006      	beq.n	70013402 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
700133f4:	4b13      	ldr	r3, [pc, #76]	@ (70013444 <tcpip_init+0x78>)
700133f6:	f240 2261 	movw	r2, #609	@ 0x261
700133fa:	4913      	ldr	r1, [pc, #76]	@ (70013448 <tcpip_init+0x7c>)
700133fc:	4813      	ldr	r0, [pc, #76]	@ (7001344c <tcpip_init+0x80>)
700133fe:	f000 fc87 	bl	70013d10 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
70013402:	4813      	ldr	r0, [pc, #76]	@ (70013450 <tcpip_init+0x84>)
70013404:	f7fa fd30 	bl	7000de68 <sys_mutex_new>
70013408:	4603      	mov	r3, r0
7001340a:	2b00      	cmp	r3, #0
7001340c:	d006      	beq.n	7001341c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
7001340e:	4b0d      	ldr	r3, [pc, #52]	@ (70013444 <tcpip_init+0x78>)
70013410:	f240 2265 	movw	r2, #613	@ 0x265
70013414:	490f      	ldr	r1, [pc, #60]	@ (70013454 <tcpip_init+0x88>)
70013416:	480d      	ldr	r0, [pc, #52]	@ (7001344c <tcpip_init+0x80>)
70013418:	f000 fc7a 	bl	70013d10 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
7001341c:	2318      	movs	r3, #24
7001341e:	9300      	str	r3, [sp, #0]
70013420:	f44f 6380 	mov.w	r3, #1024	@ 0x400
70013424:	2200      	movs	r2, #0
70013426:	490c      	ldr	r1, [pc, #48]	@ (70013458 <tcpip_init+0x8c>)
70013428:	480c      	ldr	r0, [pc, #48]	@ (7001345c <tcpip_init+0x90>)
7001342a:	f7fa fd4f 	bl	7000decc <sys_thread_new>
}
7001342e:	bf00      	nop
70013430:	3708      	adds	r7, #8
70013432:	46bd      	mov	sp, r7
70013434:	bd80      	pop	{r7, pc}
70013436:	bf00      	nop
70013438:	240084c8 	.word	0x240084c8
7001343c:	240084cc 	.word	0x240084cc
70013440:	240084d0 	.word	0x240084d0
70013444:	70016e80 	.word	0x70016e80
70013448:	70016f38 	.word	0x70016f38
7001344c:	70016f00 	.word	0x70016f00
70013450:	240084d4 	.word	0x240084d4
70013454:	70016f5c 	.word	0x70016f5c
70013458:	70013189 	.word	0x70013189
7001345c:	70016f80 	.word	0x70016f80

70013460 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
70013460:	b580      	push	{r7, lr}
70013462:	b082      	sub	sp, #8
70013464:	af00      	add	r7, sp, #0
70013466:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
70013468:	f7fa fdb8 	bl	7000dfdc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
7001346c:	4b0a      	ldr	r3, [pc, #40]	@ (70013498 <tcpip_tcp_timer+0x38>)
7001346e:	681b      	ldr	r3, [r3, #0]
70013470:	2b00      	cmp	r3, #0
70013472:	d103      	bne.n	7001347c <tcpip_tcp_timer+0x1c>
70013474:	4b09      	ldr	r3, [pc, #36]	@ (7001349c <tcpip_tcp_timer+0x3c>)
70013476:	681b      	ldr	r3, [r3, #0]
70013478:	2b00      	cmp	r3, #0
7001347a:	d005      	beq.n	70013488 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
7001347c:	2200      	movs	r2, #0
7001347e:	4908      	ldr	r1, [pc, #32]	@ (700134a0 <tcpip_tcp_timer+0x40>)
70013480:	20fa      	movs	r0, #250	@ 0xfa
70013482:	f000 f8f3 	bl	7001366c <sys_timeout>
70013486:	e003      	b.n	70013490 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
70013488:	4b06      	ldr	r3, [pc, #24]	@ (700134a4 <tcpip_tcp_timer+0x44>)
7001348a:	2200      	movs	r2, #0
7001348c:	601a      	str	r2, [r3, #0]
  }
}
7001348e:	bf00      	nop
70013490:	bf00      	nop
70013492:	3708      	adds	r7, #8
70013494:	46bd      	mov	sp, r7
70013496:	bd80      	pop	{r7, pc}
70013498:	24008484 	.word	0x24008484
7001349c:	24008488 	.word	0x24008488
700134a0:	70013461 	.word	0x70013461
700134a4:	240084e0 	.word	0x240084e0

700134a8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
700134a8:	b580      	push	{r7, lr}
700134aa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
700134ac:	4b0a      	ldr	r3, [pc, #40]	@ (700134d8 <tcp_timer_needed+0x30>)
700134ae:	681b      	ldr	r3, [r3, #0]
700134b0:	2b00      	cmp	r3, #0
700134b2:	d10f      	bne.n	700134d4 <tcp_timer_needed+0x2c>
700134b4:	4b09      	ldr	r3, [pc, #36]	@ (700134dc <tcp_timer_needed+0x34>)
700134b6:	681b      	ldr	r3, [r3, #0]
700134b8:	2b00      	cmp	r3, #0
700134ba:	d103      	bne.n	700134c4 <tcp_timer_needed+0x1c>
700134bc:	4b08      	ldr	r3, [pc, #32]	@ (700134e0 <tcp_timer_needed+0x38>)
700134be:	681b      	ldr	r3, [r3, #0]
700134c0:	2b00      	cmp	r3, #0
700134c2:	d007      	beq.n	700134d4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
700134c4:	4b04      	ldr	r3, [pc, #16]	@ (700134d8 <tcp_timer_needed+0x30>)
700134c6:	2201      	movs	r2, #1
700134c8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
700134ca:	2200      	movs	r2, #0
700134cc:	4905      	ldr	r1, [pc, #20]	@ (700134e4 <tcp_timer_needed+0x3c>)
700134ce:	20fa      	movs	r0, #250	@ 0xfa
700134d0:	f000 f8cc 	bl	7001366c <sys_timeout>
  }
}
700134d4:	bf00      	nop
700134d6:	bd80      	pop	{r7, pc}
700134d8:	240084e0 	.word	0x240084e0
700134dc:	24008484 	.word	0x24008484
700134e0:	24008488 	.word	0x24008488
700134e4:	70013461 	.word	0x70013461

700134e8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
700134e8:	b580      	push	{r7, lr}
700134ea:	b086      	sub	sp, #24
700134ec:	af00      	add	r7, sp, #0
700134ee:	60f8      	str	r0, [r7, #12]
700134f0:	60b9      	str	r1, [r7, #8]
700134f2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
700134f4:	200a      	movs	r0, #10
700134f6:	f7f9 faf3 	bl	7000cae0 <memp_malloc>
700134fa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
700134fc:	693b      	ldr	r3, [r7, #16]
700134fe:	2b00      	cmp	r3, #0
70013500:	d109      	bne.n	70013516 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
70013502:	693b      	ldr	r3, [r7, #16]
70013504:	2b00      	cmp	r3, #0
70013506:	d151      	bne.n	700135ac <sys_timeout_abs+0xc4>
70013508:	4b2a      	ldr	r3, [pc, #168]	@ (700135b4 <sys_timeout_abs+0xcc>)
7001350a:	22be      	movs	r2, #190	@ 0xbe
7001350c:	492a      	ldr	r1, [pc, #168]	@ (700135b8 <sys_timeout_abs+0xd0>)
7001350e:	482b      	ldr	r0, [pc, #172]	@ (700135bc <sys_timeout_abs+0xd4>)
70013510:	f000 fbfe 	bl	70013d10 <iprintf>
    return;
70013514:	e04a      	b.n	700135ac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
70013516:	693b      	ldr	r3, [r7, #16]
70013518:	2200      	movs	r2, #0
7001351a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
7001351c:	693b      	ldr	r3, [r7, #16]
7001351e:	68ba      	ldr	r2, [r7, #8]
70013520:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
70013522:	693b      	ldr	r3, [r7, #16]
70013524:	687a      	ldr	r2, [r7, #4]
70013526:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
70013528:	693b      	ldr	r3, [r7, #16]
7001352a:	68fa      	ldr	r2, [r7, #12]
7001352c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
7001352e:	4b24      	ldr	r3, [pc, #144]	@ (700135c0 <sys_timeout_abs+0xd8>)
70013530:	681b      	ldr	r3, [r3, #0]
70013532:	2b00      	cmp	r3, #0
70013534:	d103      	bne.n	7001353e <sys_timeout_abs+0x56>
    next_timeout = timeout;
70013536:	4a22      	ldr	r2, [pc, #136]	@ (700135c0 <sys_timeout_abs+0xd8>)
70013538:	693b      	ldr	r3, [r7, #16]
7001353a:	6013      	str	r3, [r2, #0]
    return;
7001353c:	e037      	b.n	700135ae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
7001353e:	693b      	ldr	r3, [r7, #16]
70013540:	685a      	ldr	r2, [r3, #4]
70013542:	4b1f      	ldr	r3, [pc, #124]	@ (700135c0 <sys_timeout_abs+0xd8>)
70013544:	681b      	ldr	r3, [r3, #0]
70013546:	685b      	ldr	r3, [r3, #4]
70013548:	1ad3      	subs	r3, r2, r3
7001354a:	0fdb      	lsrs	r3, r3, #31
7001354c:	f003 0301 	and.w	r3, r3, #1
70013550:	b2db      	uxtb	r3, r3
70013552:	2b00      	cmp	r3, #0
70013554:	d007      	beq.n	70013566 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
70013556:	4b1a      	ldr	r3, [pc, #104]	@ (700135c0 <sys_timeout_abs+0xd8>)
70013558:	681a      	ldr	r2, [r3, #0]
7001355a:	693b      	ldr	r3, [r7, #16]
7001355c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
7001355e:	4a18      	ldr	r2, [pc, #96]	@ (700135c0 <sys_timeout_abs+0xd8>)
70013560:	693b      	ldr	r3, [r7, #16]
70013562:	6013      	str	r3, [r2, #0]
70013564:	e023      	b.n	700135ae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
70013566:	4b16      	ldr	r3, [pc, #88]	@ (700135c0 <sys_timeout_abs+0xd8>)
70013568:	681b      	ldr	r3, [r3, #0]
7001356a:	617b      	str	r3, [r7, #20]
7001356c:	e01a      	b.n	700135a4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
7001356e:	697b      	ldr	r3, [r7, #20]
70013570:	681b      	ldr	r3, [r3, #0]
70013572:	2b00      	cmp	r3, #0
70013574:	d00b      	beq.n	7001358e <sys_timeout_abs+0xa6>
70013576:	693b      	ldr	r3, [r7, #16]
70013578:	685a      	ldr	r2, [r3, #4]
7001357a:	697b      	ldr	r3, [r7, #20]
7001357c:	681b      	ldr	r3, [r3, #0]
7001357e:	685b      	ldr	r3, [r3, #4]
70013580:	1ad3      	subs	r3, r2, r3
70013582:	0fdb      	lsrs	r3, r3, #31
70013584:	f003 0301 	and.w	r3, r3, #1
70013588:	b2db      	uxtb	r3, r3
7001358a:	2b00      	cmp	r3, #0
7001358c:	d007      	beq.n	7001359e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
7001358e:	697b      	ldr	r3, [r7, #20]
70013590:	681a      	ldr	r2, [r3, #0]
70013592:	693b      	ldr	r3, [r7, #16]
70013594:	601a      	str	r2, [r3, #0]
        t->next = timeout;
70013596:	697b      	ldr	r3, [r7, #20]
70013598:	693a      	ldr	r2, [r7, #16]
7001359a:	601a      	str	r2, [r3, #0]
        break;
7001359c:	e007      	b.n	700135ae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
7001359e:	697b      	ldr	r3, [r7, #20]
700135a0:	681b      	ldr	r3, [r3, #0]
700135a2:	617b      	str	r3, [r7, #20]
700135a4:	697b      	ldr	r3, [r7, #20]
700135a6:	2b00      	cmp	r3, #0
700135a8:	d1e1      	bne.n	7001356e <sys_timeout_abs+0x86>
700135aa:	e000      	b.n	700135ae <sys_timeout_abs+0xc6>
    return;
700135ac:	bf00      	nop
      }
    }
  }
}
700135ae:	3718      	adds	r7, #24
700135b0:	46bd      	mov	sp, r7
700135b2:	bd80      	pop	{r7, pc}
700135b4:	70016f90 	.word	0x70016f90
700135b8:	70016ff4 	.word	0x70016ff4
700135bc:	70017034 	.word	0x70017034
700135c0:	240084d8 	.word	0x240084d8

700135c4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
700135c4:	b580      	push	{r7, lr}
700135c6:	b086      	sub	sp, #24
700135c8:	af00      	add	r7, sp, #0
700135ca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
700135cc:	687b      	ldr	r3, [r7, #4]
700135ce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
700135d0:	697b      	ldr	r3, [r7, #20]
700135d2:	685b      	ldr	r3, [r3, #4]
700135d4:	4798      	blx	r3

  now = sys_now();
700135d6:	f7f1 fded 	bl	700051b4 <sys_now>
700135da:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
700135dc:	697b      	ldr	r3, [r7, #20]
700135de:	681a      	ldr	r2, [r3, #0]
700135e0:	4b0f      	ldr	r3, [pc, #60]	@ (70013620 <lwip_cyclic_timer+0x5c>)
700135e2:	681b      	ldr	r3, [r3, #0]
700135e4:	4413      	add	r3, r2
700135e6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
700135e8:	68fa      	ldr	r2, [r7, #12]
700135ea:	693b      	ldr	r3, [r7, #16]
700135ec:	1ad3      	subs	r3, r2, r3
700135ee:	0fdb      	lsrs	r3, r3, #31
700135f0:	f003 0301 	and.w	r3, r3, #1
700135f4:	b2db      	uxtb	r3, r3
700135f6:	2b00      	cmp	r3, #0
700135f8:	d009      	beq.n	7001360e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
700135fa:	697b      	ldr	r3, [r7, #20]
700135fc:	681a      	ldr	r2, [r3, #0]
700135fe:	693b      	ldr	r3, [r7, #16]
70013600:	4413      	add	r3, r2
70013602:	687a      	ldr	r2, [r7, #4]
70013604:	4907      	ldr	r1, [pc, #28]	@ (70013624 <lwip_cyclic_timer+0x60>)
70013606:	4618      	mov	r0, r3
70013608:	f7ff ff6e 	bl	700134e8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
7001360c:	e004      	b.n	70013618 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
7001360e:	687a      	ldr	r2, [r7, #4]
70013610:	4904      	ldr	r1, [pc, #16]	@ (70013624 <lwip_cyclic_timer+0x60>)
70013612:	68f8      	ldr	r0, [r7, #12]
70013614:	f7ff ff68 	bl	700134e8 <sys_timeout_abs>
}
70013618:	bf00      	nop
7001361a:	3718      	adds	r7, #24
7001361c:	46bd      	mov	sp, r7
7001361e:	bd80      	pop	{r7, pc}
70013620:	240084dc 	.word	0x240084dc
70013624:	700135c5 	.word	0x700135c5

70013628 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
70013628:	b580      	push	{r7, lr}
7001362a:	b082      	sub	sp, #8
7001362c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
7001362e:	2301      	movs	r3, #1
70013630:	607b      	str	r3, [r7, #4]
70013632:	e00e      	b.n	70013652 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
70013634:	4a0b      	ldr	r2, [pc, #44]	@ (70013664 <sys_timeouts_init+0x3c>)
70013636:	687b      	ldr	r3, [r7, #4]
70013638:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
7001363c:	687b      	ldr	r3, [r7, #4]
7001363e:	00db      	lsls	r3, r3, #3
70013640:	4a08      	ldr	r2, [pc, #32]	@ (70013664 <sys_timeouts_init+0x3c>)
70013642:	4413      	add	r3, r2
70013644:	461a      	mov	r2, r3
70013646:	4908      	ldr	r1, [pc, #32]	@ (70013668 <sys_timeouts_init+0x40>)
70013648:	f000 f810 	bl	7001366c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
7001364c:	687b      	ldr	r3, [r7, #4]
7001364e:	3301      	adds	r3, #1
70013650:	607b      	str	r3, [r7, #4]
70013652:	687b      	ldr	r3, [r7, #4]
70013654:	2b02      	cmp	r3, #2
70013656:	d9ed      	bls.n	70013634 <sys_timeouts_init+0xc>
  }
}
70013658:	bf00      	nop
7001365a:	bf00      	nop
7001365c:	3708      	adds	r7, #8
7001365e:	46bd      	mov	sp, r7
70013660:	bd80      	pop	{r7, pc}
70013662:	bf00      	nop
70013664:	70017358 	.word	0x70017358
70013668:	700135c5 	.word	0x700135c5

7001366c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
7001366c:	b580      	push	{r7, lr}
7001366e:	b086      	sub	sp, #24
70013670:	af00      	add	r7, sp, #0
70013672:	60f8      	str	r0, [r7, #12]
70013674:	60b9      	str	r1, [r7, #8]
70013676:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
70013678:	68fb      	ldr	r3, [r7, #12]
7001367a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
7001367e:	d306      	bcc.n	7001368e <sys_timeout+0x22>
70013680:	4b0a      	ldr	r3, [pc, #40]	@ (700136ac <sys_timeout+0x40>)
70013682:	f240 1229 	movw	r2, #297	@ 0x129
70013686:	490a      	ldr	r1, [pc, #40]	@ (700136b0 <sys_timeout+0x44>)
70013688:	480a      	ldr	r0, [pc, #40]	@ (700136b4 <sys_timeout+0x48>)
7001368a:	f000 fb41 	bl	70013d10 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
7001368e:	f7f1 fd91 	bl	700051b4 <sys_now>
70013692:	4602      	mov	r2, r0
70013694:	68fb      	ldr	r3, [r7, #12]
70013696:	4413      	add	r3, r2
70013698:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
7001369a:	687a      	ldr	r2, [r7, #4]
7001369c:	68b9      	ldr	r1, [r7, #8]
7001369e:	6978      	ldr	r0, [r7, #20]
700136a0:	f7ff ff22 	bl	700134e8 <sys_timeout_abs>
#endif
}
700136a4:	bf00      	nop
700136a6:	3718      	adds	r7, #24
700136a8:	46bd      	mov	sp, r7
700136aa:	bd80      	pop	{r7, pc}
700136ac:	70016f90 	.word	0x70016f90
700136b0:	7001705c 	.word	0x7001705c
700136b4:	70017034 	.word	0x70017034

700136b8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
700136b8:	b580      	push	{r7, lr}
700136ba:	b084      	sub	sp, #16
700136bc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
700136be:	f7f1 fd79 	bl	700051b4 <sys_now>
700136c2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
700136c4:	4b17      	ldr	r3, [pc, #92]	@ (70013724 <sys_check_timeouts+0x6c>)
700136c6:	681b      	ldr	r3, [r3, #0]
700136c8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
700136ca:	68bb      	ldr	r3, [r7, #8]
700136cc:	2b00      	cmp	r3, #0
700136ce:	d022      	beq.n	70013716 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
700136d0:	68bb      	ldr	r3, [r7, #8]
700136d2:	685b      	ldr	r3, [r3, #4]
700136d4:	68fa      	ldr	r2, [r7, #12]
700136d6:	1ad3      	subs	r3, r2, r3
700136d8:	0fdb      	lsrs	r3, r3, #31
700136da:	f003 0301 	and.w	r3, r3, #1
700136de:	b2db      	uxtb	r3, r3
700136e0:	2b00      	cmp	r3, #0
700136e2:	d11a      	bne.n	7001371a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
700136e4:	68bb      	ldr	r3, [r7, #8]
700136e6:	681b      	ldr	r3, [r3, #0]
700136e8:	4a0e      	ldr	r2, [pc, #56]	@ (70013724 <sys_check_timeouts+0x6c>)
700136ea:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
700136ec:	68bb      	ldr	r3, [r7, #8]
700136ee:	689b      	ldr	r3, [r3, #8]
700136f0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
700136f2:	68bb      	ldr	r3, [r7, #8]
700136f4:	68db      	ldr	r3, [r3, #12]
700136f6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
700136f8:	68bb      	ldr	r3, [r7, #8]
700136fa:	685b      	ldr	r3, [r3, #4]
700136fc:	4a0a      	ldr	r2, [pc, #40]	@ (70013728 <sys_check_timeouts+0x70>)
700136fe:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
70013700:	68b9      	ldr	r1, [r7, #8]
70013702:	200a      	movs	r0, #10
70013704:	f7f9 fa56 	bl	7000cbb4 <memp_free>
    if (handler != NULL) {
70013708:	687b      	ldr	r3, [r7, #4]
7001370a:	2b00      	cmp	r3, #0
7001370c:	d0da      	beq.n	700136c4 <sys_check_timeouts+0xc>
      handler(arg);
7001370e:	687b      	ldr	r3, [r7, #4]
70013710:	6838      	ldr	r0, [r7, #0]
70013712:	4798      	blx	r3
  do {
70013714:	e7d6      	b.n	700136c4 <sys_check_timeouts+0xc>
      return;
70013716:	bf00      	nop
70013718:	e000      	b.n	7001371c <sys_check_timeouts+0x64>
      return;
7001371a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
7001371c:	3710      	adds	r7, #16
7001371e:	46bd      	mov	sp, r7
70013720:	bd80      	pop	{r7, pc}
70013722:	bf00      	nop
70013724:	240084d8 	.word	0x240084d8
70013728:	240084dc 	.word	0x240084dc

7001372c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
7001372c:	b580      	push	{r7, lr}
7001372e:	b082      	sub	sp, #8
70013730:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
70013732:	4b16      	ldr	r3, [pc, #88]	@ (7001378c <sys_timeouts_sleeptime+0x60>)
70013734:	681b      	ldr	r3, [r3, #0]
70013736:	2b00      	cmp	r3, #0
70013738:	d102      	bne.n	70013740 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
7001373a:	f04f 33ff 	mov.w	r3, #4294967295
7001373e:	e020      	b.n	70013782 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
70013740:	f7f1 fd38 	bl	700051b4 <sys_now>
70013744:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
70013746:	4b11      	ldr	r3, [pc, #68]	@ (7001378c <sys_timeouts_sleeptime+0x60>)
70013748:	681b      	ldr	r3, [r3, #0]
7001374a:	685a      	ldr	r2, [r3, #4]
7001374c:	687b      	ldr	r3, [r7, #4]
7001374e:	1ad3      	subs	r3, r2, r3
70013750:	0fdb      	lsrs	r3, r3, #31
70013752:	f003 0301 	and.w	r3, r3, #1
70013756:	b2db      	uxtb	r3, r3
70013758:	2b00      	cmp	r3, #0
7001375a:	d001      	beq.n	70013760 <sys_timeouts_sleeptime+0x34>
    return 0;
7001375c:	2300      	movs	r3, #0
7001375e:	e010      	b.n	70013782 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
70013760:	4b0a      	ldr	r3, [pc, #40]	@ (7001378c <sys_timeouts_sleeptime+0x60>)
70013762:	681b      	ldr	r3, [r3, #0]
70013764:	685a      	ldr	r2, [r3, #4]
70013766:	687b      	ldr	r3, [r7, #4]
70013768:	1ad3      	subs	r3, r2, r3
7001376a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
7001376c:	683b      	ldr	r3, [r7, #0]
7001376e:	2b00      	cmp	r3, #0
70013770:	da06      	bge.n	70013780 <sys_timeouts_sleeptime+0x54>
70013772:	4b07      	ldr	r3, [pc, #28]	@ (70013790 <sys_timeouts_sleeptime+0x64>)
70013774:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
70013778:	4906      	ldr	r1, [pc, #24]	@ (70013794 <sys_timeouts_sleeptime+0x68>)
7001377a:	4807      	ldr	r0, [pc, #28]	@ (70013798 <sys_timeouts_sleeptime+0x6c>)
7001377c:	f000 fac8 	bl	70013d10 <iprintf>
    return ret;
70013780:	683b      	ldr	r3, [r7, #0]
  }
}
70013782:	4618      	mov	r0, r3
70013784:	3708      	adds	r7, #8
70013786:	46bd      	mov	sp, r7
70013788:	bd80      	pop	{r7, pc}
7001378a:	bf00      	nop
7001378c:	240084d8 	.word	0x240084d8
70013790:	70016f90 	.word	0x70016f90
70013794:	70017094 	.word	0x70017094
70013798:	70017034 	.word	0x70017034

7001379c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
7001379c:	b580      	push	{r7, lr}
7001379e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
700137a0:	f000 f9b6 	bl	70013b10 <rand>
700137a4:	4603      	mov	r3, r0
700137a6:	b29b      	uxth	r3, r3
700137a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
700137ac:	b29b      	uxth	r3, r3
700137ae:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
700137b2:	b29a      	uxth	r2, r3
700137b4:	4b01      	ldr	r3, [pc, #4]	@ (700137bc <udp_init+0x20>)
700137b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
700137b8:	bf00      	nop
700137ba:	bd80      	pop	{r7, pc}
700137bc:	24000030 	.word	0x24000030

700137c0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
700137c0:	b580      	push	{r7, lr}
700137c2:	b084      	sub	sp, #16
700137c4:	af00      	add	r7, sp, #0
700137c6:	60f8      	str	r0, [r7, #12]
700137c8:	60b9      	str	r1, [r7, #8]
700137ca:	4613      	mov	r3, r2
700137cc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
700137ce:	68fb      	ldr	r3, [r7, #12]
700137d0:	2b00      	cmp	r3, #0
700137d2:	d105      	bne.n	700137e0 <udp_input_local_match+0x20>
700137d4:	4b27      	ldr	r3, [pc, #156]	@ (70013874 <udp_input_local_match+0xb4>)
700137d6:	2287      	movs	r2, #135	@ 0x87
700137d8:	4927      	ldr	r1, [pc, #156]	@ (70013878 <udp_input_local_match+0xb8>)
700137da:	4828      	ldr	r0, [pc, #160]	@ (7001387c <udp_input_local_match+0xbc>)
700137dc:	f000 fa98 	bl	70013d10 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
700137e0:	68bb      	ldr	r3, [r7, #8]
700137e2:	2b00      	cmp	r3, #0
700137e4:	d105      	bne.n	700137f2 <udp_input_local_match+0x32>
700137e6:	4b23      	ldr	r3, [pc, #140]	@ (70013874 <udp_input_local_match+0xb4>)
700137e8:	2288      	movs	r2, #136	@ 0x88
700137ea:	4925      	ldr	r1, [pc, #148]	@ (70013880 <udp_input_local_match+0xc0>)
700137ec:	4823      	ldr	r0, [pc, #140]	@ (7001387c <udp_input_local_match+0xbc>)
700137ee:	f000 fa8f 	bl	70013d10 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
700137f2:	68fb      	ldr	r3, [r7, #12]
700137f4:	7a1b      	ldrb	r3, [r3, #8]
700137f6:	2b00      	cmp	r3, #0
700137f8:	d00b      	beq.n	70013812 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
700137fa:	68fb      	ldr	r3, [r7, #12]
700137fc:	7a1a      	ldrb	r2, [r3, #8]
700137fe:	4b21      	ldr	r3, [pc, #132]	@ (70013884 <udp_input_local_match+0xc4>)
70013800:	685b      	ldr	r3, [r3, #4]
70013802:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
70013806:	3301      	adds	r3, #1
70013808:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
7001380a:	429a      	cmp	r2, r3
7001380c:	d001      	beq.n	70013812 <udp_input_local_match+0x52>
    return 0;
7001380e:	2300      	movs	r3, #0
70013810:	e02b      	b.n	7001386a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
70013812:	79fb      	ldrb	r3, [r7, #7]
70013814:	2b00      	cmp	r3, #0
70013816:	d018      	beq.n	7001384a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
70013818:	68fb      	ldr	r3, [r7, #12]
7001381a:	2b00      	cmp	r3, #0
7001381c:	d013      	beq.n	70013846 <udp_input_local_match+0x86>
7001381e:	68fb      	ldr	r3, [r7, #12]
70013820:	681b      	ldr	r3, [r3, #0]
70013822:	2b00      	cmp	r3, #0
70013824:	d00f      	beq.n	70013846 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
70013826:	4b17      	ldr	r3, [pc, #92]	@ (70013884 <udp_input_local_match+0xc4>)
70013828:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
7001382a:	f1b3 3fff 	cmp.w	r3, #4294967295
7001382e:	d00a      	beq.n	70013846 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
70013830:	68fb      	ldr	r3, [r7, #12]
70013832:	681a      	ldr	r2, [r3, #0]
70013834:	4b13      	ldr	r3, [pc, #76]	@ (70013884 <udp_input_local_match+0xc4>)
70013836:	695b      	ldr	r3, [r3, #20]
70013838:	405a      	eors	r2, r3
7001383a:	68bb      	ldr	r3, [r7, #8]
7001383c:	3308      	adds	r3, #8
7001383e:	681b      	ldr	r3, [r3, #0]
70013840:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
70013842:	2b00      	cmp	r3, #0
70013844:	d110      	bne.n	70013868 <udp_input_local_match+0xa8>
          return 1;
70013846:	2301      	movs	r3, #1
70013848:	e00f      	b.n	7001386a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
7001384a:	68fb      	ldr	r3, [r7, #12]
7001384c:	2b00      	cmp	r3, #0
7001384e:	d009      	beq.n	70013864 <udp_input_local_match+0xa4>
70013850:	68fb      	ldr	r3, [r7, #12]
70013852:	681b      	ldr	r3, [r3, #0]
70013854:	2b00      	cmp	r3, #0
70013856:	d005      	beq.n	70013864 <udp_input_local_match+0xa4>
70013858:	68fb      	ldr	r3, [r7, #12]
7001385a:	681a      	ldr	r2, [r3, #0]
7001385c:	4b09      	ldr	r3, [pc, #36]	@ (70013884 <udp_input_local_match+0xc4>)
7001385e:	695b      	ldr	r3, [r3, #20]
70013860:	429a      	cmp	r2, r3
70013862:	d101      	bne.n	70013868 <udp_input_local_match+0xa8>
        return 1;
70013864:	2301      	movs	r3, #1
70013866:	e000      	b.n	7001386a <udp_input_local_match+0xaa>
      }
  }

  return 0;
70013868:	2300      	movs	r3, #0
}
7001386a:	4618      	mov	r0, r3
7001386c:	3710      	adds	r7, #16
7001386e:	46bd      	mov	sp, r7
70013870:	bd80      	pop	{r7, pc}
70013872:	bf00      	nop
70013874:	700170a8 	.word	0x700170a8
70013878:	70017104 	.word	0x70017104
7001387c:	70017128 	.word	0x70017128
70013880:	70017150 	.word	0x70017150
70013884:	24005368 	.word	0x24005368

70013888 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
70013888:	b590      	push	{r4, r7, lr}
7001388a:	b08d      	sub	sp, #52	@ 0x34
7001388c:	af02      	add	r7, sp, #8
7001388e:	6078      	str	r0, [r7, #4]
70013890:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
70013892:	2300      	movs	r3, #0
70013894:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
70013896:	687b      	ldr	r3, [r7, #4]
70013898:	2b00      	cmp	r3, #0
7001389a:	d105      	bne.n	700138a8 <udp_input+0x20>
7001389c:	4b7c      	ldr	r3, [pc, #496]	@ (70013a90 <udp_input+0x208>)
7001389e:	22cf      	movs	r2, #207	@ 0xcf
700138a0:	497c      	ldr	r1, [pc, #496]	@ (70013a94 <udp_input+0x20c>)
700138a2:	487d      	ldr	r0, [pc, #500]	@ (70013a98 <udp_input+0x210>)
700138a4:	f000 fa34 	bl	70013d10 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
700138a8:	683b      	ldr	r3, [r7, #0]
700138aa:	2b00      	cmp	r3, #0
700138ac:	d105      	bne.n	700138ba <udp_input+0x32>
700138ae:	4b78      	ldr	r3, [pc, #480]	@ (70013a90 <udp_input+0x208>)
700138b0:	22d0      	movs	r2, #208	@ 0xd0
700138b2:	497a      	ldr	r1, [pc, #488]	@ (70013a9c <udp_input+0x214>)
700138b4:	4878      	ldr	r0, [pc, #480]	@ (70013a98 <udp_input+0x210>)
700138b6:	f000 fa2b 	bl	70013d10 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
700138ba:	687b      	ldr	r3, [r7, #4]
700138bc:	895b      	ldrh	r3, [r3, #10]
700138be:	2b07      	cmp	r3, #7
700138c0:	d803      	bhi.n	700138ca <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
700138c2:	6878      	ldr	r0, [r7, #4]
700138c4:	f7f9 ffb8 	bl	7000d838 <pbuf_free>
    goto end;
700138c8:	e0de      	b.n	70013a88 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
700138ca:	687b      	ldr	r3, [r7, #4]
700138cc:	685b      	ldr	r3, [r3, #4]
700138ce:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
700138d0:	4b73      	ldr	r3, [pc, #460]	@ (70013aa0 <udp_input+0x218>)
700138d2:	695b      	ldr	r3, [r3, #20]
700138d4:	4a72      	ldr	r2, [pc, #456]	@ (70013aa0 <udp_input+0x218>)
700138d6:	6812      	ldr	r2, [r2, #0]
700138d8:	4611      	mov	r1, r2
700138da:	4618      	mov	r0, r3
700138dc:	f7f7 fdfc 	bl	7000b4d8 <ip4_addr_isbroadcast_u32>
700138e0:	4603      	mov	r3, r0
700138e2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
700138e4:	697b      	ldr	r3, [r7, #20]
700138e6:	881b      	ldrh	r3, [r3, #0]
700138e8:	b29b      	uxth	r3, r3
700138ea:	4618      	mov	r0, r3
700138ec:	f7f6 f868 	bl	700099c0 <lwip_htons>
700138f0:	4603      	mov	r3, r0
700138f2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
700138f4:	697b      	ldr	r3, [r7, #20]
700138f6:	885b      	ldrh	r3, [r3, #2]
700138f8:	b29b      	uxth	r3, r3
700138fa:	4618      	mov	r0, r3
700138fc:	f7f6 f860 	bl	700099c0 <lwip_htons>
70013900:	4603      	mov	r3, r0
70013902:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
70013904:	2300      	movs	r3, #0
70013906:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
70013908:	2300      	movs	r3, #0
7001390a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
7001390c:	2300      	movs	r3, #0
7001390e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
70013910:	4b64      	ldr	r3, [pc, #400]	@ (70013aa4 <udp_input+0x21c>)
70013912:	681b      	ldr	r3, [r3, #0]
70013914:	627b      	str	r3, [r7, #36]	@ 0x24
70013916:	e054      	b.n	700139c2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
70013918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7001391a:	8a5b      	ldrh	r3, [r3, #18]
7001391c:	89fa      	ldrh	r2, [r7, #14]
7001391e:	429a      	cmp	r2, r3
70013920:	d14a      	bne.n	700139b8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
70013922:	7cfb      	ldrb	r3, [r7, #19]
70013924:	461a      	mov	r2, r3
70013926:	6839      	ldr	r1, [r7, #0]
70013928:	6a78      	ldr	r0, [r7, #36]	@ 0x24
7001392a:	f7ff ff49 	bl	700137c0 <udp_input_local_match>
7001392e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
70013930:	2b00      	cmp	r3, #0
70013932:	d041      	beq.n	700139b8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
70013934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70013936:	7c1b      	ldrb	r3, [r3, #16]
70013938:	f003 0304 	and.w	r3, r3, #4
7001393c:	2b00      	cmp	r3, #0
7001393e:	d11d      	bne.n	7001397c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
70013940:	69fb      	ldr	r3, [r7, #28]
70013942:	2b00      	cmp	r3, #0
70013944:	d102      	bne.n	7001394c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
70013946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70013948:	61fb      	str	r3, [r7, #28]
7001394a:	e017      	b.n	7001397c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
7001394c:	7cfb      	ldrb	r3, [r7, #19]
7001394e:	2b00      	cmp	r3, #0
70013950:	d014      	beq.n	7001397c <udp_input+0xf4>
70013952:	4b53      	ldr	r3, [pc, #332]	@ (70013aa0 <udp_input+0x218>)
70013954:	695b      	ldr	r3, [r3, #20]
70013956:	f1b3 3fff 	cmp.w	r3, #4294967295
7001395a:	d10f      	bne.n	7001397c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
7001395c:	69fb      	ldr	r3, [r7, #28]
7001395e:	681a      	ldr	r2, [r3, #0]
70013960:	683b      	ldr	r3, [r7, #0]
70013962:	3304      	adds	r3, #4
70013964:	681b      	ldr	r3, [r3, #0]
70013966:	429a      	cmp	r2, r3
70013968:	d008      	beq.n	7001397c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
7001396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7001396c:	681a      	ldr	r2, [r3, #0]
7001396e:	683b      	ldr	r3, [r7, #0]
70013970:	3304      	adds	r3, #4
70013972:	681b      	ldr	r3, [r3, #0]
70013974:	429a      	cmp	r2, r3
70013976:	d101      	bne.n	7001397c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
70013978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7001397a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
7001397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7001397e:	8a9b      	ldrh	r3, [r3, #20]
70013980:	8a3a      	ldrh	r2, [r7, #16]
70013982:	429a      	cmp	r2, r3
70013984:	d118      	bne.n	700139b8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
70013986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70013988:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
7001398a:	2b00      	cmp	r3, #0
7001398c:	d005      	beq.n	7001399a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
7001398e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70013990:	685a      	ldr	r2, [r3, #4]
70013992:	4b43      	ldr	r3, [pc, #268]	@ (70013aa0 <udp_input+0x218>)
70013994:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
70013996:	429a      	cmp	r2, r3
70013998:	d10e      	bne.n	700139b8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
7001399a:	6a3b      	ldr	r3, [r7, #32]
7001399c:	2b00      	cmp	r3, #0
7001399e:	d014      	beq.n	700139ca <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
700139a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700139a2:	68da      	ldr	r2, [r3, #12]
700139a4:	6a3b      	ldr	r3, [r7, #32]
700139a6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
700139a8:	4b3e      	ldr	r3, [pc, #248]	@ (70013aa4 <udp_input+0x21c>)
700139aa:	681a      	ldr	r2, [r3, #0]
700139ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700139ae:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
700139b0:	4a3c      	ldr	r2, [pc, #240]	@ (70013aa4 <udp_input+0x21c>)
700139b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700139b4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
700139b6:	e008      	b.n	700139ca <udp_input+0x142>
      }
    }

    prev = pcb;
700139b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700139ba:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
700139bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700139be:	68db      	ldr	r3, [r3, #12]
700139c0:	627b      	str	r3, [r7, #36]	@ 0x24
700139c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700139c4:	2b00      	cmp	r3, #0
700139c6:	d1a7      	bne.n	70013918 <udp_input+0x90>
700139c8:	e000      	b.n	700139cc <udp_input+0x144>
        break;
700139ca:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
700139cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700139ce:	2b00      	cmp	r3, #0
700139d0:	d101      	bne.n	700139d6 <udp_input+0x14e>
    pcb = uncon_pcb;
700139d2:	69fb      	ldr	r3, [r7, #28]
700139d4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
700139d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700139d8:	2b00      	cmp	r3, #0
700139da:	d002      	beq.n	700139e2 <udp_input+0x15a>
    for_us = 1;
700139dc:	2301      	movs	r3, #1
700139de:	76fb      	strb	r3, [r7, #27]
700139e0:	e00a      	b.n	700139f8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
700139e2:	683b      	ldr	r3, [r7, #0]
700139e4:	3304      	adds	r3, #4
700139e6:	681a      	ldr	r2, [r3, #0]
700139e8:	4b2d      	ldr	r3, [pc, #180]	@ (70013aa0 <udp_input+0x218>)
700139ea:	695b      	ldr	r3, [r3, #20]
700139ec:	429a      	cmp	r2, r3
700139ee:	bf0c      	ite	eq
700139f0:	2301      	moveq	r3, #1
700139f2:	2300      	movne	r3, #0
700139f4:	b2db      	uxtb	r3, r3
700139f6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
700139f8:	7efb      	ldrb	r3, [r7, #27]
700139fa:	2b00      	cmp	r3, #0
700139fc:	d041      	beq.n	70013a82 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
700139fe:	2108      	movs	r1, #8
70013a00:	6878      	ldr	r0, [r7, #4]
70013a02:	f7f9 fe9d 	bl	7000d740 <pbuf_remove_header>
70013a06:	4603      	mov	r3, r0
70013a08:	2b00      	cmp	r3, #0
70013a0a:	d00a      	beq.n	70013a22 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
70013a0c:	4b20      	ldr	r3, [pc, #128]	@ (70013a90 <udp_input+0x208>)
70013a0e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
70013a12:	4925      	ldr	r1, [pc, #148]	@ (70013aa8 <udp_input+0x220>)
70013a14:	4820      	ldr	r0, [pc, #128]	@ (70013a98 <udp_input+0x210>)
70013a16:	f000 f97b 	bl	70013d10 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
70013a1a:	6878      	ldr	r0, [r7, #4]
70013a1c:	f7f9 ff0c 	bl	7000d838 <pbuf_free>
      goto end;
70013a20:	e032      	b.n	70013a88 <udp_input+0x200>
    }

    if (pcb != NULL) {
70013a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70013a24:	2b00      	cmp	r3, #0
70013a26:	d012      	beq.n	70013a4e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
70013a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70013a2a:	699b      	ldr	r3, [r3, #24]
70013a2c:	2b00      	cmp	r3, #0
70013a2e:	d00a      	beq.n	70013a46 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
70013a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70013a32:	699c      	ldr	r4, [r3, #24]
70013a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70013a36:	69d8      	ldr	r0, [r3, #28]
70013a38:	8a3b      	ldrh	r3, [r7, #16]
70013a3a:	9300      	str	r3, [sp, #0]
70013a3c:	4b1b      	ldr	r3, [pc, #108]	@ (70013aac <udp_input+0x224>)
70013a3e:	687a      	ldr	r2, [r7, #4]
70013a40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
70013a42:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
70013a44:	e021      	b.n	70013a8a <udp_input+0x202>
        pbuf_free(p);
70013a46:	6878      	ldr	r0, [r7, #4]
70013a48:	f7f9 fef6 	bl	7000d838 <pbuf_free>
        goto end;
70013a4c:	e01c      	b.n	70013a88 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
70013a4e:	7cfb      	ldrb	r3, [r7, #19]
70013a50:	2b00      	cmp	r3, #0
70013a52:	d112      	bne.n	70013a7a <udp_input+0x1f2>
70013a54:	4b12      	ldr	r3, [pc, #72]	@ (70013aa0 <udp_input+0x218>)
70013a56:	695b      	ldr	r3, [r3, #20]
70013a58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
70013a5c:	2be0      	cmp	r3, #224	@ 0xe0
70013a5e:	d00c      	beq.n	70013a7a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
70013a60:	4b0f      	ldr	r3, [pc, #60]	@ (70013aa0 <udp_input+0x218>)
70013a62:	899b      	ldrh	r3, [r3, #12]
70013a64:	3308      	adds	r3, #8
70013a66:	b29b      	uxth	r3, r3
70013a68:	b21b      	sxth	r3, r3
70013a6a:	4619      	mov	r1, r3
70013a6c:	6878      	ldr	r0, [r7, #4]
70013a6e:	f7f9 fed0 	bl	7000d812 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
70013a72:	2103      	movs	r1, #3
70013a74:	6878      	ldr	r0, [r7, #4]
70013a76:	f7f7 f921 	bl	7000acbc <icmp_dest_unreach>
      pbuf_free(p);
70013a7a:	6878      	ldr	r0, [r7, #4]
70013a7c:	f7f9 fedc 	bl	7000d838 <pbuf_free>
  return;
70013a80:	e003      	b.n	70013a8a <udp_input+0x202>
    pbuf_free(p);
70013a82:	6878      	ldr	r0, [r7, #4]
70013a84:	f7f9 fed8 	bl	7000d838 <pbuf_free>
  return;
70013a88:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
70013a8a:	372c      	adds	r7, #44	@ 0x2c
70013a8c:	46bd      	mov	sp, r7
70013a8e:	bd90      	pop	{r4, r7, pc}
70013a90:	700170a8 	.word	0x700170a8
70013a94:	70017178 	.word	0x70017178
70013a98:	70017128 	.word	0x70017128
70013a9c:	70017190 	.word	0x70017190
70013aa0:	24005368 	.word	0x24005368
70013aa4:	240084e4 	.word	0x240084e4
70013aa8:	700171ac 	.word	0x700171ac
70013aac:	24005378 	.word	0x24005378

70013ab0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
70013ab0:	b480      	push	{r7}
70013ab2:	b085      	sub	sp, #20
70013ab4:	af00      	add	r7, sp, #0
70013ab6:	6078      	str	r0, [r7, #4]
70013ab8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
70013aba:	687b      	ldr	r3, [r7, #4]
70013abc:	2b00      	cmp	r3, #0
70013abe:	d01e      	beq.n	70013afe <udp_netif_ip_addr_changed+0x4e>
70013ac0:	687b      	ldr	r3, [r7, #4]
70013ac2:	681b      	ldr	r3, [r3, #0]
70013ac4:	2b00      	cmp	r3, #0
70013ac6:	d01a      	beq.n	70013afe <udp_netif_ip_addr_changed+0x4e>
70013ac8:	683b      	ldr	r3, [r7, #0]
70013aca:	2b00      	cmp	r3, #0
70013acc:	d017      	beq.n	70013afe <udp_netif_ip_addr_changed+0x4e>
70013ace:	683b      	ldr	r3, [r7, #0]
70013ad0:	681b      	ldr	r3, [r3, #0]
70013ad2:	2b00      	cmp	r3, #0
70013ad4:	d013      	beq.n	70013afe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
70013ad6:	4b0d      	ldr	r3, [pc, #52]	@ (70013b0c <udp_netif_ip_addr_changed+0x5c>)
70013ad8:	681b      	ldr	r3, [r3, #0]
70013ada:	60fb      	str	r3, [r7, #12]
70013adc:	e00c      	b.n	70013af8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
70013ade:	68fb      	ldr	r3, [r7, #12]
70013ae0:	681a      	ldr	r2, [r3, #0]
70013ae2:	687b      	ldr	r3, [r7, #4]
70013ae4:	681b      	ldr	r3, [r3, #0]
70013ae6:	429a      	cmp	r2, r3
70013ae8:	d103      	bne.n	70013af2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
70013aea:	683b      	ldr	r3, [r7, #0]
70013aec:	681a      	ldr	r2, [r3, #0]
70013aee:	68fb      	ldr	r3, [r7, #12]
70013af0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
70013af2:	68fb      	ldr	r3, [r7, #12]
70013af4:	68db      	ldr	r3, [r3, #12]
70013af6:	60fb      	str	r3, [r7, #12]
70013af8:	68fb      	ldr	r3, [r7, #12]
70013afa:	2b00      	cmp	r3, #0
70013afc:	d1ef      	bne.n	70013ade <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
70013afe:	bf00      	nop
70013b00:	3714      	adds	r7, #20
70013b02:	46bd      	mov	sp, r7
70013b04:	f85d 7b04 	ldr.w	r7, [sp], #4
70013b08:	4770      	bx	lr
70013b0a:	bf00      	nop
70013b0c:	240084e4 	.word	0x240084e4

70013b10 <rand>:
70013b10:	4b16      	ldr	r3, [pc, #88]	@ (70013b6c <rand+0x5c>)
70013b12:	b510      	push	{r4, lr}
70013b14:	681c      	ldr	r4, [r3, #0]
70013b16:	6b23      	ldr	r3, [r4, #48]	@ 0x30
70013b18:	b9b3      	cbnz	r3, 70013b48 <rand+0x38>
70013b1a:	2018      	movs	r0, #24
70013b1c:	f000 faa0 	bl	70014060 <malloc>
70013b20:	4602      	mov	r2, r0
70013b22:	6320      	str	r0, [r4, #48]	@ 0x30
70013b24:	b920      	cbnz	r0, 70013b30 <rand+0x20>
70013b26:	4b12      	ldr	r3, [pc, #72]	@ (70013b70 <rand+0x60>)
70013b28:	4812      	ldr	r0, [pc, #72]	@ (70013b74 <rand+0x64>)
70013b2a:	2152      	movs	r1, #82	@ 0x52
70013b2c:	f000 fa30 	bl	70013f90 <__assert_func>
70013b30:	4911      	ldr	r1, [pc, #68]	@ (70013b78 <rand+0x68>)
70013b32:	4b12      	ldr	r3, [pc, #72]	@ (70013b7c <rand+0x6c>)
70013b34:	e9c0 1300 	strd	r1, r3, [r0]
70013b38:	4b11      	ldr	r3, [pc, #68]	@ (70013b80 <rand+0x70>)
70013b3a:	6083      	str	r3, [r0, #8]
70013b3c:	230b      	movs	r3, #11
70013b3e:	8183      	strh	r3, [r0, #12]
70013b40:	2100      	movs	r1, #0
70013b42:	2001      	movs	r0, #1
70013b44:	e9c2 0104 	strd	r0, r1, [r2, #16]
70013b48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
70013b4a:	480e      	ldr	r0, [pc, #56]	@ (70013b84 <rand+0x74>)
70013b4c:	690b      	ldr	r3, [r1, #16]
70013b4e:	694c      	ldr	r4, [r1, #20]
70013b50:	4a0d      	ldr	r2, [pc, #52]	@ (70013b88 <rand+0x78>)
70013b52:	4358      	muls	r0, r3
70013b54:	fb02 0004 	mla	r0, r2, r4, r0
70013b58:	fba3 3202 	umull	r3, r2, r3, r2
70013b5c:	3301      	adds	r3, #1
70013b5e:	eb40 0002 	adc.w	r0, r0, r2
70013b62:	e9c1 3004 	strd	r3, r0, [r1, #16]
70013b66:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
70013b6a:	bd10      	pop	{r4, pc}
70013b6c:	24000040 	.word	0x24000040
70013b70:	70017370 	.word	0x70017370
70013b74:	70017387 	.word	0x70017387
70013b78:	abcd330e 	.word	0xabcd330e
70013b7c:	e66d1234 	.word	0xe66d1234
70013b80:	0005deec 	.word	0x0005deec
70013b84:	5851f42d 	.word	0x5851f42d
70013b88:	4c957f2d 	.word	0x4c957f2d

70013b8c <std>:
70013b8c:	2300      	movs	r3, #0
70013b8e:	b510      	push	{r4, lr}
70013b90:	4604      	mov	r4, r0
70013b92:	e9c0 3300 	strd	r3, r3, [r0]
70013b96:	e9c0 3304 	strd	r3, r3, [r0, #16]
70013b9a:	6083      	str	r3, [r0, #8]
70013b9c:	8181      	strh	r1, [r0, #12]
70013b9e:	6643      	str	r3, [r0, #100]	@ 0x64
70013ba0:	81c2      	strh	r2, [r0, #14]
70013ba2:	6183      	str	r3, [r0, #24]
70013ba4:	4619      	mov	r1, r3
70013ba6:	2208      	movs	r2, #8
70013ba8:	305c      	adds	r0, #92	@ 0x5c
70013baa:	f000 f916 	bl	70013dda <memset>
70013bae:	4b0d      	ldr	r3, [pc, #52]	@ (70013be4 <std+0x58>)
70013bb0:	6263      	str	r3, [r4, #36]	@ 0x24
70013bb2:	4b0d      	ldr	r3, [pc, #52]	@ (70013be8 <std+0x5c>)
70013bb4:	62a3      	str	r3, [r4, #40]	@ 0x28
70013bb6:	4b0d      	ldr	r3, [pc, #52]	@ (70013bec <std+0x60>)
70013bb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
70013bba:	4b0d      	ldr	r3, [pc, #52]	@ (70013bf0 <std+0x64>)
70013bbc:	6323      	str	r3, [r4, #48]	@ 0x30
70013bbe:	4b0d      	ldr	r3, [pc, #52]	@ (70013bf4 <std+0x68>)
70013bc0:	6224      	str	r4, [r4, #32]
70013bc2:	429c      	cmp	r4, r3
70013bc4:	d006      	beq.n	70013bd4 <std+0x48>
70013bc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
70013bca:	4294      	cmp	r4, r2
70013bcc:	d002      	beq.n	70013bd4 <std+0x48>
70013bce:	33d0      	adds	r3, #208	@ 0xd0
70013bd0:	429c      	cmp	r4, r3
70013bd2:	d105      	bne.n	70013be0 <std+0x54>
70013bd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
70013bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
70013bdc:	f000 b9c6 	b.w	70013f6c <__retarget_lock_init_recursive>
70013be0:	bd10      	pop	{r4, pc}
70013be2:	bf00      	nop
70013be4:	70013d35 	.word	0x70013d35
70013be8:	70013d57 	.word	0x70013d57
70013bec:	70013d8f 	.word	0x70013d8f
70013bf0:	70013db3 	.word	0x70013db3
70013bf4:	240084e8 	.word	0x240084e8

70013bf8 <stdio_exit_handler>:
70013bf8:	4a02      	ldr	r2, [pc, #8]	@ (70013c04 <stdio_exit_handler+0xc>)
70013bfa:	4903      	ldr	r1, [pc, #12]	@ (70013c08 <stdio_exit_handler+0x10>)
70013bfc:	4803      	ldr	r0, [pc, #12]	@ (70013c0c <stdio_exit_handler+0x14>)
70013bfe:	f000 b869 	b.w	70013cd4 <_fwalk_sglue>
70013c02:	bf00      	nop
70013c04:	24000034 	.word	0x24000034
70013c08:	70014875 	.word	0x70014875
70013c0c:	24000044 	.word	0x24000044

70013c10 <cleanup_stdio>:
70013c10:	6841      	ldr	r1, [r0, #4]
70013c12:	4b0c      	ldr	r3, [pc, #48]	@ (70013c44 <cleanup_stdio+0x34>)
70013c14:	4299      	cmp	r1, r3
70013c16:	b510      	push	{r4, lr}
70013c18:	4604      	mov	r4, r0
70013c1a:	d001      	beq.n	70013c20 <cleanup_stdio+0x10>
70013c1c:	f000 fe2a 	bl	70014874 <_fflush_r>
70013c20:	68a1      	ldr	r1, [r4, #8]
70013c22:	4b09      	ldr	r3, [pc, #36]	@ (70013c48 <cleanup_stdio+0x38>)
70013c24:	4299      	cmp	r1, r3
70013c26:	d002      	beq.n	70013c2e <cleanup_stdio+0x1e>
70013c28:	4620      	mov	r0, r4
70013c2a:	f000 fe23 	bl	70014874 <_fflush_r>
70013c2e:	68e1      	ldr	r1, [r4, #12]
70013c30:	4b06      	ldr	r3, [pc, #24]	@ (70013c4c <cleanup_stdio+0x3c>)
70013c32:	4299      	cmp	r1, r3
70013c34:	d004      	beq.n	70013c40 <cleanup_stdio+0x30>
70013c36:	4620      	mov	r0, r4
70013c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
70013c3c:	f000 be1a 	b.w	70014874 <_fflush_r>
70013c40:	bd10      	pop	{r4, pc}
70013c42:	bf00      	nop
70013c44:	240084e8 	.word	0x240084e8
70013c48:	24008550 	.word	0x24008550
70013c4c:	240085b8 	.word	0x240085b8

70013c50 <global_stdio_init.part.0>:
70013c50:	b510      	push	{r4, lr}
70013c52:	4b0b      	ldr	r3, [pc, #44]	@ (70013c80 <global_stdio_init.part.0+0x30>)
70013c54:	4c0b      	ldr	r4, [pc, #44]	@ (70013c84 <global_stdio_init.part.0+0x34>)
70013c56:	4a0c      	ldr	r2, [pc, #48]	@ (70013c88 <global_stdio_init.part.0+0x38>)
70013c58:	601a      	str	r2, [r3, #0]
70013c5a:	4620      	mov	r0, r4
70013c5c:	2200      	movs	r2, #0
70013c5e:	2104      	movs	r1, #4
70013c60:	f7ff ff94 	bl	70013b8c <std>
70013c64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
70013c68:	2201      	movs	r2, #1
70013c6a:	2109      	movs	r1, #9
70013c6c:	f7ff ff8e 	bl	70013b8c <std>
70013c70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
70013c74:	2202      	movs	r2, #2
70013c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
70013c7a:	2112      	movs	r1, #18
70013c7c:	f7ff bf86 	b.w	70013b8c <std>
70013c80:	24008620 	.word	0x24008620
70013c84:	240084e8 	.word	0x240084e8
70013c88:	70013bf9 	.word	0x70013bf9

70013c8c <__sfp_lock_acquire>:
70013c8c:	4801      	ldr	r0, [pc, #4]	@ (70013c94 <__sfp_lock_acquire+0x8>)
70013c8e:	f000 b96e 	b.w	70013f6e <__retarget_lock_acquire_recursive>
70013c92:	bf00      	nop
70013c94:	24008629 	.word	0x24008629

70013c98 <__sfp_lock_release>:
70013c98:	4801      	ldr	r0, [pc, #4]	@ (70013ca0 <__sfp_lock_release+0x8>)
70013c9a:	f000 b969 	b.w	70013f70 <__retarget_lock_release_recursive>
70013c9e:	bf00      	nop
70013ca0:	24008629 	.word	0x24008629

70013ca4 <__sinit>:
70013ca4:	b510      	push	{r4, lr}
70013ca6:	4604      	mov	r4, r0
70013ca8:	f7ff fff0 	bl	70013c8c <__sfp_lock_acquire>
70013cac:	6a23      	ldr	r3, [r4, #32]
70013cae:	b11b      	cbz	r3, 70013cb8 <__sinit+0x14>
70013cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
70013cb4:	f7ff bff0 	b.w	70013c98 <__sfp_lock_release>
70013cb8:	4b04      	ldr	r3, [pc, #16]	@ (70013ccc <__sinit+0x28>)
70013cba:	6223      	str	r3, [r4, #32]
70013cbc:	4b04      	ldr	r3, [pc, #16]	@ (70013cd0 <__sinit+0x2c>)
70013cbe:	681b      	ldr	r3, [r3, #0]
70013cc0:	2b00      	cmp	r3, #0
70013cc2:	d1f5      	bne.n	70013cb0 <__sinit+0xc>
70013cc4:	f7ff ffc4 	bl	70013c50 <global_stdio_init.part.0>
70013cc8:	e7f2      	b.n	70013cb0 <__sinit+0xc>
70013cca:	bf00      	nop
70013ccc:	70013c11 	.word	0x70013c11
70013cd0:	24008620 	.word	0x24008620

70013cd4 <_fwalk_sglue>:
70013cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
70013cd8:	4607      	mov	r7, r0
70013cda:	4688      	mov	r8, r1
70013cdc:	4614      	mov	r4, r2
70013cde:	2600      	movs	r6, #0
70013ce0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
70013ce4:	f1b9 0901 	subs.w	r9, r9, #1
70013ce8:	d505      	bpl.n	70013cf6 <_fwalk_sglue+0x22>
70013cea:	6824      	ldr	r4, [r4, #0]
70013cec:	2c00      	cmp	r4, #0
70013cee:	d1f7      	bne.n	70013ce0 <_fwalk_sglue+0xc>
70013cf0:	4630      	mov	r0, r6
70013cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
70013cf6:	89ab      	ldrh	r3, [r5, #12]
70013cf8:	2b01      	cmp	r3, #1
70013cfa:	d907      	bls.n	70013d0c <_fwalk_sglue+0x38>
70013cfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
70013d00:	3301      	adds	r3, #1
70013d02:	d003      	beq.n	70013d0c <_fwalk_sglue+0x38>
70013d04:	4629      	mov	r1, r5
70013d06:	4638      	mov	r0, r7
70013d08:	47c0      	blx	r8
70013d0a:	4306      	orrs	r6, r0
70013d0c:	3568      	adds	r5, #104	@ 0x68
70013d0e:	e7e9      	b.n	70013ce4 <_fwalk_sglue+0x10>

70013d10 <iprintf>:
70013d10:	b40f      	push	{r0, r1, r2, r3}
70013d12:	b507      	push	{r0, r1, r2, lr}
70013d14:	4906      	ldr	r1, [pc, #24]	@ (70013d30 <iprintf+0x20>)
70013d16:	ab04      	add	r3, sp, #16
70013d18:	6808      	ldr	r0, [r1, #0]
70013d1a:	f853 2b04 	ldr.w	r2, [r3], #4
70013d1e:	6881      	ldr	r1, [r0, #8]
70013d20:	9301      	str	r3, [sp, #4]
70013d22:	f000 fa7d 	bl	70014220 <_vfiprintf_r>
70013d26:	b003      	add	sp, #12
70013d28:	f85d eb04 	ldr.w	lr, [sp], #4
70013d2c:	b004      	add	sp, #16
70013d2e:	4770      	bx	lr
70013d30:	24000040 	.word	0x24000040

70013d34 <__sread>:
70013d34:	b510      	push	{r4, lr}
70013d36:	460c      	mov	r4, r1
70013d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
70013d3c:	f000 f8ce 	bl	70013edc <_read_r>
70013d40:	2800      	cmp	r0, #0
70013d42:	bfab      	itete	ge
70013d44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
70013d46:	89a3      	ldrhlt	r3, [r4, #12]
70013d48:	181b      	addge	r3, r3, r0
70013d4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
70013d4e:	bfac      	ite	ge
70013d50:	6563      	strge	r3, [r4, #84]	@ 0x54
70013d52:	81a3      	strhlt	r3, [r4, #12]
70013d54:	bd10      	pop	{r4, pc}

70013d56 <__swrite>:
70013d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
70013d5a:	461f      	mov	r7, r3
70013d5c:	898b      	ldrh	r3, [r1, #12]
70013d5e:	05db      	lsls	r3, r3, #23
70013d60:	4605      	mov	r5, r0
70013d62:	460c      	mov	r4, r1
70013d64:	4616      	mov	r6, r2
70013d66:	d505      	bpl.n	70013d74 <__swrite+0x1e>
70013d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
70013d6c:	2302      	movs	r3, #2
70013d6e:	2200      	movs	r2, #0
70013d70:	f000 f8a2 	bl	70013eb8 <_lseek_r>
70013d74:	89a3      	ldrh	r3, [r4, #12]
70013d76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
70013d7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
70013d7e:	81a3      	strh	r3, [r4, #12]
70013d80:	4632      	mov	r2, r6
70013d82:	463b      	mov	r3, r7
70013d84:	4628      	mov	r0, r5
70013d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
70013d8a:	f000 b8b9 	b.w	70013f00 <_write_r>

70013d8e <__sseek>:
70013d8e:	b510      	push	{r4, lr}
70013d90:	460c      	mov	r4, r1
70013d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
70013d96:	f000 f88f 	bl	70013eb8 <_lseek_r>
70013d9a:	1c43      	adds	r3, r0, #1
70013d9c:	89a3      	ldrh	r3, [r4, #12]
70013d9e:	bf15      	itete	ne
70013da0:	6560      	strne	r0, [r4, #84]	@ 0x54
70013da2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
70013da6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
70013daa:	81a3      	strheq	r3, [r4, #12]
70013dac:	bf18      	it	ne
70013dae:	81a3      	strhne	r3, [r4, #12]
70013db0:	bd10      	pop	{r4, pc}

70013db2 <__sclose>:
70013db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
70013db6:	f000 b819 	b.w	70013dec <_close_r>

70013dba <memcmp>:
70013dba:	b510      	push	{r4, lr}
70013dbc:	3901      	subs	r1, #1
70013dbe:	4402      	add	r2, r0
70013dc0:	4290      	cmp	r0, r2
70013dc2:	d101      	bne.n	70013dc8 <memcmp+0xe>
70013dc4:	2000      	movs	r0, #0
70013dc6:	e005      	b.n	70013dd4 <memcmp+0x1a>
70013dc8:	7803      	ldrb	r3, [r0, #0]
70013dca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
70013dce:	42a3      	cmp	r3, r4
70013dd0:	d001      	beq.n	70013dd6 <memcmp+0x1c>
70013dd2:	1b18      	subs	r0, r3, r4
70013dd4:	bd10      	pop	{r4, pc}
70013dd6:	3001      	adds	r0, #1
70013dd8:	e7f2      	b.n	70013dc0 <memcmp+0x6>

70013dda <memset>:
70013dda:	4402      	add	r2, r0
70013ddc:	4603      	mov	r3, r0
70013dde:	4293      	cmp	r3, r2
70013de0:	d100      	bne.n	70013de4 <memset+0xa>
70013de2:	4770      	bx	lr
70013de4:	f803 1b01 	strb.w	r1, [r3], #1
70013de8:	e7f9      	b.n	70013dde <memset+0x4>
	...

70013dec <_close_r>:
70013dec:	b538      	push	{r3, r4, r5, lr}
70013dee:	4d06      	ldr	r5, [pc, #24]	@ (70013e08 <_close_r+0x1c>)
70013df0:	2300      	movs	r3, #0
70013df2:	4604      	mov	r4, r0
70013df4:	4608      	mov	r0, r1
70013df6:	602b      	str	r3, [r5, #0]
70013df8:	f7ec fdbc 	bl	70000974 <_close>
70013dfc:	1c43      	adds	r3, r0, #1
70013dfe:	d102      	bne.n	70013e06 <_close_r+0x1a>
70013e00:	682b      	ldr	r3, [r5, #0]
70013e02:	b103      	cbz	r3, 70013e06 <_close_r+0x1a>
70013e04:	6023      	str	r3, [r4, #0]
70013e06:	bd38      	pop	{r3, r4, r5, pc}
70013e08:	24008624 	.word	0x24008624

70013e0c <_reclaim_reent>:
70013e0c:	4b29      	ldr	r3, [pc, #164]	@ (70013eb4 <_reclaim_reent+0xa8>)
70013e0e:	681b      	ldr	r3, [r3, #0]
70013e10:	4283      	cmp	r3, r0
70013e12:	b570      	push	{r4, r5, r6, lr}
70013e14:	4604      	mov	r4, r0
70013e16:	d04b      	beq.n	70013eb0 <_reclaim_reent+0xa4>
70013e18:	69c3      	ldr	r3, [r0, #28]
70013e1a:	b1ab      	cbz	r3, 70013e48 <_reclaim_reent+0x3c>
70013e1c:	68db      	ldr	r3, [r3, #12]
70013e1e:	b16b      	cbz	r3, 70013e3c <_reclaim_reent+0x30>
70013e20:	2500      	movs	r5, #0
70013e22:	69e3      	ldr	r3, [r4, #28]
70013e24:	68db      	ldr	r3, [r3, #12]
70013e26:	5959      	ldr	r1, [r3, r5]
70013e28:	2900      	cmp	r1, #0
70013e2a:	d13b      	bne.n	70013ea4 <_reclaim_reent+0x98>
70013e2c:	3504      	adds	r5, #4
70013e2e:	2d80      	cmp	r5, #128	@ 0x80
70013e30:	d1f7      	bne.n	70013e22 <_reclaim_reent+0x16>
70013e32:	69e3      	ldr	r3, [r4, #28]
70013e34:	4620      	mov	r0, r4
70013e36:	68d9      	ldr	r1, [r3, #12]
70013e38:	f000 f8c8 	bl	70013fcc <_free_r>
70013e3c:	69e3      	ldr	r3, [r4, #28]
70013e3e:	6819      	ldr	r1, [r3, #0]
70013e40:	b111      	cbz	r1, 70013e48 <_reclaim_reent+0x3c>
70013e42:	4620      	mov	r0, r4
70013e44:	f000 f8c2 	bl	70013fcc <_free_r>
70013e48:	6961      	ldr	r1, [r4, #20]
70013e4a:	b111      	cbz	r1, 70013e52 <_reclaim_reent+0x46>
70013e4c:	4620      	mov	r0, r4
70013e4e:	f000 f8bd 	bl	70013fcc <_free_r>
70013e52:	69e1      	ldr	r1, [r4, #28]
70013e54:	b111      	cbz	r1, 70013e5c <_reclaim_reent+0x50>
70013e56:	4620      	mov	r0, r4
70013e58:	f000 f8b8 	bl	70013fcc <_free_r>
70013e5c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
70013e5e:	b111      	cbz	r1, 70013e66 <_reclaim_reent+0x5a>
70013e60:	4620      	mov	r0, r4
70013e62:	f000 f8b3 	bl	70013fcc <_free_r>
70013e66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
70013e68:	b111      	cbz	r1, 70013e70 <_reclaim_reent+0x64>
70013e6a:	4620      	mov	r0, r4
70013e6c:	f000 f8ae 	bl	70013fcc <_free_r>
70013e70:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
70013e72:	b111      	cbz	r1, 70013e7a <_reclaim_reent+0x6e>
70013e74:	4620      	mov	r0, r4
70013e76:	f000 f8a9 	bl	70013fcc <_free_r>
70013e7a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
70013e7c:	b111      	cbz	r1, 70013e84 <_reclaim_reent+0x78>
70013e7e:	4620      	mov	r0, r4
70013e80:	f000 f8a4 	bl	70013fcc <_free_r>
70013e84:	6c61      	ldr	r1, [r4, #68]	@ 0x44
70013e86:	b111      	cbz	r1, 70013e8e <_reclaim_reent+0x82>
70013e88:	4620      	mov	r0, r4
70013e8a:	f000 f89f 	bl	70013fcc <_free_r>
70013e8e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
70013e90:	b111      	cbz	r1, 70013e98 <_reclaim_reent+0x8c>
70013e92:	4620      	mov	r0, r4
70013e94:	f000 f89a 	bl	70013fcc <_free_r>
70013e98:	6a23      	ldr	r3, [r4, #32]
70013e9a:	b14b      	cbz	r3, 70013eb0 <_reclaim_reent+0xa4>
70013e9c:	4620      	mov	r0, r4
70013e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
70013ea2:	4718      	bx	r3
70013ea4:	680e      	ldr	r6, [r1, #0]
70013ea6:	4620      	mov	r0, r4
70013ea8:	f000 f890 	bl	70013fcc <_free_r>
70013eac:	4631      	mov	r1, r6
70013eae:	e7bb      	b.n	70013e28 <_reclaim_reent+0x1c>
70013eb0:	bd70      	pop	{r4, r5, r6, pc}
70013eb2:	bf00      	nop
70013eb4:	24000040 	.word	0x24000040

70013eb8 <_lseek_r>:
70013eb8:	b538      	push	{r3, r4, r5, lr}
70013eba:	4d07      	ldr	r5, [pc, #28]	@ (70013ed8 <_lseek_r+0x20>)
70013ebc:	4604      	mov	r4, r0
70013ebe:	4608      	mov	r0, r1
70013ec0:	4611      	mov	r1, r2
70013ec2:	2200      	movs	r2, #0
70013ec4:	602a      	str	r2, [r5, #0]
70013ec6:	461a      	mov	r2, r3
70013ec8:	f7ec fd7b 	bl	700009c2 <_lseek>
70013ecc:	1c43      	adds	r3, r0, #1
70013ece:	d102      	bne.n	70013ed6 <_lseek_r+0x1e>
70013ed0:	682b      	ldr	r3, [r5, #0]
70013ed2:	b103      	cbz	r3, 70013ed6 <_lseek_r+0x1e>
70013ed4:	6023      	str	r3, [r4, #0]
70013ed6:	bd38      	pop	{r3, r4, r5, pc}
70013ed8:	24008624 	.word	0x24008624

70013edc <_read_r>:
70013edc:	b538      	push	{r3, r4, r5, lr}
70013ede:	4d07      	ldr	r5, [pc, #28]	@ (70013efc <_read_r+0x20>)
70013ee0:	4604      	mov	r4, r0
70013ee2:	4608      	mov	r0, r1
70013ee4:	4611      	mov	r1, r2
70013ee6:	2200      	movs	r2, #0
70013ee8:	602a      	str	r2, [r5, #0]
70013eea:	461a      	mov	r2, r3
70013eec:	f7ec fd09 	bl	70000902 <_read>
70013ef0:	1c43      	adds	r3, r0, #1
70013ef2:	d102      	bne.n	70013efa <_read_r+0x1e>
70013ef4:	682b      	ldr	r3, [r5, #0]
70013ef6:	b103      	cbz	r3, 70013efa <_read_r+0x1e>
70013ef8:	6023      	str	r3, [r4, #0]
70013efa:	bd38      	pop	{r3, r4, r5, pc}
70013efc:	24008624 	.word	0x24008624

70013f00 <_write_r>:
70013f00:	b538      	push	{r3, r4, r5, lr}
70013f02:	4d07      	ldr	r5, [pc, #28]	@ (70013f20 <_write_r+0x20>)
70013f04:	4604      	mov	r4, r0
70013f06:	4608      	mov	r0, r1
70013f08:	4611      	mov	r1, r2
70013f0a:	2200      	movs	r2, #0
70013f0c:	602a      	str	r2, [r5, #0]
70013f0e:	461a      	mov	r2, r3
70013f10:	f7ec fd14 	bl	7000093c <_write>
70013f14:	1c43      	adds	r3, r0, #1
70013f16:	d102      	bne.n	70013f1e <_write_r+0x1e>
70013f18:	682b      	ldr	r3, [r5, #0]
70013f1a:	b103      	cbz	r3, 70013f1e <_write_r+0x1e>
70013f1c:	6023      	str	r3, [r4, #0]
70013f1e:	bd38      	pop	{r3, r4, r5, pc}
70013f20:	24008624 	.word	0x24008624

70013f24 <__libc_init_array>:
70013f24:	b570      	push	{r4, r5, r6, lr}
70013f26:	4d0d      	ldr	r5, [pc, #52]	@ (70013f5c <__libc_init_array+0x38>)
70013f28:	4c0d      	ldr	r4, [pc, #52]	@ (70013f60 <__libc_init_array+0x3c>)
70013f2a:	1b64      	subs	r4, r4, r5
70013f2c:	10a4      	asrs	r4, r4, #2
70013f2e:	2600      	movs	r6, #0
70013f30:	42a6      	cmp	r6, r4
70013f32:	d109      	bne.n	70013f48 <__libc_init_array+0x24>
70013f34:	4d0b      	ldr	r5, [pc, #44]	@ (70013f64 <__libc_init_array+0x40>)
70013f36:	4c0c      	ldr	r4, [pc, #48]	@ (70013f68 <__libc_init_array+0x44>)
70013f38:	f000 fe4a 	bl	70014bd0 <_init>
70013f3c:	1b64      	subs	r4, r4, r5
70013f3e:	10a4      	asrs	r4, r4, #2
70013f40:	2600      	movs	r6, #0
70013f42:	42a6      	cmp	r6, r4
70013f44:	d105      	bne.n	70013f52 <__libc_init_array+0x2e>
70013f46:	bd70      	pop	{r4, r5, r6, pc}
70013f48:	f855 3b04 	ldr.w	r3, [r5], #4
70013f4c:	4798      	blx	r3
70013f4e:	3601      	adds	r6, #1
70013f50:	e7ee      	b.n	70013f30 <__libc_init_array+0xc>
70013f52:	f855 3b04 	ldr.w	r3, [r5], #4
70013f56:	4798      	blx	r3
70013f58:	3601      	adds	r6, #1
70013f5a:	e7f2      	b.n	70013f42 <__libc_init_array+0x1e>
70013f5c:	70017458 	.word	0x70017458
70013f60:	70017458 	.word	0x70017458
70013f64:	70017458 	.word	0x70017458
70013f68:	7001745c 	.word	0x7001745c

70013f6c <__retarget_lock_init_recursive>:
70013f6c:	4770      	bx	lr

70013f6e <__retarget_lock_acquire_recursive>:
70013f6e:	4770      	bx	lr

70013f70 <__retarget_lock_release_recursive>:
70013f70:	4770      	bx	lr

70013f72 <memcpy>:
70013f72:	440a      	add	r2, r1
70013f74:	4291      	cmp	r1, r2
70013f76:	f100 33ff 	add.w	r3, r0, #4294967295
70013f7a:	d100      	bne.n	70013f7e <memcpy+0xc>
70013f7c:	4770      	bx	lr
70013f7e:	b510      	push	{r4, lr}
70013f80:	f811 4b01 	ldrb.w	r4, [r1], #1
70013f84:	f803 4f01 	strb.w	r4, [r3, #1]!
70013f88:	4291      	cmp	r1, r2
70013f8a:	d1f9      	bne.n	70013f80 <memcpy+0xe>
70013f8c:	bd10      	pop	{r4, pc}
	...

70013f90 <__assert_func>:
70013f90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
70013f92:	4614      	mov	r4, r2
70013f94:	461a      	mov	r2, r3
70013f96:	4b09      	ldr	r3, [pc, #36]	@ (70013fbc <__assert_func+0x2c>)
70013f98:	681b      	ldr	r3, [r3, #0]
70013f9a:	4605      	mov	r5, r0
70013f9c:	68d8      	ldr	r0, [r3, #12]
70013f9e:	b954      	cbnz	r4, 70013fb6 <__assert_func+0x26>
70013fa0:	4b07      	ldr	r3, [pc, #28]	@ (70013fc0 <__assert_func+0x30>)
70013fa2:	461c      	mov	r4, r3
70013fa4:	e9cd 3401 	strd	r3, r4, [sp, #4]
70013fa8:	9100      	str	r1, [sp, #0]
70013faa:	462b      	mov	r3, r5
70013fac:	4905      	ldr	r1, [pc, #20]	@ (70013fc4 <__assert_func+0x34>)
70013fae:	f000 fc89 	bl	700148c4 <fiprintf>
70013fb2:	f000 fd3d 	bl	70014a30 <abort>
70013fb6:	4b04      	ldr	r3, [pc, #16]	@ (70013fc8 <__assert_func+0x38>)
70013fb8:	e7f4      	b.n	70013fa4 <__assert_func+0x14>
70013fba:	bf00      	nop
70013fbc:	24000040 	.word	0x24000040
70013fc0:	7001741a 	.word	0x7001741a
70013fc4:	700173ec 	.word	0x700173ec
70013fc8:	700173df 	.word	0x700173df

70013fcc <_free_r>:
70013fcc:	b538      	push	{r3, r4, r5, lr}
70013fce:	4605      	mov	r5, r0
70013fd0:	2900      	cmp	r1, #0
70013fd2:	d041      	beq.n	70014058 <_free_r+0x8c>
70013fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
70013fd8:	1f0c      	subs	r4, r1, #4
70013fda:	2b00      	cmp	r3, #0
70013fdc:	bfb8      	it	lt
70013fde:	18e4      	addlt	r4, r4, r3
70013fe0:	f000 f8e8 	bl	700141b4 <__malloc_lock>
70013fe4:	4a1d      	ldr	r2, [pc, #116]	@ (7001405c <_free_r+0x90>)
70013fe6:	6813      	ldr	r3, [r2, #0]
70013fe8:	b933      	cbnz	r3, 70013ff8 <_free_r+0x2c>
70013fea:	6063      	str	r3, [r4, #4]
70013fec:	6014      	str	r4, [r2, #0]
70013fee:	4628      	mov	r0, r5
70013ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
70013ff4:	f000 b8e4 	b.w	700141c0 <__malloc_unlock>
70013ff8:	42a3      	cmp	r3, r4
70013ffa:	d908      	bls.n	7001400e <_free_r+0x42>
70013ffc:	6820      	ldr	r0, [r4, #0]
70013ffe:	1821      	adds	r1, r4, r0
70014000:	428b      	cmp	r3, r1
70014002:	bf01      	itttt	eq
70014004:	6819      	ldreq	r1, [r3, #0]
70014006:	685b      	ldreq	r3, [r3, #4]
70014008:	1809      	addeq	r1, r1, r0
7001400a:	6021      	streq	r1, [r4, #0]
7001400c:	e7ed      	b.n	70013fea <_free_r+0x1e>
7001400e:	461a      	mov	r2, r3
70014010:	685b      	ldr	r3, [r3, #4]
70014012:	b10b      	cbz	r3, 70014018 <_free_r+0x4c>
70014014:	42a3      	cmp	r3, r4
70014016:	d9fa      	bls.n	7001400e <_free_r+0x42>
70014018:	6811      	ldr	r1, [r2, #0]
7001401a:	1850      	adds	r0, r2, r1
7001401c:	42a0      	cmp	r0, r4
7001401e:	d10b      	bne.n	70014038 <_free_r+0x6c>
70014020:	6820      	ldr	r0, [r4, #0]
70014022:	4401      	add	r1, r0
70014024:	1850      	adds	r0, r2, r1
70014026:	4283      	cmp	r3, r0
70014028:	6011      	str	r1, [r2, #0]
7001402a:	d1e0      	bne.n	70013fee <_free_r+0x22>
7001402c:	6818      	ldr	r0, [r3, #0]
7001402e:	685b      	ldr	r3, [r3, #4]
70014030:	6053      	str	r3, [r2, #4]
70014032:	4408      	add	r0, r1
70014034:	6010      	str	r0, [r2, #0]
70014036:	e7da      	b.n	70013fee <_free_r+0x22>
70014038:	d902      	bls.n	70014040 <_free_r+0x74>
7001403a:	230c      	movs	r3, #12
7001403c:	602b      	str	r3, [r5, #0]
7001403e:	e7d6      	b.n	70013fee <_free_r+0x22>
70014040:	6820      	ldr	r0, [r4, #0]
70014042:	1821      	adds	r1, r4, r0
70014044:	428b      	cmp	r3, r1
70014046:	bf04      	itt	eq
70014048:	6819      	ldreq	r1, [r3, #0]
7001404a:	685b      	ldreq	r3, [r3, #4]
7001404c:	6063      	str	r3, [r4, #4]
7001404e:	bf04      	itt	eq
70014050:	1809      	addeq	r1, r1, r0
70014052:	6021      	streq	r1, [r4, #0]
70014054:	6054      	str	r4, [r2, #4]
70014056:	e7ca      	b.n	70013fee <_free_r+0x22>
70014058:	bd38      	pop	{r3, r4, r5, pc}
7001405a:	bf00      	nop
7001405c:	24008630 	.word	0x24008630

70014060 <malloc>:
70014060:	4b02      	ldr	r3, [pc, #8]	@ (7001406c <malloc+0xc>)
70014062:	4601      	mov	r1, r0
70014064:	6818      	ldr	r0, [r3, #0]
70014066:	f000 b825 	b.w	700140b4 <_malloc_r>
7001406a:	bf00      	nop
7001406c:	24000040 	.word	0x24000040

70014070 <sbrk_aligned>:
70014070:	b570      	push	{r4, r5, r6, lr}
70014072:	4e0f      	ldr	r6, [pc, #60]	@ (700140b0 <sbrk_aligned+0x40>)
70014074:	460c      	mov	r4, r1
70014076:	6831      	ldr	r1, [r6, #0]
70014078:	4605      	mov	r5, r0
7001407a:	b911      	cbnz	r1, 70014082 <sbrk_aligned+0x12>
7001407c:	f000 fcc8 	bl	70014a10 <_sbrk_r>
70014080:	6030      	str	r0, [r6, #0]
70014082:	4621      	mov	r1, r4
70014084:	4628      	mov	r0, r5
70014086:	f000 fcc3 	bl	70014a10 <_sbrk_r>
7001408a:	1c43      	adds	r3, r0, #1
7001408c:	d103      	bne.n	70014096 <sbrk_aligned+0x26>
7001408e:	f04f 34ff 	mov.w	r4, #4294967295
70014092:	4620      	mov	r0, r4
70014094:	bd70      	pop	{r4, r5, r6, pc}
70014096:	1cc4      	adds	r4, r0, #3
70014098:	f024 0403 	bic.w	r4, r4, #3
7001409c:	42a0      	cmp	r0, r4
7001409e:	d0f8      	beq.n	70014092 <sbrk_aligned+0x22>
700140a0:	1a21      	subs	r1, r4, r0
700140a2:	4628      	mov	r0, r5
700140a4:	f000 fcb4 	bl	70014a10 <_sbrk_r>
700140a8:	3001      	adds	r0, #1
700140aa:	d1f2      	bne.n	70014092 <sbrk_aligned+0x22>
700140ac:	e7ef      	b.n	7001408e <sbrk_aligned+0x1e>
700140ae:	bf00      	nop
700140b0:	2400862c 	.word	0x2400862c

700140b4 <_malloc_r>:
700140b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
700140b8:	1ccd      	adds	r5, r1, #3
700140ba:	f025 0503 	bic.w	r5, r5, #3
700140be:	3508      	adds	r5, #8
700140c0:	2d0c      	cmp	r5, #12
700140c2:	bf38      	it	cc
700140c4:	250c      	movcc	r5, #12
700140c6:	2d00      	cmp	r5, #0
700140c8:	4606      	mov	r6, r0
700140ca:	db01      	blt.n	700140d0 <_malloc_r+0x1c>
700140cc:	42a9      	cmp	r1, r5
700140ce:	d904      	bls.n	700140da <_malloc_r+0x26>
700140d0:	230c      	movs	r3, #12
700140d2:	6033      	str	r3, [r6, #0]
700140d4:	2000      	movs	r0, #0
700140d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
700140da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 700141b0 <_malloc_r+0xfc>
700140de:	f000 f869 	bl	700141b4 <__malloc_lock>
700140e2:	f8d8 3000 	ldr.w	r3, [r8]
700140e6:	461c      	mov	r4, r3
700140e8:	bb44      	cbnz	r4, 7001413c <_malloc_r+0x88>
700140ea:	4629      	mov	r1, r5
700140ec:	4630      	mov	r0, r6
700140ee:	f7ff ffbf 	bl	70014070 <sbrk_aligned>
700140f2:	1c43      	adds	r3, r0, #1
700140f4:	4604      	mov	r4, r0
700140f6:	d158      	bne.n	700141aa <_malloc_r+0xf6>
700140f8:	f8d8 4000 	ldr.w	r4, [r8]
700140fc:	4627      	mov	r7, r4
700140fe:	2f00      	cmp	r7, #0
70014100:	d143      	bne.n	7001418a <_malloc_r+0xd6>
70014102:	2c00      	cmp	r4, #0
70014104:	d04b      	beq.n	7001419e <_malloc_r+0xea>
70014106:	6823      	ldr	r3, [r4, #0]
70014108:	4639      	mov	r1, r7
7001410a:	4630      	mov	r0, r6
7001410c:	eb04 0903 	add.w	r9, r4, r3
70014110:	f000 fc7e 	bl	70014a10 <_sbrk_r>
70014114:	4581      	cmp	r9, r0
70014116:	d142      	bne.n	7001419e <_malloc_r+0xea>
70014118:	6821      	ldr	r1, [r4, #0]
7001411a:	1a6d      	subs	r5, r5, r1
7001411c:	4629      	mov	r1, r5
7001411e:	4630      	mov	r0, r6
70014120:	f7ff ffa6 	bl	70014070 <sbrk_aligned>
70014124:	3001      	adds	r0, #1
70014126:	d03a      	beq.n	7001419e <_malloc_r+0xea>
70014128:	6823      	ldr	r3, [r4, #0]
7001412a:	442b      	add	r3, r5
7001412c:	6023      	str	r3, [r4, #0]
7001412e:	f8d8 3000 	ldr.w	r3, [r8]
70014132:	685a      	ldr	r2, [r3, #4]
70014134:	bb62      	cbnz	r2, 70014190 <_malloc_r+0xdc>
70014136:	f8c8 7000 	str.w	r7, [r8]
7001413a:	e00f      	b.n	7001415c <_malloc_r+0xa8>
7001413c:	6822      	ldr	r2, [r4, #0]
7001413e:	1b52      	subs	r2, r2, r5
70014140:	d420      	bmi.n	70014184 <_malloc_r+0xd0>
70014142:	2a0b      	cmp	r2, #11
70014144:	d917      	bls.n	70014176 <_malloc_r+0xc2>
70014146:	1961      	adds	r1, r4, r5
70014148:	42a3      	cmp	r3, r4
7001414a:	6025      	str	r5, [r4, #0]
7001414c:	bf18      	it	ne
7001414e:	6059      	strne	r1, [r3, #4]
70014150:	6863      	ldr	r3, [r4, #4]
70014152:	bf08      	it	eq
70014154:	f8c8 1000 	streq.w	r1, [r8]
70014158:	5162      	str	r2, [r4, r5]
7001415a:	604b      	str	r3, [r1, #4]
7001415c:	4630      	mov	r0, r6
7001415e:	f000 f82f 	bl	700141c0 <__malloc_unlock>
70014162:	f104 000b 	add.w	r0, r4, #11
70014166:	1d23      	adds	r3, r4, #4
70014168:	f020 0007 	bic.w	r0, r0, #7
7001416c:	1ac2      	subs	r2, r0, r3
7001416e:	bf1c      	itt	ne
70014170:	1a1b      	subne	r3, r3, r0
70014172:	50a3      	strne	r3, [r4, r2]
70014174:	e7af      	b.n	700140d6 <_malloc_r+0x22>
70014176:	6862      	ldr	r2, [r4, #4]
70014178:	42a3      	cmp	r3, r4
7001417a:	bf0c      	ite	eq
7001417c:	f8c8 2000 	streq.w	r2, [r8]
70014180:	605a      	strne	r2, [r3, #4]
70014182:	e7eb      	b.n	7001415c <_malloc_r+0xa8>
70014184:	4623      	mov	r3, r4
70014186:	6864      	ldr	r4, [r4, #4]
70014188:	e7ae      	b.n	700140e8 <_malloc_r+0x34>
7001418a:	463c      	mov	r4, r7
7001418c:	687f      	ldr	r7, [r7, #4]
7001418e:	e7b6      	b.n	700140fe <_malloc_r+0x4a>
70014190:	461a      	mov	r2, r3
70014192:	685b      	ldr	r3, [r3, #4]
70014194:	42a3      	cmp	r3, r4
70014196:	d1fb      	bne.n	70014190 <_malloc_r+0xdc>
70014198:	2300      	movs	r3, #0
7001419a:	6053      	str	r3, [r2, #4]
7001419c:	e7de      	b.n	7001415c <_malloc_r+0xa8>
7001419e:	230c      	movs	r3, #12
700141a0:	6033      	str	r3, [r6, #0]
700141a2:	4630      	mov	r0, r6
700141a4:	f000 f80c 	bl	700141c0 <__malloc_unlock>
700141a8:	e794      	b.n	700140d4 <_malloc_r+0x20>
700141aa:	6005      	str	r5, [r0, #0]
700141ac:	e7d6      	b.n	7001415c <_malloc_r+0xa8>
700141ae:	bf00      	nop
700141b0:	24008630 	.word	0x24008630

700141b4 <__malloc_lock>:
700141b4:	4801      	ldr	r0, [pc, #4]	@ (700141bc <__malloc_lock+0x8>)
700141b6:	f7ff beda 	b.w	70013f6e <__retarget_lock_acquire_recursive>
700141ba:	bf00      	nop
700141bc:	24008628 	.word	0x24008628

700141c0 <__malloc_unlock>:
700141c0:	4801      	ldr	r0, [pc, #4]	@ (700141c8 <__malloc_unlock+0x8>)
700141c2:	f7ff bed5 	b.w	70013f70 <__retarget_lock_release_recursive>
700141c6:	bf00      	nop
700141c8:	24008628 	.word	0x24008628

700141cc <__sfputc_r>:
700141cc:	6893      	ldr	r3, [r2, #8]
700141ce:	3b01      	subs	r3, #1
700141d0:	2b00      	cmp	r3, #0
700141d2:	b410      	push	{r4}
700141d4:	6093      	str	r3, [r2, #8]
700141d6:	da08      	bge.n	700141ea <__sfputc_r+0x1e>
700141d8:	6994      	ldr	r4, [r2, #24]
700141da:	42a3      	cmp	r3, r4
700141dc:	db01      	blt.n	700141e2 <__sfputc_r+0x16>
700141de:	290a      	cmp	r1, #10
700141e0:	d103      	bne.n	700141ea <__sfputc_r+0x1e>
700141e2:	f85d 4b04 	ldr.w	r4, [sp], #4
700141e6:	f000 bb7f 	b.w	700148e8 <__swbuf_r>
700141ea:	6813      	ldr	r3, [r2, #0]
700141ec:	1c58      	adds	r0, r3, #1
700141ee:	6010      	str	r0, [r2, #0]
700141f0:	7019      	strb	r1, [r3, #0]
700141f2:	4608      	mov	r0, r1
700141f4:	f85d 4b04 	ldr.w	r4, [sp], #4
700141f8:	4770      	bx	lr

700141fa <__sfputs_r>:
700141fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
700141fc:	4606      	mov	r6, r0
700141fe:	460f      	mov	r7, r1
70014200:	4614      	mov	r4, r2
70014202:	18d5      	adds	r5, r2, r3
70014204:	42ac      	cmp	r4, r5
70014206:	d101      	bne.n	7001420c <__sfputs_r+0x12>
70014208:	2000      	movs	r0, #0
7001420a:	e007      	b.n	7001421c <__sfputs_r+0x22>
7001420c:	f814 1b01 	ldrb.w	r1, [r4], #1
70014210:	463a      	mov	r2, r7
70014212:	4630      	mov	r0, r6
70014214:	f7ff ffda 	bl	700141cc <__sfputc_r>
70014218:	1c43      	adds	r3, r0, #1
7001421a:	d1f3      	bne.n	70014204 <__sfputs_r+0xa>
7001421c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

70014220 <_vfiprintf_r>:
70014220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
70014224:	460d      	mov	r5, r1
70014226:	b09d      	sub	sp, #116	@ 0x74
70014228:	4614      	mov	r4, r2
7001422a:	4698      	mov	r8, r3
7001422c:	4606      	mov	r6, r0
7001422e:	b118      	cbz	r0, 70014238 <_vfiprintf_r+0x18>
70014230:	6a03      	ldr	r3, [r0, #32]
70014232:	b90b      	cbnz	r3, 70014238 <_vfiprintf_r+0x18>
70014234:	f7ff fd36 	bl	70013ca4 <__sinit>
70014238:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
7001423a:	07d9      	lsls	r1, r3, #31
7001423c:	d405      	bmi.n	7001424a <_vfiprintf_r+0x2a>
7001423e:	89ab      	ldrh	r3, [r5, #12]
70014240:	059a      	lsls	r2, r3, #22
70014242:	d402      	bmi.n	7001424a <_vfiprintf_r+0x2a>
70014244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
70014246:	f7ff fe92 	bl	70013f6e <__retarget_lock_acquire_recursive>
7001424a:	89ab      	ldrh	r3, [r5, #12]
7001424c:	071b      	lsls	r3, r3, #28
7001424e:	d501      	bpl.n	70014254 <_vfiprintf_r+0x34>
70014250:	692b      	ldr	r3, [r5, #16]
70014252:	b99b      	cbnz	r3, 7001427c <_vfiprintf_r+0x5c>
70014254:	4629      	mov	r1, r5
70014256:	4630      	mov	r0, r6
70014258:	f000 fb84 	bl	70014964 <__swsetup_r>
7001425c:	b170      	cbz	r0, 7001427c <_vfiprintf_r+0x5c>
7001425e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
70014260:	07dc      	lsls	r4, r3, #31
70014262:	d504      	bpl.n	7001426e <_vfiprintf_r+0x4e>
70014264:	f04f 30ff 	mov.w	r0, #4294967295
70014268:	b01d      	add	sp, #116	@ 0x74
7001426a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
7001426e:	89ab      	ldrh	r3, [r5, #12]
70014270:	0598      	lsls	r0, r3, #22
70014272:	d4f7      	bmi.n	70014264 <_vfiprintf_r+0x44>
70014274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
70014276:	f7ff fe7b 	bl	70013f70 <__retarget_lock_release_recursive>
7001427a:	e7f3      	b.n	70014264 <_vfiprintf_r+0x44>
7001427c:	2300      	movs	r3, #0
7001427e:	9309      	str	r3, [sp, #36]	@ 0x24
70014280:	2320      	movs	r3, #32
70014282:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
70014286:	f8cd 800c 	str.w	r8, [sp, #12]
7001428a:	2330      	movs	r3, #48	@ 0x30
7001428c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 7001443c <_vfiprintf_r+0x21c>
70014290:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
70014294:	f04f 0901 	mov.w	r9, #1
70014298:	4623      	mov	r3, r4
7001429a:	469a      	mov	sl, r3
7001429c:	f813 2b01 	ldrb.w	r2, [r3], #1
700142a0:	b10a      	cbz	r2, 700142a6 <_vfiprintf_r+0x86>
700142a2:	2a25      	cmp	r2, #37	@ 0x25
700142a4:	d1f9      	bne.n	7001429a <_vfiprintf_r+0x7a>
700142a6:	ebba 0b04 	subs.w	fp, sl, r4
700142aa:	d00b      	beq.n	700142c4 <_vfiprintf_r+0xa4>
700142ac:	465b      	mov	r3, fp
700142ae:	4622      	mov	r2, r4
700142b0:	4629      	mov	r1, r5
700142b2:	4630      	mov	r0, r6
700142b4:	f7ff ffa1 	bl	700141fa <__sfputs_r>
700142b8:	3001      	adds	r0, #1
700142ba:	f000 80a7 	beq.w	7001440c <_vfiprintf_r+0x1ec>
700142be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
700142c0:	445a      	add	r2, fp
700142c2:	9209      	str	r2, [sp, #36]	@ 0x24
700142c4:	f89a 3000 	ldrb.w	r3, [sl]
700142c8:	2b00      	cmp	r3, #0
700142ca:	f000 809f 	beq.w	7001440c <_vfiprintf_r+0x1ec>
700142ce:	2300      	movs	r3, #0
700142d0:	f04f 32ff 	mov.w	r2, #4294967295
700142d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
700142d8:	f10a 0a01 	add.w	sl, sl, #1
700142dc:	9304      	str	r3, [sp, #16]
700142de:	9307      	str	r3, [sp, #28]
700142e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
700142e4:	931a      	str	r3, [sp, #104]	@ 0x68
700142e6:	4654      	mov	r4, sl
700142e8:	2205      	movs	r2, #5
700142ea:	f814 1b01 	ldrb.w	r1, [r4], #1
700142ee:	4853      	ldr	r0, [pc, #332]	@ (7001443c <_vfiprintf_r+0x21c>)
700142f0:	f7eb fffe 	bl	700002f0 <memchr>
700142f4:	9a04      	ldr	r2, [sp, #16]
700142f6:	b9d8      	cbnz	r0, 70014330 <_vfiprintf_r+0x110>
700142f8:	06d1      	lsls	r1, r2, #27
700142fa:	bf44      	itt	mi
700142fc:	2320      	movmi	r3, #32
700142fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
70014302:	0713      	lsls	r3, r2, #28
70014304:	bf44      	itt	mi
70014306:	232b      	movmi	r3, #43	@ 0x2b
70014308:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
7001430c:	f89a 3000 	ldrb.w	r3, [sl]
70014310:	2b2a      	cmp	r3, #42	@ 0x2a
70014312:	d015      	beq.n	70014340 <_vfiprintf_r+0x120>
70014314:	9a07      	ldr	r2, [sp, #28]
70014316:	4654      	mov	r4, sl
70014318:	2000      	movs	r0, #0
7001431a:	f04f 0c0a 	mov.w	ip, #10
7001431e:	4621      	mov	r1, r4
70014320:	f811 3b01 	ldrb.w	r3, [r1], #1
70014324:	3b30      	subs	r3, #48	@ 0x30
70014326:	2b09      	cmp	r3, #9
70014328:	d94b      	bls.n	700143c2 <_vfiprintf_r+0x1a2>
7001432a:	b1b0      	cbz	r0, 7001435a <_vfiprintf_r+0x13a>
7001432c:	9207      	str	r2, [sp, #28]
7001432e:	e014      	b.n	7001435a <_vfiprintf_r+0x13a>
70014330:	eba0 0308 	sub.w	r3, r0, r8
70014334:	fa09 f303 	lsl.w	r3, r9, r3
70014338:	4313      	orrs	r3, r2
7001433a:	9304      	str	r3, [sp, #16]
7001433c:	46a2      	mov	sl, r4
7001433e:	e7d2      	b.n	700142e6 <_vfiprintf_r+0xc6>
70014340:	9b03      	ldr	r3, [sp, #12]
70014342:	1d19      	adds	r1, r3, #4
70014344:	681b      	ldr	r3, [r3, #0]
70014346:	9103      	str	r1, [sp, #12]
70014348:	2b00      	cmp	r3, #0
7001434a:	bfbb      	ittet	lt
7001434c:	425b      	neglt	r3, r3
7001434e:	f042 0202 	orrlt.w	r2, r2, #2
70014352:	9307      	strge	r3, [sp, #28]
70014354:	9307      	strlt	r3, [sp, #28]
70014356:	bfb8      	it	lt
70014358:	9204      	strlt	r2, [sp, #16]
7001435a:	7823      	ldrb	r3, [r4, #0]
7001435c:	2b2e      	cmp	r3, #46	@ 0x2e
7001435e:	d10a      	bne.n	70014376 <_vfiprintf_r+0x156>
70014360:	7863      	ldrb	r3, [r4, #1]
70014362:	2b2a      	cmp	r3, #42	@ 0x2a
70014364:	d132      	bne.n	700143cc <_vfiprintf_r+0x1ac>
70014366:	9b03      	ldr	r3, [sp, #12]
70014368:	1d1a      	adds	r2, r3, #4
7001436a:	681b      	ldr	r3, [r3, #0]
7001436c:	9203      	str	r2, [sp, #12]
7001436e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
70014372:	3402      	adds	r4, #2
70014374:	9305      	str	r3, [sp, #20]
70014376:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 7001444c <_vfiprintf_r+0x22c>
7001437a:	7821      	ldrb	r1, [r4, #0]
7001437c:	2203      	movs	r2, #3
7001437e:	4650      	mov	r0, sl
70014380:	f7eb ffb6 	bl	700002f0 <memchr>
70014384:	b138      	cbz	r0, 70014396 <_vfiprintf_r+0x176>
70014386:	9b04      	ldr	r3, [sp, #16]
70014388:	eba0 000a 	sub.w	r0, r0, sl
7001438c:	2240      	movs	r2, #64	@ 0x40
7001438e:	4082      	lsls	r2, r0
70014390:	4313      	orrs	r3, r2
70014392:	3401      	adds	r4, #1
70014394:	9304      	str	r3, [sp, #16]
70014396:	f814 1b01 	ldrb.w	r1, [r4], #1
7001439a:	4829      	ldr	r0, [pc, #164]	@ (70014440 <_vfiprintf_r+0x220>)
7001439c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
700143a0:	2206      	movs	r2, #6
700143a2:	f7eb ffa5 	bl	700002f0 <memchr>
700143a6:	2800      	cmp	r0, #0
700143a8:	d03f      	beq.n	7001442a <_vfiprintf_r+0x20a>
700143aa:	4b26      	ldr	r3, [pc, #152]	@ (70014444 <_vfiprintf_r+0x224>)
700143ac:	bb1b      	cbnz	r3, 700143f6 <_vfiprintf_r+0x1d6>
700143ae:	9b03      	ldr	r3, [sp, #12]
700143b0:	3307      	adds	r3, #7
700143b2:	f023 0307 	bic.w	r3, r3, #7
700143b6:	3308      	adds	r3, #8
700143b8:	9303      	str	r3, [sp, #12]
700143ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
700143bc:	443b      	add	r3, r7
700143be:	9309      	str	r3, [sp, #36]	@ 0x24
700143c0:	e76a      	b.n	70014298 <_vfiprintf_r+0x78>
700143c2:	fb0c 3202 	mla	r2, ip, r2, r3
700143c6:	460c      	mov	r4, r1
700143c8:	2001      	movs	r0, #1
700143ca:	e7a8      	b.n	7001431e <_vfiprintf_r+0xfe>
700143cc:	2300      	movs	r3, #0
700143ce:	3401      	adds	r4, #1
700143d0:	9305      	str	r3, [sp, #20]
700143d2:	4619      	mov	r1, r3
700143d4:	f04f 0c0a 	mov.w	ip, #10
700143d8:	4620      	mov	r0, r4
700143da:	f810 2b01 	ldrb.w	r2, [r0], #1
700143de:	3a30      	subs	r2, #48	@ 0x30
700143e0:	2a09      	cmp	r2, #9
700143e2:	d903      	bls.n	700143ec <_vfiprintf_r+0x1cc>
700143e4:	2b00      	cmp	r3, #0
700143e6:	d0c6      	beq.n	70014376 <_vfiprintf_r+0x156>
700143e8:	9105      	str	r1, [sp, #20]
700143ea:	e7c4      	b.n	70014376 <_vfiprintf_r+0x156>
700143ec:	fb0c 2101 	mla	r1, ip, r1, r2
700143f0:	4604      	mov	r4, r0
700143f2:	2301      	movs	r3, #1
700143f4:	e7f0      	b.n	700143d8 <_vfiprintf_r+0x1b8>
700143f6:	ab03      	add	r3, sp, #12
700143f8:	9300      	str	r3, [sp, #0]
700143fa:	462a      	mov	r2, r5
700143fc:	4b12      	ldr	r3, [pc, #72]	@ (70014448 <_vfiprintf_r+0x228>)
700143fe:	a904      	add	r1, sp, #16
70014400:	4630      	mov	r0, r6
70014402:	f3af 8000 	nop.w
70014406:	4607      	mov	r7, r0
70014408:	1c78      	adds	r0, r7, #1
7001440a:	d1d6      	bne.n	700143ba <_vfiprintf_r+0x19a>
7001440c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
7001440e:	07d9      	lsls	r1, r3, #31
70014410:	d405      	bmi.n	7001441e <_vfiprintf_r+0x1fe>
70014412:	89ab      	ldrh	r3, [r5, #12]
70014414:	059a      	lsls	r2, r3, #22
70014416:	d402      	bmi.n	7001441e <_vfiprintf_r+0x1fe>
70014418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
7001441a:	f7ff fda9 	bl	70013f70 <__retarget_lock_release_recursive>
7001441e:	89ab      	ldrh	r3, [r5, #12]
70014420:	065b      	lsls	r3, r3, #25
70014422:	f53f af1f 	bmi.w	70014264 <_vfiprintf_r+0x44>
70014426:	9809      	ldr	r0, [sp, #36]	@ 0x24
70014428:	e71e      	b.n	70014268 <_vfiprintf_r+0x48>
7001442a:	ab03      	add	r3, sp, #12
7001442c:	9300      	str	r3, [sp, #0]
7001442e:	462a      	mov	r2, r5
70014430:	4b05      	ldr	r3, [pc, #20]	@ (70014448 <_vfiprintf_r+0x228>)
70014432:	a904      	add	r1, sp, #16
70014434:	4630      	mov	r0, r6
70014436:	f000 f879 	bl	7001452c <_printf_i>
7001443a:	e7e4      	b.n	70014406 <_vfiprintf_r+0x1e6>
7001443c:	7001741b 	.word	0x7001741b
70014440:	70017425 	.word	0x70017425
70014444:	00000000 	.word	0x00000000
70014448:	700141fb 	.word	0x700141fb
7001444c:	70017421 	.word	0x70017421

70014450 <_printf_common>:
70014450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
70014454:	4616      	mov	r6, r2
70014456:	4698      	mov	r8, r3
70014458:	688a      	ldr	r2, [r1, #8]
7001445a:	690b      	ldr	r3, [r1, #16]
7001445c:	f8dd 9020 	ldr.w	r9, [sp, #32]
70014460:	4293      	cmp	r3, r2
70014462:	bfb8      	it	lt
70014464:	4613      	movlt	r3, r2
70014466:	6033      	str	r3, [r6, #0]
70014468:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
7001446c:	4607      	mov	r7, r0
7001446e:	460c      	mov	r4, r1
70014470:	b10a      	cbz	r2, 70014476 <_printf_common+0x26>
70014472:	3301      	adds	r3, #1
70014474:	6033      	str	r3, [r6, #0]
70014476:	6823      	ldr	r3, [r4, #0]
70014478:	0699      	lsls	r1, r3, #26
7001447a:	bf42      	ittt	mi
7001447c:	6833      	ldrmi	r3, [r6, #0]
7001447e:	3302      	addmi	r3, #2
70014480:	6033      	strmi	r3, [r6, #0]
70014482:	6825      	ldr	r5, [r4, #0]
70014484:	f015 0506 	ands.w	r5, r5, #6
70014488:	d106      	bne.n	70014498 <_printf_common+0x48>
7001448a:	f104 0a19 	add.w	sl, r4, #25
7001448e:	68e3      	ldr	r3, [r4, #12]
70014490:	6832      	ldr	r2, [r6, #0]
70014492:	1a9b      	subs	r3, r3, r2
70014494:	42ab      	cmp	r3, r5
70014496:	dc26      	bgt.n	700144e6 <_printf_common+0x96>
70014498:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
7001449c:	6822      	ldr	r2, [r4, #0]
7001449e:	3b00      	subs	r3, #0
700144a0:	bf18      	it	ne
700144a2:	2301      	movne	r3, #1
700144a4:	0692      	lsls	r2, r2, #26
700144a6:	d42b      	bmi.n	70014500 <_printf_common+0xb0>
700144a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
700144ac:	4641      	mov	r1, r8
700144ae:	4638      	mov	r0, r7
700144b0:	47c8      	blx	r9
700144b2:	3001      	adds	r0, #1
700144b4:	d01e      	beq.n	700144f4 <_printf_common+0xa4>
700144b6:	6823      	ldr	r3, [r4, #0]
700144b8:	6922      	ldr	r2, [r4, #16]
700144ba:	f003 0306 	and.w	r3, r3, #6
700144be:	2b04      	cmp	r3, #4
700144c0:	bf02      	ittt	eq
700144c2:	68e5      	ldreq	r5, [r4, #12]
700144c4:	6833      	ldreq	r3, [r6, #0]
700144c6:	1aed      	subeq	r5, r5, r3
700144c8:	68a3      	ldr	r3, [r4, #8]
700144ca:	bf0c      	ite	eq
700144cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
700144d0:	2500      	movne	r5, #0
700144d2:	4293      	cmp	r3, r2
700144d4:	bfc4      	itt	gt
700144d6:	1a9b      	subgt	r3, r3, r2
700144d8:	18ed      	addgt	r5, r5, r3
700144da:	2600      	movs	r6, #0
700144dc:	341a      	adds	r4, #26
700144de:	42b5      	cmp	r5, r6
700144e0:	d11a      	bne.n	70014518 <_printf_common+0xc8>
700144e2:	2000      	movs	r0, #0
700144e4:	e008      	b.n	700144f8 <_printf_common+0xa8>
700144e6:	2301      	movs	r3, #1
700144e8:	4652      	mov	r2, sl
700144ea:	4641      	mov	r1, r8
700144ec:	4638      	mov	r0, r7
700144ee:	47c8      	blx	r9
700144f0:	3001      	adds	r0, #1
700144f2:	d103      	bne.n	700144fc <_printf_common+0xac>
700144f4:	f04f 30ff 	mov.w	r0, #4294967295
700144f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
700144fc:	3501      	adds	r5, #1
700144fe:	e7c6      	b.n	7001448e <_printf_common+0x3e>
70014500:	18e1      	adds	r1, r4, r3
70014502:	1c5a      	adds	r2, r3, #1
70014504:	2030      	movs	r0, #48	@ 0x30
70014506:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
7001450a:	4422      	add	r2, r4
7001450c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
70014510:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
70014514:	3302      	adds	r3, #2
70014516:	e7c7      	b.n	700144a8 <_printf_common+0x58>
70014518:	2301      	movs	r3, #1
7001451a:	4622      	mov	r2, r4
7001451c:	4641      	mov	r1, r8
7001451e:	4638      	mov	r0, r7
70014520:	47c8      	blx	r9
70014522:	3001      	adds	r0, #1
70014524:	d0e6      	beq.n	700144f4 <_printf_common+0xa4>
70014526:	3601      	adds	r6, #1
70014528:	e7d9      	b.n	700144de <_printf_common+0x8e>
	...

7001452c <_printf_i>:
7001452c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
70014530:	7e0f      	ldrb	r7, [r1, #24]
70014532:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
70014534:	2f78      	cmp	r7, #120	@ 0x78
70014536:	4691      	mov	r9, r2
70014538:	4680      	mov	r8, r0
7001453a:	460c      	mov	r4, r1
7001453c:	469a      	mov	sl, r3
7001453e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
70014542:	d807      	bhi.n	70014554 <_printf_i+0x28>
70014544:	2f62      	cmp	r7, #98	@ 0x62
70014546:	d80a      	bhi.n	7001455e <_printf_i+0x32>
70014548:	2f00      	cmp	r7, #0
7001454a:	f000 80d2 	beq.w	700146f2 <_printf_i+0x1c6>
7001454e:	2f58      	cmp	r7, #88	@ 0x58
70014550:	f000 80b9 	beq.w	700146c6 <_printf_i+0x19a>
70014554:	f104 0642 	add.w	r6, r4, #66	@ 0x42
70014558:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
7001455c:	e03a      	b.n	700145d4 <_printf_i+0xa8>
7001455e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
70014562:	2b15      	cmp	r3, #21
70014564:	d8f6      	bhi.n	70014554 <_printf_i+0x28>
70014566:	a101      	add	r1, pc, #4	@ (adr r1, 7001456c <_printf_i+0x40>)
70014568:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
7001456c:	700145c5 	.word	0x700145c5
70014570:	700145d9 	.word	0x700145d9
70014574:	70014555 	.word	0x70014555
70014578:	70014555 	.word	0x70014555
7001457c:	70014555 	.word	0x70014555
70014580:	70014555 	.word	0x70014555
70014584:	700145d9 	.word	0x700145d9
70014588:	70014555 	.word	0x70014555
7001458c:	70014555 	.word	0x70014555
70014590:	70014555 	.word	0x70014555
70014594:	70014555 	.word	0x70014555
70014598:	700146d9 	.word	0x700146d9
7001459c:	70014603 	.word	0x70014603
700145a0:	70014693 	.word	0x70014693
700145a4:	70014555 	.word	0x70014555
700145a8:	70014555 	.word	0x70014555
700145ac:	700146fb 	.word	0x700146fb
700145b0:	70014555 	.word	0x70014555
700145b4:	70014603 	.word	0x70014603
700145b8:	70014555 	.word	0x70014555
700145bc:	70014555 	.word	0x70014555
700145c0:	7001469b 	.word	0x7001469b
700145c4:	6833      	ldr	r3, [r6, #0]
700145c6:	1d1a      	adds	r2, r3, #4
700145c8:	681b      	ldr	r3, [r3, #0]
700145ca:	6032      	str	r2, [r6, #0]
700145cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
700145d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
700145d4:	2301      	movs	r3, #1
700145d6:	e09d      	b.n	70014714 <_printf_i+0x1e8>
700145d8:	6833      	ldr	r3, [r6, #0]
700145da:	6820      	ldr	r0, [r4, #0]
700145dc:	1d19      	adds	r1, r3, #4
700145de:	6031      	str	r1, [r6, #0]
700145e0:	0606      	lsls	r6, r0, #24
700145e2:	d501      	bpl.n	700145e8 <_printf_i+0xbc>
700145e4:	681d      	ldr	r5, [r3, #0]
700145e6:	e003      	b.n	700145f0 <_printf_i+0xc4>
700145e8:	0645      	lsls	r5, r0, #25
700145ea:	d5fb      	bpl.n	700145e4 <_printf_i+0xb8>
700145ec:	f9b3 5000 	ldrsh.w	r5, [r3]
700145f0:	2d00      	cmp	r5, #0
700145f2:	da03      	bge.n	700145fc <_printf_i+0xd0>
700145f4:	232d      	movs	r3, #45	@ 0x2d
700145f6:	426d      	negs	r5, r5
700145f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
700145fc:	4859      	ldr	r0, [pc, #356]	@ (70014764 <_printf_i+0x238>)
700145fe:	230a      	movs	r3, #10
70014600:	e011      	b.n	70014626 <_printf_i+0xfa>
70014602:	6821      	ldr	r1, [r4, #0]
70014604:	6833      	ldr	r3, [r6, #0]
70014606:	0608      	lsls	r0, r1, #24
70014608:	f853 5b04 	ldr.w	r5, [r3], #4
7001460c:	d402      	bmi.n	70014614 <_printf_i+0xe8>
7001460e:	0649      	lsls	r1, r1, #25
70014610:	bf48      	it	mi
70014612:	b2ad      	uxthmi	r5, r5
70014614:	2f6f      	cmp	r7, #111	@ 0x6f
70014616:	4853      	ldr	r0, [pc, #332]	@ (70014764 <_printf_i+0x238>)
70014618:	6033      	str	r3, [r6, #0]
7001461a:	bf14      	ite	ne
7001461c:	230a      	movne	r3, #10
7001461e:	2308      	moveq	r3, #8
70014620:	2100      	movs	r1, #0
70014622:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
70014626:	6866      	ldr	r6, [r4, #4]
70014628:	60a6      	str	r6, [r4, #8]
7001462a:	2e00      	cmp	r6, #0
7001462c:	bfa2      	ittt	ge
7001462e:	6821      	ldrge	r1, [r4, #0]
70014630:	f021 0104 	bicge.w	r1, r1, #4
70014634:	6021      	strge	r1, [r4, #0]
70014636:	b90d      	cbnz	r5, 7001463c <_printf_i+0x110>
70014638:	2e00      	cmp	r6, #0
7001463a:	d04b      	beq.n	700146d4 <_printf_i+0x1a8>
7001463c:	4616      	mov	r6, r2
7001463e:	fbb5 f1f3 	udiv	r1, r5, r3
70014642:	fb03 5711 	mls	r7, r3, r1, r5
70014646:	5dc7      	ldrb	r7, [r0, r7]
70014648:	f806 7d01 	strb.w	r7, [r6, #-1]!
7001464c:	462f      	mov	r7, r5
7001464e:	42bb      	cmp	r3, r7
70014650:	460d      	mov	r5, r1
70014652:	d9f4      	bls.n	7001463e <_printf_i+0x112>
70014654:	2b08      	cmp	r3, #8
70014656:	d10b      	bne.n	70014670 <_printf_i+0x144>
70014658:	6823      	ldr	r3, [r4, #0]
7001465a:	07df      	lsls	r7, r3, #31
7001465c:	d508      	bpl.n	70014670 <_printf_i+0x144>
7001465e:	6923      	ldr	r3, [r4, #16]
70014660:	6861      	ldr	r1, [r4, #4]
70014662:	4299      	cmp	r1, r3
70014664:	bfde      	ittt	le
70014666:	2330      	movle	r3, #48	@ 0x30
70014668:	f806 3c01 	strble.w	r3, [r6, #-1]
7001466c:	f106 36ff 	addle.w	r6, r6, #4294967295
70014670:	1b92      	subs	r2, r2, r6
70014672:	6122      	str	r2, [r4, #16]
70014674:	f8cd a000 	str.w	sl, [sp]
70014678:	464b      	mov	r3, r9
7001467a:	aa03      	add	r2, sp, #12
7001467c:	4621      	mov	r1, r4
7001467e:	4640      	mov	r0, r8
70014680:	f7ff fee6 	bl	70014450 <_printf_common>
70014684:	3001      	adds	r0, #1
70014686:	d14a      	bne.n	7001471e <_printf_i+0x1f2>
70014688:	f04f 30ff 	mov.w	r0, #4294967295
7001468c:	b004      	add	sp, #16
7001468e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
70014692:	6823      	ldr	r3, [r4, #0]
70014694:	f043 0320 	orr.w	r3, r3, #32
70014698:	6023      	str	r3, [r4, #0]
7001469a:	4833      	ldr	r0, [pc, #204]	@ (70014768 <_printf_i+0x23c>)
7001469c:	2778      	movs	r7, #120	@ 0x78
7001469e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
700146a2:	6823      	ldr	r3, [r4, #0]
700146a4:	6831      	ldr	r1, [r6, #0]
700146a6:	061f      	lsls	r7, r3, #24
700146a8:	f851 5b04 	ldr.w	r5, [r1], #4
700146ac:	d402      	bmi.n	700146b4 <_printf_i+0x188>
700146ae:	065f      	lsls	r7, r3, #25
700146b0:	bf48      	it	mi
700146b2:	b2ad      	uxthmi	r5, r5
700146b4:	6031      	str	r1, [r6, #0]
700146b6:	07d9      	lsls	r1, r3, #31
700146b8:	bf44      	itt	mi
700146ba:	f043 0320 	orrmi.w	r3, r3, #32
700146be:	6023      	strmi	r3, [r4, #0]
700146c0:	b11d      	cbz	r5, 700146ca <_printf_i+0x19e>
700146c2:	2310      	movs	r3, #16
700146c4:	e7ac      	b.n	70014620 <_printf_i+0xf4>
700146c6:	4827      	ldr	r0, [pc, #156]	@ (70014764 <_printf_i+0x238>)
700146c8:	e7e9      	b.n	7001469e <_printf_i+0x172>
700146ca:	6823      	ldr	r3, [r4, #0]
700146cc:	f023 0320 	bic.w	r3, r3, #32
700146d0:	6023      	str	r3, [r4, #0]
700146d2:	e7f6      	b.n	700146c2 <_printf_i+0x196>
700146d4:	4616      	mov	r6, r2
700146d6:	e7bd      	b.n	70014654 <_printf_i+0x128>
700146d8:	6833      	ldr	r3, [r6, #0]
700146da:	6825      	ldr	r5, [r4, #0]
700146dc:	6961      	ldr	r1, [r4, #20]
700146de:	1d18      	adds	r0, r3, #4
700146e0:	6030      	str	r0, [r6, #0]
700146e2:	062e      	lsls	r6, r5, #24
700146e4:	681b      	ldr	r3, [r3, #0]
700146e6:	d501      	bpl.n	700146ec <_printf_i+0x1c0>
700146e8:	6019      	str	r1, [r3, #0]
700146ea:	e002      	b.n	700146f2 <_printf_i+0x1c6>
700146ec:	0668      	lsls	r0, r5, #25
700146ee:	d5fb      	bpl.n	700146e8 <_printf_i+0x1bc>
700146f0:	8019      	strh	r1, [r3, #0]
700146f2:	2300      	movs	r3, #0
700146f4:	6123      	str	r3, [r4, #16]
700146f6:	4616      	mov	r6, r2
700146f8:	e7bc      	b.n	70014674 <_printf_i+0x148>
700146fa:	6833      	ldr	r3, [r6, #0]
700146fc:	1d1a      	adds	r2, r3, #4
700146fe:	6032      	str	r2, [r6, #0]
70014700:	681e      	ldr	r6, [r3, #0]
70014702:	6862      	ldr	r2, [r4, #4]
70014704:	2100      	movs	r1, #0
70014706:	4630      	mov	r0, r6
70014708:	f7eb fdf2 	bl	700002f0 <memchr>
7001470c:	b108      	cbz	r0, 70014712 <_printf_i+0x1e6>
7001470e:	1b80      	subs	r0, r0, r6
70014710:	6060      	str	r0, [r4, #4]
70014712:	6863      	ldr	r3, [r4, #4]
70014714:	6123      	str	r3, [r4, #16]
70014716:	2300      	movs	r3, #0
70014718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
7001471c:	e7aa      	b.n	70014674 <_printf_i+0x148>
7001471e:	6923      	ldr	r3, [r4, #16]
70014720:	4632      	mov	r2, r6
70014722:	4649      	mov	r1, r9
70014724:	4640      	mov	r0, r8
70014726:	47d0      	blx	sl
70014728:	3001      	adds	r0, #1
7001472a:	d0ad      	beq.n	70014688 <_printf_i+0x15c>
7001472c:	6823      	ldr	r3, [r4, #0]
7001472e:	079b      	lsls	r3, r3, #30
70014730:	d413      	bmi.n	7001475a <_printf_i+0x22e>
70014732:	68e0      	ldr	r0, [r4, #12]
70014734:	9b03      	ldr	r3, [sp, #12]
70014736:	4298      	cmp	r0, r3
70014738:	bfb8      	it	lt
7001473a:	4618      	movlt	r0, r3
7001473c:	e7a6      	b.n	7001468c <_printf_i+0x160>
7001473e:	2301      	movs	r3, #1
70014740:	4632      	mov	r2, r6
70014742:	4649      	mov	r1, r9
70014744:	4640      	mov	r0, r8
70014746:	47d0      	blx	sl
70014748:	3001      	adds	r0, #1
7001474a:	d09d      	beq.n	70014688 <_printf_i+0x15c>
7001474c:	3501      	adds	r5, #1
7001474e:	68e3      	ldr	r3, [r4, #12]
70014750:	9903      	ldr	r1, [sp, #12]
70014752:	1a5b      	subs	r3, r3, r1
70014754:	42ab      	cmp	r3, r5
70014756:	dcf2      	bgt.n	7001473e <_printf_i+0x212>
70014758:	e7eb      	b.n	70014732 <_printf_i+0x206>
7001475a:	2500      	movs	r5, #0
7001475c:	f104 0619 	add.w	r6, r4, #25
70014760:	e7f5      	b.n	7001474e <_printf_i+0x222>
70014762:	bf00      	nop
70014764:	7001742c 	.word	0x7001742c
70014768:	7001743d 	.word	0x7001743d

7001476c <__sflush_r>:
7001476c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
70014770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
70014774:	0716      	lsls	r6, r2, #28
70014776:	4605      	mov	r5, r0
70014778:	460c      	mov	r4, r1
7001477a:	d454      	bmi.n	70014826 <__sflush_r+0xba>
7001477c:	684b      	ldr	r3, [r1, #4]
7001477e:	2b00      	cmp	r3, #0
70014780:	dc02      	bgt.n	70014788 <__sflush_r+0x1c>
70014782:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
70014784:	2b00      	cmp	r3, #0
70014786:	dd48      	ble.n	7001481a <__sflush_r+0xae>
70014788:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
7001478a:	2e00      	cmp	r6, #0
7001478c:	d045      	beq.n	7001481a <__sflush_r+0xae>
7001478e:	2300      	movs	r3, #0
70014790:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
70014794:	682f      	ldr	r7, [r5, #0]
70014796:	6a21      	ldr	r1, [r4, #32]
70014798:	602b      	str	r3, [r5, #0]
7001479a:	d030      	beq.n	700147fe <__sflush_r+0x92>
7001479c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
7001479e:	89a3      	ldrh	r3, [r4, #12]
700147a0:	0759      	lsls	r1, r3, #29
700147a2:	d505      	bpl.n	700147b0 <__sflush_r+0x44>
700147a4:	6863      	ldr	r3, [r4, #4]
700147a6:	1ad2      	subs	r2, r2, r3
700147a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
700147aa:	b10b      	cbz	r3, 700147b0 <__sflush_r+0x44>
700147ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
700147ae:	1ad2      	subs	r2, r2, r3
700147b0:	2300      	movs	r3, #0
700147b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
700147b4:	6a21      	ldr	r1, [r4, #32]
700147b6:	4628      	mov	r0, r5
700147b8:	47b0      	blx	r6
700147ba:	1c43      	adds	r3, r0, #1
700147bc:	89a3      	ldrh	r3, [r4, #12]
700147be:	d106      	bne.n	700147ce <__sflush_r+0x62>
700147c0:	6829      	ldr	r1, [r5, #0]
700147c2:	291d      	cmp	r1, #29
700147c4:	d82b      	bhi.n	7001481e <__sflush_r+0xb2>
700147c6:	4a2a      	ldr	r2, [pc, #168]	@ (70014870 <__sflush_r+0x104>)
700147c8:	410a      	asrs	r2, r1
700147ca:	07d6      	lsls	r6, r2, #31
700147cc:	d427      	bmi.n	7001481e <__sflush_r+0xb2>
700147ce:	2200      	movs	r2, #0
700147d0:	6062      	str	r2, [r4, #4]
700147d2:	04d9      	lsls	r1, r3, #19
700147d4:	6922      	ldr	r2, [r4, #16]
700147d6:	6022      	str	r2, [r4, #0]
700147d8:	d504      	bpl.n	700147e4 <__sflush_r+0x78>
700147da:	1c42      	adds	r2, r0, #1
700147dc:	d101      	bne.n	700147e2 <__sflush_r+0x76>
700147de:	682b      	ldr	r3, [r5, #0]
700147e0:	b903      	cbnz	r3, 700147e4 <__sflush_r+0x78>
700147e2:	6560      	str	r0, [r4, #84]	@ 0x54
700147e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
700147e6:	602f      	str	r7, [r5, #0]
700147e8:	b1b9      	cbz	r1, 7001481a <__sflush_r+0xae>
700147ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
700147ee:	4299      	cmp	r1, r3
700147f0:	d002      	beq.n	700147f8 <__sflush_r+0x8c>
700147f2:	4628      	mov	r0, r5
700147f4:	f7ff fbea 	bl	70013fcc <_free_r>
700147f8:	2300      	movs	r3, #0
700147fa:	6363      	str	r3, [r4, #52]	@ 0x34
700147fc:	e00d      	b.n	7001481a <__sflush_r+0xae>
700147fe:	2301      	movs	r3, #1
70014800:	4628      	mov	r0, r5
70014802:	47b0      	blx	r6
70014804:	4602      	mov	r2, r0
70014806:	1c50      	adds	r0, r2, #1
70014808:	d1c9      	bne.n	7001479e <__sflush_r+0x32>
7001480a:	682b      	ldr	r3, [r5, #0]
7001480c:	2b00      	cmp	r3, #0
7001480e:	d0c6      	beq.n	7001479e <__sflush_r+0x32>
70014810:	2b1d      	cmp	r3, #29
70014812:	d001      	beq.n	70014818 <__sflush_r+0xac>
70014814:	2b16      	cmp	r3, #22
70014816:	d11e      	bne.n	70014856 <__sflush_r+0xea>
70014818:	602f      	str	r7, [r5, #0]
7001481a:	2000      	movs	r0, #0
7001481c:	e022      	b.n	70014864 <__sflush_r+0xf8>
7001481e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
70014822:	b21b      	sxth	r3, r3
70014824:	e01b      	b.n	7001485e <__sflush_r+0xf2>
70014826:	690f      	ldr	r7, [r1, #16]
70014828:	2f00      	cmp	r7, #0
7001482a:	d0f6      	beq.n	7001481a <__sflush_r+0xae>
7001482c:	0793      	lsls	r3, r2, #30
7001482e:	680e      	ldr	r6, [r1, #0]
70014830:	bf08      	it	eq
70014832:	694b      	ldreq	r3, [r1, #20]
70014834:	600f      	str	r7, [r1, #0]
70014836:	bf18      	it	ne
70014838:	2300      	movne	r3, #0
7001483a:	eba6 0807 	sub.w	r8, r6, r7
7001483e:	608b      	str	r3, [r1, #8]
70014840:	f1b8 0f00 	cmp.w	r8, #0
70014844:	dde9      	ble.n	7001481a <__sflush_r+0xae>
70014846:	6a21      	ldr	r1, [r4, #32]
70014848:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
7001484a:	4643      	mov	r3, r8
7001484c:	463a      	mov	r2, r7
7001484e:	4628      	mov	r0, r5
70014850:	47b0      	blx	r6
70014852:	2800      	cmp	r0, #0
70014854:	dc08      	bgt.n	70014868 <__sflush_r+0xfc>
70014856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
7001485a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
7001485e:	81a3      	strh	r3, [r4, #12]
70014860:	f04f 30ff 	mov.w	r0, #4294967295
70014864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
70014868:	4407      	add	r7, r0
7001486a:	eba8 0800 	sub.w	r8, r8, r0
7001486e:	e7e7      	b.n	70014840 <__sflush_r+0xd4>
70014870:	dfbffffe 	.word	0xdfbffffe

70014874 <_fflush_r>:
70014874:	b538      	push	{r3, r4, r5, lr}
70014876:	690b      	ldr	r3, [r1, #16]
70014878:	4605      	mov	r5, r0
7001487a:	460c      	mov	r4, r1
7001487c:	b913      	cbnz	r3, 70014884 <_fflush_r+0x10>
7001487e:	2500      	movs	r5, #0
70014880:	4628      	mov	r0, r5
70014882:	bd38      	pop	{r3, r4, r5, pc}
70014884:	b118      	cbz	r0, 7001488e <_fflush_r+0x1a>
70014886:	6a03      	ldr	r3, [r0, #32]
70014888:	b90b      	cbnz	r3, 7001488e <_fflush_r+0x1a>
7001488a:	f7ff fa0b 	bl	70013ca4 <__sinit>
7001488e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
70014892:	2b00      	cmp	r3, #0
70014894:	d0f3      	beq.n	7001487e <_fflush_r+0xa>
70014896:	6e62      	ldr	r2, [r4, #100]	@ 0x64
70014898:	07d0      	lsls	r0, r2, #31
7001489a:	d404      	bmi.n	700148a6 <_fflush_r+0x32>
7001489c:	0599      	lsls	r1, r3, #22
7001489e:	d402      	bmi.n	700148a6 <_fflush_r+0x32>
700148a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
700148a2:	f7ff fb64 	bl	70013f6e <__retarget_lock_acquire_recursive>
700148a6:	4628      	mov	r0, r5
700148a8:	4621      	mov	r1, r4
700148aa:	f7ff ff5f 	bl	7001476c <__sflush_r>
700148ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
700148b0:	07da      	lsls	r2, r3, #31
700148b2:	4605      	mov	r5, r0
700148b4:	d4e4      	bmi.n	70014880 <_fflush_r+0xc>
700148b6:	89a3      	ldrh	r3, [r4, #12]
700148b8:	059b      	lsls	r3, r3, #22
700148ba:	d4e1      	bmi.n	70014880 <_fflush_r+0xc>
700148bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
700148be:	f7ff fb57 	bl	70013f70 <__retarget_lock_release_recursive>
700148c2:	e7dd      	b.n	70014880 <_fflush_r+0xc>

700148c4 <fiprintf>:
700148c4:	b40e      	push	{r1, r2, r3}
700148c6:	b503      	push	{r0, r1, lr}
700148c8:	4601      	mov	r1, r0
700148ca:	ab03      	add	r3, sp, #12
700148cc:	4805      	ldr	r0, [pc, #20]	@ (700148e4 <fiprintf+0x20>)
700148ce:	f853 2b04 	ldr.w	r2, [r3], #4
700148d2:	6800      	ldr	r0, [r0, #0]
700148d4:	9301      	str	r3, [sp, #4]
700148d6:	f7ff fca3 	bl	70014220 <_vfiprintf_r>
700148da:	b002      	add	sp, #8
700148dc:	f85d eb04 	ldr.w	lr, [sp], #4
700148e0:	b003      	add	sp, #12
700148e2:	4770      	bx	lr
700148e4:	24000040 	.word	0x24000040

700148e8 <__swbuf_r>:
700148e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
700148ea:	460e      	mov	r6, r1
700148ec:	4614      	mov	r4, r2
700148ee:	4605      	mov	r5, r0
700148f0:	b118      	cbz	r0, 700148fa <__swbuf_r+0x12>
700148f2:	6a03      	ldr	r3, [r0, #32]
700148f4:	b90b      	cbnz	r3, 700148fa <__swbuf_r+0x12>
700148f6:	f7ff f9d5 	bl	70013ca4 <__sinit>
700148fa:	69a3      	ldr	r3, [r4, #24]
700148fc:	60a3      	str	r3, [r4, #8]
700148fe:	89a3      	ldrh	r3, [r4, #12]
70014900:	071a      	lsls	r2, r3, #28
70014902:	d501      	bpl.n	70014908 <__swbuf_r+0x20>
70014904:	6923      	ldr	r3, [r4, #16]
70014906:	b943      	cbnz	r3, 7001491a <__swbuf_r+0x32>
70014908:	4621      	mov	r1, r4
7001490a:	4628      	mov	r0, r5
7001490c:	f000 f82a 	bl	70014964 <__swsetup_r>
70014910:	b118      	cbz	r0, 7001491a <__swbuf_r+0x32>
70014912:	f04f 37ff 	mov.w	r7, #4294967295
70014916:	4638      	mov	r0, r7
70014918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
7001491a:	6823      	ldr	r3, [r4, #0]
7001491c:	6922      	ldr	r2, [r4, #16]
7001491e:	1a98      	subs	r0, r3, r2
70014920:	6963      	ldr	r3, [r4, #20]
70014922:	b2f6      	uxtb	r6, r6
70014924:	4283      	cmp	r3, r0
70014926:	4637      	mov	r7, r6
70014928:	dc05      	bgt.n	70014936 <__swbuf_r+0x4e>
7001492a:	4621      	mov	r1, r4
7001492c:	4628      	mov	r0, r5
7001492e:	f7ff ffa1 	bl	70014874 <_fflush_r>
70014932:	2800      	cmp	r0, #0
70014934:	d1ed      	bne.n	70014912 <__swbuf_r+0x2a>
70014936:	68a3      	ldr	r3, [r4, #8]
70014938:	3b01      	subs	r3, #1
7001493a:	60a3      	str	r3, [r4, #8]
7001493c:	6823      	ldr	r3, [r4, #0]
7001493e:	1c5a      	adds	r2, r3, #1
70014940:	6022      	str	r2, [r4, #0]
70014942:	701e      	strb	r6, [r3, #0]
70014944:	6962      	ldr	r2, [r4, #20]
70014946:	1c43      	adds	r3, r0, #1
70014948:	429a      	cmp	r2, r3
7001494a:	d004      	beq.n	70014956 <__swbuf_r+0x6e>
7001494c:	89a3      	ldrh	r3, [r4, #12]
7001494e:	07db      	lsls	r3, r3, #31
70014950:	d5e1      	bpl.n	70014916 <__swbuf_r+0x2e>
70014952:	2e0a      	cmp	r6, #10
70014954:	d1df      	bne.n	70014916 <__swbuf_r+0x2e>
70014956:	4621      	mov	r1, r4
70014958:	4628      	mov	r0, r5
7001495a:	f7ff ff8b 	bl	70014874 <_fflush_r>
7001495e:	2800      	cmp	r0, #0
70014960:	d0d9      	beq.n	70014916 <__swbuf_r+0x2e>
70014962:	e7d6      	b.n	70014912 <__swbuf_r+0x2a>

70014964 <__swsetup_r>:
70014964:	b538      	push	{r3, r4, r5, lr}
70014966:	4b29      	ldr	r3, [pc, #164]	@ (70014a0c <__swsetup_r+0xa8>)
70014968:	4605      	mov	r5, r0
7001496a:	6818      	ldr	r0, [r3, #0]
7001496c:	460c      	mov	r4, r1
7001496e:	b118      	cbz	r0, 70014978 <__swsetup_r+0x14>
70014970:	6a03      	ldr	r3, [r0, #32]
70014972:	b90b      	cbnz	r3, 70014978 <__swsetup_r+0x14>
70014974:	f7ff f996 	bl	70013ca4 <__sinit>
70014978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
7001497c:	0719      	lsls	r1, r3, #28
7001497e:	d422      	bmi.n	700149c6 <__swsetup_r+0x62>
70014980:	06da      	lsls	r2, r3, #27
70014982:	d407      	bmi.n	70014994 <__swsetup_r+0x30>
70014984:	2209      	movs	r2, #9
70014986:	602a      	str	r2, [r5, #0]
70014988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
7001498c:	81a3      	strh	r3, [r4, #12]
7001498e:	f04f 30ff 	mov.w	r0, #4294967295
70014992:	e033      	b.n	700149fc <__swsetup_r+0x98>
70014994:	0758      	lsls	r0, r3, #29
70014996:	d512      	bpl.n	700149be <__swsetup_r+0x5a>
70014998:	6b61      	ldr	r1, [r4, #52]	@ 0x34
7001499a:	b141      	cbz	r1, 700149ae <__swsetup_r+0x4a>
7001499c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
700149a0:	4299      	cmp	r1, r3
700149a2:	d002      	beq.n	700149aa <__swsetup_r+0x46>
700149a4:	4628      	mov	r0, r5
700149a6:	f7ff fb11 	bl	70013fcc <_free_r>
700149aa:	2300      	movs	r3, #0
700149ac:	6363      	str	r3, [r4, #52]	@ 0x34
700149ae:	89a3      	ldrh	r3, [r4, #12]
700149b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
700149b4:	81a3      	strh	r3, [r4, #12]
700149b6:	2300      	movs	r3, #0
700149b8:	6063      	str	r3, [r4, #4]
700149ba:	6923      	ldr	r3, [r4, #16]
700149bc:	6023      	str	r3, [r4, #0]
700149be:	89a3      	ldrh	r3, [r4, #12]
700149c0:	f043 0308 	orr.w	r3, r3, #8
700149c4:	81a3      	strh	r3, [r4, #12]
700149c6:	6923      	ldr	r3, [r4, #16]
700149c8:	b94b      	cbnz	r3, 700149de <__swsetup_r+0x7a>
700149ca:	89a3      	ldrh	r3, [r4, #12]
700149cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
700149d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
700149d4:	d003      	beq.n	700149de <__swsetup_r+0x7a>
700149d6:	4621      	mov	r1, r4
700149d8:	4628      	mov	r0, r5
700149da:	f000 f856 	bl	70014a8a <__smakebuf_r>
700149de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
700149e2:	f013 0201 	ands.w	r2, r3, #1
700149e6:	d00a      	beq.n	700149fe <__swsetup_r+0x9a>
700149e8:	2200      	movs	r2, #0
700149ea:	60a2      	str	r2, [r4, #8]
700149ec:	6962      	ldr	r2, [r4, #20]
700149ee:	4252      	negs	r2, r2
700149f0:	61a2      	str	r2, [r4, #24]
700149f2:	6922      	ldr	r2, [r4, #16]
700149f4:	b942      	cbnz	r2, 70014a08 <__swsetup_r+0xa4>
700149f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
700149fa:	d1c5      	bne.n	70014988 <__swsetup_r+0x24>
700149fc:	bd38      	pop	{r3, r4, r5, pc}
700149fe:	0799      	lsls	r1, r3, #30
70014a00:	bf58      	it	pl
70014a02:	6962      	ldrpl	r2, [r4, #20]
70014a04:	60a2      	str	r2, [r4, #8]
70014a06:	e7f4      	b.n	700149f2 <__swsetup_r+0x8e>
70014a08:	2000      	movs	r0, #0
70014a0a:	e7f7      	b.n	700149fc <__swsetup_r+0x98>
70014a0c:	24000040 	.word	0x24000040

70014a10 <_sbrk_r>:
70014a10:	b538      	push	{r3, r4, r5, lr}
70014a12:	4d06      	ldr	r5, [pc, #24]	@ (70014a2c <_sbrk_r+0x1c>)
70014a14:	2300      	movs	r3, #0
70014a16:	4604      	mov	r4, r0
70014a18:	4608      	mov	r0, r1
70014a1a:	602b      	str	r3, [r5, #0]
70014a1c:	f7eb ffde 	bl	700009dc <_sbrk>
70014a20:	1c43      	adds	r3, r0, #1
70014a22:	d102      	bne.n	70014a2a <_sbrk_r+0x1a>
70014a24:	682b      	ldr	r3, [r5, #0]
70014a26:	b103      	cbz	r3, 70014a2a <_sbrk_r+0x1a>
70014a28:	6023      	str	r3, [r4, #0]
70014a2a:	bd38      	pop	{r3, r4, r5, pc}
70014a2c:	24008624 	.word	0x24008624

70014a30 <abort>:
70014a30:	b508      	push	{r3, lr}
70014a32:	2006      	movs	r0, #6
70014a34:	f000 f88e 	bl	70014b54 <raise>
70014a38:	2001      	movs	r0, #1
70014a3a:	f7eb ff57 	bl	700008ec <_exit>

70014a3e <__swhatbuf_r>:
70014a3e:	b570      	push	{r4, r5, r6, lr}
70014a40:	460c      	mov	r4, r1
70014a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
70014a46:	2900      	cmp	r1, #0
70014a48:	b096      	sub	sp, #88	@ 0x58
70014a4a:	4615      	mov	r5, r2
70014a4c:	461e      	mov	r6, r3
70014a4e:	da0d      	bge.n	70014a6c <__swhatbuf_r+0x2e>
70014a50:	89a3      	ldrh	r3, [r4, #12]
70014a52:	f013 0f80 	tst.w	r3, #128	@ 0x80
70014a56:	f04f 0100 	mov.w	r1, #0
70014a5a:	bf14      	ite	ne
70014a5c:	2340      	movne	r3, #64	@ 0x40
70014a5e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
70014a62:	2000      	movs	r0, #0
70014a64:	6031      	str	r1, [r6, #0]
70014a66:	602b      	str	r3, [r5, #0]
70014a68:	b016      	add	sp, #88	@ 0x58
70014a6a:	bd70      	pop	{r4, r5, r6, pc}
70014a6c:	466a      	mov	r2, sp
70014a6e:	f000 f879 	bl	70014b64 <_fstat_r>
70014a72:	2800      	cmp	r0, #0
70014a74:	dbec      	blt.n	70014a50 <__swhatbuf_r+0x12>
70014a76:	9901      	ldr	r1, [sp, #4]
70014a78:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
70014a7c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
70014a80:	4259      	negs	r1, r3
70014a82:	4159      	adcs	r1, r3
70014a84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
70014a88:	e7eb      	b.n	70014a62 <__swhatbuf_r+0x24>

70014a8a <__smakebuf_r>:
70014a8a:	898b      	ldrh	r3, [r1, #12]
70014a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
70014a8e:	079d      	lsls	r5, r3, #30
70014a90:	4606      	mov	r6, r0
70014a92:	460c      	mov	r4, r1
70014a94:	d507      	bpl.n	70014aa6 <__smakebuf_r+0x1c>
70014a96:	f104 0347 	add.w	r3, r4, #71	@ 0x47
70014a9a:	6023      	str	r3, [r4, #0]
70014a9c:	6123      	str	r3, [r4, #16]
70014a9e:	2301      	movs	r3, #1
70014aa0:	6163      	str	r3, [r4, #20]
70014aa2:	b003      	add	sp, #12
70014aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
70014aa6:	ab01      	add	r3, sp, #4
70014aa8:	466a      	mov	r2, sp
70014aaa:	f7ff ffc8 	bl	70014a3e <__swhatbuf_r>
70014aae:	9f00      	ldr	r7, [sp, #0]
70014ab0:	4605      	mov	r5, r0
70014ab2:	4639      	mov	r1, r7
70014ab4:	4630      	mov	r0, r6
70014ab6:	f7ff fafd 	bl	700140b4 <_malloc_r>
70014aba:	b948      	cbnz	r0, 70014ad0 <__smakebuf_r+0x46>
70014abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
70014ac0:	059a      	lsls	r2, r3, #22
70014ac2:	d4ee      	bmi.n	70014aa2 <__smakebuf_r+0x18>
70014ac4:	f023 0303 	bic.w	r3, r3, #3
70014ac8:	f043 0302 	orr.w	r3, r3, #2
70014acc:	81a3      	strh	r3, [r4, #12]
70014ace:	e7e2      	b.n	70014a96 <__smakebuf_r+0xc>
70014ad0:	89a3      	ldrh	r3, [r4, #12]
70014ad2:	6020      	str	r0, [r4, #0]
70014ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
70014ad8:	81a3      	strh	r3, [r4, #12]
70014ada:	9b01      	ldr	r3, [sp, #4]
70014adc:	e9c4 0704 	strd	r0, r7, [r4, #16]
70014ae0:	b15b      	cbz	r3, 70014afa <__smakebuf_r+0x70>
70014ae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
70014ae6:	4630      	mov	r0, r6
70014ae8:	f000 f84e 	bl	70014b88 <_isatty_r>
70014aec:	b128      	cbz	r0, 70014afa <__smakebuf_r+0x70>
70014aee:	89a3      	ldrh	r3, [r4, #12]
70014af0:	f023 0303 	bic.w	r3, r3, #3
70014af4:	f043 0301 	orr.w	r3, r3, #1
70014af8:	81a3      	strh	r3, [r4, #12]
70014afa:	89a3      	ldrh	r3, [r4, #12]
70014afc:	431d      	orrs	r5, r3
70014afe:	81a5      	strh	r5, [r4, #12]
70014b00:	e7cf      	b.n	70014aa2 <__smakebuf_r+0x18>

70014b02 <_raise_r>:
70014b02:	291f      	cmp	r1, #31
70014b04:	b538      	push	{r3, r4, r5, lr}
70014b06:	4605      	mov	r5, r0
70014b08:	460c      	mov	r4, r1
70014b0a:	d904      	bls.n	70014b16 <_raise_r+0x14>
70014b0c:	2316      	movs	r3, #22
70014b0e:	6003      	str	r3, [r0, #0]
70014b10:	f04f 30ff 	mov.w	r0, #4294967295
70014b14:	bd38      	pop	{r3, r4, r5, pc}
70014b16:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
70014b18:	b112      	cbz	r2, 70014b20 <_raise_r+0x1e>
70014b1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
70014b1e:	b94b      	cbnz	r3, 70014b34 <_raise_r+0x32>
70014b20:	4628      	mov	r0, r5
70014b22:	f000 f853 	bl	70014bcc <_getpid_r>
70014b26:	4622      	mov	r2, r4
70014b28:	4601      	mov	r1, r0
70014b2a:	4628      	mov	r0, r5
70014b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
70014b30:	f000 b83a 	b.w	70014ba8 <_kill_r>
70014b34:	2b01      	cmp	r3, #1
70014b36:	d00a      	beq.n	70014b4e <_raise_r+0x4c>
70014b38:	1c59      	adds	r1, r3, #1
70014b3a:	d103      	bne.n	70014b44 <_raise_r+0x42>
70014b3c:	2316      	movs	r3, #22
70014b3e:	6003      	str	r3, [r0, #0]
70014b40:	2001      	movs	r0, #1
70014b42:	e7e7      	b.n	70014b14 <_raise_r+0x12>
70014b44:	2100      	movs	r1, #0
70014b46:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
70014b4a:	4620      	mov	r0, r4
70014b4c:	4798      	blx	r3
70014b4e:	2000      	movs	r0, #0
70014b50:	e7e0      	b.n	70014b14 <_raise_r+0x12>
	...

70014b54 <raise>:
70014b54:	4b02      	ldr	r3, [pc, #8]	@ (70014b60 <raise+0xc>)
70014b56:	4601      	mov	r1, r0
70014b58:	6818      	ldr	r0, [r3, #0]
70014b5a:	f7ff bfd2 	b.w	70014b02 <_raise_r>
70014b5e:	bf00      	nop
70014b60:	24000040 	.word	0x24000040

70014b64 <_fstat_r>:
70014b64:	b538      	push	{r3, r4, r5, lr}
70014b66:	4d07      	ldr	r5, [pc, #28]	@ (70014b84 <_fstat_r+0x20>)
70014b68:	2300      	movs	r3, #0
70014b6a:	4604      	mov	r4, r0
70014b6c:	4608      	mov	r0, r1
70014b6e:	4611      	mov	r1, r2
70014b70:	602b      	str	r3, [r5, #0]
70014b72:	f7eb ff0b 	bl	7000098c <_fstat>
70014b76:	1c43      	adds	r3, r0, #1
70014b78:	d102      	bne.n	70014b80 <_fstat_r+0x1c>
70014b7a:	682b      	ldr	r3, [r5, #0]
70014b7c:	b103      	cbz	r3, 70014b80 <_fstat_r+0x1c>
70014b7e:	6023      	str	r3, [r4, #0]
70014b80:	bd38      	pop	{r3, r4, r5, pc}
70014b82:	bf00      	nop
70014b84:	24008624 	.word	0x24008624

70014b88 <_isatty_r>:
70014b88:	b538      	push	{r3, r4, r5, lr}
70014b8a:	4d06      	ldr	r5, [pc, #24]	@ (70014ba4 <_isatty_r+0x1c>)
70014b8c:	2300      	movs	r3, #0
70014b8e:	4604      	mov	r4, r0
70014b90:	4608      	mov	r0, r1
70014b92:	602b      	str	r3, [r5, #0]
70014b94:	f7eb ff0a 	bl	700009ac <_isatty>
70014b98:	1c43      	adds	r3, r0, #1
70014b9a:	d102      	bne.n	70014ba2 <_isatty_r+0x1a>
70014b9c:	682b      	ldr	r3, [r5, #0]
70014b9e:	b103      	cbz	r3, 70014ba2 <_isatty_r+0x1a>
70014ba0:	6023      	str	r3, [r4, #0]
70014ba2:	bd38      	pop	{r3, r4, r5, pc}
70014ba4:	24008624 	.word	0x24008624

70014ba8 <_kill_r>:
70014ba8:	b538      	push	{r3, r4, r5, lr}
70014baa:	4d07      	ldr	r5, [pc, #28]	@ (70014bc8 <_kill_r+0x20>)
70014bac:	2300      	movs	r3, #0
70014bae:	4604      	mov	r4, r0
70014bb0:	4608      	mov	r0, r1
70014bb2:	4611      	mov	r1, r2
70014bb4:	602b      	str	r3, [r5, #0]
70014bb6:	f7eb fe87 	bl	700008c8 <_kill>
70014bba:	1c43      	adds	r3, r0, #1
70014bbc:	d102      	bne.n	70014bc4 <_kill_r+0x1c>
70014bbe:	682b      	ldr	r3, [r5, #0]
70014bc0:	b103      	cbz	r3, 70014bc4 <_kill_r+0x1c>
70014bc2:	6023      	str	r3, [r4, #0]
70014bc4:	bd38      	pop	{r3, r4, r5, pc}
70014bc6:	bf00      	nop
70014bc8:	24008624 	.word	0x24008624

70014bcc <_getpid_r>:
70014bcc:	f7eb be74 	b.w	700008b8 <_getpid>

70014bd0 <_init>:
70014bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
70014bd2:	bf00      	nop
70014bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
70014bd6:	bc08      	pop	{r3}
70014bd8:	469e      	mov	lr, r3
70014bda:	4770      	bx	lr

70014bdc <_fini>:
70014bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
70014bde:	bf00      	nop
70014be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
70014be2:	bc08      	pop	{r3}
70014be4:	469e      	mov	lr, r3
70014be6:	4770      	bx	lr

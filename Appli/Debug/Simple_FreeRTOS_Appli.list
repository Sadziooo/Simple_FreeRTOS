
Simple_FreeRTOS_Appli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002b0  70000000  70000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004104  700002b0  700002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  700043b4  700043b4  000053b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  70004434  70004434  00006064  2**0
                  CONTENTS
  4 .ARM          00000000  70004434  70004434  00006064  2**0
                  CONTENTS
  5 .preinit_array 00000000  70004434  70004434  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  70004434  70004434  00005434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  70004438  70004438  00005438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  24000000  7000443c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005198  24000064  700044a0  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  20000000  00001000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185a6  00000000  00000000  00006092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fd8  00000000  00000000  0001e638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00021610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdd  00000000  00000000  00022aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032a6  00000000  00000000  00023a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c9a  00000000  00000000  00026d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00147aff  00000000  00000000  0003d9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001854c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005abc  00000000  00000000  00185508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0018afc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

700002b0 <__do_global_dtors_aux>:
700002b0:	b510      	push	{r4, lr}
700002b2:	4c05      	ldr	r4, [pc, #20]	@ (700002c8 <__do_global_dtors_aux+0x18>)
700002b4:	7823      	ldrb	r3, [r4, #0]
700002b6:	b933      	cbnz	r3, 700002c6 <__do_global_dtors_aux+0x16>
700002b8:	4b04      	ldr	r3, [pc, #16]	@ (700002cc <__do_global_dtors_aux+0x1c>)
700002ba:	b113      	cbz	r3, 700002c2 <__do_global_dtors_aux+0x12>
700002bc:	4804      	ldr	r0, [pc, #16]	@ (700002d0 <__do_global_dtors_aux+0x20>)
700002be:	f3af 8000 	nop.w
700002c2:	2301      	movs	r3, #1
700002c4:	7023      	strb	r3, [r4, #0]
700002c6:	bd10      	pop	{r4, pc}
700002c8:	24000064 	.word	0x24000064
700002cc:	00000000 	.word	0x00000000
700002d0:	7000439c 	.word	0x7000439c

700002d4 <frame_dummy>:
700002d4:	b508      	push	{r3, lr}
700002d6:	4b03      	ldr	r3, [pc, #12]	@ (700002e4 <frame_dummy+0x10>)
700002d8:	b11b      	cbz	r3, 700002e2 <frame_dummy+0xe>
700002da:	4903      	ldr	r1, [pc, #12]	@ (700002e8 <frame_dummy+0x14>)
700002dc:	4803      	ldr	r0, [pc, #12]	@ (700002ec <frame_dummy+0x18>)
700002de:	f3af 8000 	nop.w
700002e2:	bd08      	pop	{r3, pc}
700002e4:	00000000 	.word	0x00000000
700002e8:	24000068 	.word	0x24000068
700002ec:	7000439c 	.word	0x7000439c

700002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
700002f0:	b580      	push	{r7, lr}
700002f2:	b084      	sub	sp, #16
700002f4:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
700002f6:	4b3f      	ldr	r3, [pc, #252]	@ (700003f4 <main+0x104>)
700002f8:	695b      	ldr	r3, [r3, #20]
700002fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
700002fe:	2b00      	cmp	r3, #0
70000300:	d11b      	bne.n	7000033a <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
70000302:	f3bf 8f4f 	dsb	sy
}
70000306:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
70000308:	f3bf 8f6f 	isb	sy
}
7000030c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
7000030e:	4b39      	ldr	r3, [pc, #228]	@ (700003f4 <main+0x104>)
70000310:	2200      	movs	r2, #0
70000312:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
70000316:	f3bf 8f4f 	dsb	sy
}
7000031a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
7000031c:	f3bf 8f6f 	isb	sy
}
70000320:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
70000322:	4b34      	ldr	r3, [pc, #208]	@ (700003f4 <main+0x104>)
70000324:	695b      	ldr	r3, [r3, #20]
70000326:	4a33      	ldr	r2, [pc, #204]	@ (700003f4 <main+0x104>)
70000328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
7000032c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
7000032e:	f3bf 8f4f 	dsb	sy
}
70000332:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
70000334:	f3bf 8f6f 	isb	sy
}
70000338:	e000      	b.n	7000033c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
7000033a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
7000033c:	4b2d      	ldr	r3, [pc, #180]	@ (700003f4 <main+0x104>)
7000033e:	695b      	ldr	r3, [r3, #20]
70000340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
70000344:	2b00      	cmp	r3, #0
70000346:	d138      	bne.n	700003ba <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
70000348:	4b2a      	ldr	r3, [pc, #168]	@ (700003f4 <main+0x104>)
7000034a:	2200      	movs	r2, #0
7000034c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
70000350:	f3bf 8f4f 	dsb	sy
}
70000354:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
70000356:	4b27      	ldr	r3, [pc, #156]	@ (700003f4 <main+0x104>)
70000358:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
7000035c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
7000035e:	68fb      	ldr	r3, [r7, #12]
70000360:	0b5b      	lsrs	r3, r3, #13
70000362:	f3c3 030e 	ubfx	r3, r3, #0, #15
70000366:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
70000368:	68fb      	ldr	r3, [r7, #12]
7000036a:	08db      	lsrs	r3, r3, #3
7000036c:	f3c3 0309 	ubfx	r3, r3, #0, #10
70000370:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
70000372:	68bb      	ldr	r3, [r7, #8]
70000374:	015a      	lsls	r2, r3, #5
70000376:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
7000037a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
7000037c:	687a      	ldr	r2, [r7, #4]
7000037e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
70000380:	491c      	ldr	r1, [pc, #112]	@ (700003f4 <main+0x104>)
70000382:	4313      	orrs	r3, r2
70000384:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
70000388:	687b      	ldr	r3, [r7, #4]
7000038a:	1e5a      	subs	r2, r3, #1
7000038c:	607a      	str	r2, [r7, #4]
7000038e:	2b00      	cmp	r3, #0
70000390:	d1ef      	bne.n	70000372 <main+0x82>
    } while(sets-- != 0U);
70000392:	68bb      	ldr	r3, [r7, #8]
70000394:	1e5a      	subs	r2, r3, #1
70000396:	60ba      	str	r2, [r7, #8]
70000398:	2b00      	cmp	r3, #0
7000039a:	d1e5      	bne.n	70000368 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
7000039c:	f3bf 8f4f 	dsb	sy
}
700003a0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
700003a2:	4b14      	ldr	r3, [pc, #80]	@ (700003f4 <main+0x104>)
700003a4:	695b      	ldr	r3, [r3, #20]
700003a6:	4a13      	ldr	r2, [pc, #76]	@ (700003f4 <main+0x104>)
700003a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
700003ac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
700003ae:	f3bf 8f4f 	dsb	sy
}
700003b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
700003b4:	f3bf 8f6f 	isb	sy
}
700003b8:	e000      	b.n	700003bc <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
700003ba:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Update SystemCoreClock variable according to RCC registers values. */
  SystemCoreClockUpdate();
700003bc:	f000 f996 	bl	700006ec <SystemCoreClockUpdate>

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
700003c0:	f000 faf5 	bl	700009ae <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
700003c4:	f000 f824 	bl	70000410 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
700003c8:	f001 fb20 	bl	70001a0c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(Start_Default_Task, NULL, &defaultTask_attributes);
700003cc:	4a0a      	ldr	r2, [pc, #40]	@ (700003f8 <main+0x108>)
700003ce:	2100      	movs	r1, #0
700003d0:	480a      	ldr	r0, [pc, #40]	@ (700003fc <main+0x10c>)
700003d2:	f001 fb6b 	bl	70001aac <osThreadNew>
700003d6:	4603      	mov	r3, r0
700003d8:	4a09      	ldr	r2, [pc, #36]	@ (70000400 <main+0x110>)
700003da:	6013      	str	r3, [r2, #0]

  /* creation of LedBlinker */
  LedBlinkerHandle = osThreadNew(Start_LedBlinker_Task, NULL, &LedBlinker_attributes);
700003dc:	4a09      	ldr	r2, [pc, #36]	@ (70000404 <main+0x114>)
700003de:	2100      	movs	r1, #0
700003e0:	4809      	ldr	r0, [pc, #36]	@ (70000408 <main+0x118>)
700003e2:	f001 fb63 	bl	70001aac <osThreadNew>
700003e6:	4603      	mov	r3, r0
700003e8:	4a08      	ldr	r2, [pc, #32]	@ (7000040c <main+0x11c>)
700003ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
700003ec:	f001 fb34 	bl	70001a58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
700003f0:	bf00      	nop
700003f2:	e7fd      	b.n	700003f0 <main+0x100>
700003f4:	e000ed00 	.word	0xe000ed00
700003f8:	700043ec 	.word	0x700043ec
700003fc:	700004c1 	.word	0x700004c1
70000400:	24000080 	.word	0x24000080
70000404:	70004410 	.word	0x70004410
70000408:	700004d1 	.word	0x700004d1
7000040c:	24000084 	.word	0x24000084

70000410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
70000410:	b580      	push	{r7, lr}
70000412:	b088      	sub	sp, #32
70000414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
70000416:	f107 030c 	add.w	r3, r7, #12
7000041a:	2200      	movs	r2, #0
7000041c:	601a      	str	r2, [r3, #0]
7000041e:	605a      	str	r2, [r3, #4]
70000420:	609a      	str	r2, [r3, #8]
70000422:	60da      	str	r2, [r3, #12]
70000424:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
70000426:	4b23      	ldr	r3, [pc, #140]	@ (700004b4 <MX_GPIO_Init+0xa4>)
70000428:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
7000042c:	4a21      	ldr	r2, [pc, #132]	@ (700004b4 <MX_GPIO_Init+0xa4>)
7000042e:	f043 0302 	orr.w	r3, r3, #2
70000432:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
70000436:	4b1f      	ldr	r3, [pc, #124]	@ (700004b4 <MX_GPIO_Init+0xa4>)
70000438:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
7000043c:	60bb      	str	r3, [r7, #8]
7000043e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
70000440:	4b1c      	ldr	r3, [pc, #112]	@ (700004b4 <MX_GPIO_Init+0xa4>)
70000442:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
70000446:	4a1b      	ldr	r2, [pc, #108]	@ (700004b4 <MX_GPIO_Init+0xa4>)
70000448:	f043 0308 	orr.w	r3, r3, #8
7000044c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
70000450:	4b18      	ldr	r3, [pc, #96]	@ (700004b4 <MX_GPIO_Init+0xa4>)
70000452:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
70000456:	607b      	str	r3, [r7, #4]
70000458:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_RED_GPIO_Port, LD3_RED_Pin, GPIO_PIN_RESET);
7000045a:	2200      	movs	r2, #0
7000045c:	2180      	movs	r1, #128	@ 0x80
7000045e:	4816      	ldr	r0, [pc, #88]	@ (700004b8 <MX_GPIO_Init+0xa8>)
70000460:	f000 fd08 	bl	70000e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD2_YELLOW_Pin|LD1_GREEN_Pin, GPIO_PIN_RESET);
70000464:	2200      	movs	r2, #0
70000466:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
7000046a:	4814      	ldr	r0, [pc, #80]	@ (700004bc <MX_GPIO_Init+0xac>)
7000046c:	f000 fd02 	bl	70000e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_RED_Pin */
  GPIO_InitStruct.Pin = LD3_RED_Pin;
70000470:	2380      	movs	r3, #128	@ 0x80
70000472:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
70000474:	2301      	movs	r3, #1
70000476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
70000478:	2300      	movs	r3, #0
7000047a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
7000047c:	2300      	movs	r3, #0
7000047e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_RED_GPIO_Port, &GPIO_InitStruct);
70000480:	f107 030c 	add.w	r3, r7, #12
70000484:	4619      	mov	r1, r3
70000486:	480c      	ldr	r0, [pc, #48]	@ (700004b8 <MX_GPIO_Init+0xa8>)
70000488:	f000 fb9e 	bl	70000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_YELLOW_Pin LD1_GREEN_Pin */
  GPIO_InitStruct.Pin = LD2_YELLOW_Pin|LD1_GREEN_Pin;
7000048c:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
70000490:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
70000492:	2301      	movs	r3, #1
70000494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
70000496:	2300      	movs	r3, #0
70000498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
7000049a:	2300      	movs	r3, #0
7000049c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
7000049e:	f107 030c 	add.w	r3, r7, #12
700004a2:	4619      	mov	r1, r3
700004a4:	4805      	ldr	r0, [pc, #20]	@ (700004bc <MX_GPIO_Init+0xac>)
700004a6:	f000 fb8f 	bl	70000bc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
700004aa:	bf00      	nop
700004ac:	3720      	adds	r7, #32
700004ae:	46bd      	mov	sp, r7
700004b0:	bd80      	pop	{r7, pc}
700004b2:	bf00      	nop
700004b4:	58024400 	.word	0x58024400
700004b8:	58020400 	.word	0x58020400
700004bc:	58020c00 	.word	0x58020c00

700004c0 <Start_Default_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Default_Task */
void Start_Default_Task(void *argument)
{
700004c0:	b580      	push	{r7, lr}
700004c2:	b082      	sub	sp, #8
700004c4:	af00      	add	r7, sp, #0
700004c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
700004c8:	2001      	movs	r0, #1
700004ca:	f001 fb81 	bl	70001bd0 <osDelay>
700004ce:	e7fb      	b.n	700004c8 <Start_Default_Task+0x8>

700004d0 <Start_LedBlinker_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LedBlinker_Task */
void Start_LedBlinker_Task(void *argument)
{
700004d0:	b580      	push	{r7, lr}
700004d2:	b082      	sub	sp, #8
700004d4:	af00      	add	r7, sp, #0
700004d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LedBlinker_Task */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GREEN_GPIO_Port, LD1_GREEN_Pin);
700004d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
700004dc:	480b      	ldr	r0, [pc, #44]	@ (7000050c <Start_LedBlinker_Task+0x3c>)
700004de:	f000 fce1 	bl	70000ea4 <HAL_GPIO_TogglePin>
    osDelay(200);
700004e2:	20c8      	movs	r0, #200	@ 0xc8
700004e4:	f001 fb74 	bl	70001bd0 <osDelay>
	HAL_GPIO_TogglePin(LD2_YELLOW_GPIO_Port, LD2_YELLOW_Pin);
700004e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
700004ec:	4807      	ldr	r0, [pc, #28]	@ (7000050c <Start_LedBlinker_Task+0x3c>)
700004ee:	f000 fcd9 	bl	70000ea4 <HAL_GPIO_TogglePin>
    osDelay(200);
700004f2:	20c8      	movs	r0, #200	@ 0xc8
700004f4:	f001 fb6c 	bl	70001bd0 <osDelay>
	HAL_GPIO_TogglePin(LD3_RED_GPIO_Port, LD3_RED_Pin);
700004f8:	2180      	movs	r1, #128	@ 0x80
700004fa:	4805      	ldr	r0, [pc, #20]	@ (70000510 <Start_LedBlinker_Task+0x40>)
700004fc:	f000 fcd2 	bl	70000ea4 <HAL_GPIO_TogglePin>
    osDelay(200);
70000500:	20c8      	movs	r0, #200	@ 0xc8
70000502:	f001 fb65 	bl	70001bd0 <osDelay>
	HAL_GPIO_TogglePin(LD1_GREEN_GPIO_Port, LD1_GREEN_Pin);
70000506:	bf00      	nop
70000508:	e7e6      	b.n	700004d8 <Start_LedBlinker_Task+0x8>
7000050a:	bf00      	nop
7000050c:	58020c00 	.word	0x58020c00
70000510:	58020400 	.word	0x58020400

70000514 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
70000514:	b580      	push	{r7, lr}
70000516:	b082      	sub	sp, #8
70000518:	af00      	add	r7, sp, #0
7000051a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
7000051c:	687b      	ldr	r3, [r7, #4]
7000051e:	681b      	ldr	r3, [r3, #0]
70000520:	4a04      	ldr	r2, [pc, #16]	@ (70000534 <HAL_TIM_PeriodElapsedCallback+0x20>)
70000522:	4293      	cmp	r3, r2
70000524:	d101      	bne.n	7000052a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
70000526:	f000 fa5b 	bl	700009e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
7000052a:	bf00      	nop
7000052c:	3708      	adds	r7, #8
7000052e:	46bd      	mov	sp, r7
70000530:	bd80      	pop	{r7, pc}
70000532:	bf00      	nop
70000534:	40001000 	.word	0x40001000

70000538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
70000538:	b580      	push	{r7, lr}
7000053a:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
7000053c:	2200      	movs	r2, #0
7000053e:	210f      	movs	r1, #15
70000540:	f06f 0001 	mvn.w	r0, #1
70000544:	f000 fb18 	bl	70000b78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
70000548:	bf00      	nop
7000054a:	bd80      	pop	{r7, pc}

7000054c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
7000054c:	b580      	push	{r7, lr}
7000054e:	b090      	sub	sp, #64	@ 0x40
70000550:	af00      	add	r7, sp, #0
70000552:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     Status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
70000554:	4b41      	ldr	r3, [pc, #260]	@ (7000065c <HAL_InitTick+0x110>)
70000556:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
7000055a:	4a40      	ldr	r2, [pc, #256]	@ (7000065c <HAL_InitTick+0x110>)
7000055c:	f043 0310 	orr.w	r3, r3, #16
70000560:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
70000564:	4b3d      	ldr	r3, [pc, #244]	@ (7000065c <HAL_InitTick+0x110>)
70000566:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
7000056a:	60bb      	str	r3, [r7, #8]
7000056c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
7000056e:	f107 020c 	add.w	r2, r7, #12
70000572:	f107 0310 	add.w	r3, r7, #16
70000576:	4611      	mov	r1, r2
70000578:	4618      	mov	r0, r3
7000057a:	f000 fe57 	bl	7000122c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
7000057e:	6a3b      	ldr	r3, [r7, #32]
70000580:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_APB1_DIV1)
70000582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70000584:	2b00      	cmp	r3, #0
70000586:	d103      	bne.n	70000590 <HAL_InitTick+0x44>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
70000588:	f000 fe34 	bl	700011f4 <HAL_RCC_GetPCLK1Freq>
7000058c:	63f8      	str	r0, [r7, #60]	@ 0x3c
7000058e:	e019      	b.n	700005c4 <HAL_InitTick+0x78>
  }
  else if (uwAPB1Prescaler == RCC_APB1_DIV2)
70000590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70000592:	2b04      	cmp	r3, #4
70000594:	d105      	bne.n	700005a2 <HAL_InitTick+0x56>
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
70000596:	f000 fe2d 	bl	700011f4 <HAL_RCC_GetPCLK1Freq>
7000059a:	4603      	mov	r3, r0
7000059c:	005b      	lsls	r3, r3, #1
7000059e:	63fb      	str	r3, [r7, #60]	@ 0x3c
700005a0:	e010      	b.n	700005c4 <HAL_InitTick+0x78>
  }
  else
  {
    if (__HAL_RCC_GET_TIMCLKPRESCALER() == RCC_TIMPRES_DISABLE)
700005a2:	4b2e      	ldr	r3, [pc, #184]	@ (7000065c <HAL_InitTick+0x110>)
700005a4:	691b      	ldr	r3, [r3, #16]
700005a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
700005aa:	2b00      	cmp	r3, #0
700005ac:	d105      	bne.n	700005ba <HAL_InitTick+0x6e>
    {
      uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
700005ae:	f000 fe21 	bl	700011f4 <HAL_RCC_GetPCLK1Freq>
700005b2:	4603      	mov	r3, r0
700005b4:	005b      	lsls	r3, r3, #1
700005b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
700005b8:	e004      	b.n	700005c4 <HAL_InitTick+0x78>
    }
    else
    {
      uwTimclock = 4UL * HAL_RCC_GetPCLK1Freq();
700005ba:	f000 fe1b 	bl	700011f4 <HAL_RCC_GetPCLK1Freq>
700005be:	4603      	mov	r3, r0
700005c0:	009b      	lsls	r3, r3, #2
700005c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to TIM_CNT_FREQ */
  uwPrescalerValue = (uint32_t)((uwTimclock / TIM_CNT_FREQ) - 1U);
700005c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
700005c6:	4a26      	ldr	r2, [pc, #152]	@ (70000660 <HAL_InitTick+0x114>)
700005c8:	fba2 2303 	umull	r2, r3, r2, r3
700005cc:	0c9b      	lsrs	r3, r3, #18
700005ce:	3b01      	subs	r3, #1
700005d0:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
700005d2:	4b24      	ldr	r3, [pc, #144]	@ (70000664 <HAL_InitTick+0x118>)
700005d4:	4a24      	ldr	r2, [pc, #144]	@ (70000668 <HAL_InitTick+0x11c>)
700005d6:	601a      	str	r2, [r3, #0]
  + Period = [uwTickFreq * (TIM_CNT_FREQ/TIM_FREQ) - 1]. to have a (uwTickFreq/TIM_FREQ) s time base.
  + Prescaler = (uwTimclock/TIM_CNT_FREQ - 1) to have a TIM_CNT_FREQ counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = ((uint32_t)uwTickFreq  * (TIM_CNT_FREQ / TIM_FREQ)) - 1U;
700005d8:	4b24      	ldr	r3, [pc, #144]	@ (7000066c <HAL_InitTick+0x120>)
700005da:	781b      	ldrb	r3, [r3, #0]
700005dc:	461a      	mov	r2, r3
700005de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
700005e2:	fb02 f303 	mul.w	r3, r2, r3
700005e6:	3b01      	subs	r3, #1
700005e8:	4a1e      	ldr	r2, [pc, #120]	@ (70000664 <HAL_InitTick+0x118>)
700005ea:	60d3      	str	r3, [r2, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
700005ec:	4a1d      	ldr	r2, [pc, #116]	@ (70000664 <HAL_InitTick+0x118>)
700005ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700005f0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
700005f2:	4b1c      	ldr	r3, [pc, #112]	@ (70000664 <HAL_InitTick+0x118>)
700005f4:	2200      	movs	r2, #0
700005f6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
700005f8:	4b1a      	ldr	r3, [pc, #104]	@ (70000664 <HAL_InitTick+0x118>)
700005fa:	2200      	movs	r2, #0
700005fc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
700005fe:	4b19      	ldr	r3, [pc, #100]	@ (70000664 <HAL_InitTick+0x118>)
70000600:	2200      	movs	r2, #0
70000602:	619a      	str	r2, [r3, #24]
  Status = HAL_TIM_Base_Init(&htim6);
70000604:	4817      	ldr	r0, [pc, #92]	@ (70000664 <HAL_InitTick+0x118>)
70000606:	f000 fe53 	bl	700012b0 <HAL_TIM_Base_Init>
7000060a:	4603      	mov	r3, r0
7000060c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (Status == HAL_OK)
70000610:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
70000614:	2b00      	cmp	r3, #0
70000616:	d11b      	bne.n	70000650 <HAL_InitTick+0x104>
  {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1U)
    HAL_TIM_RegisterCallback(&htim6, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    /* Start the TIM time Base generation in interrupt mode */
    Status = HAL_TIM_Base_Start_IT(&htim6);
70000618:	4812      	ldr	r0, [pc, #72]	@ (70000664 <HAL_InitTick+0x118>)
7000061a:	f000 feab 	bl	70001374 <HAL_TIM_Base_Start_IT>
7000061e:	4603      	mov	r3, r0
70000620:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    if (Status == HAL_OK)
70000624:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
70000628:	2b00      	cmp	r3, #0
7000062a:	d111      	bne.n	70000650 <HAL_InitTick+0x104>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
7000062c:	687b      	ldr	r3, [r7, #4]
7000062e:	2b0f      	cmp	r3, #15
70000630:	d80b      	bhi.n	7000064a <HAL_InitTick+0xfe>
      {
        /* Configure the TIM6 global Interrupt priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0);
70000632:	2200      	movs	r2, #0
70000634:	6879      	ldr	r1, [r7, #4]
70000636:	2037      	movs	r0, #55	@ 0x37
70000638:	f000 fa9e 	bl	70000b78 <HAL_NVIC_SetPriority>

        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
7000063c:	2037      	movs	r0, #55	@ 0x37
7000063e:	f000 fab5 	bl	70000bac <HAL_NVIC_EnableIRQ>

        uwTickPrio = TickPriority;
70000642:	4a0b      	ldr	r2, [pc, #44]	@ (70000670 <HAL_InitTick+0x124>)
70000644:	687b      	ldr	r3, [r7, #4]
70000646:	6013      	str	r3, [r2, #0]
70000648:	e002      	b.n	70000650 <HAL_InitTick+0x104>
      }
      else
      {
        Status = HAL_ERROR;
7000064a:	2301      	movs	r3, #1
7000064c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      }
    }
  }

  /* Return function status */
  return Status;
70000650:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
70000654:	4618      	mov	r0, r3
70000656:	3740      	adds	r7, #64	@ 0x40
70000658:	46bd      	mov	sp, r7
7000065a:	bd80      	pop	{r7, pc}
7000065c:	58024400 	.word	0x58024400
70000660:	431bde83 	.word	0x431bde83
70000664:	24000088 	.word	0x24000088
70000668:	40001000 	.word	0x40001000
7000066c:	24000008 	.word	0x24000008
70000670:	24000004 	.word	0x24000004

70000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
70000674:	b480      	push	{r7}
70000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
70000678:	bf00      	nop
7000067a:	e7fd      	b.n	70000678 <NMI_Handler+0x4>

7000067c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
7000067c:	b480      	push	{r7}
7000067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
70000680:	bf00      	nop
70000682:	e7fd      	b.n	70000680 <HardFault_Handler+0x4>

70000684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
70000684:	b480      	push	{r7}
70000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
70000688:	bf00      	nop
7000068a:	e7fd      	b.n	70000688 <MemManage_Handler+0x4>

7000068c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
7000068c:	b480      	push	{r7}
7000068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
70000690:	bf00      	nop
70000692:	e7fd      	b.n	70000690 <BusFault_Handler+0x4>

70000694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
70000694:	b480      	push	{r7}
70000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
70000698:	bf00      	nop
7000069a:	e7fd      	b.n	70000698 <UsageFault_Handler+0x4>

7000069c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
7000069c:	b480      	push	{r7}
7000069e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
700006a0:	bf00      	nop
700006a2:	46bd      	mov	sp, r7
700006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
700006a8:	4770      	bx	lr
	...

700006ac <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
700006ac:	b580      	push	{r7, lr}
700006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
700006b0:	4802      	ldr	r0, [pc, #8]	@ (700006bc <TIM6_IRQHandler+0x10>)
700006b2:	f000 fed5 	bl	70001460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
700006b6:	bf00      	nop
700006b8:	bd80      	pop	{r7, pc}
700006ba:	bf00      	nop
700006bc:	24000088 	.word	0x24000088

700006c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
700006c0:	b480      	push	{r7}
700006c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = INTVECT_START;
700006c4:	4b07      	ldr	r3, [pc, #28]	@ (700006e4 <SystemInit+0x24>)
700006c6:	4a08      	ldr	r2, [pc, #32]	@ (700006e8 <SystemInit+0x28>)
700006c8:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
700006ca:	4b06      	ldr	r3, [pc, #24]	@ (700006e4 <SystemInit+0x24>)
700006cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
700006d0:	4a04      	ldr	r2, [pc, #16]	@ (700006e4 <SystemInit+0x24>)
700006d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
700006d6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
700006da:	bf00      	nop
700006dc:	46bd      	mov	sp, r7
700006de:	f85d 7b04 	ldr.w	r7, [sp], #4
700006e2:	4770      	bx	lr
700006e4:	e000ed00 	.word	0xe000ed00
700006e8:	70000000 	.word	0x70000000

700006ec <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
700006ec:	b480      	push	{r7}
700006ee:	b089      	sub	sp, #36	@ 0x24
700006f0:	af00      	add	r7, sp, #0
  uint32_t sysclk, hsivalue, pllsource, pllm, pllp, core_presc;
  float_t pllfracn, pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
700006f2:	4b92      	ldr	r3, [pc, #584]	@ (7000093c <SystemCoreClockUpdate+0x250>)
700006f4:	691b      	ldr	r3, [r3, #16]
700006f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
700006fa:	2b18      	cmp	r3, #24
700006fc:	f200 80fb 	bhi.w	700008f6 <SystemCoreClockUpdate+0x20a>
70000700:	a201      	add	r2, pc, #4	@ (adr r2, 70000708 <SystemCoreClockUpdate+0x1c>)
70000702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70000706:	bf00      	nop
70000708:	7000076d 	.word	0x7000076d
7000070c:	700008f7 	.word	0x700008f7
70000710:	700008f7 	.word	0x700008f7
70000714:	700008f7 	.word	0x700008f7
70000718:	700008f7 	.word	0x700008f7
7000071c:	700008f7 	.word	0x700008f7
70000720:	700008f7 	.word	0x700008f7
70000724:	700008f7 	.word	0x700008f7
70000728:	70000781 	.word	0x70000781
7000072c:	700008f7 	.word	0x700008f7
70000730:	700008f7 	.word	0x700008f7
70000734:	700008f7 	.word	0x700008f7
70000738:	700008f7 	.word	0x700008f7
7000073c:	700008f7 	.word	0x700008f7
70000740:	700008f7 	.word	0x700008f7
70000744:	700008f7 	.word	0x700008f7
70000748:	70000787 	.word	0x70000787
7000074c:	700008f7 	.word	0x700008f7
70000750:	700008f7 	.word	0x700008f7
70000754:	700008f7 	.word	0x700008f7
70000758:	700008f7 	.word	0x700008f7
7000075c:	700008f7 	.word	0x700008f7
70000760:	700008f7 	.word	0x700008f7
70000764:	700008f7 	.word	0x700008f7
70000768:	7000078d 	.word	0x7000078d
  {
  case 0x00:  /* HSI used as system clock source (default after reset) */
    sysclk = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos));
7000076c:	4b73      	ldr	r3, [pc, #460]	@ (7000093c <SystemCoreClockUpdate+0x250>)
7000076e:	681b      	ldr	r3, [r3, #0]
70000770:	08db      	lsrs	r3, r3, #3
70000772:	f003 0303 	and.w	r3, r3, #3
70000776:	4a72      	ldr	r2, [pc, #456]	@ (70000940 <SystemCoreClockUpdate+0x254>)
70000778:	fa22 f303 	lsr.w	r3, r2, r3
7000077c:	61fb      	str	r3, [r7, #28]
    break;
7000077e:	e0c4      	b.n	7000090a <SystemCoreClockUpdate+0x21e>

  case 0x08:  /* CSI used as system clock source */
    sysclk = CSI_VALUE;
70000780:	4b70      	ldr	r3, [pc, #448]	@ (70000944 <SystemCoreClockUpdate+0x258>)
70000782:	61fb      	str	r3, [r7, #28]
    break;
70000784:	e0c1      	b.n	7000090a <SystemCoreClockUpdate+0x21e>

  case 0x10:  /* HSE used as system clock source */
    sysclk = HSE_VALUE;
70000786:	4b70      	ldr	r3, [pc, #448]	@ (70000948 <SystemCoreClockUpdate+0x25c>)
70000788:	61fb      	str	r3, [r7, #28]
    break;
7000078a:	e0be      	b.n	7000090a <SystemCoreClockUpdate+0x21e>

  case 0x18:  /* PLL1 used as system clock  source */
    /* PLL1_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL1_VCO / PLL1R
       */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
7000078c:	4b6b      	ldr	r3, [pc, #428]	@ (7000093c <SystemCoreClockUpdate+0x250>)
7000078e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70000790:	f003 0303 	and.w	r3, r3, #3
70000794:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
70000796:	4b69      	ldr	r3, [pc, #420]	@ (7000093c <SystemCoreClockUpdate+0x250>)
70000798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
7000079a:	091b      	lsrs	r3, r3, #4
7000079c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
700007a0:	60fb      	str	r3, [r7, #12]
    if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) != 0U)
700007a2:	4b66      	ldr	r3, [pc, #408]	@ (7000093c <SystemCoreClockUpdate+0x250>)
700007a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700007a6:	f003 0301 	and.w	r3, r3, #1
700007aa:	2b00      	cmp	r3, #0
700007ac:	d00b      	beq.n	700007c6 <SystemCoreClockUpdate+0xda>
    {
      pllfracn = (float_t)(uint32_t)(((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN)>> RCC_PLL1FRACR_FRACN_Pos));
700007ae:	4b63      	ldr	r3, [pc, #396]	@ (7000093c <SystemCoreClockUpdate+0x250>)
700007b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
700007b2:	08db      	lsrs	r3, r3, #3
700007b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
700007b8:	ee07 3a90 	vmov	s15, r3
700007bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
700007c0:	edc7 7a06 	vstr	s15, [r7, #24]
700007c4:	e002      	b.n	700007cc <SystemCoreClockUpdate+0xe0>
    }
    else
    {
      pllfracn = (float_t)0U;
700007c6:	f04f 0300 	mov.w	r3, #0
700007ca:	61bb      	str	r3, [r7, #24]
    }

    if (pllm != 0U)
700007cc:	68fb      	ldr	r3, [r7, #12]
700007ce:	2b00      	cmp	r3, #0
700007d0:	f000 808e 	beq.w	700008f0 <SystemCoreClockUpdate+0x204>
700007d4:	693b      	ldr	r3, [r7, #16]
700007d6:	2b01      	cmp	r3, #1
700007d8:	d024      	beq.n	70000824 <SystemCoreClockUpdate+0x138>
700007da:	693b      	ldr	r3, [r7, #16]
700007dc:	2b02      	cmp	r3, #2
700007de:	d143      	bne.n	70000868 <SystemCoreClockUpdate+0x17c>
    {
      switch (pllsource)
      {
      case 0x02:  /* HSE used as PLL1 clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (pllfracn/(float_t)0x2000) +(float_t)1 );
700007e0:	68fb      	ldr	r3, [r7, #12]
700007e2:	ee07 3a90 	vmov	s15, r3
700007e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
700007ea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 7000094c <SystemCoreClockUpdate+0x260>
700007ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
700007f2:	4b52      	ldr	r3, [pc, #328]	@ (7000093c <SystemCoreClockUpdate+0x250>)
700007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
700007f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
700007fa:	ee07 3a90 	vmov	s15, r3
700007fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
70000802:	ed97 6a06 	vldr	s12, [r7, #24]
70000806:	eddf 5a52 	vldr	s11, [pc, #328]	@ 70000950 <SystemCoreClockUpdate+0x264>
7000080a:	eec6 7a25 	vdiv.f32	s15, s12, s11
7000080e:	ee76 7aa7 	vadd.f32	s15, s13, s15
70000812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70000816:	ee77 7aa6 	vadd.f32	s15, s15, s13
7000081a:	ee67 7a27 	vmul.f32	s15, s14, s15
7000081e:	edc7 7a05 	vstr	s15, [r7, #20]
        break;
70000822:	e04f      	b.n	700008c4 <SystemCoreClockUpdate+0x1d8>

      case 0x01:  /* CSI used as PLL1 clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (pllfracn/(float_t)0x2000) +(float_t)1 );
70000824:	68fb      	ldr	r3, [r7, #12]
70000826:	ee07 3a90 	vmov	s15, r3
7000082a:	eef8 7a67 	vcvt.f32.u32	s15, s15
7000082e:	eddf 6a49 	vldr	s13, [pc, #292]	@ 70000954 <SystemCoreClockUpdate+0x268>
70000832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70000836:	4b41      	ldr	r3, [pc, #260]	@ (7000093c <SystemCoreClockUpdate+0x250>)
70000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
7000083a:	f3c3 0308 	ubfx	r3, r3, #0, #9
7000083e:	ee07 3a90 	vmov	s15, r3
70000842:	eef8 6a67 	vcvt.f32.u32	s13, s15
70000846:	ed97 6a06 	vldr	s12, [r7, #24]
7000084a:	eddf 5a41 	vldr	s11, [pc, #260]	@ 70000950 <SystemCoreClockUpdate+0x264>
7000084e:	eec6 7a25 	vdiv.f32	s15, s12, s11
70000852:	ee76 7aa7 	vadd.f32	s15, s13, s15
70000856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
7000085a:	ee77 7aa6 	vadd.f32	s15, s15, s13
7000085e:	ee67 7a27 	vmul.f32	s15, s14, s15
70000862:	edc7 7a05 	vstr	s15, [r7, #20]
        break;
70000866:	e02d      	b.n	700008c4 <SystemCoreClockUpdate+0x1d8>

      case 0x00:  /* HSI used as PLL1 clock source */
      default:
        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos));
70000868:	4b34      	ldr	r3, [pc, #208]	@ (7000093c <SystemCoreClockUpdate+0x250>)
7000086a:	681b      	ldr	r3, [r3, #0]
7000086c:	08db      	lsrs	r3, r3, #3
7000086e:	f003 0303 	and.w	r3, r3, #3
70000872:	4a33      	ldr	r2, [pc, #204]	@ (70000940 <SystemCoreClockUpdate+0x254>)
70000874:	fa22 f303 	lsr.w	r3, r2, r3
70000878:	60bb      	str	r3, [r7, #8]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (pllfracn/(float_t)0x2000) +(float_t)1 );
7000087a:	68bb      	ldr	r3, [r7, #8]
7000087c:	ee07 3a90 	vmov	s15, r3
70000880:	eef8 6a67 	vcvt.f32.u32	s13, s15
70000884:	68fb      	ldr	r3, [r7, #12]
70000886:	ee07 3a90 	vmov	s15, r3
7000088a:	eef8 7a67 	vcvt.f32.u32	s15, s15
7000088e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70000892:	4b2a      	ldr	r3, [pc, #168]	@ (7000093c <SystemCoreClockUpdate+0x250>)
70000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70000896:	f3c3 0308 	ubfx	r3, r3, #0, #9
7000089a:	ee07 3a90 	vmov	s15, r3
7000089e:	eef8 6a67 	vcvt.f32.u32	s13, s15
700008a2:	ed97 6a06 	vldr	s12, [r7, #24]
700008a6:	eddf 5a2a 	vldr	s11, [pc, #168]	@ 70000950 <SystemCoreClockUpdate+0x264>
700008aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
700008ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
700008b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
700008b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
700008ba:	ee67 7a27 	vmul.f32	s15, s14, s15
700008be:	edc7 7a05 	vstr	s15, [r7, #20]
        break;
700008c2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U ) ;
700008c4:	4b1d      	ldr	r3, [pc, #116]	@ (7000093c <SystemCoreClockUpdate+0x250>)
700008c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
700008c8:	0a5b      	lsrs	r3, r3, #9
700008ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
700008ce:	3301      	adds	r3, #1
700008d0:	607b      	str	r3, [r7, #4]
      sysclk =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
700008d2:	687b      	ldr	r3, [r7, #4]
700008d4:	ee07 3a90 	vmov	s15, r3
700008d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
700008dc:	edd7 6a05 	vldr	s13, [r7, #20]
700008e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
700008e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
700008e8:	ee17 3a90 	vmov	r3, s15
700008ec:	61fb      	str	r3, [r7, #28]
    }
    else
    {
      sysclk = 0U;
    }
    break;
700008ee:	e00c      	b.n	7000090a <SystemCoreClockUpdate+0x21e>
      sysclk = 0U;
700008f0:	2300      	movs	r3, #0
700008f2:	61fb      	str	r3, [r7, #28]
    break;
700008f4:	e009      	b.n	7000090a <SystemCoreClockUpdate+0x21e>

  default:  /* Unexpected, default to HSI used as system clock source (default after reset) */
    sysclk = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos));
700008f6:	4b11      	ldr	r3, [pc, #68]	@ (7000093c <SystemCoreClockUpdate+0x250>)
700008f8:	681b      	ldr	r3, [r3, #0]
700008fa:	08db      	lsrs	r3, r3, #3
700008fc:	f003 0303 	and.w	r3, r3, #3
70000900:	4a0f      	ldr	r2, [pc, #60]	@ (70000940 <SystemCoreClockUpdate+0x254>)
70000902:	fa22 f303 	lsr.w	r3, r2, r3
70000906:	61fb      	str	r3, [r7, #28]
    break;
70000908:	bf00      	nop
  }

  /* system clock frequency : CM7 CPU frequency  */
  core_presc = (RCC->CDCFGR & RCC_CDCFGR_CPRE);
7000090a:	4b0c      	ldr	r3, [pc, #48]	@ (7000093c <SystemCoreClockUpdate+0x250>)
7000090c:	699b      	ldr	r3, [r3, #24]
7000090e:	f003 030f 	and.w	r3, r3, #15
70000912:	603b      	str	r3, [r7, #0]
  if (core_presc >= 8U)
70000914:	683b      	ldr	r3, [r7, #0]
70000916:	2b07      	cmp	r3, #7
70000918:	d907      	bls.n	7000092a <SystemCoreClockUpdate+0x23e>
  {
    SystemCoreClock = (sysclk >> (core_presc - RCC_CDCFGR_CPRE_3 + 1U));
7000091a:	683b      	ldr	r3, [r7, #0]
7000091c:	3b07      	subs	r3, #7
7000091e:	69fa      	ldr	r2, [r7, #28]
70000920:	fa22 f303 	lsr.w	r3, r2, r3
70000924:	4a0c      	ldr	r2, [pc, #48]	@ (70000958 <SystemCoreClockUpdate+0x26c>)
70000926:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock = sysclk;
  }
}
70000928:	e002      	b.n	70000930 <SystemCoreClockUpdate+0x244>
    SystemCoreClock = sysclk;
7000092a:	4a0b      	ldr	r2, [pc, #44]	@ (70000958 <SystemCoreClockUpdate+0x26c>)
7000092c:	69fb      	ldr	r3, [r7, #28]
7000092e:	6013      	str	r3, [r2, #0]
}
70000930:	bf00      	nop
70000932:	3724      	adds	r7, #36	@ 0x24
70000934:	46bd      	mov	sp, r7
70000936:	f85d 7b04 	ldr.w	r7, [sp], #4
7000093a:	4770      	bx	lr
7000093c:	58024400 	.word	0x58024400
70000940:	03d09000 	.word	0x03d09000
70000944:	003d0900 	.word	0x003d0900
70000948:	016e3600 	.word	0x016e3600
7000094c:	4bb71b00 	.word	0x4bb71b00
70000950:	46000000 	.word	0x46000000
70000954:	4a742400 	.word	0x4a742400
70000958:	24000000 	.word	0x24000000

7000095c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
7000095c:	480d      	ldr	r0, [pc, #52]	@ (70000994 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
7000095e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
70000960:	f7ff feae 	bl	700006c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
70000964:	480c      	ldr	r0, [pc, #48]	@ (70000998 <LoopForever+0x6>)
  ldr r1, =_edata
70000966:	490d      	ldr	r1, [pc, #52]	@ (7000099c <LoopForever+0xa>)
  ldr r2, =_sidata
70000968:	4a0d      	ldr	r2, [pc, #52]	@ (700009a0 <LoopForever+0xe>)
  movs r3, #0
7000096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
7000096c:	e002      	b.n	70000974 <LoopCopyDataInit>

7000096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
7000096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
70000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
70000972:	3304      	adds	r3, #4

70000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
70000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
70000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
70000978:	d3f9      	bcc.n	7000096e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
7000097a:	4a0a      	ldr	r2, [pc, #40]	@ (700009a4 <LoopForever+0x12>)
  ldr r4, =_ebss
7000097c:	4c0a      	ldr	r4, [pc, #40]	@ (700009a8 <LoopForever+0x16>)
  movs r3, #0
7000097e:	2300      	movs	r3, #0
  b LoopFillZerobss
70000980:	e001      	b.n	70000986 <LoopFillZerobss>

70000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
70000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
70000984:	3204      	adds	r2, #4

70000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
70000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
70000988:	d3fb      	bcc.n	70000982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
7000098a:	f003 fc7d 	bl	70004288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
7000098e:	f7ff fcaf 	bl	700002f0 <main>

70000992 <LoopForever>:

LoopForever:
  b LoopForever
70000992:	e7fe      	b.n	70000992 <LoopForever>
  ldr   r0, =_estack
70000994:	20010000 	.word	0x20010000
  ldr r0, =_sdata
70000998:	24000000 	.word	0x24000000
  ldr r1, =_edata
7000099c:	24000064 	.word	0x24000064
  ldr r2, =_sidata
700009a0:	7000443c 	.word	0x7000443c
  ldr r2, =_sbss
700009a4:	24000064 	.word	0x24000064
  ldr r4, =_ebss
700009a8:	240051fc 	.word	0x240051fc

700009ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
700009ac:	e7fe      	b.n	700009ac <ADC1_2_IRQHandler>

700009ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
700009ae:	b580      	push	{r7, lr}
700009b0:	b082      	sub	sp, #8
700009b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
700009b4:	2300      	movs	r3, #0
700009b6:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
700009b8:	2003      	movs	r0, #3
700009ba:	f000 f8d2 	bl	70000b62 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
700009be:	200f      	movs	r0, #15
700009c0:	f7ff fdc4 	bl	7000054c <HAL_InitTick>
700009c4:	4603      	mov	r3, r0
700009c6:	2b00      	cmp	r3, #0
700009c8:	d002      	beq.n	700009d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
700009ca:	2301      	movs	r3, #1
700009cc:	71fb      	strb	r3, [r7, #7]
700009ce:	e001      	b.n	700009d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
700009d0:	f7ff fdb2 	bl	70000538 <HAL_MspInit>
  }

  /* Return function status */
  return status;
700009d4:	79fb      	ldrb	r3, [r7, #7]
}
700009d6:	4618      	mov	r0, r3
700009d8:	3708      	adds	r7, #8
700009da:	46bd      	mov	sp, r7
700009dc:	bd80      	pop	{r7, pc}
	...

700009e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
700009e0:	b480      	push	{r7}
700009e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
700009e4:	4b06      	ldr	r3, [pc, #24]	@ (70000a00 <HAL_IncTick+0x20>)
700009e6:	781b      	ldrb	r3, [r3, #0]
700009e8:	461a      	mov	r2, r3
700009ea:	4b06      	ldr	r3, [pc, #24]	@ (70000a04 <HAL_IncTick+0x24>)
700009ec:	681b      	ldr	r3, [r3, #0]
700009ee:	4413      	add	r3, r2
700009f0:	4a04      	ldr	r2, [pc, #16]	@ (70000a04 <HAL_IncTick+0x24>)
700009f2:	6013      	str	r3, [r2, #0]
}
700009f4:	bf00      	nop
700009f6:	46bd      	mov	sp, r7
700009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
700009fc:	4770      	bx	lr
700009fe:	bf00      	nop
70000a00:	24000008 	.word	0x24000008
70000a04:	240000d4 	.word	0x240000d4

70000a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
70000a08:	b480      	push	{r7}
70000a0a:	b085      	sub	sp, #20
70000a0c:	af00      	add	r7, sp, #0
70000a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
70000a10:	687b      	ldr	r3, [r7, #4]
70000a12:	f003 0307 	and.w	r3, r3, #7
70000a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
70000a18:	4b0b      	ldr	r3, [pc, #44]	@ (70000a48 <__NVIC_SetPriorityGrouping+0x40>)
70000a1a:	68db      	ldr	r3, [r3, #12]
70000a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
70000a1e:	68ba      	ldr	r2, [r7, #8]
70000a20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
70000a24:	4013      	ands	r3, r2
70000a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
70000a28:	68fb      	ldr	r3, [r7, #12]
70000a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
70000a2c:	68bb      	ldr	r3, [r7, #8]
70000a2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
70000a30:	4b06      	ldr	r3, [pc, #24]	@ (70000a4c <__NVIC_SetPriorityGrouping+0x44>)
70000a32:	4313      	orrs	r3, r2
70000a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
70000a36:	4a04      	ldr	r2, [pc, #16]	@ (70000a48 <__NVIC_SetPriorityGrouping+0x40>)
70000a38:	68bb      	ldr	r3, [r7, #8]
70000a3a:	60d3      	str	r3, [r2, #12]
}
70000a3c:	bf00      	nop
70000a3e:	3714      	adds	r7, #20
70000a40:	46bd      	mov	sp, r7
70000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
70000a46:	4770      	bx	lr
70000a48:	e000ed00 	.word	0xe000ed00
70000a4c:	05fa0000 	.word	0x05fa0000

70000a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
70000a50:	b480      	push	{r7}
70000a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
70000a54:	4b04      	ldr	r3, [pc, #16]	@ (70000a68 <__NVIC_GetPriorityGrouping+0x18>)
70000a56:	68db      	ldr	r3, [r3, #12]
70000a58:	0a1b      	lsrs	r3, r3, #8
70000a5a:	f003 0307 	and.w	r3, r3, #7
}
70000a5e:	4618      	mov	r0, r3
70000a60:	46bd      	mov	sp, r7
70000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
70000a66:	4770      	bx	lr
70000a68:	e000ed00 	.word	0xe000ed00

70000a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
70000a6c:	b480      	push	{r7}
70000a6e:	b083      	sub	sp, #12
70000a70:	af00      	add	r7, sp, #0
70000a72:	4603      	mov	r3, r0
70000a74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
70000a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70000a7a:	2b00      	cmp	r3, #0
70000a7c:	db0b      	blt.n	70000a96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
70000a7e:	88fb      	ldrh	r3, [r7, #6]
70000a80:	f003 021f 	and.w	r2, r3, #31
70000a84:	4907      	ldr	r1, [pc, #28]	@ (70000aa4 <__NVIC_EnableIRQ+0x38>)
70000a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70000a8a:	095b      	lsrs	r3, r3, #5
70000a8c:	2001      	movs	r0, #1
70000a8e:	fa00 f202 	lsl.w	r2, r0, r2
70000a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
70000a96:	bf00      	nop
70000a98:	370c      	adds	r7, #12
70000a9a:	46bd      	mov	sp, r7
70000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
70000aa0:	4770      	bx	lr
70000aa2:	bf00      	nop
70000aa4:	e000e100 	.word	0xe000e100

70000aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
70000aa8:	b480      	push	{r7}
70000aaa:	b083      	sub	sp, #12
70000aac:	af00      	add	r7, sp, #0
70000aae:	4603      	mov	r3, r0
70000ab0:	6039      	str	r1, [r7, #0]
70000ab2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
70000ab4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70000ab8:	2b00      	cmp	r3, #0
70000aba:	db0a      	blt.n	70000ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
70000abc:	683b      	ldr	r3, [r7, #0]
70000abe:	b2da      	uxtb	r2, r3
70000ac0:	490c      	ldr	r1, [pc, #48]	@ (70000af4 <__NVIC_SetPriority+0x4c>)
70000ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70000ac6:	0112      	lsls	r2, r2, #4
70000ac8:	b2d2      	uxtb	r2, r2
70000aca:	440b      	add	r3, r1
70000acc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
70000ad0:	e00a      	b.n	70000ae8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
70000ad2:	683b      	ldr	r3, [r7, #0]
70000ad4:	b2da      	uxtb	r2, r3
70000ad6:	4908      	ldr	r1, [pc, #32]	@ (70000af8 <__NVIC_SetPriority+0x50>)
70000ad8:	88fb      	ldrh	r3, [r7, #6]
70000ada:	f003 030f 	and.w	r3, r3, #15
70000ade:	3b04      	subs	r3, #4
70000ae0:	0112      	lsls	r2, r2, #4
70000ae2:	b2d2      	uxtb	r2, r2
70000ae4:	440b      	add	r3, r1
70000ae6:	761a      	strb	r2, [r3, #24]
}
70000ae8:	bf00      	nop
70000aea:	370c      	adds	r7, #12
70000aec:	46bd      	mov	sp, r7
70000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
70000af2:	4770      	bx	lr
70000af4:	e000e100 	.word	0xe000e100
70000af8:	e000ed00 	.word	0xe000ed00

70000afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
70000afc:	b480      	push	{r7}
70000afe:	b089      	sub	sp, #36	@ 0x24
70000b00:	af00      	add	r7, sp, #0
70000b02:	60f8      	str	r0, [r7, #12]
70000b04:	60b9      	str	r1, [r7, #8]
70000b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
70000b08:	68fb      	ldr	r3, [r7, #12]
70000b0a:	f003 0307 	and.w	r3, r3, #7
70000b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
70000b10:	69fb      	ldr	r3, [r7, #28]
70000b12:	f1c3 0307 	rsb	r3, r3, #7
70000b16:	2b04      	cmp	r3, #4
70000b18:	bf28      	it	cs
70000b1a:	2304      	movcs	r3, #4
70000b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
70000b1e:	69fb      	ldr	r3, [r7, #28]
70000b20:	3304      	adds	r3, #4
70000b22:	2b06      	cmp	r3, #6
70000b24:	d902      	bls.n	70000b2c <NVIC_EncodePriority+0x30>
70000b26:	69fb      	ldr	r3, [r7, #28]
70000b28:	3b03      	subs	r3, #3
70000b2a:	e000      	b.n	70000b2e <NVIC_EncodePriority+0x32>
70000b2c:	2300      	movs	r3, #0
70000b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
70000b30:	f04f 32ff 	mov.w	r2, #4294967295
70000b34:	69bb      	ldr	r3, [r7, #24]
70000b36:	fa02 f303 	lsl.w	r3, r2, r3
70000b3a:	43da      	mvns	r2, r3
70000b3c:	68bb      	ldr	r3, [r7, #8]
70000b3e:	401a      	ands	r2, r3
70000b40:	697b      	ldr	r3, [r7, #20]
70000b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
70000b44:	f04f 31ff 	mov.w	r1, #4294967295
70000b48:	697b      	ldr	r3, [r7, #20]
70000b4a:	fa01 f303 	lsl.w	r3, r1, r3
70000b4e:	43d9      	mvns	r1, r3
70000b50:	687b      	ldr	r3, [r7, #4]
70000b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
70000b54:	4313      	orrs	r3, r2
         );
}
70000b56:	4618      	mov	r0, r3
70000b58:	3724      	adds	r7, #36	@ 0x24
70000b5a:	46bd      	mov	sp, r7
70000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
70000b60:	4770      	bx	lr

70000b62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
70000b62:	b580      	push	{r7, lr}
70000b64:	b082      	sub	sp, #8
70000b66:	af00      	add	r7, sp, #0
70000b68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
70000b6a:	6878      	ldr	r0, [r7, #4]
70000b6c:	f7ff ff4c 	bl	70000a08 <__NVIC_SetPriorityGrouping>
}
70000b70:	bf00      	nop
70000b72:	3708      	adds	r7, #8
70000b74:	46bd      	mov	sp, r7
70000b76:	bd80      	pop	{r7, pc}

70000b78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
70000b78:	b580      	push	{r7, lr}
70000b7a:	b086      	sub	sp, #24
70000b7c:	af00      	add	r7, sp, #0
70000b7e:	4603      	mov	r3, r0
70000b80:	60b9      	str	r1, [r7, #8]
70000b82:	607a      	str	r2, [r7, #4]
70000b84:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
70000b86:	f7ff ff63 	bl	70000a50 <__NVIC_GetPriorityGrouping>
70000b8a:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
70000b8c:	687a      	ldr	r2, [r7, #4]
70000b8e:	68b9      	ldr	r1, [r7, #8]
70000b90:	6978      	ldr	r0, [r7, #20]
70000b92:	f7ff ffb3 	bl	70000afc <NVIC_EncodePriority>
70000b96:	4602      	mov	r2, r0
70000b98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
70000b9c:	4611      	mov	r1, r2
70000b9e:	4618      	mov	r0, r3
70000ba0:	f7ff ff82 	bl	70000aa8 <__NVIC_SetPriority>
}
70000ba4:	bf00      	nop
70000ba6:	3718      	adds	r7, #24
70000ba8:	46bd      	mov	sp, r7
70000baa:	bd80      	pop	{r7, pc}

70000bac <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32h7rsxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
70000bac:	b580      	push	{r7, lr}
70000bae:	b082      	sub	sp, #8
70000bb0:	af00      	add	r7, sp, #0
70000bb2:	4603      	mov	r3, r0
70000bb4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
70000bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70000bba:	4618      	mov	r0, r3
70000bbc:	f7ff ff56 	bl	70000a6c <__NVIC_EnableIRQ>
}
70000bc0:	bf00      	nop
70000bc2:	3708      	adds	r7, #8
70000bc4:	46bd      	mov	sp, r7
70000bc6:	bd80      	pop	{r7, pc}

70000bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
70000bc8:	b480      	push	{r7}
70000bca:	b087      	sub	sp, #28
70000bcc:	af00      	add	r7, sp, #0
70000bce:	6078      	str	r0, [r7, #4]
70000bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
70000bd2:	2300      	movs	r3, #0
70000bd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
70000bd6:	e139      	b.n	70000e4c <HAL_GPIO_Init+0x284>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
70000bd8:	683b      	ldr	r3, [r7, #0]
70000bda:	681a      	ldr	r2, [r3, #0]
70000bdc:	2101      	movs	r1, #1
70000bde:	697b      	ldr	r3, [r7, #20]
70000be0:	fa01 f303 	lsl.w	r3, r1, r3
70000be4:	4013      	ands	r3, r2
70000be6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
70000be8:	68fb      	ldr	r3, [r7, #12]
70000bea:	2b00      	cmp	r3, #0
70000bec:	f000 812b 	beq.w	70000e46 <HAL_GPIO_Init+0x27e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
70000bf0:	683b      	ldr	r3, [r7, #0]
70000bf2:	685b      	ldr	r3, [r3, #4]
70000bf4:	f003 0303 	and.w	r3, r3, #3
70000bf8:	2b01      	cmp	r3, #1
70000bfa:	d005      	beq.n	70000c08 <HAL_GPIO_Init+0x40>
70000bfc:	683b      	ldr	r3, [r7, #0]
70000bfe:	685b      	ldr	r3, [r3, #4]
70000c00:	f003 0303 	and.w	r3, r3, #3
70000c04:	2b02      	cmp	r3, #2
70000c06:	d130      	bne.n	70000c6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
70000c08:	687b      	ldr	r3, [r7, #4]
70000c0a:	689b      	ldr	r3, [r3, #8]
70000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
70000c0e:	697b      	ldr	r3, [r7, #20]
70000c10:	005b      	lsls	r3, r3, #1
70000c12:	2203      	movs	r2, #3
70000c14:	fa02 f303 	lsl.w	r3, r2, r3
70000c18:	43db      	mvns	r3, r3
70000c1a:	693a      	ldr	r2, [r7, #16]
70000c1c:	4013      	ands	r3, r2
70000c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
70000c20:	683b      	ldr	r3, [r7, #0]
70000c22:	68da      	ldr	r2, [r3, #12]
70000c24:	697b      	ldr	r3, [r7, #20]
70000c26:	005b      	lsls	r3, r3, #1
70000c28:	fa02 f303 	lsl.w	r3, r2, r3
70000c2c:	693a      	ldr	r2, [r7, #16]
70000c2e:	4313      	orrs	r3, r2
70000c30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
70000c32:	687b      	ldr	r3, [r7, #4]
70000c34:	693a      	ldr	r2, [r7, #16]
70000c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
70000c38:	687b      	ldr	r3, [r7, #4]
70000c3a:	685b      	ldr	r3, [r3, #4]
70000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
70000c3e:	2201      	movs	r2, #1
70000c40:	697b      	ldr	r3, [r7, #20]
70000c42:	fa02 f303 	lsl.w	r3, r2, r3
70000c46:	43db      	mvns	r3, r3
70000c48:	693a      	ldr	r2, [r7, #16]
70000c4a:	4013      	ands	r3, r2
70000c4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
70000c4e:	683b      	ldr	r3, [r7, #0]
70000c50:	685b      	ldr	r3, [r3, #4]
70000c52:	091b      	lsrs	r3, r3, #4
70000c54:	f003 0201 	and.w	r2, r3, #1
70000c58:	697b      	ldr	r3, [r7, #20]
70000c5a:	fa02 f303 	lsl.w	r3, r2, r3
70000c5e:	693a      	ldr	r2, [r7, #16]
70000c60:	4313      	orrs	r3, r2
70000c62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
70000c64:	687b      	ldr	r3, [r7, #4]
70000c66:	693a      	ldr	r2, [r7, #16]
70000c68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
70000c6a:	683b      	ldr	r3, [r7, #0]
70000c6c:	685b      	ldr	r3, [r3, #4]
70000c6e:	f003 0303 	and.w	r3, r3, #3
70000c72:	2b03      	cmp	r3, #3
70000c74:	d017      	beq.n	70000ca6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
70000c76:	687b      	ldr	r3, [r7, #4]
70000c78:	68db      	ldr	r3, [r3, #12]
70000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
70000c7c:	697b      	ldr	r3, [r7, #20]
70000c7e:	005b      	lsls	r3, r3, #1
70000c80:	2203      	movs	r2, #3
70000c82:	fa02 f303 	lsl.w	r3, r2, r3
70000c86:	43db      	mvns	r3, r3
70000c88:	693a      	ldr	r2, [r7, #16]
70000c8a:	4013      	ands	r3, r2
70000c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
70000c8e:	683b      	ldr	r3, [r7, #0]
70000c90:	689a      	ldr	r2, [r3, #8]
70000c92:	697b      	ldr	r3, [r7, #20]
70000c94:	005b      	lsls	r3, r3, #1
70000c96:	fa02 f303 	lsl.w	r3, r2, r3
70000c9a:	693a      	ldr	r2, [r7, #16]
70000c9c:	4313      	orrs	r3, r2
70000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
70000ca0:	687b      	ldr	r3, [r7, #4]
70000ca2:	693a      	ldr	r2, [r7, #16]
70000ca4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
70000ca6:	683b      	ldr	r3, [r7, #0]
70000ca8:	685b      	ldr	r3, [r3, #4]
70000caa:	f003 0303 	and.w	r3, r3, #3
70000cae:	2b02      	cmp	r3, #2
70000cb0:	d123      	bne.n	70000cfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
70000cb2:	697b      	ldr	r3, [r7, #20]
70000cb4:	08da      	lsrs	r2, r3, #3
70000cb6:	687b      	ldr	r3, [r7, #4]
70000cb8:	3208      	adds	r2, #8
70000cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
70000cc0:	697b      	ldr	r3, [r7, #20]
70000cc2:	f003 0307 	and.w	r3, r3, #7
70000cc6:	009b      	lsls	r3, r3, #2
70000cc8:	220f      	movs	r2, #15
70000cca:	fa02 f303 	lsl.w	r3, r2, r3
70000cce:	43db      	mvns	r3, r3
70000cd0:	693a      	ldr	r2, [r7, #16]
70000cd2:	4013      	ands	r3, r2
70000cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
70000cd6:	683b      	ldr	r3, [r7, #0]
70000cd8:	691a      	ldr	r2, [r3, #16]
70000cda:	697b      	ldr	r3, [r7, #20]
70000cdc:	f003 0307 	and.w	r3, r3, #7
70000ce0:	009b      	lsls	r3, r3, #2
70000ce2:	fa02 f303 	lsl.w	r3, r2, r3
70000ce6:	693a      	ldr	r2, [r7, #16]
70000ce8:	4313      	orrs	r3, r2
70000cea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
70000cec:	697b      	ldr	r3, [r7, #20]
70000cee:	08da      	lsrs	r2, r3, #3
70000cf0:	687b      	ldr	r3, [r7, #4]
70000cf2:	3208      	adds	r2, #8
70000cf4:	6939      	ldr	r1, [r7, #16]
70000cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
70000cfa:	687b      	ldr	r3, [r7, #4]
70000cfc:	681b      	ldr	r3, [r3, #0]
70000cfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
70000d00:	697b      	ldr	r3, [r7, #20]
70000d02:	005b      	lsls	r3, r3, #1
70000d04:	2203      	movs	r2, #3
70000d06:	fa02 f303 	lsl.w	r3, r2, r3
70000d0a:	43db      	mvns	r3, r3
70000d0c:	693a      	ldr	r2, [r7, #16]
70000d0e:	4013      	ands	r3, r2
70000d10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
70000d12:	683b      	ldr	r3, [r7, #0]
70000d14:	685b      	ldr	r3, [r3, #4]
70000d16:	f003 0203 	and.w	r2, r3, #3
70000d1a:	697b      	ldr	r3, [r7, #20]
70000d1c:	005b      	lsls	r3, r3, #1
70000d1e:	fa02 f303 	lsl.w	r3, r2, r3
70000d22:	693a      	ldr	r2, [r7, #16]
70000d24:	4313      	orrs	r3, r2
70000d26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
70000d28:	687b      	ldr	r3, [r7, #4]
70000d2a:	693a      	ldr	r2, [r7, #16]
70000d2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
70000d2e:	683b      	ldr	r3, [r7, #0]
70000d30:	685b      	ldr	r3, [r3, #4]
70000d32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
70000d36:	2b00      	cmp	r3, #0
70000d38:	f000 8085 	beq.w	70000e46 <HAL_GPIO_Init+0x27e>
      {
        temp = SBS->EXTICR[position >> 2u];
70000d3c:	4a4b      	ldr	r2, [pc, #300]	@ (70000e6c <HAL_GPIO_Init+0x2a4>)
70000d3e:	697b      	ldr	r3, [r7, #20]
70000d40:	089b      	lsrs	r3, r3, #2
70000d42:	334c      	adds	r3, #76	@ 0x4c
70000d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
70000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
70000d4a:	697b      	ldr	r3, [r7, #20]
70000d4c:	f003 0303 	and.w	r3, r3, #3
70000d50:	009b      	lsls	r3, r3, #2
70000d52:	220f      	movs	r2, #15
70000d54:	fa02 f303 	lsl.w	r3, r2, r3
70000d58:	43db      	mvns	r3, r3
70000d5a:	693a      	ldr	r2, [r7, #16]
70000d5c:	4013      	ands	r3, r2
70000d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
70000d60:	687b      	ldr	r3, [r7, #4]
70000d62:	0a9a      	lsrs	r2, r3, #10
70000d64:	4b42      	ldr	r3, [pc, #264]	@ (70000e70 <HAL_GPIO_Init+0x2a8>)
70000d66:	4013      	ands	r3, r2
70000d68:	697a      	ldr	r2, [r7, #20]
70000d6a:	f002 0203 	and.w	r2, r2, #3
70000d6e:	0092      	lsls	r2, r2, #2
70000d70:	4093      	lsls	r3, r2
70000d72:	693a      	ldr	r2, [r7, #16]
70000d74:	4313      	orrs	r3, r2
70000d76:	613b      	str	r3, [r7, #16]
        SBS->EXTICR[position >> 2u] = temp;
70000d78:	493c      	ldr	r1, [pc, #240]	@ (70000e6c <HAL_GPIO_Init+0x2a4>)
70000d7a:	697b      	ldr	r3, [r7, #20]
70000d7c:	089b      	lsrs	r3, r3, #2
70000d7e:	334c      	adds	r3, #76	@ 0x4c
70000d80:	693a      	ldr	r2, [r7, #16]
70000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
70000d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70000d8a:	681b      	ldr	r3, [r3, #0]
70000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
70000d8e:	68fb      	ldr	r3, [r7, #12]
70000d90:	43db      	mvns	r3, r3
70000d92:	693a      	ldr	r2, [r7, #16]
70000d94:	4013      	ands	r3, r2
70000d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
70000d98:	683b      	ldr	r3, [r7, #0]
70000d9a:	685b      	ldr	r3, [r3, #4]
70000d9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
70000da0:	2b00      	cmp	r3, #0
70000da2:	d003      	beq.n	70000dac <HAL_GPIO_Init+0x1e4>
        {
          temp |= iocurrent;
70000da4:	693a      	ldr	r2, [r7, #16]
70000da6:	68fb      	ldr	r3, [r7, #12]
70000da8:	4313      	orrs	r3, r2
70000daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
70000dac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
70000db0:	693b      	ldr	r3, [r7, #16]
70000db2:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
70000db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70000db8:	685b      	ldr	r3, [r3, #4]
70000dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
70000dbc:	68fb      	ldr	r3, [r7, #12]
70000dbe:	43db      	mvns	r3, r3
70000dc0:	693a      	ldr	r2, [r7, #16]
70000dc2:	4013      	ands	r3, r2
70000dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
70000dc6:	683b      	ldr	r3, [r7, #0]
70000dc8:	685b      	ldr	r3, [r3, #4]
70000dca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
70000dce:	2b00      	cmp	r3, #0
70000dd0:	d003      	beq.n	70000dda <HAL_GPIO_Init+0x212>
        {
          temp |= iocurrent;
70000dd2:	693a      	ldr	r2, [r7, #16]
70000dd4:	68fb      	ldr	r3, [r7, #12]
70000dd6:	4313      	orrs	r3, r2
70000dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
70000dda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
70000dde:	693b      	ldr	r3, [r7, #16]
70000de0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
70000de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70000de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
70000dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
70000dec:	68fb      	ldr	r3, [r7, #12]
70000dee:	43db      	mvns	r3, r3
70000df0:	693a      	ldr	r2, [r7, #16]
70000df2:	4013      	ands	r3, r2
70000df4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
70000df6:	683b      	ldr	r3, [r7, #0]
70000df8:	685b      	ldr	r3, [r3, #4]
70000dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
70000dfe:	2b00      	cmp	r3, #0
70000e00:	d003      	beq.n	70000e0a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
70000e02:	693a      	ldr	r2, [r7, #16]
70000e04:	68fb      	ldr	r3, [r7, #12]
70000e06:	4313      	orrs	r3, r2
70000e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
70000e0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
70000e0e:	693b      	ldr	r3, [r7, #16]
70000e10:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
70000e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70000e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
70000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
70000e1e:	68fb      	ldr	r3, [r7, #12]
70000e20:	43db      	mvns	r3, r3
70000e22:	693a      	ldr	r2, [r7, #16]
70000e24:	4013      	ands	r3, r2
70000e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
70000e28:	683b      	ldr	r3, [r7, #0]
70000e2a:	685b      	ldr	r3, [r3, #4]
70000e2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
70000e30:	2b00      	cmp	r3, #0
70000e32:	d003      	beq.n	70000e3c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
70000e34:	693a      	ldr	r2, [r7, #16]
70000e36:	68fb      	ldr	r3, [r7, #12]
70000e38:	4313      	orrs	r3, r2
70000e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
70000e3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
70000e40:	693b      	ldr	r3, [r7, #16]
70000e42:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
70000e46:	697b      	ldr	r3, [r7, #20]
70000e48:	3301      	adds	r3, #1
70000e4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
70000e4c:	683b      	ldr	r3, [r7, #0]
70000e4e:	681a      	ldr	r2, [r3, #0]
70000e50:	697b      	ldr	r3, [r7, #20]
70000e52:	fa22 f303 	lsr.w	r3, r2, r3
70000e56:	2b00      	cmp	r3, #0
70000e58:	f47f aebe 	bne.w	70000bd8 <HAL_GPIO_Init+0x10>
  }
}
70000e5c:	bf00      	nop
70000e5e:	bf00      	nop
70000e60:	371c      	adds	r7, #28
70000e62:	46bd      	mov	sp, r7
70000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
70000e68:	4770      	bx	lr
70000e6a:	bf00      	nop
70000e6c:	58000400 	.word	0x58000400
70000e70:	0029ff7f 	.word	0x0029ff7f

70000e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
70000e74:	b480      	push	{r7}
70000e76:	b083      	sub	sp, #12
70000e78:	af00      	add	r7, sp, #0
70000e7a:	6078      	str	r0, [r7, #4]
70000e7c:	460b      	mov	r3, r1
70000e7e:	807b      	strh	r3, [r7, #2]
70000e80:	4613      	mov	r3, r2
70000e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
70000e84:	787b      	ldrb	r3, [r7, #1]
70000e86:	2b00      	cmp	r3, #0
70000e88:	d003      	beq.n	70000e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
70000e8a:	887a      	ldrh	r2, [r7, #2]
70000e8c:	687b      	ldr	r3, [r7, #4]
70000e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
70000e90:	e002      	b.n	70000e98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
70000e92:	887a      	ldrh	r2, [r7, #2]
70000e94:	687b      	ldr	r3, [r7, #4]
70000e96:	629a      	str	r2, [r3, #40]	@ 0x28
}
70000e98:	bf00      	nop
70000e9a:	370c      	adds	r7, #12
70000e9c:	46bd      	mov	sp, r7
70000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
70000ea2:	4770      	bx	lr

70000ea4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
70000ea4:	b480      	push	{r7}
70000ea6:	b085      	sub	sp, #20
70000ea8:	af00      	add	r7, sp, #0
70000eaa:	6078      	str	r0, [r7, #4]
70000eac:	460b      	mov	r3, r1
70000eae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
70000eb0:	687b      	ldr	r3, [r7, #4]
70000eb2:	695b      	ldr	r3, [r3, #20]
70000eb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
70000eb6:	887a      	ldrh	r2, [r7, #2]
70000eb8:	68fb      	ldr	r3, [r7, #12]
70000eba:	4013      	ands	r3, r2
70000ebc:	041a      	lsls	r2, r3, #16
70000ebe:	68fb      	ldr	r3, [r7, #12]
70000ec0:	43d9      	mvns	r1, r3
70000ec2:	887b      	ldrh	r3, [r7, #2]
70000ec4:	400b      	ands	r3, r1
70000ec6:	431a      	orrs	r2, r3
70000ec8:	687b      	ldr	r3, [r7, #4]
70000eca:	619a      	str	r2, [r3, #24]
}
70000ecc:	bf00      	nop
70000ece:	3714      	adds	r7, #20
70000ed0:	46bd      	mov	sp, r7
70000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
70000ed6:	4770      	bx	lr

70000ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
70000ed8:	b480      	push	{r7}
70000eda:	b08b      	sub	sp, #44	@ 0x2c
70000edc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t prescaler;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
70000ede:	4baa      	ldr	r3, [pc, #680]	@ (70001188 <HAL_RCC_GetSysClockFreq+0x2b0>)
70000ee0:	691b      	ldr	r3, [r3, #16]
70000ee2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
70000ee6:	2b18      	cmp	r3, #24
70000ee8:	f200 8136 	bhi.w	70001158 <HAL_RCC_GetSysClockFreq+0x280>
70000eec:	a201      	add	r2, pc, #4	@ (adr r2, 70000ef4 <HAL_RCC_GetSysClockFreq+0x1c>)
70000eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70000ef2:	bf00      	nop
70000ef4:	70000f59 	.word	0x70000f59
70000ef8:	70001159 	.word	0x70001159
70000efc:	70001159 	.word	0x70001159
70000f00:	70001159 	.word	0x70001159
70000f04:	70001159 	.word	0x70001159
70000f08:	70001159 	.word	0x70001159
70000f0c:	70001159 	.word	0x70001159
70000f10:	70001159 	.word	0x70001159
70000f14:	70000f7f 	.word	0x70000f7f
70000f18:	70001159 	.word	0x70001159
70000f1c:	70001159 	.word	0x70001159
70000f20:	70001159 	.word	0x70001159
70000f24:	70001159 	.word	0x70001159
70000f28:	70001159 	.word	0x70001159
70000f2c:	70001159 	.word	0x70001159
70000f30:	70001159 	.word	0x70001159
70000f34:	70000f85 	.word	0x70000f85
70000f38:	70001159 	.word	0x70001159
70000f3c:	70001159 	.word	0x70001159
70000f40:	70001159 	.word	0x70001159
70000f44:	70001159 	.word	0x70001159
70000f48:	70001159 	.word	0x70001159
70000f4c:	70001159 	.word	0x70001159
70000f50:	70001159 	.word	0x70001159
70000f54:	70000f8b 	.word	0x70000f8b
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */

      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
70000f58:	4b8b      	ldr	r3, [pc, #556]	@ (70001188 <HAL_RCC_GetSysClockFreq+0x2b0>)
70000f5a:	681b      	ldr	r3, [r3, #0]
70000f5c:	f003 0320 	and.w	r3, r3, #32
70000f60:	2b00      	cmp	r3, #0
70000f62:	d009      	beq.n	70000f78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
70000f64:	4b88      	ldr	r3, [pc, #544]	@ (70001188 <HAL_RCC_GetSysClockFreq+0x2b0>)
70000f66:	681b      	ldr	r3, [r3, #0]
70000f68:	08db      	lsrs	r3, r3, #3
70000f6a:	f003 0303 	and.w	r3, r3, #3
70000f6e:	4a87      	ldr	r2, [pc, #540]	@ (7000118c <HAL_RCC_GetSysClockFreq+0x2b4>)
70000f70:	fa22 f303 	lsr.w	r3, r2, r3
70000f74:	623b      	str	r3, [r7, #32]
      {
        /* Can't retrieve HSIDIV value */
        sysclockfreq = 0U;
      }

      break;
70000f76:	e0f2      	b.n	7000115e <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
70000f78:	2300      	movs	r3, #0
70000f7a:	623b      	str	r3, [r7, #32]
      break;
70000f7c:	e0ef      	b.n	7000115e <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
70000f7e:	4b84      	ldr	r3, [pc, #528]	@ (70001190 <HAL_RCC_GetSysClockFreq+0x2b8>)
70000f80:	623b      	str	r3, [r7, #32]
      break;
70000f82:	e0ec      	b.n	7000115e <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
70000f84:	4b83      	ldr	r3, [pc, #524]	@ (70001194 <HAL_RCC_GetSysClockFreq+0x2bc>)
70000f86:	623b      	str	r3, [r7, #32]
      break;
70000f88:	e0e9      	b.n	7000115e <HAL_RCC_GetSysClockFreq+0x286>
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
70000f8a:	4b7f      	ldr	r3, [pc, #508]	@ (70001188 <HAL_RCC_GetSysClockFreq+0x2b0>)
70000f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70000f8e:	f003 0303 	and.w	r3, r3, #3
70000f92:	61fb      	str	r3, [r7, #28]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
70000f94:	4b7c      	ldr	r3, [pc, #496]	@ (70001188 <HAL_RCC_GetSysClockFreq+0x2b0>)
70000f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70000f98:	091b      	lsrs	r3, r3, #4
70000f9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
70000f9e:	61bb      	str	r3, [r7, #24]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
70000fa0:	4b79      	ldr	r3, [pc, #484]	@ (70001188 <HAL_RCC_GetSysClockFreq+0x2b0>)
70000fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70000fa4:	f003 0301 	and.w	r3, r3, #1
70000fa8:	617b      	str	r3, [r7, #20]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> 3));
70000faa:	4b77      	ldr	r3, [pc, #476]	@ (70001188 <HAL_RCC_GetSysClockFreq+0x2b0>)
70000fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
70000fae:	08db      	lsrs	r3, r3, #3
70000fb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
70000fb4:	697a      	ldr	r2, [r7, #20]
70000fb6:	fb02 f303 	mul.w	r3, r2, r3
70000fba:	ee07 3a90 	vmov	s15, r3
70000fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
70000fc2:	edc7 7a04 	vstr	s15, [r7, #16]

      if (pllm != 0U)
70000fc6:	69bb      	ldr	r3, [r7, #24]
70000fc8:	2b00      	cmp	r3, #0
70000fca:	f000 80c2 	beq.w	70001152 <HAL_RCC_GetSysClockFreq+0x27a>
70000fce:	69fb      	ldr	r3, [r7, #28]
70000fd0:	2b02      	cmp	r3, #2
70000fd2:	d064      	beq.n	7000109e <HAL_RCC_GetSysClockFreq+0x1c6>
70000fd4:	69fb      	ldr	r3, [r7, #28]
70000fd6:	2b02      	cmp	r3, #2
70000fd8:	f200 8083 	bhi.w	700010e2 <HAL_RCC_GetSysClockFreq+0x20a>
70000fdc:	69fb      	ldr	r3, [r7, #28]
70000fde:	2b00      	cmp	r3, #0
70000fe0:	d003      	beq.n	70000fea <HAL_RCC_GetSysClockFreq+0x112>
70000fe2:	69fb      	ldr	r3, [r7, #28]
70000fe4:	2b01      	cmp	r3, #1
70000fe6:	d038      	beq.n	7000105a <HAL_RCC_GetSysClockFreq+0x182>
70000fe8:	e07b      	b.n	700010e2 <HAL_RCC_GetSysClockFreq+0x20a>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
70000fea:	4b67      	ldr	r3, [pc, #412]	@ (70001188 <HAL_RCC_GetSysClockFreq+0x2b0>)
70000fec:	681b      	ldr	r3, [r3, #0]
70000fee:	f003 0320 	and.w	r3, r3, #32
70000ff2:	2b00      	cmp	r3, #0
70000ff4:	d02d      	beq.n	70001052 <HAL_RCC_GetSysClockFreq+0x17a>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
70000ff6:	4b64      	ldr	r3, [pc, #400]	@ (70001188 <HAL_RCC_GetSysClockFreq+0x2b0>)
70000ff8:	681b      	ldr	r3, [r3, #0]
70000ffa:	08db      	lsrs	r3, r3, #3
70000ffc:	f003 0303 	and.w	r3, r3, #3
70001000:	4a62      	ldr	r2, [pc, #392]	@ (7000118c <HAL_RCC_GetSysClockFreq+0x2b4>)
70001002:	fa22 f303 	lsr.w	r3, r2, r3
70001006:	60fb      	str	r3, [r7, #12]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
70001008:	68fb      	ldr	r3, [r7, #12]
7000100a:	ee07 3a90 	vmov	s15, r3
7000100e:	eef8 6a67 	vcvt.f32.u32	s13, s15
70001012:	69bb      	ldr	r3, [r7, #24]
70001014:	ee07 3a90 	vmov	s15, r3
70001018:	eef8 7a67 	vcvt.f32.u32	s15, s15
7000101c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70001020:	4b59      	ldr	r3, [pc, #356]	@ (70001188 <HAL_RCC_GetSysClockFreq+0x2b0>)
70001022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70001024:	f3c3 0308 	ubfx	r3, r3, #0, #9
70001028:	ee07 3a90 	vmov	s15, r3
7000102c:	eef8 6a67 	vcvt.f32.u32	s13, s15
70001030:	ed97 6a04 	vldr	s12, [r7, #16]
70001034:	eddf 5a58 	vldr	s11, [pc, #352]	@ 70001198 <HAL_RCC_GetSysClockFreq+0x2c0>
70001038:	eec6 7a25 	vdiv.f32	s15, s12, s11
7000103c:	ee76 7aa7 	vadd.f32	s15, s13, s15
70001040:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70001044:	ee77 7aa6 	vadd.f32	s15, s15, s13
70001048:	ee67 7a27 	vmul.f32	s15, s14, s15
7000104c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            else
            {
              /* Can't retrieve HSIDIV value */
              pllvco = (float_t)0;
            }
            break;
70001050:	e069      	b.n	70001126 <HAL_RCC_GetSysClockFreq+0x24e>
              pllvco = (float_t)0;
70001052:	f04f 0300 	mov.w	r3, #0
70001056:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
70001058:	e065      	b.n	70001126 <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
7000105a:	69bb      	ldr	r3, [r7, #24]
7000105c:	ee07 3a90 	vmov	s15, r3
70001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
70001064:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 7000119c <HAL_RCC_GetSysClockFreq+0x2c4>
70001068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
7000106c:	4b46      	ldr	r3, [pc, #280]	@ (70001188 <HAL_RCC_GetSysClockFreq+0x2b0>)
7000106e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70001070:	f3c3 0308 	ubfx	r3, r3, #0, #9
70001074:	ee07 3a90 	vmov	s15, r3
70001078:	eef8 6a67 	vcvt.f32.u32	s13, s15
7000107c:	ed97 6a04 	vldr	s12, [r7, #16]
70001080:	eddf 5a45 	vldr	s11, [pc, #276]	@ 70001198 <HAL_RCC_GetSysClockFreq+0x2c0>
70001084:	eec6 7a25 	vdiv.f32	s15, s12, s11
70001088:	ee76 7aa7 	vadd.f32	s15, s13, s15
7000108c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70001090:	ee77 7aa6 	vadd.f32	s15, s15, s13
70001094:	ee67 7a27 	vmul.f32	s15, s14, s15
70001098:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
7000109c:	e043      	b.n	70001126 <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
7000109e:	69bb      	ldr	r3, [r7, #24]
700010a0:	ee07 3a90 	vmov	s15, r3
700010a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
700010a8:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 700011a0 <HAL_RCC_GetSysClockFreq+0x2c8>
700010ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
700010b0:	4b35      	ldr	r3, [pc, #212]	@ (70001188 <HAL_RCC_GetSysClockFreq+0x2b0>)
700010b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
700010b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
700010b8:	ee07 3a90 	vmov	s15, r3
700010bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
700010c0:	ed97 6a04 	vldr	s12, [r7, #16]
700010c4:	eddf 5a34 	vldr	s11, [pc, #208]	@ 70001198 <HAL_RCC_GetSysClockFreq+0x2c0>
700010c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
700010cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
700010d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
700010d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
700010d8:	ee67 7a27 	vmul.f32	s15, s14, s15
700010dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
700010e0:	e021      	b.n	70001126 <HAL_RCC_GetSysClockFreq+0x24e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
700010e2:	69bb      	ldr	r3, [r7, #24]
700010e4:	ee07 3a90 	vmov	s15, r3
700010e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
700010ec:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 7000119c <HAL_RCC_GetSysClockFreq+0x2c4>
700010f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
700010f4:	4b24      	ldr	r3, [pc, #144]	@ (70001188 <HAL_RCC_GetSysClockFreq+0x2b0>)
700010f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
700010f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
700010fc:	ee07 3a90 	vmov	s15, r3
70001100:	eef8 6a67 	vcvt.f32.u32	s13, s15
70001104:	ed97 6a04 	vldr	s12, [r7, #16]
70001108:	eddf 5a23 	vldr	s11, [pc, #140]	@ 70001198 <HAL_RCC_GetSysClockFreq+0x2c0>
7000110c:	eec6 7a25 	vdiv.f32	s15, s12, s11
70001110:	ee76 7aa7 	vadd.f32	s15, s13, s15
70001114:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70001118:	ee77 7aa6 	vadd.f32	s15, s15, s13
7000111c:	ee67 7a27 	vmul.f32	s15, s14, s15
70001120:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
70001124:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U) ;
70001126:	4b18      	ldr	r3, [pc, #96]	@ (70001188 <HAL_RCC_GetSysClockFreq+0x2b0>)
70001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
7000112a:	0a5b      	lsrs	r3, r3, #9
7000112c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
70001130:	3301      	adds	r3, #1
70001132:	60bb      	str	r3, [r7, #8]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
70001134:	68bb      	ldr	r3, [r7, #8]
70001136:	ee07 3a90 	vmov	s15, r3
7000113a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
7000113e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
70001142:	eec6 7a87 	vdiv.f32	s15, s13, s14
70001146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
7000114a:	ee17 3a90 	vmov	r3, s15
7000114e:	623b      	str	r3, [r7, #32]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
70001150:	e005      	b.n	7000115e <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
70001152:	2300      	movs	r3, #0
70001154:	623b      	str	r3, [r7, #32]
      break;
70001156:	e002      	b.n	7000115e <HAL_RCC_GetSysClockFreq+0x286>

    default:
      sysclockfreq = CSI_VALUE;
70001158:	4b0d      	ldr	r3, [pc, #52]	@ (70001190 <HAL_RCC_GetSysClockFreq+0x2b8>)
7000115a:	623b      	str	r3, [r7, #32]
      break;
7000115c:	bf00      	nop
  }

  prescaler = RCC->CDCFGR & RCC_CDCFGR_CPRE;
7000115e:	4b0a      	ldr	r3, [pc, #40]	@ (70001188 <HAL_RCC_GetSysClockFreq+0x2b0>)
70001160:	699b      	ldr	r3, [r3, #24]
70001162:	f003 030f 	and.w	r3, r3, #15
70001166:	607b      	str	r3, [r7, #4]
  if (prescaler >= 8U)
70001168:	687b      	ldr	r3, [r7, #4]
7000116a:	2b07      	cmp	r3, #7
7000116c:	d905      	bls.n	7000117a <HAL_RCC_GetSysClockFreq+0x2a2>
  {
    sysclockfreq = sysclockfreq >> (prescaler - RCC_CDCFGR_CPRE_3 + 1U);
7000116e:	687b      	ldr	r3, [r7, #4]
70001170:	3b07      	subs	r3, #7
70001172:	6a3a      	ldr	r2, [r7, #32]
70001174:	fa22 f303 	lsr.w	r3, r2, r3
70001178:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
7000117a:	6a3b      	ldr	r3, [r7, #32]
}
7000117c:	4618      	mov	r0, r3
7000117e:	372c      	adds	r7, #44	@ 0x2c
70001180:	46bd      	mov	sp, r7
70001182:	f85d 7b04 	ldr.w	r7, [sp], #4
70001186:	4770      	bx	lr
70001188:	58024400 	.word	0x58024400
7000118c:	03d09000 	.word	0x03d09000
70001190:	003d0900 	.word	0x003d0900
70001194:	016e3600 	.word	0x016e3600
70001198:	46000000 	.word	0x46000000
7000119c:	4a742400 	.word	0x4a742400
700011a0:	4bb71b00 	.word	0x4bb71b00

700011a4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
700011a4:	b580      	push	{r7, lr}
700011a6:	b084      	sub	sp, #16
700011a8:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  const uint8_t AHBPrescTable[8] = {1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
700011aa:	4a10      	ldr	r2, [pc, #64]	@ (700011ec <HAL_RCC_GetHCLKFreq+0x48>)
700011ac:	463b      	mov	r3, r7
700011ae:	e892 0003 	ldmia.w	r2, {r0, r1}
700011b2:	e883 0003 	stmia.w	r3, {r0, r1}

  /* SysClk */
  clock = HAL_RCC_GetSysClockFreq();
700011b6:	f7ff fe8f 	bl	70000ed8 <HAL_RCC_GetSysClockFreq>
700011ba:	60f8      	str	r0, [r7, #12]
  /* Bus matrix divider */
  prescaler = (RCC->BMCFGR & RCC_BMCFGR_BMPRE) >> RCC_BMCFGR_BMPRE_Pos;
700011bc:	4b0c      	ldr	r3, [pc, #48]	@ (700011f0 <HAL_RCC_GetHCLKFreq+0x4c>)
700011be:	69db      	ldr	r3, [r3, #28]
700011c0:	f003 030f 	and.w	r3, r3, #15
700011c4:	60bb      	str	r3, [r7, #8]
  if (prescaler >= 8U)
700011c6:	68bb      	ldr	r3, [r7, #8]
700011c8:	2b07      	cmp	r3, #7
700011ca:	d909      	bls.n	700011e0 <HAL_RCC_GetHCLKFreq+0x3c>
  {
    clock = clock >> AHBPrescTable[prescaler - 8U];
700011cc:	68bb      	ldr	r3, [r7, #8]
700011ce:	3b08      	subs	r3, #8
700011d0:	3310      	adds	r3, #16
700011d2:	443b      	add	r3, r7
700011d4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
700011d8:	461a      	mov	r2, r3
700011da:	68fb      	ldr	r3, [r7, #12]
700011dc:	40d3      	lsrs	r3, r2
700011de:	60fb      	str	r3, [r7, #12]
  }
  return (clock);
700011e0:	68fb      	ldr	r3, [r7, #12]
}
700011e2:	4618      	mov	r0, r3
700011e4:	3710      	adds	r7, #16
700011e6:	46bd      	mov	sp, r7
700011e8:	bd80      	pop	{r7, pc}
700011ea:	bf00      	nop
700011ec:	700043cc 	.word	0x700043cc
700011f0:	58024400 	.word	0x58024400

700011f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
700011f4:	b580      	push	{r7, lr}
700011f6:	b082      	sub	sp, #8
700011f8:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK1 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
700011fa:	f7ff ffd3 	bl	700011a4 <HAL_RCC_GetHCLKFreq>
700011fe:	6078      	str	r0, [r7, #4]
  /* APB1 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE1) >> RCC_APBCFGR_PPRE1_Pos;
70001200:	4b09      	ldr	r3, [pc, #36]	@ (70001228 <HAL_RCC_GetPCLK1Freq+0x34>)
70001202:	6a1b      	ldr	r3, [r3, #32]
70001204:	f003 0307 	and.w	r3, r3, #7
70001208:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
7000120a:	683b      	ldr	r3, [r7, #0]
7000120c:	2b03      	cmp	r3, #3
7000120e:	d905      	bls.n	7000121c <HAL_RCC_GetPCLK1Freq+0x28>
  {
    clock = clock >> (prescaler - 3U);
70001210:	683b      	ldr	r3, [r7, #0]
70001212:	3b03      	subs	r3, #3
70001214:	687a      	ldr	r2, [r7, #4]
70001216:	fa22 f303 	lsr.w	r3, r2, r3
7000121a:	607b      	str	r3, [r7, #4]
  }
  return (clock);
7000121c:	687b      	ldr	r3, [r7, #4]
}
7000121e:	4618      	mov	r0, r3
70001220:	3708      	adds	r7, #8
70001222:	46bd      	mov	sp, r7
70001224:	bd80      	pop	{r7, pc}
70001226:	bf00      	nop
70001228:	58024400 	.word	0x58024400

7000122c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
7000122c:	b480      	push	{r7}
7000122e:	b083      	sub	sp, #12
70001230:	af00      	add	r7, sp, #0
70001232:	6078      	str	r0, [r7, #4]
70001234:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK  | \
70001236:	687b      	ldr	r3, [r7, #4]
70001238:	223f      	movs	r2, #63	@ 0x3f
7000123a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK1  | RCC_CLOCKTYPE_PCLK2 | \
                                 RCC_CLOCKTYPE_PCLK4  | RCC_CLOCKTYPE_PCLK5;

  /* Get the SYSCLK source ---------------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
7000123c:	4b1a      	ldr	r3, [pc, #104]	@ (700012a8 <HAL_RCC_GetClockConfig+0x7c>)
7000123e:	691b      	ldr	r3, [r3, #16]
70001240:	f003 0207 	and.w	r2, r3, #7
70001244:	687b      	ldr	r3, [r7, #4]
70001246:	605a      	str	r2, [r3, #4]

  /* Get the SYSCLK configuration---------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = READ_BIT(RCC->CDCFGR, RCC_CDCFGR_CPRE);
70001248:	4b17      	ldr	r3, [pc, #92]	@ (700012a8 <HAL_RCC_GetClockConfig+0x7c>)
7000124a:	699b      	ldr	r3, [r3, #24]
7000124c:	f003 020f 	and.w	r2, r3, #15
70001250:	687b      	ldr	r3, [r7, #4]
70001252:	609a      	str	r2, [r3, #8]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->BMCFGR, RCC_BMCFGR_BMPRE);
70001254:	4b14      	ldr	r3, [pc, #80]	@ (700012a8 <HAL_RCC_GetClockConfig+0x7c>)
70001256:	69db      	ldr	r3, [r3, #28]
70001258:	f003 020f 	and.w	r2, r3, #15
7000125c:	687b      	ldr	r3, [r7, #4]
7000125e:	60da      	str	r2, [r3, #12]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->APBCFGR, RCC_APBCFGR_PPRE1);
70001260:	4b11      	ldr	r3, [pc, #68]	@ (700012a8 <HAL_RCC_GetClockConfig+0x7c>)
70001262:	6a1b      	ldr	r3, [r3, #32]
70001264:	f003 0207 	and.w	r2, r3, #7
70001268:	687b      	ldr	r3, [r7, #4]
7000126a:	611a      	str	r2, [r3, #16]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = READ_BIT(RCC->APBCFGR, RCC_APBCFGR_PPRE2);
7000126c:	4b0e      	ldr	r3, [pc, #56]	@ (700012a8 <HAL_RCC_GetClockConfig+0x7c>)
7000126e:	6a1b      	ldr	r3, [r3, #32]
70001270:	f003 0270 	and.w	r2, r3, #112	@ 0x70
70001274:	687b      	ldr	r3, [r7, #4]
70001276:	615a      	str	r2, [r3, #20]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = READ_BIT(RCC->APBCFGR, RCC_APBCFGR_PPRE4);
70001278:	4b0b      	ldr	r3, [pc, #44]	@ (700012a8 <HAL_RCC_GetClockConfig+0x7c>)
7000127a:	6a1b      	ldr	r3, [r3, #32]
7000127c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
70001280:	687b      	ldr	r3, [r7, #4]
70001282:	619a      	str	r2, [r3, #24]

  /* Get the APB5 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB5CLKDivider = READ_BIT(RCC->APBCFGR, RCC_APBCFGR_PPRE5);
70001284:	4b08      	ldr	r3, [pc, #32]	@ (700012a8 <HAL_RCC_GetClockConfig+0x7c>)
70001286:	6a1b      	ldr	r3, [r3, #32]
70001288:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
7000128c:	687b      	ldr	r3, [r7, #4]
7000128e:	61da      	str	r2, [r3, #28]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
70001290:	4b06      	ldr	r3, [pc, #24]	@ (700012ac <HAL_RCC_GetClockConfig+0x80>)
70001292:	681b      	ldr	r3, [r3, #0]
70001294:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
70001298:	683b      	ldr	r3, [r7, #0]
7000129a:	601a      	str	r2, [r3, #0]
}
7000129c:	bf00      	nop
7000129e:	370c      	adds	r7, #12
700012a0:	46bd      	mov	sp, r7
700012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
700012a6:	4770      	bx	lr
700012a8:	58024400 	.word	0x58024400
700012ac:	52002000 	.word	0x52002000

700012b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
700012b0:	b580      	push	{r7, lr}
700012b2:	b082      	sub	sp, #8
700012b4:	af00      	add	r7, sp, #0
700012b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
700012b8:	687b      	ldr	r3, [r7, #4]
700012ba:	2b00      	cmp	r3, #0
700012bc:	d101      	bne.n	700012c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
700012be:	2301      	movs	r3, #1
700012c0:	e049      	b.n	70001356 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
700012c2:	687b      	ldr	r3, [r7, #4]
700012c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
700012c8:	b2db      	uxtb	r3, r3
700012ca:	2b00      	cmp	r3, #0
700012cc:	d106      	bne.n	700012dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
700012ce:	687b      	ldr	r3, [r7, #4]
700012d0:	2200      	movs	r2, #0
700012d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
700012d6:	6878      	ldr	r0, [r7, #4]
700012d8:	f000 f841 	bl	7000135e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
700012dc:	687b      	ldr	r3, [r7, #4]
700012de:	2202      	movs	r2, #2
700012e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
700012e4:	687b      	ldr	r3, [r7, #4]
700012e6:	681a      	ldr	r2, [r3, #0]
700012e8:	687b      	ldr	r3, [r7, #4]
700012ea:	3304      	adds	r3, #4
700012ec:	4619      	mov	r1, r3
700012ee:	4610      	mov	r0, r2
700012f0:	f000 fa2e 	bl	70001750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
700012f4:	687b      	ldr	r3, [r7, #4]
700012f6:	2201      	movs	r2, #1
700012f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
700012fc:	687b      	ldr	r3, [r7, #4]
700012fe:	2201      	movs	r2, #1
70001300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
70001304:	687b      	ldr	r3, [r7, #4]
70001306:	2201      	movs	r2, #1
70001308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
7000130c:	687b      	ldr	r3, [r7, #4]
7000130e:	2201      	movs	r2, #1
70001310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
70001314:	687b      	ldr	r3, [r7, #4]
70001316:	2201      	movs	r2, #1
70001318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
7000131c:	687b      	ldr	r3, [r7, #4]
7000131e:	2201      	movs	r2, #1
70001320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
70001324:	687b      	ldr	r3, [r7, #4]
70001326:	2201      	movs	r2, #1
70001328:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
7000132c:	687b      	ldr	r3, [r7, #4]
7000132e:	2201      	movs	r2, #1
70001330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
70001334:	687b      	ldr	r3, [r7, #4]
70001336:	2201      	movs	r2, #1
70001338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
7000133c:	687b      	ldr	r3, [r7, #4]
7000133e:	2201      	movs	r2, #1
70001340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
70001344:	687b      	ldr	r3, [r7, #4]
70001346:	2201      	movs	r2, #1
70001348:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
7000134c:	687b      	ldr	r3, [r7, #4]
7000134e:	2201      	movs	r2, #1
70001350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
70001354:	2300      	movs	r3, #0
}
70001356:	4618      	mov	r0, r3
70001358:	3708      	adds	r7, #8
7000135a:	46bd      	mov	sp, r7
7000135c:	bd80      	pop	{r7, pc}

7000135e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
7000135e:	b480      	push	{r7}
70001360:	b083      	sub	sp, #12
70001362:	af00      	add	r7, sp, #0
70001364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
70001366:	bf00      	nop
70001368:	370c      	adds	r7, #12
7000136a:	46bd      	mov	sp, r7
7000136c:	f85d 7b04 	ldr.w	r7, [sp], #4
70001370:	4770      	bx	lr
	...

70001374 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
70001374:	b480      	push	{r7}
70001376:	b085      	sub	sp, #20
70001378:	af00      	add	r7, sp, #0
7000137a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
7000137c:	687b      	ldr	r3, [r7, #4]
7000137e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
70001382:	b2db      	uxtb	r3, r3
70001384:	2b01      	cmp	r3, #1
70001386:	d001      	beq.n	7000138c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
70001388:	2301      	movs	r3, #1
7000138a:	e054      	b.n	70001436 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
7000138c:	687b      	ldr	r3, [r7, #4]
7000138e:	2202      	movs	r2, #2
70001390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
70001394:	687b      	ldr	r3, [r7, #4]
70001396:	681b      	ldr	r3, [r3, #0]
70001398:	68da      	ldr	r2, [r3, #12]
7000139a:	687b      	ldr	r3, [r7, #4]
7000139c:	681b      	ldr	r3, [r3, #0]
7000139e:	f042 0201 	orr.w	r2, r2, #1
700013a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
700013a4:	687b      	ldr	r3, [r7, #4]
700013a6:	681b      	ldr	r3, [r3, #0]
700013a8:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
700013ac:	d022      	beq.n	700013f4 <HAL_TIM_Base_Start_IT+0x80>
700013ae:	687b      	ldr	r3, [r7, #4]
700013b0:	681b      	ldr	r3, [r3, #0]
700013b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
700013b6:	d01d      	beq.n	700013f4 <HAL_TIM_Base_Start_IT+0x80>
700013b8:	687b      	ldr	r3, [r7, #4]
700013ba:	681b      	ldr	r3, [r3, #0]
700013bc:	4a21      	ldr	r2, [pc, #132]	@ (70001444 <HAL_TIM_Base_Start_IT+0xd0>)
700013be:	4293      	cmp	r3, r2
700013c0:	d018      	beq.n	700013f4 <HAL_TIM_Base_Start_IT+0x80>
700013c2:	687b      	ldr	r3, [r7, #4]
700013c4:	681b      	ldr	r3, [r3, #0]
700013c6:	4a20      	ldr	r2, [pc, #128]	@ (70001448 <HAL_TIM_Base_Start_IT+0xd4>)
700013c8:	4293      	cmp	r3, r2
700013ca:	d013      	beq.n	700013f4 <HAL_TIM_Base_Start_IT+0x80>
700013cc:	687b      	ldr	r3, [r7, #4]
700013ce:	681b      	ldr	r3, [r3, #0]
700013d0:	4a1e      	ldr	r2, [pc, #120]	@ (7000144c <HAL_TIM_Base_Start_IT+0xd8>)
700013d2:	4293      	cmp	r3, r2
700013d4:	d00e      	beq.n	700013f4 <HAL_TIM_Base_Start_IT+0x80>
700013d6:	687b      	ldr	r3, [r7, #4]
700013d8:	681b      	ldr	r3, [r3, #0]
700013da:	4a1d      	ldr	r2, [pc, #116]	@ (70001450 <HAL_TIM_Base_Start_IT+0xdc>)
700013dc:	4293      	cmp	r3, r2
700013de:	d009      	beq.n	700013f4 <HAL_TIM_Base_Start_IT+0x80>
700013e0:	687b      	ldr	r3, [r7, #4]
700013e2:	681b      	ldr	r3, [r3, #0]
700013e4:	4a1b      	ldr	r2, [pc, #108]	@ (70001454 <HAL_TIM_Base_Start_IT+0xe0>)
700013e6:	4293      	cmp	r3, r2
700013e8:	d004      	beq.n	700013f4 <HAL_TIM_Base_Start_IT+0x80>
700013ea:	687b      	ldr	r3, [r7, #4]
700013ec:	681b      	ldr	r3, [r3, #0]
700013ee:	4a1a      	ldr	r2, [pc, #104]	@ (70001458 <HAL_TIM_Base_Start_IT+0xe4>)
700013f0:	4293      	cmp	r3, r2
700013f2:	d115      	bne.n	70001420 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
700013f4:	687b      	ldr	r3, [r7, #4]
700013f6:	681b      	ldr	r3, [r3, #0]
700013f8:	689a      	ldr	r2, [r3, #8]
700013fa:	4b18      	ldr	r3, [pc, #96]	@ (7000145c <HAL_TIM_Base_Start_IT+0xe8>)
700013fc:	4013      	ands	r3, r2
700013fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
70001400:	68fb      	ldr	r3, [r7, #12]
70001402:	2b06      	cmp	r3, #6
70001404:	d015      	beq.n	70001432 <HAL_TIM_Base_Start_IT+0xbe>
70001406:	68fb      	ldr	r3, [r7, #12]
70001408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
7000140c:	d011      	beq.n	70001432 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
7000140e:	687b      	ldr	r3, [r7, #4]
70001410:	681b      	ldr	r3, [r3, #0]
70001412:	681a      	ldr	r2, [r3, #0]
70001414:	687b      	ldr	r3, [r7, #4]
70001416:	681b      	ldr	r3, [r3, #0]
70001418:	f042 0201 	orr.w	r2, r2, #1
7000141c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
7000141e:	e008      	b.n	70001432 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
70001420:	687b      	ldr	r3, [r7, #4]
70001422:	681b      	ldr	r3, [r3, #0]
70001424:	681a      	ldr	r2, [r3, #0]
70001426:	687b      	ldr	r3, [r7, #4]
70001428:	681b      	ldr	r3, [r3, #0]
7000142a:	f042 0201 	orr.w	r2, r2, #1
7000142e:	601a      	str	r2, [r3, #0]
70001430:	e000      	b.n	70001434 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
70001432:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
70001434:	2300      	movs	r3, #0
}
70001436:	4618      	mov	r0, r3
70001438:	3714      	adds	r7, #20
7000143a:	46bd      	mov	sp, r7
7000143c:	f85d 7b04 	ldr.w	r7, [sp], #4
70001440:	4770      	bx	lr
70001442:	bf00      	nop
70001444:	40000400 	.word	0x40000400
70001448:	40000800 	.word	0x40000800
7000144c:	40000c00 	.word	0x40000c00
70001450:	42004c00 	.word	0x42004c00
70001454:	40001800 	.word	0x40001800
70001458:	42004000 	.word	0x42004000
7000145c:	00010007 	.word	0x00010007

70001460 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
70001460:	b580      	push	{r7, lr}
70001462:	b084      	sub	sp, #16
70001464:	af00      	add	r7, sp, #0
70001466:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
70001468:	687b      	ldr	r3, [r7, #4]
7000146a:	681b      	ldr	r3, [r3, #0]
7000146c:	68db      	ldr	r3, [r3, #12]
7000146e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
70001470:	687b      	ldr	r3, [r7, #4]
70001472:	681b      	ldr	r3, [r3, #0]
70001474:	691b      	ldr	r3, [r3, #16]
70001476:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
70001478:	68bb      	ldr	r3, [r7, #8]
7000147a:	f003 0302 	and.w	r3, r3, #2
7000147e:	2b00      	cmp	r3, #0
70001480:	d020      	beq.n	700014c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
70001482:	68fb      	ldr	r3, [r7, #12]
70001484:	f003 0302 	and.w	r3, r3, #2
70001488:	2b00      	cmp	r3, #0
7000148a:	d01b      	beq.n	700014c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
7000148c:	687b      	ldr	r3, [r7, #4]
7000148e:	681b      	ldr	r3, [r3, #0]
70001490:	f06f 0202 	mvn.w	r2, #2
70001494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
70001496:	687b      	ldr	r3, [r7, #4]
70001498:	2201      	movs	r2, #1
7000149a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
7000149c:	687b      	ldr	r3, [r7, #4]
7000149e:	681b      	ldr	r3, [r3, #0]
700014a0:	699b      	ldr	r3, [r3, #24]
700014a2:	f003 0303 	and.w	r3, r3, #3
700014a6:	2b00      	cmp	r3, #0
700014a8:	d003      	beq.n	700014b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
700014aa:	6878      	ldr	r0, [r7, #4]
700014ac:	f000 f931 	bl	70001712 <HAL_TIM_IC_CaptureCallback>
700014b0:	e005      	b.n	700014be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
700014b2:	6878      	ldr	r0, [r7, #4]
700014b4:	f000 f923 	bl	700016fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
700014b8:	6878      	ldr	r0, [r7, #4]
700014ba:	f000 f934 	bl	70001726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
700014be:	687b      	ldr	r3, [r7, #4]
700014c0:	2200      	movs	r2, #0
700014c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
700014c4:	68bb      	ldr	r3, [r7, #8]
700014c6:	f003 0304 	and.w	r3, r3, #4
700014ca:	2b00      	cmp	r3, #0
700014cc:	d020      	beq.n	70001510 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
700014ce:	68fb      	ldr	r3, [r7, #12]
700014d0:	f003 0304 	and.w	r3, r3, #4
700014d4:	2b00      	cmp	r3, #0
700014d6:	d01b      	beq.n	70001510 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
700014d8:	687b      	ldr	r3, [r7, #4]
700014da:	681b      	ldr	r3, [r3, #0]
700014dc:	f06f 0204 	mvn.w	r2, #4
700014e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
700014e2:	687b      	ldr	r3, [r7, #4]
700014e4:	2202      	movs	r2, #2
700014e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
700014e8:	687b      	ldr	r3, [r7, #4]
700014ea:	681b      	ldr	r3, [r3, #0]
700014ec:	699b      	ldr	r3, [r3, #24]
700014ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
700014f2:	2b00      	cmp	r3, #0
700014f4:	d003      	beq.n	700014fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
700014f6:	6878      	ldr	r0, [r7, #4]
700014f8:	f000 f90b 	bl	70001712 <HAL_TIM_IC_CaptureCallback>
700014fc:	e005      	b.n	7000150a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
700014fe:	6878      	ldr	r0, [r7, #4]
70001500:	f000 f8fd 	bl	700016fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
70001504:	6878      	ldr	r0, [r7, #4]
70001506:	f000 f90e 	bl	70001726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
7000150a:	687b      	ldr	r3, [r7, #4]
7000150c:	2200      	movs	r2, #0
7000150e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
70001510:	68bb      	ldr	r3, [r7, #8]
70001512:	f003 0308 	and.w	r3, r3, #8
70001516:	2b00      	cmp	r3, #0
70001518:	d020      	beq.n	7000155c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
7000151a:	68fb      	ldr	r3, [r7, #12]
7000151c:	f003 0308 	and.w	r3, r3, #8
70001520:	2b00      	cmp	r3, #0
70001522:	d01b      	beq.n	7000155c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
70001524:	687b      	ldr	r3, [r7, #4]
70001526:	681b      	ldr	r3, [r3, #0]
70001528:	f06f 0208 	mvn.w	r2, #8
7000152c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
7000152e:	687b      	ldr	r3, [r7, #4]
70001530:	2204      	movs	r2, #4
70001532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
70001534:	687b      	ldr	r3, [r7, #4]
70001536:	681b      	ldr	r3, [r3, #0]
70001538:	69db      	ldr	r3, [r3, #28]
7000153a:	f003 0303 	and.w	r3, r3, #3
7000153e:	2b00      	cmp	r3, #0
70001540:	d003      	beq.n	7000154a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
70001542:	6878      	ldr	r0, [r7, #4]
70001544:	f000 f8e5 	bl	70001712 <HAL_TIM_IC_CaptureCallback>
70001548:	e005      	b.n	70001556 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
7000154a:	6878      	ldr	r0, [r7, #4]
7000154c:	f000 f8d7 	bl	700016fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
70001550:	6878      	ldr	r0, [r7, #4]
70001552:	f000 f8e8 	bl	70001726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
70001556:	687b      	ldr	r3, [r7, #4]
70001558:	2200      	movs	r2, #0
7000155a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
7000155c:	68bb      	ldr	r3, [r7, #8]
7000155e:	f003 0310 	and.w	r3, r3, #16
70001562:	2b00      	cmp	r3, #0
70001564:	d020      	beq.n	700015a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
70001566:	68fb      	ldr	r3, [r7, #12]
70001568:	f003 0310 	and.w	r3, r3, #16
7000156c:	2b00      	cmp	r3, #0
7000156e:	d01b      	beq.n	700015a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
70001570:	687b      	ldr	r3, [r7, #4]
70001572:	681b      	ldr	r3, [r3, #0]
70001574:	f06f 0210 	mvn.w	r2, #16
70001578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
7000157a:	687b      	ldr	r3, [r7, #4]
7000157c:	2208      	movs	r2, #8
7000157e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
70001580:	687b      	ldr	r3, [r7, #4]
70001582:	681b      	ldr	r3, [r3, #0]
70001584:	69db      	ldr	r3, [r3, #28]
70001586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
7000158a:	2b00      	cmp	r3, #0
7000158c:	d003      	beq.n	70001596 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
7000158e:	6878      	ldr	r0, [r7, #4]
70001590:	f000 f8bf 	bl	70001712 <HAL_TIM_IC_CaptureCallback>
70001594:	e005      	b.n	700015a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
70001596:	6878      	ldr	r0, [r7, #4]
70001598:	f000 f8b1 	bl	700016fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
7000159c:	6878      	ldr	r0, [r7, #4]
7000159e:	f000 f8c2 	bl	70001726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
700015a2:	687b      	ldr	r3, [r7, #4]
700015a4:	2200      	movs	r2, #0
700015a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
700015a8:	68bb      	ldr	r3, [r7, #8]
700015aa:	f003 0301 	and.w	r3, r3, #1
700015ae:	2b00      	cmp	r3, #0
700015b0:	d00c      	beq.n	700015cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
700015b2:	68fb      	ldr	r3, [r7, #12]
700015b4:	f003 0301 	and.w	r3, r3, #1
700015b8:	2b00      	cmp	r3, #0
700015ba:	d007      	beq.n	700015cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
700015bc:	687b      	ldr	r3, [r7, #4]
700015be:	681b      	ldr	r3, [r3, #0]
700015c0:	f06f 0201 	mvn.w	r2, #1
700015c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
700015c6:	6878      	ldr	r0, [r7, #4]
700015c8:	f7fe ffa4 	bl	70000514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
700015cc:	68bb      	ldr	r3, [r7, #8]
700015ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
700015d2:	2b00      	cmp	r3, #0
700015d4:	d104      	bne.n	700015e0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
700015d6:	68bb      	ldr	r3, [r7, #8]
700015d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
700015dc:	2b00      	cmp	r3, #0
700015de:	d00c      	beq.n	700015fa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
700015e0:	68fb      	ldr	r3, [r7, #12]
700015e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
700015e6:	2b00      	cmp	r3, #0
700015e8:	d007      	beq.n	700015fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
700015ea:	687b      	ldr	r3, [r7, #4]
700015ec:	681b      	ldr	r3, [r3, #0]
700015ee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
700015f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
700015f4:	6878      	ldr	r0, [r7, #4]
700015f6:	f000 f963 	bl	700018c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
700015fa:	68bb      	ldr	r3, [r7, #8]
700015fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
70001600:	2b00      	cmp	r3, #0
70001602:	d00c      	beq.n	7000161e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
70001604:	68fb      	ldr	r3, [r7, #12]
70001606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
7000160a:	2b00      	cmp	r3, #0
7000160c:	d007      	beq.n	7000161e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
7000160e:	687b      	ldr	r3, [r7, #4]
70001610:	681b      	ldr	r3, [r3, #0]
70001612:	f46f 7280 	mvn.w	r2, #256	@ 0x100
70001616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
70001618:	6878      	ldr	r0, [r7, #4]
7000161a:	f000 f95b 	bl	700018d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
7000161e:	68bb      	ldr	r3, [r7, #8]
70001620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
70001624:	2b00      	cmp	r3, #0
70001626:	d00c      	beq.n	70001642 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
70001628:	68fb      	ldr	r3, [r7, #12]
7000162a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
7000162e:	2b00      	cmp	r3, #0
70001630:	d007      	beq.n	70001642 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
70001632:	687b      	ldr	r3, [r7, #4]
70001634:	681b      	ldr	r3, [r3, #0]
70001636:	f06f 0240 	mvn.w	r2, #64	@ 0x40
7000163a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
7000163c:	6878      	ldr	r0, [r7, #4]
7000163e:	f000 f87c 	bl	7000173a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
70001642:	68bb      	ldr	r3, [r7, #8]
70001644:	f003 0320 	and.w	r3, r3, #32
70001648:	2b00      	cmp	r3, #0
7000164a:	d00c      	beq.n	70001666 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
7000164c:	68fb      	ldr	r3, [r7, #12]
7000164e:	f003 0320 	and.w	r3, r3, #32
70001652:	2b00      	cmp	r3, #0
70001654:	d007      	beq.n	70001666 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
70001656:	687b      	ldr	r3, [r7, #4]
70001658:	681b      	ldr	r3, [r3, #0]
7000165a:	f06f 0220 	mvn.w	r2, #32
7000165e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
70001660:	6878      	ldr	r0, [r7, #4]
70001662:	f000 f923 	bl	700018ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
70001666:	68bb      	ldr	r3, [r7, #8]
70001668:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
7000166c:	2b00      	cmp	r3, #0
7000166e:	d00c      	beq.n	7000168a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
70001670:	68fb      	ldr	r3, [r7, #12]
70001672:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
70001676:	2b00      	cmp	r3, #0
70001678:	d007      	beq.n	7000168a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
7000167a:	687b      	ldr	r3, [r7, #4]
7000167c:	681b      	ldr	r3, [r3, #0]
7000167e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
70001682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
70001684:	6878      	ldr	r0, [r7, #4]
70001686:	f000 f92f 	bl	700018e8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
7000168a:	68bb      	ldr	r3, [r7, #8]
7000168c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
70001690:	2b00      	cmp	r3, #0
70001692:	d00c      	beq.n	700016ae <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
70001694:	68fb      	ldr	r3, [r7, #12]
70001696:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
7000169a:	2b00      	cmp	r3, #0
7000169c:	d007      	beq.n	700016ae <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
7000169e:	687b      	ldr	r3, [r7, #4]
700016a0:	681b      	ldr	r3, [r3, #0]
700016a2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
700016a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
700016a8:	6878      	ldr	r0, [r7, #4]
700016aa:	f000 f927 	bl	700018fc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
700016ae:	68bb      	ldr	r3, [r7, #8]
700016b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
700016b4:	2b00      	cmp	r3, #0
700016b6:	d00c      	beq.n	700016d2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
700016b8:	68fb      	ldr	r3, [r7, #12]
700016ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
700016be:	2b00      	cmp	r3, #0
700016c0:	d007      	beq.n	700016d2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
700016c2:	687b      	ldr	r3, [r7, #4]
700016c4:	681b      	ldr	r3, [r3, #0]
700016c6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
700016ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
700016cc:	6878      	ldr	r0, [r7, #4]
700016ce:	f000 f91f 	bl	70001910 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
700016d2:	68bb      	ldr	r3, [r7, #8]
700016d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
700016d8:	2b00      	cmp	r3, #0
700016da:	d00c      	beq.n	700016f6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
700016dc:	68fb      	ldr	r3, [r7, #12]
700016de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
700016e2:	2b00      	cmp	r3, #0
700016e4:	d007      	beq.n	700016f6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
700016e6:	687b      	ldr	r3, [r7, #4]
700016e8:	681b      	ldr	r3, [r3, #0]
700016ea:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
700016ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
700016f0:	6878      	ldr	r0, [r7, #4]
700016f2:	f000 f917 	bl	70001924 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
700016f6:	bf00      	nop
700016f8:	3710      	adds	r7, #16
700016fa:	46bd      	mov	sp, r7
700016fc:	bd80      	pop	{r7, pc}

700016fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
700016fe:	b480      	push	{r7}
70001700:	b083      	sub	sp, #12
70001702:	af00      	add	r7, sp, #0
70001704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
70001706:	bf00      	nop
70001708:	370c      	adds	r7, #12
7000170a:	46bd      	mov	sp, r7
7000170c:	f85d 7b04 	ldr.w	r7, [sp], #4
70001710:	4770      	bx	lr

70001712 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
70001712:	b480      	push	{r7}
70001714:	b083      	sub	sp, #12
70001716:	af00      	add	r7, sp, #0
70001718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
7000171a:	bf00      	nop
7000171c:	370c      	adds	r7, #12
7000171e:	46bd      	mov	sp, r7
70001720:	f85d 7b04 	ldr.w	r7, [sp], #4
70001724:	4770      	bx	lr

70001726 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
70001726:	b480      	push	{r7}
70001728:	b083      	sub	sp, #12
7000172a:	af00      	add	r7, sp, #0
7000172c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
7000172e:	bf00      	nop
70001730:	370c      	adds	r7, #12
70001732:	46bd      	mov	sp, r7
70001734:	f85d 7b04 	ldr.w	r7, [sp], #4
70001738:	4770      	bx	lr

7000173a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
7000173a:	b480      	push	{r7}
7000173c:	b083      	sub	sp, #12
7000173e:	af00      	add	r7, sp, #0
70001740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
70001742:	bf00      	nop
70001744:	370c      	adds	r7, #12
70001746:	46bd      	mov	sp, r7
70001748:	f85d 7b04 	ldr.w	r7, [sp], #4
7000174c:	4770      	bx	lr
	...

70001750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
70001750:	b480      	push	{r7}
70001752:	b085      	sub	sp, #20
70001754:	af00      	add	r7, sp, #0
70001756:	6078      	str	r0, [r7, #4]
70001758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
7000175a:	687b      	ldr	r3, [r7, #4]
7000175c:	681b      	ldr	r3, [r3, #0]
7000175e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
70001760:	687b      	ldr	r3, [r7, #4]
70001762:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
70001766:	d00f      	beq.n	70001788 <TIM_Base_SetConfig+0x38>
70001768:	687b      	ldr	r3, [r7, #4]
7000176a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
7000176e:	d00b      	beq.n	70001788 <TIM_Base_SetConfig+0x38>
70001770:	687b      	ldr	r3, [r7, #4]
70001772:	4a44      	ldr	r2, [pc, #272]	@ (70001884 <TIM_Base_SetConfig+0x134>)
70001774:	4293      	cmp	r3, r2
70001776:	d007      	beq.n	70001788 <TIM_Base_SetConfig+0x38>
70001778:	687b      	ldr	r3, [r7, #4]
7000177a:	4a43      	ldr	r2, [pc, #268]	@ (70001888 <TIM_Base_SetConfig+0x138>)
7000177c:	4293      	cmp	r3, r2
7000177e:	d003      	beq.n	70001788 <TIM_Base_SetConfig+0x38>
70001780:	687b      	ldr	r3, [r7, #4]
70001782:	4a42      	ldr	r2, [pc, #264]	@ (7000188c <TIM_Base_SetConfig+0x13c>)
70001784:	4293      	cmp	r3, r2
70001786:	d108      	bne.n	7000179a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
70001788:	68fb      	ldr	r3, [r7, #12]
7000178a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
7000178e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
70001790:	683b      	ldr	r3, [r7, #0]
70001792:	685b      	ldr	r3, [r3, #4]
70001794:	68fa      	ldr	r2, [r7, #12]
70001796:	4313      	orrs	r3, r2
70001798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
7000179a:	687b      	ldr	r3, [r7, #4]
7000179c:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
700017a0:	d02b      	beq.n	700017fa <TIM_Base_SetConfig+0xaa>
700017a2:	687b      	ldr	r3, [r7, #4]
700017a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
700017a8:	d027      	beq.n	700017fa <TIM_Base_SetConfig+0xaa>
700017aa:	687b      	ldr	r3, [r7, #4]
700017ac:	4a35      	ldr	r2, [pc, #212]	@ (70001884 <TIM_Base_SetConfig+0x134>)
700017ae:	4293      	cmp	r3, r2
700017b0:	d023      	beq.n	700017fa <TIM_Base_SetConfig+0xaa>
700017b2:	687b      	ldr	r3, [r7, #4]
700017b4:	4a34      	ldr	r2, [pc, #208]	@ (70001888 <TIM_Base_SetConfig+0x138>)
700017b6:	4293      	cmp	r3, r2
700017b8:	d01f      	beq.n	700017fa <TIM_Base_SetConfig+0xaa>
700017ba:	687b      	ldr	r3, [r7, #4]
700017bc:	4a33      	ldr	r2, [pc, #204]	@ (7000188c <TIM_Base_SetConfig+0x13c>)
700017be:	4293      	cmp	r3, r2
700017c0:	d01b      	beq.n	700017fa <TIM_Base_SetConfig+0xaa>
700017c2:	687b      	ldr	r3, [r7, #4]
700017c4:	4a32      	ldr	r2, [pc, #200]	@ (70001890 <TIM_Base_SetConfig+0x140>)
700017c6:	4293      	cmp	r3, r2
700017c8:	d017      	beq.n	700017fa <TIM_Base_SetConfig+0xaa>
700017ca:	687b      	ldr	r3, [r7, #4]
700017cc:	4a31      	ldr	r2, [pc, #196]	@ (70001894 <TIM_Base_SetConfig+0x144>)
700017ce:	4293      	cmp	r3, r2
700017d0:	d013      	beq.n	700017fa <TIM_Base_SetConfig+0xaa>
700017d2:	687b      	ldr	r3, [r7, #4]
700017d4:	4a30      	ldr	r2, [pc, #192]	@ (70001898 <TIM_Base_SetConfig+0x148>)
700017d6:	4293      	cmp	r3, r2
700017d8:	d00f      	beq.n	700017fa <TIM_Base_SetConfig+0xaa>
700017da:	687b      	ldr	r3, [r7, #4]
700017dc:	4a2f      	ldr	r2, [pc, #188]	@ (7000189c <TIM_Base_SetConfig+0x14c>)
700017de:	4293      	cmp	r3, r2
700017e0:	d00b      	beq.n	700017fa <TIM_Base_SetConfig+0xaa>
700017e2:	687b      	ldr	r3, [r7, #4]
700017e4:	4a2e      	ldr	r2, [pc, #184]	@ (700018a0 <TIM_Base_SetConfig+0x150>)
700017e6:	4293      	cmp	r3, r2
700017e8:	d007      	beq.n	700017fa <TIM_Base_SetConfig+0xaa>
700017ea:	687b      	ldr	r3, [r7, #4]
700017ec:	4a2d      	ldr	r2, [pc, #180]	@ (700018a4 <TIM_Base_SetConfig+0x154>)
700017ee:	4293      	cmp	r3, r2
700017f0:	d003      	beq.n	700017fa <TIM_Base_SetConfig+0xaa>
700017f2:	687b      	ldr	r3, [r7, #4]
700017f4:	4a2c      	ldr	r2, [pc, #176]	@ (700018a8 <TIM_Base_SetConfig+0x158>)
700017f6:	4293      	cmp	r3, r2
700017f8:	d108      	bne.n	7000180c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
700017fa:	68fb      	ldr	r3, [r7, #12]
700017fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
70001800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
70001802:	683b      	ldr	r3, [r7, #0]
70001804:	68db      	ldr	r3, [r3, #12]
70001806:	68fa      	ldr	r2, [r7, #12]
70001808:	4313      	orrs	r3, r2
7000180a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
7000180c:	68fb      	ldr	r3, [r7, #12]
7000180e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
70001812:	683b      	ldr	r3, [r7, #0]
70001814:	695b      	ldr	r3, [r3, #20]
70001816:	4313      	orrs	r3, r2
70001818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
7000181a:	687b      	ldr	r3, [r7, #4]
7000181c:	68fa      	ldr	r2, [r7, #12]
7000181e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
70001820:	683b      	ldr	r3, [r7, #0]
70001822:	689a      	ldr	r2, [r3, #8]
70001824:	687b      	ldr	r3, [r7, #4]
70001826:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
70001828:	683b      	ldr	r3, [r7, #0]
7000182a:	681a      	ldr	r2, [r3, #0]
7000182c:	687b      	ldr	r3, [r7, #4]
7000182e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
70001830:	687b      	ldr	r3, [r7, #4]
70001832:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
70001836:	d00b      	beq.n	70001850 <TIM_Base_SetConfig+0x100>
70001838:	687b      	ldr	r3, [r7, #4]
7000183a:	4a19      	ldr	r2, [pc, #100]	@ (700018a0 <TIM_Base_SetConfig+0x150>)
7000183c:	4293      	cmp	r3, r2
7000183e:	d007      	beq.n	70001850 <TIM_Base_SetConfig+0x100>
70001840:	687b      	ldr	r3, [r7, #4]
70001842:	4a18      	ldr	r2, [pc, #96]	@ (700018a4 <TIM_Base_SetConfig+0x154>)
70001844:	4293      	cmp	r3, r2
70001846:	d003      	beq.n	70001850 <TIM_Base_SetConfig+0x100>
70001848:	687b      	ldr	r3, [r7, #4]
7000184a:	4a17      	ldr	r2, [pc, #92]	@ (700018a8 <TIM_Base_SetConfig+0x158>)
7000184c:	4293      	cmp	r3, r2
7000184e:	d103      	bne.n	70001858 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
70001850:	683b      	ldr	r3, [r7, #0]
70001852:	691a      	ldr	r2, [r3, #16]
70001854:	687b      	ldr	r3, [r7, #4]
70001856:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
70001858:	687b      	ldr	r3, [r7, #4]
7000185a:	2201      	movs	r2, #1
7000185c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
7000185e:	687b      	ldr	r3, [r7, #4]
70001860:	691b      	ldr	r3, [r3, #16]
70001862:	f003 0301 	and.w	r3, r3, #1
70001866:	2b01      	cmp	r3, #1
70001868:	d105      	bne.n	70001876 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
7000186a:	687b      	ldr	r3, [r7, #4]
7000186c:	691b      	ldr	r3, [r3, #16]
7000186e:	f023 0201 	bic.w	r2, r3, #1
70001872:	687b      	ldr	r3, [r7, #4]
70001874:	611a      	str	r2, [r3, #16]
  }
}
70001876:	bf00      	nop
70001878:	3714      	adds	r7, #20
7000187a:	46bd      	mov	sp, r7
7000187c:	f85d 7b04 	ldr.w	r7, [sp], #4
70001880:	4770      	bx	lr
70001882:	bf00      	nop
70001884:	40000400 	.word	0x40000400
70001888:	40000800 	.word	0x40000800
7000188c:	40000c00 	.word	0x40000c00
70001890:	42004c00 	.word	0x42004c00
70001894:	40001800 	.word	0x40001800
70001898:	40001c00 	.word	0x40001c00
7000189c:	40002000 	.word	0x40002000
700018a0:	42004000 	.word	0x42004000
700018a4:	42004400 	.word	0x42004400
700018a8:	42004800 	.word	0x42004800

700018ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
700018ac:	b480      	push	{r7}
700018ae:	b083      	sub	sp, #12
700018b0:	af00      	add	r7, sp, #0
700018b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
700018b4:	bf00      	nop
700018b6:	370c      	adds	r7, #12
700018b8:	46bd      	mov	sp, r7
700018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
700018be:	4770      	bx	lr

700018c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
700018c0:	b480      	push	{r7}
700018c2:	b083      	sub	sp, #12
700018c4:	af00      	add	r7, sp, #0
700018c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
700018c8:	bf00      	nop
700018ca:	370c      	adds	r7, #12
700018cc:	46bd      	mov	sp, r7
700018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
700018d2:	4770      	bx	lr

700018d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
700018d4:	b480      	push	{r7}
700018d6:	b083      	sub	sp, #12
700018d8:	af00      	add	r7, sp, #0
700018da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
700018dc:	bf00      	nop
700018de:	370c      	adds	r7, #12
700018e0:	46bd      	mov	sp, r7
700018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
700018e6:	4770      	bx	lr

700018e8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
700018e8:	b480      	push	{r7}
700018ea:	b083      	sub	sp, #12
700018ec:	af00      	add	r7, sp, #0
700018ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
700018f0:	bf00      	nop
700018f2:	370c      	adds	r7, #12
700018f4:	46bd      	mov	sp, r7
700018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
700018fa:	4770      	bx	lr

700018fc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
700018fc:	b480      	push	{r7}
700018fe:	b083      	sub	sp, #12
70001900:	af00      	add	r7, sp, #0
70001902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
70001904:	bf00      	nop
70001906:	370c      	adds	r7, #12
70001908:	46bd      	mov	sp, r7
7000190a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000190e:	4770      	bx	lr

70001910 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
70001910:	b480      	push	{r7}
70001912:	b083      	sub	sp, #12
70001914:	af00      	add	r7, sp, #0
70001916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
70001918:	bf00      	nop
7000191a:	370c      	adds	r7, #12
7000191c:	46bd      	mov	sp, r7
7000191e:	f85d 7b04 	ldr.w	r7, [sp], #4
70001922:	4770      	bx	lr

70001924 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
70001924:	b480      	push	{r7}
70001926:	b083      	sub	sp, #12
70001928:	af00      	add	r7, sp, #0
7000192a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
7000192c:	bf00      	nop
7000192e:	370c      	adds	r7, #12
70001930:	46bd      	mov	sp, r7
70001932:	f85d 7b04 	ldr.w	r7, [sp], #4
70001936:	4770      	bx	lr

70001938 <__NVIC_SetPriority>:
{
70001938:	b480      	push	{r7}
7000193a:	b083      	sub	sp, #12
7000193c:	af00      	add	r7, sp, #0
7000193e:	4603      	mov	r3, r0
70001940:	6039      	str	r1, [r7, #0]
70001942:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
70001944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70001948:	2b00      	cmp	r3, #0
7000194a:	db0a      	blt.n	70001962 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
7000194c:	683b      	ldr	r3, [r7, #0]
7000194e:	b2da      	uxtb	r2, r3
70001950:	490c      	ldr	r1, [pc, #48]	@ (70001984 <__NVIC_SetPriority+0x4c>)
70001952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70001956:	0112      	lsls	r2, r2, #4
70001958:	b2d2      	uxtb	r2, r2
7000195a:	440b      	add	r3, r1
7000195c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
70001960:	e00a      	b.n	70001978 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
70001962:	683b      	ldr	r3, [r7, #0]
70001964:	b2da      	uxtb	r2, r3
70001966:	4908      	ldr	r1, [pc, #32]	@ (70001988 <__NVIC_SetPriority+0x50>)
70001968:	88fb      	ldrh	r3, [r7, #6]
7000196a:	f003 030f 	and.w	r3, r3, #15
7000196e:	3b04      	subs	r3, #4
70001970:	0112      	lsls	r2, r2, #4
70001972:	b2d2      	uxtb	r2, r2
70001974:	440b      	add	r3, r1
70001976:	761a      	strb	r2, [r3, #24]
}
70001978:	bf00      	nop
7000197a:	370c      	adds	r7, #12
7000197c:	46bd      	mov	sp, r7
7000197e:	f85d 7b04 	ldr.w	r7, [sp], #4
70001982:	4770      	bx	lr
70001984:	e000e100 	.word	0xe000e100
70001988:	e000ed00 	.word	0xe000ed00

7000198c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
7000198c:	b580      	push	{r7, lr}
7000198e:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
70001990:	4b05      	ldr	r3, [pc, #20]	@ (700019a8 <SysTick_Handler+0x1c>)
70001992:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
70001994:	f002 f8c6 	bl	70003b24 <xTaskGetSchedulerState>
70001998:	4603      	mov	r3, r0
7000199a:	2b01      	cmp	r3, #1
7000199c:	d001      	beq.n	700019a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
7000199e:	f000 fd8b 	bl	700024b8 <xPortSysTickHandler>
  }
}
700019a2:	bf00      	nop
700019a4:	bd80      	pop	{r7, pc}
700019a6:	bf00      	nop
700019a8:	e000e010 	.word	0xe000e010

700019ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
700019ac:	b580      	push	{r7, lr}
700019ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
700019b0:	2100      	movs	r1, #0
700019b2:	f06f 0004 	mvn.w	r0, #4
700019b6:	f7ff ffbf 	bl	70001938 <__NVIC_SetPriority>
#endif
}
700019ba:	bf00      	nop
700019bc:	bd80      	pop	{r7, pc}

700019be <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
700019be:	b580      	push	{r7, lr}
700019c0:	b086      	sub	sp, #24
700019c2:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
700019c4:	2300      	movs	r3, #0
700019c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
700019c8:	f3ef 8305 	mrs	r3, IPSR
700019cc:	60fb      	str	r3, [r7, #12]
  return(result);
700019ce:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
700019d0:	2b00      	cmp	r3, #0
700019d2:	d002      	beq.n	700019da <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
700019d4:	2301      	movs	r3, #1
700019d6:	617b      	str	r3, [r7, #20]
700019d8:	e013      	b.n	70001a02 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
700019da:	f002 f8a3 	bl	70003b24 <xTaskGetSchedulerState>
700019de:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
700019e0:	693b      	ldr	r3, [r7, #16]
700019e2:	2b01      	cmp	r3, #1
700019e4:	d00d      	beq.n	70001a02 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
700019e6:	f3ef 8310 	mrs	r3, PRIMASK
700019ea:	60bb      	str	r3, [r7, #8]
  return(result);
700019ec:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
700019ee:	2b00      	cmp	r3, #0
700019f0:	d105      	bne.n	700019fe <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
700019f2:	f3ef 8311 	mrs	r3, BASEPRI
700019f6:	607b      	str	r3, [r7, #4]
  return(result);
700019f8:	687b      	ldr	r3, [r7, #4]
700019fa:	2b00      	cmp	r3, #0
700019fc:	d001      	beq.n	70001a02 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
700019fe:	2301      	movs	r3, #1
70001a00:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
70001a02:	697b      	ldr	r3, [r7, #20]
}
70001a04:	4618      	mov	r0, r3
70001a06:	3718      	adds	r7, #24
70001a08:	46bd      	mov	sp, r7
70001a0a:	bd80      	pop	{r7, pc}

70001a0c <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
70001a0c:	b580      	push	{r7, lr}
70001a0e:	b082      	sub	sp, #8
70001a10:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
70001a12:	f7ff ffd4 	bl	700019be <IRQ_Context>
70001a16:	4603      	mov	r3, r0
70001a18:	2b00      	cmp	r3, #0
70001a1a:	d003      	beq.n	70001a24 <osKernelInitialize+0x18>
    stat = osErrorISR;
70001a1c:	f06f 0305 	mvn.w	r3, #5
70001a20:	607b      	str	r3, [r7, #4]
70001a22:	e012      	b.n	70001a4a <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
70001a24:	f002 f87e 	bl	70003b24 <xTaskGetSchedulerState>
70001a28:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
70001a2a:	683b      	ldr	r3, [r7, #0]
70001a2c:	2b01      	cmp	r3, #1
70001a2e:	d109      	bne.n	70001a44 <osKernelInitialize+0x38>
70001a30:	4b08      	ldr	r3, [pc, #32]	@ (70001a54 <osKernelInitialize+0x48>)
70001a32:	681b      	ldr	r3, [r3, #0]
70001a34:	2b00      	cmp	r3, #0
70001a36:	d105      	bne.n	70001a44 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
70001a38:	4b06      	ldr	r3, [pc, #24]	@ (70001a54 <osKernelInitialize+0x48>)
70001a3a:	2201      	movs	r2, #1
70001a3c:	601a      	str	r2, [r3, #0]
      stat = osOK;
70001a3e:	2300      	movs	r3, #0
70001a40:	607b      	str	r3, [r7, #4]
70001a42:	e002      	b.n	70001a4a <osKernelInitialize+0x3e>
    } else {
      stat = osError;
70001a44:	f04f 33ff 	mov.w	r3, #4294967295
70001a48:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
70001a4a:	687b      	ldr	r3, [r7, #4]
}
70001a4c:	4618      	mov	r0, r3
70001a4e:	3708      	adds	r7, #8
70001a50:	46bd      	mov	sp, r7
70001a52:	bd80      	pop	{r7, pc}
70001a54:	240000d8 	.word	0x240000d8

70001a58 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
70001a58:	b580      	push	{r7, lr}
70001a5a:	b082      	sub	sp, #8
70001a5c:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
70001a5e:	f7ff ffae 	bl	700019be <IRQ_Context>
70001a62:	4603      	mov	r3, r0
70001a64:	2b00      	cmp	r3, #0
70001a66:	d003      	beq.n	70001a70 <osKernelStart+0x18>
    stat = osErrorISR;
70001a68:	f06f 0305 	mvn.w	r3, #5
70001a6c:	607b      	str	r3, [r7, #4]
70001a6e:	e016      	b.n	70001a9e <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
70001a70:	f002 f858 	bl	70003b24 <xTaskGetSchedulerState>
70001a74:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
70001a76:	683b      	ldr	r3, [r7, #0]
70001a78:	2b01      	cmp	r3, #1
70001a7a:	d10d      	bne.n	70001a98 <osKernelStart+0x40>
70001a7c:	4b0a      	ldr	r3, [pc, #40]	@ (70001aa8 <osKernelStart+0x50>)
70001a7e:	681b      	ldr	r3, [r3, #0]
70001a80:	2b01      	cmp	r3, #1
70001a82:	d109      	bne.n	70001a98 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
70001a84:	f7ff ff92 	bl	700019ac <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
70001a88:	4b07      	ldr	r3, [pc, #28]	@ (70001aa8 <osKernelStart+0x50>)
70001a8a:	2202      	movs	r2, #2
70001a8c:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
70001a8e:	f001 fa93 	bl	70002fb8 <vTaskStartScheduler>
      stat = osOK;
70001a92:	2300      	movs	r3, #0
70001a94:	607b      	str	r3, [r7, #4]
70001a96:	e002      	b.n	70001a9e <osKernelStart+0x46>
    } else {
      stat = osError;
70001a98:	f04f 33ff 	mov.w	r3, #4294967295
70001a9c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
70001a9e:	687b      	ldr	r3, [r7, #4]
}
70001aa0:	4618      	mov	r0, r3
70001aa2:	3708      	adds	r7, #8
70001aa4:	46bd      	mov	sp, r7
70001aa6:	bd80      	pop	{r7, pc}
70001aa8:	240000d8 	.word	0x240000d8

70001aac <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
70001aac:	b580      	push	{r7, lr}
70001aae:	b08e      	sub	sp, #56	@ 0x38
70001ab0:	af04      	add	r7, sp, #16
70001ab2:	60f8      	str	r0, [r7, #12]
70001ab4:	60b9      	str	r1, [r7, #8]
70001ab6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
70001ab8:	2300      	movs	r3, #0
70001aba:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
70001abc:	f7ff ff7f 	bl	700019be <IRQ_Context>
70001ac0:	4603      	mov	r3, r0
70001ac2:	2b00      	cmp	r3, #0
70001ac4:	d17f      	bne.n	70001bc6 <osThreadNew+0x11a>
70001ac6:	68fb      	ldr	r3, [r7, #12]
70001ac8:	2b00      	cmp	r3, #0
70001aca:	d07c      	beq.n	70001bc6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
70001acc:	f44f 7380 	mov.w	r3, #256	@ 0x100
70001ad0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
70001ad2:	2318      	movs	r3, #24
70001ad4:	61fb      	str	r3, [r7, #28]

    name = NULL;
70001ad6:	2300      	movs	r3, #0
70001ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
70001ada:	f04f 33ff 	mov.w	r3, #4294967295
70001ade:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
70001ae0:	687b      	ldr	r3, [r7, #4]
70001ae2:	2b00      	cmp	r3, #0
70001ae4:	d045      	beq.n	70001b72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
70001ae6:	687b      	ldr	r3, [r7, #4]
70001ae8:	681b      	ldr	r3, [r3, #0]
70001aea:	2b00      	cmp	r3, #0
70001aec:	d002      	beq.n	70001af4 <osThreadNew+0x48>
        name = attr->name;
70001aee:	687b      	ldr	r3, [r7, #4]
70001af0:	681b      	ldr	r3, [r3, #0]
70001af2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
70001af4:	687b      	ldr	r3, [r7, #4]
70001af6:	699b      	ldr	r3, [r3, #24]
70001af8:	2b00      	cmp	r3, #0
70001afa:	d002      	beq.n	70001b02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
70001afc:	687b      	ldr	r3, [r7, #4]
70001afe:	699b      	ldr	r3, [r3, #24]
70001b00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
70001b02:	69fb      	ldr	r3, [r7, #28]
70001b04:	2b00      	cmp	r3, #0
70001b06:	d008      	beq.n	70001b1a <osThreadNew+0x6e>
70001b08:	69fb      	ldr	r3, [r7, #28]
70001b0a:	2b38      	cmp	r3, #56	@ 0x38
70001b0c:	d805      	bhi.n	70001b1a <osThreadNew+0x6e>
70001b0e:	687b      	ldr	r3, [r7, #4]
70001b10:	685b      	ldr	r3, [r3, #4]
70001b12:	f003 0301 	and.w	r3, r3, #1
70001b16:	2b00      	cmp	r3, #0
70001b18:	d001      	beq.n	70001b1e <osThreadNew+0x72>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
70001b1a:	2300      	movs	r3, #0
70001b1c:	e054      	b.n	70001bc8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
70001b1e:	687b      	ldr	r3, [r7, #4]
70001b20:	695b      	ldr	r3, [r3, #20]
70001b22:	2b00      	cmp	r3, #0
70001b24:	d003      	beq.n	70001b2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
70001b26:	687b      	ldr	r3, [r7, #4]
70001b28:	695b      	ldr	r3, [r3, #20]
70001b2a:	089b      	lsrs	r3, r3, #2
70001b2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
70001b2e:	687b      	ldr	r3, [r7, #4]
70001b30:	689b      	ldr	r3, [r3, #8]
70001b32:	2b00      	cmp	r3, #0
70001b34:	d00e      	beq.n	70001b54 <osThreadNew+0xa8>
70001b36:	687b      	ldr	r3, [r7, #4]
70001b38:	68db      	ldr	r3, [r3, #12]
70001b3a:	2ba7      	cmp	r3, #167	@ 0xa7
70001b3c:	d90a      	bls.n	70001b54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
70001b3e:	687b      	ldr	r3, [r7, #4]
70001b40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
70001b42:	2b00      	cmp	r3, #0
70001b44:	d006      	beq.n	70001b54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
70001b46:	687b      	ldr	r3, [r7, #4]
70001b48:	695b      	ldr	r3, [r3, #20]
70001b4a:	2b00      	cmp	r3, #0
70001b4c:	d002      	beq.n	70001b54 <osThreadNew+0xa8>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
70001b4e:	2301      	movs	r3, #1
70001b50:	61bb      	str	r3, [r7, #24]
70001b52:	e010      	b.n	70001b76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
70001b54:	687b      	ldr	r3, [r7, #4]
70001b56:	689b      	ldr	r3, [r3, #8]
70001b58:	2b00      	cmp	r3, #0
70001b5a:	d10c      	bne.n	70001b76 <osThreadNew+0xca>
70001b5c:	687b      	ldr	r3, [r7, #4]
70001b5e:	68db      	ldr	r3, [r3, #12]
70001b60:	2b00      	cmp	r3, #0
70001b62:	d108      	bne.n	70001b76 <osThreadNew+0xca>
70001b64:	687b      	ldr	r3, [r7, #4]
70001b66:	691b      	ldr	r3, [r3, #16]
70001b68:	2b00      	cmp	r3, #0
70001b6a:	d104      	bne.n	70001b76 <osThreadNew+0xca>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
70001b6c:	2300      	movs	r3, #0
70001b6e:	61bb      	str	r3, [r7, #24]
70001b70:	e001      	b.n	70001b76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
70001b72:	2300      	movs	r3, #0
70001b74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
70001b76:	69bb      	ldr	r3, [r7, #24]
70001b78:	2b01      	cmp	r3, #1
70001b7a:	d110      	bne.n	70001b9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
70001b7c:	687b      	ldr	r3, [r7, #4]
70001b7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
70001b80:	687a      	ldr	r2, [r7, #4]
70001b82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
70001b84:	9202      	str	r2, [sp, #8]
70001b86:	9301      	str	r3, [sp, #4]
70001b88:	69fb      	ldr	r3, [r7, #28]
70001b8a:	9300      	str	r3, [sp, #0]
70001b8c:	68bb      	ldr	r3, [r7, #8]
70001b8e:	6a3a      	ldr	r2, [r7, #32]
70001b90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
70001b92:	68f8      	ldr	r0, [r7, #12]
70001b94:	f000 ffec 	bl	70002b70 <xTaskCreateStatic>
70001b98:	4603      	mov	r3, r0
70001b9a:	617b      	str	r3, [r7, #20]
70001b9c:	e013      	b.n	70001bc6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
70001b9e:	69bb      	ldr	r3, [r7, #24]
70001ba0:	2b00      	cmp	r3, #0
70001ba2:	d110      	bne.n	70001bc6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
70001ba4:	6a3b      	ldr	r3, [r7, #32]
70001ba6:	b29a      	uxth	r2, r3
70001ba8:	f107 0314 	add.w	r3, r7, #20
70001bac:	9301      	str	r3, [sp, #4]
70001bae:	69fb      	ldr	r3, [r7, #28]
70001bb0:	9300      	str	r3, [sp, #0]
70001bb2:	68bb      	ldr	r3, [r7, #8]
70001bb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
70001bb6:	68f8      	ldr	r0, [r7, #12]
70001bb8:	f001 f83f 	bl	70002c3a <xTaskCreate>
70001bbc:	4603      	mov	r3, r0
70001bbe:	2b01      	cmp	r3, #1
70001bc0:	d001      	beq.n	70001bc6 <osThreadNew+0x11a>
            hTask = NULL;
70001bc2:	2300      	movs	r3, #0
70001bc4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
70001bc6:	697b      	ldr	r3, [r7, #20]
}
70001bc8:	4618      	mov	r0, r3
70001bca:	3728      	adds	r7, #40	@ 0x28
70001bcc:	46bd      	mov	sp, r7
70001bce:	bd80      	pop	{r7, pc}

70001bd0 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
70001bd0:	b580      	push	{r7, lr}
70001bd2:	b084      	sub	sp, #16
70001bd4:	af00      	add	r7, sp, #0
70001bd6:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
70001bd8:	f7ff fef1 	bl	700019be <IRQ_Context>
70001bdc:	4603      	mov	r3, r0
70001bde:	2b00      	cmp	r3, #0
70001be0:	d003      	beq.n	70001bea <osDelay+0x1a>
    stat = osErrorISR;
70001be2:	f06f 0305 	mvn.w	r3, #5
70001be6:	60fb      	str	r3, [r7, #12]
70001be8:	e007      	b.n	70001bfa <osDelay+0x2a>
  }
  else {
    stat = osOK;
70001bea:	2300      	movs	r3, #0
70001bec:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
70001bee:	687b      	ldr	r3, [r7, #4]
70001bf0:	2b00      	cmp	r3, #0
70001bf2:	d002      	beq.n	70001bfa <osDelay+0x2a>
      vTaskDelay(ticks);
70001bf4:	6878      	ldr	r0, [r7, #4]
70001bf6:	f001 f9a9 	bl	70002f4c <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
70001bfa:	68fb      	ldr	r3, [r7, #12]
}
70001bfc:	4618      	mov	r0, r3
70001bfe:	3710      	adds	r7, #16
70001c00:	46bd      	mov	sp, r7
70001c02:	bd80      	pop	{r7, pc}

70001c04 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
70001c04:	b480      	push	{r7}
70001c06:	b085      	sub	sp, #20
70001c08:	af00      	add	r7, sp, #0
70001c0a:	60f8      	str	r0, [r7, #12]
70001c0c:	60b9      	str	r1, [r7, #8]
70001c0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
70001c10:	68fb      	ldr	r3, [r7, #12]
70001c12:	4a07      	ldr	r2, [pc, #28]	@ (70001c30 <vApplicationGetIdleTaskMemory+0x2c>)
70001c14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
70001c16:	68bb      	ldr	r3, [r7, #8]
70001c18:	4a06      	ldr	r2, [pc, #24]	@ (70001c34 <vApplicationGetIdleTaskMemory+0x30>)
70001c1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
70001c1c:	687b      	ldr	r3, [r7, #4]
70001c1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
70001c22:	601a      	str	r2, [r3, #0]
}
70001c24:	bf00      	nop
70001c26:	3714      	adds	r7, #20
70001c28:	46bd      	mov	sp, r7
70001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
70001c2e:	4770      	bx	lr
70001c30:	240000dc 	.word	0x240000dc
70001c34:	24000184 	.word	0x24000184

70001c38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
70001c38:	b480      	push	{r7}
70001c3a:	b085      	sub	sp, #20
70001c3c:	af00      	add	r7, sp, #0
70001c3e:	60f8      	str	r0, [r7, #12]
70001c40:	60b9      	str	r1, [r7, #8]
70001c42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
70001c44:	68fb      	ldr	r3, [r7, #12]
70001c46:	4a07      	ldr	r2, [pc, #28]	@ (70001c64 <vApplicationGetTimerTaskMemory+0x2c>)
70001c48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
70001c4a:	68bb      	ldr	r3, [r7, #8]
70001c4c:	4a06      	ldr	r2, [pc, #24]	@ (70001c68 <vApplicationGetTimerTaskMemory+0x30>)
70001c4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
70001c50:	687b      	ldr	r3, [r7, #4]
70001c52:	f44f 7200 	mov.w	r2, #512	@ 0x200
70001c56:	601a      	str	r2, [r3, #0]
}
70001c58:	bf00      	nop
70001c5a:	3714      	adds	r7, #20
70001c5c:	46bd      	mov	sp, r7
70001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
70001c62:	4770      	bx	lr
70001c64:	24000584 	.word	0x24000584
70001c68:	2400062c 	.word	0x2400062c

70001c6c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
70001c6c:	b580      	push	{r7, lr}
70001c6e:	b08a      	sub	sp, #40	@ 0x28
70001c70:	af00      	add	r7, sp, #0
70001c72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
70001c74:	2300      	movs	r3, #0
70001c76:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
70001c78:	f001 fa12 	bl	700030a0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
70001c7c:	4b54      	ldr	r3, [pc, #336]	@ (70001dd0 <pvPortMalloc+0x164>)
70001c7e:	681b      	ldr	r3, [r3, #0]
70001c80:	2b00      	cmp	r3, #0
70001c82:	d101      	bne.n	70001c88 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
70001c84:	f000 f90c 	bl	70001ea0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
70001c88:	687b      	ldr	r3, [r7, #4]
70001c8a:	2b00      	cmp	r3, #0
70001c8c:	d012      	beq.n	70001cb4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
70001c8e:	2208      	movs	r2, #8
70001c90:	687b      	ldr	r3, [r7, #4]
70001c92:	f003 0307 	and.w	r3, r3, #7
70001c96:	1ad3      	subs	r3, r2, r3
70001c98:	3308      	adds	r3, #8
70001c9a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
70001c9c:	69bb      	ldr	r3, [r7, #24]
70001c9e:	43db      	mvns	r3, r3
70001ca0:	687a      	ldr	r2, [r7, #4]
70001ca2:	429a      	cmp	r2, r3
70001ca4:	d804      	bhi.n	70001cb0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
70001ca6:	687a      	ldr	r2, [r7, #4]
70001ca8:	69bb      	ldr	r3, [r7, #24]
70001caa:	4413      	add	r3, r2
70001cac:	607b      	str	r3, [r7, #4]
70001cae:	e001      	b.n	70001cb4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
70001cb0:	2300      	movs	r3, #0
70001cb2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
70001cb4:	687b      	ldr	r3, [r7, #4]
70001cb6:	2b00      	cmp	r3, #0
70001cb8:	db71      	blt.n	70001d9e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
70001cba:	687b      	ldr	r3, [r7, #4]
70001cbc:	2b00      	cmp	r3, #0
70001cbe:	d06e      	beq.n	70001d9e <pvPortMalloc+0x132>
70001cc0:	4b44      	ldr	r3, [pc, #272]	@ (70001dd4 <pvPortMalloc+0x168>)
70001cc2:	681b      	ldr	r3, [r3, #0]
70001cc4:	687a      	ldr	r2, [r7, #4]
70001cc6:	429a      	cmp	r2, r3
70001cc8:	d869      	bhi.n	70001d9e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
70001cca:	4b43      	ldr	r3, [pc, #268]	@ (70001dd8 <pvPortMalloc+0x16c>)
70001ccc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
70001cce:	4b42      	ldr	r3, [pc, #264]	@ (70001dd8 <pvPortMalloc+0x16c>)
70001cd0:	681b      	ldr	r3, [r3, #0]
70001cd2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
70001cd4:	e004      	b.n	70001ce0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
70001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70001cd8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
70001cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70001cdc:	681b      	ldr	r3, [r3, #0]
70001cde:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
70001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70001ce2:	685b      	ldr	r3, [r3, #4]
70001ce4:	687a      	ldr	r2, [r7, #4]
70001ce6:	429a      	cmp	r2, r3
70001ce8:	d903      	bls.n	70001cf2 <pvPortMalloc+0x86>
70001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70001cec:	681b      	ldr	r3, [r3, #0]
70001cee:	2b00      	cmp	r3, #0
70001cf0:	d1f1      	bne.n	70001cd6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
70001cf2:	4b37      	ldr	r3, [pc, #220]	@ (70001dd0 <pvPortMalloc+0x164>)
70001cf4:	681b      	ldr	r3, [r3, #0]
70001cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70001cf8:	429a      	cmp	r2, r3
70001cfa:	d050      	beq.n	70001d9e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
70001cfc:	6a3b      	ldr	r3, [r7, #32]
70001cfe:	681b      	ldr	r3, [r3, #0]
70001d00:	2208      	movs	r2, #8
70001d02:	4413      	add	r3, r2
70001d04:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
70001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70001d08:	681a      	ldr	r2, [r3, #0]
70001d0a:	6a3b      	ldr	r3, [r7, #32]
70001d0c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
70001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70001d10:	685a      	ldr	r2, [r3, #4]
70001d12:	687b      	ldr	r3, [r7, #4]
70001d14:	1ad2      	subs	r2, r2, r3
70001d16:	2308      	movs	r3, #8
70001d18:	005b      	lsls	r3, r3, #1
70001d1a:	429a      	cmp	r2, r3
70001d1c:	d920      	bls.n	70001d60 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
70001d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70001d20:	687b      	ldr	r3, [r7, #4]
70001d22:	4413      	add	r3, r2
70001d24:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
70001d26:	697b      	ldr	r3, [r7, #20]
70001d28:	f003 0307 	and.w	r3, r3, #7
70001d2c:	2b00      	cmp	r3, #0
70001d2e:	d00b      	beq.n	70001d48 <pvPortMalloc+0xdc>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
70001d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
70001d34:	f383 8811 	msr	BASEPRI, r3
70001d38:	f3bf 8f6f 	isb	sy
70001d3c:	f3bf 8f4f 	dsb	sy
70001d40:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
70001d42:	bf00      	nop
70001d44:	bf00      	nop
70001d46:	e7fd      	b.n	70001d44 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
70001d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70001d4a:	685a      	ldr	r2, [r3, #4]
70001d4c:	687b      	ldr	r3, [r7, #4]
70001d4e:	1ad2      	subs	r2, r2, r3
70001d50:	697b      	ldr	r3, [r7, #20]
70001d52:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
70001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70001d56:	687a      	ldr	r2, [r7, #4]
70001d58:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
70001d5a:	6978      	ldr	r0, [r7, #20]
70001d5c:	f000 f8fc 	bl	70001f58 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
70001d60:	4b1c      	ldr	r3, [pc, #112]	@ (70001dd4 <pvPortMalloc+0x168>)
70001d62:	681a      	ldr	r2, [r3, #0]
70001d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70001d66:	685b      	ldr	r3, [r3, #4]
70001d68:	1ad3      	subs	r3, r2, r3
70001d6a:	4a1a      	ldr	r2, [pc, #104]	@ (70001dd4 <pvPortMalloc+0x168>)
70001d6c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
70001d6e:	4b19      	ldr	r3, [pc, #100]	@ (70001dd4 <pvPortMalloc+0x168>)
70001d70:	681a      	ldr	r2, [r3, #0]
70001d72:	4b1a      	ldr	r3, [pc, #104]	@ (70001ddc <pvPortMalloc+0x170>)
70001d74:	681b      	ldr	r3, [r3, #0]
70001d76:	429a      	cmp	r2, r3
70001d78:	d203      	bcs.n	70001d82 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
70001d7a:	4b16      	ldr	r3, [pc, #88]	@ (70001dd4 <pvPortMalloc+0x168>)
70001d7c:	681b      	ldr	r3, [r3, #0]
70001d7e:	4a17      	ldr	r2, [pc, #92]	@ (70001ddc <pvPortMalloc+0x170>)
70001d80:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
70001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70001d84:	685b      	ldr	r3, [r3, #4]
70001d86:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
70001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70001d8c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
70001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70001d90:	2200      	movs	r2, #0
70001d92:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
70001d94:	4b12      	ldr	r3, [pc, #72]	@ (70001de0 <pvPortMalloc+0x174>)
70001d96:	681b      	ldr	r3, [r3, #0]
70001d98:	3301      	adds	r3, #1
70001d9a:	4a11      	ldr	r2, [pc, #68]	@ (70001de0 <pvPortMalloc+0x174>)
70001d9c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
70001d9e:	f001 f98d 	bl	700030bc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
70001da2:	69fb      	ldr	r3, [r7, #28]
70001da4:	f003 0307 	and.w	r3, r3, #7
70001da8:	2b00      	cmp	r3, #0
70001daa:	d00b      	beq.n	70001dc4 <pvPortMalloc+0x158>
        __asm volatile
70001dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
70001db0:	f383 8811 	msr	BASEPRI, r3
70001db4:	f3bf 8f6f 	isb	sy
70001db8:	f3bf 8f4f 	dsb	sy
70001dbc:	60fb      	str	r3, [r7, #12]
    }
70001dbe:	bf00      	nop
70001dc0:	bf00      	nop
70001dc2:	e7fd      	b.n	70001dc0 <pvPortMalloc+0x154>
    return pvReturn;
70001dc4:	69fb      	ldr	r3, [r7, #28]
}
70001dc6:	4618      	mov	r0, r3
70001dc8:	3728      	adds	r7, #40	@ 0x28
70001dca:	46bd      	mov	sp, r7
70001dcc:	bd80      	pop	{r7, pc}
70001dce:	bf00      	nop
70001dd0:	24004a34 	.word	0x24004a34
70001dd4:	24004a38 	.word	0x24004a38
70001dd8:	24004a2c 	.word	0x24004a2c
70001ddc:	24004a3c 	.word	0x24004a3c
70001de0:	24004a40 	.word	0x24004a40

70001de4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
70001de4:	b580      	push	{r7, lr}
70001de6:	b086      	sub	sp, #24
70001de8:	af00      	add	r7, sp, #0
70001dea:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
70001dec:	687b      	ldr	r3, [r7, #4]
70001dee:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
70001df0:	687b      	ldr	r3, [r7, #4]
70001df2:	2b00      	cmp	r3, #0
70001df4:	d04b      	beq.n	70001e8e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
70001df6:	2308      	movs	r3, #8
70001df8:	425b      	negs	r3, r3
70001dfa:	697a      	ldr	r2, [r7, #20]
70001dfc:	4413      	add	r3, r2
70001dfe:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
70001e00:	697b      	ldr	r3, [r7, #20]
70001e02:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
70001e04:	693b      	ldr	r3, [r7, #16]
70001e06:	685b      	ldr	r3, [r3, #4]
70001e08:	2b00      	cmp	r3, #0
70001e0a:	db0b      	blt.n	70001e24 <vPortFree+0x40>
        __asm volatile
70001e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
70001e10:	f383 8811 	msr	BASEPRI, r3
70001e14:	f3bf 8f6f 	isb	sy
70001e18:	f3bf 8f4f 	dsb	sy
70001e1c:	60fb      	str	r3, [r7, #12]
    }
70001e1e:	bf00      	nop
70001e20:	bf00      	nop
70001e22:	e7fd      	b.n	70001e20 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
70001e24:	693b      	ldr	r3, [r7, #16]
70001e26:	681b      	ldr	r3, [r3, #0]
70001e28:	2b00      	cmp	r3, #0
70001e2a:	d00b      	beq.n	70001e44 <vPortFree+0x60>
        __asm volatile
70001e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
70001e30:	f383 8811 	msr	BASEPRI, r3
70001e34:	f3bf 8f6f 	isb	sy
70001e38:	f3bf 8f4f 	dsb	sy
70001e3c:	60bb      	str	r3, [r7, #8]
    }
70001e3e:	bf00      	nop
70001e40:	bf00      	nop
70001e42:	e7fd      	b.n	70001e40 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
70001e44:	693b      	ldr	r3, [r7, #16]
70001e46:	685b      	ldr	r3, [r3, #4]
70001e48:	0fdb      	lsrs	r3, r3, #31
70001e4a:	f003 0301 	and.w	r3, r3, #1
70001e4e:	b2db      	uxtb	r3, r3
70001e50:	2b00      	cmp	r3, #0
70001e52:	d01c      	beq.n	70001e8e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
70001e54:	693b      	ldr	r3, [r7, #16]
70001e56:	681b      	ldr	r3, [r3, #0]
70001e58:	2b00      	cmp	r3, #0
70001e5a:	d118      	bne.n	70001e8e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
70001e5c:	693b      	ldr	r3, [r7, #16]
70001e5e:	685b      	ldr	r3, [r3, #4]
70001e60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
70001e64:	693b      	ldr	r3, [r7, #16]
70001e66:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
70001e68:	f001 f91a 	bl	700030a0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
70001e6c:	693b      	ldr	r3, [r7, #16]
70001e6e:	685a      	ldr	r2, [r3, #4]
70001e70:	4b09      	ldr	r3, [pc, #36]	@ (70001e98 <vPortFree+0xb4>)
70001e72:	681b      	ldr	r3, [r3, #0]
70001e74:	4413      	add	r3, r2
70001e76:	4a08      	ldr	r2, [pc, #32]	@ (70001e98 <vPortFree+0xb4>)
70001e78:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
70001e7a:	6938      	ldr	r0, [r7, #16]
70001e7c:	f000 f86c 	bl	70001f58 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
70001e80:	4b06      	ldr	r3, [pc, #24]	@ (70001e9c <vPortFree+0xb8>)
70001e82:	681b      	ldr	r3, [r3, #0]
70001e84:	3301      	adds	r3, #1
70001e86:	4a05      	ldr	r2, [pc, #20]	@ (70001e9c <vPortFree+0xb8>)
70001e88:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
70001e8a:	f001 f917 	bl	700030bc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
70001e8e:	bf00      	nop
70001e90:	3718      	adds	r7, #24
70001e92:	46bd      	mov	sp, r7
70001e94:	bd80      	pop	{r7, pc}
70001e96:	bf00      	nop
70001e98:	24004a38 	.word	0x24004a38
70001e9c:	24004a44 	.word	0x24004a44

70001ea0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
70001ea0:	b480      	push	{r7}
70001ea2:	b085      	sub	sp, #20
70001ea4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
70001ea6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
70001eaa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
70001eac:	4b25      	ldr	r3, [pc, #148]	@ (70001f44 <prvHeapInit+0xa4>)
70001eae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
70001eb0:	68fb      	ldr	r3, [r7, #12]
70001eb2:	f003 0307 	and.w	r3, r3, #7
70001eb6:	2b00      	cmp	r3, #0
70001eb8:	d00c      	beq.n	70001ed4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
70001eba:	68fb      	ldr	r3, [r7, #12]
70001ebc:	3307      	adds	r3, #7
70001ebe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
70001ec0:	68fb      	ldr	r3, [r7, #12]
70001ec2:	f023 0307 	bic.w	r3, r3, #7
70001ec6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
70001ec8:	68ba      	ldr	r2, [r7, #8]
70001eca:	68fb      	ldr	r3, [r7, #12]
70001ecc:	1ad3      	subs	r3, r2, r3
70001ece:	4a1d      	ldr	r2, [pc, #116]	@ (70001f44 <prvHeapInit+0xa4>)
70001ed0:	4413      	add	r3, r2
70001ed2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
70001ed4:	68fb      	ldr	r3, [r7, #12]
70001ed6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
70001ed8:	4a1b      	ldr	r2, [pc, #108]	@ (70001f48 <prvHeapInit+0xa8>)
70001eda:	687b      	ldr	r3, [r7, #4]
70001edc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
70001ede:	4b1a      	ldr	r3, [pc, #104]	@ (70001f48 <prvHeapInit+0xa8>)
70001ee0:	2200      	movs	r2, #0
70001ee2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
70001ee4:	687b      	ldr	r3, [r7, #4]
70001ee6:	68ba      	ldr	r2, [r7, #8]
70001ee8:	4413      	add	r3, r2
70001eea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
70001eec:	2208      	movs	r2, #8
70001eee:	68fb      	ldr	r3, [r7, #12]
70001ef0:	1a9b      	subs	r3, r3, r2
70001ef2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
70001ef4:	68fb      	ldr	r3, [r7, #12]
70001ef6:	f023 0307 	bic.w	r3, r3, #7
70001efa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
70001efc:	68fb      	ldr	r3, [r7, #12]
70001efe:	4a13      	ldr	r2, [pc, #76]	@ (70001f4c <prvHeapInit+0xac>)
70001f00:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
70001f02:	4b12      	ldr	r3, [pc, #72]	@ (70001f4c <prvHeapInit+0xac>)
70001f04:	681b      	ldr	r3, [r3, #0]
70001f06:	2200      	movs	r2, #0
70001f08:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
70001f0a:	4b10      	ldr	r3, [pc, #64]	@ (70001f4c <prvHeapInit+0xac>)
70001f0c:	681b      	ldr	r3, [r3, #0]
70001f0e:	2200      	movs	r2, #0
70001f10:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
70001f12:	687b      	ldr	r3, [r7, #4]
70001f14:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
70001f16:	683b      	ldr	r3, [r7, #0]
70001f18:	68fa      	ldr	r2, [r7, #12]
70001f1a:	1ad2      	subs	r2, r2, r3
70001f1c:	683b      	ldr	r3, [r7, #0]
70001f1e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
70001f20:	4b0a      	ldr	r3, [pc, #40]	@ (70001f4c <prvHeapInit+0xac>)
70001f22:	681a      	ldr	r2, [r3, #0]
70001f24:	683b      	ldr	r3, [r7, #0]
70001f26:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
70001f28:	683b      	ldr	r3, [r7, #0]
70001f2a:	685b      	ldr	r3, [r3, #4]
70001f2c:	4a08      	ldr	r2, [pc, #32]	@ (70001f50 <prvHeapInit+0xb0>)
70001f2e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
70001f30:	683b      	ldr	r3, [r7, #0]
70001f32:	685b      	ldr	r3, [r3, #4]
70001f34:	4a07      	ldr	r2, [pc, #28]	@ (70001f54 <prvHeapInit+0xb4>)
70001f36:	6013      	str	r3, [r2, #0]
}
70001f38:	bf00      	nop
70001f3a:	3714      	adds	r7, #20
70001f3c:	46bd      	mov	sp, r7
70001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
70001f42:	4770      	bx	lr
70001f44:	24000e2c 	.word	0x24000e2c
70001f48:	24004a2c 	.word	0x24004a2c
70001f4c:	24004a34 	.word	0x24004a34
70001f50:	24004a3c 	.word	0x24004a3c
70001f54:	24004a38 	.word	0x24004a38

70001f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
70001f58:	b480      	push	{r7}
70001f5a:	b085      	sub	sp, #20
70001f5c:	af00      	add	r7, sp, #0
70001f5e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
70001f60:	4b28      	ldr	r3, [pc, #160]	@ (70002004 <prvInsertBlockIntoFreeList+0xac>)
70001f62:	60fb      	str	r3, [r7, #12]
70001f64:	e002      	b.n	70001f6c <prvInsertBlockIntoFreeList+0x14>
70001f66:	68fb      	ldr	r3, [r7, #12]
70001f68:	681b      	ldr	r3, [r3, #0]
70001f6a:	60fb      	str	r3, [r7, #12]
70001f6c:	68fb      	ldr	r3, [r7, #12]
70001f6e:	681b      	ldr	r3, [r3, #0]
70001f70:	687a      	ldr	r2, [r7, #4]
70001f72:	429a      	cmp	r2, r3
70001f74:	d8f7      	bhi.n	70001f66 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
70001f76:	68fb      	ldr	r3, [r7, #12]
70001f78:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
70001f7a:	68fb      	ldr	r3, [r7, #12]
70001f7c:	685b      	ldr	r3, [r3, #4]
70001f7e:	68ba      	ldr	r2, [r7, #8]
70001f80:	4413      	add	r3, r2
70001f82:	687a      	ldr	r2, [r7, #4]
70001f84:	429a      	cmp	r2, r3
70001f86:	d108      	bne.n	70001f9a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
70001f88:	68fb      	ldr	r3, [r7, #12]
70001f8a:	685a      	ldr	r2, [r3, #4]
70001f8c:	687b      	ldr	r3, [r7, #4]
70001f8e:	685b      	ldr	r3, [r3, #4]
70001f90:	441a      	add	r2, r3
70001f92:	68fb      	ldr	r3, [r7, #12]
70001f94:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
70001f96:	68fb      	ldr	r3, [r7, #12]
70001f98:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
70001f9a:	687b      	ldr	r3, [r7, #4]
70001f9c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
70001f9e:	687b      	ldr	r3, [r7, #4]
70001fa0:	685b      	ldr	r3, [r3, #4]
70001fa2:	68ba      	ldr	r2, [r7, #8]
70001fa4:	441a      	add	r2, r3
70001fa6:	68fb      	ldr	r3, [r7, #12]
70001fa8:	681b      	ldr	r3, [r3, #0]
70001faa:	429a      	cmp	r2, r3
70001fac:	d118      	bne.n	70001fe0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
70001fae:	68fb      	ldr	r3, [r7, #12]
70001fb0:	681a      	ldr	r2, [r3, #0]
70001fb2:	4b15      	ldr	r3, [pc, #84]	@ (70002008 <prvInsertBlockIntoFreeList+0xb0>)
70001fb4:	681b      	ldr	r3, [r3, #0]
70001fb6:	429a      	cmp	r2, r3
70001fb8:	d00d      	beq.n	70001fd6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
70001fba:	687b      	ldr	r3, [r7, #4]
70001fbc:	685a      	ldr	r2, [r3, #4]
70001fbe:	68fb      	ldr	r3, [r7, #12]
70001fc0:	681b      	ldr	r3, [r3, #0]
70001fc2:	685b      	ldr	r3, [r3, #4]
70001fc4:	441a      	add	r2, r3
70001fc6:	687b      	ldr	r3, [r7, #4]
70001fc8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
70001fca:	68fb      	ldr	r3, [r7, #12]
70001fcc:	681b      	ldr	r3, [r3, #0]
70001fce:	681a      	ldr	r2, [r3, #0]
70001fd0:	687b      	ldr	r3, [r7, #4]
70001fd2:	601a      	str	r2, [r3, #0]
70001fd4:	e008      	b.n	70001fe8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
70001fd6:	4b0c      	ldr	r3, [pc, #48]	@ (70002008 <prvInsertBlockIntoFreeList+0xb0>)
70001fd8:	681a      	ldr	r2, [r3, #0]
70001fda:	687b      	ldr	r3, [r7, #4]
70001fdc:	601a      	str	r2, [r3, #0]
70001fde:	e003      	b.n	70001fe8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
70001fe0:	68fb      	ldr	r3, [r7, #12]
70001fe2:	681a      	ldr	r2, [r3, #0]
70001fe4:	687b      	ldr	r3, [r7, #4]
70001fe6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
70001fe8:	68fa      	ldr	r2, [r7, #12]
70001fea:	687b      	ldr	r3, [r7, #4]
70001fec:	429a      	cmp	r2, r3
70001fee:	d002      	beq.n	70001ff6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
70001ff0:	68fb      	ldr	r3, [r7, #12]
70001ff2:	687a      	ldr	r2, [r7, #4]
70001ff4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
70001ff6:	bf00      	nop
70001ff8:	3714      	adds	r7, #20
70001ffa:	46bd      	mov	sp, r7
70001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
70002000:	4770      	bx	lr
70002002:	bf00      	nop
70002004:	24004a2c 	.word	0x24004a2c
70002008:	24004a34 	.word	0x24004a34

7000200c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
7000200c:	b480      	push	{r7}
7000200e:	b083      	sub	sp, #12
70002010:	af00      	add	r7, sp, #0
70002012:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
70002014:	687b      	ldr	r3, [r7, #4]
70002016:	f103 0208 	add.w	r2, r3, #8
7000201a:	687b      	ldr	r3, [r7, #4]
7000201c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
7000201e:	687b      	ldr	r3, [r7, #4]
70002020:	f04f 32ff 	mov.w	r2, #4294967295
70002024:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
70002026:	687b      	ldr	r3, [r7, #4]
70002028:	f103 0208 	add.w	r2, r3, #8
7000202c:	687b      	ldr	r3, [r7, #4]
7000202e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
70002030:	687b      	ldr	r3, [r7, #4]
70002032:	f103 0208 	add.w	r2, r3, #8
70002036:	687b      	ldr	r3, [r7, #4]
70002038:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
7000203a:	687b      	ldr	r3, [r7, #4]
7000203c:	2200      	movs	r2, #0
7000203e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
70002040:	bf00      	nop
70002042:	370c      	adds	r7, #12
70002044:	46bd      	mov	sp, r7
70002046:	f85d 7b04 	ldr.w	r7, [sp], #4
7000204a:	4770      	bx	lr

7000204c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
7000204c:	b480      	push	{r7}
7000204e:	b083      	sub	sp, #12
70002050:	af00      	add	r7, sp, #0
70002052:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
70002054:	687b      	ldr	r3, [r7, #4]
70002056:	2200      	movs	r2, #0
70002058:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
7000205a:	bf00      	nop
7000205c:	370c      	adds	r7, #12
7000205e:	46bd      	mov	sp, r7
70002060:	f85d 7b04 	ldr.w	r7, [sp], #4
70002064:	4770      	bx	lr

70002066 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
70002066:	b480      	push	{r7}
70002068:	b085      	sub	sp, #20
7000206a:	af00      	add	r7, sp, #0
7000206c:	6078      	str	r0, [r7, #4]
7000206e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
70002070:	683b      	ldr	r3, [r7, #0]
70002072:	681b      	ldr	r3, [r3, #0]
70002074:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
70002076:	68bb      	ldr	r3, [r7, #8]
70002078:	f1b3 3fff 	cmp.w	r3, #4294967295
7000207c:	d103      	bne.n	70002086 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
7000207e:	687b      	ldr	r3, [r7, #4]
70002080:	691b      	ldr	r3, [r3, #16]
70002082:	60fb      	str	r3, [r7, #12]
70002084:	e00c      	b.n	700020a0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
70002086:	687b      	ldr	r3, [r7, #4]
70002088:	3308      	adds	r3, #8
7000208a:	60fb      	str	r3, [r7, #12]
7000208c:	e002      	b.n	70002094 <vListInsert+0x2e>
7000208e:	68fb      	ldr	r3, [r7, #12]
70002090:	685b      	ldr	r3, [r3, #4]
70002092:	60fb      	str	r3, [r7, #12]
70002094:	68fb      	ldr	r3, [r7, #12]
70002096:	685b      	ldr	r3, [r3, #4]
70002098:	681b      	ldr	r3, [r3, #0]
7000209a:	68ba      	ldr	r2, [r7, #8]
7000209c:	429a      	cmp	r2, r3
7000209e:	d2f6      	bcs.n	7000208e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
700020a0:	68fb      	ldr	r3, [r7, #12]
700020a2:	685a      	ldr	r2, [r3, #4]
700020a4:	683b      	ldr	r3, [r7, #0]
700020a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
700020a8:	683b      	ldr	r3, [r7, #0]
700020aa:	685b      	ldr	r3, [r3, #4]
700020ac:	683a      	ldr	r2, [r7, #0]
700020ae:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
700020b0:	683b      	ldr	r3, [r7, #0]
700020b2:	68fa      	ldr	r2, [r7, #12]
700020b4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
700020b6:	68fb      	ldr	r3, [r7, #12]
700020b8:	683a      	ldr	r2, [r7, #0]
700020ba:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
700020bc:	683b      	ldr	r3, [r7, #0]
700020be:	687a      	ldr	r2, [r7, #4]
700020c0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
700020c2:	687b      	ldr	r3, [r7, #4]
700020c4:	681b      	ldr	r3, [r3, #0]
700020c6:	1c5a      	adds	r2, r3, #1
700020c8:	687b      	ldr	r3, [r7, #4]
700020ca:	601a      	str	r2, [r3, #0]
}
700020cc:	bf00      	nop
700020ce:	3714      	adds	r7, #20
700020d0:	46bd      	mov	sp, r7
700020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
700020d6:	4770      	bx	lr

700020d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
700020d8:	b480      	push	{r7}
700020da:	b085      	sub	sp, #20
700020dc:	af00      	add	r7, sp, #0
700020de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
700020e0:	687b      	ldr	r3, [r7, #4]
700020e2:	691b      	ldr	r3, [r3, #16]
700020e4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
700020e6:	687b      	ldr	r3, [r7, #4]
700020e8:	685b      	ldr	r3, [r3, #4]
700020ea:	687a      	ldr	r2, [r7, #4]
700020ec:	6892      	ldr	r2, [r2, #8]
700020ee:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
700020f0:	687b      	ldr	r3, [r7, #4]
700020f2:	689b      	ldr	r3, [r3, #8]
700020f4:	687a      	ldr	r2, [r7, #4]
700020f6:	6852      	ldr	r2, [r2, #4]
700020f8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
700020fa:	68fb      	ldr	r3, [r7, #12]
700020fc:	685b      	ldr	r3, [r3, #4]
700020fe:	687a      	ldr	r2, [r7, #4]
70002100:	429a      	cmp	r2, r3
70002102:	d103      	bne.n	7000210c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
70002104:	687b      	ldr	r3, [r7, #4]
70002106:	689a      	ldr	r2, [r3, #8]
70002108:	68fb      	ldr	r3, [r7, #12]
7000210a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
7000210c:	687b      	ldr	r3, [r7, #4]
7000210e:	2200      	movs	r2, #0
70002110:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
70002112:	68fb      	ldr	r3, [r7, #12]
70002114:	681b      	ldr	r3, [r3, #0]
70002116:	1e5a      	subs	r2, r3, #1
70002118:	68fb      	ldr	r3, [r7, #12]
7000211a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
7000211c:	68fb      	ldr	r3, [r7, #12]
7000211e:	681b      	ldr	r3, [r3, #0]
}
70002120:	4618      	mov	r0, r3
70002122:	3714      	adds	r7, #20
70002124:	46bd      	mov	sp, r7
70002126:	f85d 7b04 	ldr.w	r7, [sp], #4
7000212a:	4770      	bx	lr

7000212c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
7000212c:	b480      	push	{r7}
7000212e:	b085      	sub	sp, #20
70002130:	af00      	add	r7, sp, #0
70002132:	60f8      	str	r0, [r7, #12]
70002134:	60b9      	str	r1, [r7, #8]
70002136:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
70002138:	68fb      	ldr	r3, [r7, #12]
7000213a:	3b04      	subs	r3, #4
7000213c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
7000213e:	68fb      	ldr	r3, [r7, #12]
70002140:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
70002144:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
70002146:	68fb      	ldr	r3, [r7, #12]
70002148:	3b04      	subs	r3, #4
7000214a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
7000214c:	68bb      	ldr	r3, [r7, #8]
7000214e:	f023 0201 	bic.w	r2, r3, #1
70002152:	68fb      	ldr	r3, [r7, #12]
70002154:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
70002156:	68fb      	ldr	r3, [r7, #12]
70002158:	3b04      	subs	r3, #4
7000215a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
7000215c:	4a0c      	ldr	r2, [pc, #48]	@ (70002190 <pxPortInitialiseStack+0x64>)
7000215e:	68fb      	ldr	r3, [r7, #12]
70002160:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
70002162:	68fb      	ldr	r3, [r7, #12]
70002164:	3b14      	subs	r3, #20
70002166:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
70002168:	687a      	ldr	r2, [r7, #4]
7000216a:	68fb      	ldr	r3, [r7, #12]
7000216c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
7000216e:	68fb      	ldr	r3, [r7, #12]
70002170:	3b04      	subs	r3, #4
70002172:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
70002174:	68fb      	ldr	r3, [r7, #12]
70002176:	f06f 0202 	mvn.w	r2, #2
7000217a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
7000217c:	68fb      	ldr	r3, [r7, #12]
7000217e:	3b20      	subs	r3, #32
70002180:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
70002182:	68fb      	ldr	r3, [r7, #12]
}
70002184:	4618      	mov	r0, r3
70002186:	3714      	adds	r7, #20
70002188:	46bd      	mov	sp, r7
7000218a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000218e:	4770      	bx	lr
70002190:	70002195 	.word	0x70002195

70002194 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
70002194:	b480      	push	{r7}
70002196:	b085      	sub	sp, #20
70002198:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
7000219a:	2300      	movs	r3, #0
7000219c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
7000219e:	4b13      	ldr	r3, [pc, #76]	@ (700021ec <prvTaskExitError+0x58>)
700021a0:	681b      	ldr	r3, [r3, #0]
700021a2:	f1b3 3fff 	cmp.w	r3, #4294967295
700021a6:	d00b      	beq.n	700021c0 <prvTaskExitError+0x2c>
        __asm volatile
700021a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
700021ac:	f383 8811 	msr	BASEPRI, r3
700021b0:	f3bf 8f6f 	isb	sy
700021b4:	f3bf 8f4f 	dsb	sy
700021b8:	60fb      	str	r3, [r7, #12]
    }
700021ba:	bf00      	nop
700021bc:	bf00      	nop
700021be:	e7fd      	b.n	700021bc <prvTaskExitError+0x28>
        __asm volatile
700021c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
700021c4:	f383 8811 	msr	BASEPRI, r3
700021c8:	f3bf 8f6f 	isb	sy
700021cc:	f3bf 8f4f 	dsb	sy
700021d0:	60bb      	str	r3, [r7, #8]
    }
700021d2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
700021d4:	bf00      	nop
700021d6:	687b      	ldr	r3, [r7, #4]
700021d8:	2b00      	cmp	r3, #0
700021da:	d0fc      	beq.n	700021d6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
700021dc:	bf00      	nop
700021de:	bf00      	nop
700021e0:	3714      	adds	r7, #20
700021e2:	46bd      	mov	sp, r7
700021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
700021e8:	4770      	bx	lr
700021ea:	bf00      	nop
700021ec:	2400000c 	.word	0x2400000c

700021f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
700021f0:	4b07      	ldr	r3, [pc, #28]	@ (70002210 <pxCurrentTCBConst2>)
700021f2:	6819      	ldr	r1, [r3, #0]
700021f4:	6808      	ldr	r0, [r1, #0]
700021f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
700021fa:	f380 8809 	msr	PSP, r0
700021fe:	f3bf 8f6f 	isb	sy
70002202:	f04f 0000 	mov.w	r0, #0
70002206:	f380 8811 	msr	BASEPRI, r0
7000220a:	4770      	bx	lr
7000220c:	f3af 8000 	nop.w

70002210 <pxCurrentTCBConst2>:
70002210:	24004a90 	.word	0x24004a90
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
70002214:	bf00      	nop
70002216:	bf00      	nop

70002218 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
70002218:	4808      	ldr	r0, [pc, #32]	@ (7000223c <prvPortStartFirstTask+0x24>)
7000221a:	6800      	ldr	r0, [r0, #0]
7000221c:	6800      	ldr	r0, [r0, #0]
7000221e:	f380 8808 	msr	MSP, r0
70002222:	f04f 0000 	mov.w	r0, #0
70002226:	f380 8814 	msr	CONTROL, r0
7000222a:	b662      	cpsie	i
7000222c:	b661      	cpsie	f
7000222e:	f3bf 8f4f 	dsb	sy
70002232:	f3bf 8f6f 	isb	sy
70002236:	df00      	svc	0
70002238:	bf00      	nop
7000223a:	0000      	.short	0x0000
7000223c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
70002240:	bf00      	nop
70002242:	bf00      	nop

70002244 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
70002244:	b580      	push	{r7, lr}
70002246:	b086      	sub	sp, #24
70002248:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
7000224a:	4b47      	ldr	r3, [pc, #284]	@ (70002368 <xPortStartScheduler+0x124>)
7000224c:	681b      	ldr	r3, [r3, #0]
7000224e:	4a47      	ldr	r2, [pc, #284]	@ (7000236c <xPortStartScheduler+0x128>)
70002250:	4293      	cmp	r3, r2
70002252:	d10b      	bne.n	7000226c <xPortStartScheduler+0x28>
        __asm volatile
70002254:	f04f 0350 	mov.w	r3, #80	@ 0x50
70002258:	f383 8811 	msr	BASEPRI, r3
7000225c:	f3bf 8f6f 	isb	sy
70002260:	f3bf 8f4f 	dsb	sy
70002264:	613b      	str	r3, [r7, #16]
    }
70002266:	bf00      	nop
70002268:	bf00      	nop
7000226a:	e7fd      	b.n	70002268 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
7000226c:	4b3e      	ldr	r3, [pc, #248]	@ (70002368 <xPortStartScheduler+0x124>)
7000226e:	681b      	ldr	r3, [r3, #0]
70002270:	4a3f      	ldr	r2, [pc, #252]	@ (70002370 <xPortStartScheduler+0x12c>)
70002272:	4293      	cmp	r3, r2
70002274:	d10b      	bne.n	7000228e <xPortStartScheduler+0x4a>
        __asm volatile
70002276:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000227a:	f383 8811 	msr	BASEPRI, r3
7000227e:	f3bf 8f6f 	isb	sy
70002282:	f3bf 8f4f 	dsb	sy
70002286:	60fb      	str	r3, [r7, #12]
    }
70002288:	bf00      	nop
7000228a:	bf00      	nop
7000228c:	e7fd      	b.n	7000228a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
7000228e:	4b39      	ldr	r3, [pc, #228]	@ (70002374 <xPortStartScheduler+0x130>)
70002290:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
70002292:	697b      	ldr	r3, [r7, #20]
70002294:	781b      	ldrb	r3, [r3, #0]
70002296:	b2db      	uxtb	r3, r3
70002298:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
7000229a:	697b      	ldr	r3, [r7, #20]
7000229c:	22ff      	movs	r2, #255	@ 0xff
7000229e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
700022a0:	697b      	ldr	r3, [r7, #20]
700022a2:	781b      	ldrb	r3, [r3, #0]
700022a4:	b2db      	uxtb	r3, r3
700022a6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
700022a8:	78fb      	ldrb	r3, [r7, #3]
700022aa:	b2db      	uxtb	r3, r3
700022ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
700022b0:	b2da      	uxtb	r2, r3
700022b2:	4b31      	ldr	r3, [pc, #196]	@ (70002378 <xPortStartScheduler+0x134>)
700022b4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
700022b6:	4b31      	ldr	r3, [pc, #196]	@ (7000237c <xPortStartScheduler+0x138>)
700022b8:	2207      	movs	r2, #7
700022ba:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
700022bc:	e009      	b.n	700022d2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
700022be:	4b2f      	ldr	r3, [pc, #188]	@ (7000237c <xPortStartScheduler+0x138>)
700022c0:	681b      	ldr	r3, [r3, #0]
700022c2:	3b01      	subs	r3, #1
700022c4:	4a2d      	ldr	r2, [pc, #180]	@ (7000237c <xPortStartScheduler+0x138>)
700022c6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
700022c8:	78fb      	ldrb	r3, [r7, #3]
700022ca:	b2db      	uxtb	r3, r3
700022cc:	005b      	lsls	r3, r3, #1
700022ce:	b2db      	uxtb	r3, r3
700022d0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
700022d2:	78fb      	ldrb	r3, [r7, #3]
700022d4:	b2db      	uxtb	r3, r3
700022d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
700022da:	2b80      	cmp	r3, #128	@ 0x80
700022dc:	d0ef      	beq.n	700022be <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
700022de:	4b27      	ldr	r3, [pc, #156]	@ (7000237c <xPortStartScheduler+0x138>)
700022e0:	681b      	ldr	r3, [r3, #0]
700022e2:	f1c3 0307 	rsb	r3, r3, #7
700022e6:	2b04      	cmp	r3, #4
700022e8:	d00b      	beq.n	70002302 <xPortStartScheduler+0xbe>
        __asm volatile
700022ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
700022ee:	f383 8811 	msr	BASEPRI, r3
700022f2:	f3bf 8f6f 	isb	sy
700022f6:	f3bf 8f4f 	dsb	sy
700022fa:	60bb      	str	r3, [r7, #8]
    }
700022fc:	bf00      	nop
700022fe:	bf00      	nop
70002300:	e7fd      	b.n	700022fe <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
70002302:	4b1e      	ldr	r3, [pc, #120]	@ (7000237c <xPortStartScheduler+0x138>)
70002304:	681b      	ldr	r3, [r3, #0]
70002306:	021b      	lsls	r3, r3, #8
70002308:	4a1c      	ldr	r2, [pc, #112]	@ (7000237c <xPortStartScheduler+0x138>)
7000230a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
7000230c:	4b1b      	ldr	r3, [pc, #108]	@ (7000237c <xPortStartScheduler+0x138>)
7000230e:	681b      	ldr	r3, [r3, #0]
70002310:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
70002314:	4a19      	ldr	r2, [pc, #100]	@ (7000237c <xPortStartScheduler+0x138>)
70002316:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
70002318:	687b      	ldr	r3, [r7, #4]
7000231a:	b2da      	uxtb	r2, r3
7000231c:	697b      	ldr	r3, [r7, #20]
7000231e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
70002320:	4b17      	ldr	r3, [pc, #92]	@ (70002380 <xPortStartScheduler+0x13c>)
70002322:	681b      	ldr	r3, [r3, #0]
70002324:	4a16      	ldr	r2, [pc, #88]	@ (70002380 <xPortStartScheduler+0x13c>)
70002326:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
7000232a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
7000232c:	4b14      	ldr	r3, [pc, #80]	@ (70002380 <xPortStartScheduler+0x13c>)
7000232e:	681b      	ldr	r3, [r3, #0]
70002330:	4a13      	ldr	r2, [pc, #76]	@ (70002380 <xPortStartScheduler+0x13c>)
70002332:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
70002336:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
70002338:	f000 f8e0 	bl	700024fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
7000233c:	4b11      	ldr	r3, [pc, #68]	@ (70002384 <xPortStartScheduler+0x140>)
7000233e:	2200      	movs	r2, #0
70002340:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
70002342:	f000 f8ff 	bl	70002544 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
70002346:	4b10      	ldr	r3, [pc, #64]	@ (70002388 <xPortStartScheduler+0x144>)
70002348:	681b      	ldr	r3, [r3, #0]
7000234a:	4a0f      	ldr	r2, [pc, #60]	@ (70002388 <xPortStartScheduler+0x144>)
7000234c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
70002350:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
70002352:	f7ff ff61 	bl	70002218 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
70002356:	f001 f8d7 	bl	70003508 <vTaskSwitchContext>
    prvTaskExitError();
7000235a:	f7ff ff1b 	bl	70002194 <prvTaskExitError>

    /* Should not get here! */
    return 0;
7000235e:	2300      	movs	r3, #0
}
70002360:	4618      	mov	r0, r3
70002362:	3718      	adds	r7, #24
70002364:	46bd      	mov	sp, r7
70002366:	bd80      	pop	{r7, pc}
70002368:	e000ed00 	.word	0xe000ed00
7000236c:	410fc271 	.word	0x410fc271
70002370:	410fc270 	.word	0x410fc270
70002374:	e000e400 	.word	0xe000e400
70002378:	24004a48 	.word	0x24004a48
7000237c:	24004a4c 	.word	0x24004a4c
70002380:	e000ed20 	.word	0xe000ed20
70002384:	2400000c 	.word	0x2400000c
70002388:	e000ef34 	.word	0xe000ef34

7000238c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
7000238c:	b480      	push	{r7}
7000238e:	b083      	sub	sp, #12
70002390:	af00      	add	r7, sp, #0
        __asm volatile
70002392:	f04f 0350 	mov.w	r3, #80	@ 0x50
70002396:	f383 8811 	msr	BASEPRI, r3
7000239a:	f3bf 8f6f 	isb	sy
7000239e:	f3bf 8f4f 	dsb	sy
700023a2:	607b      	str	r3, [r7, #4]
    }
700023a4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
700023a6:	4b10      	ldr	r3, [pc, #64]	@ (700023e8 <vPortEnterCritical+0x5c>)
700023a8:	681b      	ldr	r3, [r3, #0]
700023aa:	3301      	adds	r3, #1
700023ac:	4a0e      	ldr	r2, [pc, #56]	@ (700023e8 <vPortEnterCritical+0x5c>)
700023ae:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
700023b0:	4b0d      	ldr	r3, [pc, #52]	@ (700023e8 <vPortEnterCritical+0x5c>)
700023b2:	681b      	ldr	r3, [r3, #0]
700023b4:	2b01      	cmp	r3, #1
700023b6:	d110      	bne.n	700023da <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
700023b8:	4b0c      	ldr	r3, [pc, #48]	@ (700023ec <vPortEnterCritical+0x60>)
700023ba:	681b      	ldr	r3, [r3, #0]
700023bc:	b2db      	uxtb	r3, r3
700023be:	2b00      	cmp	r3, #0
700023c0:	d00b      	beq.n	700023da <vPortEnterCritical+0x4e>
        __asm volatile
700023c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
700023c6:	f383 8811 	msr	BASEPRI, r3
700023ca:	f3bf 8f6f 	isb	sy
700023ce:	f3bf 8f4f 	dsb	sy
700023d2:	603b      	str	r3, [r7, #0]
    }
700023d4:	bf00      	nop
700023d6:	bf00      	nop
700023d8:	e7fd      	b.n	700023d6 <vPortEnterCritical+0x4a>
    }
}
700023da:	bf00      	nop
700023dc:	370c      	adds	r7, #12
700023de:	46bd      	mov	sp, r7
700023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
700023e4:	4770      	bx	lr
700023e6:	bf00      	nop
700023e8:	2400000c 	.word	0x2400000c
700023ec:	e000ed04 	.word	0xe000ed04

700023f0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
700023f0:	b480      	push	{r7}
700023f2:	b083      	sub	sp, #12
700023f4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
700023f6:	4b12      	ldr	r3, [pc, #72]	@ (70002440 <vPortExitCritical+0x50>)
700023f8:	681b      	ldr	r3, [r3, #0]
700023fa:	2b00      	cmp	r3, #0
700023fc:	d10b      	bne.n	70002416 <vPortExitCritical+0x26>
        __asm volatile
700023fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
70002402:	f383 8811 	msr	BASEPRI, r3
70002406:	f3bf 8f6f 	isb	sy
7000240a:	f3bf 8f4f 	dsb	sy
7000240e:	607b      	str	r3, [r7, #4]
    }
70002410:	bf00      	nop
70002412:	bf00      	nop
70002414:	e7fd      	b.n	70002412 <vPortExitCritical+0x22>
    uxCriticalNesting--;
70002416:	4b0a      	ldr	r3, [pc, #40]	@ (70002440 <vPortExitCritical+0x50>)
70002418:	681b      	ldr	r3, [r3, #0]
7000241a:	3b01      	subs	r3, #1
7000241c:	4a08      	ldr	r2, [pc, #32]	@ (70002440 <vPortExitCritical+0x50>)
7000241e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
70002420:	4b07      	ldr	r3, [pc, #28]	@ (70002440 <vPortExitCritical+0x50>)
70002422:	681b      	ldr	r3, [r3, #0]
70002424:	2b00      	cmp	r3, #0
70002426:	d105      	bne.n	70002434 <vPortExitCritical+0x44>
70002428:	2300      	movs	r3, #0
7000242a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
7000242c:	683b      	ldr	r3, [r7, #0]
7000242e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
70002432:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
70002434:	bf00      	nop
70002436:	370c      	adds	r7, #12
70002438:	46bd      	mov	sp, r7
7000243a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000243e:	4770      	bx	lr
70002440:	2400000c 	.word	0x2400000c
	...

70002450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
70002450:	f3ef 8009 	mrs	r0, PSP
70002454:	f3bf 8f6f 	isb	sy
70002458:	4b15      	ldr	r3, [pc, #84]	@ (700024b0 <pxCurrentTCBConst>)
7000245a:	681a      	ldr	r2, [r3, #0]
7000245c:	f01e 0f10 	tst.w	lr, #16
70002460:	bf08      	it	eq
70002462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
70002466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
7000246a:	6010      	str	r0, [r2, #0]
7000246c:	e92d 0009 	stmdb	sp!, {r0, r3}
70002470:	f04f 0050 	mov.w	r0, #80	@ 0x50
70002474:	f380 8811 	msr	BASEPRI, r0
70002478:	f3bf 8f4f 	dsb	sy
7000247c:	f3bf 8f6f 	isb	sy
70002480:	f001 f842 	bl	70003508 <vTaskSwitchContext>
70002484:	f04f 0000 	mov.w	r0, #0
70002488:	f380 8811 	msr	BASEPRI, r0
7000248c:	bc09      	pop	{r0, r3}
7000248e:	6819      	ldr	r1, [r3, #0]
70002490:	6808      	ldr	r0, [r1, #0]
70002492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
70002496:	f01e 0f10 	tst.w	lr, #16
7000249a:	bf08      	it	eq
7000249c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
700024a0:	f380 8809 	msr	PSP, r0
700024a4:	f3bf 8f6f 	isb	sy
700024a8:	4770      	bx	lr
700024aa:	bf00      	nop
700024ac:	f3af 8000 	nop.w

700024b0 <pxCurrentTCBConst>:
700024b0:	24004a90 	.word	0x24004a90
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
700024b4:	bf00      	nop
700024b6:	bf00      	nop

700024b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
700024b8:	b580      	push	{r7, lr}
700024ba:	b082      	sub	sp, #8
700024bc:	af00      	add	r7, sp, #0
        __asm volatile
700024be:	f04f 0350 	mov.w	r3, #80	@ 0x50
700024c2:	f383 8811 	msr	BASEPRI, r3
700024c6:	f3bf 8f6f 	isb	sy
700024ca:	f3bf 8f4f 	dsb	sy
700024ce:	607b      	str	r3, [r7, #4]
    }
700024d0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
700024d2:	f000 ff01 	bl	700032d8 <xTaskIncrementTick>
700024d6:	4603      	mov	r3, r0
700024d8:	2b00      	cmp	r3, #0
700024da:	d003      	beq.n	700024e4 <xPortSysTickHandler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
700024dc:	4b06      	ldr	r3, [pc, #24]	@ (700024f8 <xPortSysTickHandler+0x40>)
700024de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
700024e2:	601a      	str	r2, [r3, #0]
700024e4:	2300      	movs	r3, #0
700024e6:	603b      	str	r3, [r7, #0]
        __asm volatile
700024e8:	683b      	ldr	r3, [r7, #0]
700024ea:	f383 8811 	msr	BASEPRI, r3
    }
700024ee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
700024f0:	bf00      	nop
700024f2:	3708      	adds	r7, #8
700024f4:	46bd      	mov	sp, r7
700024f6:	bd80      	pop	{r7, pc}
700024f8:	e000ed04 	.word	0xe000ed04

700024fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
700024fc:	b480      	push	{r7}
700024fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
70002500:	4b0b      	ldr	r3, [pc, #44]	@ (70002530 <vPortSetupTimerInterrupt+0x34>)
70002502:	2200      	movs	r2, #0
70002504:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
70002506:	4b0b      	ldr	r3, [pc, #44]	@ (70002534 <vPortSetupTimerInterrupt+0x38>)
70002508:	2200      	movs	r2, #0
7000250a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
7000250c:	4b0a      	ldr	r3, [pc, #40]	@ (70002538 <vPortSetupTimerInterrupt+0x3c>)
7000250e:	681b      	ldr	r3, [r3, #0]
70002510:	4a0a      	ldr	r2, [pc, #40]	@ (7000253c <vPortSetupTimerInterrupt+0x40>)
70002512:	fba2 2303 	umull	r2, r3, r2, r3
70002516:	099b      	lsrs	r3, r3, #6
70002518:	4a09      	ldr	r2, [pc, #36]	@ (70002540 <vPortSetupTimerInterrupt+0x44>)
7000251a:	3b01      	subs	r3, #1
7000251c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
7000251e:	4b04      	ldr	r3, [pc, #16]	@ (70002530 <vPortSetupTimerInterrupt+0x34>)
70002520:	2207      	movs	r2, #7
70002522:	601a      	str	r2, [r3, #0]
}
70002524:	bf00      	nop
70002526:	46bd      	mov	sp, r7
70002528:	f85d 7b04 	ldr.w	r7, [sp], #4
7000252c:	4770      	bx	lr
7000252e:	bf00      	nop
70002530:	e000e010 	.word	0xe000e010
70002534:	e000e018 	.word	0xe000e018
70002538:	24000000 	.word	0x24000000
7000253c:	10624dd3 	.word	0x10624dd3
70002540:	e000e014 	.word	0xe000e014

70002544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
70002544:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 70002554 <vPortEnableVFP+0x10>
70002548:	6801      	ldr	r1, [r0, #0]
7000254a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
7000254e:	6001      	str	r1, [r0, #0]
70002550:	4770      	bx	lr
70002552:	0000      	.short	0x0000
70002554:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
70002558:	bf00      	nop
7000255a:	bf00      	nop

7000255c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
7000255c:	b580      	push	{r7, lr}
7000255e:	b086      	sub	sp, #24
70002560:	af00      	add	r7, sp, #0
70002562:	6078      	str	r0, [r7, #4]
70002564:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
70002566:	2301      	movs	r3, #1
70002568:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
7000256a:	687b      	ldr	r3, [r7, #4]
7000256c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
7000256e:	693b      	ldr	r3, [r7, #16]
70002570:	2b00      	cmp	r3, #0
70002572:	d10b      	bne.n	7000258c <xQueueGenericReset+0x30>
        __asm volatile
70002574:	f04f 0350 	mov.w	r3, #80	@ 0x50
70002578:	f383 8811 	msr	BASEPRI, r3
7000257c:	f3bf 8f6f 	isb	sy
70002580:	f3bf 8f4f 	dsb	sy
70002584:	60fb      	str	r3, [r7, #12]
    }
70002586:	bf00      	nop
70002588:	bf00      	nop
7000258a:	e7fd      	b.n	70002588 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
7000258c:	693b      	ldr	r3, [r7, #16]
7000258e:	2b00      	cmp	r3, #0
70002590:	d05d      	beq.n	7000264e <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
70002592:	693b      	ldr	r3, [r7, #16]
70002594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
70002596:	2b00      	cmp	r3, #0
70002598:	d059      	beq.n	7000264e <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
7000259a:	693b      	ldr	r3, [r7, #16]
7000259c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
7000259e:	693b      	ldr	r3, [r7, #16]
700025a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
700025a2:	2100      	movs	r1, #0
700025a4:	fba3 2302 	umull	r2, r3, r3, r2
700025a8:	2b00      	cmp	r3, #0
700025aa:	d000      	beq.n	700025ae <xQueueGenericReset+0x52>
700025ac:	2101      	movs	r1, #1
700025ae:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
700025b0:	2b00      	cmp	r3, #0
700025b2:	d14c      	bne.n	7000264e <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
700025b4:	f7ff feea 	bl	7000238c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
700025b8:	693b      	ldr	r3, [r7, #16]
700025ba:	681a      	ldr	r2, [r3, #0]
700025bc:	693b      	ldr	r3, [r7, #16]
700025be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
700025c0:	6939      	ldr	r1, [r7, #16]
700025c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
700025c4:	fb01 f303 	mul.w	r3, r1, r3
700025c8:	441a      	add	r2, r3
700025ca:	693b      	ldr	r3, [r7, #16]
700025cc:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
700025ce:	693b      	ldr	r3, [r7, #16]
700025d0:	2200      	movs	r2, #0
700025d2:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
700025d4:	693b      	ldr	r3, [r7, #16]
700025d6:	681a      	ldr	r2, [r3, #0]
700025d8:	693b      	ldr	r3, [r7, #16]
700025da:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
700025dc:	693b      	ldr	r3, [r7, #16]
700025de:	681a      	ldr	r2, [r3, #0]
700025e0:	693b      	ldr	r3, [r7, #16]
700025e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
700025e4:	3b01      	subs	r3, #1
700025e6:	6939      	ldr	r1, [r7, #16]
700025e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
700025ea:	fb01 f303 	mul.w	r3, r1, r3
700025ee:	441a      	add	r2, r3
700025f0:	693b      	ldr	r3, [r7, #16]
700025f2:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
700025f4:	693b      	ldr	r3, [r7, #16]
700025f6:	22ff      	movs	r2, #255	@ 0xff
700025f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
700025fc:	693b      	ldr	r3, [r7, #16]
700025fe:	22ff      	movs	r2, #255	@ 0xff
70002600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
70002604:	683b      	ldr	r3, [r7, #0]
70002606:	2b00      	cmp	r3, #0
70002608:	d114      	bne.n	70002634 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
7000260a:	693b      	ldr	r3, [r7, #16]
7000260c:	691b      	ldr	r3, [r3, #16]
7000260e:	2b00      	cmp	r3, #0
70002610:	d01a      	beq.n	70002648 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
70002612:	693b      	ldr	r3, [r7, #16]
70002614:	3310      	adds	r3, #16
70002616:	4618      	mov	r0, r3
70002618:	f001 f848 	bl	700036ac <xTaskRemoveFromEventList>
7000261c:	4603      	mov	r3, r0
7000261e:	2b00      	cmp	r3, #0
70002620:	d012      	beq.n	70002648 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
70002622:	4b16      	ldr	r3, [pc, #88]	@ (7000267c <xQueueGenericReset+0x120>)
70002624:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70002628:	601a      	str	r2, [r3, #0]
7000262a:	f3bf 8f4f 	dsb	sy
7000262e:	f3bf 8f6f 	isb	sy
70002632:	e009      	b.n	70002648 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
70002634:	693b      	ldr	r3, [r7, #16]
70002636:	3310      	adds	r3, #16
70002638:	4618      	mov	r0, r3
7000263a:	f7ff fce7 	bl	7000200c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
7000263e:	693b      	ldr	r3, [r7, #16]
70002640:	3324      	adds	r3, #36	@ 0x24
70002642:	4618      	mov	r0, r3
70002644:	f7ff fce2 	bl	7000200c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
70002648:	f7ff fed2 	bl	700023f0 <vPortExitCritical>
7000264c:	e001      	b.n	70002652 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
7000264e:	2300      	movs	r3, #0
70002650:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
70002652:	697b      	ldr	r3, [r7, #20]
70002654:	2b00      	cmp	r3, #0
70002656:	d10b      	bne.n	70002670 <xQueueGenericReset+0x114>
        __asm volatile
70002658:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000265c:	f383 8811 	msr	BASEPRI, r3
70002660:	f3bf 8f6f 	isb	sy
70002664:	f3bf 8f4f 	dsb	sy
70002668:	60bb      	str	r3, [r7, #8]
    }
7000266a:	bf00      	nop
7000266c:	bf00      	nop
7000266e:	e7fd      	b.n	7000266c <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
70002670:	697b      	ldr	r3, [r7, #20]
}
70002672:	4618      	mov	r0, r3
70002674:	3718      	adds	r7, #24
70002676:	46bd      	mov	sp, r7
70002678:	bd80      	pop	{r7, pc}
7000267a:	bf00      	nop
7000267c:	e000ed04 	.word	0xe000ed04

70002680 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
70002680:	b580      	push	{r7, lr}
70002682:	b08c      	sub	sp, #48	@ 0x30
70002684:	af02      	add	r7, sp, #8
70002686:	60f8      	str	r0, [r7, #12]
70002688:	60b9      	str	r1, [r7, #8]
7000268a:	607a      	str	r2, [r7, #4]
7000268c:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
7000268e:	2300      	movs	r3, #0
70002690:	627b      	str	r3, [r7, #36]	@ 0x24

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
70002692:	683b      	ldr	r3, [r7, #0]
70002694:	2b00      	cmp	r3, #0
70002696:	d10b      	bne.n	700026b0 <xQueueGenericCreateStatic+0x30>
        __asm volatile
70002698:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000269c:	f383 8811 	msr	BASEPRI, r3
700026a0:	f3bf 8f6f 	isb	sy
700026a4:	f3bf 8f4f 	dsb	sy
700026a8:	623b      	str	r3, [r7, #32]
    }
700026aa:	bf00      	nop
700026ac:	bf00      	nop
700026ae:	e7fd      	b.n	700026ac <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
700026b0:	68fb      	ldr	r3, [r7, #12]
700026b2:	2b00      	cmp	r3, #0
700026b4:	d031      	beq.n	7000271a <xQueueGenericCreateStatic+0x9a>
700026b6:	683b      	ldr	r3, [r7, #0]
700026b8:	2b00      	cmp	r3, #0
700026ba:	d02e      	beq.n	7000271a <xQueueGenericCreateStatic+0x9a>
            ( pxStaticQueue != NULL ) &&
700026bc:	687b      	ldr	r3, [r7, #4]
700026be:	2b00      	cmp	r3, #0
700026c0:	d002      	beq.n	700026c8 <xQueueGenericCreateStatic+0x48>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
700026c2:	68bb      	ldr	r3, [r7, #8]
700026c4:	2b00      	cmp	r3, #0
700026c6:	d028      	beq.n	7000271a <xQueueGenericCreateStatic+0x9a>
700026c8:	687b      	ldr	r3, [r7, #4]
700026ca:	2b00      	cmp	r3, #0
700026cc:	d102      	bne.n	700026d4 <xQueueGenericCreateStatic+0x54>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
700026ce:	68bb      	ldr	r3, [r7, #8]
700026d0:	2b00      	cmp	r3, #0
700026d2:	d122      	bne.n	7000271a <xQueueGenericCreateStatic+0x9a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
700026d4:	2350      	movs	r3, #80	@ 0x50
700026d6:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
700026d8:	697b      	ldr	r3, [r7, #20]
700026da:	2b50      	cmp	r3, #80	@ 0x50
700026dc:	d00b      	beq.n	700026f6 <xQueueGenericCreateStatic+0x76>
        __asm volatile
700026de:	f04f 0350 	mov.w	r3, #80	@ 0x50
700026e2:	f383 8811 	msr	BASEPRI, r3
700026e6:	f3bf 8f6f 	isb	sy
700026ea:	f3bf 8f4f 	dsb	sy
700026ee:	61fb      	str	r3, [r7, #28]
    }
700026f0:	bf00      	nop
700026f2:	bf00      	nop
700026f4:	e7fd      	b.n	700026f2 <xQueueGenericCreateStatic+0x72>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
700026f6:	697b      	ldr	r3, [r7, #20]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
700026f8:	683b      	ldr	r3, [r7, #0]
700026fa:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
700026fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700026fe:	2201      	movs	r2, #1
70002700:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
70002704:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
70002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000270a:	9300      	str	r3, [sp, #0]
7000270c:	4613      	mov	r3, r2
7000270e:	687a      	ldr	r2, [r7, #4]
70002710:	68b9      	ldr	r1, [r7, #8]
70002712:	68f8      	ldr	r0, [r7, #12]
70002714:	f000 f815 	bl	70002742 <prvInitialiseNewQueue>
70002718:	e00e      	b.n	70002738 <xQueueGenericCreateStatic+0xb8>
        }
        else
        {
            configASSERT( pxNewQueue );
7000271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000271c:	2b00      	cmp	r3, #0
7000271e:	d10b      	bne.n	70002738 <xQueueGenericCreateStatic+0xb8>
        __asm volatile
70002720:	f04f 0350 	mov.w	r3, #80	@ 0x50
70002724:	f383 8811 	msr	BASEPRI, r3
70002728:	f3bf 8f6f 	isb	sy
7000272c:	f3bf 8f4f 	dsb	sy
70002730:	61bb      	str	r3, [r7, #24]
    }
70002732:	bf00      	nop
70002734:	bf00      	nop
70002736:	e7fd      	b.n	70002734 <xQueueGenericCreateStatic+0xb4>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
70002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
7000273a:	4618      	mov	r0, r3
7000273c:	3728      	adds	r7, #40	@ 0x28
7000273e:	46bd      	mov	sp, r7
70002740:	bd80      	pop	{r7, pc}

70002742 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
70002742:	b580      	push	{r7, lr}
70002744:	b084      	sub	sp, #16
70002746:	af00      	add	r7, sp, #0
70002748:	60f8      	str	r0, [r7, #12]
7000274a:	60b9      	str	r1, [r7, #8]
7000274c:	607a      	str	r2, [r7, #4]
7000274e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
70002750:	68bb      	ldr	r3, [r7, #8]
70002752:	2b00      	cmp	r3, #0
70002754:	d103      	bne.n	7000275e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
70002756:	69bb      	ldr	r3, [r7, #24]
70002758:	69ba      	ldr	r2, [r7, #24]
7000275a:	601a      	str	r2, [r3, #0]
7000275c:	e002      	b.n	70002764 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
7000275e:	69bb      	ldr	r3, [r7, #24]
70002760:	687a      	ldr	r2, [r7, #4]
70002762:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
70002764:	69bb      	ldr	r3, [r7, #24]
70002766:	68fa      	ldr	r2, [r7, #12]
70002768:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
7000276a:	69bb      	ldr	r3, [r7, #24]
7000276c:	68ba      	ldr	r2, [r7, #8]
7000276e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
70002770:	2101      	movs	r1, #1
70002772:	69b8      	ldr	r0, [r7, #24]
70002774:	f7ff fef2 	bl	7000255c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
70002778:	69bb      	ldr	r3, [r7, #24]
7000277a:	78fa      	ldrb	r2, [r7, #3]
7000277c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
70002780:	bf00      	nop
70002782:	3710      	adds	r7, #16
70002784:	46bd      	mov	sp, r7
70002786:	bd80      	pop	{r7, pc}

70002788 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
70002788:	b580      	push	{r7, lr}
7000278a:	b08c      	sub	sp, #48	@ 0x30
7000278c:	af00      	add	r7, sp, #0
7000278e:	60f8      	str	r0, [r7, #12]
70002790:	60b9      	str	r1, [r7, #8]
70002792:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
70002794:	2300      	movs	r3, #0
70002796:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
70002798:	68fb      	ldr	r3, [r7, #12]
7000279a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
7000279c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000279e:	2b00      	cmp	r3, #0
700027a0:	d10b      	bne.n	700027ba <xQueueReceive+0x32>
        __asm volatile
700027a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
700027a6:	f383 8811 	msr	BASEPRI, r3
700027aa:	f3bf 8f6f 	isb	sy
700027ae:	f3bf 8f4f 	dsb	sy
700027b2:	623b      	str	r3, [r7, #32]
    }
700027b4:	bf00      	nop
700027b6:	bf00      	nop
700027b8:	e7fd      	b.n	700027b6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
700027ba:	68bb      	ldr	r3, [r7, #8]
700027bc:	2b00      	cmp	r3, #0
700027be:	d103      	bne.n	700027c8 <xQueueReceive+0x40>
700027c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
700027c4:	2b00      	cmp	r3, #0
700027c6:	d101      	bne.n	700027cc <xQueueReceive+0x44>
700027c8:	2301      	movs	r3, #1
700027ca:	e000      	b.n	700027ce <xQueueReceive+0x46>
700027cc:	2300      	movs	r3, #0
700027ce:	2b00      	cmp	r3, #0
700027d0:	d10b      	bne.n	700027ea <xQueueReceive+0x62>
        __asm volatile
700027d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
700027d6:	f383 8811 	msr	BASEPRI, r3
700027da:	f3bf 8f6f 	isb	sy
700027de:	f3bf 8f4f 	dsb	sy
700027e2:	61fb      	str	r3, [r7, #28]
    }
700027e4:	bf00      	nop
700027e6:	bf00      	nop
700027e8:	e7fd      	b.n	700027e6 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
700027ea:	f001 f99b 	bl	70003b24 <xTaskGetSchedulerState>
700027ee:	4603      	mov	r3, r0
700027f0:	2b00      	cmp	r3, #0
700027f2:	d102      	bne.n	700027fa <xQueueReceive+0x72>
700027f4:	687b      	ldr	r3, [r7, #4]
700027f6:	2b00      	cmp	r3, #0
700027f8:	d101      	bne.n	700027fe <xQueueReceive+0x76>
700027fa:	2301      	movs	r3, #1
700027fc:	e000      	b.n	70002800 <xQueueReceive+0x78>
700027fe:	2300      	movs	r3, #0
70002800:	2b00      	cmp	r3, #0
70002802:	d10b      	bne.n	7000281c <xQueueReceive+0x94>
        __asm volatile
70002804:	f04f 0350 	mov.w	r3, #80	@ 0x50
70002808:	f383 8811 	msr	BASEPRI, r3
7000280c:	f3bf 8f6f 	isb	sy
70002810:	f3bf 8f4f 	dsb	sy
70002814:	61bb      	str	r3, [r7, #24]
    }
70002816:	bf00      	nop
70002818:	bf00      	nop
7000281a:	e7fd      	b.n	70002818 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
7000281c:	f7ff fdb6 	bl	7000238c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
70002820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70002822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
70002824:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
70002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002828:	2b00      	cmp	r3, #0
7000282a:	d01f      	beq.n	7000286c <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
7000282c:	68b9      	ldr	r1, [r7, #8]
7000282e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
70002830:	f000 f88c 	bl	7000294c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
70002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002836:	1e5a      	subs	r2, r3, #1
70002838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000283a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
7000283c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000283e:	691b      	ldr	r3, [r3, #16]
70002840:	2b00      	cmp	r3, #0
70002842:	d00f      	beq.n	70002864 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
70002844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70002846:	3310      	adds	r3, #16
70002848:	4618      	mov	r0, r3
7000284a:	f000 ff2f 	bl	700036ac <xTaskRemoveFromEventList>
7000284e:	4603      	mov	r3, r0
70002850:	2b00      	cmp	r3, #0
70002852:	d007      	beq.n	70002864 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
70002854:	4b3c      	ldr	r3, [pc, #240]	@ (70002948 <xQueueReceive+0x1c0>)
70002856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
7000285a:	601a      	str	r2, [r3, #0]
7000285c:	f3bf 8f4f 	dsb	sy
70002860:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
70002864:	f7ff fdc4 	bl	700023f0 <vPortExitCritical>
                return pdPASS;
70002868:	2301      	movs	r3, #1
7000286a:	e069      	b.n	70002940 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
7000286c:	687b      	ldr	r3, [r7, #4]
7000286e:	2b00      	cmp	r3, #0
70002870:	d103      	bne.n	7000287a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
70002872:	f7ff fdbd 	bl	700023f0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
70002876:	2300      	movs	r3, #0
70002878:	e062      	b.n	70002940 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
7000287a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000287c:	2b00      	cmp	r3, #0
7000287e:	d106      	bne.n	7000288e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
70002880:	f107 0310 	add.w	r3, r7, #16
70002884:	4618      	mov	r0, r3
70002886:	f000 ffe9 	bl	7000385c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
7000288a:	2301      	movs	r3, #1
7000288c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
7000288e:	f7ff fdaf 	bl	700023f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
70002892:	f000 fc05 	bl	700030a0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
70002896:	f7ff fd79 	bl	7000238c <vPortEnterCritical>
7000289a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000289c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
700028a0:	b25b      	sxtb	r3, r3
700028a2:	f1b3 3fff 	cmp.w	r3, #4294967295
700028a6:	d103      	bne.n	700028b0 <xQueueReceive+0x128>
700028a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700028aa:	2200      	movs	r2, #0
700028ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
700028b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700028b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
700028b6:	b25b      	sxtb	r3, r3
700028b8:	f1b3 3fff 	cmp.w	r3, #4294967295
700028bc:	d103      	bne.n	700028c6 <xQueueReceive+0x13e>
700028be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700028c0:	2200      	movs	r2, #0
700028c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
700028c6:	f7ff fd93 	bl	700023f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
700028ca:	1d3a      	adds	r2, r7, #4
700028cc:	f107 0310 	add.w	r3, r7, #16
700028d0:	4611      	mov	r1, r2
700028d2:	4618      	mov	r0, r3
700028d4:	f000 ffd8 	bl	70003888 <xTaskCheckForTimeOut>
700028d8:	4603      	mov	r3, r0
700028da:	2b00      	cmp	r3, #0
700028dc:	d123      	bne.n	70002926 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
700028de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
700028e0:	f000 f8ac 	bl	70002a3c <prvIsQueueEmpty>
700028e4:	4603      	mov	r3, r0
700028e6:	2b00      	cmp	r3, #0
700028e8:	d017      	beq.n	7000291a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
700028ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700028ec:	3324      	adds	r3, #36	@ 0x24
700028ee:	687a      	ldr	r2, [r7, #4]
700028f0:	4611      	mov	r1, r2
700028f2:	4618      	mov	r0, r3
700028f4:	f000 fe6e 	bl	700035d4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
700028f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
700028fa:	f000 f84d 	bl	70002998 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
700028fe:	f000 fbdd 	bl	700030bc <xTaskResumeAll>
70002902:	4603      	mov	r3, r0
70002904:	2b00      	cmp	r3, #0
70002906:	d189      	bne.n	7000281c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
70002908:	4b0f      	ldr	r3, [pc, #60]	@ (70002948 <xQueueReceive+0x1c0>)
7000290a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
7000290e:	601a      	str	r2, [r3, #0]
70002910:	f3bf 8f4f 	dsb	sy
70002914:	f3bf 8f6f 	isb	sy
70002918:	e780      	b.n	7000281c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
7000291a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
7000291c:	f000 f83c 	bl	70002998 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
70002920:	f000 fbcc 	bl	700030bc <xTaskResumeAll>
70002924:	e77a      	b.n	7000281c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
70002926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
70002928:	f000 f836 	bl	70002998 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
7000292c:	f000 fbc6 	bl	700030bc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
70002930:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
70002932:	f000 f883 	bl	70002a3c <prvIsQueueEmpty>
70002936:	4603      	mov	r3, r0
70002938:	2b00      	cmp	r3, #0
7000293a:	f43f af6f 	beq.w	7000281c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
7000293e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
70002940:	4618      	mov	r0, r3
70002942:	3730      	adds	r7, #48	@ 0x30
70002944:	46bd      	mov	sp, r7
70002946:	bd80      	pop	{r7, pc}
70002948:	e000ed04 	.word	0xe000ed04

7000294c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
7000294c:	b580      	push	{r7, lr}
7000294e:	b082      	sub	sp, #8
70002950:	af00      	add	r7, sp, #0
70002952:	6078      	str	r0, [r7, #4]
70002954:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
70002956:	687b      	ldr	r3, [r7, #4]
70002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
7000295a:	2b00      	cmp	r3, #0
7000295c:	d018      	beq.n	70002990 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
7000295e:	687b      	ldr	r3, [r7, #4]
70002960:	68da      	ldr	r2, [r3, #12]
70002962:	687b      	ldr	r3, [r7, #4]
70002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70002966:	441a      	add	r2, r3
70002968:	687b      	ldr	r3, [r7, #4]
7000296a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
7000296c:	687b      	ldr	r3, [r7, #4]
7000296e:	68da      	ldr	r2, [r3, #12]
70002970:	687b      	ldr	r3, [r7, #4]
70002972:	689b      	ldr	r3, [r3, #8]
70002974:	429a      	cmp	r2, r3
70002976:	d303      	bcc.n	70002980 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
70002978:	687b      	ldr	r3, [r7, #4]
7000297a:	681a      	ldr	r2, [r3, #0]
7000297c:	687b      	ldr	r3, [r7, #4]
7000297e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
70002980:	687b      	ldr	r3, [r7, #4]
70002982:	68d9      	ldr	r1, [r3, #12]
70002984:	687b      	ldr	r3, [r7, #4]
70002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70002988:	461a      	mov	r2, r3
7000298a:	6838      	ldr	r0, [r7, #0]
7000298c:	f001 fca2 	bl	700042d4 <memcpy>
    }
}
70002990:	bf00      	nop
70002992:	3708      	adds	r7, #8
70002994:	46bd      	mov	sp, r7
70002996:	bd80      	pop	{r7, pc}

70002998 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
70002998:	b580      	push	{r7, lr}
7000299a:	b084      	sub	sp, #16
7000299c:	af00      	add	r7, sp, #0
7000299e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
700029a0:	f7ff fcf4 	bl	7000238c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
700029a4:	687b      	ldr	r3, [r7, #4]
700029a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
700029aa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
700029ac:	e011      	b.n	700029d2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
700029ae:	687b      	ldr	r3, [r7, #4]
700029b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700029b2:	2b00      	cmp	r3, #0
700029b4:	d012      	beq.n	700029dc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
700029b6:	687b      	ldr	r3, [r7, #4]
700029b8:	3324      	adds	r3, #36	@ 0x24
700029ba:	4618      	mov	r0, r3
700029bc:	f000 fe76 	bl	700036ac <xTaskRemoveFromEventList>
700029c0:	4603      	mov	r3, r0
700029c2:	2b00      	cmp	r3, #0
700029c4:	d001      	beq.n	700029ca <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
700029c6:	f000 ffc7 	bl	70003958 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
700029ca:	7bfb      	ldrb	r3, [r7, #15]
700029cc:	3b01      	subs	r3, #1
700029ce:	b2db      	uxtb	r3, r3
700029d0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
700029d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
700029d6:	2b00      	cmp	r3, #0
700029d8:	dce9      	bgt.n	700029ae <prvUnlockQueue+0x16>
700029da:	e000      	b.n	700029de <prvUnlockQueue+0x46>
                    break;
700029dc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
700029de:	687b      	ldr	r3, [r7, #4]
700029e0:	22ff      	movs	r2, #255	@ 0xff
700029e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
700029e6:	f7ff fd03 	bl	700023f0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
700029ea:	f7ff fccf 	bl	7000238c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
700029ee:	687b      	ldr	r3, [r7, #4]
700029f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
700029f4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
700029f6:	e011      	b.n	70002a1c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
700029f8:	687b      	ldr	r3, [r7, #4]
700029fa:	691b      	ldr	r3, [r3, #16]
700029fc:	2b00      	cmp	r3, #0
700029fe:	d012      	beq.n	70002a26 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
70002a00:	687b      	ldr	r3, [r7, #4]
70002a02:	3310      	adds	r3, #16
70002a04:	4618      	mov	r0, r3
70002a06:	f000 fe51 	bl	700036ac <xTaskRemoveFromEventList>
70002a0a:	4603      	mov	r3, r0
70002a0c:	2b00      	cmp	r3, #0
70002a0e:	d001      	beq.n	70002a14 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
70002a10:	f000 ffa2 	bl	70003958 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
70002a14:	7bbb      	ldrb	r3, [r7, #14]
70002a16:	3b01      	subs	r3, #1
70002a18:	b2db      	uxtb	r3, r3
70002a1a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
70002a1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
70002a20:	2b00      	cmp	r3, #0
70002a22:	dce9      	bgt.n	700029f8 <prvUnlockQueue+0x60>
70002a24:	e000      	b.n	70002a28 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
70002a26:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
70002a28:	687b      	ldr	r3, [r7, #4]
70002a2a:	22ff      	movs	r2, #255	@ 0xff
70002a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
70002a30:	f7ff fcde 	bl	700023f0 <vPortExitCritical>
}
70002a34:	bf00      	nop
70002a36:	3710      	adds	r7, #16
70002a38:	46bd      	mov	sp, r7
70002a3a:	bd80      	pop	{r7, pc}

70002a3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
70002a3c:	b580      	push	{r7, lr}
70002a3e:	b084      	sub	sp, #16
70002a40:	af00      	add	r7, sp, #0
70002a42:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
70002a44:	f7ff fca2 	bl	7000238c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
70002a48:	687b      	ldr	r3, [r7, #4]
70002a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
70002a4c:	2b00      	cmp	r3, #0
70002a4e:	d102      	bne.n	70002a56 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
70002a50:	2301      	movs	r3, #1
70002a52:	60fb      	str	r3, [r7, #12]
70002a54:	e001      	b.n	70002a5a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
70002a56:	2300      	movs	r3, #0
70002a58:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
70002a5a:	f7ff fcc9 	bl	700023f0 <vPortExitCritical>

    return xReturn;
70002a5e:	68fb      	ldr	r3, [r7, #12]
}
70002a60:	4618      	mov	r0, r3
70002a62:	3710      	adds	r7, #16
70002a64:	46bd      	mov	sp, r7
70002a66:	bd80      	pop	{r7, pc}

70002a68 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
70002a68:	b480      	push	{r7}
70002a6a:	b087      	sub	sp, #28
70002a6c:	af00      	add	r7, sp, #0
70002a6e:	6078      	str	r0, [r7, #4]
70002a70:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
70002a72:	2300      	movs	r3, #0
70002a74:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
70002a76:	687b      	ldr	r3, [r7, #4]
70002a78:	2b00      	cmp	r3, #0
70002a7a:	d10b      	bne.n	70002a94 <vQueueAddToRegistry+0x2c>
        __asm volatile
70002a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
70002a80:	f383 8811 	msr	BASEPRI, r3
70002a84:	f3bf 8f6f 	isb	sy
70002a88:	f3bf 8f4f 	dsb	sy
70002a8c:	60fb      	str	r3, [r7, #12]
    }
70002a8e:	bf00      	nop
70002a90:	bf00      	nop
70002a92:	e7fd      	b.n	70002a90 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
70002a94:	683b      	ldr	r3, [r7, #0]
70002a96:	2b00      	cmp	r3, #0
70002a98:	d024      	beq.n	70002ae4 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
70002a9a:	2300      	movs	r3, #0
70002a9c:	617b      	str	r3, [r7, #20]
70002a9e:	e01e      	b.n	70002ade <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
70002aa0:	4a18      	ldr	r2, [pc, #96]	@ (70002b04 <vQueueAddToRegistry+0x9c>)
70002aa2:	697b      	ldr	r3, [r7, #20]
70002aa4:	00db      	lsls	r3, r3, #3
70002aa6:	4413      	add	r3, r2
70002aa8:	685b      	ldr	r3, [r3, #4]
70002aaa:	687a      	ldr	r2, [r7, #4]
70002aac:	429a      	cmp	r2, r3
70002aae:	d105      	bne.n	70002abc <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
70002ab0:	697b      	ldr	r3, [r7, #20]
70002ab2:	00db      	lsls	r3, r3, #3
70002ab4:	4a13      	ldr	r2, [pc, #76]	@ (70002b04 <vQueueAddToRegistry+0x9c>)
70002ab6:	4413      	add	r3, r2
70002ab8:	613b      	str	r3, [r7, #16]
                    break;
70002aba:	e013      	b.n	70002ae4 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
70002abc:	693b      	ldr	r3, [r7, #16]
70002abe:	2b00      	cmp	r3, #0
70002ac0:	d10a      	bne.n	70002ad8 <vQueueAddToRegistry+0x70>
70002ac2:	4a10      	ldr	r2, [pc, #64]	@ (70002b04 <vQueueAddToRegistry+0x9c>)
70002ac4:	697b      	ldr	r3, [r7, #20]
70002ac6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
70002aca:	2b00      	cmp	r3, #0
70002acc:	d104      	bne.n	70002ad8 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
70002ace:	697b      	ldr	r3, [r7, #20]
70002ad0:	00db      	lsls	r3, r3, #3
70002ad2:	4a0c      	ldr	r2, [pc, #48]	@ (70002b04 <vQueueAddToRegistry+0x9c>)
70002ad4:	4413      	add	r3, r2
70002ad6:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
70002ad8:	697b      	ldr	r3, [r7, #20]
70002ada:	3301      	adds	r3, #1
70002adc:	617b      	str	r3, [r7, #20]
70002ade:	697b      	ldr	r3, [r7, #20]
70002ae0:	2b07      	cmp	r3, #7
70002ae2:	d9dd      	bls.n	70002aa0 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
70002ae4:	693b      	ldr	r3, [r7, #16]
70002ae6:	2b00      	cmp	r3, #0
70002ae8:	d005      	beq.n	70002af6 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
70002aea:	693b      	ldr	r3, [r7, #16]
70002aec:	683a      	ldr	r2, [r7, #0]
70002aee:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
70002af0:	693b      	ldr	r3, [r7, #16]
70002af2:	687a      	ldr	r2, [r7, #4]
70002af4:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
70002af6:	bf00      	nop
70002af8:	371c      	adds	r7, #28
70002afa:	46bd      	mov	sp, r7
70002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
70002b00:	4770      	bx	lr
70002b02:	bf00      	nop
70002b04:	24004a50 	.word	0x24004a50

70002b08 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
70002b08:	b580      	push	{r7, lr}
70002b0a:	b086      	sub	sp, #24
70002b0c:	af00      	add	r7, sp, #0
70002b0e:	60f8      	str	r0, [r7, #12]
70002b10:	60b9      	str	r1, [r7, #8]
70002b12:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
70002b14:	68fb      	ldr	r3, [r7, #12]
70002b16:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
70002b18:	f7ff fc38 	bl	7000238c <vPortEnterCritical>
70002b1c:	697b      	ldr	r3, [r7, #20]
70002b1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
70002b22:	b25b      	sxtb	r3, r3
70002b24:	f1b3 3fff 	cmp.w	r3, #4294967295
70002b28:	d103      	bne.n	70002b32 <vQueueWaitForMessageRestricted+0x2a>
70002b2a:	697b      	ldr	r3, [r7, #20]
70002b2c:	2200      	movs	r2, #0
70002b2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
70002b32:	697b      	ldr	r3, [r7, #20]
70002b34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
70002b38:	b25b      	sxtb	r3, r3
70002b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
70002b3e:	d103      	bne.n	70002b48 <vQueueWaitForMessageRestricted+0x40>
70002b40:	697b      	ldr	r3, [r7, #20]
70002b42:	2200      	movs	r2, #0
70002b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
70002b48:	f7ff fc52 	bl	700023f0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
70002b4c:	697b      	ldr	r3, [r7, #20]
70002b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
70002b50:	2b00      	cmp	r3, #0
70002b52:	d106      	bne.n	70002b62 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
70002b54:	697b      	ldr	r3, [r7, #20]
70002b56:	3324      	adds	r3, #36	@ 0x24
70002b58:	687a      	ldr	r2, [r7, #4]
70002b5a:	68b9      	ldr	r1, [r7, #8]
70002b5c:	4618      	mov	r0, r3
70002b5e:	f000 fd5f 	bl	70003620 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
70002b62:	6978      	ldr	r0, [r7, #20]
70002b64:	f7ff ff18 	bl	70002998 <prvUnlockQueue>
    }
70002b68:	bf00      	nop
70002b6a:	3718      	adds	r7, #24
70002b6c:	46bd      	mov	sp, r7
70002b6e:	bd80      	pop	{r7, pc}

70002b70 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
70002b70:	b580      	push	{r7, lr}
70002b72:	b08e      	sub	sp, #56	@ 0x38
70002b74:	af04      	add	r7, sp, #16
70002b76:	60f8      	str	r0, [r7, #12]
70002b78:	60b9      	str	r1, [r7, #8]
70002b7a:	607a      	str	r2, [r7, #4]
70002b7c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
70002b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70002b80:	2b00      	cmp	r3, #0
70002b82:	d10b      	bne.n	70002b9c <xTaskCreateStatic+0x2c>
        __asm volatile
70002b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
70002b88:	f383 8811 	msr	BASEPRI, r3
70002b8c:	f3bf 8f6f 	isb	sy
70002b90:	f3bf 8f4f 	dsb	sy
70002b94:	623b      	str	r3, [r7, #32]
    }
70002b96:	bf00      	nop
70002b98:	bf00      	nop
70002b9a:	e7fd      	b.n	70002b98 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
70002b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70002b9e:	2b00      	cmp	r3, #0
70002ba0:	d10b      	bne.n	70002bba <xTaskCreateStatic+0x4a>
        __asm volatile
70002ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
70002ba6:	f383 8811 	msr	BASEPRI, r3
70002baa:	f3bf 8f6f 	isb	sy
70002bae:	f3bf 8f4f 	dsb	sy
70002bb2:	61fb      	str	r3, [r7, #28]
    }
70002bb4:	bf00      	nop
70002bb6:	bf00      	nop
70002bb8:	e7fd      	b.n	70002bb6 <xTaskCreateStatic+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
70002bba:	23a8      	movs	r3, #168	@ 0xa8
70002bbc:	613b      	str	r3, [r7, #16]
            configASSERT( xSize == sizeof( TCB_t ) );
70002bbe:	693b      	ldr	r3, [r7, #16]
70002bc0:	2ba8      	cmp	r3, #168	@ 0xa8
70002bc2:	d00b      	beq.n	70002bdc <xTaskCreateStatic+0x6c>
        __asm volatile
70002bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
70002bc8:	f383 8811 	msr	BASEPRI, r3
70002bcc:	f3bf 8f6f 	isb	sy
70002bd0:	f3bf 8f4f 	dsb	sy
70002bd4:	61bb      	str	r3, [r7, #24]
    }
70002bd6:	bf00      	nop
70002bd8:	bf00      	nop
70002bda:	e7fd      	b.n	70002bd8 <xTaskCreateStatic+0x68>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
70002bdc:	693b      	ldr	r3, [r7, #16]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
70002bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70002be0:	2b00      	cmp	r3, #0
70002be2:	d023      	beq.n	70002c2c <xTaskCreateStatic+0xbc>
70002be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70002be6:	2b00      	cmp	r3, #0
70002be8:	d020      	beq.n	70002c2c <xTaskCreateStatic+0xbc>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
70002bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70002bec:	627b      	str	r3, [r7, #36]	@ 0x24
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
70002bee:	22a8      	movs	r2, #168	@ 0xa8
70002bf0:	2100      	movs	r1, #0
70002bf2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
70002bf4:	f001 faea 	bl	700041cc <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
70002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002bfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
70002bfc:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
70002bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002c00:	2202      	movs	r2, #2
70002c02:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
70002c06:	2300      	movs	r3, #0
70002c08:	9303      	str	r3, [sp, #12]
70002c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002c0c:	9302      	str	r3, [sp, #8]
70002c0e:	f107 0314 	add.w	r3, r7, #20
70002c12:	9301      	str	r3, [sp, #4]
70002c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002c16:	9300      	str	r3, [sp, #0]
70002c18:	683b      	ldr	r3, [r7, #0]
70002c1a:	687a      	ldr	r2, [r7, #4]
70002c1c:	68b9      	ldr	r1, [r7, #8]
70002c1e:	68f8      	ldr	r0, [r7, #12]
70002c20:	f000 f856 	bl	70002cd0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
70002c24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
70002c26:	f000 f8f9 	bl	70002e1c <prvAddNewTaskToReadyList>
70002c2a:	e001      	b.n	70002c30 <xTaskCreateStatic+0xc0>
        }
        else
        {
            xReturn = NULL;
70002c2c:	2300      	movs	r3, #0
70002c2e:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
70002c30:	697b      	ldr	r3, [r7, #20]
    }
70002c32:	4618      	mov	r0, r3
70002c34:	3728      	adds	r7, #40	@ 0x28
70002c36:	46bd      	mov	sp, r7
70002c38:	bd80      	pop	{r7, pc}

70002c3a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
70002c3a:	b580      	push	{r7, lr}
70002c3c:	b08c      	sub	sp, #48	@ 0x30
70002c3e:	af04      	add	r7, sp, #16
70002c40:	60f8      	str	r0, [r7, #12]
70002c42:	60b9      	str	r1, [r7, #8]
70002c44:	603b      	str	r3, [r7, #0]
70002c46:	4613      	mov	r3, r2
70002c48:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
70002c4a:	88fb      	ldrh	r3, [r7, #6]
70002c4c:	009b      	lsls	r3, r3, #2
70002c4e:	4618      	mov	r0, r3
70002c50:	f7ff f80c 	bl	70001c6c <pvPortMalloc>
70002c54:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
70002c56:	697b      	ldr	r3, [r7, #20]
70002c58:	2b00      	cmp	r3, #0
70002c5a:	d013      	beq.n	70002c84 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
70002c5c:	20a8      	movs	r0, #168	@ 0xa8
70002c5e:	f7ff f805 	bl	70001c6c <pvPortMalloc>
70002c62:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
70002c64:	69fb      	ldr	r3, [r7, #28]
70002c66:	2b00      	cmp	r3, #0
70002c68:	d008      	beq.n	70002c7c <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
70002c6a:	22a8      	movs	r2, #168	@ 0xa8
70002c6c:	2100      	movs	r1, #0
70002c6e:	69f8      	ldr	r0, [r7, #28]
70002c70:	f001 faac 	bl	700041cc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
70002c74:	69fb      	ldr	r3, [r7, #28]
70002c76:	697a      	ldr	r2, [r7, #20]
70002c78:	631a      	str	r2, [r3, #48]	@ 0x30
70002c7a:	e005      	b.n	70002c88 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
70002c7c:	6978      	ldr	r0, [r7, #20]
70002c7e:	f7ff f8b1 	bl	70001de4 <vPortFree>
70002c82:	e001      	b.n	70002c88 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
70002c84:	2300      	movs	r3, #0
70002c86:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
70002c88:	69fb      	ldr	r3, [r7, #28]
70002c8a:	2b00      	cmp	r3, #0
70002c8c:	d017      	beq.n	70002cbe <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
70002c8e:	69fb      	ldr	r3, [r7, #28]
70002c90:	2200      	movs	r2, #0
70002c92:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
70002c96:	88fa      	ldrh	r2, [r7, #6]
70002c98:	2300      	movs	r3, #0
70002c9a:	9303      	str	r3, [sp, #12]
70002c9c:	69fb      	ldr	r3, [r7, #28]
70002c9e:	9302      	str	r3, [sp, #8]
70002ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002ca2:	9301      	str	r3, [sp, #4]
70002ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70002ca6:	9300      	str	r3, [sp, #0]
70002ca8:	683b      	ldr	r3, [r7, #0]
70002caa:	68b9      	ldr	r1, [r7, #8]
70002cac:	68f8      	ldr	r0, [r7, #12]
70002cae:	f000 f80f 	bl	70002cd0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
70002cb2:	69f8      	ldr	r0, [r7, #28]
70002cb4:	f000 f8b2 	bl	70002e1c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
70002cb8:	2301      	movs	r3, #1
70002cba:	61bb      	str	r3, [r7, #24]
70002cbc:	e002      	b.n	70002cc4 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
70002cbe:	f04f 33ff 	mov.w	r3, #4294967295
70002cc2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
70002cc4:	69bb      	ldr	r3, [r7, #24]
    }
70002cc6:	4618      	mov	r0, r3
70002cc8:	3720      	adds	r7, #32
70002cca:	46bd      	mov	sp, r7
70002ccc:	bd80      	pop	{r7, pc}
	...

70002cd0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
70002cd0:	b580      	push	{r7, lr}
70002cd2:	b088      	sub	sp, #32
70002cd4:	af00      	add	r7, sp, #0
70002cd6:	60f8      	str	r0, [r7, #12]
70002cd8:	60b9      	str	r1, [r7, #8]
70002cda:	607a      	str	r2, [r7, #4]
70002cdc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
70002cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002ce0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
70002ce2:	687b      	ldr	r3, [r7, #4]
70002ce4:	009b      	lsls	r3, r3, #2
70002ce6:	461a      	mov	r2, r3
70002ce8:	21a5      	movs	r1, #165	@ 0xa5
70002cea:	f001 fa6f 	bl	700041cc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
70002cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002cf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
70002cf2:	6879      	ldr	r1, [r7, #4]
70002cf4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
70002cf8:	440b      	add	r3, r1
70002cfa:	009b      	lsls	r3, r3, #2
70002cfc:	4413      	add	r3, r2
70002cfe:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
70002d00:	69bb      	ldr	r3, [r7, #24]
70002d02:	f023 0307 	bic.w	r3, r3, #7
70002d06:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
70002d08:	69bb      	ldr	r3, [r7, #24]
70002d0a:	f003 0307 	and.w	r3, r3, #7
70002d0e:	2b00      	cmp	r3, #0
70002d10:	d00b      	beq.n	70002d2a <prvInitialiseNewTask+0x5a>
        __asm volatile
70002d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
70002d16:	f383 8811 	msr	BASEPRI, r3
70002d1a:	f3bf 8f6f 	isb	sy
70002d1e:	f3bf 8f4f 	dsb	sy
70002d22:	617b      	str	r3, [r7, #20]
    }
70002d24:	bf00      	nop
70002d26:	bf00      	nop
70002d28:	e7fd      	b.n	70002d26 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
70002d2a:	68bb      	ldr	r3, [r7, #8]
70002d2c:	2b00      	cmp	r3, #0
70002d2e:	d01e      	beq.n	70002d6e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
70002d30:	2300      	movs	r3, #0
70002d32:	61fb      	str	r3, [r7, #28]
70002d34:	e012      	b.n	70002d5c <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
70002d36:	68ba      	ldr	r2, [r7, #8]
70002d38:	69fb      	ldr	r3, [r7, #28]
70002d3a:	4413      	add	r3, r2
70002d3c:	7819      	ldrb	r1, [r3, #0]
70002d3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
70002d40:	69fb      	ldr	r3, [r7, #28]
70002d42:	4413      	add	r3, r2
70002d44:	3334      	adds	r3, #52	@ 0x34
70002d46:	460a      	mov	r2, r1
70002d48:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
70002d4a:	68ba      	ldr	r2, [r7, #8]
70002d4c:	69fb      	ldr	r3, [r7, #28]
70002d4e:	4413      	add	r3, r2
70002d50:	781b      	ldrb	r3, [r3, #0]
70002d52:	2b00      	cmp	r3, #0
70002d54:	d006      	beq.n	70002d64 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
70002d56:	69fb      	ldr	r3, [r7, #28]
70002d58:	3301      	adds	r3, #1
70002d5a:	61fb      	str	r3, [r7, #28]
70002d5c:	69fb      	ldr	r3, [r7, #28]
70002d5e:	2b0f      	cmp	r3, #15
70002d60:	d9e9      	bls.n	70002d36 <prvInitialiseNewTask+0x66>
70002d62:	e000      	b.n	70002d66 <prvInitialiseNewTask+0x96>
            {
                break;
70002d64:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
70002d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d68:	2200      	movs	r2, #0
70002d6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
70002d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70002d70:	2b37      	cmp	r3, #55	@ 0x37
70002d72:	d90b      	bls.n	70002d8c <prvInitialiseNewTask+0xbc>
        __asm volatile
70002d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
70002d78:	f383 8811 	msr	BASEPRI, r3
70002d7c:	f3bf 8f6f 	isb	sy
70002d80:	f3bf 8f4f 	dsb	sy
70002d84:	613b      	str	r3, [r7, #16]
    }
70002d86:	bf00      	nop
70002d88:	bf00      	nop
70002d8a:	e7fd      	b.n	70002d88 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
70002d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70002d8e:	2b37      	cmp	r3, #55	@ 0x37
70002d90:	d901      	bls.n	70002d96 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
70002d92:	2337      	movs	r3, #55	@ 0x37
70002d94:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
70002d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
70002d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
70002d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
70002da0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
70002da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002da4:	3304      	adds	r3, #4
70002da6:	4618      	mov	r0, r3
70002da8:	f7ff f950 	bl	7000204c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
70002dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002dae:	3318      	adds	r3, #24
70002db0:	4618      	mov	r0, r3
70002db2:	f7ff f94b 	bl	7000204c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
70002db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
70002dba:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
70002dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70002dbe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
70002dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002dc4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
70002dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
70002dca:	625a      	str	r2, [r3, #36]	@ 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
70002dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002dce:	3354      	adds	r3, #84	@ 0x54
70002dd0:	224c      	movs	r2, #76	@ 0x4c
70002dd2:	2100      	movs	r1, #0
70002dd4:	4618      	mov	r0, r3
70002dd6:	f001 f9f9 	bl	700041cc <memset>
70002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002ddc:	4a0c      	ldr	r2, [pc, #48]	@ (70002e10 <prvInitialiseNewTask+0x140>)
70002dde:	659a      	str	r2, [r3, #88]	@ 0x58
70002de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002de2:	4a0c      	ldr	r2, [pc, #48]	@ (70002e14 <prvInitialiseNewTask+0x144>)
70002de4:	65da      	str	r2, [r3, #92]	@ 0x5c
70002de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002de8:	4a0b      	ldr	r2, [pc, #44]	@ (70002e18 <prvInitialiseNewTask+0x148>)
70002dea:	661a      	str	r2, [r3, #96]	@ 0x60
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
70002dec:	683a      	ldr	r2, [r7, #0]
70002dee:	68f9      	ldr	r1, [r7, #12]
70002df0:	69b8      	ldr	r0, [r7, #24]
70002df2:	f7ff f99b 	bl	7000212c <pxPortInitialiseStack>
70002df6:	4602      	mov	r2, r0
70002df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002dfa:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
70002dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002dfe:	2b00      	cmp	r3, #0
70002e00:	d002      	beq.n	70002e08 <prvInitialiseNewTask+0x138>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
70002e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
70002e06:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
70002e08:	bf00      	nop
70002e0a:	3720      	adds	r7, #32
70002e0c:	46bd      	mov	sp, r7
70002e0e:	bd80      	pop	{r7, pc}
70002e10:	240050bc 	.word	0x240050bc
70002e14:	24005124 	.word	0x24005124
70002e18:	2400518c 	.word	0x2400518c

70002e1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
70002e1c:	b580      	push	{r7, lr}
70002e1e:	b084      	sub	sp, #16
70002e20:	af00      	add	r7, sp, #0
70002e22:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
70002e24:	f7ff fab2 	bl	7000238c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
70002e28:	4b41      	ldr	r3, [pc, #260]	@ (70002f30 <prvAddNewTaskToReadyList+0x114>)
70002e2a:	681b      	ldr	r3, [r3, #0]
70002e2c:	3301      	adds	r3, #1
70002e2e:	4a40      	ldr	r2, [pc, #256]	@ (70002f30 <prvAddNewTaskToReadyList+0x114>)
70002e30:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
70002e32:	4b40      	ldr	r3, [pc, #256]	@ (70002f34 <prvAddNewTaskToReadyList+0x118>)
70002e34:	681b      	ldr	r3, [r3, #0]
70002e36:	2b00      	cmp	r3, #0
70002e38:	d109      	bne.n	70002e4e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
70002e3a:	4a3e      	ldr	r2, [pc, #248]	@ (70002f34 <prvAddNewTaskToReadyList+0x118>)
70002e3c:	687b      	ldr	r3, [r7, #4]
70002e3e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
70002e40:	4b3b      	ldr	r3, [pc, #236]	@ (70002f30 <prvAddNewTaskToReadyList+0x114>)
70002e42:	681b      	ldr	r3, [r3, #0]
70002e44:	2b01      	cmp	r3, #1
70002e46:	d110      	bne.n	70002e6a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
70002e48:	f000 fdaa 	bl	700039a0 <prvInitialiseTaskLists>
70002e4c:	e00d      	b.n	70002e6a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
70002e4e:	4b3a      	ldr	r3, [pc, #232]	@ (70002f38 <prvAddNewTaskToReadyList+0x11c>)
70002e50:	681b      	ldr	r3, [r3, #0]
70002e52:	2b00      	cmp	r3, #0
70002e54:	d109      	bne.n	70002e6a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
70002e56:	4b37      	ldr	r3, [pc, #220]	@ (70002f34 <prvAddNewTaskToReadyList+0x118>)
70002e58:	681b      	ldr	r3, [r3, #0]
70002e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70002e5c:	687b      	ldr	r3, [r7, #4]
70002e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70002e60:	429a      	cmp	r2, r3
70002e62:	d802      	bhi.n	70002e6a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
70002e64:	4a33      	ldr	r2, [pc, #204]	@ (70002f34 <prvAddNewTaskToReadyList+0x118>)
70002e66:	687b      	ldr	r3, [r7, #4]
70002e68:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
70002e6a:	4b34      	ldr	r3, [pc, #208]	@ (70002f3c <prvAddNewTaskToReadyList+0x120>)
70002e6c:	681b      	ldr	r3, [r3, #0]
70002e6e:	3301      	adds	r3, #1
70002e70:	4a32      	ldr	r2, [pc, #200]	@ (70002f3c <prvAddNewTaskToReadyList+0x120>)
70002e72:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
70002e74:	4b31      	ldr	r3, [pc, #196]	@ (70002f3c <prvAddNewTaskToReadyList+0x120>)
70002e76:	681a      	ldr	r2, [r3, #0]
70002e78:	687b      	ldr	r3, [r7, #4]
70002e7a:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
70002e7c:	687b      	ldr	r3, [r7, #4]
70002e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70002e80:	4b2f      	ldr	r3, [pc, #188]	@ (70002f40 <prvAddNewTaskToReadyList+0x124>)
70002e82:	681b      	ldr	r3, [r3, #0]
70002e84:	429a      	cmp	r2, r3
70002e86:	d903      	bls.n	70002e90 <prvAddNewTaskToReadyList+0x74>
70002e88:	687b      	ldr	r3, [r7, #4]
70002e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70002e8c:	4a2c      	ldr	r2, [pc, #176]	@ (70002f40 <prvAddNewTaskToReadyList+0x124>)
70002e8e:	6013      	str	r3, [r2, #0]
70002e90:	687b      	ldr	r3, [r7, #4]
70002e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70002e94:	492b      	ldr	r1, [pc, #172]	@ (70002f44 <prvAddNewTaskToReadyList+0x128>)
70002e96:	4613      	mov	r3, r2
70002e98:	009b      	lsls	r3, r3, #2
70002e9a:	4413      	add	r3, r2
70002e9c:	009b      	lsls	r3, r3, #2
70002e9e:	440b      	add	r3, r1
70002ea0:	3304      	adds	r3, #4
70002ea2:	681b      	ldr	r3, [r3, #0]
70002ea4:	60fb      	str	r3, [r7, #12]
70002ea6:	687b      	ldr	r3, [r7, #4]
70002ea8:	68fa      	ldr	r2, [r7, #12]
70002eaa:	609a      	str	r2, [r3, #8]
70002eac:	68fb      	ldr	r3, [r7, #12]
70002eae:	689a      	ldr	r2, [r3, #8]
70002eb0:	687b      	ldr	r3, [r7, #4]
70002eb2:	60da      	str	r2, [r3, #12]
70002eb4:	68fb      	ldr	r3, [r7, #12]
70002eb6:	689b      	ldr	r3, [r3, #8]
70002eb8:	687a      	ldr	r2, [r7, #4]
70002eba:	3204      	adds	r2, #4
70002ebc:	605a      	str	r2, [r3, #4]
70002ebe:	687b      	ldr	r3, [r7, #4]
70002ec0:	1d1a      	adds	r2, r3, #4
70002ec2:	68fb      	ldr	r3, [r7, #12]
70002ec4:	609a      	str	r2, [r3, #8]
70002ec6:	687b      	ldr	r3, [r7, #4]
70002ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70002eca:	4613      	mov	r3, r2
70002ecc:	009b      	lsls	r3, r3, #2
70002ece:	4413      	add	r3, r2
70002ed0:	009b      	lsls	r3, r3, #2
70002ed2:	4a1c      	ldr	r2, [pc, #112]	@ (70002f44 <prvAddNewTaskToReadyList+0x128>)
70002ed4:	441a      	add	r2, r3
70002ed6:	687b      	ldr	r3, [r7, #4]
70002ed8:	615a      	str	r2, [r3, #20]
70002eda:	687b      	ldr	r3, [r7, #4]
70002edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70002ede:	4919      	ldr	r1, [pc, #100]	@ (70002f44 <prvAddNewTaskToReadyList+0x128>)
70002ee0:	4613      	mov	r3, r2
70002ee2:	009b      	lsls	r3, r3, #2
70002ee4:	4413      	add	r3, r2
70002ee6:	009b      	lsls	r3, r3, #2
70002ee8:	440b      	add	r3, r1
70002eea:	681b      	ldr	r3, [r3, #0]
70002eec:	1c59      	adds	r1, r3, #1
70002eee:	4815      	ldr	r0, [pc, #84]	@ (70002f44 <prvAddNewTaskToReadyList+0x128>)
70002ef0:	4613      	mov	r3, r2
70002ef2:	009b      	lsls	r3, r3, #2
70002ef4:	4413      	add	r3, r2
70002ef6:	009b      	lsls	r3, r3, #2
70002ef8:	4403      	add	r3, r0
70002efa:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
70002efc:	f7ff fa78 	bl	700023f0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
70002f00:	4b0d      	ldr	r3, [pc, #52]	@ (70002f38 <prvAddNewTaskToReadyList+0x11c>)
70002f02:	681b      	ldr	r3, [r3, #0]
70002f04:	2b00      	cmp	r3, #0
70002f06:	d00e      	beq.n	70002f26 <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
70002f08:	4b0a      	ldr	r3, [pc, #40]	@ (70002f34 <prvAddNewTaskToReadyList+0x118>)
70002f0a:	681b      	ldr	r3, [r3, #0]
70002f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70002f0e:	687b      	ldr	r3, [r7, #4]
70002f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70002f12:	429a      	cmp	r2, r3
70002f14:	d207      	bcs.n	70002f26 <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
70002f16:	4b0c      	ldr	r3, [pc, #48]	@ (70002f48 <prvAddNewTaskToReadyList+0x12c>)
70002f18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70002f1c:	601a      	str	r2, [r3, #0]
70002f1e:	f3bf 8f4f 	dsb	sy
70002f22:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
70002f26:	bf00      	nop
70002f28:	3710      	adds	r7, #16
70002f2a:	46bd      	mov	sp, r7
70002f2c:	bd80      	pop	{r7, pc}
70002f2e:	bf00      	nop
70002f30:	24004f64 	.word	0x24004f64
70002f34:	24004a90 	.word	0x24004a90
70002f38:	24004f70 	.word	0x24004f70
70002f3c:	24004f80 	.word	0x24004f80
70002f40:	24004f6c 	.word	0x24004f6c
70002f44:	24004a94 	.word	0x24004a94
70002f48:	e000ed04 	.word	0xe000ed04

70002f4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
70002f4c:	b580      	push	{r7, lr}
70002f4e:	b084      	sub	sp, #16
70002f50:	af00      	add	r7, sp, #0
70002f52:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
70002f54:	2300      	movs	r3, #0
70002f56:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
70002f58:	687b      	ldr	r3, [r7, #4]
70002f5a:	2b00      	cmp	r3, #0
70002f5c:	d018      	beq.n	70002f90 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
70002f5e:	4b14      	ldr	r3, [pc, #80]	@ (70002fb0 <vTaskDelay+0x64>)
70002f60:	681b      	ldr	r3, [r3, #0]
70002f62:	2b00      	cmp	r3, #0
70002f64:	d00b      	beq.n	70002f7e <vTaskDelay+0x32>
        __asm volatile
70002f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
70002f6a:	f383 8811 	msr	BASEPRI, r3
70002f6e:	f3bf 8f6f 	isb	sy
70002f72:	f3bf 8f4f 	dsb	sy
70002f76:	60bb      	str	r3, [r7, #8]
    }
70002f78:	bf00      	nop
70002f7a:	bf00      	nop
70002f7c:	e7fd      	b.n	70002f7a <vTaskDelay+0x2e>
            vTaskSuspendAll();
70002f7e:	f000 f88f 	bl	700030a0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
70002f82:	2100      	movs	r1, #0
70002f84:	6878      	ldr	r0, [r7, #4]
70002f86:	f000 fdeb 	bl	70003b60 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
70002f8a:	f000 f897 	bl	700030bc <xTaskResumeAll>
70002f8e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
70002f90:	68fb      	ldr	r3, [r7, #12]
70002f92:	2b00      	cmp	r3, #0
70002f94:	d107      	bne.n	70002fa6 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
70002f96:	4b07      	ldr	r3, [pc, #28]	@ (70002fb4 <vTaskDelay+0x68>)
70002f98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70002f9c:	601a      	str	r2, [r3, #0]
70002f9e:	f3bf 8f4f 	dsb	sy
70002fa2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
70002fa6:	bf00      	nop
70002fa8:	3710      	adds	r7, #16
70002faa:	46bd      	mov	sp, r7
70002fac:	bd80      	pop	{r7, pc}
70002fae:	bf00      	nop
70002fb0:	24004f8c 	.word	0x24004f8c
70002fb4:	e000ed04 	.word	0xe000ed04

70002fb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
70002fb8:	b580      	push	{r7, lr}
70002fba:	b08a      	sub	sp, #40	@ 0x28
70002fbc:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
70002fbe:	2300      	movs	r3, #0
70002fc0:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
70002fc2:	2300      	movs	r3, #0
70002fc4:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
70002fc6:	463a      	mov	r2, r7
70002fc8:	1d39      	adds	r1, r7, #4
70002fca:	f107 0308 	add.w	r3, r7, #8
70002fce:	4618      	mov	r0, r3
70002fd0:	f7fe fe18 	bl	70001c04 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
70002fd4:	6839      	ldr	r1, [r7, #0]
70002fd6:	687b      	ldr	r3, [r7, #4]
70002fd8:	68ba      	ldr	r2, [r7, #8]
70002fda:	9202      	str	r2, [sp, #8]
70002fdc:	9301      	str	r3, [sp, #4]
70002fde:	2300      	movs	r3, #0
70002fe0:	9300      	str	r3, [sp, #0]
70002fe2:	2300      	movs	r3, #0
70002fe4:	460a      	mov	r2, r1
70002fe6:	4925      	ldr	r1, [pc, #148]	@ (7000307c <vTaskStartScheduler+0xc4>)
70002fe8:	4825      	ldr	r0, [pc, #148]	@ (70003080 <vTaskStartScheduler+0xc8>)
70002fea:	f7ff fdc1 	bl	70002b70 <xTaskCreateStatic>
70002fee:	4603      	mov	r3, r0
70002ff0:	4a24      	ldr	r2, [pc, #144]	@ (70003084 <vTaskStartScheduler+0xcc>)
70002ff2:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
70002ff4:	4b23      	ldr	r3, [pc, #140]	@ (70003084 <vTaskStartScheduler+0xcc>)
70002ff6:	681b      	ldr	r3, [r3, #0]
70002ff8:	2b00      	cmp	r3, #0
70002ffa:	d002      	beq.n	70003002 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
70002ffc:	2301      	movs	r3, #1
70002ffe:	617b      	str	r3, [r7, #20]
70003000:	e001      	b.n	70003006 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
70003002:	2300      	movs	r3, #0
70003004:	617b      	str	r3, [r7, #20]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
70003006:	697b      	ldr	r3, [r7, #20]
70003008:	2b01      	cmp	r3, #1
7000300a:	d102      	bne.n	70003012 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
7000300c:	f000 fe16 	bl	70003c3c <xTimerCreateTimerTask>
70003010:	6178      	str	r0, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
70003012:	697b      	ldr	r3, [r7, #20]
70003014:	2b01      	cmp	r3, #1
70003016:	d11b      	bne.n	70003050 <vTaskStartScheduler+0x98>
        __asm volatile
70003018:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000301c:	f383 8811 	msr	BASEPRI, r3
70003020:	f3bf 8f6f 	isb	sy
70003024:	f3bf 8f4f 	dsb	sy
70003028:	613b      	str	r3, [r7, #16]
    }
7000302a:	bf00      	nop

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
7000302c:	4b16      	ldr	r3, [pc, #88]	@ (70003088 <vTaskStartScheduler+0xd0>)
7000302e:	681b      	ldr	r3, [r3, #0]
70003030:	3354      	adds	r3, #84	@ 0x54
70003032:	4a16      	ldr	r2, [pc, #88]	@ (7000308c <vTaskStartScheduler+0xd4>)
70003034:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
70003036:	4b16      	ldr	r3, [pc, #88]	@ (70003090 <vTaskStartScheduler+0xd8>)
70003038:	f04f 32ff 	mov.w	r2, #4294967295
7000303c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
7000303e:	4b15      	ldr	r3, [pc, #84]	@ (70003094 <vTaskStartScheduler+0xdc>)
70003040:	2201      	movs	r2, #1
70003042:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
70003044:	4b14      	ldr	r3, [pc, #80]	@ (70003098 <vTaskStartScheduler+0xe0>)
70003046:	2200      	movs	r2, #0
70003048:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
7000304a:	f7ff f8fb 	bl	70002244 <xPortStartScheduler>
7000304e:	e00f      	b.n	70003070 <vTaskStartScheduler+0xb8>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
70003050:	697b      	ldr	r3, [r7, #20]
70003052:	f1b3 3fff 	cmp.w	r3, #4294967295
70003056:	d10b      	bne.n	70003070 <vTaskStartScheduler+0xb8>
        __asm volatile
70003058:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000305c:	f383 8811 	msr	BASEPRI, r3
70003060:	f3bf 8f6f 	isb	sy
70003064:	f3bf 8f4f 	dsb	sy
70003068:	60fb      	str	r3, [r7, #12]
    }
7000306a:	bf00      	nop
7000306c:	bf00      	nop
7000306e:	e7fd      	b.n	7000306c <vTaskStartScheduler+0xb4>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
70003070:	4b0a      	ldr	r3, [pc, #40]	@ (7000309c <vTaskStartScheduler+0xe4>)
70003072:	681b      	ldr	r3, [r3, #0]
}
70003074:	bf00      	nop
70003076:	3718      	adds	r7, #24
70003078:	46bd      	mov	sp, r7
7000307a:	bd80      	pop	{r7, pc}
7000307c:	700043d4 	.word	0x700043d4
70003080:	70003971 	.word	0x70003971
70003084:	24004f88 	.word	0x24004f88
70003088:	24004a90 	.word	0x24004a90
7000308c:	24000014 	.word	0x24000014
70003090:	24004f84 	.word	0x24004f84
70003094:	24004f70 	.word	0x24004f70
70003098:	24004f68 	.word	0x24004f68
7000309c:	24000010 	.word	0x24000010

700030a0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
700030a0:	b480      	push	{r7}
700030a2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
700030a4:	4b04      	ldr	r3, [pc, #16]	@ (700030b8 <vTaskSuspendAll+0x18>)
700030a6:	681b      	ldr	r3, [r3, #0]
700030a8:	3301      	adds	r3, #1
700030aa:	4a03      	ldr	r2, [pc, #12]	@ (700030b8 <vTaskSuspendAll+0x18>)
700030ac:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
700030ae:	bf00      	nop
700030b0:	46bd      	mov	sp, r7
700030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
700030b6:	4770      	bx	lr
700030b8:	24004f8c 	.word	0x24004f8c

700030bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
700030bc:	b580      	push	{r7, lr}
700030be:	b088      	sub	sp, #32
700030c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
700030c2:	2300      	movs	r3, #0
700030c4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
700030c6:	2300      	movs	r3, #0
700030c8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
700030ca:	4b72      	ldr	r3, [pc, #456]	@ (70003294 <xTaskResumeAll+0x1d8>)
700030cc:	681b      	ldr	r3, [r3, #0]
700030ce:	2b00      	cmp	r3, #0
700030d0:	d10b      	bne.n	700030ea <xTaskResumeAll+0x2e>
        __asm volatile
700030d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
700030d6:	f383 8811 	msr	BASEPRI, r3
700030da:	f3bf 8f6f 	isb	sy
700030de:	f3bf 8f4f 	dsb	sy
700030e2:	607b      	str	r3, [r7, #4]
    }
700030e4:	bf00      	nop
700030e6:	bf00      	nop
700030e8:	e7fd      	b.n	700030e6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
700030ea:	f7ff f94f 	bl	7000238c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
700030ee:	4b69      	ldr	r3, [pc, #420]	@ (70003294 <xTaskResumeAll+0x1d8>)
700030f0:	681b      	ldr	r3, [r3, #0]
700030f2:	3b01      	subs	r3, #1
700030f4:	4a67      	ldr	r2, [pc, #412]	@ (70003294 <xTaskResumeAll+0x1d8>)
700030f6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
700030f8:	4b66      	ldr	r3, [pc, #408]	@ (70003294 <xTaskResumeAll+0x1d8>)
700030fa:	681b      	ldr	r3, [r3, #0]
700030fc:	2b00      	cmp	r3, #0
700030fe:	f040 80c1 	bne.w	70003284 <xTaskResumeAll+0x1c8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
70003102:	4b65      	ldr	r3, [pc, #404]	@ (70003298 <xTaskResumeAll+0x1dc>)
70003104:	681b      	ldr	r3, [r3, #0]
70003106:	2b00      	cmp	r3, #0
70003108:	f000 80bc 	beq.w	70003284 <xTaskResumeAll+0x1c8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
7000310c:	e08b      	b.n	70003226 <xTaskResumeAll+0x16a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
7000310e:	4b63      	ldr	r3, [pc, #396]	@ (7000329c <xTaskResumeAll+0x1e0>)
70003110:	68db      	ldr	r3, [r3, #12]
70003112:	68db      	ldr	r3, [r3, #12]
70003114:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
70003116:	69fb      	ldr	r3, [r7, #28]
70003118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
7000311a:	613b      	str	r3, [r7, #16]
7000311c:	69fb      	ldr	r3, [r7, #28]
7000311e:	69db      	ldr	r3, [r3, #28]
70003120:	69fa      	ldr	r2, [r7, #28]
70003122:	6a12      	ldr	r2, [r2, #32]
70003124:	609a      	str	r2, [r3, #8]
70003126:	69fb      	ldr	r3, [r7, #28]
70003128:	6a1b      	ldr	r3, [r3, #32]
7000312a:	69fa      	ldr	r2, [r7, #28]
7000312c:	69d2      	ldr	r2, [r2, #28]
7000312e:	605a      	str	r2, [r3, #4]
70003130:	693b      	ldr	r3, [r7, #16]
70003132:	685a      	ldr	r2, [r3, #4]
70003134:	69fb      	ldr	r3, [r7, #28]
70003136:	3318      	adds	r3, #24
70003138:	429a      	cmp	r2, r3
7000313a:	d103      	bne.n	70003144 <xTaskResumeAll+0x88>
7000313c:	69fb      	ldr	r3, [r7, #28]
7000313e:	6a1a      	ldr	r2, [r3, #32]
70003140:	693b      	ldr	r3, [r7, #16]
70003142:	605a      	str	r2, [r3, #4]
70003144:	69fb      	ldr	r3, [r7, #28]
70003146:	2200      	movs	r2, #0
70003148:	629a      	str	r2, [r3, #40]	@ 0x28
7000314a:	693b      	ldr	r3, [r7, #16]
7000314c:	681b      	ldr	r3, [r3, #0]
7000314e:	1e5a      	subs	r2, r3, #1
70003150:	693b      	ldr	r3, [r7, #16]
70003152:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
70003154:	69fb      	ldr	r3, [r7, #28]
70003156:	695b      	ldr	r3, [r3, #20]
70003158:	60fb      	str	r3, [r7, #12]
7000315a:	69fb      	ldr	r3, [r7, #28]
7000315c:	689b      	ldr	r3, [r3, #8]
7000315e:	69fa      	ldr	r2, [r7, #28]
70003160:	68d2      	ldr	r2, [r2, #12]
70003162:	609a      	str	r2, [r3, #8]
70003164:	69fb      	ldr	r3, [r7, #28]
70003166:	68db      	ldr	r3, [r3, #12]
70003168:	69fa      	ldr	r2, [r7, #28]
7000316a:	6892      	ldr	r2, [r2, #8]
7000316c:	605a      	str	r2, [r3, #4]
7000316e:	68fb      	ldr	r3, [r7, #12]
70003170:	685a      	ldr	r2, [r3, #4]
70003172:	69fb      	ldr	r3, [r7, #28]
70003174:	3304      	adds	r3, #4
70003176:	429a      	cmp	r2, r3
70003178:	d103      	bne.n	70003182 <xTaskResumeAll+0xc6>
7000317a:	69fb      	ldr	r3, [r7, #28]
7000317c:	68da      	ldr	r2, [r3, #12]
7000317e:	68fb      	ldr	r3, [r7, #12]
70003180:	605a      	str	r2, [r3, #4]
70003182:	69fb      	ldr	r3, [r7, #28]
70003184:	2200      	movs	r2, #0
70003186:	615a      	str	r2, [r3, #20]
70003188:	68fb      	ldr	r3, [r7, #12]
7000318a:	681b      	ldr	r3, [r3, #0]
7000318c:	1e5a      	subs	r2, r3, #1
7000318e:	68fb      	ldr	r3, [r7, #12]
70003190:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
70003192:	69fb      	ldr	r3, [r7, #28]
70003194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70003196:	4b42      	ldr	r3, [pc, #264]	@ (700032a0 <xTaskResumeAll+0x1e4>)
70003198:	681b      	ldr	r3, [r3, #0]
7000319a:	429a      	cmp	r2, r3
7000319c:	d903      	bls.n	700031a6 <xTaskResumeAll+0xea>
7000319e:	69fb      	ldr	r3, [r7, #28]
700031a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700031a2:	4a3f      	ldr	r2, [pc, #252]	@ (700032a0 <xTaskResumeAll+0x1e4>)
700031a4:	6013      	str	r3, [r2, #0]
700031a6:	69fb      	ldr	r3, [r7, #28]
700031a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700031aa:	493e      	ldr	r1, [pc, #248]	@ (700032a4 <xTaskResumeAll+0x1e8>)
700031ac:	4613      	mov	r3, r2
700031ae:	009b      	lsls	r3, r3, #2
700031b0:	4413      	add	r3, r2
700031b2:	009b      	lsls	r3, r3, #2
700031b4:	440b      	add	r3, r1
700031b6:	3304      	adds	r3, #4
700031b8:	681b      	ldr	r3, [r3, #0]
700031ba:	60bb      	str	r3, [r7, #8]
700031bc:	69fb      	ldr	r3, [r7, #28]
700031be:	68ba      	ldr	r2, [r7, #8]
700031c0:	609a      	str	r2, [r3, #8]
700031c2:	68bb      	ldr	r3, [r7, #8]
700031c4:	689a      	ldr	r2, [r3, #8]
700031c6:	69fb      	ldr	r3, [r7, #28]
700031c8:	60da      	str	r2, [r3, #12]
700031ca:	68bb      	ldr	r3, [r7, #8]
700031cc:	689b      	ldr	r3, [r3, #8]
700031ce:	69fa      	ldr	r2, [r7, #28]
700031d0:	3204      	adds	r2, #4
700031d2:	605a      	str	r2, [r3, #4]
700031d4:	69fb      	ldr	r3, [r7, #28]
700031d6:	1d1a      	adds	r2, r3, #4
700031d8:	68bb      	ldr	r3, [r7, #8]
700031da:	609a      	str	r2, [r3, #8]
700031dc:	69fb      	ldr	r3, [r7, #28]
700031de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700031e0:	4613      	mov	r3, r2
700031e2:	009b      	lsls	r3, r3, #2
700031e4:	4413      	add	r3, r2
700031e6:	009b      	lsls	r3, r3, #2
700031e8:	4a2e      	ldr	r2, [pc, #184]	@ (700032a4 <xTaskResumeAll+0x1e8>)
700031ea:	441a      	add	r2, r3
700031ec:	69fb      	ldr	r3, [r7, #28]
700031ee:	615a      	str	r2, [r3, #20]
700031f0:	69fb      	ldr	r3, [r7, #28]
700031f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700031f4:	492b      	ldr	r1, [pc, #172]	@ (700032a4 <xTaskResumeAll+0x1e8>)
700031f6:	4613      	mov	r3, r2
700031f8:	009b      	lsls	r3, r3, #2
700031fa:	4413      	add	r3, r2
700031fc:	009b      	lsls	r3, r3, #2
700031fe:	440b      	add	r3, r1
70003200:	681b      	ldr	r3, [r3, #0]
70003202:	1c59      	adds	r1, r3, #1
70003204:	4827      	ldr	r0, [pc, #156]	@ (700032a4 <xTaskResumeAll+0x1e8>)
70003206:	4613      	mov	r3, r2
70003208:	009b      	lsls	r3, r3, #2
7000320a:	4413      	add	r3, r2
7000320c:	009b      	lsls	r3, r3, #2
7000320e:	4403      	add	r3, r0
70003210:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
70003212:	69fb      	ldr	r3, [r7, #28]
70003214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70003216:	4b24      	ldr	r3, [pc, #144]	@ (700032a8 <xTaskResumeAll+0x1ec>)
70003218:	681b      	ldr	r3, [r3, #0]
7000321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000321c:	429a      	cmp	r2, r3
7000321e:	d302      	bcc.n	70003226 <xTaskResumeAll+0x16a>
                    {
                        xYieldPending = pdTRUE;
70003220:	4b22      	ldr	r3, [pc, #136]	@ (700032ac <xTaskResumeAll+0x1f0>)
70003222:	2201      	movs	r2, #1
70003224:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
70003226:	4b1d      	ldr	r3, [pc, #116]	@ (7000329c <xTaskResumeAll+0x1e0>)
70003228:	681b      	ldr	r3, [r3, #0]
7000322a:	2b00      	cmp	r3, #0
7000322c:	f47f af6f 	bne.w	7000310e <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
70003230:	69fb      	ldr	r3, [r7, #28]
70003232:	2b00      	cmp	r3, #0
70003234:	d001      	beq.n	7000323a <xTaskResumeAll+0x17e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
70003236:	f000 fc59 	bl	70003aec <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
7000323a:	4b1d      	ldr	r3, [pc, #116]	@ (700032b0 <xTaskResumeAll+0x1f4>)
7000323c:	681b      	ldr	r3, [r3, #0]
7000323e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
70003240:	697b      	ldr	r3, [r7, #20]
70003242:	2b00      	cmp	r3, #0
70003244:	d010      	beq.n	70003268 <xTaskResumeAll+0x1ac>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
70003246:	f000 f847 	bl	700032d8 <xTaskIncrementTick>
7000324a:	4603      	mov	r3, r0
7000324c:	2b00      	cmp	r3, #0
7000324e:	d002      	beq.n	70003256 <xTaskResumeAll+0x19a>
                            {
                                xYieldPending = pdTRUE;
70003250:	4b16      	ldr	r3, [pc, #88]	@ (700032ac <xTaskResumeAll+0x1f0>)
70003252:	2201      	movs	r2, #1
70003254:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
70003256:	697b      	ldr	r3, [r7, #20]
70003258:	3b01      	subs	r3, #1
7000325a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
7000325c:	697b      	ldr	r3, [r7, #20]
7000325e:	2b00      	cmp	r3, #0
70003260:	d1f1      	bne.n	70003246 <xTaskResumeAll+0x18a>

                        xPendedTicks = 0;
70003262:	4b13      	ldr	r3, [pc, #76]	@ (700032b0 <xTaskResumeAll+0x1f4>)
70003264:	2200      	movs	r2, #0
70003266:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
70003268:	4b10      	ldr	r3, [pc, #64]	@ (700032ac <xTaskResumeAll+0x1f0>)
7000326a:	681b      	ldr	r3, [r3, #0]
7000326c:	2b00      	cmp	r3, #0
7000326e:	d009      	beq.n	70003284 <xTaskResumeAll+0x1c8>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
70003270:	2301      	movs	r3, #1
70003272:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
70003274:	4b0f      	ldr	r3, [pc, #60]	@ (700032b4 <xTaskResumeAll+0x1f8>)
70003276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
7000327a:	601a      	str	r2, [r3, #0]
7000327c:	f3bf 8f4f 	dsb	sy
70003280:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
70003284:	f7ff f8b4 	bl	700023f0 <vPortExitCritical>

    return xAlreadyYielded;
70003288:	69bb      	ldr	r3, [r7, #24]
}
7000328a:	4618      	mov	r0, r3
7000328c:	3720      	adds	r7, #32
7000328e:	46bd      	mov	sp, r7
70003290:	bd80      	pop	{r7, pc}
70003292:	bf00      	nop
70003294:	24004f8c 	.word	0x24004f8c
70003298:	24004f64 	.word	0x24004f64
7000329c:	24004f24 	.word	0x24004f24
700032a0:	24004f6c 	.word	0x24004f6c
700032a4:	24004a94 	.word	0x24004a94
700032a8:	24004a90 	.word	0x24004a90
700032ac:	24004f78 	.word	0x24004f78
700032b0:	24004f74 	.word	0x24004f74
700032b4:	e000ed04 	.word	0xe000ed04

700032b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
700032b8:	b480      	push	{r7}
700032ba:	b083      	sub	sp, #12
700032bc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
700032be:	4b05      	ldr	r3, [pc, #20]	@ (700032d4 <xTaskGetTickCount+0x1c>)
700032c0:	681b      	ldr	r3, [r3, #0]
700032c2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
700032c4:	687b      	ldr	r3, [r7, #4]
}
700032c6:	4618      	mov	r0, r3
700032c8:	370c      	adds	r7, #12
700032ca:	46bd      	mov	sp, r7
700032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
700032d0:	4770      	bx	lr
700032d2:	bf00      	nop
700032d4:	24004f68 	.word	0x24004f68

700032d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
700032d8:	b580      	push	{r7, lr}
700032da:	b08a      	sub	sp, #40	@ 0x28
700032dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
700032de:	2300      	movs	r3, #0
700032e0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
700032e2:	4b7e      	ldr	r3, [pc, #504]	@ (700034dc <xTaskIncrementTick+0x204>)
700032e4:	681b      	ldr	r3, [r3, #0]
700032e6:	2b00      	cmp	r3, #0
700032e8:	f040 80ee 	bne.w	700034c8 <xTaskIncrementTick+0x1f0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
700032ec:	4b7c      	ldr	r3, [pc, #496]	@ (700034e0 <xTaskIncrementTick+0x208>)
700032ee:	681b      	ldr	r3, [r3, #0]
700032f0:	3301      	adds	r3, #1
700032f2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
700032f4:	4a7a      	ldr	r2, [pc, #488]	@ (700034e0 <xTaskIncrementTick+0x208>)
700032f6:	6a3b      	ldr	r3, [r7, #32]
700032f8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
700032fa:	6a3b      	ldr	r3, [r7, #32]
700032fc:	2b00      	cmp	r3, #0
700032fe:	d121      	bne.n	70003344 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
70003300:	4b78      	ldr	r3, [pc, #480]	@ (700034e4 <xTaskIncrementTick+0x20c>)
70003302:	681b      	ldr	r3, [r3, #0]
70003304:	681b      	ldr	r3, [r3, #0]
70003306:	2b00      	cmp	r3, #0
70003308:	d00b      	beq.n	70003322 <xTaskIncrementTick+0x4a>
        __asm volatile
7000330a:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000330e:	f383 8811 	msr	BASEPRI, r3
70003312:	f3bf 8f6f 	isb	sy
70003316:	f3bf 8f4f 	dsb	sy
7000331a:	607b      	str	r3, [r7, #4]
    }
7000331c:	bf00      	nop
7000331e:	bf00      	nop
70003320:	e7fd      	b.n	7000331e <xTaskIncrementTick+0x46>
70003322:	4b70      	ldr	r3, [pc, #448]	@ (700034e4 <xTaskIncrementTick+0x20c>)
70003324:	681b      	ldr	r3, [r3, #0]
70003326:	61fb      	str	r3, [r7, #28]
70003328:	4b6f      	ldr	r3, [pc, #444]	@ (700034e8 <xTaskIncrementTick+0x210>)
7000332a:	681b      	ldr	r3, [r3, #0]
7000332c:	4a6d      	ldr	r2, [pc, #436]	@ (700034e4 <xTaskIncrementTick+0x20c>)
7000332e:	6013      	str	r3, [r2, #0]
70003330:	4a6d      	ldr	r2, [pc, #436]	@ (700034e8 <xTaskIncrementTick+0x210>)
70003332:	69fb      	ldr	r3, [r7, #28]
70003334:	6013      	str	r3, [r2, #0]
70003336:	4b6d      	ldr	r3, [pc, #436]	@ (700034ec <xTaskIncrementTick+0x214>)
70003338:	681b      	ldr	r3, [r3, #0]
7000333a:	3301      	adds	r3, #1
7000333c:	4a6b      	ldr	r2, [pc, #428]	@ (700034ec <xTaskIncrementTick+0x214>)
7000333e:	6013      	str	r3, [r2, #0]
70003340:	f000 fbd4 	bl	70003aec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
70003344:	4b6a      	ldr	r3, [pc, #424]	@ (700034f0 <xTaskIncrementTick+0x218>)
70003346:	681b      	ldr	r3, [r3, #0]
70003348:	6a3a      	ldr	r2, [r7, #32]
7000334a:	429a      	cmp	r2, r3
7000334c:	f0c0 80a7 	bcc.w	7000349e <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
70003350:	4b64      	ldr	r3, [pc, #400]	@ (700034e4 <xTaskIncrementTick+0x20c>)
70003352:	681b      	ldr	r3, [r3, #0]
70003354:	681b      	ldr	r3, [r3, #0]
70003356:	2b00      	cmp	r3, #0
70003358:	d104      	bne.n	70003364 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
7000335a:	4b65      	ldr	r3, [pc, #404]	@ (700034f0 <xTaskIncrementTick+0x218>)
7000335c:	f04f 32ff 	mov.w	r2, #4294967295
70003360:	601a      	str	r2, [r3, #0]
                    break;
70003362:	e09c      	b.n	7000349e <xTaskIncrementTick+0x1c6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
70003364:	4b5f      	ldr	r3, [pc, #380]	@ (700034e4 <xTaskIncrementTick+0x20c>)
70003366:	681b      	ldr	r3, [r3, #0]
70003368:	68db      	ldr	r3, [r3, #12]
7000336a:	68db      	ldr	r3, [r3, #12]
7000336c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
7000336e:	69bb      	ldr	r3, [r7, #24]
70003370:	685b      	ldr	r3, [r3, #4]
70003372:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
70003374:	6a3a      	ldr	r2, [r7, #32]
70003376:	697b      	ldr	r3, [r7, #20]
70003378:	429a      	cmp	r2, r3
7000337a:	d203      	bcs.n	70003384 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
7000337c:	4a5c      	ldr	r2, [pc, #368]	@ (700034f0 <xTaskIncrementTick+0x218>)
7000337e:	697b      	ldr	r3, [r7, #20]
70003380:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
70003382:	e08c      	b.n	7000349e <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
70003384:	69bb      	ldr	r3, [r7, #24]
70003386:	695b      	ldr	r3, [r3, #20]
70003388:	613b      	str	r3, [r7, #16]
7000338a:	69bb      	ldr	r3, [r7, #24]
7000338c:	689b      	ldr	r3, [r3, #8]
7000338e:	69ba      	ldr	r2, [r7, #24]
70003390:	68d2      	ldr	r2, [r2, #12]
70003392:	609a      	str	r2, [r3, #8]
70003394:	69bb      	ldr	r3, [r7, #24]
70003396:	68db      	ldr	r3, [r3, #12]
70003398:	69ba      	ldr	r2, [r7, #24]
7000339a:	6892      	ldr	r2, [r2, #8]
7000339c:	605a      	str	r2, [r3, #4]
7000339e:	693b      	ldr	r3, [r7, #16]
700033a0:	685a      	ldr	r2, [r3, #4]
700033a2:	69bb      	ldr	r3, [r7, #24]
700033a4:	3304      	adds	r3, #4
700033a6:	429a      	cmp	r2, r3
700033a8:	d103      	bne.n	700033b2 <xTaskIncrementTick+0xda>
700033aa:	69bb      	ldr	r3, [r7, #24]
700033ac:	68da      	ldr	r2, [r3, #12]
700033ae:	693b      	ldr	r3, [r7, #16]
700033b0:	605a      	str	r2, [r3, #4]
700033b2:	69bb      	ldr	r3, [r7, #24]
700033b4:	2200      	movs	r2, #0
700033b6:	615a      	str	r2, [r3, #20]
700033b8:	693b      	ldr	r3, [r7, #16]
700033ba:	681b      	ldr	r3, [r3, #0]
700033bc:	1e5a      	subs	r2, r3, #1
700033be:	693b      	ldr	r3, [r7, #16]
700033c0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
700033c2:	69bb      	ldr	r3, [r7, #24]
700033c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
700033c6:	2b00      	cmp	r3, #0
700033c8:	d01e      	beq.n	70003408 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
700033ca:	69bb      	ldr	r3, [r7, #24]
700033cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
700033ce:	60fb      	str	r3, [r7, #12]
700033d0:	69bb      	ldr	r3, [r7, #24]
700033d2:	69db      	ldr	r3, [r3, #28]
700033d4:	69ba      	ldr	r2, [r7, #24]
700033d6:	6a12      	ldr	r2, [r2, #32]
700033d8:	609a      	str	r2, [r3, #8]
700033da:	69bb      	ldr	r3, [r7, #24]
700033dc:	6a1b      	ldr	r3, [r3, #32]
700033de:	69ba      	ldr	r2, [r7, #24]
700033e0:	69d2      	ldr	r2, [r2, #28]
700033e2:	605a      	str	r2, [r3, #4]
700033e4:	68fb      	ldr	r3, [r7, #12]
700033e6:	685a      	ldr	r2, [r3, #4]
700033e8:	69bb      	ldr	r3, [r7, #24]
700033ea:	3318      	adds	r3, #24
700033ec:	429a      	cmp	r2, r3
700033ee:	d103      	bne.n	700033f8 <xTaskIncrementTick+0x120>
700033f0:	69bb      	ldr	r3, [r7, #24]
700033f2:	6a1a      	ldr	r2, [r3, #32]
700033f4:	68fb      	ldr	r3, [r7, #12]
700033f6:	605a      	str	r2, [r3, #4]
700033f8:	69bb      	ldr	r3, [r7, #24]
700033fa:	2200      	movs	r2, #0
700033fc:	629a      	str	r2, [r3, #40]	@ 0x28
700033fe:	68fb      	ldr	r3, [r7, #12]
70003400:	681b      	ldr	r3, [r3, #0]
70003402:	1e5a      	subs	r2, r3, #1
70003404:	68fb      	ldr	r3, [r7, #12]
70003406:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
70003408:	69bb      	ldr	r3, [r7, #24]
7000340a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000340c:	4b39      	ldr	r3, [pc, #228]	@ (700034f4 <xTaskIncrementTick+0x21c>)
7000340e:	681b      	ldr	r3, [r3, #0]
70003410:	429a      	cmp	r2, r3
70003412:	d903      	bls.n	7000341c <xTaskIncrementTick+0x144>
70003414:	69bb      	ldr	r3, [r7, #24]
70003416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003418:	4a36      	ldr	r2, [pc, #216]	@ (700034f4 <xTaskIncrementTick+0x21c>)
7000341a:	6013      	str	r3, [r2, #0]
7000341c:	69bb      	ldr	r3, [r7, #24]
7000341e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70003420:	4935      	ldr	r1, [pc, #212]	@ (700034f8 <xTaskIncrementTick+0x220>)
70003422:	4613      	mov	r3, r2
70003424:	009b      	lsls	r3, r3, #2
70003426:	4413      	add	r3, r2
70003428:	009b      	lsls	r3, r3, #2
7000342a:	440b      	add	r3, r1
7000342c:	3304      	adds	r3, #4
7000342e:	681b      	ldr	r3, [r3, #0]
70003430:	60bb      	str	r3, [r7, #8]
70003432:	69bb      	ldr	r3, [r7, #24]
70003434:	68ba      	ldr	r2, [r7, #8]
70003436:	609a      	str	r2, [r3, #8]
70003438:	68bb      	ldr	r3, [r7, #8]
7000343a:	689a      	ldr	r2, [r3, #8]
7000343c:	69bb      	ldr	r3, [r7, #24]
7000343e:	60da      	str	r2, [r3, #12]
70003440:	68bb      	ldr	r3, [r7, #8]
70003442:	689b      	ldr	r3, [r3, #8]
70003444:	69ba      	ldr	r2, [r7, #24]
70003446:	3204      	adds	r2, #4
70003448:	605a      	str	r2, [r3, #4]
7000344a:	69bb      	ldr	r3, [r7, #24]
7000344c:	1d1a      	adds	r2, r3, #4
7000344e:	68bb      	ldr	r3, [r7, #8]
70003450:	609a      	str	r2, [r3, #8]
70003452:	69bb      	ldr	r3, [r7, #24]
70003454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70003456:	4613      	mov	r3, r2
70003458:	009b      	lsls	r3, r3, #2
7000345a:	4413      	add	r3, r2
7000345c:	009b      	lsls	r3, r3, #2
7000345e:	4a26      	ldr	r2, [pc, #152]	@ (700034f8 <xTaskIncrementTick+0x220>)
70003460:	441a      	add	r2, r3
70003462:	69bb      	ldr	r3, [r7, #24]
70003464:	615a      	str	r2, [r3, #20]
70003466:	69bb      	ldr	r3, [r7, #24]
70003468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000346a:	4923      	ldr	r1, [pc, #140]	@ (700034f8 <xTaskIncrementTick+0x220>)
7000346c:	4613      	mov	r3, r2
7000346e:	009b      	lsls	r3, r3, #2
70003470:	4413      	add	r3, r2
70003472:	009b      	lsls	r3, r3, #2
70003474:	440b      	add	r3, r1
70003476:	681b      	ldr	r3, [r3, #0]
70003478:	1c59      	adds	r1, r3, #1
7000347a:	481f      	ldr	r0, [pc, #124]	@ (700034f8 <xTaskIncrementTick+0x220>)
7000347c:	4613      	mov	r3, r2
7000347e:	009b      	lsls	r3, r3, #2
70003480:	4413      	add	r3, r2
70003482:	009b      	lsls	r3, r3, #2
70003484:	4403      	add	r3, r0
70003486:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
70003488:	69bb      	ldr	r3, [r7, #24]
7000348a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000348c:	4b1b      	ldr	r3, [pc, #108]	@ (700034fc <xTaskIncrementTick+0x224>)
7000348e:	681b      	ldr	r3, [r3, #0]
70003490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003492:	429a      	cmp	r2, r3
70003494:	f67f af5c 	bls.w	70003350 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
70003498:	2301      	movs	r3, #1
7000349a:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
7000349c:	e758      	b.n	70003350 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
7000349e:	4b17      	ldr	r3, [pc, #92]	@ (700034fc <xTaskIncrementTick+0x224>)
700034a0:	681b      	ldr	r3, [r3, #0]
700034a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700034a4:	4914      	ldr	r1, [pc, #80]	@ (700034f8 <xTaskIncrementTick+0x220>)
700034a6:	4613      	mov	r3, r2
700034a8:	009b      	lsls	r3, r3, #2
700034aa:	4413      	add	r3, r2
700034ac:	009b      	lsls	r3, r3, #2
700034ae:	440b      	add	r3, r1
700034b0:	681b      	ldr	r3, [r3, #0]
700034b2:	2b01      	cmp	r3, #1
700034b4:	d901      	bls.n	700034ba <xTaskIncrementTick+0x1e2>
            {
                xSwitchRequired = pdTRUE;
700034b6:	2301      	movs	r3, #1
700034b8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
700034ba:	4b11      	ldr	r3, [pc, #68]	@ (70003500 <xTaskIncrementTick+0x228>)
700034bc:	681b      	ldr	r3, [r3, #0]
700034be:	2b00      	cmp	r3, #0
700034c0:	d007      	beq.n	700034d2 <xTaskIncrementTick+0x1fa>
            {
                xSwitchRequired = pdTRUE;
700034c2:	2301      	movs	r3, #1
700034c4:	627b      	str	r3, [r7, #36]	@ 0x24
700034c6:	e004      	b.n	700034d2 <xTaskIncrementTick+0x1fa>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
700034c8:	4b0e      	ldr	r3, [pc, #56]	@ (70003504 <xTaskIncrementTick+0x22c>)
700034ca:	681b      	ldr	r3, [r3, #0]
700034cc:	3301      	adds	r3, #1
700034ce:	4a0d      	ldr	r2, [pc, #52]	@ (70003504 <xTaskIncrementTick+0x22c>)
700034d0:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
700034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
700034d4:	4618      	mov	r0, r3
700034d6:	3728      	adds	r7, #40	@ 0x28
700034d8:	46bd      	mov	sp, r7
700034da:	bd80      	pop	{r7, pc}
700034dc:	24004f8c 	.word	0x24004f8c
700034e0:	24004f68 	.word	0x24004f68
700034e4:	24004f1c 	.word	0x24004f1c
700034e8:	24004f20 	.word	0x24004f20
700034ec:	24004f7c 	.word	0x24004f7c
700034f0:	24004f84 	.word	0x24004f84
700034f4:	24004f6c 	.word	0x24004f6c
700034f8:	24004a94 	.word	0x24004a94
700034fc:	24004a90 	.word	0x24004a90
70003500:	24004f78 	.word	0x24004f78
70003504:	24004f74 	.word	0x24004f74

70003508 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
70003508:	b480      	push	{r7}
7000350a:	b085      	sub	sp, #20
7000350c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
7000350e:	4b2b      	ldr	r3, [pc, #172]	@ (700035bc <vTaskSwitchContext+0xb4>)
70003510:	681b      	ldr	r3, [r3, #0]
70003512:	2b00      	cmp	r3, #0
70003514:	d003      	beq.n	7000351e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
70003516:	4b2a      	ldr	r3, [pc, #168]	@ (700035c0 <vTaskSwitchContext+0xb8>)
70003518:	2201      	movs	r2, #1
7000351a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
7000351c:	e047      	b.n	700035ae <vTaskSwitchContext+0xa6>
        xYieldPending = pdFALSE;
7000351e:	4b28      	ldr	r3, [pc, #160]	@ (700035c0 <vTaskSwitchContext+0xb8>)
70003520:	2200      	movs	r2, #0
70003522:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
70003524:	4b27      	ldr	r3, [pc, #156]	@ (700035c4 <vTaskSwitchContext+0xbc>)
70003526:	681b      	ldr	r3, [r3, #0]
70003528:	60fb      	str	r3, [r7, #12]
7000352a:	e011      	b.n	70003550 <vTaskSwitchContext+0x48>
7000352c:	68fb      	ldr	r3, [r7, #12]
7000352e:	2b00      	cmp	r3, #0
70003530:	d10b      	bne.n	7000354a <vTaskSwitchContext+0x42>
        __asm volatile
70003532:	f04f 0350 	mov.w	r3, #80	@ 0x50
70003536:	f383 8811 	msr	BASEPRI, r3
7000353a:	f3bf 8f6f 	isb	sy
7000353e:	f3bf 8f4f 	dsb	sy
70003542:	607b      	str	r3, [r7, #4]
    }
70003544:	bf00      	nop
70003546:	bf00      	nop
70003548:	e7fd      	b.n	70003546 <vTaskSwitchContext+0x3e>
7000354a:	68fb      	ldr	r3, [r7, #12]
7000354c:	3b01      	subs	r3, #1
7000354e:	60fb      	str	r3, [r7, #12]
70003550:	491d      	ldr	r1, [pc, #116]	@ (700035c8 <vTaskSwitchContext+0xc0>)
70003552:	68fa      	ldr	r2, [r7, #12]
70003554:	4613      	mov	r3, r2
70003556:	009b      	lsls	r3, r3, #2
70003558:	4413      	add	r3, r2
7000355a:	009b      	lsls	r3, r3, #2
7000355c:	440b      	add	r3, r1
7000355e:	681b      	ldr	r3, [r3, #0]
70003560:	2b00      	cmp	r3, #0
70003562:	d0e3      	beq.n	7000352c <vTaskSwitchContext+0x24>
70003564:	68fa      	ldr	r2, [r7, #12]
70003566:	4613      	mov	r3, r2
70003568:	009b      	lsls	r3, r3, #2
7000356a:	4413      	add	r3, r2
7000356c:	009b      	lsls	r3, r3, #2
7000356e:	4a16      	ldr	r2, [pc, #88]	@ (700035c8 <vTaskSwitchContext+0xc0>)
70003570:	4413      	add	r3, r2
70003572:	60bb      	str	r3, [r7, #8]
70003574:	68bb      	ldr	r3, [r7, #8]
70003576:	685b      	ldr	r3, [r3, #4]
70003578:	685a      	ldr	r2, [r3, #4]
7000357a:	68bb      	ldr	r3, [r7, #8]
7000357c:	605a      	str	r2, [r3, #4]
7000357e:	68bb      	ldr	r3, [r7, #8]
70003580:	685a      	ldr	r2, [r3, #4]
70003582:	68bb      	ldr	r3, [r7, #8]
70003584:	3308      	adds	r3, #8
70003586:	429a      	cmp	r2, r3
70003588:	d104      	bne.n	70003594 <vTaskSwitchContext+0x8c>
7000358a:	68bb      	ldr	r3, [r7, #8]
7000358c:	685b      	ldr	r3, [r3, #4]
7000358e:	685a      	ldr	r2, [r3, #4]
70003590:	68bb      	ldr	r3, [r7, #8]
70003592:	605a      	str	r2, [r3, #4]
70003594:	68bb      	ldr	r3, [r7, #8]
70003596:	685b      	ldr	r3, [r3, #4]
70003598:	68db      	ldr	r3, [r3, #12]
7000359a:	4a0c      	ldr	r2, [pc, #48]	@ (700035cc <vTaskSwitchContext+0xc4>)
7000359c:	6013      	str	r3, [r2, #0]
7000359e:	4a09      	ldr	r2, [pc, #36]	@ (700035c4 <vTaskSwitchContext+0xbc>)
700035a0:	68fb      	ldr	r3, [r7, #12]
700035a2:	6013      	str	r3, [r2, #0]
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
700035a4:	4b09      	ldr	r3, [pc, #36]	@ (700035cc <vTaskSwitchContext+0xc4>)
700035a6:	681b      	ldr	r3, [r3, #0]
700035a8:	3354      	adds	r3, #84	@ 0x54
700035aa:	4a09      	ldr	r2, [pc, #36]	@ (700035d0 <vTaskSwitchContext+0xc8>)
700035ac:	6013      	str	r3, [r2, #0]
}
700035ae:	bf00      	nop
700035b0:	3714      	adds	r7, #20
700035b2:	46bd      	mov	sp, r7
700035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
700035b8:	4770      	bx	lr
700035ba:	bf00      	nop
700035bc:	24004f8c 	.word	0x24004f8c
700035c0:	24004f78 	.word	0x24004f78
700035c4:	24004f6c 	.word	0x24004f6c
700035c8:	24004a94 	.word	0x24004a94
700035cc:	24004a90 	.word	0x24004a90
700035d0:	24000014 	.word	0x24000014

700035d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
700035d4:	b580      	push	{r7, lr}
700035d6:	b084      	sub	sp, #16
700035d8:	af00      	add	r7, sp, #0
700035da:	6078      	str	r0, [r7, #4]
700035dc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
700035de:	687b      	ldr	r3, [r7, #4]
700035e0:	2b00      	cmp	r3, #0
700035e2:	d10b      	bne.n	700035fc <vTaskPlaceOnEventList+0x28>
        __asm volatile
700035e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
700035e8:	f383 8811 	msr	BASEPRI, r3
700035ec:	f3bf 8f6f 	isb	sy
700035f0:	f3bf 8f4f 	dsb	sy
700035f4:	60fb      	str	r3, [r7, #12]
    }
700035f6:	bf00      	nop
700035f8:	bf00      	nop
700035fa:	e7fd      	b.n	700035f8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
700035fc:	4b07      	ldr	r3, [pc, #28]	@ (7000361c <vTaskPlaceOnEventList+0x48>)
700035fe:	681b      	ldr	r3, [r3, #0]
70003600:	3318      	adds	r3, #24
70003602:	4619      	mov	r1, r3
70003604:	6878      	ldr	r0, [r7, #4]
70003606:	f7fe fd2e 	bl	70002066 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
7000360a:	2101      	movs	r1, #1
7000360c:	6838      	ldr	r0, [r7, #0]
7000360e:	f000 faa7 	bl	70003b60 <prvAddCurrentTaskToDelayedList>
}
70003612:	bf00      	nop
70003614:	3710      	adds	r7, #16
70003616:	46bd      	mov	sp, r7
70003618:	bd80      	pop	{r7, pc}
7000361a:	bf00      	nop
7000361c:	24004a90 	.word	0x24004a90

70003620 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
70003620:	b580      	push	{r7, lr}
70003622:	b086      	sub	sp, #24
70003624:	af00      	add	r7, sp, #0
70003626:	60f8      	str	r0, [r7, #12]
70003628:	60b9      	str	r1, [r7, #8]
7000362a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
7000362c:	68fb      	ldr	r3, [r7, #12]
7000362e:	2b00      	cmp	r3, #0
70003630:	d10b      	bne.n	7000364a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
70003632:	f04f 0350 	mov.w	r3, #80	@ 0x50
70003636:	f383 8811 	msr	BASEPRI, r3
7000363a:	f3bf 8f6f 	isb	sy
7000363e:	f3bf 8f4f 	dsb	sy
70003642:	613b      	str	r3, [r7, #16]
    }
70003644:	bf00      	nop
70003646:	bf00      	nop
70003648:	e7fd      	b.n	70003646 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
7000364a:	68fb      	ldr	r3, [r7, #12]
7000364c:	685b      	ldr	r3, [r3, #4]
7000364e:	617b      	str	r3, [r7, #20]
70003650:	4b15      	ldr	r3, [pc, #84]	@ (700036a8 <vTaskPlaceOnEventListRestricted+0x88>)
70003652:	681b      	ldr	r3, [r3, #0]
70003654:	697a      	ldr	r2, [r7, #20]
70003656:	61da      	str	r2, [r3, #28]
70003658:	4b13      	ldr	r3, [pc, #76]	@ (700036a8 <vTaskPlaceOnEventListRestricted+0x88>)
7000365a:	681b      	ldr	r3, [r3, #0]
7000365c:	697a      	ldr	r2, [r7, #20]
7000365e:	6892      	ldr	r2, [r2, #8]
70003660:	621a      	str	r2, [r3, #32]
70003662:	4b11      	ldr	r3, [pc, #68]	@ (700036a8 <vTaskPlaceOnEventListRestricted+0x88>)
70003664:	681a      	ldr	r2, [r3, #0]
70003666:	697b      	ldr	r3, [r7, #20]
70003668:	689b      	ldr	r3, [r3, #8]
7000366a:	3218      	adds	r2, #24
7000366c:	605a      	str	r2, [r3, #4]
7000366e:	4b0e      	ldr	r3, [pc, #56]	@ (700036a8 <vTaskPlaceOnEventListRestricted+0x88>)
70003670:	681b      	ldr	r3, [r3, #0]
70003672:	f103 0218 	add.w	r2, r3, #24
70003676:	697b      	ldr	r3, [r7, #20]
70003678:	609a      	str	r2, [r3, #8]
7000367a:	4b0b      	ldr	r3, [pc, #44]	@ (700036a8 <vTaskPlaceOnEventListRestricted+0x88>)
7000367c:	681b      	ldr	r3, [r3, #0]
7000367e:	68fa      	ldr	r2, [r7, #12]
70003680:	629a      	str	r2, [r3, #40]	@ 0x28
70003682:	68fb      	ldr	r3, [r7, #12]
70003684:	681b      	ldr	r3, [r3, #0]
70003686:	1c5a      	adds	r2, r3, #1
70003688:	68fb      	ldr	r3, [r7, #12]
7000368a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
7000368c:	687b      	ldr	r3, [r7, #4]
7000368e:	2b00      	cmp	r3, #0
70003690:	d002      	beq.n	70003698 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
70003692:	f04f 33ff 	mov.w	r3, #4294967295
70003696:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
70003698:	6879      	ldr	r1, [r7, #4]
7000369a:	68b8      	ldr	r0, [r7, #8]
7000369c:	f000 fa60 	bl	70003b60 <prvAddCurrentTaskToDelayedList>
    }
700036a0:	bf00      	nop
700036a2:	3718      	adds	r7, #24
700036a4:	46bd      	mov	sp, r7
700036a6:	bd80      	pop	{r7, pc}
700036a8:	24004a90 	.word	0x24004a90

700036ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
700036ac:	b480      	push	{r7}
700036ae:	b08b      	sub	sp, #44	@ 0x2c
700036b0:	af00      	add	r7, sp, #0
700036b2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
700036b4:	687b      	ldr	r3, [r7, #4]
700036b6:	68db      	ldr	r3, [r3, #12]
700036b8:	68db      	ldr	r3, [r3, #12]
700036ba:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
700036bc:	6a3b      	ldr	r3, [r7, #32]
700036be:	2b00      	cmp	r3, #0
700036c0:	d10b      	bne.n	700036da <xTaskRemoveFromEventList+0x2e>
        __asm volatile
700036c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
700036c6:	f383 8811 	msr	BASEPRI, r3
700036ca:	f3bf 8f6f 	isb	sy
700036ce:	f3bf 8f4f 	dsb	sy
700036d2:	60fb      	str	r3, [r7, #12]
    }
700036d4:	bf00      	nop
700036d6:	bf00      	nop
700036d8:	e7fd      	b.n	700036d6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
700036da:	6a3b      	ldr	r3, [r7, #32]
700036dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
700036de:	61fb      	str	r3, [r7, #28]
700036e0:	6a3b      	ldr	r3, [r7, #32]
700036e2:	69db      	ldr	r3, [r3, #28]
700036e4:	6a3a      	ldr	r2, [r7, #32]
700036e6:	6a12      	ldr	r2, [r2, #32]
700036e8:	609a      	str	r2, [r3, #8]
700036ea:	6a3b      	ldr	r3, [r7, #32]
700036ec:	6a1b      	ldr	r3, [r3, #32]
700036ee:	6a3a      	ldr	r2, [r7, #32]
700036f0:	69d2      	ldr	r2, [r2, #28]
700036f2:	605a      	str	r2, [r3, #4]
700036f4:	69fb      	ldr	r3, [r7, #28]
700036f6:	685a      	ldr	r2, [r3, #4]
700036f8:	6a3b      	ldr	r3, [r7, #32]
700036fa:	3318      	adds	r3, #24
700036fc:	429a      	cmp	r2, r3
700036fe:	d103      	bne.n	70003708 <xTaskRemoveFromEventList+0x5c>
70003700:	6a3b      	ldr	r3, [r7, #32]
70003702:	6a1a      	ldr	r2, [r3, #32]
70003704:	69fb      	ldr	r3, [r7, #28]
70003706:	605a      	str	r2, [r3, #4]
70003708:	6a3b      	ldr	r3, [r7, #32]
7000370a:	2200      	movs	r2, #0
7000370c:	629a      	str	r2, [r3, #40]	@ 0x28
7000370e:	69fb      	ldr	r3, [r7, #28]
70003710:	681b      	ldr	r3, [r3, #0]
70003712:	1e5a      	subs	r2, r3, #1
70003714:	69fb      	ldr	r3, [r7, #28]
70003716:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
70003718:	4b4a      	ldr	r3, [pc, #296]	@ (70003844 <xTaskRemoveFromEventList+0x198>)
7000371a:	681b      	ldr	r3, [r3, #0]
7000371c:	2b00      	cmp	r3, #0
7000371e:	d15f      	bne.n	700037e0 <xTaskRemoveFromEventList+0x134>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
70003720:	6a3b      	ldr	r3, [r7, #32]
70003722:	695b      	ldr	r3, [r3, #20]
70003724:	617b      	str	r3, [r7, #20]
70003726:	6a3b      	ldr	r3, [r7, #32]
70003728:	689b      	ldr	r3, [r3, #8]
7000372a:	6a3a      	ldr	r2, [r7, #32]
7000372c:	68d2      	ldr	r2, [r2, #12]
7000372e:	609a      	str	r2, [r3, #8]
70003730:	6a3b      	ldr	r3, [r7, #32]
70003732:	68db      	ldr	r3, [r3, #12]
70003734:	6a3a      	ldr	r2, [r7, #32]
70003736:	6892      	ldr	r2, [r2, #8]
70003738:	605a      	str	r2, [r3, #4]
7000373a:	697b      	ldr	r3, [r7, #20]
7000373c:	685a      	ldr	r2, [r3, #4]
7000373e:	6a3b      	ldr	r3, [r7, #32]
70003740:	3304      	adds	r3, #4
70003742:	429a      	cmp	r2, r3
70003744:	d103      	bne.n	7000374e <xTaskRemoveFromEventList+0xa2>
70003746:	6a3b      	ldr	r3, [r7, #32]
70003748:	68da      	ldr	r2, [r3, #12]
7000374a:	697b      	ldr	r3, [r7, #20]
7000374c:	605a      	str	r2, [r3, #4]
7000374e:	6a3b      	ldr	r3, [r7, #32]
70003750:	2200      	movs	r2, #0
70003752:	615a      	str	r2, [r3, #20]
70003754:	697b      	ldr	r3, [r7, #20]
70003756:	681b      	ldr	r3, [r3, #0]
70003758:	1e5a      	subs	r2, r3, #1
7000375a:	697b      	ldr	r3, [r7, #20]
7000375c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
7000375e:	6a3b      	ldr	r3, [r7, #32]
70003760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70003762:	4b39      	ldr	r3, [pc, #228]	@ (70003848 <xTaskRemoveFromEventList+0x19c>)
70003764:	681b      	ldr	r3, [r3, #0]
70003766:	429a      	cmp	r2, r3
70003768:	d903      	bls.n	70003772 <xTaskRemoveFromEventList+0xc6>
7000376a:	6a3b      	ldr	r3, [r7, #32]
7000376c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000376e:	4a36      	ldr	r2, [pc, #216]	@ (70003848 <xTaskRemoveFromEventList+0x19c>)
70003770:	6013      	str	r3, [r2, #0]
70003772:	6a3b      	ldr	r3, [r7, #32]
70003774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70003776:	4935      	ldr	r1, [pc, #212]	@ (7000384c <xTaskRemoveFromEventList+0x1a0>)
70003778:	4613      	mov	r3, r2
7000377a:	009b      	lsls	r3, r3, #2
7000377c:	4413      	add	r3, r2
7000377e:	009b      	lsls	r3, r3, #2
70003780:	440b      	add	r3, r1
70003782:	3304      	adds	r3, #4
70003784:	681b      	ldr	r3, [r3, #0]
70003786:	613b      	str	r3, [r7, #16]
70003788:	6a3b      	ldr	r3, [r7, #32]
7000378a:	693a      	ldr	r2, [r7, #16]
7000378c:	609a      	str	r2, [r3, #8]
7000378e:	693b      	ldr	r3, [r7, #16]
70003790:	689a      	ldr	r2, [r3, #8]
70003792:	6a3b      	ldr	r3, [r7, #32]
70003794:	60da      	str	r2, [r3, #12]
70003796:	693b      	ldr	r3, [r7, #16]
70003798:	689b      	ldr	r3, [r3, #8]
7000379a:	6a3a      	ldr	r2, [r7, #32]
7000379c:	3204      	adds	r2, #4
7000379e:	605a      	str	r2, [r3, #4]
700037a0:	6a3b      	ldr	r3, [r7, #32]
700037a2:	1d1a      	adds	r2, r3, #4
700037a4:	693b      	ldr	r3, [r7, #16]
700037a6:	609a      	str	r2, [r3, #8]
700037a8:	6a3b      	ldr	r3, [r7, #32]
700037aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700037ac:	4613      	mov	r3, r2
700037ae:	009b      	lsls	r3, r3, #2
700037b0:	4413      	add	r3, r2
700037b2:	009b      	lsls	r3, r3, #2
700037b4:	4a25      	ldr	r2, [pc, #148]	@ (7000384c <xTaskRemoveFromEventList+0x1a0>)
700037b6:	441a      	add	r2, r3
700037b8:	6a3b      	ldr	r3, [r7, #32]
700037ba:	615a      	str	r2, [r3, #20]
700037bc:	6a3b      	ldr	r3, [r7, #32]
700037be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700037c0:	4922      	ldr	r1, [pc, #136]	@ (7000384c <xTaskRemoveFromEventList+0x1a0>)
700037c2:	4613      	mov	r3, r2
700037c4:	009b      	lsls	r3, r3, #2
700037c6:	4413      	add	r3, r2
700037c8:	009b      	lsls	r3, r3, #2
700037ca:	440b      	add	r3, r1
700037cc:	681b      	ldr	r3, [r3, #0]
700037ce:	1c59      	adds	r1, r3, #1
700037d0:	481e      	ldr	r0, [pc, #120]	@ (7000384c <xTaskRemoveFromEventList+0x1a0>)
700037d2:	4613      	mov	r3, r2
700037d4:	009b      	lsls	r3, r3, #2
700037d6:	4413      	add	r3, r2
700037d8:	009b      	lsls	r3, r3, #2
700037da:	4403      	add	r3, r0
700037dc:	6019      	str	r1, [r3, #0]
700037de:	e01b      	b.n	70003818 <xTaskRemoveFromEventList+0x16c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
700037e0:	4b1b      	ldr	r3, [pc, #108]	@ (70003850 <xTaskRemoveFromEventList+0x1a4>)
700037e2:	685b      	ldr	r3, [r3, #4]
700037e4:	61bb      	str	r3, [r7, #24]
700037e6:	6a3b      	ldr	r3, [r7, #32]
700037e8:	69ba      	ldr	r2, [r7, #24]
700037ea:	61da      	str	r2, [r3, #28]
700037ec:	69bb      	ldr	r3, [r7, #24]
700037ee:	689a      	ldr	r2, [r3, #8]
700037f0:	6a3b      	ldr	r3, [r7, #32]
700037f2:	621a      	str	r2, [r3, #32]
700037f4:	69bb      	ldr	r3, [r7, #24]
700037f6:	689b      	ldr	r3, [r3, #8]
700037f8:	6a3a      	ldr	r2, [r7, #32]
700037fa:	3218      	adds	r2, #24
700037fc:	605a      	str	r2, [r3, #4]
700037fe:	6a3b      	ldr	r3, [r7, #32]
70003800:	f103 0218 	add.w	r2, r3, #24
70003804:	69bb      	ldr	r3, [r7, #24]
70003806:	609a      	str	r2, [r3, #8]
70003808:	6a3b      	ldr	r3, [r7, #32]
7000380a:	4a11      	ldr	r2, [pc, #68]	@ (70003850 <xTaskRemoveFromEventList+0x1a4>)
7000380c:	629a      	str	r2, [r3, #40]	@ 0x28
7000380e:	4b10      	ldr	r3, [pc, #64]	@ (70003850 <xTaskRemoveFromEventList+0x1a4>)
70003810:	681b      	ldr	r3, [r3, #0]
70003812:	3301      	adds	r3, #1
70003814:	4a0e      	ldr	r2, [pc, #56]	@ (70003850 <xTaskRemoveFromEventList+0x1a4>)
70003816:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
70003818:	6a3b      	ldr	r3, [r7, #32]
7000381a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000381c:	4b0d      	ldr	r3, [pc, #52]	@ (70003854 <xTaskRemoveFromEventList+0x1a8>)
7000381e:	681b      	ldr	r3, [r3, #0]
70003820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003822:	429a      	cmp	r2, r3
70003824:	d905      	bls.n	70003832 <xTaskRemoveFromEventList+0x186>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
70003826:	2301      	movs	r3, #1
70003828:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
7000382a:	4b0b      	ldr	r3, [pc, #44]	@ (70003858 <xTaskRemoveFromEventList+0x1ac>)
7000382c:	2201      	movs	r2, #1
7000382e:	601a      	str	r2, [r3, #0]
70003830:	e001      	b.n	70003836 <xTaskRemoveFromEventList+0x18a>
    }
    else
    {
        xReturn = pdFALSE;
70003832:	2300      	movs	r3, #0
70003834:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
70003836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
70003838:	4618      	mov	r0, r3
7000383a:	372c      	adds	r7, #44	@ 0x2c
7000383c:	46bd      	mov	sp, r7
7000383e:	f85d 7b04 	ldr.w	r7, [sp], #4
70003842:	4770      	bx	lr
70003844:	24004f8c 	.word	0x24004f8c
70003848:	24004f6c 	.word	0x24004f6c
7000384c:	24004a94 	.word	0x24004a94
70003850:	24004f24 	.word	0x24004f24
70003854:	24004a90 	.word	0x24004a90
70003858:	24004f78 	.word	0x24004f78

7000385c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
7000385c:	b480      	push	{r7}
7000385e:	b083      	sub	sp, #12
70003860:	af00      	add	r7, sp, #0
70003862:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
70003864:	4b06      	ldr	r3, [pc, #24]	@ (70003880 <vTaskInternalSetTimeOutState+0x24>)
70003866:	681a      	ldr	r2, [r3, #0]
70003868:	687b      	ldr	r3, [r7, #4]
7000386a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
7000386c:	4b05      	ldr	r3, [pc, #20]	@ (70003884 <vTaskInternalSetTimeOutState+0x28>)
7000386e:	681a      	ldr	r2, [r3, #0]
70003870:	687b      	ldr	r3, [r7, #4]
70003872:	605a      	str	r2, [r3, #4]
}
70003874:	bf00      	nop
70003876:	370c      	adds	r7, #12
70003878:	46bd      	mov	sp, r7
7000387a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000387e:	4770      	bx	lr
70003880:	24004f7c 	.word	0x24004f7c
70003884:	24004f68 	.word	0x24004f68

70003888 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
70003888:	b580      	push	{r7, lr}
7000388a:	b088      	sub	sp, #32
7000388c:	af00      	add	r7, sp, #0
7000388e:	6078      	str	r0, [r7, #4]
70003890:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
70003892:	687b      	ldr	r3, [r7, #4]
70003894:	2b00      	cmp	r3, #0
70003896:	d10b      	bne.n	700038b0 <xTaskCheckForTimeOut+0x28>
        __asm volatile
70003898:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000389c:	f383 8811 	msr	BASEPRI, r3
700038a0:	f3bf 8f6f 	isb	sy
700038a4:	f3bf 8f4f 	dsb	sy
700038a8:	613b      	str	r3, [r7, #16]
    }
700038aa:	bf00      	nop
700038ac:	bf00      	nop
700038ae:	e7fd      	b.n	700038ac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
700038b0:	683b      	ldr	r3, [r7, #0]
700038b2:	2b00      	cmp	r3, #0
700038b4:	d10b      	bne.n	700038ce <xTaskCheckForTimeOut+0x46>
        __asm volatile
700038b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
700038ba:	f383 8811 	msr	BASEPRI, r3
700038be:	f3bf 8f6f 	isb	sy
700038c2:	f3bf 8f4f 	dsb	sy
700038c6:	60fb      	str	r3, [r7, #12]
    }
700038c8:	bf00      	nop
700038ca:	bf00      	nop
700038cc:	e7fd      	b.n	700038ca <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
700038ce:	f7fe fd5d 	bl	7000238c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
700038d2:	4b1f      	ldr	r3, [pc, #124]	@ (70003950 <xTaskCheckForTimeOut+0xc8>)
700038d4:	681b      	ldr	r3, [r3, #0]
700038d6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
700038d8:	687b      	ldr	r3, [r7, #4]
700038da:	685b      	ldr	r3, [r3, #4]
700038dc:	69ba      	ldr	r2, [r7, #24]
700038de:	1ad3      	subs	r3, r2, r3
700038e0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
700038e2:	683b      	ldr	r3, [r7, #0]
700038e4:	681b      	ldr	r3, [r3, #0]
700038e6:	f1b3 3fff 	cmp.w	r3, #4294967295
700038ea:	d102      	bne.n	700038f2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
700038ec:	2300      	movs	r3, #0
700038ee:	61fb      	str	r3, [r7, #28]
700038f0:	e026      	b.n	70003940 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
700038f2:	687b      	ldr	r3, [r7, #4]
700038f4:	681a      	ldr	r2, [r3, #0]
700038f6:	4b17      	ldr	r3, [pc, #92]	@ (70003954 <xTaskCheckForTimeOut+0xcc>)
700038f8:	681b      	ldr	r3, [r3, #0]
700038fa:	429a      	cmp	r2, r3
700038fc:	d00a      	beq.n	70003914 <xTaskCheckForTimeOut+0x8c>
700038fe:	687b      	ldr	r3, [r7, #4]
70003900:	685b      	ldr	r3, [r3, #4]
70003902:	69ba      	ldr	r2, [r7, #24]
70003904:	429a      	cmp	r2, r3
70003906:	d305      	bcc.n	70003914 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
70003908:	2301      	movs	r3, #1
7000390a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
7000390c:	683b      	ldr	r3, [r7, #0]
7000390e:	2200      	movs	r2, #0
70003910:	601a      	str	r2, [r3, #0]
70003912:	e015      	b.n	70003940 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
70003914:	683b      	ldr	r3, [r7, #0]
70003916:	681b      	ldr	r3, [r3, #0]
70003918:	697a      	ldr	r2, [r7, #20]
7000391a:	429a      	cmp	r2, r3
7000391c:	d20b      	bcs.n	70003936 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
7000391e:	683b      	ldr	r3, [r7, #0]
70003920:	681a      	ldr	r2, [r3, #0]
70003922:	697b      	ldr	r3, [r7, #20]
70003924:	1ad2      	subs	r2, r2, r3
70003926:	683b      	ldr	r3, [r7, #0]
70003928:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
7000392a:	6878      	ldr	r0, [r7, #4]
7000392c:	f7ff ff96 	bl	7000385c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
70003930:	2300      	movs	r3, #0
70003932:	61fb      	str	r3, [r7, #28]
70003934:	e004      	b.n	70003940 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
70003936:	683b      	ldr	r3, [r7, #0]
70003938:	2200      	movs	r2, #0
7000393a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
7000393c:	2301      	movs	r3, #1
7000393e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
70003940:	f7fe fd56 	bl	700023f0 <vPortExitCritical>

    return xReturn;
70003944:	69fb      	ldr	r3, [r7, #28]
}
70003946:	4618      	mov	r0, r3
70003948:	3720      	adds	r7, #32
7000394a:	46bd      	mov	sp, r7
7000394c:	bd80      	pop	{r7, pc}
7000394e:	bf00      	nop
70003950:	24004f68 	.word	0x24004f68
70003954:	24004f7c 	.word	0x24004f7c

70003958 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
70003958:	b480      	push	{r7}
7000395a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
7000395c:	4b03      	ldr	r3, [pc, #12]	@ (7000396c <vTaskMissedYield+0x14>)
7000395e:	2201      	movs	r2, #1
70003960:	601a      	str	r2, [r3, #0]
}
70003962:	bf00      	nop
70003964:	46bd      	mov	sp, r7
70003966:	f85d 7b04 	ldr.w	r7, [sp], #4
7000396a:	4770      	bx	lr
7000396c:	24004f78 	.word	0x24004f78

70003970 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
70003970:	b580      	push	{r7, lr}
70003972:	b082      	sub	sp, #8
70003974:	af00      	add	r7, sp, #0
70003976:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
70003978:	f000 f852 	bl	70003a20 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
7000397c:	4b06      	ldr	r3, [pc, #24]	@ (70003998 <prvIdleTask+0x28>)
7000397e:	681b      	ldr	r3, [r3, #0]
70003980:	2b01      	cmp	r3, #1
70003982:	d9f9      	bls.n	70003978 <prvIdleTask+0x8>
            {
                taskYIELD();
70003984:	4b05      	ldr	r3, [pc, #20]	@ (7000399c <prvIdleTask+0x2c>)
70003986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
7000398a:	601a      	str	r2, [r3, #0]
7000398c:	f3bf 8f4f 	dsb	sy
70003990:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
70003994:	e7f0      	b.n	70003978 <prvIdleTask+0x8>
70003996:	bf00      	nop
70003998:	24004a94 	.word	0x24004a94
7000399c:	e000ed04 	.word	0xe000ed04

700039a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
700039a0:	b580      	push	{r7, lr}
700039a2:	b082      	sub	sp, #8
700039a4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
700039a6:	2300      	movs	r3, #0
700039a8:	607b      	str	r3, [r7, #4]
700039aa:	e00c      	b.n	700039c6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
700039ac:	687a      	ldr	r2, [r7, #4]
700039ae:	4613      	mov	r3, r2
700039b0:	009b      	lsls	r3, r3, #2
700039b2:	4413      	add	r3, r2
700039b4:	009b      	lsls	r3, r3, #2
700039b6:	4a12      	ldr	r2, [pc, #72]	@ (70003a00 <prvInitialiseTaskLists+0x60>)
700039b8:	4413      	add	r3, r2
700039ba:	4618      	mov	r0, r3
700039bc:	f7fe fb26 	bl	7000200c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
700039c0:	687b      	ldr	r3, [r7, #4]
700039c2:	3301      	adds	r3, #1
700039c4:	607b      	str	r3, [r7, #4]
700039c6:	687b      	ldr	r3, [r7, #4]
700039c8:	2b37      	cmp	r3, #55	@ 0x37
700039ca:	d9ef      	bls.n	700039ac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
700039cc:	480d      	ldr	r0, [pc, #52]	@ (70003a04 <prvInitialiseTaskLists+0x64>)
700039ce:	f7fe fb1d 	bl	7000200c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
700039d2:	480d      	ldr	r0, [pc, #52]	@ (70003a08 <prvInitialiseTaskLists+0x68>)
700039d4:	f7fe fb1a 	bl	7000200c <vListInitialise>
    vListInitialise( &xPendingReadyList );
700039d8:	480c      	ldr	r0, [pc, #48]	@ (70003a0c <prvInitialiseTaskLists+0x6c>)
700039da:	f7fe fb17 	bl	7000200c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
700039de:	480c      	ldr	r0, [pc, #48]	@ (70003a10 <prvInitialiseTaskLists+0x70>)
700039e0:	f7fe fb14 	bl	7000200c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
700039e4:	480b      	ldr	r0, [pc, #44]	@ (70003a14 <prvInitialiseTaskLists+0x74>)
700039e6:	f7fe fb11 	bl	7000200c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
700039ea:	4b0b      	ldr	r3, [pc, #44]	@ (70003a18 <prvInitialiseTaskLists+0x78>)
700039ec:	4a05      	ldr	r2, [pc, #20]	@ (70003a04 <prvInitialiseTaskLists+0x64>)
700039ee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
700039f0:	4b0a      	ldr	r3, [pc, #40]	@ (70003a1c <prvInitialiseTaskLists+0x7c>)
700039f2:	4a05      	ldr	r2, [pc, #20]	@ (70003a08 <prvInitialiseTaskLists+0x68>)
700039f4:	601a      	str	r2, [r3, #0]
}
700039f6:	bf00      	nop
700039f8:	3708      	adds	r7, #8
700039fa:	46bd      	mov	sp, r7
700039fc:	bd80      	pop	{r7, pc}
700039fe:	bf00      	nop
70003a00:	24004a94 	.word	0x24004a94
70003a04:	24004ef4 	.word	0x24004ef4
70003a08:	24004f08 	.word	0x24004f08
70003a0c:	24004f24 	.word	0x24004f24
70003a10:	24004f38 	.word	0x24004f38
70003a14:	24004f50 	.word	0x24004f50
70003a18:	24004f1c 	.word	0x24004f1c
70003a1c:	24004f20 	.word	0x24004f20

70003a20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
70003a20:	b580      	push	{r7, lr}
70003a22:	b082      	sub	sp, #8
70003a24:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
70003a26:	e019      	b.n	70003a5c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
70003a28:	f7fe fcb0 	bl	7000238c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
70003a2c:	4b10      	ldr	r3, [pc, #64]	@ (70003a70 <prvCheckTasksWaitingTermination+0x50>)
70003a2e:	68db      	ldr	r3, [r3, #12]
70003a30:	68db      	ldr	r3, [r3, #12]
70003a32:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
70003a34:	687b      	ldr	r3, [r7, #4]
70003a36:	3304      	adds	r3, #4
70003a38:	4618      	mov	r0, r3
70003a3a:	f7fe fb4d 	bl	700020d8 <uxListRemove>
                --uxCurrentNumberOfTasks;
70003a3e:	4b0d      	ldr	r3, [pc, #52]	@ (70003a74 <prvCheckTasksWaitingTermination+0x54>)
70003a40:	681b      	ldr	r3, [r3, #0]
70003a42:	3b01      	subs	r3, #1
70003a44:	4a0b      	ldr	r2, [pc, #44]	@ (70003a74 <prvCheckTasksWaitingTermination+0x54>)
70003a46:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
70003a48:	4b0b      	ldr	r3, [pc, #44]	@ (70003a78 <prvCheckTasksWaitingTermination+0x58>)
70003a4a:	681b      	ldr	r3, [r3, #0]
70003a4c:	3b01      	subs	r3, #1
70003a4e:	4a0a      	ldr	r2, [pc, #40]	@ (70003a78 <prvCheckTasksWaitingTermination+0x58>)
70003a50:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
70003a52:	f7fe fccd 	bl	700023f0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
70003a56:	6878      	ldr	r0, [r7, #4]
70003a58:	f000 f810 	bl	70003a7c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
70003a5c:	4b06      	ldr	r3, [pc, #24]	@ (70003a78 <prvCheckTasksWaitingTermination+0x58>)
70003a5e:	681b      	ldr	r3, [r3, #0]
70003a60:	2b00      	cmp	r3, #0
70003a62:	d1e1      	bne.n	70003a28 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
70003a64:	bf00      	nop
70003a66:	bf00      	nop
70003a68:	3708      	adds	r7, #8
70003a6a:	46bd      	mov	sp, r7
70003a6c:	bd80      	pop	{r7, pc}
70003a6e:	bf00      	nop
70003a70:	24004f38 	.word	0x24004f38
70003a74:	24004f64 	.word	0x24004f64
70003a78:	24004f4c 	.word	0x24004f4c

70003a7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
70003a7c:	b580      	push	{r7, lr}
70003a7e:	b084      	sub	sp, #16
70003a80:	af00      	add	r7, sp, #0
70003a82:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
70003a84:	4b18      	ldr	r3, [pc, #96]	@ (70003ae8 <prvDeleteTCB+0x6c>)
70003a86:	681b      	ldr	r3, [r3, #0]
70003a88:	3354      	adds	r3, #84	@ 0x54
70003a8a:	4618      	mov	r0, r3
70003a8c:	f000 fba6 	bl	700041dc <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
70003a90:	687b      	ldr	r3, [r7, #4]
70003a92:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
70003a96:	2b00      	cmp	r3, #0
70003a98:	d108      	bne.n	70003aac <prvDeleteTCB+0x30>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
70003a9a:	687b      	ldr	r3, [r7, #4]
70003a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70003a9e:	4618      	mov	r0, r3
70003aa0:	f7fe f9a0 	bl	70001de4 <vPortFree>
                vPortFree( pxTCB );
70003aa4:	6878      	ldr	r0, [r7, #4]
70003aa6:	f7fe f99d 	bl	70001de4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
70003aaa:	e019      	b.n	70003ae0 <prvDeleteTCB+0x64>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
70003aac:	687b      	ldr	r3, [r7, #4]
70003aae:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
70003ab2:	2b01      	cmp	r3, #1
70003ab4:	d103      	bne.n	70003abe <prvDeleteTCB+0x42>
                vPortFree( pxTCB );
70003ab6:	6878      	ldr	r0, [r7, #4]
70003ab8:	f7fe f994 	bl	70001de4 <vPortFree>
    }
70003abc:	e010      	b.n	70003ae0 <prvDeleteTCB+0x64>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
70003abe:	687b      	ldr	r3, [r7, #4]
70003ac0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
70003ac4:	2b02      	cmp	r3, #2
70003ac6:	d00b      	beq.n	70003ae0 <prvDeleteTCB+0x64>
        __asm volatile
70003ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
70003acc:	f383 8811 	msr	BASEPRI, r3
70003ad0:	f3bf 8f6f 	isb	sy
70003ad4:	f3bf 8f4f 	dsb	sy
70003ad8:	60fb      	str	r3, [r7, #12]
    }
70003ada:	bf00      	nop
70003adc:	bf00      	nop
70003ade:	e7fd      	b.n	70003adc <prvDeleteTCB+0x60>
    }
70003ae0:	bf00      	nop
70003ae2:	3710      	adds	r7, #16
70003ae4:	46bd      	mov	sp, r7
70003ae6:	bd80      	pop	{r7, pc}
70003ae8:	24004a90 	.word	0x24004a90

70003aec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
70003aec:	b480      	push	{r7}
70003aee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
70003af0:	4b0a      	ldr	r3, [pc, #40]	@ (70003b1c <prvResetNextTaskUnblockTime+0x30>)
70003af2:	681b      	ldr	r3, [r3, #0]
70003af4:	681b      	ldr	r3, [r3, #0]
70003af6:	2b00      	cmp	r3, #0
70003af8:	d104      	bne.n	70003b04 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
70003afa:	4b09      	ldr	r3, [pc, #36]	@ (70003b20 <prvResetNextTaskUnblockTime+0x34>)
70003afc:	f04f 32ff 	mov.w	r2, #4294967295
70003b00:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
70003b02:	e005      	b.n	70003b10 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
70003b04:	4b05      	ldr	r3, [pc, #20]	@ (70003b1c <prvResetNextTaskUnblockTime+0x30>)
70003b06:	681b      	ldr	r3, [r3, #0]
70003b08:	68db      	ldr	r3, [r3, #12]
70003b0a:	681b      	ldr	r3, [r3, #0]
70003b0c:	4a04      	ldr	r2, [pc, #16]	@ (70003b20 <prvResetNextTaskUnblockTime+0x34>)
70003b0e:	6013      	str	r3, [r2, #0]
}
70003b10:	bf00      	nop
70003b12:	46bd      	mov	sp, r7
70003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
70003b18:	4770      	bx	lr
70003b1a:	bf00      	nop
70003b1c:	24004f1c 	.word	0x24004f1c
70003b20:	24004f84 	.word	0x24004f84

70003b24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
70003b24:	b480      	push	{r7}
70003b26:	b083      	sub	sp, #12
70003b28:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
70003b2a:	4b0b      	ldr	r3, [pc, #44]	@ (70003b58 <xTaskGetSchedulerState+0x34>)
70003b2c:	681b      	ldr	r3, [r3, #0]
70003b2e:	2b00      	cmp	r3, #0
70003b30:	d102      	bne.n	70003b38 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
70003b32:	2301      	movs	r3, #1
70003b34:	607b      	str	r3, [r7, #4]
70003b36:	e008      	b.n	70003b4a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
70003b38:	4b08      	ldr	r3, [pc, #32]	@ (70003b5c <xTaskGetSchedulerState+0x38>)
70003b3a:	681b      	ldr	r3, [r3, #0]
70003b3c:	2b00      	cmp	r3, #0
70003b3e:	d102      	bne.n	70003b46 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
70003b40:	2302      	movs	r3, #2
70003b42:	607b      	str	r3, [r7, #4]
70003b44:	e001      	b.n	70003b4a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
70003b46:	2300      	movs	r3, #0
70003b48:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
70003b4a:	687b      	ldr	r3, [r7, #4]
    }
70003b4c:	4618      	mov	r0, r3
70003b4e:	370c      	adds	r7, #12
70003b50:	46bd      	mov	sp, r7
70003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
70003b56:	4770      	bx	lr
70003b58:	24004f70 	.word	0x24004f70
70003b5c:	24004f8c 	.word	0x24004f8c

70003b60 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
70003b60:	b580      	push	{r7, lr}
70003b62:	b086      	sub	sp, #24
70003b64:	af00      	add	r7, sp, #0
70003b66:	6078      	str	r0, [r7, #4]
70003b68:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
70003b6a:	4b2e      	ldr	r3, [pc, #184]	@ (70003c24 <prvAddCurrentTaskToDelayedList+0xc4>)
70003b6c:	681b      	ldr	r3, [r3, #0]
70003b6e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
70003b70:	4b2d      	ldr	r3, [pc, #180]	@ (70003c28 <prvAddCurrentTaskToDelayedList+0xc8>)
70003b72:	681b      	ldr	r3, [r3, #0]
70003b74:	3304      	adds	r3, #4
70003b76:	4618      	mov	r0, r3
70003b78:	f7fe faae 	bl	700020d8 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
70003b7c:	687b      	ldr	r3, [r7, #4]
70003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
70003b82:	d124      	bne.n	70003bce <prvAddCurrentTaskToDelayedList+0x6e>
70003b84:	683b      	ldr	r3, [r7, #0]
70003b86:	2b00      	cmp	r3, #0
70003b88:	d021      	beq.n	70003bce <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
70003b8a:	4b28      	ldr	r3, [pc, #160]	@ (70003c2c <prvAddCurrentTaskToDelayedList+0xcc>)
70003b8c:	685b      	ldr	r3, [r3, #4]
70003b8e:	613b      	str	r3, [r7, #16]
70003b90:	4b25      	ldr	r3, [pc, #148]	@ (70003c28 <prvAddCurrentTaskToDelayedList+0xc8>)
70003b92:	681b      	ldr	r3, [r3, #0]
70003b94:	693a      	ldr	r2, [r7, #16]
70003b96:	609a      	str	r2, [r3, #8]
70003b98:	4b23      	ldr	r3, [pc, #140]	@ (70003c28 <prvAddCurrentTaskToDelayedList+0xc8>)
70003b9a:	681b      	ldr	r3, [r3, #0]
70003b9c:	693a      	ldr	r2, [r7, #16]
70003b9e:	6892      	ldr	r2, [r2, #8]
70003ba0:	60da      	str	r2, [r3, #12]
70003ba2:	4b21      	ldr	r3, [pc, #132]	@ (70003c28 <prvAddCurrentTaskToDelayedList+0xc8>)
70003ba4:	681a      	ldr	r2, [r3, #0]
70003ba6:	693b      	ldr	r3, [r7, #16]
70003ba8:	689b      	ldr	r3, [r3, #8]
70003baa:	3204      	adds	r2, #4
70003bac:	605a      	str	r2, [r3, #4]
70003bae:	4b1e      	ldr	r3, [pc, #120]	@ (70003c28 <prvAddCurrentTaskToDelayedList+0xc8>)
70003bb0:	681b      	ldr	r3, [r3, #0]
70003bb2:	1d1a      	adds	r2, r3, #4
70003bb4:	693b      	ldr	r3, [r7, #16]
70003bb6:	609a      	str	r2, [r3, #8]
70003bb8:	4b1b      	ldr	r3, [pc, #108]	@ (70003c28 <prvAddCurrentTaskToDelayedList+0xc8>)
70003bba:	681b      	ldr	r3, [r3, #0]
70003bbc:	4a1b      	ldr	r2, [pc, #108]	@ (70003c2c <prvAddCurrentTaskToDelayedList+0xcc>)
70003bbe:	615a      	str	r2, [r3, #20]
70003bc0:	4b1a      	ldr	r3, [pc, #104]	@ (70003c2c <prvAddCurrentTaskToDelayedList+0xcc>)
70003bc2:	681b      	ldr	r3, [r3, #0]
70003bc4:	3301      	adds	r3, #1
70003bc6:	4a19      	ldr	r2, [pc, #100]	@ (70003c2c <prvAddCurrentTaskToDelayedList+0xcc>)
70003bc8:	6013      	str	r3, [r2, #0]
70003bca:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
70003bcc:	e026      	b.n	70003c1c <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
70003bce:	697a      	ldr	r2, [r7, #20]
70003bd0:	687b      	ldr	r3, [r7, #4]
70003bd2:	4413      	add	r3, r2
70003bd4:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
70003bd6:	4b14      	ldr	r3, [pc, #80]	@ (70003c28 <prvAddCurrentTaskToDelayedList+0xc8>)
70003bd8:	681b      	ldr	r3, [r3, #0]
70003bda:	68fa      	ldr	r2, [r7, #12]
70003bdc:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
70003bde:	68fa      	ldr	r2, [r7, #12]
70003be0:	697b      	ldr	r3, [r7, #20]
70003be2:	429a      	cmp	r2, r3
70003be4:	d209      	bcs.n	70003bfa <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
70003be6:	4b12      	ldr	r3, [pc, #72]	@ (70003c30 <prvAddCurrentTaskToDelayedList+0xd0>)
70003be8:	681a      	ldr	r2, [r3, #0]
70003bea:	4b0f      	ldr	r3, [pc, #60]	@ (70003c28 <prvAddCurrentTaskToDelayedList+0xc8>)
70003bec:	681b      	ldr	r3, [r3, #0]
70003bee:	3304      	adds	r3, #4
70003bf0:	4619      	mov	r1, r3
70003bf2:	4610      	mov	r0, r2
70003bf4:	f7fe fa37 	bl	70002066 <vListInsert>
}
70003bf8:	e010      	b.n	70003c1c <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
70003bfa:	4b0e      	ldr	r3, [pc, #56]	@ (70003c34 <prvAddCurrentTaskToDelayedList+0xd4>)
70003bfc:	681a      	ldr	r2, [r3, #0]
70003bfe:	4b0a      	ldr	r3, [pc, #40]	@ (70003c28 <prvAddCurrentTaskToDelayedList+0xc8>)
70003c00:	681b      	ldr	r3, [r3, #0]
70003c02:	3304      	adds	r3, #4
70003c04:	4619      	mov	r1, r3
70003c06:	4610      	mov	r0, r2
70003c08:	f7fe fa2d 	bl	70002066 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
70003c0c:	4b0a      	ldr	r3, [pc, #40]	@ (70003c38 <prvAddCurrentTaskToDelayedList+0xd8>)
70003c0e:	681b      	ldr	r3, [r3, #0]
70003c10:	68fa      	ldr	r2, [r7, #12]
70003c12:	429a      	cmp	r2, r3
70003c14:	d202      	bcs.n	70003c1c <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
70003c16:	4a08      	ldr	r2, [pc, #32]	@ (70003c38 <prvAddCurrentTaskToDelayedList+0xd8>)
70003c18:	68fb      	ldr	r3, [r7, #12]
70003c1a:	6013      	str	r3, [r2, #0]
}
70003c1c:	bf00      	nop
70003c1e:	3718      	adds	r7, #24
70003c20:	46bd      	mov	sp, r7
70003c22:	bd80      	pop	{r7, pc}
70003c24:	24004f68 	.word	0x24004f68
70003c28:	24004a90 	.word	0x24004a90
70003c2c:	24004f50 	.word	0x24004f50
70003c30:	24004f20 	.word	0x24004f20
70003c34:	24004f1c 	.word	0x24004f1c
70003c38:	24004f84 	.word	0x24004f84

70003c3c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
70003c3c:	b580      	push	{r7, lr}
70003c3e:	b08a      	sub	sp, #40	@ 0x28
70003c40:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
70003c42:	2300      	movs	r3, #0
70003c44:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
70003c46:	f000 fa81 	bl	7000414c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
70003c4a:	4b1d      	ldr	r3, [pc, #116]	@ (70003cc0 <xTimerCreateTimerTask+0x84>)
70003c4c:	681b      	ldr	r3, [r3, #0]
70003c4e:	2b00      	cmp	r3, #0
70003c50:	d021      	beq.n	70003c96 <xTimerCreateTimerTask+0x5a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
70003c52:	2300      	movs	r3, #0
70003c54:	60fb      	str	r3, [r7, #12]
                StackType_t * pxTimerTaskStackBuffer = NULL;
70003c56:	2300      	movs	r3, #0
70003c58:	60bb      	str	r3, [r7, #8]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
70003c5a:	1d3a      	adds	r2, r7, #4
70003c5c:	f107 0108 	add.w	r1, r7, #8
70003c60:	f107 030c 	add.w	r3, r7, #12
70003c64:	4618      	mov	r0, r3
70003c66:	f7fd ffe7 	bl	70001c38 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
70003c6a:	6879      	ldr	r1, [r7, #4]
70003c6c:	68bb      	ldr	r3, [r7, #8]
70003c6e:	68fa      	ldr	r2, [r7, #12]
70003c70:	9202      	str	r2, [sp, #8]
70003c72:	9301      	str	r3, [sp, #4]
70003c74:	2302      	movs	r3, #2
70003c76:	9300      	str	r3, [sp, #0]
70003c78:	2300      	movs	r3, #0
70003c7a:	460a      	mov	r2, r1
70003c7c:	4911      	ldr	r1, [pc, #68]	@ (70003cc4 <xTimerCreateTimerTask+0x88>)
70003c7e:	4812      	ldr	r0, [pc, #72]	@ (70003cc8 <xTimerCreateTimerTask+0x8c>)
70003c80:	f7fe ff76 	bl	70002b70 <xTaskCreateStatic>
70003c84:	4603      	mov	r3, r0
70003c86:	4a11      	ldr	r2, [pc, #68]	@ (70003ccc <xTimerCreateTimerTask+0x90>)
70003c88:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
70003c8a:	4b10      	ldr	r3, [pc, #64]	@ (70003ccc <xTimerCreateTimerTask+0x90>)
70003c8c:	681b      	ldr	r3, [r3, #0]
70003c8e:	2b00      	cmp	r3, #0
70003c90:	d001      	beq.n	70003c96 <xTimerCreateTimerTask+0x5a>
                {
                    xReturn = pdPASS;
70003c92:	2301      	movs	r3, #1
70003c94:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
70003c96:	697b      	ldr	r3, [r7, #20]
70003c98:	2b00      	cmp	r3, #0
70003c9a:	d10b      	bne.n	70003cb4 <xTimerCreateTimerTask+0x78>
        __asm volatile
70003c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
70003ca0:	f383 8811 	msr	BASEPRI, r3
70003ca4:	f3bf 8f6f 	isb	sy
70003ca8:	f3bf 8f4f 	dsb	sy
70003cac:	613b      	str	r3, [r7, #16]
    }
70003cae:	bf00      	nop
70003cb0:	bf00      	nop
70003cb2:	e7fd      	b.n	70003cb0 <xTimerCreateTimerTask+0x74>
        return xReturn;
70003cb4:	697b      	ldr	r3, [r7, #20]
    }
70003cb6:	4618      	mov	r0, r3
70003cb8:	3718      	adds	r7, #24
70003cba:	46bd      	mov	sp, r7
70003cbc:	bd80      	pop	{r7, pc}
70003cbe:	bf00      	nop
70003cc0:	24004fc0 	.word	0x24004fc0
70003cc4:	700043dc 	.word	0x700043dc
70003cc8:	70003d75 	.word	0x70003d75
70003ccc:	24004fc4 	.word	0x24004fc4

70003cd0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
70003cd0:	b580      	push	{r7, lr}
70003cd2:	b084      	sub	sp, #16
70003cd4:	af00      	add	r7, sp, #0
70003cd6:	60f8      	str	r0, [r7, #12]
70003cd8:	60b9      	str	r1, [r7, #8]
70003cda:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
70003cdc:	e008      	b.n	70003cf0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
70003cde:	68fb      	ldr	r3, [r7, #12]
70003ce0:	699b      	ldr	r3, [r3, #24]
70003ce2:	68ba      	ldr	r2, [r7, #8]
70003ce4:	4413      	add	r3, r2
70003ce6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
70003ce8:	68fb      	ldr	r3, [r7, #12]
70003cea:	6a1b      	ldr	r3, [r3, #32]
70003cec:	68f8      	ldr	r0, [r7, #12]
70003cee:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
70003cf0:	68fb      	ldr	r3, [r7, #12]
70003cf2:	699a      	ldr	r2, [r3, #24]
70003cf4:	68bb      	ldr	r3, [r7, #8]
70003cf6:	18d1      	adds	r1, r2, r3
70003cf8:	68bb      	ldr	r3, [r7, #8]
70003cfa:	687a      	ldr	r2, [r7, #4]
70003cfc:	68f8      	ldr	r0, [r7, #12]
70003cfe:	f000 f8df 	bl	70003ec0 <prvInsertTimerInActiveList>
70003d02:	4603      	mov	r3, r0
70003d04:	2b00      	cmp	r3, #0
70003d06:	d1ea      	bne.n	70003cde <prvReloadTimer+0xe>
        }
    }
70003d08:	bf00      	nop
70003d0a:	bf00      	nop
70003d0c:	3710      	adds	r7, #16
70003d0e:	46bd      	mov	sp, r7
70003d10:	bd80      	pop	{r7, pc}
	...

70003d14 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
70003d14:	b580      	push	{r7, lr}
70003d16:	b084      	sub	sp, #16
70003d18:	af00      	add	r7, sp, #0
70003d1a:	6078      	str	r0, [r7, #4]
70003d1c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
70003d1e:	4b14      	ldr	r3, [pc, #80]	@ (70003d70 <prvProcessExpiredTimer+0x5c>)
70003d20:	681b      	ldr	r3, [r3, #0]
70003d22:	68db      	ldr	r3, [r3, #12]
70003d24:	68db      	ldr	r3, [r3, #12]
70003d26:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
70003d28:	68fb      	ldr	r3, [r7, #12]
70003d2a:	3304      	adds	r3, #4
70003d2c:	4618      	mov	r0, r3
70003d2e:	f7fe f9d3 	bl	700020d8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
70003d32:	68fb      	ldr	r3, [r7, #12]
70003d34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
70003d38:	f003 0304 	and.w	r3, r3, #4
70003d3c:	2b00      	cmp	r3, #0
70003d3e:	d005      	beq.n	70003d4c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
70003d40:	683a      	ldr	r2, [r7, #0]
70003d42:	6879      	ldr	r1, [r7, #4]
70003d44:	68f8      	ldr	r0, [r7, #12]
70003d46:	f7ff ffc3 	bl	70003cd0 <prvReloadTimer>
70003d4a:	e008      	b.n	70003d5e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
70003d4c:	68fb      	ldr	r3, [r7, #12]
70003d4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
70003d52:	f023 0301 	bic.w	r3, r3, #1
70003d56:	b2da      	uxtb	r2, r3
70003d58:	68fb      	ldr	r3, [r7, #12]
70003d5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
70003d5e:	68fb      	ldr	r3, [r7, #12]
70003d60:	6a1b      	ldr	r3, [r3, #32]
70003d62:	68f8      	ldr	r0, [r7, #12]
70003d64:	4798      	blx	r3
    }
70003d66:	bf00      	nop
70003d68:	3710      	adds	r7, #16
70003d6a:	46bd      	mov	sp, r7
70003d6c:	bd80      	pop	{r7, pc}
70003d6e:	bf00      	nop
70003d70:	24004fb8 	.word	0x24004fb8

70003d74 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
70003d74:	b580      	push	{r7, lr}
70003d76:	b084      	sub	sp, #16
70003d78:	af00      	add	r7, sp, #0
70003d7a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
70003d7c:	f107 0308 	add.w	r3, r7, #8
70003d80:	4618      	mov	r0, r3
70003d82:	f000 f859 	bl	70003e38 <prvGetNextExpireTime>
70003d86:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
70003d88:	68bb      	ldr	r3, [r7, #8]
70003d8a:	4619      	mov	r1, r3
70003d8c:	68f8      	ldr	r0, [r7, #12]
70003d8e:	f000 f805 	bl	70003d9c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
70003d92:	f000 f8d7 	bl	70003f44 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
70003d96:	bf00      	nop
70003d98:	e7f0      	b.n	70003d7c <prvTimerTask+0x8>
	...

70003d9c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
70003d9c:	b580      	push	{r7, lr}
70003d9e:	b084      	sub	sp, #16
70003da0:	af00      	add	r7, sp, #0
70003da2:	6078      	str	r0, [r7, #4]
70003da4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
70003da6:	f7ff f97b 	bl	700030a0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
70003daa:	f107 0308 	add.w	r3, r7, #8
70003dae:	4618      	mov	r0, r3
70003db0:	f000 f866 	bl	70003e80 <prvSampleTimeNow>
70003db4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
70003db6:	68bb      	ldr	r3, [r7, #8]
70003db8:	2b00      	cmp	r3, #0
70003dba:	d130      	bne.n	70003e1e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
70003dbc:	683b      	ldr	r3, [r7, #0]
70003dbe:	2b00      	cmp	r3, #0
70003dc0:	d10a      	bne.n	70003dd8 <prvProcessTimerOrBlockTask+0x3c>
70003dc2:	687a      	ldr	r2, [r7, #4]
70003dc4:	68fb      	ldr	r3, [r7, #12]
70003dc6:	429a      	cmp	r2, r3
70003dc8:	d806      	bhi.n	70003dd8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
70003dca:	f7ff f977 	bl	700030bc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
70003dce:	68f9      	ldr	r1, [r7, #12]
70003dd0:	6878      	ldr	r0, [r7, #4]
70003dd2:	f7ff ff9f 	bl	70003d14 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
70003dd6:	e024      	b.n	70003e22 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
70003dd8:	683b      	ldr	r3, [r7, #0]
70003dda:	2b00      	cmp	r3, #0
70003ddc:	d008      	beq.n	70003df0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
70003dde:	4b13      	ldr	r3, [pc, #76]	@ (70003e2c <prvProcessTimerOrBlockTask+0x90>)
70003de0:	681b      	ldr	r3, [r3, #0]
70003de2:	681b      	ldr	r3, [r3, #0]
70003de4:	2b00      	cmp	r3, #0
70003de6:	d101      	bne.n	70003dec <prvProcessTimerOrBlockTask+0x50>
70003de8:	2301      	movs	r3, #1
70003dea:	e000      	b.n	70003dee <prvProcessTimerOrBlockTask+0x52>
70003dec:	2300      	movs	r3, #0
70003dee:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
70003df0:	4b0f      	ldr	r3, [pc, #60]	@ (70003e30 <prvProcessTimerOrBlockTask+0x94>)
70003df2:	6818      	ldr	r0, [r3, #0]
70003df4:	687a      	ldr	r2, [r7, #4]
70003df6:	68fb      	ldr	r3, [r7, #12]
70003df8:	1ad3      	subs	r3, r2, r3
70003dfa:	683a      	ldr	r2, [r7, #0]
70003dfc:	4619      	mov	r1, r3
70003dfe:	f7fe fe83 	bl	70002b08 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
70003e02:	f7ff f95b 	bl	700030bc <xTaskResumeAll>
70003e06:	4603      	mov	r3, r0
70003e08:	2b00      	cmp	r3, #0
70003e0a:	d10a      	bne.n	70003e22 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
70003e0c:	4b09      	ldr	r3, [pc, #36]	@ (70003e34 <prvProcessTimerOrBlockTask+0x98>)
70003e0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70003e12:	601a      	str	r2, [r3, #0]
70003e14:	f3bf 8f4f 	dsb	sy
70003e18:	f3bf 8f6f 	isb	sy
    }
70003e1c:	e001      	b.n	70003e22 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
70003e1e:	f7ff f94d 	bl	700030bc <xTaskResumeAll>
    }
70003e22:	bf00      	nop
70003e24:	3710      	adds	r7, #16
70003e26:	46bd      	mov	sp, r7
70003e28:	bd80      	pop	{r7, pc}
70003e2a:	bf00      	nop
70003e2c:	24004fbc 	.word	0x24004fbc
70003e30:	24004fc0 	.word	0x24004fc0
70003e34:	e000ed04 	.word	0xe000ed04

70003e38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
70003e38:	b480      	push	{r7}
70003e3a:	b085      	sub	sp, #20
70003e3c:	af00      	add	r7, sp, #0
70003e3e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
70003e40:	4b0e      	ldr	r3, [pc, #56]	@ (70003e7c <prvGetNextExpireTime+0x44>)
70003e42:	681b      	ldr	r3, [r3, #0]
70003e44:	681b      	ldr	r3, [r3, #0]
70003e46:	2b00      	cmp	r3, #0
70003e48:	d101      	bne.n	70003e4e <prvGetNextExpireTime+0x16>
70003e4a:	2201      	movs	r2, #1
70003e4c:	e000      	b.n	70003e50 <prvGetNextExpireTime+0x18>
70003e4e:	2200      	movs	r2, #0
70003e50:	687b      	ldr	r3, [r7, #4]
70003e52:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
70003e54:	687b      	ldr	r3, [r7, #4]
70003e56:	681b      	ldr	r3, [r3, #0]
70003e58:	2b00      	cmp	r3, #0
70003e5a:	d105      	bne.n	70003e68 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
70003e5c:	4b07      	ldr	r3, [pc, #28]	@ (70003e7c <prvGetNextExpireTime+0x44>)
70003e5e:	681b      	ldr	r3, [r3, #0]
70003e60:	68db      	ldr	r3, [r3, #12]
70003e62:	681b      	ldr	r3, [r3, #0]
70003e64:	60fb      	str	r3, [r7, #12]
70003e66:	e001      	b.n	70003e6c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
70003e68:	2300      	movs	r3, #0
70003e6a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
70003e6c:	68fb      	ldr	r3, [r7, #12]
    }
70003e6e:	4618      	mov	r0, r3
70003e70:	3714      	adds	r7, #20
70003e72:	46bd      	mov	sp, r7
70003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
70003e78:	4770      	bx	lr
70003e7a:	bf00      	nop
70003e7c:	24004fb8 	.word	0x24004fb8

70003e80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
70003e80:	b580      	push	{r7, lr}
70003e82:	b084      	sub	sp, #16
70003e84:	af00      	add	r7, sp, #0
70003e86:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
70003e88:	f7ff fa16 	bl	700032b8 <xTaskGetTickCount>
70003e8c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
70003e8e:	4b0b      	ldr	r3, [pc, #44]	@ (70003ebc <prvSampleTimeNow+0x3c>)
70003e90:	681b      	ldr	r3, [r3, #0]
70003e92:	68fa      	ldr	r2, [r7, #12]
70003e94:	429a      	cmp	r2, r3
70003e96:	d205      	bcs.n	70003ea4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
70003e98:	f000 f932 	bl	70004100 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
70003e9c:	687b      	ldr	r3, [r7, #4]
70003e9e:	2201      	movs	r2, #1
70003ea0:	601a      	str	r2, [r3, #0]
70003ea2:	e002      	b.n	70003eaa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
70003ea4:	687b      	ldr	r3, [r7, #4]
70003ea6:	2200      	movs	r2, #0
70003ea8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
70003eaa:	4a04      	ldr	r2, [pc, #16]	@ (70003ebc <prvSampleTimeNow+0x3c>)
70003eac:	68fb      	ldr	r3, [r7, #12]
70003eae:	6013      	str	r3, [r2, #0]

        return xTimeNow;
70003eb0:	68fb      	ldr	r3, [r7, #12]
    }
70003eb2:	4618      	mov	r0, r3
70003eb4:	3710      	adds	r7, #16
70003eb6:	46bd      	mov	sp, r7
70003eb8:	bd80      	pop	{r7, pc}
70003eba:	bf00      	nop
70003ebc:	24004fc8 	.word	0x24004fc8

70003ec0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
70003ec0:	b580      	push	{r7, lr}
70003ec2:	b086      	sub	sp, #24
70003ec4:	af00      	add	r7, sp, #0
70003ec6:	60f8      	str	r0, [r7, #12]
70003ec8:	60b9      	str	r1, [r7, #8]
70003eca:	607a      	str	r2, [r7, #4]
70003ecc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
70003ece:	2300      	movs	r3, #0
70003ed0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
70003ed2:	68fb      	ldr	r3, [r7, #12]
70003ed4:	68ba      	ldr	r2, [r7, #8]
70003ed6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
70003ed8:	68fb      	ldr	r3, [r7, #12]
70003eda:	68fa      	ldr	r2, [r7, #12]
70003edc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
70003ede:	68ba      	ldr	r2, [r7, #8]
70003ee0:	687b      	ldr	r3, [r7, #4]
70003ee2:	429a      	cmp	r2, r3
70003ee4:	d812      	bhi.n	70003f0c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
70003ee6:	687a      	ldr	r2, [r7, #4]
70003ee8:	683b      	ldr	r3, [r7, #0]
70003eea:	1ad2      	subs	r2, r2, r3
70003eec:	68fb      	ldr	r3, [r7, #12]
70003eee:	699b      	ldr	r3, [r3, #24]
70003ef0:	429a      	cmp	r2, r3
70003ef2:	d302      	bcc.n	70003efa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
70003ef4:	2301      	movs	r3, #1
70003ef6:	617b      	str	r3, [r7, #20]
70003ef8:	e01b      	b.n	70003f32 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
70003efa:	4b10      	ldr	r3, [pc, #64]	@ (70003f3c <prvInsertTimerInActiveList+0x7c>)
70003efc:	681a      	ldr	r2, [r3, #0]
70003efe:	68fb      	ldr	r3, [r7, #12]
70003f00:	3304      	adds	r3, #4
70003f02:	4619      	mov	r1, r3
70003f04:	4610      	mov	r0, r2
70003f06:	f7fe f8ae 	bl	70002066 <vListInsert>
70003f0a:	e012      	b.n	70003f32 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
70003f0c:	687a      	ldr	r2, [r7, #4]
70003f0e:	683b      	ldr	r3, [r7, #0]
70003f10:	429a      	cmp	r2, r3
70003f12:	d206      	bcs.n	70003f22 <prvInsertTimerInActiveList+0x62>
70003f14:	68ba      	ldr	r2, [r7, #8]
70003f16:	683b      	ldr	r3, [r7, #0]
70003f18:	429a      	cmp	r2, r3
70003f1a:	d302      	bcc.n	70003f22 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
70003f1c:	2301      	movs	r3, #1
70003f1e:	617b      	str	r3, [r7, #20]
70003f20:	e007      	b.n	70003f32 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
70003f22:	4b07      	ldr	r3, [pc, #28]	@ (70003f40 <prvInsertTimerInActiveList+0x80>)
70003f24:	681a      	ldr	r2, [r3, #0]
70003f26:	68fb      	ldr	r3, [r7, #12]
70003f28:	3304      	adds	r3, #4
70003f2a:	4619      	mov	r1, r3
70003f2c:	4610      	mov	r0, r2
70003f2e:	f7fe f89a 	bl	70002066 <vListInsert>
            }
        }

        return xProcessTimerNow;
70003f32:	697b      	ldr	r3, [r7, #20]
    }
70003f34:	4618      	mov	r0, r3
70003f36:	3718      	adds	r7, #24
70003f38:	46bd      	mov	sp, r7
70003f3a:	bd80      	pop	{r7, pc}
70003f3c:	24004fbc 	.word	0x24004fbc
70003f40:	24004fb8 	.word	0x24004fb8

70003f44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
70003f44:	b580      	push	{r7, lr}
70003f46:	b08a      	sub	sp, #40	@ 0x28
70003f48:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
70003f4a:	e0c7      	b.n	700040dc <prvProcessReceivedCommands+0x198>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
70003f4c:	687b      	ldr	r3, [r7, #4]
70003f4e:	2b00      	cmp	r3, #0
70003f50:	da19      	bge.n	70003f86 <prvProcessReceivedCommands+0x42>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
70003f52:	1d3b      	adds	r3, r7, #4
70003f54:	3304      	adds	r3, #4
70003f56:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
70003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70003f5a:	2b00      	cmp	r3, #0
70003f5c:	d10b      	bne.n	70003f76 <prvProcessReceivedCommands+0x32>
        __asm volatile
70003f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
70003f62:	f383 8811 	msr	BASEPRI, r3
70003f66:	f3bf 8f6f 	isb	sy
70003f6a:	f3bf 8f4f 	dsb	sy
70003f6e:	61bb      	str	r3, [r7, #24]
    }
70003f70:	bf00      	nop
70003f72:	bf00      	nop
70003f74:	e7fd      	b.n	70003f72 <prvProcessReceivedCommands+0x2e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
70003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70003f78:	681b      	ldr	r3, [r3, #0]
70003f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70003f7c:	6850      	ldr	r0, [r2, #4]
70003f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70003f80:	6892      	ldr	r2, [r2, #8]
70003f82:	4611      	mov	r1, r2
70003f84:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
70003f86:	687b      	ldr	r3, [r7, #4]
70003f88:	2b00      	cmp	r3, #0
70003f8a:	f2c0 80a7 	blt.w	700040dc <prvProcessReceivedCommands+0x198>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
70003f8e:	68fb      	ldr	r3, [r7, #12]
70003f90:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
70003f92:	6a3b      	ldr	r3, [r7, #32]
70003f94:	695b      	ldr	r3, [r3, #20]
70003f96:	2b00      	cmp	r3, #0
70003f98:	d004      	beq.n	70003fa4 <prvProcessReceivedCommands+0x60>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
70003f9a:	6a3b      	ldr	r3, [r7, #32]
70003f9c:	3304      	adds	r3, #4
70003f9e:	4618      	mov	r0, r3
70003fa0:	f7fe f89a 	bl	700020d8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
70003fa4:	463b      	mov	r3, r7
70003fa6:	4618      	mov	r0, r3
70003fa8:	f7ff ff6a 	bl	70003e80 <prvSampleTimeNow>
70003fac:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
70003fae:	687b      	ldr	r3, [r7, #4]
70003fb0:	3b01      	subs	r3, #1
70003fb2:	2b08      	cmp	r3, #8
70003fb4:	f200 808f 	bhi.w	700040d6 <prvProcessReceivedCommands+0x192>
70003fb8:	a201      	add	r2, pc, #4	@ (adr r2, 70003fc0 <prvProcessReceivedCommands+0x7c>)
70003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70003fbe:	bf00      	nop
70003fc0:	70003fe5 	.word	0x70003fe5
70003fc4:	70003fe5 	.word	0x70003fe5
70003fc8:	7000404d 	.word	0x7000404d
70003fcc:	70004061 	.word	0x70004061
70003fd0:	700040ad 	.word	0x700040ad
70003fd4:	70003fe5 	.word	0x70003fe5
70003fd8:	70003fe5 	.word	0x70003fe5
70003fdc:	7000404d 	.word	0x7000404d
70003fe0:	70004061 	.word	0x70004061
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
70003fe4:	6a3b      	ldr	r3, [r7, #32]
70003fe6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
70003fea:	f043 0301 	orr.w	r3, r3, #1
70003fee:	b2da      	uxtb	r2, r3
70003ff0:	6a3b      	ldr	r3, [r7, #32]
70003ff2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
70003ff6:	68ba      	ldr	r2, [r7, #8]
70003ff8:	6a3b      	ldr	r3, [r7, #32]
70003ffa:	699b      	ldr	r3, [r3, #24]
70003ffc:	18d1      	adds	r1, r2, r3
70003ffe:	68bb      	ldr	r3, [r7, #8]
70004000:	69fa      	ldr	r2, [r7, #28]
70004002:	6a38      	ldr	r0, [r7, #32]
70004004:	f7ff ff5c 	bl	70003ec0 <prvInsertTimerInActiveList>
70004008:	4603      	mov	r3, r0
7000400a:	2b00      	cmp	r3, #0
7000400c:	d065      	beq.n	700040da <prvProcessReceivedCommands+0x196>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
7000400e:	6a3b      	ldr	r3, [r7, #32]
70004010:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
70004014:	f003 0304 	and.w	r3, r3, #4
70004018:	2b00      	cmp	r3, #0
7000401a:	d009      	beq.n	70004030 <prvProcessReceivedCommands+0xec>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
7000401c:	68ba      	ldr	r2, [r7, #8]
7000401e:	6a3b      	ldr	r3, [r7, #32]
70004020:	699b      	ldr	r3, [r3, #24]
70004022:	4413      	add	r3, r2
70004024:	69fa      	ldr	r2, [r7, #28]
70004026:	4619      	mov	r1, r3
70004028:	6a38      	ldr	r0, [r7, #32]
7000402a:	f7ff fe51 	bl	70003cd0 <prvReloadTimer>
7000402e:	e008      	b.n	70004042 <prvProcessReceivedCommands+0xfe>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
70004030:	6a3b      	ldr	r3, [r7, #32]
70004032:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
70004036:	f023 0301 	bic.w	r3, r3, #1
7000403a:	b2da      	uxtb	r2, r3
7000403c:	6a3b      	ldr	r3, [r7, #32]
7000403e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
70004042:	6a3b      	ldr	r3, [r7, #32]
70004044:	6a1b      	ldr	r3, [r3, #32]
70004046:	6a38      	ldr	r0, [r7, #32]
70004048:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
7000404a:	e046      	b.n	700040da <prvProcessReceivedCommands+0x196>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
7000404c:	6a3b      	ldr	r3, [r7, #32]
7000404e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
70004052:	f023 0301 	bic.w	r3, r3, #1
70004056:	b2da      	uxtb	r2, r3
70004058:	6a3b      	ldr	r3, [r7, #32]
7000405a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
7000405e:	e03d      	b.n	700040dc <prvProcessReceivedCommands+0x198>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
70004060:	6a3b      	ldr	r3, [r7, #32]
70004062:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
70004066:	f043 0301 	orr.w	r3, r3, #1
7000406a:	b2da      	uxtb	r2, r3
7000406c:	6a3b      	ldr	r3, [r7, #32]
7000406e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
70004072:	68ba      	ldr	r2, [r7, #8]
70004074:	6a3b      	ldr	r3, [r7, #32]
70004076:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
70004078:	6a3b      	ldr	r3, [r7, #32]
7000407a:	699b      	ldr	r3, [r3, #24]
7000407c:	2b00      	cmp	r3, #0
7000407e:	d10b      	bne.n	70004098 <prvProcessReceivedCommands+0x154>
        __asm volatile
70004080:	f04f 0350 	mov.w	r3, #80	@ 0x50
70004084:	f383 8811 	msr	BASEPRI, r3
70004088:	f3bf 8f6f 	isb	sy
7000408c:	f3bf 8f4f 	dsb	sy
70004090:	617b      	str	r3, [r7, #20]
    }
70004092:	bf00      	nop
70004094:	bf00      	nop
70004096:	e7fd      	b.n	70004094 <prvProcessReceivedCommands+0x150>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
70004098:	6a3b      	ldr	r3, [r7, #32]
7000409a:	699a      	ldr	r2, [r3, #24]
7000409c:	69fb      	ldr	r3, [r7, #28]
7000409e:	18d1      	adds	r1, r2, r3
700040a0:	69fb      	ldr	r3, [r7, #28]
700040a2:	69fa      	ldr	r2, [r7, #28]
700040a4:	6a38      	ldr	r0, [r7, #32]
700040a6:	f7ff ff0b 	bl	70003ec0 <prvInsertTimerInActiveList>
                        break;
700040aa:	e017      	b.n	700040dc <prvProcessReceivedCommands+0x198>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
700040ac:	6a3b      	ldr	r3, [r7, #32]
700040ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
700040b2:	f003 0302 	and.w	r3, r3, #2
700040b6:	2b00      	cmp	r3, #0
700040b8:	d103      	bne.n	700040c2 <prvProcessReceivedCommands+0x17e>
                            {
                                vPortFree( pxTimer );
700040ba:	6a38      	ldr	r0, [r7, #32]
700040bc:	f7fd fe92 	bl	70001de4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
700040c0:	e00c      	b.n	700040dc <prvProcessReceivedCommands+0x198>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
700040c2:	6a3b      	ldr	r3, [r7, #32]
700040c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
700040c8:	f023 0301 	bic.w	r3, r3, #1
700040cc:	b2da      	uxtb	r2, r3
700040ce:	6a3b      	ldr	r3, [r7, #32]
700040d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
700040d4:	e002      	b.n	700040dc <prvProcessReceivedCommands+0x198>

                    default:
                        /* Don't expect to get here. */
                        break;
700040d6:	bf00      	nop
700040d8:	e000      	b.n	700040dc <prvProcessReceivedCommands+0x198>
                        break;
700040da:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
700040dc:	4b07      	ldr	r3, [pc, #28]	@ (700040fc <prvProcessReceivedCommands+0x1b8>)
700040de:	681b      	ldr	r3, [r3, #0]
700040e0:	1d39      	adds	r1, r7, #4
700040e2:	2200      	movs	r2, #0
700040e4:	4618      	mov	r0, r3
700040e6:	f7fe fb4f 	bl	70002788 <xQueueReceive>
700040ea:	4603      	mov	r3, r0
700040ec:	2b00      	cmp	r3, #0
700040ee:	f47f af2d 	bne.w	70003f4c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
700040f2:	bf00      	nop
700040f4:	bf00      	nop
700040f6:	3728      	adds	r7, #40	@ 0x28
700040f8:	46bd      	mov	sp, r7
700040fa:	bd80      	pop	{r7, pc}
700040fc:	24004fc0 	.word	0x24004fc0

70004100 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
70004100:	b580      	push	{r7, lr}
70004102:	b082      	sub	sp, #8
70004104:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
70004106:	e009      	b.n	7000411c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
70004108:	4b0e      	ldr	r3, [pc, #56]	@ (70004144 <prvSwitchTimerLists+0x44>)
7000410a:	681b      	ldr	r3, [r3, #0]
7000410c:	68db      	ldr	r3, [r3, #12]
7000410e:	681b      	ldr	r3, [r3, #0]
70004110:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
70004112:	f04f 31ff 	mov.w	r1, #4294967295
70004116:	6838      	ldr	r0, [r7, #0]
70004118:	f7ff fdfc 	bl	70003d14 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
7000411c:	4b09      	ldr	r3, [pc, #36]	@ (70004144 <prvSwitchTimerLists+0x44>)
7000411e:	681b      	ldr	r3, [r3, #0]
70004120:	681b      	ldr	r3, [r3, #0]
70004122:	2b00      	cmp	r3, #0
70004124:	d1f0      	bne.n	70004108 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
70004126:	4b07      	ldr	r3, [pc, #28]	@ (70004144 <prvSwitchTimerLists+0x44>)
70004128:	681b      	ldr	r3, [r3, #0]
7000412a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
7000412c:	4b06      	ldr	r3, [pc, #24]	@ (70004148 <prvSwitchTimerLists+0x48>)
7000412e:	681b      	ldr	r3, [r3, #0]
70004130:	4a04      	ldr	r2, [pc, #16]	@ (70004144 <prvSwitchTimerLists+0x44>)
70004132:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
70004134:	4a04      	ldr	r2, [pc, #16]	@ (70004148 <prvSwitchTimerLists+0x48>)
70004136:	687b      	ldr	r3, [r7, #4]
70004138:	6013      	str	r3, [r2, #0]
    }
7000413a:	bf00      	nop
7000413c:	3708      	adds	r7, #8
7000413e:	46bd      	mov	sp, r7
70004140:	bd80      	pop	{r7, pc}
70004142:	bf00      	nop
70004144:	24004fb8 	.word	0x24004fb8
70004148:	24004fbc 	.word	0x24004fbc

7000414c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
7000414c:	b580      	push	{r7, lr}
7000414e:	b082      	sub	sp, #8
70004150:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
70004152:	f7fe f91b 	bl	7000238c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
70004156:	4b15      	ldr	r3, [pc, #84]	@ (700041ac <prvCheckForValidListAndQueue+0x60>)
70004158:	681b      	ldr	r3, [r3, #0]
7000415a:	2b00      	cmp	r3, #0
7000415c:	d120      	bne.n	700041a0 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
7000415e:	4814      	ldr	r0, [pc, #80]	@ (700041b0 <prvCheckForValidListAndQueue+0x64>)
70004160:	f7fd ff54 	bl	7000200c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
70004164:	4813      	ldr	r0, [pc, #76]	@ (700041b4 <prvCheckForValidListAndQueue+0x68>)
70004166:	f7fd ff51 	bl	7000200c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
7000416a:	4b13      	ldr	r3, [pc, #76]	@ (700041b8 <prvCheckForValidListAndQueue+0x6c>)
7000416c:	4a10      	ldr	r2, [pc, #64]	@ (700041b0 <prvCheckForValidListAndQueue+0x64>)
7000416e:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
70004170:	4b12      	ldr	r3, [pc, #72]	@ (700041bc <prvCheckForValidListAndQueue+0x70>)
70004172:	4a10      	ldr	r2, [pc, #64]	@ (700041b4 <prvCheckForValidListAndQueue+0x68>)
70004174:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
70004176:	2300      	movs	r3, #0
70004178:	9300      	str	r3, [sp, #0]
7000417a:	4b11      	ldr	r3, [pc, #68]	@ (700041c0 <prvCheckForValidListAndQueue+0x74>)
7000417c:	4a11      	ldr	r2, [pc, #68]	@ (700041c4 <prvCheckForValidListAndQueue+0x78>)
7000417e:	2110      	movs	r1, #16
70004180:	200a      	movs	r0, #10
70004182:	f7fe fa7d 	bl	70002680 <xQueueGenericCreateStatic>
70004186:	4603      	mov	r3, r0
70004188:	4a08      	ldr	r2, [pc, #32]	@ (700041ac <prvCheckForValidListAndQueue+0x60>)
7000418a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
7000418c:	4b07      	ldr	r3, [pc, #28]	@ (700041ac <prvCheckForValidListAndQueue+0x60>)
7000418e:	681b      	ldr	r3, [r3, #0]
70004190:	2b00      	cmp	r3, #0
70004192:	d005      	beq.n	700041a0 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
70004194:	4b05      	ldr	r3, [pc, #20]	@ (700041ac <prvCheckForValidListAndQueue+0x60>)
70004196:	681b      	ldr	r3, [r3, #0]
70004198:	490b      	ldr	r1, [pc, #44]	@ (700041c8 <prvCheckForValidListAndQueue+0x7c>)
7000419a:	4618      	mov	r0, r3
7000419c:	f7fe fc64 	bl	70002a68 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
700041a0:	f7fe f926 	bl	700023f0 <vPortExitCritical>
    }
700041a4:	bf00      	nop
700041a6:	46bd      	mov	sp, r7
700041a8:	bd80      	pop	{r7, pc}
700041aa:	bf00      	nop
700041ac:	24004fc0 	.word	0x24004fc0
700041b0:	24004f90 	.word	0x24004f90
700041b4:	24004fa4 	.word	0x24004fa4
700041b8:	24004fb8 	.word	0x24004fb8
700041bc:	24004fbc 	.word	0x24004fbc
700041c0:	2400506c 	.word	0x2400506c
700041c4:	24004fcc 	.word	0x24004fcc
700041c8:	700043e4 	.word	0x700043e4

700041cc <memset>:
700041cc:	4402      	add	r2, r0
700041ce:	4603      	mov	r3, r0
700041d0:	4293      	cmp	r3, r2
700041d2:	d100      	bne.n	700041d6 <memset+0xa>
700041d4:	4770      	bx	lr
700041d6:	f803 1b01 	strb.w	r1, [r3], #1
700041da:	e7f9      	b.n	700041d0 <memset+0x4>

700041dc <_reclaim_reent>:
700041dc:	4b29      	ldr	r3, [pc, #164]	@ (70004284 <_reclaim_reent+0xa8>)
700041de:	681b      	ldr	r3, [r3, #0]
700041e0:	4283      	cmp	r3, r0
700041e2:	b570      	push	{r4, r5, r6, lr}
700041e4:	4604      	mov	r4, r0
700041e6:	d04b      	beq.n	70004280 <_reclaim_reent+0xa4>
700041e8:	69c3      	ldr	r3, [r0, #28]
700041ea:	b1ab      	cbz	r3, 70004218 <_reclaim_reent+0x3c>
700041ec:	68db      	ldr	r3, [r3, #12]
700041ee:	b16b      	cbz	r3, 7000420c <_reclaim_reent+0x30>
700041f0:	2500      	movs	r5, #0
700041f2:	69e3      	ldr	r3, [r4, #28]
700041f4:	68db      	ldr	r3, [r3, #12]
700041f6:	5959      	ldr	r1, [r3, r5]
700041f8:	2900      	cmp	r1, #0
700041fa:	d13b      	bne.n	70004274 <_reclaim_reent+0x98>
700041fc:	3504      	adds	r5, #4
700041fe:	2d80      	cmp	r5, #128	@ 0x80
70004200:	d1f7      	bne.n	700041f2 <_reclaim_reent+0x16>
70004202:	69e3      	ldr	r3, [r4, #28]
70004204:	4620      	mov	r0, r4
70004206:	68d9      	ldr	r1, [r3, #12]
70004208:	f000 f872 	bl	700042f0 <_free_r>
7000420c:	69e3      	ldr	r3, [r4, #28]
7000420e:	6819      	ldr	r1, [r3, #0]
70004210:	b111      	cbz	r1, 70004218 <_reclaim_reent+0x3c>
70004212:	4620      	mov	r0, r4
70004214:	f000 f86c 	bl	700042f0 <_free_r>
70004218:	6961      	ldr	r1, [r4, #20]
7000421a:	b111      	cbz	r1, 70004222 <_reclaim_reent+0x46>
7000421c:	4620      	mov	r0, r4
7000421e:	f000 f867 	bl	700042f0 <_free_r>
70004222:	69e1      	ldr	r1, [r4, #28]
70004224:	b111      	cbz	r1, 7000422c <_reclaim_reent+0x50>
70004226:	4620      	mov	r0, r4
70004228:	f000 f862 	bl	700042f0 <_free_r>
7000422c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
7000422e:	b111      	cbz	r1, 70004236 <_reclaim_reent+0x5a>
70004230:	4620      	mov	r0, r4
70004232:	f000 f85d 	bl	700042f0 <_free_r>
70004236:	6b61      	ldr	r1, [r4, #52]	@ 0x34
70004238:	b111      	cbz	r1, 70004240 <_reclaim_reent+0x64>
7000423a:	4620      	mov	r0, r4
7000423c:	f000 f858 	bl	700042f0 <_free_r>
70004240:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
70004242:	b111      	cbz	r1, 7000424a <_reclaim_reent+0x6e>
70004244:	4620      	mov	r0, r4
70004246:	f000 f853 	bl	700042f0 <_free_r>
7000424a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
7000424c:	b111      	cbz	r1, 70004254 <_reclaim_reent+0x78>
7000424e:	4620      	mov	r0, r4
70004250:	f000 f84e 	bl	700042f0 <_free_r>
70004254:	6c61      	ldr	r1, [r4, #68]	@ 0x44
70004256:	b111      	cbz	r1, 7000425e <_reclaim_reent+0x82>
70004258:	4620      	mov	r0, r4
7000425a:	f000 f849 	bl	700042f0 <_free_r>
7000425e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
70004260:	b111      	cbz	r1, 70004268 <_reclaim_reent+0x8c>
70004262:	4620      	mov	r0, r4
70004264:	f000 f844 	bl	700042f0 <_free_r>
70004268:	6a23      	ldr	r3, [r4, #32]
7000426a:	b14b      	cbz	r3, 70004280 <_reclaim_reent+0xa4>
7000426c:	4620      	mov	r0, r4
7000426e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
70004272:	4718      	bx	r3
70004274:	680e      	ldr	r6, [r1, #0]
70004276:	4620      	mov	r0, r4
70004278:	f000 f83a 	bl	700042f0 <_free_r>
7000427c:	4631      	mov	r1, r6
7000427e:	e7bb      	b.n	700041f8 <_reclaim_reent+0x1c>
70004280:	bd70      	pop	{r4, r5, r6, pc}
70004282:	bf00      	nop
70004284:	24000014 	.word	0x24000014

70004288 <__libc_init_array>:
70004288:	b570      	push	{r4, r5, r6, lr}
7000428a:	4d0d      	ldr	r5, [pc, #52]	@ (700042c0 <__libc_init_array+0x38>)
7000428c:	4c0d      	ldr	r4, [pc, #52]	@ (700042c4 <__libc_init_array+0x3c>)
7000428e:	1b64      	subs	r4, r4, r5
70004290:	10a4      	asrs	r4, r4, #2
70004292:	2600      	movs	r6, #0
70004294:	42a6      	cmp	r6, r4
70004296:	d109      	bne.n	700042ac <__libc_init_array+0x24>
70004298:	4d0b      	ldr	r5, [pc, #44]	@ (700042c8 <__libc_init_array+0x40>)
7000429a:	4c0c      	ldr	r4, [pc, #48]	@ (700042cc <__libc_init_array+0x44>)
7000429c:	f000 f87e 	bl	7000439c <_init>
700042a0:	1b64      	subs	r4, r4, r5
700042a2:	10a4      	asrs	r4, r4, #2
700042a4:	2600      	movs	r6, #0
700042a6:	42a6      	cmp	r6, r4
700042a8:	d105      	bne.n	700042b6 <__libc_init_array+0x2e>
700042aa:	bd70      	pop	{r4, r5, r6, pc}
700042ac:	f855 3b04 	ldr.w	r3, [r5], #4
700042b0:	4798      	blx	r3
700042b2:	3601      	adds	r6, #1
700042b4:	e7ee      	b.n	70004294 <__libc_init_array+0xc>
700042b6:	f855 3b04 	ldr.w	r3, [r5], #4
700042ba:	4798      	blx	r3
700042bc:	3601      	adds	r6, #1
700042be:	e7f2      	b.n	700042a6 <__libc_init_array+0x1e>
700042c0:	70004434 	.word	0x70004434
700042c4:	70004434 	.word	0x70004434
700042c8:	70004434 	.word	0x70004434
700042cc:	70004438 	.word	0x70004438

700042d0 <__retarget_lock_acquire_recursive>:
700042d0:	4770      	bx	lr

700042d2 <__retarget_lock_release_recursive>:
700042d2:	4770      	bx	lr

700042d4 <memcpy>:
700042d4:	440a      	add	r2, r1
700042d6:	4291      	cmp	r1, r2
700042d8:	f100 33ff 	add.w	r3, r0, #4294967295
700042dc:	d100      	bne.n	700042e0 <memcpy+0xc>
700042de:	4770      	bx	lr
700042e0:	b510      	push	{r4, lr}
700042e2:	f811 4b01 	ldrb.w	r4, [r1], #1
700042e6:	f803 4f01 	strb.w	r4, [r3, #1]!
700042ea:	4291      	cmp	r1, r2
700042ec:	d1f9      	bne.n	700042e2 <memcpy+0xe>
700042ee:	bd10      	pop	{r4, pc}

700042f0 <_free_r>:
700042f0:	b538      	push	{r3, r4, r5, lr}
700042f2:	4605      	mov	r5, r0
700042f4:	2900      	cmp	r1, #0
700042f6:	d041      	beq.n	7000437c <_free_r+0x8c>
700042f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
700042fc:	1f0c      	subs	r4, r1, #4
700042fe:	2b00      	cmp	r3, #0
70004300:	bfb8      	it	lt
70004302:	18e4      	addlt	r4, r4, r3
70004304:	f000 f83e 	bl	70004384 <__malloc_lock>
70004308:	4a1d      	ldr	r2, [pc, #116]	@ (70004380 <_free_r+0x90>)
7000430a:	6813      	ldr	r3, [r2, #0]
7000430c:	b933      	cbnz	r3, 7000431c <_free_r+0x2c>
7000430e:	6063      	str	r3, [r4, #4]
70004310:	6014      	str	r4, [r2, #0]
70004312:	4628      	mov	r0, r5
70004314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
70004318:	f000 b83a 	b.w	70004390 <__malloc_unlock>
7000431c:	42a3      	cmp	r3, r4
7000431e:	d908      	bls.n	70004332 <_free_r+0x42>
70004320:	6820      	ldr	r0, [r4, #0]
70004322:	1821      	adds	r1, r4, r0
70004324:	428b      	cmp	r3, r1
70004326:	bf01      	itttt	eq
70004328:	6819      	ldreq	r1, [r3, #0]
7000432a:	685b      	ldreq	r3, [r3, #4]
7000432c:	1809      	addeq	r1, r1, r0
7000432e:	6021      	streq	r1, [r4, #0]
70004330:	e7ed      	b.n	7000430e <_free_r+0x1e>
70004332:	461a      	mov	r2, r3
70004334:	685b      	ldr	r3, [r3, #4]
70004336:	b10b      	cbz	r3, 7000433c <_free_r+0x4c>
70004338:	42a3      	cmp	r3, r4
7000433a:	d9fa      	bls.n	70004332 <_free_r+0x42>
7000433c:	6811      	ldr	r1, [r2, #0]
7000433e:	1850      	adds	r0, r2, r1
70004340:	42a0      	cmp	r0, r4
70004342:	d10b      	bne.n	7000435c <_free_r+0x6c>
70004344:	6820      	ldr	r0, [r4, #0]
70004346:	4401      	add	r1, r0
70004348:	1850      	adds	r0, r2, r1
7000434a:	4283      	cmp	r3, r0
7000434c:	6011      	str	r1, [r2, #0]
7000434e:	d1e0      	bne.n	70004312 <_free_r+0x22>
70004350:	6818      	ldr	r0, [r3, #0]
70004352:	685b      	ldr	r3, [r3, #4]
70004354:	6053      	str	r3, [r2, #4]
70004356:	4408      	add	r0, r1
70004358:	6010      	str	r0, [r2, #0]
7000435a:	e7da      	b.n	70004312 <_free_r+0x22>
7000435c:	d902      	bls.n	70004364 <_free_r+0x74>
7000435e:	230c      	movs	r3, #12
70004360:	602b      	str	r3, [r5, #0]
70004362:	e7d6      	b.n	70004312 <_free_r+0x22>
70004364:	6820      	ldr	r0, [r4, #0]
70004366:	1821      	adds	r1, r4, r0
70004368:	428b      	cmp	r3, r1
7000436a:	bf04      	itt	eq
7000436c:	6819      	ldreq	r1, [r3, #0]
7000436e:	685b      	ldreq	r3, [r3, #4]
70004370:	6063      	str	r3, [r4, #4]
70004372:	bf04      	itt	eq
70004374:	1809      	addeq	r1, r1, r0
70004376:	6021      	streq	r1, [r4, #0]
70004378:	6054      	str	r4, [r2, #4]
7000437a:	e7ca      	b.n	70004312 <_free_r+0x22>
7000437c:	bd38      	pop	{r3, r4, r5, pc}
7000437e:	bf00      	nop
70004380:	240051f8 	.word	0x240051f8

70004384 <__malloc_lock>:
70004384:	4801      	ldr	r0, [pc, #4]	@ (7000438c <__malloc_lock+0x8>)
70004386:	f7ff bfa3 	b.w	700042d0 <__retarget_lock_acquire_recursive>
7000438a:	bf00      	nop
7000438c:	240051f4 	.word	0x240051f4

70004390 <__malloc_unlock>:
70004390:	4801      	ldr	r0, [pc, #4]	@ (70004398 <__malloc_unlock+0x8>)
70004392:	f7ff bf9e 	b.w	700042d2 <__retarget_lock_release_recursive>
70004396:	bf00      	nop
70004398:	240051f4 	.word	0x240051f4

7000439c <_init>:
7000439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
7000439e:	bf00      	nop
700043a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
700043a2:	bc08      	pop	{r3}
700043a4:	469e      	mov	lr, r3
700043a6:	4770      	bx	lr

700043a8 <_fini>:
700043a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
700043aa:	bf00      	nop
700043ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
700043ae:	bc08      	pop	{r3}
700043b0:	469e      	mov	lr, r3
700043b2:	4770      	bx	lr


Simple_FreeRTOS_Appli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002b0  70000000  70000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014948  700002b0  700002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002868  70014bf8  70014bf8  00015bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  70017460  70017460  00019090  2**0
                  CONTENTS
  4 .ARM          00000008  70017460  70017460  00018460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  70017468  70017468  00019090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  70017468  70017468  00018468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  7001746c  7001746c  0001846c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  24000000  70017470  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000085a4  24000090  70017500  00019090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  20000000  00001000  2**0
                  ALLOC
 11 .lwip_sec     0001ac4f  24008634  24008634  00000634  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00019090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031c86  00000000  00000000  000190be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007736  00000000  00000000  0004ad44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024d8  00000000  00000000  00052480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001cea  00000000  00000000  00054958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00041210  00000000  00000000  00056642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003e6c3  00000000  00000000  00097852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00164eb7  00000000  00000000  000d5f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0023adcc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a1c0  00000000  00000000  0023ae10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00244fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

700002b0 <__do_global_dtors_aux>:
700002b0:	b510      	push	{r4, lr}
700002b2:	4c05      	ldr	r4, [pc, #20]	@ (700002c8 <__do_global_dtors_aux+0x18>)
700002b4:	7823      	ldrb	r3, [r4, #0]
700002b6:	b933      	cbnz	r3, 700002c6 <__do_global_dtors_aux+0x16>
700002b8:	4b04      	ldr	r3, [pc, #16]	@ (700002cc <__do_global_dtors_aux+0x1c>)
700002ba:	b113      	cbz	r3, 700002c2 <__do_global_dtors_aux+0x12>
700002bc:	4804      	ldr	r0, [pc, #16]	@ (700002d0 <__do_global_dtors_aux+0x20>)
700002be:	f3af 8000 	nop.w
700002c2:	2301      	movs	r3, #1
700002c4:	7023      	strb	r3, [r4, #0]
700002c6:	bd10      	pop	{r4, pc}
700002c8:	24000090 	.word	0x24000090
700002cc:	00000000 	.word	0x00000000
700002d0:	70014be0 	.word	0x70014be0

700002d4 <frame_dummy>:
700002d4:	b508      	push	{r3, lr}
700002d6:	4b03      	ldr	r3, [pc, #12]	@ (700002e4 <frame_dummy+0x10>)
700002d8:	b11b      	cbz	r3, 700002e2 <frame_dummy+0xe>
700002da:	4903      	ldr	r1, [pc, #12]	@ (700002e8 <frame_dummy+0x14>)
700002dc:	4803      	ldr	r0, [pc, #12]	@ (700002ec <frame_dummy+0x18>)
700002de:	f3af 8000 	nop.w
700002e2:	bd08      	pop	{r3, pc}
700002e4:	00000000 	.word	0x00000000
700002e8:	24000094 	.word	0x24000094
700002ec:	70014be0 	.word	0x70014be0

700002f0 <memchr>:
700002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
700002f4:	2a10      	cmp	r2, #16
700002f6:	db2b      	blt.n	70000350 <memchr+0x60>
700002f8:	f010 0f07 	tst.w	r0, #7
700002fc:	d008      	beq.n	70000310 <memchr+0x20>
700002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
70000302:	3a01      	subs	r2, #1
70000304:	428b      	cmp	r3, r1
70000306:	d02d      	beq.n	70000364 <memchr+0x74>
70000308:	f010 0f07 	tst.w	r0, #7
7000030c:	b342      	cbz	r2, 70000360 <memchr+0x70>
7000030e:	d1f6      	bne.n	700002fe <memchr+0xe>
70000310:	b4f0      	push	{r4, r5, r6, r7}
70000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
70000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
7000031a:	f022 0407 	bic.w	r4, r2, #7
7000031e:	f07f 0700 	mvns.w	r7, #0
70000322:	2300      	movs	r3, #0
70000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
70000328:	3c08      	subs	r4, #8
7000032a:	ea85 0501 	eor.w	r5, r5, r1
7000032e:	ea86 0601 	eor.w	r6, r6, r1
70000332:	fa85 f547 	uadd8	r5, r5, r7
70000336:	faa3 f587 	sel	r5, r3, r7
7000033a:	fa86 f647 	uadd8	r6, r6, r7
7000033e:	faa5 f687 	sel	r6, r5, r7
70000342:	b98e      	cbnz	r6, 70000368 <memchr+0x78>
70000344:	d1ee      	bne.n	70000324 <memchr+0x34>
70000346:	bcf0      	pop	{r4, r5, r6, r7}
70000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
7000034c:	f002 0207 	and.w	r2, r2, #7
70000350:	b132      	cbz	r2, 70000360 <memchr+0x70>
70000352:	f810 3b01 	ldrb.w	r3, [r0], #1
70000356:	3a01      	subs	r2, #1
70000358:	ea83 0301 	eor.w	r3, r3, r1
7000035c:	b113      	cbz	r3, 70000364 <memchr+0x74>
7000035e:	d1f8      	bne.n	70000352 <memchr+0x62>
70000360:	2000      	movs	r0, #0
70000362:	4770      	bx	lr
70000364:	3801      	subs	r0, #1
70000366:	4770      	bx	lr
70000368:	2d00      	cmp	r5, #0
7000036a:	bf06      	itte	eq
7000036c:	4635      	moveq	r5, r6
7000036e:	3803      	subeq	r0, #3
70000370:	3807      	subne	r0, #7
70000372:	f015 0f01 	tst.w	r5, #1
70000376:	d107      	bne.n	70000388 <memchr+0x98>
70000378:	3001      	adds	r0, #1
7000037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
7000037e:	bf02      	ittt	eq
70000380:	3001      	addeq	r0, #1
70000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
70000386:	3001      	addeq	r0, #1
70000388:	bcf0      	pop	{r4, r5, r6, r7}
7000038a:	3801      	subs	r0, #1
7000038c:	4770      	bx	lr
7000038e:	bf00      	nop

70000390 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
70000390:	b580      	push	{r7, lr}
70000392:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(Start_Default_Task, NULL, &defaultTask_attributes);
70000394:	4a08      	ldr	r2, [pc, #32]	@ (700003b8 <MX_FREERTOS_Init+0x28>)
70000396:	2100      	movs	r1, #0
70000398:	4808      	ldr	r0, [pc, #32]	@ (700003bc <MX_FREERTOS_Init+0x2c>)
7000039a:	f005 fa37 	bl	7000580c <osThreadNew>
7000039e:	4603      	mov	r3, r0
700003a0:	4a07      	ldr	r2, [pc, #28]	@ (700003c0 <MX_FREERTOS_Init+0x30>)
700003a2:	6013      	str	r3, [r2, #0]

  /* creation of LedBlinker */
  LedBlinkerHandle = osThreadNew(Start_LedBlinker_Task, NULL, &LedBlinker_attributes);
700003a4:	4a07      	ldr	r2, [pc, #28]	@ (700003c4 <MX_FREERTOS_Init+0x34>)
700003a6:	2100      	movs	r1, #0
700003a8:	4807      	ldr	r0, [pc, #28]	@ (700003c8 <MX_FREERTOS_Init+0x38>)
700003aa:	f005 fa2f 	bl	7000580c <osThreadNew>
700003ae:	4603      	mov	r3, r0
700003b0:	4a06      	ldr	r2, [pc, #24]	@ (700003cc <MX_FREERTOS_Init+0x3c>)
700003b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
700003b4:	bf00      	nop
700003b6:	bd80      	pop	{r7, pc}
700003b8:	70017208 	.word	0x70017208
700003bc:	700003d1 	.word	0x700003d1
700003c0:	240000ac 	.word	0x240000ac
700003c4:	7001722c 	.word	0x7001722c
700003c8:	700003f5 	.word	0x700003f5
700003cc:	240000b0 	.word	0x240000b0

700003d0 <Start_Default_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Default_Task */
void Start_Default_Task(void *argument)
{
700003d0:	b580      	push	{r7, lr}
700003d2:	b082      	sub	sp, #8
700003d4:	af00      	add	r7, sp, #0
700003d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Default_Task */
	MX_LWIP_Init();
700003d8:	f004 faee 	bl	700049b8 <MX_LWIP_Init>
  /* Infinite loop */
  for(;;)
  {
	osThreadTerminate(defaultTaskHandle);
700003dc:	4b04      	ldr	r3, [pc, #16]	@ (700003f0 <Start_Default_Task+0x20>)
700003de:	681b      	ldr	r3, [r3, #0]
700003e0:	4618      	mov	r0, r3
700003e2:	f005 faa5 	bl	70005930 <osThreadTerminate>
	osDelay(1);
700003e6:	2001      	movs	r0, #1
700003e8:	f005 face 	bl	70005988 <osDelay>
	osThreadTerminate(defaultTaskHandle);
700003ec:	bf00      	nop
700003ee:	e7f5      	b.n	700003dc <Start_Default_Task+0xc>
700003f0:	240000ac 	.word	0x240000ac

700003f4 <Start_LedBlinker_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LedBlinker_Task */
void Start_LedBlinker_Task(void *argument)
{
700003f4:	b580      	push	{r7, lr}
700003f6:	b082      	sub	sp, #8
700003f8:	af00      	add	r7, sp, #0
700003fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LedBlinker_Task */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GREEN_GPIO_Port, LD1_GREEN_Pin);
700003fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
70000400:	480b      	ldr	r0, [pc, #44]	@ (70000430 <Start_LedBlinker_Task+0x3c>)
70000402:	f002 fe8b 	bl	7000311c <HAL_GPIO_TogglePin>
    osDelay(200);
70000406:	20c8      	movs	r0, #200	@ 0xc8
70000408:	f005 fabe 	bl	70005988 <osDelay>
	HAL_GPIO_TogglePin(LD2_YELLOW_GPIO_Port, LD2_YELLOW_Pin);
7000040c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
70000410:	4807      	ldr	r0, [pc, #28]	@ (70000430 <Start_LedBlinker_Task+0x3c>)
70000412:	f002 fe83 	bl	7000311c <HAL_GPIO_TogglePin>
    osDelay(200);
70000416:	20c8      	movs	r0, #200	@ 0xc8
70000418:	f005 fab6 	bl	70005988 <osDelay>
	HAL_GPIO_TogglePin(LD3_RED_GPIO_Port, LD3_RED_Pin);
7000041c:	2180      	movs	r1, #128	@ 0x80
7000041e:	4805      	ldr	r0, [pc, #20]	@ (70000434 <Start_LedBlinker_Task+0x40>)
70000420:	f002 fe7c 	bl	7000311c <HAL_GPIO_TogglePin>
    osDelay(200);
70000424:	20c8      	movs	r0, #200	@ 0xc8
70000426:	f005 faaf 	bl	70005988 <osDelay>
	HAL_GPIO_TogglePin(LD1_GREEN_GPIO_Port, LD1_GREEN_Pin);
7000042a:	bf00      	nop
7000042c:	e7e6      	b.n	700003fc <Start_LedBlinker_Task+0x8>
7000042e:	bf00      	nop
70000430:	58020c00 	.word	0x58020c00
70000434:	58020400 	.word	0x58020400

70000438 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
70000438:	b580      	push	{r7, lr}
7000043a:	b08a      	sub	sp, #40	@ 0x28
7000043c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
7000043e:	f107 0314 	add.w	r3, r7, #20
70000442:	2200      	movs	r2, #0
70000444:	601a      	str	r2, [r3, #0]
70000446:	605a      	str	r2, [r3, #4]
70000448:	609a      	str	r2, [r3, #8]
7000044a:	60da      	str	r2, [r3, #12]
7000044c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
7000044e:	4b30      	ldr	r3, [pc, #192]	@ (70000510 <MX_GPIO_Init+0xd8>)
70000450:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
70000454:	4a2e      	ldr	r2, [pc, #184]	@ (70000510 <MX_GPIO_Init+0xd8>)
70000456:	f043 0302 	orr.w	r3, r3, #2
7000045a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
7000045e:	4b2c      	ldr	r3, [pc, #176]	@ (70000510 <MX_GPIO_Init+0xd8>)
70000460:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
70000464:	613b      	str	r3, [r7, #16]
70000466:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
70000468:	4b29      	ldr	r3, [pc, #164]	@ (70000510 <MX_GPIO_Init+0xd8>)
7000046a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
7000046e:	4a28      	ldr	r2, [pc, #160]	@ (70000510 <MX_GPIO_Init+0xd8>)
70000470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
70000474:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
70000478:	4b25      	ldr	r3, [pc, #148]	@ (70000510 <MX_GPIO_Init+0xd8>)
7000047a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
7000047e:	60fb      	str	r3, [r7, #12]
70000480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
70000482:	4b23      	ldr	r3, [pc, #140]	@ (70000510 <MX_GPIO_Init+0xd8>)
70000484:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
70000488:	4a21      	ldr	r2, [pc, #132]	@ (70000510 <MX_GPIO_Init+0xd8>)
7000048a:	f043 0301 	orr.w	r3, r3, #1
7000048e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
70000492:	4b1f      	ldr	r3, [pc, #124]	@ (70000510 <MX_GPIO_Init+0xd8>)
70000494:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
70000498:	60bb      	str	r3, [r7, #8]
7000049a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
7000049c:	4b1c      	ldr	r3, [pc, #112]	@ (70000510 <MX_GPIO_Init+0xd8>)
7000049e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
700004a2:	4a1b      	ldr	r2, [pc, #108]	@ (70000510 <MX_GPIO_Init+0xd8>)
700004a4:	f043 0308 	orr.w	r3, r3, #8
700004a8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
700004ac:	4b18      	ldr	r3, [pc, #96]	@ (70000510 <MX_GPIO_Init+0xd8>)
700004ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
700004b2:	607b      	str	r3, [r7, #4]
700004b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_RED_GPIO_Port, LD3_RED_Pin, GPIO_PIN_RESET);
700004b6:	2200      	movs	r2, #0
700004b8:	2180      	movs	r1, #128	@ 0x80
700004ba:	4816      	ldr	r0, [pc, #88]	@ (70000514 <MX_GPIO_Init+0xdc>)
700004bc:	f002 fe16 	bl	700030ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD2_YELLOW_Pin|LD1_GREEN_Pin, GPIO_PIN_RESET);
700004c0:	2200      	movs	r2, #0
700004c2:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
700004c6:	4814      	ldr	r0, [pc, #80]	@ (70000518 <MX_GPIO_Init+0xe0>)
700004c8:	f002 fe10 	bl	700030ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_RED_Pin;
700004cc:	2380      	movs	r3, #128	@ 0x80
700004ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
700004d0:	2301      	movs	r3, #1
700004d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
700004d4:	2300      	movs	r3, #0
700004d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
700004d8:	2300      	movs	r3, #0
700004da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_RED_GPIO_Port, &GPIO_InitStruct);
700004dc:	f107 0314 	add.w	r3, r7, #20
700004e0:	4619      	mov	r1, r3
700004e2:	480c      	ldr	r0, [pc, #48]	@ (70000514 <MX_GPIO_Init+0xdc>)
700004e4:	f002 fcac 	bl	70002e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LD2_YELLOW_Pin|LD1_GREEN_Pin;
700004e8:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
700004ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
700004ee:	2301      	movs	r3, #1
700004f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
700004f2:	2300      	movs	r3, #0
700004f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
700004f6:	2300      	movs	r3, #0
700004f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
700004fa:	f107 0314 	add.w	r3, r7, #20
700004fe:	4619      	mov	r1, r3
70000500:	4805      	ldr	r0, [pc, #20]	@ (70000518 <MX_GPIO_Init+0xe0>)
70000502:	f002 fc9d 	bl	70002e40 <HAL_GPIO_Init>

}
70000506:	bf00      	nop
70000508:	3728      	adds	r7, #40	@ 0x28
7000050a:	46bd      	mov	sp, r7
7000050c:	bd80      	pop	{r7, pc}
7000050e:	bf00      	nop
70000510:	58024400 	.word	0x58024400
70000514:	58020400 	.word	0x58020400
70000518:	58020c00 	.word	0x58020c00

7000051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
7000051c:	b580      	push	{r7, lr}
7000051e:	b084      	sub	sp, #16
70000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
70000522:	f000 f873 	bl	7000060c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
70000526:	4b38      	ldr	r3, [pc, #224]	@ (70000608 <main+0xec>)
70000528:	695b      	ldr	r3, [r3, #20]
7000052a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
7000052e:	2b00      	cmp	r3, #0
70000530:	d11b      	bne.n	7000056a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
70000532:	f3bf 8f4f 	dsb	sy
}
70000536:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
70000538:	f3bf 8f6f 	isb	sy
}
7000053c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
7000053e:	4b32      	ldr	r3, [pc, #200]	@ (70000608 <main+0xec>)
70000540:	2200      	movs	r2, #0
70000542:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
70000546:	f3bf 8f4f 	dsb	sy
}
7000054a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
7000054c:	f3bf 8f6f 	isb	sy
}
70000550:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
70000552:	4b2d      	ldr	r3, [pc, #180]	@ (70000608 <main+0xec>)
70000554:	695b      	ldr	r3, [r3, #20]
70000556:	4a2c      	ldr	r2, [pc, #176]	@ (70000608 <main+0xec>)
70000558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
7000055c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
7000055e:	f3bf 8f4f 	dsb	sy
}
70000562:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
70000564:	f3bf 8f6f 	isb	sy
}
70000568:	e000      	b.n	7000056c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
7000056a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
7000056c:	4b26      	ldr	r3, [pc, #152]	@ (70000608 <main+0xec>)
7000056e:	695b      	ldr	r3, [r3, #20]
70000570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
70000574:	2b00      	cmp	r3, #0
70000576:	d138      	bne.n	700005ea <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
70000578:	4b23      	ldr	r3, [pc, #140]	@ (70000608 <main+0xec>)
7000057a:	2200      	movs	r2, #0
7000057c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
70000580:	f3bf 8f4f 	dsb	sy
}
70000584:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
70000586:	4b20      	ldr	r3, [pc, #128]	@ (70000608 <main+0xec>)
70000588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
7000058c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
7000058e:	68fb      	ldr	r3, [r7, #12]
70000590:	0b5b      	lsrs	r3, r3, #13
70000592:	f3c3 030e 	ubfx	r3, r3, #0, #15
70000596:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
70000598:	68fb      	ldr	r3, [r7, #12]
7000059a:	08db      	lsrs	r3, r3, #3
7000059c:	f3c3 0309 	ubfx	r3, r3, #0, #10
700005a0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
700005a2:	68bb      	ldr	r3, [r7, #8]
700005a4:	015a      	lsls	r2, r3, #5
700005a6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
700005aa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
700005ac:	687a      	ldr	r2, [r7, #4]
700005ae:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
700005b0:	4915      	ldr	r1, [pc, #84]	@ (70000608 <main+0xec>)
700005b2:	4313      	orrs	r3, r2
700005b4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
700005b8:	687b      	ldr	r3, [r7, #4]
700005ba:	1e5a      	subs	r2, r3, #1
700005bc:	607a      	str	r2, [r7, #4]
700005be:	2b00      	cmp	r3, #0
700005c0:	d1ef      	bne.n	700005a2 <main+0x86>
    } while(sets-- != 0U);
700005c2:	68bb      	ldr	r3, [r7, #8]
700005c4:	1e5a      	subs	r2, r3, #1
700005c6:	60ba      	str	r2, [r7, #8]
700005c8:	2b00      	cmp	r3, #0
700005ca:	d1e5      	bne.n	70000598 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
700005cc:	f3bf 8f4f 	dsb	sy
}
700005d0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
700005d2:	4b0d      	ldr	r3, [pc, #52]	@ (70000608 <main+0xec>)
700005d4:	695b      	ldr	r3, [r3, #20]
700005d6:	4a0c      	ldr	r2, [pc, #48]	@ (70000608 <main+0xec>)
700005d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
700005dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
700005de:	f3bf 8f4f 	dsb	sy
}
700005e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
700005e4:	f3bf 8f6f 	isb	sy
}
700005e8:	e000      	b.n	700005ec <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
700005ea:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Update SystemCoreClock variable according to RCC registers values. */
  SystemCoreClockUpdate();
700005ec:	f000 fa4a 	bl	70000a84 <SystemCoreClockUpdate>

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
700005f0:	f000 fd0a 	bl	70001008 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
700005f4:	f7ff ff20 	bl	70000438 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
700005f8:	f005 f8a4 	bl	70005744 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
700005fc:	f7ff fec8 	bl	70000390 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
70000600:	f005 f8c6 	bl	70005790 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
70000604:	bf00      	nop
70000606:	e7fd      	b.n	70000604 <main+0xe8>
70000608:	e000ed00 	.word	0xe000ed00

7000060c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

static void MPU_Config(void)
{
7000060c:	b580      	push	{r7, lr}
7000060e:	b084      	sub	sp, #16
70000610:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
70000612:	463b      	mov	r3, r7
70000614:	2200      	movs	r2, #0
70000616:	601a      	str	r2, [r3, #0]
70000618:	605a      	str	r2, [r3, #4]
7000061a:	609a      	str	r2, [r3, #8]
7000061c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
7000061e:	f000 fe43 	bl	700012a8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
70000622:	2301      	movs	r3, #1
70000624:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
70000626:	2300      	movs	r3, #0
70000628:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
7000062a:	2300      	movs	r3, #0
7000062c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
7000062e:	231f      	movs	r3, #31
70000630:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
70000632:	2387      	movs	r3, #135	@ 0x87
70000634:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
70000636:	2300      	movs	r3, #0
70000638:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
7000063a:	2300      	movs	r3, #0
7000063c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
7000063e:	2301      	movs	r3, #1
70000640:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
70000642:	2300      	movs	r3, #0
70000644:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
70000646:	2300      	movs	r3, #0
70000648:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
7000064a:	2300      	movs	r3, #0
7000064c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
7000064e:	463b      	mov	r3, r7
70000650:	4618      	mov	r0, r3
70000652:	f000 fe47 	bl	700012e4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
70000656:	2301      	movs	r3, #1
70000658:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x70000000;
7000065a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
7000065e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
70000660:	231a      	movs	r3, #26
70000662:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
70000664:	2300      	movs	r3, #0
70000666:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
70000668:	2301      	movs	r3, #1
7000066a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
7000066c:	2303      	movs	r3, #3
7000066e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
70000670:	2300      	movs	r3, #0
70000672:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
70000674:	2301      	movs	r3, #1
70000676:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
70000678:	2301      	movs	r3, #1
7000067a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
7000067c:	2301      	movs	r3, #1
7000067e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
70000680:	463b      	mov	r3, r7
70000682:	4618      	mov	r0, r3
70000684:	f000 fe2e 	bl	700012e4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
70000688:	2302      	movs	r3, #2
7000068a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24020000;
7000068c:	4b18      	ldr	r3, [pc, #96]	@ (700006f0 <MPU_Config+0xe4>)
7000068e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
70000690:	230d      	movs	r3, #13
70000692:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
70000694:	2300      	movs	r3, #0
70000696:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
70000698:	2300      	movs	r3, #0
7000069a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
7000069c:	2300      	movs	r3, #0
7000069e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
700006a0:	463b      	mov	r3, r7
700006a2:	4618      	mov	r0, r3
700006a4:	f000 fe1e 	bl	700012e4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
700006a8:	2303      	movs	r3, #3
700006aa:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
700006ac:	2307      	movs	r3, #7
700006ae:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
700006b0:	2300      	movs	r3, #0
700006b2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
700006b4:	2301      	movs	r3, #1
700006b6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
700006b8:	463b      	mov	r3, r7
700006ba:	4618      	mov	r0, r3
700006bc:	f000 fe12 	bl	700012e4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
700006c0:	2304      	movs	r3, #4
700006c2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24040000;
700006c4:	4b0b      	ldr	r3, [pc, #44]	@ (700006f4 <MPU_Config+0xe8>)
700006c6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
700006c8:	230d      	movs	r3, #13
700006ca:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
700006cc:	2301      	movs	r3, #1
700006ce:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
700006d0:	2301      	movs	r3, #1
700006d2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
700006d4:	2300      	movs	r3, #0
700006d6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
700006d8:	463b      	mov	r3, r7
700006da:	4618      	mov	r0, r3
700006dc:	f000 fe02 	bl	700012e4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
700006e0:	2004      	movs	r0, #4
700006e2:	f000 fdbf 	bl	70001264 <HAL_MPU_Enable>

}
700006e6:	bf00      	nop
700006e8:	3710      	adds	r7, #16
700006ea:	46bd      	mov	sp, r7
700006ec:	bd80      	pop	{r7, pc}
700006ee:	bf00      	nop
700006f0:	24020000 	.word	0x24020000
700006f4:	24040000 	.word	0x24040000

700006f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
700006f8:	b580      	push	{r7, lr}
700006fa:	b082      	sub	sp, #8
700006fc:	af00      	add	r7, sp, #0
700006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
70000700:	687b      	ldr	r3, [r7, #4]
70000702:	681b      	ldr	r3, [r3, #0]
70000704:	4a04      	ldr	r2, [pc, #16]	@ (70000718 <HAL_TIM_PeriodElapsedCallback+0x20>)
70000706:	4293      	cmp	r3, r2
70000708:	d101      	bne.n	7000070e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
7000070a:	f000 fc95 	bl	70001038 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
7000070e:	bf00      	nop
70000710:	3708      	adds	r7, #8
70000712:	46bd      	mov	sp, r7
70000714:	bd80      	pop	{r7, pc}
70000716:	bf00      	nop
70000718:	40001000 	.word	0x40001000

7000071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
7000071c:	b480      	push	{r7}
7000071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
70000720:	b672      	cpsid	i
}
70000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
70000724:	bf00      	nop
70000726:	e7fd      	b.n	70000724 <Error_Handler+0x8>

70000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
70000728:	b580      	push	{r7, lr}
7000072a:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
7000072c:	2200      	movs	r2, #0
7000072e:	210f      	movs	r1, #15
70000730:	f06f 0001 	mvn.w	r0, #1
70000734:	f000 fd6e 	bl	70001214 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
70000738:	bf00      	nop
7000073a:	bd80      	pop	{r7, pc}

7000073c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
7000073c:	b580      	push	{r7, lr}
7000073e:	b090      	sub	sp, #64	@ 0x40
70000740:	af00      	add	r7, sp, #0
70000742:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     Status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
70000744:	4b41      	ldr	r3, [pc, #260]	@ (7000084c <HAL_InitTick+0x110>)
70000746:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
7000074a:	4a40      	ldr	r2, [pc, #256]	@ (7000084c <HAL_InitTick+0x110>)
7000074c:	f043 0310 	orr.w	r3, r3, #16
70000750:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
70000754:	4b3d      	ldr	r3, [pc, #244]	@ (7000084c <HAL_InitTick+0x110>)
70000756:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
7000075a:	60bb      	str	r3, [r7, #8]
7000075c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
7000075e:	f107 020c 	add.w	r2, r7, #12
70000762:	f107 0310 	add.w	r3, r7, #16
70000766:	4611      	mov	r1, r2
70000768:	4618      	mov	r0, r3
7000076a:	f002 fe9b 	bl	700034a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
7000076e:	6a3b      	ldr	r3, [r7, #32]
70000770:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_APB1_DIV1)
70000772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70000774:	2b00      	cmp	r3, #0
70000776:	d103      	bne.n	70000780 <HAL_InitTick+0x44>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
70000778:	f002 fe78 	bl	7000346c <HAL_RCC_GetPCLK1Freq>
7000077c:	63f8      	str	r0, [r7, #60]	@ 0x3c
7000077e:	e019      	b.n	700007b4 <HAL_InitTick+0x78>
  }
  else if (uwAPB1Prescaler == RCC_APB1_DIV2)
70000780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70000782:	2b04      	cmp	r3, #4
70000784:	d105      	bne.n	70000792 <HAL_InitTick+0x56>
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
70000786:	f002 fe71 	bl	7000346c <HAL_RCC_GetPCLK1Freq>
7000078a:	4603      	mov	r3, r0
7000078c:	005b      	lsls	r3, r3, #1
7000078e:	63fb      	str	r3, [r7, #60]	@ 0x3c
70000790:	e010      	b.n	700007b4 <HAL_InitTick+0x78>
  }
  else
  {
    if (__HAL_RCC_GET_TIMCLKPRESCALER() == RCC_TIMPRES_DISABLE)
70000792:	4b2e      	ldr	r3, [pc, #184]	@ (7000084c <HAL_InitTick+0x110>)
70000794:	691b      	ldr	r3, [r3, #16]
70000796:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
7000079a:	2b00      	cmp	r3, #0
7000079c:	d105      	bne.n	700007aa <HAL_InitTick+0x6e>
    {
      uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
7000079e:	f002 fe65 	bl	7000346c <HAL_RCC_GetPCLK1Freq>
700007a2:	4603      	mov	r3, r0
700007a4:	005b      	lsls	r3, r3, #1
700007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
700007a8:	e004      	b.n	700007b4 <HAL_InitTick+0x78>
    }
    else
    {
      uwTimclock = 4UL * HAL_RCC_GetPCLK1Freq();
700007aa:	f002 fe5f 	bl	7000346c <HAL_RCC_GetPCLK1Freq>
700007ae:	4603      	mov	r3, r0
700007b0:	009b      	lsls	r3, r3, #2
700007b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to TIM_CNT_FREQ */
  uwPrescalerValue = (uint32_t)((uwTimclock / TIM_CNT_FREQ) - 1U);
700007b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
700007b6:	4a26      	ldr	r2, [pc, #152]	@ (70000850 <HAL_InitTick+0x114>)
700007b8:	fba2 2303 	umull	r2, r3, r2, r3
700007bc:	0c9b      	lsrs	r3, r3, #18
700007be:	3b01      	subs	r3, #1
700007c0:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
700007c2:	4b24      	ldr	r3, [pc, #144]	@ (70000854 <HAL_InitTick+0x118>)
700007c4:	4a24      	ldr	r2, [pc, #144]	@ (70000858 <HAL_InitTick+0x11c>)
700007c6:	601a      	str	r2, [r3, #0]
  + Period = [uwTickFreq * (TIM_CNT_FREQ/TIM_FREQ) - 1]. to have a (uwTickFreq/TIM_FREQ) s time base.
  + Prescaler = (uwTimclock/TIM_CNT_FREQ - 1) to have a TIM_CNT_FREQ counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = ((uint32_t)uwTickFreq  * (TIM_CNT_FREQ / TIM_FREQ)) - 1U;
700007c8:	4b24      	ldr	r3, [pc, #144]	@ (7000085c <HAL_InitTick+0x120>)
700007ca:	781b      	ldrb	r3, [r3, #0]
700007cc:	461a      	mov	r2, r3
700007ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
700007d2:	fb02 f303 	mul.w	r3, r2, r3
700007d6:	3b01      	subs	r3, #1
700007d8:	4a1e      	ldr	r2, [pc, #120]	@ (70000854 <HAL_InitTick+0x118>)
700007da:	60d3      	str	r3, [r2, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
700007dc:	4a1d      	ldr	r2, [pc, #116]	@ (70000854 <HAL_InitTick+0x118>)
700007de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700007e0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
700007e2:	4b1c      	ldr	r3, [pc, #112]	@ (70000854 <HAL_InitTick+0x118>)
700007e4:	2200      	movs	r2, #0
700007e6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
700007e8:	4b1a      	ldr	r3, [pc, #104]	@ (70000854 <HAL_InitTick+0x118>)
700007ea:	2200      	movs	r2, #0
700007ec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
700007ee:	4b19      	ldr	r3, [pc, #100]	@ (70000854 <HAL_InitTick+0x118>)
700007f0:	2200      	movs	r2, #0
700007f2:	619a      	str	r2, [r3, #24]
  Status = HAL_TIM_Base_Init(&htim6);
700007f4:	4817      	ldr	r0, [pc, #92]	@ (70000854 <HAL_InitTick+0x118>)
700007f6:	f003 fd9b 	bl	70004330 <HAL_TIM_Base_Init>
700007fa:	4603      	mov	r3, r0
700007fc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (Status == HAL_OK)
70000800:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
70000804:	2b00      	cmp	r3, #0
70000806:	d11b      	bne.n	70000840 <HAL_InitTick+0x104>
  {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1U)
    HAL_TIM_RegisterCallback(&htim6, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    /* Start the TIM time Base generation in interrupt mode */
    Status = HAL_TIM_Base_Start_IT(&htim6);
70000808:	4812      	ldr	r0, [pc, #72]	@ (70000854 <HAL_InitTick+0x118>)
7000080a:	f003 fdf3 	bl	700043f4 <HAL_TIM_Base_Start_IT>
7000080e:	4603      	mov	r3, r0
70000810:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    if (Status == HAL_OK)
70000814:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
70000818:	2b00      	cmp	r3, #0
7000081a:	d111      	bne.n	70000840 <HAL_InitTick+0x104>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
7000081c:	687b      	ldr	r3, [r7, #4]
7000081e:	2b0f      	cmp	r3, #15
70000820:	d80b      	bhi.n	7000083a <HAL_InitTick+0xfe>
      {
        /* Configure the TIM6 global Interrupt priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0);
70000822:	2200      	movs	r2, #0
70000824:	6879      	ldr	r1, [r7, #4]
70000826:	2037      	movs	r0, #55	@ 0x37
70000828:	f000 fcf4 	bl	70001214 <HAL_NVIC_SetPriority>

        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
7000082c:	2037      	movs	r0, #55	@ 0x37
7000082e:	f000 fd0b 	bl	70001248 <HAL_NVIC_EnableIRQ>

        uwTickPrio = TickPriority;
70000832:	4a0b      	ldr	r2, [pc, #44]	@ (70000860 <HAL_InitTick+0x124>)
70000834:	687b      	ldr	r3, [r7, #4]
70000836:	6013      	str	r3, [r2, #0]
70000838:	e002      	b.n	70000840 <HAL_InitTick+0x104>
      }
      else
      {
        Status = HAL_ERROR;
7000083a:	2301      	movs	r3, #1
7000083c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      }
    }
  }

  /* Return function status */
  return Status;
70000840:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
70000844:	4618      	mov	r0, r3
70000846:	3740      	adds	r7, #64	@ 0x40
70000848:	46bd      	mov	sp, r7
7000084a:	bd80      	pop	{r7, pc}
7000084c:	58024400 	.word	0x58024400
70000850:	431bde83 	.word	0x431bde83
70000854:	240000b4 	.word	0x240000b4
70000858:	40001000 	.word	0x40001000
7000085c:	24000008 	.word	0x24000008
70000860:	24000004 	.word	0x24000004

70000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
70000864:	b480      	push	{r7}
70000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
70000868:	bf00      	nop
7000086a:	e7fd      	b.n	70000868 <NMI_Handler+0x4>

7000086c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
7000086c:	b480      	push	{r7}
7000086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
70000870:	bf00      	nop
70000872:	e7fd      	b.n	70000870 <HardFault_Handler+0x4>

70000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
70000874:	b480      	push	{r7}
70000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
70000878:	bf00      	nop
7000087a:	e7fd      	b.n	70000878 <MemManage_Handler+0x4>

7000087c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
7000087c:	b480      	push	{r7}
7000087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
70000880:	bf00      	nop
70000882:	e7fd      	b.n	70000880 <BusFault_Handler+0x4>

70000884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
70000884:	b480      	push	{r7}
70000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
70000888:	bf00      	nop
7000088a:	e7fd      	b.n	70000888 <UsageFault_Handler+0x4>

7000088c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
7000088c:	b480      	push	{r7}
7000088e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
70000890:	bf00      	nop
70000892:	46bd      	mov	sp, r7
70000894:	f85d 7b04 	ldr.w	r7, [sp], #4
70000898:	4770      	bx	lr
	...

7000089c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
7000089c:	b580      	push	{r7, lr}
7000089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
700008a0:	4802      	ldr	r0, [pc, #8]	@ (700008ac <TIM6_IRQHandler+0x10>)
700008a2:	f003 fe1d 	bl	700044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
700008a6:	bf00      	nop
700008a8:	bd80      	pop	{r7, pc}
700008aa:	bf00      	nop
700008ac:	240000b4 	.word	0x240000b4

700008b0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
700008b0:	b580      	push	{r7, lr}
700008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
700008b4:	4802      	ldr	r0, [pc, #8]	@ (700008c0 <ETH_IRQHandler+0x10>)
700008b6:	f001 f92d 	bl	70001b14 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
700008ba:	bf00      	nop
700008bc:	bd80      	pop	{r7, pc}
700008be:	bf00      	nop
700008c0:	24000188 	.word	0x24000188

700008c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
700008c4:	b480      	push	{r7}
700008c6:	af00      	add	r7, sp, #0
  return 1;
700008c8:	2301      	movs	r3, #1
}
700008ca:	4618      	mov	r0, r3
700008cc:	46bd      	mov	sp, r7
700008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
700008d2:	4770      	bx	lr

700008d4 <_kill>:

int _kill(int pid, int sig)
{
700008d4:	b480      	push	{r7}
700008d6:	b083      	sub	sp, #12
700008d8:	af00      	add	r7, sp, #0
700008da:	6078      	str	r0, [r7, #4]
700008dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
700008de:	4b05      	ldr	r3, [pc, #20]	@ (700008f4 <_kill+0x20>)
700008e0:	2216      	movs	r2, #22
700008e2:	601a      	str	r2, [r3, #0]
  return -1;
700008e4:	f04f 33ff 	mov.w	r3, #4294967295
}
700008e8:	4618      	mov	r0, r3
700008ea:	370c      	adds	r7, #12
700008ec:	46bd      	mov	sp, r7
700008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
700008f2:	4770      	bx	lr
700008f4:	24008624 	.word	0x24008624

700008f8 <_exit>:

void _exit (int status)
{
700008f8:	b580      	push	{r7, lr}
700008fa:	b082      	sub	sp, #8
700008fc:	af00      	add	r7, sp, #0
700008fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
70000900:	f04f 31ff 	mov.w	r1, #4294967295
70000904:	6878      	ldr	r0, [r7, #4]
70000906:	f7ff ffe5 	bl	700008d4 <_kill>
  while (1) {}    /* Make sure we hang here */
7000090a:	bf00      	nop
7000090c:	e7fd      	b.n	7000090a <_exit+0x12>

7000090e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
7000090e:	b580      	push	{r7, lr}
70000910:	b086      	sub	sp, #24
70000912:	af00      	add	r7, sp, #0
70000914:	60f8      	str	r0, [r7, #12]
70000916:	60b9      	str	r1, [r7, #8]
70000918:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
7000091a:	2300      	movs	r3, #0
7000091c:	617b      	str	r3, [r7, #20]
7000091e:	e00a      	b.n	70000936 <_read+0x28>
  {
    *ptr++ = __io_getchar();
70000920:	f3af 8000 	nop.w
70000924:	4601      	mov	r1, r0
70000926:	68bb      	ldr	r3, [r7, #8]
70000928:	1c5a      	adds	r2, r3, #1
7000092a:	60ba      	str	r2, [r7, #8]
7000092c:	b2ca      	uxtb	r2, r1
7000092e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
70000930:	697b      	ldr	r3, [r7, #20]
70000932:	3301      	adds	r3, #1
70000934:	617b      	str	r3, [r7, #20]
70000936:	697a      	ldr	r2, [r7, #20]
70000938:	687b      	ldr	r3, [r7, #4]
7000093a:	429a      	cmp	r2, r3
7000093c:	dbf0      	blt.n	70000920 <_read+0x12>
  }

  return len;
7000093e:	687b      	ldr	r3, [r7, #4]
}
70000940:	4618      	mov	r0, r3
70000942:	3718      	adds	r7, #24
70000944:	46bd      	mov	sp, r7
70000946:	bd80      	pop	{r7, pc}

70000948 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
70000948:	b580      	push	{r7, lr}
7000094a:	b086      	sub	sp, #24
7000094c:	af00      	add	r7, sp, #0
7000094e:	60f8      	str	r0, [r7, #12]
70000950:	60b9      	str	r1, [r7, #8]
70000952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
70000954:	2300      	movs	r3, #0
70000956:	617b      	str	r3, [r7, #20]
70000958:	e009      	b.n	7000096e <_write+0x26>
  {
    __io_putchar(*ptr++);
7000095a:	68bb      	ldr	r3, [r7, #8]
7000095c:	1c5a      	adds	r2, r3, #1
7000095e:	60ba      	str	r2, [r7, #8]
70000960:	781b      	ldrb	r3, [r3, #0]
70000962:	4618      	mov	r0, r3
70000964:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
70000968:	697b      	ldr	r3, [r7, #20]
7000096a:	3301      	adds	r3, #1
7000096c:	617b      	str	r3, [r7, #20]
7000096e:	697a      	ldr	r2, [r7, #20]
70000970:	687b      	ldr	r3, [r7, #4]
70000972:	429a      	cmp	r2, r3
70000974:	dbf1      	blt.n	7000095a <_write+0x12>
  }
  return len;
70000976:	687b      	ldr	r3, [r7, #4]
}
70000978:	4618      	mov	r0, r3
7000097a:	3718      	adds	r7, #24
7000097c:	46bd      	mov	sp, r7
7000097e:	bd80      	pop	{r7, pc}

70000980 <_close>:

int _close(int file)
{
70000980:	b480      	push	{r7}
70000982:	b083      	sub	sp, #12
70000984:	af00      	add	r7, sp, #0
70000986:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
70000988:	f04f 33ff 	mov.w	r3, #4294967295
}
7000098c:	4618      	mov	r0, r3
7000098e:	370c      	adds	r7, #12
70000990:	46bd      	mov	sp, r7
70000992:	f85d 7b04 	ldr.w	r7, [sp], #4
70000996:	4770      	bx	lr

70000998 <_fstat>:


int _fstat(int file, struct stat *st)
{
70000998:	b480      	push	{r7}
7000099a:	b083      	sub	sp, #12
7000099c:	af00      	add	r7, sp, #0
7000099e:	6078      	str	r0, [r7, #4]
700009a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
700009a2:	683b      	ldr	r3, [r7, #0]
700009a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
700009a8:	605a      	str	r2, [r3, #4]
  return 0;
700009aa:	2300      	movs	r3, #0
}
700009ac:	4618      	mov	r0, r3
700009ae:	370c      	adds	r7, #12
700009b0:	46bd      	mov	sp, r7
700009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
700009b6:	4770      	bx	lr

700009b8 <_isatty>:

int _isatty(int file)
{
700009b8:	b480      	push	{r7}
700009ba:	b083      	sub	sp, #12
700009bc:	af00      	add	r7, sp, #0
700009be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
700009c0:	2301      	movs	r3, #1
}
700009c2:	4618      	mov	r0, r3
700009c4:	370c      	adds	r7, #12
700009c6:	46bd      	mov	sp, r7
700009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
700009cc:	4770      	bx	lr

700009ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
700009ce:	b480      	push	{r7}
700009d0:	b085      	sub	sp, #20
700009d2:	af00      	add	r7, sp, #0
700009d4:	60f8      	str	r0, [r7, #12]
700009d6:	60b9      	str	r1, [r7, #8]
700009d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
700009da:	2300      	movs	r3, #0
}
700009dc:	4618      	mov	r0, r3
700009de:	3714      	adds	r7, #20
700009e0:	46bd      	mov	sp, r7
700009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
700009e6:	4770      	bx	lr

700009e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
700009e8:	b480      	push	{r7}
700009ea:	b087      	sub	sp, #28
700009ec:	af00      	add	r7, sp, #0
700009ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
700009f0:	4a14      	ldr	r2, [pc, #80]	@ (70000a44 <_sbrk+0x5c>)
700009f2:	4b15      	ldr	r3, [pc, #84]	@ (70000a48 <_sbrk+0x60>)
700009f4:	1ad3      	subs	r3, r2, r3
700009f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
700009f8:	697b      	ldr	r3, [r7, #20]
700009fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
700009fc:	4b13      	ldr	r3, [pc, #76]	@ (70000a4c <_sbrk+0x64>)
700009fe:	681b      	ldr	r3, [r3, #0]
70000a00:	2b00      	cmp	r3, #0
70000a02:	d102      	bne.n	70000a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
70000a04:	4b11      	ldr	r3, [pc, #68]	@ (70000a4c <_sbrk+0x64>)
70000a06:	4a12      	ldr	r2, [pc, #72]	@ (70000a50 <_sbrk+0x68>)
70000a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
70000a0a:	4b10      	ldr	r3, [pc, #64]	@ (70000a4c <_sbrk+0x64>)
70000a0c:	681a      	ldr	r2, [r3, #0]
70000a0e:	687b      	ldr	r3, [r7, #4]
70000a10:	4413      	add	r3, r2
70000a12:	693a      	ldr	r2, [r7, #16]
70000a14:	429a      	cmp	r2, r3
70000a16:	d205      	bcs.n	70000a24 <_sbrk+0x3c>
  {
    errno = ENOMEM;
70000a18:	4b0e      	ldr	r3, [pc, #56]	@ (70000a54 <_sbrk+0x6c>)
70000a1a:	220c      	movs	r2, #12
70000a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
70000a1e:	f04f 33ff 	mov.w	r3, #4294967295
70000a22:	e009      	b.n	70000a38 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
70000a24:	4b09      	ldr	r3, [pc, #36]	@ (70000a4c <_sbrk+0x64>)
70000a26:	681b      	ldr	r3, [r3, #0]
70000a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
70000a2a:	4b08      	ldr	r3, [pc, #32]	@ (70000a4c <_sbrk+0x64>)
70000a2c:	681a      	ldr	r2, [r3, #0]
70000a2e:	687b      	ldr	r3, [r7, #4]
70000a30:	4413      	add	r3, r2
70000a32:	4a06      	ldr	r2, [pc, #24]	@ (70000a4c <_sbrk+0x64>)
70000a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
70000a36:	68fb      	ldr	r3, [r7, #12]
}
70000a38:	4618      	mov	r0, r3
70000a3a:	371c      	adds	r7, #28
70000a3c:	46bd      	mov	sp, r7
70000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
70000a42:	4770      	bx	lr
70000a44:	20010000 	.word	0x20010000
70000a48:	00000400 	.word	0x00000400
70000a4c:	24000100 	.word	0x24000100
70000a50:	20000000 	.word	0x20000000
70000a54:	24008624 	.word	0x24008624

70000a58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
70000a58:	b480      	push	{r7}
70000a5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = INTVECT_START;
70000a5c:	4b07      	ldr	r3, [pc, #28]	@ (70000a7c <SystemInit+0x24>)
70000a5e:	4a08      	ldr	r2, [pc, #32]	@ (70000a80 <SystemInit+0x28>)
70000a60:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
70000a62:	4b06      	ldr	r3, [pc, #24]	@ (70000a7c <SystemInit+0x24>)
70000a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
70000a68:	4a04      	ldr	r2, [pc, #16]	@ (70000a7c <SystemInit+0x24>)
70000a6a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
70000a6e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
70000a72:	bf00      	nop
70000a74:	46bd      	mov	sp, r7
70000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
70000a7a:	4770      	bx	lr
70000a7c:	e000ed00 	.word	0xe000ed00
70000a80:	70000000 	.word	0x70000000

70000a84 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
70000a84:	b480      	push	{r7}
70000a86:	b089      	sub	sp, #36	@ 0x24
70000a88:	af00      	add	r7, sp, #0
  uint32_t sysclk, hsivalue, pllsource, pllm, pllp, core_presc;
  float_t pllfracn, pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
70000a8a:	4b92      	ldr	r3, [pc, #584]	@ (70000cd4 <SystemCoreClockUpdate+0x250>)
70000a8c:	691b      	ldr	r3, [r3, #16]
70000a8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
70000a92:	2b18      	cmp	r3, #24
70000a94:	f200 80fb 	bhi.w	70000c8e <SystemCoreClockUpdate+0x20a>
70000a98:	a201      	add	r2, pc, #4	@ (adr r2, 70000aa0 <SystemCoreClockUpdate+0x1c>)
70000a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70000a9e:	bf00      	nop
70000aa0:	70000b05 	.word	0x70000b05
70000aa4:	70000c8f 	.word	0x70000c8f
70000aa8:	70000c8f 	.word	0x70000c8f
70000aac:	70000c8f 	.word	0x70000c8f
70000ab0:	70000c8f 	.word	0x70000c8f
70000ab4:	70000c8f 	.word	0x70000c8f
70000ab8:	70000c8f 	.word	0x70000c8f
70000abc:	70000c8f 	.word	0x70000c8f
70000ac0:	70000b19 	.word	0x70000b19
70000ac4:	70000c8f 	.word	0x70000c8f
70000ac8:	70000c8f 	.word	0x70000c8f
70000acc:	70000c8f 	.word	0x70000c8f
70000ad0:	70000c8f 	.word	0x70000c8f
70000ad4:	70000c8f 	.word	0x70000c8f
70000ad8:	70000c8f 	.word	0x70000c8f
70000adc:	70000c8f 	.word	0x70000c8f
70000ae0:	70000b1f 	.word	0x70000b1f
70000ae4:	70000c8f 	.word	0x70000c8f
70000ae8:	70000c8f 	.word	0x70000c8f
70000aec:	70000c8f 	.word	0x70000c8f
70000af0:	70000c8f 	.word	0x70000c8f
70000af4:	70000c8f 	.word	0x70000c8f
70000af8:	70000c8f 	.word	0x70000c8f
70000afc:	70000c8f 	.word	0x70000c8f
70000b00:	70000b25 	.word	0x70000b25
  {
  case 0x00:  /* HSI used as system clock source (default after reset) */
    sysclk = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos));
70000b04:	4b73      	ldr	r3, [pc, #460]	@ (70000cd4 <SystemCoreClockUpdate+0x250>)
70000b06:	681b      	ldr	r3, [r3, #0]
70000b08:	08db      	lsrs	r3, r3, #3
70000b0a:	f003 0303 	and.w	r3, r3, #3
70000b0e:	4a72      	ldr	r2, [pc, #456]	@ (70000cd8 <SystemCoreClockUpdate+0x254>)
70000b10:	fa22 f303 	lsr.w	r3, r2, r3
70000b14:	61fb      	str	r3, [r7, #28]
    break;
70000b16:	e0c4      	b.n	70000ca2 <SystemCoreClockUpdate+0x21e>

  case 0x08:  /* CSI used as system clock source */
    sysclk = CSI_VALUE;
70000b18:	4b70      	ldr	r3, [pc, #448]	@ (70000cdc <SystemCoreClockUpdate+0x258>)
70000b1a:	61fb      	str	r3, [r7, #28]
    break;
70000b1c:	e0c1      	b.n	70000ca2 <SystemCoreClockUpdate+0x21e>

  case 0x10:  /* HSE used as system clock source */
    sysclk = HSE_VALUE;
70000b1e:	4b70      	ldr	r3, [pc, #448]	@ (70000ce0 <SystemCoreClockUpdate+0x25c>)
70000b20:	61fb      	str	r3, [r7, #28]
    break;
70000b22:	e0be      	b.n	70000ca2 <SystemCoreClockUpdate+0x21e>

  case 0x18:  /* PLL1 used as system clock  source */
    /* PLL1_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL1_VCO / PLL1R
       */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
70000b24:	4b6b      	ldr	r3, [pc, #428]	@ (70000cd4 <SystemCoreClockUpdate+0x250>)
70000b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70000b28:	f003 0303 	and.w	r3, r3, #3
70000b2c:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
70000b2e:	4b69      	ldr	r3, [pc, #420]	@ (70000cd4 <SystemCoreClockUpdate+0x250>)
70000b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70000b32:	091b      	lsrs	r3, r3, #4
70000b34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
70000b38:	60fb      	str	r3, [r7, #12]
    if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) != 0U)
70000b3a:	4b66      	ldr	r3, [pc, #408]	@ (70000cd4 <SystemCoreClockUpdate+0x250>)
70000b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70000b3e:	f003 0301 	and.w	r3, r3, #1
70000b42:	2b00      	cmp	r3, #0
70000b44:	d00b      	beq.n	70000b5e <SystemCoreClockUpdate+0xda>
    {
      pllfracn = (float_t)(uint32_t)(((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN)>> RCC_PLL1FRACR_FRACN_Pos));
70000b46:	4b63      	ldr	r3, [pc, #396]	@ (70000cd4 <SystemCoreClockUpdate+0x250>)
70000b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
70000b4a:	08db      	lsrs	r3, r3, #3
70000b4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
70000b50:	ee07 3a90 	vmov	s15, r3
70000b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
70000b58:	edc7 7a06 	vstr	s15, [r7, #24]
70000b5c:	e002      	b.n	70000b64 <SystemCoreClockUpdate+0xe0>
    }
    else
    {
      pllfracn = (float_t)0U;
70000b5e:	f04f 0300 	mov.w	r3, #0
70000b62:	61bb      	str	r3, [r7, #24]
    }

    if (pllm != 0U)
70000b64:	68fb      	ldr	r3, [r7, #12]
70000b66:	2b00      	cmp	r3, #0
70000b68:	f000 808e 	beq.w	70000c88 <SystemCoreClockUpdate+0x204>
70000b6c:	693b      	ldr	r3, [r7, #16]
70000b6e:	2b01      	cmp	r3, #1
70000b70:	d024      	beq.n	70000bbc <SystemCoreClockUpdate+0x138>
70000b72:	693b      	ldr	r3, [r7, #16]
70000b74:	2b02      	cmp	r3, #2
70000b76:	d143      	bne.n	70000c00 <SystemCoreClockUpdate+0x17c>
    {
      switch (pllsource)
      {
      case 0x02:  /* HSE used as PLL1 clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (pllfracn/(float_t)0x2000) +(float_t)1 );
70000b78:	68fb      	ldr	r3, [r7, #12]
70000b7a:	ee07 3a90 	vmov	s15, r3
70000b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
70000b82:	eddf 6a58 	vldr	s13, [pc, #352]	@ 70000ce4 <SystemCoreClockUpdate+0x260>
70000b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70000b8a:	4b52      	ldr	r3, [pc, #328]	@ (70000cd4 <SystemCoreClockUpdate+0x250>)
70000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70000b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
70000b92:	ee07 3a90 	vmov	s15, r3
70000b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
70000b9a:	ed97 6a06 	vldr	s12, [r7, #24]
70000b9e:	eddf 5a52 	vldr	s11, [pc, #328]	@ 70000ce8 <SystemCoreClockUpdate+0x264>
70000ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
70000ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
70000baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70000bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
70000bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
70000bb6:	edc7 7a05 	vstr	s15, [r7, #20]
        break;
70000bba:	e04f      	b.n	70000c5c <SystemCoreClockUpdate+0x1d8>

      case 0x01:  /* CSI used as PLL1 clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (pllfracn/(float_t)0x2000) +(float_t)1 );
70000bbc:	68fb      	ldr	r3, [r7, #12]
70000bbe:	ee07 3a90 	vmov	s15, r3
70000bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
70000bc6:	eddf 6a49 	vldr	s13, [pc, #292]	@ 70000cec <SystemCoreClockUpdate+0x268>
70000bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70000bce:	4b41      	ldr	r3, [pc, #260]	@ (70000cd4 <SystemCoreClockUpdate+0x250>)
70000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70000bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
70000bd6:	ee07 3a90 	vmov	s15, r3
70000bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
70000bde:	ed97 6a06 	vldr	s12, [r7, #24]
70000be2:	eddf 5a41 	vldr	s11, [pc, #260]	@ 70000ce8 <SystemCoreClockUpdate+0x264>
70000be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
70000bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
70000bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70000bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
70000bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
70000bfa:	edc7 7a05 	vstr	s15, [r7, #20]
        break;
70000bfe:	e02d      	b.n	70000c5c <SystemCoreClockUpdate+0x1d8>

      case 0x00:  /* HSI used as PLL1 clock source */
      default:
        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos));
70000c00:	4b34      	ldr	r3, [pc, #208]	@ (70000cd4 <SystemCoreClockUpdate+0x250>)
70000c02:	681b      	ldr	r3, [r3, #0]
70000c04:	08db      	lsrs	r3, r3, #3
70000c06:	f003 0303 	and.w	r3, r3, #3
70000c0a:	4a33      	ldr	r2, [pc, #204]	@ (70000cd8 <SystemCoreClockUpdate+0x254>)
70000c0c:	fa22 f303 	lsr.w	r3, r2, r3
70000c10:	60bb      	str	r3, [r7, #8]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (pllfracn/(float_t)0x2000) +(float_t)1 );
70000c12:	68bb      	ldr	r3, [r7, #8]
70000c14:	ee07 3a90 	vmov	s15, r3
70000c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
70000c1c:	68fb      	ldr	r3, [r7, #12]
70000c1e:	ee07 3a90 	vmov	s15, r3
70000c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
70000c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70000c2a:	4b2a      	ldr	r3, [pc, #168]	@ (70000cd4 <SystemCoreClockUpdate+0x250>)
70000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70000c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
70000c32:	ee07 3a90 	vmov	s15, r3
70000c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
70000c3a:	ed97 6a06 	vldr	s12, [r7, #24]
70000c3e:	eddf 5a2a 	vldr	s11, [pc, #168]	@ 70000ce8 <SystemCoreClockUpdate+0x264>
70000c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
70000c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
70000c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70000c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
70000c52:	ee67 7a27 	vmul.f32	s15, s14, s15
70000c56:	edc7 7a05 	vstr	s15, [r7, #20]
        break;
70000c5a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U ) ;
70000c5c:	4b1d      	ldr	r3, [pc, #116]	@ (70000cd4 <SystemCoreClockUpdate+0x250>)
70000c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70000c60:	0a5b      	lsrs	r3, r3, #9
70000c62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
70000c66:	3301      	adds	r3, #1
70000c68:	607b      	str	r3, [r7, #4]
      sysclk =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
70000c6a:	687b      	ldr	r3, [r7, #4]
70000c6c:	ee07 3a90 	vmov	s15, r3
70000c70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
70000c74:	edd7 6a05 	vldr	s13, [r7, #20]
70000c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
70000c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
70000c80:	ee17 3a90 	vmov	r3, s15
70000c84:	61fb      	str	r3, [r7, #28]
    }
    else
    {
      sysclk = 0U;
    }
    break;
70000c86:	e00c      	b.n	70000ca2 <SystemCoreClockUpdate+0x21e>
      sysclk = 0U;
70000c88:	2300      	movs	r3, #0
70000c8a:	61fb      	str	r3, [r7, #28]
    break;
70000c8c:	e009      	b.n	70000ca2 <SystemCoreClockUpdate+0x21e>

  default:  /* Unexpected, default to HSI used as system clock source (default after reset) */
    sysclk = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos));
70000c8e:	4b11      	ldr	r3, [pc, #68]	@ (70000cd4 <SystemCoreClockUpdate+0x250>)
70000c90:	681b      	ldr	r3, [r3, #0]
70000c92:	08db      	lsrs	r3, r3, #3
70000c94:	f003 0303 	and.w	r3, r3, #3
70000c98:	4a0f      	ldr	r2, [pc, #60]	@ (70000cd8 <SystemCoreClockUpdate+0x254>)
70000c9a:	fa22 f303 	lsr.w	r3, r2, r3
70000c9e:	61fb      	str	r3, [r7, #28]
    break;
70000ca0:	bf00      	nop
  }

  /* system clock frequency : CM7 CPU frequency  */
  core_presc = (RCC->CDCFGR & RCC_CDCFGR_CPRE);
70000ca2:	4b0c      	ldr	r3, [pc, #48]	@ (70000cd4 <SystemCoreClockUpdate+0x250>)
70000ca4:	699b      	ldr	r3, [r3, #24]
70000ca6:	f003 030f 	and.w	r3, r3, #15
70000caa:	603b      	str	r3, [r7, #0]
  if (core_presc >= 8U)
70000cac:	683b      	ldr	r3, [r7, #0]
70000cae:	2b07      	cmp	r3, #7
70000cb0:	d907      	bls.n	70000cc2 <SystemCoreClockUpdate+0x23e>
  {
    SystemCoreClock = (sysclk >> (core_presc - RCC_CDCFGR_CPRE_3 + 1U));
70000cb2:	683b      	ldr	r3, [r7, #0]
70000cb4:	3b07      	subs	r3, #7
70000cb6:	69fa      	ldr	r2, [r7, #28]
70000cb8:	fa22 f303 	lsr.w	r3, r2, r3
70000cbc:	4a0c      	ldr	r2, [pc, #48]	@ (70000cf0 <SystemCoreClockUpdate+0x26c>)
70000cbe:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock = sysclk;
  }
}
70000cc0:	e002      	b.n	70000cc8 <SystemCoreClockUpdate+0x244>
    SystemCoreClock = sysclk;
70000cc2:	4a0b      	ldr	r2, [pc, #44]	@ (70000cf0 <SystemCoreClockUpdate+0x26c>)
70000cc4:	69fb      	ldr	r3, [r7, #28]
70000cc6:	6013      	str	r3, [r2, #0]
}
70000cc8:	bf00      	nop
70000cca:	3724      	adds	r7, #36	@ 0x24
70000ccc:	46bd      	mov	sp, r7
70000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
70000cd2:	4770      	bx	lr
70000cd4:	58024400 	.word	0x58024400
70000cd8:	03d09000 	.word	0x03d09000
70000cdc:	003d0900 	.word	0x003d0900
70000ce0:	016e3600 	.word	0x016e3600
70000ce4:	4bb71b00 	.word	0x4bb71b00
70000ce8:	46000000 	.word	0x46000000
70000cec:	4a742400 	.word	0x4a742400
70000cf0:	24000000 	.word	0x24000000

70000cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
70000cf4:	480d      	ldr	r0, [pc, #52]	@ (70000d2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
70000cf6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
70000cf8:	f7ff feae 	bl	70000a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
70000cfc:	480c      	ldr	r0, [pc, #48]	@ (70000d30 <LoopForever+0x6>)
  ldr r1, =_edata
70000cfe:	490d      	ldr	r1, [pc, #52]	@ (70000d34 <LoopForever+0xa>)
  ldr r2, =_sidata
70000d00:	4a0d      	ldr	r2, [pc, #52]	@ (70000d38 <LoopForever+0xe>)
  movs r3, #0
70000d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
70000d04:	e002      	b.n	70000d0c <LoopCopyDataInit>

70000d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
70000d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
70000d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
70000d0a:	3304      	adds	r3, #4

70000d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
70000d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
70000d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
70000d10:	d3f9      	bcc.n	70000d06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
70000d12:	4a0a      	ldr	r2, [pc, #40]	@ (70000d3c <LoopForever+0x12>)
  ldr r4, =_ebss
70000d14:	4c0a      	ldr	r4, [pc, #40]	@ (70000d40 <LoopForever+0x16>)
  movs r3, #0
70000d16:	2300      	movs	r3, #0
  b LoopFillZerobss
70000d18:	e001      	b.n	70000d1e <LoopFillZerobss>

70000d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
70000d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
70000d1c:	3204      	adds	r2, #4

70000d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
70000d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
70000d20:	d3fb      	bcc.n	70000d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
70000d22:	f013 f907 	bl	70013f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
70000d26:	f7ff fbf9 	bl	7000051c <main>

70000d2a <LoopForever>:

LoopForever:
  b LoopForever
70000d2a:	e7fe      	b.n	70000d2a <LoopForever>
  ldr   r0, =_estack
70000d2c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
70000d30:	24000000 	.word	0x24000000
  ldr r1, =_edata
70000d34:	24000090 	.word	0x24000090
  ldr r2, =_sidata
70000d38:	70017470 	.word	0x70017470
  ldr r2, =_sbss
70000d3c:	24000090 	.word	0x24000090
  ldr r4, =_ebss
70000d40:	24008634 	.word	0x24008634

70000d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
70000d44:	e7fe      	b.n	70000d44 <ADC1_2_IRQHandler>

70000d46 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
70000d46:	b480      	push	{r7}
70000d48:	b083      	sub	sp, #12
70000d4a:	af00      	add	r7, sp, #0
70000d4c:	6078      	str	r0, [r7, #4]
70000d4e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
70000d50:	687b      	ldr	r3, [r7, #4]
70000d52:	2b00      	cmp	r3, #0
70000d54:	d00b      	beq.n	70000d6e <LAN8742_RegisterBusIO+0x28>
70000d56:	683b      	ldr	r3, [r7, #0]
70000d58:	68db      	ldr	r3, [r3, #12]
70000d5a:	2b00      	cmp	r3, #0
70000d5c:	d007      	beq.n	70000d6e <LAN8742_RegisterBusIO+0x28>
70000d5e:	683b      	ldr	r3, [r7, #0]
70000d60:	689b      	ldr	r3, [r3, #8]
70000d62:	2b00      	cmp	r3, #0
70000d64:	d003      	beq.n	70000d6e <LAN8742_RegisterBusIO+0x28>
70000d66:	683b      	ldr	r3, [r7, #0]
70000d68:	691b      	ldr	r3, [r3, #16]
70000d6a:	2b00      	cmp	r3, #0
70000d6c:	d102      	bne.n	70000d74 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
70000d6e:	f04f 33ff 	mov.w	r3, #4294967295
70000d72:	e014      	b.n	70000d9e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
70000d74:	683b      	ldr	r3, [r7, #0]
70000d76:	681a      	ldr	r2, [r3, #0]
70000d78:	687b      	ldr	r3, [r7, #4]
70000d7a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
70000d7c:	683b      	ldr	r3, [r7, #0]
70000d7e:	685a      	ldr	r2, [r3, #4]
70000d80:	687b      	ldr	r3, [r7, #4]
70000d82:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
70000d84:	683b      	ldr	r3, [r7, #0]
70000d86:	68da      	ldr	r2, [r3, #12]
70000d88:	687b      	ldr	r3, [r7, #4]
70000d8a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
70000d8c:	683b      	ldr	r3, [r7, #0]
70000d8e:	689a      	ldr	r2, [r3, #8]
70000d90:	687b      	ldr	r3, [r7, #4]
70000d92:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
70000d94:	683b      	ldr	r3, [r7, #0]
70000d96:	691a      	ldr	r2, [r3, #16]
70000d98:	687b      	ldr	r3, [r7, #4]
70000d9a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
70000d9c:	2300      	movs	r3, #0
}
70000d9e:	4618      	mov	r0, r3
70000da0:	370c      	adds	r7, #12
70000da2:	46bd      	mov	sp, r7
70000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
70000da8:	4770      	bx	lr

70000daa <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
70000daa:	b580      	push	{r7, lr}
70000dac:	b086      	sub	sp, #24
70000dae:	af00      	add	r7, sp, #0
70000db0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
70000db2:	2300      	movs	r3, #0
70000db4:	60fb      	str	r3, [r7, #12]
70000db6:	2300      	movs	r3, #0
70000db8:	60bb      	str	r3, [r7, #8]
70000dba:	2300      	movs	r3, #0
70000dbc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
70000dbe:	2300      	movs	r3, #0
70000dc0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
70000dc2:	687b      	ldr	r3, [r7, #4]
70000dc4:	685b      	ldr	r3, [r3, #4]
70000dc6:	2b00      	cmp	r3, #0
70000dc8:	d17c      	bne.n	70000ec4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
70000dca:	687b      	ldr	r3, [r7, #4]
70000dcc:	689b      	ldr	r3, [r3, #8]
70000dce:	2b00      	cmp	r3, #0
70000dd0:	d002      	beq.n	70000dd8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
70000dd2:	687b      	ldr	r3, [r7, #4]
70000dd4:	689b      	ldr	r3, [r3, #8]
70000dd6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
70000dd8:	687b      	ldr	r3, [r7, #4]
70000dda:	2220      	movs	r2, #32
70000ddc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
70000dde:	2300      	movs	r3, #0
70000de0:	617b      	str	r3, [r7, #20]
70000de2:	e01c      	b.n	70000e1e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
70000de4:	687b      	ldr	r3, [r7, #4]
70000de6:	695b      	ldr	r3, [r3, #20]
70000de8:	f107 0208 	add.w	r2, r7, #8
70000dec:	2112      	movs	r1, #18
70000dee:	6978      	ldr	r0, [r7, #20]
70000df0:	4798      	blx	r3
70000df2:	4603      	mov	r3, r0
70000df4:	2b00      	cmp	r3, #0
70000df6:	da03      	bge.n	70000e00 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
70000df8:	f06f 0304 	mvn.w	r3, #4
70000dfc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
70000dfe:	e00b      	b.n	70000e18 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
70000e00:	68bb      	ldr	r3, [r7, #8]
70000e02:	f003 031f 	and.w	r3, r3, #31
70000e06:	697a      	ldr	r2, [r7, #20]
70000e08:	429a      	cmp	r2, r3
70000e0a:	d105      	bne.n	70000e18 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
70000e0c:	687b      	ldr	r3, [r7, #4]
70000e0e:	697a      	ldr	r2, [r7, #20]
70000e10:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
70000e12:	2300      	movs	r3, #0
70000e14:	613b      	str	r3, [r7, #16]
         break;
70000e16:	e005      	b.n	70000e24 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
70000e18:	697b      	ldr	r3, [r7, #20]
70000e1a:	3301      	adds	r3, #1
70000e1c:	617b      	str	r3, [r7, #20]
70000e1e:	697b      	ldr	r3, [r7, #20]
70000e20:	2b1f      	cmp	r3, #31
70000e22:	d9df      	bls.n	70000de4 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
70000e24:	687b      	ldr	r3, [r7, #4]
70000e26:	681b      	ldr	r3, [r3, #0]
70000e28:	2b1f      	cmp	r3, #31
70000e2a:	d902      	bls.n	70000e32 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
70000e2c:	f06f 0302 	mvn.w	r3, #2
70000e30:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
70000e32:	693b      	ldr	r3, [r7, #16]
70000e34:	2b00      	cmp	r3, #0
70000e36:	d145      	bne.n	70000ec4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
70000e38:	687b      	ldr	r3, [r7, #4]
70000e3a:	691b      	ldr	r3, [r3, #16]
70000e3c:	687a      	ldr	r2, [r7, #4]
70000e3e:	6810      	ldr	r0, [r2, #0]
70000e40:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
70000e44:	2100      	movs	r1, #0
70000e46:	4798      	blx	r3
70000e48:	4603      	mov	r3, r0
70000e4a:	2b00      	cmp	r3, #0
70000e4c:	db37      	blt.n	70000ebe <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
70000e4e:	687b      	ldr	r3, [r7, #4]
70000e50:	695b      	ldr	r3, [r3, #20]
70000e52:	687a      	ldr	r2, [r7, #4]
70000e54:	6810      	ldr	r0, [r2, #0]
70000e56:	f107 0208 	add.w	r2, r7, #8
70000e5a:	2100      	movs	r1, #0
70000e5c:	4798      	blx	r3
70000e5e:	4603      	mov	r3, r0
70000e60:	2b00      	cmp	r3, #0
70000e62:	db28      	blt.n	70000eb6 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
70000e64:	687b      	ldr	r3, [r7, #4]
70000e66:	699b      	ldr	r3, [r3, #24]
70000e68:	4798      	blx	r3
70000e6a:	4603      	mov	r3, r0
70000e6c:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
70000e6e:	e01c      	b.n	70000eaa <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
70000e70:	687b      	ldr	r3, [r7, #4]
70000e72:	699b      	ldr	r3, [r3, #24]
70000e74:	4798      	blx	r3
70000e76:	4603      	mov	r3, r0
70000e78:	461a      	mov	r2, r3
70000e7a:	68fb      	ldr	r3, [r7, #12]
70000e7c:	1ad3      	subs	r3, r2, r3
70000e7e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
70000e82:	d80e      	bhi.n	70000ea2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
70000e84:	687b      	ldr	r3, [r7, #4]
70000e86:	695b      	ldr	r3, [r3, #20]
70000e88:	687a      	ldr	r2, [r7, #4]
70000e8a:	6810      	ldr	r0, [r2, #0]
70000e8c:	f107 0208 	add.w	r2, r7, #8
70000e90:	2100      	movs	r1, #0
70000e92:	4798      	blx	r3
70000e94:	4603      	mov	r3, r0
70000e96:	2b00      	cmp	r3, #0
70000e98:	da07      	bge.n	70000eaa <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
70000e9a:	f06f 0304 	mvn.w	r3, #4
70000e9e:	613b      	str	r3, [r7, #16]
                 break;
70000ea0:	e010      	b.n	70000ec4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
70000ea2:	f06f 0301 	mvn.w	r3, #1
70000ea6:	613b      	str	r3, [r7, #16]
               break;
70000ea8:	e00c      	b.n	70000ec4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
70000eaa:	68bb      	ldr	r3, [r7, #8]
70000eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
70000eb0:	2b00      	cmp	r3, #0
70000eb2:	d1dd      	bne.n	70000e70 <LAN8742_Init+0xc6>
70000eb4:	e006      	b.n	70000ec4 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
70000eb6:	f06f 0304 	mvn.w	r3, #4
70000eba:	613b      	str	r3, [r7, #16]
70000ebc:	e002      	b.n	70000ec4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
70000ebe:	f06f 0303 	mvn.w	r3, #3
70000ec2:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
70000ec4:	693b      	ldr	r3, [r7, #16]
70000ec6:	2b00      	cmp	r3, #0
70000ec8:	d112      	bne.n	70000ef0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
70000eca:	687b      	ldr	r3, [r7, #4]
70000ecc:	699b      	ldr	r3, [r3, #24]
70000ece:	4798      	blx	r3
70000ed0:	4603      	mov	r3, r0
70000ed2:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
70000ed4:	bf00      	nop
70000ed6:	687b      	ldr	r3, [r7, #4]
70000ed8:	699b      	ldr	r3, [r3, #24]
70000eda:	4798      	blx	r3
70000edc:	4603      	mov	r3, r0
70000ede:	461a      	mov	r2, r3
70000ee0:	68fb      	ldr	r3, [r7, #12]
70000ee2:	1ad3      	subs	r3, r2, r3
70000ee4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
70000ee8:	d9f5      	bls.n	70000ed6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
70000eea:	687b      	ldr	r3, [r7, #4]
70000eec:	2201      	movs	r2, #1
70000eee:	605a      	str	r2, [r3, #4]
   }

   return status;
70000ef0:	693b      	ldr	r3, [r7, #16]
 }
70000ef2:	4618      	mov	r0, r3
70000ef4:	3718      	adds	r7, #24
70000ef6:	46bd      	mov	sp, r7
70000ef8:	bd80      	pop	{r7, pc}

70000efa <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
70000efa:	b580      	push	{r7, lr}
70000efc:	b084      	sub	sp, #16
70000efe:	af00      	add	r7, sp, #0
70000f00:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
70000f02:	2300      	movs	r3, #0
70000f04:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
70000f06:	687b      	ldr	r3, [r7, #4]
70000f08:	695b      	ldr	r3, [r3, #20]
70000f0a:	687a      	ldr	r2, [r7, #4]
70000f0c:	6810      	ldr	r0, [r2, #0]
70000f0e:	f107 020c 	add.w	r2, r7, #12
70000f12:	2101      	movs	r1, #1
70000f14:	4798      	blx	r3
70000f16:	4603      	mov	r3, r0
70000f18:	2b00      	cmp	r3, #0
70000f1a:	da02      	bge.n	70000f22 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
70000f1c:	f06f 0304 	mvn.w	r3, #4
70000f20:	e06e      	b.n	70001000 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
70000f22:	687b      	ldr	r3, [r7, #4]
70000f24:	695b      	ldr	r3, [r3, #20]
70000f26:	687a      	ldr	r2, [r7, #4]
70000f28:	6810      	ldr	r0, [r2, #0]
70000f2a:	f107 020c 	add.w	r2, r7, #12
70000f2e:	2101      	movs	r1, #1
70000f30:	4798      	blx	r3
70000f32:	4603      	mov	r3, r0
70000f34:	2b00      	cmp	r3, #0
70000f36:	da02      	bge.n	70000f3e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
70000f38:	f06f 0304 	mvn.w	r3, #4
70000f3c:	e060      	b.n	70001000 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
70000f3e:	68fb      	ldr	r3, [r7, #12]
70000f40:	f003 0304 	and.w	r3, r3, #4
70000f44:	2b00      	cmp	r3, #0
70000f46:	d101      	bne.n	70000f4c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
70000f48:	2301      	movs	r3, #1
70000f4a:	e059      	b.n	70001000 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
70000f4c:	687b      	ldr	r3, [r7, #4]
70000f4e:	695b      	ldr	r3, [r3, #20]
70000f50:	687a      	ldr	r2, [r7, #4]
70000f52:	6810      	ldr	r0, [r2, #0]
70000f54:	f107 020c 	add.w	r2, r7, #12
70000f58:	2100      	movs	r1, #0
70000f5a:	4798      	blx	r3
70000f5c:	4603      	mov	r3, r0
70000f5e:	2b00      	cmp	r3, #0
70000f60:	da02      	bge.n	70000f68 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
70000f62:	f06f 0304 	mvn.w	r3, #4
70000f66:	e04b      	b.n	70001000 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
70000f68:	68fb      	ldr	r3, [r7, #12]
70000f6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
70000f6e:	2b00      	cmp	r3, #0
70000f70:	d11b      	bne.n	70000faa <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
70000f72:	68fb      	ldr	r3, [r7, #12]
70000f74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
70000f78:	2b00      	cmp	r3, #0
70000f7a:	d006      	beq.n	70000f8a <LAN8742_GetLinkState+0x90>
70000f7c:	68fb      	ldr	r3, [r7, #12]
70000f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
70000f82:	2b00      	cmp	r3, #0
70000f84:	d001      	beq.n	70000f8a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
70000f86:	2302      	movs	r3, #2
70000f88:	e03a      	b.n	70001000 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
70000f8a:	68fb      	ldr	r3, [r7, #12]
70000f8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
70000f90:	2b00      	cmp	r3, #0
70000f92:	d001      	beq.n	70000f98 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
70000f94:	2303      	movs	r3, #3
70000f96:	e033      	b.n	70001000 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
70000f98:	68fb      	ldr	r3, [r7, #12]
70000f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
70000f9e:	2b00      	cmp	r3, #0
70000fa0:	d001      	beq.n	70000fa6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
70000fa2:	2304      	movs	r3, #4
70000fa4:	e02c      	b.n	70001000 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
70000fa6:	2305      	movs	r3, #5
70000fa8:	e02a      	b.n	70001000 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
70000faa:	687b      	ldr	r3, [r7, #4]
70000fac:	695b      	ldr	r3, [r3, #20]
70000fae:	687a      	ldr	r2, [r7, #4]
70000fb0:	6810      	ldr	r0, [r2, #0]
70000fb2:	f107 020c 	add.w	r2, r7, #12
70000fb6:	211f      	movs	r1, #31
70000fb8:	4798      	blx	r3
70000fba:	4603      	mov	r3, r0
70000fbc:	2b00      	cmp	r3, #0
70000fbe:	da02      	bge.n	70000fc6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
70000fc0:	f06f 0304 	mvn.w	r3, #4
70000fc4:	e01c      	b.n	70001000 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
70000fc6:	68fb      	ldr	r3, [r7, #12]
70000fc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
70000fcc:	2b00      	cmp	r3, #0
70000fce:	d101      	bne.n	70000fd4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
70000fd0:	2306      	movs	r3, #6
70000fd2:	e015      	b.n	70001000 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
70000fd4:	68fb      	ldr	r3, [r7, #12]
70000fd6:	f003 031c 	and.w	r3, r3, #28
70000fda:	2b18      	cmp	r3, #24
70000fdc:	d101      	bne.n	70000fe2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
70000fde:	2302      	movs	r3, #2
70000fe0:	e00e      	b.n	70001000 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
70000fe2:	68fb      	ldr	r3, [r7, #12]
70000fe4:	f003 031c 	and.w	r3, r3, #28
70000fe8:	2b08      	cmp	r3, #8
70000fea:	d101      	bne.n	70000ff0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
70000fec:	2303      	movs	r3, #3
70000fee:	e007      	b.n	70001000 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
70000ff0:	68fb      	ldr	r3, [r7, #12]
70000ff2:	f003 031c 	and.w	r3, r3, #28
70000ff6:	2b14      	cmp	r3, #20
70000ff8:	d101      	bne.n	70000ffe <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
70000ffa:	2304      	movs	r3, #4
70000ffc:	e000      	b.n	70001000 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
70000ffe:	2305      	movs	r3, #5
    }
  }
}
70001000:	4618      	mov	r0, r3
70001002:	3710      	adds	r7, #16
70001004:	46bd      	mov	sp, r7
70001006:	bd80      	pop	{r7, pc}

70001008 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
70001008:	b580      	push	{r7, lr}
7000100a:	b082      	sub	sp, #8
7000100c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
7000100e:	2300      	movs	r3, #0
70001010:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
70001012:	2003      	movs	r0, #3
70001014:	f000 f8f3 	bl	700011fe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
70001018:	2004      	movs	r0, #4
7000101a:	f7ff fb8f 	bl	7000073c <HAL_InitTick>
7000101e:	4603      	mov	r3, r0
70001020:	2b00      	cmp	r3, #0
70001022:	d002      	beq.n	7000102a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
70001024:	2301      	movs	r3, #1
70001026:	71fb      	strb	r3, [r7, #7]
70001028:	e001      	b.n	7000102e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
7000102a:	f7ff fb7d 	bl	70000728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
7000102e:	79fb      	ldrb	r3, [r7, #7]
}
70001030:	4618      	mov	r0, r3
70001032:	3708      	adds	r7, #8
70001034:	46bd      	mov	sp, r7
70001036:	bd80      	pop	{r7, pc}

70001038 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
70001038:	b480      	push	{r7}
7000103a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
7000103c:	4b06      	ldr	r3, [pc, #24]	@ (70001058 <HAL_IncTick+0x20>)
7000103e:	781b      	ldrb	r3, [r3, #0]
70001040:	461a      	mov	r2, r3
70001042:	4b06      	ldr	r3, [pc, #24]	@ (7000105c <HAL_IncTick+0x24>)
70001044:	681b      	ldr	r3, [r3, #0]
70001046:	4413      	add	r3, r2
70001048:	4a04      	ldr	r2, [pc, #16]	@ (7000105c <HAL_IncTick+0x24>)
7000104a:	6013      	str	r3, [r2, #0]
}
7000104c:	bf00      	nop
7000104e:	46bd      	mov	sp, r7
70001050:	f85d 7b04 	ldr.w	r7, [sp], #4
70001054:	4770      	bx	lr
70001056:	bf00      	nop
70001058:	24000008 	.word	0x24000008
7000105c:	24000104 	.word	0x24000104

70001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
70001060:	b480      	push	{r7}
70001062:	af00      	add	r7, sp, #0
  return uwTick;
70001064:	4b03      	ldr	r3, [pc, #12]	@ (70001074 <HAL_GetTick+0x14>)
70001066:	681b      	ldr	r3, [r3, #0]
}
70001068:	4618      	mov	r0, r3
7000106a:	46bd      	mov	sp, r7
7000106c:	f85d 7b04 	ldr.w	r7, [sp], #4
70001070:	4770      	bx	lr
70001072:	bf00      	nop
70001074:	24000104 	.word	0x24000104

70001078 <HAL_SBS_ConfigEthernetPHY>:
  *            @arg SBS_ETHERNET_PHY_GMII_OR_MII GMMI or MII selection
  *            @arg SBS_ETHERNET_PHY_RMII RMII selection
  * @retval None
  */
void HAL_SBS_ConfigEthernetPHY(uint32_t Config)
{
70001078:	b480      	push	{r7}
7000107a:	b083      	sub	sp, #12
7000107c:	af00      	add	r7, sp, #0
7000107e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_PHY(Config));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_PHYSEL, Config);
70001080:	4b07      	ldr	r3, [pc, #28]	@ (700010a0 <HAL_SBS_ConfigEthernetPHY+0x28>)
70001082:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
70001086:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
7000108a:	4905      	ldr	r1, [pc, #20]	@ (700010a0 <HAL_SBS_ConfigEthernetPHY+0x28>)
7000108c:	687b      	ldr	r3, [r7, #4]
7000108e:	4313      	orrs	r3, r2
70001090:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
}
70001094:	bf00      	nop
70001096:	370c      	adds	r7, #12
70001098:	46bd      	mov	sp, r7
7000109a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000109e:	4770      	bx	lr
700010a0:	58000400 	.word	0x58000400

700010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
700010a4:	b480      	push	{r7}
700010a6:	b085      	sub	sp, #20
700010a8:	af00      	add	r7, sp, #0
700010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
700010ac:	687b      	ldr	r3, [r7, #4]
700010ae:	f003 0307 	and.w	r3, r3, #7
700010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
700010b4:	4b0b      	ldr	r3, [pc, #44]	@ (700010e4 <__NVIC_SetPriorityGrouping+0x40>)
700010b6:	68db      	ldr	r3, [r3, #12]
700010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
700010ba:	68ba      	ldr	r2, [r7, #8]
700010bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
700010c0:	4013      	ands	r3, r2
700010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
700010c4:	68fb      	ldr	r3, [r7, #12]
700010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
700010c8:	68bb      	ldr	r3, [r7, #8]
700010ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
700010cc:	4b06      	ldr	r3, [pc, #24]	@ (700010e8 <__NVIC_SetPriorityGrouping+0x44>)
700010ce:	4313      	orrs	r3, r2
700010d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
700010d2:	4a04      	ldr	r2, [pc, #16]	@ (700010e4 <__NVIC_SetPriorityGrouping+0x40>)
700010d4:	68bb      	ldr	r3, [r7, #8]
700010d6:	60d3      	str	r3, [r2, #12]
}
700010d8:	bf00      	nop
700010da:	3714      	adds	r7, #20
700010dc:	46bd      	mov	sp, r7
700010de:	f85d 7b04 	ldr.w	r7, [sp], #4
700010e2:	4770      	bx	lr
700010e4:	e000ed00 	.word	0xe000ed00
700010e8:	05fa0000 	.word	0x05fa0000

700010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
700010ec:	b480      	push	{r7}
700010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
700010f0:	4b04      	ldr	r3, [pc, #16]	@ (70001104 <__NVIC_GetPriorityGrouping+0x18>)
700010f2:	68db      	ldr	r3, [r3, #12]
700010f4:	0a1b      	lsrs	r3, r3, #8
700010f6:	f003 0307 	and.w	r3, r3, #7
}
700010fa:	4618      	mov	r0, r3
700010fc:	46bd      	mov	sp, r7
700010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
70001102:	4770      	bx	lr
70001104:	e000ed00 	.word	0xe000ed00

70001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
70001108:	b480      	push	{r7}
7000110a:	b083      	sub	sp, #12
7000110c:	af00      	add	r7, sp, #0
7000110e:	4603      	mov	r3, r0
70001110:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
70001112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70001116:	2b00      	cmp	r3, #0
70001118:	db0b      	blt.n	70001132 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
7000111a:	88fb      	ldrh	r3, [r7, #6]
7000111c:	f003 021f 	and.w	r2, r3, #31
70001120:	4907      	ldr	r1, [pc, #28]	@ (70001140 <__NVIC_EnableIRQ+0x38>)
70001122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70001126:	095b      	lsrs	r3, r3, #5
70001128:	2001      	movs	r0, #1
7000112a:	fa00 f202 	lsl.w	r2, r0, r2
7000112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
70001132:	bf00      	nop
70001134:	370c      	adds	r7, #12
70001136:	46bd      	mov	sp, r7
70001138:	f85d 7b04 	ldr.w	r7, [sp], #4
7000113c:	4770      	bx	lr
7000113e:	bf00      	nop
70001140:	e000e100 	.word	0xe000e100

70001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
70001144:	b480      	push	{r7}
70001146:	b083      	sub	sp, #12
70001148:	af00      	add	r7, sp, #0
7000114a:	4603      	mov	r3, r0
7000114c:	6039      	str	r1, [r7, #0]
7000114e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
70001150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70001154:	2b00      	cmp	r3, #0
70001156:	db0a      	blt.n	7000116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
70001158:	683b      	ldr	r3, [r7, #0]
7000115a:	b2da      	uxtb	r2, r3
7000115c:	490c      	ldr	r1, [pc, #48]	@ (70001190 <__NVIC_SetPriority+0x4c>)
7000115e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70001162:	0112      	lsls	r2, r2, #4
70001164:	b2d2      	uxtb	r2, r2
70001166:	440b      	add	r3, r1
70001168:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
7000116c:	e00a      	b.n	70001184 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
7000116e:	683b      	ldr	r3, [r7, #0]
70001170:	b2da      	uxtb	r2, r3
70001172:	4908      	ldr	r1, [pc, #32]	@ (70001194 <__NVIC_SetPriority+0x50>)
70001174:	88fb      	ldrh	r3, [r7, #6]
70001176:	f003 030f 	and.w	r3, r3, #15
7000117a:	3b04      	subs	r3, #4
7000117c:	0112      	lsls	r2, r2, #4
7000117e:	b2d2      	uxtb	r2, r2
70001180:	440b      	add	r3, r1
70001182:	761a      	strb	r2, [r3, #24]
}
70001184:	bf00      	nop
70001186:	370c      	adds	r7, #12
70001188:	46bd      	mov	sp, r7
7000118a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000118e:	4770      	bx	lr
70001190:	e000e100 	.word	0xe000e100
70001194:	e000ed00 	.word	0xe000ed00

70001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
70001198:	b480      	push	{r7}
7000119a:	b089      	sub	sp, #36	@ 0x24
7000119c:	af00      	add	r7, sp, #0
7000119e:	60f8      	str	r0, [r7, #12]
700011a0:	60b9      	str	r1, [r7, #8]
700011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
700011a4:	68fb      	ldr	r3, [r7, #12]
700011a6:	f003 0307 	and.w	r3, r3, #7
700011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
700011ac:	69fb      	ldr	r3, [r7, #28]
700011ae:	f1c3 0307 	rsb	r3, r3, #7
700011b2:	2b04      	cmp	r3, #4
700011b4:	bf28      	it	cs
700011b6:	2304      	movcs	r3, #4
700011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
700011ba:	69fb      	ldr	r3, [r7, #28]
700011bc:	3304      	adds	r3, #4
700011be:	2b06      	cmp	r3, #6
700011c0:	d902      	bls.n	700011c8 <NVIC_EncodePriority+0x30>
700011c2:	69fb      	ldr	r3, [r7, #28]
700011c4:	3b03      	subs	r3, #3
700011c6:	e000      	b.n	700011ca <NVIC_EncodePriority+0x32>
700011c8:	2300      	movs	r3, #0
700011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
700011cc:	f04f 32ff 	mov.w	r2, #4294967295
700011d0:	69bb      	ldr	r3, [r7, #24]
700011d2:	fa02 f303 	lsl.w	r3, r2, r3
700011d6:	43da      	mvns	r2, r3
700011d8:	68bb      	ldr	r3, [r7, #8]
700011da:	401a      	ands	r2, r3
700011dc:	697b      	ldr	r3, [r7, #20]
700011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
700011e0:	f04f 31ff 	mov.w	r1, #4294967295
700011e4:	697b      	ldr	r3, [r7, #20]
700011e6:	fa01 f303 	lsl.w	r3, r1, r3
700011ea:	43d9      	mvns	r1, r3
700011ec:	687b      	ldr	r3, [r7, #4]
700011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
700011f0:	4313      	orrs	r3, r2
         );
}
700011f2:	4618      	mov	r0, r3
700011f4:	3724      	adds	r7, #36	@ 0x24
700011f6:	46bd      	mov	sp, r7
700011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
700011fc:	4770      	bx	lr

700011fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
700011fe:	b580      	push	{r7, lr}
70001200:	b082      	sub	sp, #8
70001202:	af00      	add	r7, sp, #0
70001204:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
70001206:	6878      	ldr	r0, [r7, #4]
70001208:	f7ff ff4c 	bl	700010a4 <__NVIC_SetPriorityGrouping>
}
7000120c:	bf00      	nop
7000120e:	3708      	adds	r7, #8
70001210:	46bd      	mov	sp, r7
70001212:	bd80      	pop	{r7, pc}

70001214 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
70001214:	b580      	push	{r7, lr}
70001216:	b086      	sub	sp, #24
70001218:	af00      	add	r7, sp, #0
7000121a:	4603      	mov	r3, r0
7000121c:	60b9      	str	r1, [r7, #8]
7000121e:	607a      	str	r2, [r7, #4]
70001220:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
70001222:	f7ff ff63 	bl	700010ec <__NVIC_GetPriorityGrouping>
70001226:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
70001228:	687a      	ldr	r2, [r7, #4]
7000122a:	68b9      	ldr	r1, [r7, #8]
7000122c:	6978      	ldr	r0, [r7, #20]
7000122e:	f7ff ffb3 	bl	70001198 <NVIC_EncodePriority>
70001232:	4602      	mov	r2, r0
70001234:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
70001238:	4611      	mov	r1, r2
7000123a:	4618      	mov	r0, r3
7000123c:	f7ff ff82 	bl	70001144 <__NVIC_SetPriority>
}
70001240:	bf00      	nop
70001242:	3718      	adds	r7, #24
70001244:	46bd      	mov	sp, r7
70001246:	bd80      	pop	{r7, pc}

70001248 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32h7rsxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
70001248:	b580      	push	{r7, lr}
7000124a:	b082      	sub	sp, #8
7000124c:	af00      	add	r7, sp, #0
7000124e:	4603      	mov	r3, r0
70001250:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
70001252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70001256:	4618      	mov	r0, r3
70001258:	f7ff ff56 	bl	70001108 <__NVIC_EnableIRQ>
}
7000125c:	bf00      	nop
7000125e:	3708      	adds	r7, #8
70001260:	46bd      	mov	sp, r7
70001262:	bd80      	pop	{r7, pc}

70001264 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
70001264:	b480      	push	{r7}
70001266:	b083      	sub	sp, #12
70001268:	af00      	add	r7, sp, #0
7000126a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
7000126c:	f3bf 8f5f 	dmb	sy
}
70001270:	bf00      	nop
  /* Force any outstanding transfers to complete before enabling MPU */
  __DMB();

  /* Enable the MPU */
  MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
70001272:	4a0b      	ldr	r2, [pc, #44]	@ (700012a0 <HAL_MPU_Enable+0x3c>)
70001274:	687b      	ldr	r3, [r7, #4]
70001276:	f043 0301 	orr.w	r3, r3, #1
7000127a:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
7000127c:	4b09      	ldr	r3, [pc, #36]	@ (700012a4 <HAL_MPU_Enable+0x40>)
7000127e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70001280:	4a08      	ldr	r2, [pc, #32]	@ (700012a4 <HAL_MPU_Enable+0x40>)
70001282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70001286:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
70001288:	f3bf 8f4f 	dsb	sy
}
7000128c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
7000128e:	f3bf 8f6f 	isb	sy
}
70001292:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
70001294:	bf00      	nop
70001296:	370c      	adds	r7, #12
70001298:	46bd      	mov	sp, r7
7000129a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000129e:	4770      	bx	lr
700012a0:	e000ed90 	.word	0xe000ed90
700012a4:	e000ed00 	.word	0xe000ed00

700012a8 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
700012a8:	b480      	push	{r7}
700012aa:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
700012ac:	f3bf 8f5f 	dmb	sy
}
700012b0:	bf00      	nop
  /* Force any outstanding transfers to complete before disabling MPU */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
700012b2:	4b0a      	ldr	r3, [pc, #40]	@ (700012dc <HAL_MPU_Disable+0x34>)
700012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700012b6:	4a09      	ldr	r2, [pc, #36]	@ (700012dc <HAL_MPU_Disable+0x34>)
700012b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
700012bc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register */
  MPU->CTRL = 0U;
700012be:	4b08      	ldr	r3, [pc, #32]	@ (700012e0 <HAL_MPU_Disable+0x38>)
700012c0:	2200      	movs	r2, #0
700012c2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
700012c4:	f3bf 8f4f 	dsb	sy
}
700012c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
700012ca:	f3bf 8f6f 	isb	sy
}
700012ce:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
700012d0:	bf00      	nop
700012d2:	46bd      	mov	sp, r7
700012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
700012d8:	4770      	bx	lr
700012da:	bf00      	nop
700012dc:	e000ed00 	.word	0xe000ed00
700012e0:	e000ed90 	.word	0xe000ed90

700012e4 <HAL_MPU_ConfigRegion>:
  *                  the initialization and configuration information.
  * @note   The region base address must be aligned to the size of the region.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *pMPU_RegionInit)
{
700012e4:	b480      	push	{r7}
700012e6:	b083      	sub	sp, #12
700012e8:	af00      	add	r7, sp, #0
700012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(pMPU_RegionInit->Number));
  assert_param(IS_MPU_REGION_ENABLE(pMPU_RegionInit->Enable));

  /* Set the Region number */
  MPU->RNR = pMPU_RegionInit->Number;
700012ec:	687b      	ldr	r3, [r7, #4]
700012ee:	785a      	ldrb	r2, [r3, #1]
700012f0:	4b1e      	ldr	r3, [pc, #120]	@ (7000136c <HAL_MPU_ConfigRegion+0x88>)
700012f2:	609a      	str	r2, [r3, #8]
  assert_param(IS_MPU_SUB_REGION_DISABLE(pMPU_RegionInit->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(pMPU_RegionInit->Size));
  assert_param(IS_MPU_ADDRESS_MULTIPLE_SIZE(pMPU_RegionInit->BaseAddress, pMPU_RegionInit->Size));

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
700012f4:	4b1d      	ldr	r3, [pc, #116]	@ (7000136c <HAL_MPU_ConfigRegion+0x88>)
700012f6:	691b      	ldr	r3, [r3, #16]
700012f8:	4a1c      	ldr	r2, [pc, #112]	@ (7000136c <HAL_MPU_ConfigRegion+0x88>)
700012fa:	f023 0301 	bic.w	r3, r3, #1
700012fe:	6113      	str	r3, [r2, #16]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
70001300:	4b1a      	ldr	r3, [pc, #104]	@ (7000136c <HAL_MPU_ConfigRegion+0x88>)
70001302:	691b      	ldr	r3, [r3, #16]
70001304:	4a19      	ldr	r2, [pc, #100]	@ (7000136c <HAL_MPU_ConfigRegion+0x88>)
70001306:	f023 0301 	bic.w	r3, r3, #1
7000130a:	6113      	str	r3, [r2, #16]
  MPU->RBAR = pMPU_RegionInit->BaseAddress;
7000130c:	4a17      	ldr	r2, [pc, #92]	@ (7000136c <HAL_MPU_ConfigRegion+0x88>)
7000130e:	687b      	ldr	r3, [r7, #4]
70001310:	685b      	ldr	r3, [r3, #4]
70001312:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
70001314:	687b      	ldr	r3, [r7, #4]
70001316:	7b1b      	ldrb	r3, [r3, #12]
70001318:	071a      	lsls	r2, r3, #28
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
7000131a:	687b      	ldr	r3, [r7, #4]
7000131c:	7adb      	ldrb	r3, [r3, #11]
7000131e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
70001320:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
70001322:	687b      	ldr	r3, [r7, #4]
70001324:	7a9b      	ldrb	r3, [r3, #10]
70001326:	04db      	lsls	r3, r3, #19
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
70001328:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
7000132a:	687b      	ldr	r3, [r7, #4]
7000132c:	7b5b      	ldrb	r3, [r3, #13]
7000132e:	049b      	lsls	r3, r3, #18
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
70001330:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
70001332:	687b      	ldr	r3, [r7, #4]
70001334:	7b9b      	ldrb	r3, [r3, #14]
70001336:	045b      	lsls	r3, r3, #17
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
70001338:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
7000133a:	687b      	ldr	r3, [r7, #4]
7000133c:	7bdb      	ldrb	r3, [r3, #15]
7000133e:	041b      	lsls	r3, r3, #16
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
70001340:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
70001342:	687b      	ldr	r3, [r7, #4]
70001344:	7a5b      	ldrb	r3, [r3, #9]
70001346:	021b      	lsls	r3, r3, #8
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
70001348:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
7000134a:	687b      	ldr	r3, [r7, #4]
7000134c:	7a1b      	ldrb	r3, [r3, #8]
7000134e:	005b      	lsls	r3, r3, #1
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
70001350:	4313      	orrs	r3, r2
              ((uint32_t)pMPU_RegionInit->Enable           << MPU_RASR_ENABLE_Pos);
70001352:	687a      	ldr	r2, [r7, #4]
70001354:	7812      	ldrb	r2, [r2, #0]
70001356:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
70001358:	4a04      	ldr	r2, [pc, #16]	@ (7000136c <HAL_MPU_ConfigRegion+0x88>)
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
7000135a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
7000135c:	6113      	str	r3, [r2, #16]
}
7000135e:	bf00      	nop
70001360:	370c      	adds	r7, #12
70001362:	46bd      	mov	sp, r7
70001364:	f85d 7b04 	ldr.w	r7, [sp], #4
70001368:	4770      	bx	lr
7000136a:	bf00      	nop
7000136c:	e000ed90 	.word	0xe000ed90

70001370 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
70001370:	b580      	push	{r7, lr}
70001372:	b084      	sub	sp, #16
70001374:	af00      	add	r7, sp, #0
70001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
70001378:	687b      	ldr	r3, [r7, #4]
7000137a:	2b00      	cmp	r3, #0
7000137c:	d101      	bne.n	70001382 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
7000137e:	2301      	movs	r3, #1
70001380:	e0e2      	b.n	70001548 <HAL_ETH_Init+0x1d8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
70001382:	687b      	ldr	r3, [r7, #4]
70001384:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
70001388:	2b00      	cmp	r3, #0
7000138a:	d106      	bne.n	7000139a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
7000138c:	687b      	ldr	r3, [r7, #4]
7000138e:	2223      	movs	r2, #35	@ 0x23
70001390:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
70001394:	6878      	ldr	r0, [r7, #4]
70001396:	f003 ff1b 	bl	700051d0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
7000139a:	4b6d      	ldr	r3, [pc, #436]	@ (70001550 <HAL_ETH_Init+0x1e0>)
7000139c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
700013a0:	4a6b      	ldr	r2, [pc, #428]	@ (70001550 <HAL_ETH_Init+0x1e0>)
700013a2:	f043 0302 	orr.w	r3, r3, #2
700013a6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
700013aa:	4b69      	ldr	r3, [pc, #420]	@ (70001550 <HAL_ETH_Init+0x1e0>)
700013ac:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
700013b0:	60bb      	str	r3, [r7, #8]
700013b2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
700013b4:	687b      	ldr	r3, [r7, #4]
700013b6:	7a1b      	ldrb	r3, [r3, #8]
700013b8:	2b00      	cmp	r3, #0
700013ba:	d103      	bne.n	700013c4 <HAL_ETH_Init+0x54>
  {
    HAL_SBS_ConfigEthernetPHY(SBS_ETHERNET_PHY_GMII_OR_MII);
700013bc:	2000      	movs	r0, #0
700013be:	f7ff fe5b 	bl	70001078 <HAL_SBS_ConfigEthernetPHY>
700013c2:	e003      	b.n	700013cc <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SBS_ConfigEthernetPHY(SBS_ETHERNET_PHY_RMII);
700013c4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
700013c8:	f7ff fe56 	bl	70001078 <HAL_SBS_ConfigEthernetPHY>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
700013cc:	4b61      	ldr	r3, [pc, #388]	@ (70001554 <HAL_ETH_Init+0x1e4>)
700013ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
700013d2:	687b      	ldr	r3, [r7, #4]
700013d4:	681b      	ldr	r3, [r3, #0]
700013d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
700013da:	681b      	ldr	r3, [r3, #0]
700013dc:	687a      	ldr	r2, [r7, #4]
700013de:	6812      	ldr	r2, [r2, #0]
700013e0:	f043 0301 	orr.w	r3, r3, #1
700013e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
700013e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
700013ea:	f7ff fe39 	bl	70001060 <HAL_GetTick>
700013ee:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
700013f0:	e011      	b.n	70001416 <HAL_ETH_Init+0xa6>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
700013f2:	f7ff fe35 	bl	70001060 <HAL_GetTick>
700013f6:	4602      	mov	r2, r0
700013f8:	68fb      	ldr	r3, [r7, #12]
700013fa:	1ad3      	subs	r3, r2, r3
700013fc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
70001400:	d909      	bls.n	70001416 <HAL_ETH_Init+0xa6>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
70001402:	687b      	ldr	r3, [r7, #4]
70001404:	2204      	movs	r2, #4
70001406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
7000140a:	687b      	ldr	r3, [r7, #4]
7000140c:	22e0      	movs	r2, #224	@ 0xe0
7000140e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
70001412:	2301      	movs	r3, #1
70001414:	e098      	b.n	70001548 <HAL_ETH_Init+0x1d8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
70001416:	687b      	ldr	r3, [r7, #4]
70001418:	681b      	ldr	r3, [r3, #0]
7000141a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
7000141e:	681b      	ldr	r3, [r3, #0]
70001420:	f003 0301 	and.w	r3, r3, #1
70001424:	2b00      	cmp	r3, #0
70001426:	d1e4      	bne.n	700013f2 <HAL_ETH_Init+0x82>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
70001428:	6878      	ldr	r0, [r7, #4]
7000142a:	f000 ff1d 	bl	70002268 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
7000142e:	f001 fff5 	bl	7000341c <HAL_RCC_GetHCLKFreq>
70001432:	4603      	mov	r3, r0
70001434:	4a48      	ldr	r2, [pc, #288]	@ (70001558 <HAL_ETH_Init+0x1e8>)
70001436:	fba2 2303 	umull	r2, r3, r2, r3
7000143a:	0c9a      	lsrs	r2, r3, #18
7000143c:	687b      	ldr	r3, [r7, #4]
7000143e:	681b      	ldr	r3, [r3, #0]
70001440:	3a01      	subs	r2, #1
70001442:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
70001446:	6878      	ldr	r0, [r7, #4]
70001448:	f001 f91a 	bl	70002680 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
7000144c:	687b      	ldr	r3, [r7, #4]
7000144e:	681b      	ldr	r3, [r3, #0]
70001450:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001454:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
70001458:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
7000145c:	687a      	ldr	r2, [r7, #4]
7000145e:	6812      	ldr	r2, [r2, #0]
70001460:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
70001464:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
70001468:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
7000146c:	687b      	ldr	r3, [r7, #4]
7000146e:	695b      	ldr	r3, [r3, #20]
70001470:	f003 0303 	and.w	r3, r3, #3
70001474:	2b00      	cmp	r3, #0
70001476:	d009      	beq.n	7000148c <HAL_ETH_Init+0x11c>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
70001478:	687b      	ldr	r3, [r7, #4]
7000147a:	2201      	movs	r2, #1
7000147c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
70001480:	687b      	ldr	r3, [r7, #4]
70001482:	22e0      	movs	r2, #224	@ 0xe0
70001484:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
70001488:	2301      	movs	r3, #1
7000148a:	e05d      	b.n	70001548 <HAL_ETH_Init+0x1d8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
7000148c:	687b      	ldr	r3, [r7, #4]
7000148e:	681b      	ldr	r3, [r3, #0]
70001490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001494:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
70001498:	4b30      	ldr	r3, [pc, #192]	@ (7000155c <HAL_ETH_Init+0x1ec>)
7000149a:	4013      	ands	r3, r2
7000149c:	687a      	ldr	r2, [r7, #4]
7000149e:	6952      	ldr	r2, [r2, #20]
700014a0:	0051      	lsls	r1, r2, #1
700014a2:	687a      	ldr	r2, [r7, #4]
700014a4:	6812      	ldr	r2, [r2, #0]
700014a6:	430b      	orrs	r3, r1
700014a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
700014ac:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
700014b0:	6878      	ldr	r0, [r7, #4]
700014b2:	f001 f982 	bl	700027ba <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
700014b6:	6878      	ldr	r0, [r7, #4]
700014b8:	f001 f9c8 	bl	7000284c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
700014bc:	687b      	ldr	r3, [r7, #4]
700014be:	685b      	ldr	r3, [r3, #4]
700014c0:	3305      	adds	r3, #5
700014c2:	781b      	ldrb	r3, [r3, #0]
700014c4:	021a      	lsls	r2, r3, #8
700014c6:	687b      	ldr	r3, [r7, #4]
700014c8:	685b      	ldr	r3, [r3, #4]
700014ca:	3304      	adds	r3, #4
700014cc:	781b      	ldrb	r3, [r3, #0]
700014ce:	4619      	mov	r1, r3
700014d0:	687b      	ldr	r3, [r7, #4]
700014d2:	681b      	ldr	r3, [r3, #0]
700014d4:	430a      	orrs	r2, r1
700014d6:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
700014da:	687b      	ldr	r3, [r7, #4]
700014dc:	685b      	ldr	r3, [r3, #4]
700014de:	3303      	adds	r3, #3
700014e0:	781b      	ldrb	r3, [r3, #0]
700014e2:	061a      	lsls	r2, r3, #24
700014e4:	687b      	ldr	r3, [r7, #4]
700014e6:	685b      	ldr	r3, [r3, #4]
700014e8:	3302      	adds	r3, #2
700014ea:	781b      	ldrb	r3, [r3, #0]
700014ec:	041b      	lsls	r3, r3, #16
700014ee:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
700014f0:	687b      	ldr	r3, [r7, #4]
700014f2:	685b      	ldr	r3, [r3, #4]
700014f4:	3301      	adds	r3, #1
700014f6:	781b      	ldrb	r3, [r3, #0]
700014f8:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
700014fa:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
700014fc:	687b      	ldr	r3, [r7, #4]
700014fe:	685b      	ldr	r3, [r3, #4]
70001500:	781b      	ldrb	r3, [r3, #0]
70001502:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
70001504:	687b      	ldr	r3, [r7, #4]
70001506:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
70001508:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
7000150a:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
7000150e:	687b      	ldr	r3, [r7, #4]
70001510:	681b      	ldr	r3, [r3, #0]
70001512:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
70001516:	687b      	ldr	r3, [r7, #4]
70001518:	681a      	ldr	r2, [r3, #0]
7000151a:	4b11      	ldr	r3, [pc, #68]	@ (70001560 <HAL_ETH_Init+0x1f0>)
7000151c:	430b      	orrs	r3, r1
7000151e:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
70001522:	687b      	ldr	r3, [r7, #4]
70001524:	681b      	ldr	r3, [r3, #0]
70001526:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
7000152a:	687b      	ldr	r3, [r7, #4]
7000152c:	681a      	ldr	r2, [r3, #0]
7000152e:	4b0d      	ldr	r3, [pc, #52]	@ (70001564 <HAL_ETH_Init+0x1f4>)
70001530:	430b      	orrs	r3, r1
70001532:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
70001536:	687b      	ldr	r3, [r7, #4]
70001538:	2200      	movs	r2, #0
7000153a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
7000153e:	687b      	ldr	r3, [r7, #4]
70001540:	2210      	movs	r2, #16
70001542:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
70001546:	2300      	movs	r3, #0
}
70001548:	4618      	mov	r0, r3
7000154a:	3710      	adds	r7, #16
7000154c:	46bd      	mov	sp, r7
7000154e:	bd80      	pop	{r7, pc}
70001550:	58024400 	.word	0x58024400
70001554:	58000400 	.word	0x58000400
70001558:	431bde83 	.word	0x431bde83
7000155c:	ffff8001 	.word	0xffff8001
70001560:	0c020060 	.word	0x0c020060
70001564:	0c20c000 	.word	0x0c20c000

70001568 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
70001568:	b580      	push	{r7, lr}
7000156a:	b082      	sub	sp, #8
7000156c:	af00      	add	r7, sp, #0
7000156e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
70001570:	687b      	ldr	r3, [r7, #4]
70001572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
70001576:	2b10      	cmp	r3, #16
70001578:	d165      	bne.n	70001646 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
7000157a:	687b      	ldr	r3, [r7, #4]
7000157c:	2223      	movs	r2, #35	@ 0x23
7000157e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
70001582:	687b      	ldr	r3, [r7, #4]
70001584:	2201      	movs	r2, #1
70001586:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
70001588:	687b      	ldr	r3, [r7, #4]
7000158a:	2204      	movs	r2, #4
7000158c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
7000158e:	6878      	ldr	r0, [r7, #4]
70001590:	f000 f9e4 	bl	7000195c <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
70001594:	687b      	ldr	r3, [r7, #4]
70001596:	681b      	ldr	r3, [r3, #0]
70001598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
7000159c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
700015a0:	687a      	ldr	r2, [r7, #4]
700015a2:	6812      	ldr	r2, [r2, #0]
700015a4:	f043 0301 	orr.w	r3, r3, #1
700015a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
700015ac:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
700015b0:	687b      	ldr	r3, [r7, #4]
700015b2:	681b      	ldr	r3, [r3, #0]
700015b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
700015b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
700015bc:	687a      	ldr	r2, [r7, #4]
700015be:	6812      	ldr	r2, [r2, #0]
700015c0:	f043 0301 	orr.w	r3, r3, #1
700015c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
700015c8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
700015cc:	687b      	ldr	r3, [r7, #4]
700015ce:	681b      	ldr	r3, [r3, #0]
700015d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
700015d4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
700015d8:	687a      	ldr	r2, [r7, #4]
700015da:	6812      	ldr	r2, [r2, #0]
700015dc:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
700015e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
700015e4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
700015e8:	687b      	ldr	r3, [r7, #4]
700015ea:	681b      	ldr	r3, [r3, #0]
700015ec:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
700015f0:	687b      	ldr	r3, [r7, #4]
700015f2:	681b      	ldr	r3, [r3, #0]
700015f4:	f042 0201 	orr.w	r2, r2, #1
700015f8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
700015fc:	687b      	ldr	r3, [r7, #4]
700015fe:	681b      	ldr	r3, [r3, #0]
70001600:	681a      	ldr	r2, [r3, #0]
70001602:	687b      	ldr	r3, [r7, #4]
70001604:	681b      	ldr	r3, [r3, #0]
70001606:	f042 0202 	orr.w	r2, r2, #2
7000160a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
7000160c:	687b      	ldr	r3, [r7, #4]
7000160e:	681b      	ldr	r3, [r3, #0]
70001610:	681a      	ldr	r2, [r3, #0]
70001612:	687b      	ldr	r3, [r7, #4]
70001614:	681b      	ldr	r3, [r3, #0]
70001616:	f042 0201 	orr.w	r2, r2, #1
7000161a:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
7000161c:	687b      	ldr	r3, [r7, #4]
7000161e:	681b      	ldr	r3, [r3, #0]
70001620:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001624:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
70001628:	687b      	ldr	r3, [r7, #4]
7000162a:	681a      	ldr	r2, [r3, #0]
7000162c:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
70001630:	430b      	orrs	r3, r1
70001632:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
70001636:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
7000163a:	687b      	ldr	r3, [r7, #4]
7000163c:	2223      	movs	r2, #35	@ 0x23
7000163e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
70001642:	2300      	movs	r3, #0
70001644:	e000      	b.n	70001648 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
70001646:	2301      	movs	r3, #1
  }
}
70001648:	4618      	mov	r0, r3
7000164a:	3708      	adds	r7, #8
7000164c:	46bd      	mov	sp, r7
7000164e:	bd80      	pop	{r7, pc}

70001650 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
70001650:	b480      	push	{r7}
70001652:	b085      	sub	sp, #20
70001654:	af00      	add	r7, sp, #0
70001656:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
70001658:	687b      	ldr	r3, [r7, #4]
7000165a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
7000165e:	2b23      	cmp	r3, #35	@ 0x23
70001660:	d165      	bne.n	7000172e <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
70001662:	687b      	ldr	r3, [r7, #4]
70001664:	2223      	movs	r2, #35	@ 0x23
70001666:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
7000166a:	687b      	ldr	r3, [r7, #4]
7000166c:	681b      	ldr	r3, [r3, #0]
7000166e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001672:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
70001676:	687b      	ldr	r3, [r7, #4]
70001678:	681a      	ldr	r2, [r3, #0]
7000167a:	4b30      	ldr	r3, [pc, #192]	@ (7000173c <HAL_ETH_Stop_IT+0xec>)
7000167c:	400b      	ands	r3, r1
7000167e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
70001682:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
70001686:	687b      	ldr	r3, [r7, #4]
70001688:	681b      	ldr	r3, [r3, #0]
7000168a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
7000168e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
70001692:	687a      	ldr	r2, [r7, #4]
70001694:	6812      	ldr	r2, [r2, #0]
70001696:	f023 0301 	bic.w	r3, r3, #1
7000169a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
7000169e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
700016a2:	687b      	ldr	r3, [r7, #4]
700016a4:	681b      	ldr	r3, [r3, #0]
700016a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
700016aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
700016ae:	687a      	ldr	r2, [r7, #4]
700016b0:	6812      	ldr	r2, [r2, #0]
700016b2:	f023 0301 	bic.w	r3, r3, #1
700016b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
700016ba:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
700016be:	687b      	ldr	r3, [r7, #4]
700016c0:	681b      	ldr	r3, [r3, #0]
700016c2:	681a      	ldr	r2, [r3, #0]
700016c4:	687b      	ldr	r3, [r7, #4]
700016c6:	681b      	ldr	r3, [r3, #0]
700016c8:	f022 0201 	bic.w	r2, r2, #1
700016cc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
700016ce:	687b      	ldr	r3, [r7, #4]
700016d0:	681b      	ldr	r3, [r3, #0]
700016d2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
700016d6:	687b      	ldr	r3, [r7, #4]
700016d8:	681b      	ldr	r3, [r3, #0]
700016da:	f042 0201 	orr.w	r2, r2, #1
700016de:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
700016e2:	687b      	ldr	r3, [r7, #4]
700016e4:	681b      	ldr	r3, [r3, #0]
700016e6:	681a      	ldr	r2, [r3, #0]
700016e8:	687b      	ldr	r3, [r7, #4]
700016ea:	681b      	ldr	r3, [r3, #0]
700016ec:	f022 0202 	bic.w	r2, r2, #2
700016f0:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
700016f2:	2300      	movs	r3, #0
700016f4:	60fb      	str	r3, [r7, #12]
700016f6:	e00e      	b.n	70001716 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
700016f8:	687b      	ldr	r3, [r7, #4]
700016fa:	68fa      	ldr	r2, [r7, #12]
700016fc:	3212      	adds	r2, #18
700016fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70001702:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
70001704:	68bb      	ldr	r3, [r7, #8]
70001706:	68db      	ldr	r3, [r3, #12]
70001708:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
7000170c:	68bb      	ldr	r3, [r7, #8]
7000170e:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
70001710:	68fb      	ldr	r3, [r7, #12]
70001712:	3301      	adds	r3, #1
70001714:	60fb      	str	r3, [r7, #12]
70001716:	68fb      	ldr	r3, [r7, #12]
70001718:	2b03      	cmp	r3, #3
7000171a:	d9ed      	bls.n	700016f8 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
7000171c:	687b      	ldr	r3, [r7, #4]
7000171e:	2200      	movs	r2, #0
70001720:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
70001722:	687b      	ldr	r3, [r7, #4]
70001724:	2210      	movs	r2, #16
70001726:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
7000172a:	2300      	movs	r3, #0
7000172c:	e000      	b.n	70001730 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
7000172e:	2301      	movs	r3, #1
  }
}
70001730:	4618      	mov	r0, r3
70001732:	3714      	adds	r7, #20
70001734:	46bd      	mov	sp, r7
70001736:	f85d 7b04 	ldr.w	r7, [sp], #4
7000173a:	4770      	bx	lr
7000173c:	ffff2f3e 	.word	0xffff2f3e

70001740 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
70001740:	b580      	push	{r7, lr}
70001742:	b082      	sub	sp, #8
70001744:	af00      	add	r7, sp, #0
70001746:	6078      	str	r0, [r7, #4]
70001748:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
7000174a:	683b      	ldr	r3, [r7, #0]
7000174c:	2b00      	cmp	r3, #0
7000174e:	d109      	bne.n	70001764 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
70001750:	687b      	ldr	r3, [r7, #4]
70001752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
70001756:	f043 0201 	orr.w	r2, r3, #1
7000175a:	687b      	ldr	r3, [r7, #4]
7000175c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
70001760:	2301      	movs	r3, #1
70001762:	e03a      	b.n	700017da <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
70001764:	687b      	ldr	r3, [r7, #4]
70001766:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
7000176a:	2b23      	cmp	r3, #35	@ 0x23
7000176c:	d134      	bne.n	700017d8 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
7000176e:	683b      	ldr	r3, [r7, #0]
70001770:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
70001772:	687b      	ldr	r3, [r7, #4]
70001774:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
70001776:	2201      	movs	r2, #1
70001778:	6839      	ldr	r1, [r7, #0]
7000177a:	6878      	ldr	r0, [r7, #4]
7000177c:	f001 f8c4 	bl	70002908 <ETH_Prepare_Tx_Descriptors>
70001780:	4603      	mov	r3, r0
70001782:	2b00      	cmp	r3, #0
70001784:	d009      	beq.n	7000179a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
70001786:	687b      	ldr	r3, [r7, #4]
70001788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
7000178c:	f043 0202 	orr.w	r2, r3, #2
70001790:	687b      	ldr	r3, [r7, #4]
70001792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
70001796:	2301      	movs	r3, #1
70001798:	e01f      	b.n	700017da <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
7000179a:	f3bf 8f4f 	dsb	sy
}
7000179e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
700017a0:	687b      	ldr	r3, [r7, #4]
700017a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
700017a4:	1c5a      	adds	r2, r3, #1
700017a6:	687b      	ldr	r3, [r7, #4]
700017a8:	629a      	str	r2, [r3, #40]	@ 0x28
700017aa:	687b      	ldr	r3, [r7, #4]
700017ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
700017ae:	2b03      	cmp	r3, #3
700017b0:	d904      	bls.n	700017bc <HAL_ETH_Transmit_IT+0x7c>
700017b2:	687b      	ldr	r3, [r7, #4]
700017b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
700017b6:	1f1a      	subs	r2, r3, #4
700017b8:	687b      	ldr	r3, [r7, #4]
700017ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
700017bc:	687b      	ldr	r3, [r7, #4]
700017be:	6a99      	ldr	r1, [r3, #40]	@ 0x28
700017c0:	687b      	ldr	r3, [r7, #4]
700017c2:	681a      	ldr	r2, [r3, #0]
700017c4:	687b      	ldr	r3, [r7, #4]
700017c6:	3106      	adds	r1, #6
700017c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
700017cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
700017d0:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
700017d4:	2300      	movs	r3, #0
700017d6:	e000      	b.n	700017da <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
700017d8:	2301      	movs	r3, #1
  }
}
700017da:	4618      	mov	r0, r3
700017dc:	3708      	adds	r7, #8
700017de:	46bd      	mov	sp, r7
700017e0:	bd80      	pop	{r7, pc}

700017e2 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
700017e2:	b580      	push	{r7, lr}
700017e4:	b088      	sub	sp, #32
700017e6:	af00      	add	r7, sp, #0
700017e8:	6078      	str	r0, [r7, #4]
700017ea:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
700017ec:	2300      	movs	r3, #0
700017ee:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
700017f0:	2300      	movs	r3, #0
700017f2:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
700017f4:	683b      	ldr	r3, [r7, #0]
700017f6:	2b00      	cmp	r3, #0
700017f8:	d109      	bne.n	7000180e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
700017fa:	687b      	ldr	r3, [r7, #4]
700017fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
70001800:	f043 0201 	orr.w	r2, r3, #1
70001804:	687b      	ldr	r3, [r7, #4]
70001806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
7000180a:	2301      	movs	r3, #1
7000180c:	e0a2      	b.n	70001954 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
7000180e:	687b      	ldr	r3, [r7, #4]
70001810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
70001814:	2b23      	cmp	r3, #35	@ 0x23
70001816:	d001      	beq.n	7000181c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
70001818:	2301      	movs	r3, #1
7000181a:	e09b      	b.n	70001954 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
7000181c:	687b      	ldr	r3, [r7, #4]
7000181e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
70001820:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
70001822:	687b      	ldr	r3, [r7, #4]
70001824:	69fa      	ldr	r2, [r7, #28]
70001826:	3212      	adds	r2, #18
70001828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
7000182c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
7000182e:	687b      	ldr	r3, [r7, #4]
70001830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70001832:	f1c3 0304 	rsb	r3, r3, #4
70001836:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
70001838:	e064      	b.n	70001904 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
7000183a:	69bb      	ldr	r3, [r7, #24]
7000183c:	68db      	ldr	r3, [r3, #12]
7000183e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
70001842:	2b00      	cmp	r3, #0
70001844:	d007      	beq.n	70001856 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
70001846:	69bb      	ldr	r3, [r7, #24]
70001848:	685a      	ldr	r2, [r3, #4]
7000184a:	687b      	ldr	r3, [r7, #4]
7000184c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
7000184e:	69bb      	ldr	r3, [r7, #24]
70001850:	681a      	ldr	r2, [r3, #0]
70001852:	687b      	ldr	r3, [r7, #4]
70001854:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
70001856:	69bb      	ldr	r3, [r7, #24]
70001858:	68db      	ldr	r3, [r3, #12]
7000185a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
7000185e:	2b00      	cmp	r3, #0
70001860:	d103      	bne.n	7000186a <HAL_ETH_ReadData+0x88>
70001862:	687b      	ldr	r3, [r7, #4]
70001864:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
70001866:	2b00      	cmp	r3, #0
70001868:	d03a      	beq.n	700018e0 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
7000186a:	69bb      	ldr	r3, [r7, #24]
7000186c:	68db      	ldr	r3, [r3, #12]
7000186e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
70001872:	2b00      	cmp	r3, #0
70001874:	d005      	beq.n	70001882 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
70001876:	687b      	ldr	r3, [r7, #4]
70001878:	2200      	movs	r2, #0
7000187a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
7000187c:	687b      	ldr	r3, [r7, #4]
7000187e:	2200      	movs	r2, #0
70001880:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
70001882:	69bb      	ldr	r3, [r7, #24]
70001884:	68db      	ldr	r3, [r3, #12]
70001886:	f3c3 020e 	ubfx	r2, r3, #0, #15
7000188a:	687b      	ldr	r3, [r7, #4]
7000188c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
7000188e:	1ad3      	subs	r3, r2, r3
70001890:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
70001892:	69bb      	ldr	r3, [r7, #24]
70001894:	68db      	ldr	r3, [r3, #12]
70001896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
7000189a:	2b00      	cmp	r3, #0
7000189c:	d005      	beq.n	700018aa <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
7000189e:	69bb      	ldr	r3, [r7, #24]
700018a0:	68da      	ldr	r2, [r3, #12]
700018a2:	687b      	ldr	r3, [r7, #4]
700018a4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
700018a6:	2301      	movs	r3, #1
700018a8:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
700018aa:	687b      	ldr	r3, [r7, #4]
700018ac:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
700018b0:	687b      	ldr	r3, [r7, #4]
700018b2:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
700018b6:	69bb      	ldr	r3, [r7, #24]
700018b8:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
700018ba:	461a      	mov	r2, r3
700018bc:	68bb      	ldr	r3, [r7, #8]
700018be:	b29b      	uxth	r3, r3
700018c0:	f003 fe62 	bl	70005588 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
700018c4:	687b      	ldr	r3, [r7, #4]
700018c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
700018c8:	1c5a      	adds	r2, r3, #1
700018ca:	687b      	ldr	r3, [r7, #4]
700018cc:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
700018ce:	687b      	ldr	r3, [r7, #4]
700018d0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
700018d2:	68bb      	ldr	r3, [r7, #8]
700018d4:	441a      	add	r2, r3
700018d6:	687b      	ldr	r3, [r7, #4]
700018d8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
700018da:	69bb      	ldr	r3, [r7, #24]
700018dc:	2200      	movs	r2, #0
700018de:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
700018e0:	69fb      	ldr	r3, [r7, #28]
700018e2:	3301      	adds	r3, #1
700018e4:	61fb      	str	r3, [r7, #28]
700018e6:	69fb      	ldr	r3, [r7, #28]
700018e8:	2b03      	cmp	r3, #3
700018ea:	d902      	bls.n	700018f2 <HAL_ETH_ReadData+0x110>
700018ec:	69fb      	ldr	r3, [r7, #28]
700018ee:	3b04      	subs	r3, #4
700018f0:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
700018f2:	687b      	ldr	r3, [r7, #4]
700018f4:	69fa      	ldr	r2, [r7, #28]
700018f6:	3212      	adds	r2, #18
700018f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
700018fc:	61bb      	str	r3, [r7, #24]
    desccnt++;
700018fe:	697b      	ldr	r3, [r7, #20]
70001900:	3301      	adds	r3, #1
70001902:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
70001904:	69bb      	ldr	r3, [r7, #24]
70001906:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
70001908:	2b00      	cmp	r3, #0
7000190a:	db06      	blt.n	7000191a <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
7000190c:	697a      	ldr	r2, [r7, #20]
7000190e:	68fb      	ldr	r3, [r7, #12]
70001910:	429a      	cmp	r2, r3
70001912:	d202      	bcs.n	7000191a <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
70001914:	7cfb      	ldrb	r3, [r7, #19]
70001916:	2b00      	cmp	r3, #0
70001918:	d08f      	beq.n	7000183a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
7000191a:	687b      	ldr	r3, [r7, #4]
7000191c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
7000191e:	697b      	ldr	r3, [r7, #20]
70001920:	441a      	add	r2, r3
70001922:	687b      	ldr	r3, [r7, #4]
70001924:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
70001926:	687b      	ldr	r3, [r7, #4]
70001928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7000192a:	2b00      	cmp	r3, #0
7000192c:	d002      	beq.n	70001934 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
7000192e:	6878      	ldr	r0, [r7, #4]
70001930:	f000 f814 	bl	7000195c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
70001934:	687b      	ldr	r3, [r7, #4]
70001936:	69fa      	ldr	r2, [r7, #28]
70001938:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
7000193a:	7cfb      	ldrb	r3, [r7, #19]
7000193c:	2b01      	cmp	r3, #1
7000193e:	d108      	bne.n	70001952 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
70001940:	687b      	ldr	r3, [r7, #4]
70001942:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
70001944:	683b      	ldr	r3, [r7, #0]
70001946:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
70001948:	687b      	ldr	r3, [r7, #4]
7000194a:	2200      	movs	r2, #0
7000194c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
7000194e:	2300      	movs	r3, #0
70001950:	e000      	b.n	70001954 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
70001952:	2301      	movs	r3, #1
}
70001954:	4618      	mov	r0, r3
70001956:	3720      	adds	r7, #32
70001958:	46bd      	mov	sp, r7
7000195a:	bd80      	pop	{r7, pc}

7000195c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
7000195c:	b580      	push	{r7, lr}
7000195e:	b088      	sub	sp, #32
70001960:	af00      	add	r7, sp, #0
70001962:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
70001964:	2300      	movs	r3, #0
70001966:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
70001968:	2301      	movs	r3, #1
7000196a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
7000196c:	687b      	ldr	r3, [r7, #4]
7000196e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
70001970:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
70001972:	687b      	ldr	r3, [r7, #4]
70001974:	69fa      	ldr	r2, [r7, #28]
70001976:	3212      	adds	r2, #18
70001978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
7000197c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
7000197e:	687b      	ldr	r3, [r7, #4]
70001980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70001982:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
70001984:	e038      	b.n	700019f8 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
70001986:	697b      	ldr	r3, [r7, #20]
70001988:	691b      	ldr	r3, [r3, #16]
7000198a:	2b00      	cmp	r3, #0
7000198c:	d112      	bne.n	700019b4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
7000198e:	f107 0308 	add.w	r3, r7, #8
70001992:	4618      	mov	r0, r3
70001994:	f003 fdc8 	bl	70005528 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
70001998:	68bb      	ldr	r3, [r7, #8]
7000199a:	2b00      	cmp	r3, #0
7000199c:	d102      	bne.n	700019a4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
7000199e:	2300      	movs	r3, #0
700019a0:	74fb      	strb	r3, [r7, #19]
700019a2:	e007      	b.n	700019b4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
700019a4:	68bb      	ldr	r3, [r7, #8]
700019a6:	461a      	mov	r2, r3
700019a8:	697b      	ldr	r3, [r7, #20]
700019aa:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
700019ac:	68bb      	ldr	r3, [r7, #8]
700019ae:	461a      	mov	r2, r3
700019b0:	697b      	ldr	r3, [r7, #20]
700019b2:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
700019b4:	7cfb      	ldrb	r3, [r7, #19]
700019b6:	2b00      	cmp	r3, #0
700019b8:	d01e      	beq.n	700019f8 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
700019ba:	687b      	ldr	r3, [r7, #4]
700019bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
700019be:	2b00      	cmp	r3, #0
700019c0:	d004      	beq.n	700019cc <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
700019c2:	697b      	ldr	r3, [r7, #20]
700019c4:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
700019c8:	60da      	str	r2, [r3, #12]
700019ca:	e003      	b.n	700019d4 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
700019cc:	697b      	ldr	r3, [r7, #20]
700019ce:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
700019d2:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
700019d4:	69fb      	ldr	r3, [r7, #28]
700019d6:	3301      	adds	r3, #1
700019d8:	61fb      	str	r3, [r7, #28]
700019da:	69fb      	ldr	r3, [r7, #28]
700019dc:	2b03      	cmp	r3, #3
700019de:	d902      	bls.n	700019e6 <ETH_UpdateDescriptor+0x8a>
700019e0:	69fb      	ldr	r3, [r7, #28]
700019e2:	3b04      	subs	r3, #4
700019e4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
700019e6:	687b      	ldr	r3, [r7, #4]
700019e8:	69fa      	ldr	r2, [r7, #28]
700019ea:	3212      	adds	r2, #18
700019ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
700019f0:	617b      	str	r3, [r7, #20]
      desccount--;
700019f2:	69bb      	ldr	r3, [r7, #24]
700019f4:	3b01      	subs	r3, #1
700019f6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
700019f8:	69bb      	ldr	r3, [r7, #24]
700019fa:	2b00      	cmp	r3, #0
700019fc:	d002      	beq.n	70001a04 <ETH_UpdateDescriptor+0xa8>
700019fe:	7cfb      	ldrb	r3, [r7, #19]
70001a00:	2b00      	cmp	r3, #0
70001a02:	d1c0      	bne.n	70001986 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
70001a04:	687b      	ldr	r3, [r7, #4]
70001a06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70001a08:	69ba      	ldr	r2, [r7, #24]
70001a0a:	429a      	cmp	r2, r3
70001a0c:	d01b      	beq.n	70001a46 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
70001a0e:	69fb      	ldr	r3, [r7, #28]
70001a10:	3301      	adds	r3, #1
70001a12:	f003 0303 	and.w	r3, r3, #3
70001a16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
70001a18:	f3bf 8f5f 	dmb	sy
}
70001a1c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
70001a1e:	687b      	ldr	r3, [r7, #4]
70001a20:	6919      	ldr	r1, [r3, #16]
70001a22:	68fa      	ldr	r2, [r7, #12]
70001a24:	4613      	mov	r3, r2
70001a26:	005b      	lsls	r3, r3, #1
70001a28:	4413      	add	r3, r2
70001a2a:	00db      	lsls	r3, r3, #3
70001a2c:	18ca      	adds	r2, r1, r3
70001a2e:	687b      	ldr	r3, [r7, #4]
70001a30:	681b      	ldr	r3, [r3, #0]
70001a32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001a36:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
70001a3a:	687b      	ldr	r3, [r7, #4]
70001a3c:	69fa      	ldr	r2, [r7, #28]
70001a3e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
70001a40:	687b      	ldr	r3, [r7, #4]
70001a42:	69ba      	ldr	r2, [r7, #24]
70001a44:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
70001a46:	bf00      	nop
70001a48:	3720      	adds	r7, #32
70001a4a:	46bd      	mov	sp, r7
70001a4c:	bd80      	pop	{r7, pc}

70001a4e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
70001a4e:	b580      	push	{r7, lr}
70001a50:	b086      	sub	sp, #24
70001a52:	af00      	add	r7, sp, #0
70001a54:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
70001a56:	687b      	ldr	r3, [r7, #4]
70001a58:	3318      	adds	r3, #24
70001a5a:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
70001a5c:	68bb      	ldr	r3, [r7, #8]
70001a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70001a60:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
70001a62:	68bb      	ldr	r3, [r7, #8]
70001a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70001a66:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
70001a68:	2301      	movs	r3, #1
70001a6a:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
70001a6c:	e047      	b.n	70001afe <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
70001a6e:	2301      	movs	r3, #1
70001a70:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
70001a72:	697b      	ldr	r3, [r7, #20]
70001a74:	3b01      	subs	r3, #1
70001a76:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
70001a78:	68ba      	ldr	r2, [r7, #8]
70001a7a:	693b      	ldr	r3, [r7, #16]
70001a7c:	3304      	adds	r3, #4
70001a7e:	009b      	lsls	r3, r3, #2
70001a80:	4413      	add	r3, r2
70001a82:	685b      	ldr	r3, [r3, #4]
70001a84:	2b00      	cmp	r3, #0
70001a86:	d10a      	bne.n	70001a9e <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
70001a88:	693b      	ldr	r3, [r7, #16]
70001a8a:	3301      	adds	r3, #1
70001a8c:	613b      	str	r3, [r7, #16]
70001a8e:	693b      	ldr	r3, [r7, #16]
70001a90:	2b03      	cmp	r3, #3
70001a92:	d902      	bls.n	70001a9a <HAL_ETH_ReleaseTxPacket+0x4c>
70001a94:	693b      	ldr	r3, [r7, #16]
70001a96:	3b04      	subs	r3, #4
70001a98:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
70001a9a:	2300      	movs	r3, #0
70001a9c:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
70001a9e:	7bbb      	ldrb	r3, [r7, #14]
70001aa0:	2b00      	cmp	r3, #0
70001aa2:	d02c      	beq.n	70001afe <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
70001aa4:	687b      	ldr	r3, [r7, #4]
70001aa6:	68d9      	ldr	r1, [r3, #12]
70001aa8:	693a      	ldr	r2, [r7, #16]
70001aaa:	4613      	mov	r3, r2
70001aac:	005b      	lsls	r3, r3, #1
70001aae:	4413      	add	r3, r2
70001ab0:	00db      	lsls	r3, r3, #3
70001ab2:	440b      	add	r3, r1
70001ab4:	68db      	ldr	r3, [r3, #12]
70001ab6:	2b00      	cmp	r3, #0
70001ab8:	db1f      	blt.n	70001afa <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
70001aba:	68ba      	ldr	r2, [r7, #8]
70001abc:	693b      	ldr	r3, [r7, #16]
70001abe:	3304      	adds	r3, #4
70001ac0:	009b      	lsls	r3, r3, #2
70001ac2:	4413      	add	r3, r2
70001ac4:	685b      	ldr	r3, [r3, #4]
70001ac6:	4618      	mov	r0, r3
70001ac8:	f003 fdc6 	bl	70005658 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
70001acc:	68ba      	ldr	r2, [r7, #8]
70001ace:	693b      	ldr	r3, [r7, #16]
70001ad0:	3304      	adds	r3, #4
70001ad2:	009b      	lsls	r3, r3, #2
70001ad4:	4413      	add	r3, r2
70001ad6:	2200      	movs	r2, #0
70001ad8:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
70001ada:	693b      	ldr	r3, [r7, #16]
70001adc:	3301      	adds	r3, #1
70001ade:	613b      	str	r3, [r7, #16]
70001ae0:	693b      	ldr	r3, [r7, #16]
70001ae2:	2b03      	cmp	r3, #3
70001ae4:	d902      	bls.n	70001aec <HAL_ETH_ReleaseTxPacket+0x9e>
70001ae6:	693b      	ldr	r3, [r7, #16]
70001ae8:	3b04      	subs	r3, #4
70001aea:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
70001aec:	68bb      	ldr	r3, [r7, #8]
70001aee:	697a      	ldr	r2, [r7, #20]
70001af0:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
70001af2:	68bb      	ldr	r3, [r7, #8]
70001af4:	693a      	ldr	r2, [r7, #16]
70001af6:	62da      	str	r2, [r3, #44]	@ 0x2c
70001af8:	e001      	b.n	70001afe <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
70001afa:	2300      	movs	r3, #0
70001afc:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
70001afe:	697b      	ldr	r3, [r7, #20]
70001b00:	2b00      	cmp	r3, #0
70001b02:	d002      	beq.n	70001b0a <HAL_ETH_ReleaseTxPacket+0xbc>
70001b04:	7bfb      	ldrb	r3, [r7, #15]
70001b06:	2b00      	cmp	r3, #0
70001b08:	d1b1      	bne.n	70001a6e <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
70001b0a:	2300      	movs	r3, #0
}
70001b0c:	4618      	mov	r0, r3
70001b0e:	3718      	adds	r7, #24
70001b10:	46bd      	mov	sp, r7
70001b12:	bd80      	pop	{r7, pc}

70001b14 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
70001b14:	b580      	push	{r7, lr}
70001b16:	b086      	sub	sp, #24
70001b18:	af00      	add	r7, sp, #0
70001b1a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
70001b1c:	687b      	ldr	r3, [r7, #4]
70001b1e:	681b      	ldr	r3, [r3, #0]
70001b20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
70001b24:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
70001b26:	687b      	ldr	r3, [r7, #4]
70001b28:	681b      	ldr	r3, [r3, #0]
70001b2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001b2e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
70001b32:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
70001b34:	687b      	ldr	r3, [r7, #4]
70001b36:	681b      	ldr	r3, [r3, #0]
70001b38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001b3c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
70001b40:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR2);
70001b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70001b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
70001b4a:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
70001b4c:	693b      	ldr	r3, [r7, #16]
70001b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
70001b52:	2b00      	cmp	r3, #0
70001b54:	d010      	beq.n	70001b78 <HAL_ETH_IRQHandler+0x64>
70001b56:	68fb      	ldr	r3, [r7, #12]
70001b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
70001b5c:	2b00      	cmp	r3, #0
70001b5e:	d00b      	beq.n	70001b78 <HAL_ETH_IRQHandler+0x64>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
70001b60:	687b      	ldr	r3, [r7, #4]
70001b62:	681b      	ldr	r3, [r3, #0]
70001b64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001b68:	461a      	mov	r2, r3
70001b6a:	f248 0340 	movw	r3, #32832	@ 0x8040
70001b6e:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
70001b72:	6878      	ldr	r0, [r7, #4]
70001b74:	f003 f86c 	bl	70004c50 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
70001b78:	693b      	ldr	r3, [r7, #16]
70001b7a:	f003 0301 	and.w	r3, r3, #1
70001b7e:	2b00      	cmp	r3, #0
70001b80:	d010      	beq.n	70001ba4 <HAL_ETH_IRQHandler+0x90>
70001b82:	68fb      	ldr	r3, [r7, #12]
70001b84:	f003 0301 	and.w	r3, r3, #1
70001b88:	2b00      	cmp	r3, #0
70001b8a:	d00b      	beq.n	70001ba4 <HAL_ETH_IRQHandler+0x90>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
70001b8c:	687b      	ldr	r3, [r7, #4]
70001b8e:	681b      	ldr	r3, [r3, #0]
70001b90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001b94:	461a      	mov	r2, r3
70001b96:	f248 0301 	movw	r3, #32769	@ 0x8001
70001b9a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
70001b9e:	6878      	ldr	r0, [r7, #4]
70001ba0:	f003 f866 	bl	70004c70 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
70001ba4:	693b      	ldr	r3, [r7, #16]
70001ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
70001baa:	2b00      	cmp	r3, #0
70001bac:	d047      	beq.n	70001c3e <HAL_ETH_IRQHandler+0x12a>
70001bae:	68fb      	ldr	r3, [r7, #12]
70001bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
70001bb4:	2b00      	cmp	r3, #0
70001bb6:	d042      	beq.n	70001c3e <HAL_ETH_IRQHandler+0x12a>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
70001bb8:	687b      	ldr	r3, [r7, #4]
70001bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
70001bbe:	f043 0208 	orr.w	r2, r3, #8
70001bc2:	687b      	ldr	r3, [r7, #4]
70001bc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
70001bc8:	693b      	ldr	r3, [r7, #16]
70001bca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
70001bce:	2b00      	cmp	r3, #0
70001bd0:	d01e      	beq.n	70001c10 <HAL_ETH_IRQHandler+0xfc>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
70001bd2:	687b      	ldr	r3, [r7, #4]
70001bd4:	681b      	ldr	r3, [r3, #0]
70001bd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001bda:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
70001bde:	f241 1302 	movw	r3, #4354	@ 0x1102
70001be2:	4013      	ands	r3, r2
70001be4:	687a      	ldr	r2, [r7, #4]
70001be6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
70001bea:	687b      	ldr	r3, [r7, #4]
70001bec:	681b      	ldr	r3, [r3, #0]
70001bee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001bf2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
70001bf6:	687a      	ldr	r2, [r7, #4]
70001bf8:	6812      	ldr	r2, [r2, #0]
70001bfa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
70001bfe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
70001c02:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
70001c06:	687b      	ldr	r3, [r7, #4]
70001c08:	22e0      	movs	r2, #224	@ 0xe0
70001c0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
70001c0e:	e013      	b.n	70001c38 <HAL_ETH_IRQHandler+0x124>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
70001c10:	687b      	ldr	r3, [r7, #4]
70001c12:	681b      	ldr	r3, [r3, #0]
70001c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001c18:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
70001c1c:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
70001c20:	687b      	ldr	r3, [r7, #4]
70001c22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
70001c26:	687b      	ldr	r3, [r7, #4]
70001c28:	681b      	ldr	r3, [r3, #0]
70001c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70001c2e:	461a      	mov	r2, r3
70001c30:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
70001c34:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
70001c38:	6878      	ldr	r0, [r7, #4]
70001c3a:	f003 f829 	bl	70004c90 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
70001c3e:	697b      	ldr	r3, [r7, #20]
70001c40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
70001c44:	2b00      	cmp	r3, #0
70001c46:	d104      	bne.n	70001c52 <HAL_ETH_IRQHandler+0x13e>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
70001c48:	697b      	ldr	r3, [r7, #20]
70001c4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
70001c4e:	2b00      	cmp	r3, #0
70001c50:	d019      	beq.n	70001c86 <HAL_ETH_IRQHandler+0x172>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
70001c52:	687b      	ldr	r3, [r7, #4]
70001c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
70001c58:	f043 0210 	orr.w	r2, r3, #16
70001c5c:	687b      	ldr	r3, [r7, #4]
70001c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
70001c62:	687b      	ldr	r3, [r7, #4]
70001c64:	681b      	ldr	r3, [r3, #0]
70001c66:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
70001c6a:	687b      	ldr	r3, [r7, #4]
70001c6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
70001c70:	687b      	ldr	r3, [r7, #4]
70001c72:	22e0      	movs	r2, #224	@ 0xe0
70001c74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
70001c78:	6878      	ldr	r0, [r7, #4]
70001c7a:	f003 f809 	bl	70004c90 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
70001c7e:	687b      	ldr	r3, [r7, #4]
70001c80:	2200      	movs	r2, #0
70001c82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
70001c86:	697b      	ldr	r3, [r7, #20]
70001c88:	f003 0310 	and.w	r3, r3, #16
70001c8c:	2b00      	cmp	r3, #0
70001c8e:	d00f      	beq.n	70001cb0 <HAL_ETH_IRQHandler+0x19c>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
70001c90:	687b      	ldr	r3, [r7, #4]
70001c92:	681b      	ldr	r3, [r3, #0]
70001c94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
70001c98:	f003 0260 	and.w	r2, r3, #96	@ 0x60
70001c9c:	687b      	ldr	r3, [r7, #4]
70001c9e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
70001ca2:	6878      	ldr	r0, [r7, #4]
70001ca4:	f000 f82b 	bl	70001cfe <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
70001ca8:	687b      	ldr	r3, [r7, #4]
70001caa:	2200      	movs	r2, #0
70001cac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
70001cb0:	697b      	ldr	r3, [r7, #20]
70001cb2:	f003 0320 	and.w	r3, r3, #32
70001cb6:	2b00      	cmp	r3, #0
70001cb8:	d00f      	beq.n	70001cda <HAL_ETH_IRQHandler+0x1c6>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
70001cba:	687b      	ldr	r3, [r7, #4]
70001cbc:	681b      	ldr	r3, [r3, #0]
70001cbe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
70001cc2:	f003 020f 	and.w	r2, r3, #15
70001cc6:	687b      	ldr	r3, [r7, #4]
70001cc8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
70001ccc:	6878      	ldr	r0, [r7, #4]
70001cce:	f000 f820 	bl	70001d12 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
70001cd2:	687b      	ldr	r3, [r7, #4]
70001cd4:	2200      	movs	r2, #0
70001cd6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
70001cda:	68bb      	ldr	r3, [r7, #8]
70001cdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
70001ce0:	2b00      	cmp	r3, #0
70001ce2:	d008      	beq.n	70001cf6 <HAL_ETH_IRQHandler+0x1e2>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
70001ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70001ce8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
70001cec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
70001cf0:	6878      	ldr	r0, [r7, #4]
70001cf2:	f000 f818 	bl	70001d26 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
70001cf6:	bf00      	nop
70001cf8:	3718      	adds	r7, #24
70001cfa:	46bd      	mov	sp, r7
70001cfc:	bd80      	pop	{r7, pc}

70001cfe <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
70001cfe:	b480      	push	{r7}
70001d00:	b083      	sub	sp, #12
70001d02:	af00      	add	r7, sp, #0
70001d04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
70001d06:	bf00      	nop
70001d08:	370c      	adds	r7, #12
70001d0a:	46bd      	mov	sp, r7
70001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
70001d10:	4770      	bx	lr

70001d12 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
70001d12:	b480      	push	{r7}
70001d14:	b083      	sub	sp, #12
70001d16:	af00      	add	r7, sp, #0
70001d18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
70001d1a:	bf00      	nop
70001d1c:	370c      	adds	r7, #12
70001d1e:	46bd      	mov	sp, r7
70001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
70001d24:	4770      	bx	lr

70001d26 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
70001d26:	b480      	push	{r7}
70001d28:	b083      	sub	sp, #12
70001d2a:	af00      	add	r7, sp, #0
70001d2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
70001d2e:	bf00      	nop
70001d30:	370c      	adds	r7, #12
70001d32:	46bd      	mov	sp, r7
70001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
70001d38:	4770      	bx	lr

70001d3a <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
70001d3a:	b580      	push	{r7, lr}
70001d3c:	b086      	sub	sp, #24
70001d3e:	af00      	add	r7, sp, #0
70001d40:	60f8      	str	r0, [r7, #12]
70001d42:	60b9      	str	r1, [r7, #8]
70001d44:	607a      	str	r2, [r7, #4]
70001d46:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
70001d48:	68fb      	ldr	r3, [r7, #12]
70001d4a:	681b      	ldr	r3, [r3, #0]
70001d4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
70001d50:	f003 0301 	and.w	r3, r3, #1
70001d54:	2b00      	cmp	r3, #0
70001d56:	d001      	beq.n	70001d5c <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
70001d58:	2301      	movs	r3, #1
70001d5a:	e03e      	b.n	70001dda <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
70001d5c:	68fb      	ldr	r3, [r7, #12]
70001d5e:	681b      	ldr	r3, [r3, #0]
70001d60:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
70001d64:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
70001d66:	697b      	ldr	r3, [r7, #20]
70001d68:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
70001d6c:	68bb      	ldr	r3, [r7, #8]
70001d6e:	055b      	lsls	r3, r3, #21
70001d70:	4313      	orrs	r3, r2
70001d72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
70001d74:	697b      	ldr	r3, [r7, #20]
70001d76:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
70001d7a:	687b      	ldr	r3, [r7, #4]
70001d7c:	041b      	lsls	r3, r3, #16
70001d7e:	4313      	orrs	r3, r2
70001d80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
70001d82:	697b      	ldr	r3, [r7, #20]
70001d84:	f043 030c 	orr.w	r3, r3, #12
70001d88:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
70001d8a:	697b      	ldr	r3, [r7, #20]
70001d8c:	f043 0301 	orr.w	r3, r3, #1
70001d90:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
70001d92:	68fb      	ldr	r3, [r7, #12]
70001d94:	681b      	ldr	r3, [r3, #0]
70001d96:	697a      	ldr	r2, [r7, #20]
70001d98:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
70001d9c:	f7ff f960 	bl	70001060 <HAL_GetTick>
70001da0:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
70001da2:	e009      	b.n	70001db8 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
70001da4:	f7ff f95c 	bl	70001060 <HAL_GetTick>
70001da8:	4602      	mov	r2, r0
70001daa:	693b      	ldr	r3, [r7, #16]
70001dac:	1ad3      	subs	r3, r2, r3
70001dae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
70001db2:	d901      	bls.n	70001db8 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
70001db4:	2301      	movs	r3, #1
70001db6:	e010      	b.n	70001dda <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
70001db8:	68fb      	ldr	r3, [r7, #12]
70001dba:	681b      	ldr	r3, [r3, #0]
70001dbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
70001dc0:	f003 0301 	and.w	r3, r3, #1
70001dc4:	2b00      	cmp	r3, #0
70001dc6:	d1ed      	bne.n	70001da4 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
70001dc8:	68fb      	ldr	r3, [r7, #12]
70001dca:	681b      	ldr	r3, [r3, #0]
70001dcc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
70001dd0:	b29b      	uxth	r3, r3
70001dd2:	461a      	mov	r2, r3
70001dd4:	683b      	ldr	r3, [r7, #0]
70001dd6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
70001dd8:	2300      	movs	r3, #0
}
70001dda:	4618      	mov	r0, r3
70001ddc:	3718      	adds	r7, #24
70001dde:	46bd      	mov	sp, r7
70001de0:	bd80      	pop	{r7, pc}
	...

70001de4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
70001de4:	b580      	push	{r7, lr}
70001de6:	b086      	sub	sp, #24
70001de8:	af00      	add	r7, sp, #0
70001dea:	60f8      	str	r0, [r7, #12]
70001dec:	60b9      	str	r1, [r7, #8]
70001dee:	607a      	str	r2, [r7, #4]
70001df0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
70001df2:	68fb      	ldr	r3, [r7, #12]
70001df4:	681b      	ldr	r3, [r3, #0]
70001df6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
70001dfa:	f003 0301 	and.w	r3, r3, #1
70001dfe:	2b00      	cmp	r3, #0
70001e00:	d001      	beq.n	70001e06 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
70001e02:	2301      	movs	r3, #1
70001e04:	e03c      	b.n	70001e80 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
70001e06:	68fb      	ldr	r3, [r7, #12]
70001e08:	681b      	ldr	r3, [r3, #0]
70001e0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
70001e0e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
70001e10:	697b      	ldr	r3, [r7, #20]
70001e12:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
70001e16:	68bb      	ldr	r3, [r7, #8]
70001e18:	055b      	lsls	r3, r3, #21
70001e1a:	4313      	orrs	r3, r2
70001e1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
70001e1e:	697b      	ldr	r3, [r7, #20]
70001e20:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
70001e24:	687b      	ldr	r3, [r7, #4]
70001e26:	041b      	lsls	r3, r3, #16
70001e28:	4313      	orrs	r3, r2
70001e2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
70001e2c:	697b      	ldr	r3, [r7, #20]
70001e2e:	f023 030c 	bic.w	r3, r3, #12
70001e32:	f043 0304 	orr.w	r3, r3, #4
70001e36:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
70001e38:	697b      	ldr	r3, [r7, #20]
70001e3a:	f043 0301 	orr.w	r3, r3, #1
70001e3e:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
70001e40:	683b      	ldr	r3, [r7, #0]
70001e42:	b29a      	uxth	r2, r3
70001e44:	4b10      	ldr	r3, [pc, #64]	@ (70001e88 <HAL_ETH_WritePHYRegister+0xa4>)
70001e46:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
70001e4a:	4a0f      	ldr	r2, [pc, #60]	@ (70001e88 <HAL_ETH_WritePHYRegister+0xa4>)
70001e4c:	697b      	ldr	r3, [r7, #20]
70001e4e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
70001e52:	f7ff f905 	bl	70001060 <HAL_GetTick>
70001e56:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
70001e58:	e009      	b.n	70001e6e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
70001e5a:	f7ff f901 	bl	70001060 <HAL_GetTick>
70001e5e:	4602      	mov	r2, r0
70001e60:	693b      	ldr	r3, [r7, #16]
70001e62:	1ad3      	subs	r3, r2, r3
70001e64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
70001e68:	d901      	bls.n	70001e6e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
70001e6a:	2301      	movs	r3, #1
70001e6c:	e008      	b.n	70001e80 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
70001e6e:	68fb      	ldr	r3, [r7, #12]
70001e70:	681b      	ldr	r3, [r3, #0]
70001e72:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
70001e76:	f003 0301 	and.w	r3, r3, #1
70001e7a:	2b00      	cmp	r3, #0
70001e7c:	d1ed      	bne.n	70001e5a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
70001e7e:	2300      	movs	r3, #0
}
70001e80:	4618      	mov	r0, r3
70001e82:	3718      	adds	r7, #24
70001e84:	46bd      	mov	sp, r7
70001e86:	bd80      	pop	{r7, pc}
70001e88:	40028000 	.word	0x40028000

70001e8c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
70001e8c:	b480      	push	{r7}
70001e8e:	b083      	sub	sp, #12
70001e90:	af00      	add	r7, sp, #0
70001e92:	6078      	str	r0, [r7, #4]
70001e94:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
70001e96:	683b      	ldr	r3, [r7, #0]
70001e98:	2b00      	cmp	r3, #0
70001e9a:	d101      	bne.n	70001ea0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
70001e9c:	2301      	movs	r3, #1
70001e9e:	e1c3      	b.n	70002228 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
70001ea0:	687b      	ldr	r3, [r7, #4]
70001ea2:	681b      	ldr	r3, [r3, #0]
70001ea4:	681b      	ldr	r3, [r3, #0]
70001ea6:	f003 020c 	and.w	r2, r3, #12
70001eaa:	683b      	ldr	r3, [r7, #0]
70001eac:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
70001eae:	687b      	ldr	r3, [r7, #4]
70001eb0:	681b      	ldr	r3, [r3, #0]
70001eb2:	681b      	ldr	r3, [r3, #0]
70001eb4:	f003 0310 	and.w	r3, r3, #16
70001eb8:	2b00      	cmp	r3, #0
70001eba:	bf14      	ite	ne
70001ebc:	2301      	movne	r3, #1
70001ebe:	2300      	moveq	r3, #0
70001ec0:	b2db      	uxtb	r3, r3
70001ec2:	461a      	mov	r2, r3
70001ec4:	683b      	ldr	r3, [r7, #0]
70001ec6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
70001eca:	687b      	ldr	r3, [r7, #4]
70001ecc:	681b      	ldr	r3, [r3, #0]
70001ece:	681b      	ldr	r3, [r3, #0]
70001ed0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
70001ed4:	683b      	ldr	r3, [r7, #0]
70001ed6:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
70001ed8:	687b      	ldr	r3, [r7, #4]
70001eda:	681b      	ldr	r3, [r3, #0]
70001edc:	681b      	ldr	r3, [r3, #0]
70001ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
70001ee2:	2b00      	cmp	r3, #0
70001ee4:	bf0c      	ite	eq
70001ee6:	2301      	moveq	r3, #1
70001ee8:	2300      	movne	r3, #0
70001eea:	b2db      	uxtb	r3, r3
70001eec:	461a      	mov	r2, r3
70001eee:	683b      	ldr	r3, [r7, #0]
70001ef0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
70001ef4:	687b      	ldr	r3, [r7, #4]
70001ef6:	681b      	ldr	r3, [r3, #0]
70001ef8:	681b      	ldr	r3, [r3, #0]
70001efa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
70001efe:	2b00      	cmp	r3, #0
70001f00:	bf14      	ite	ne
70001f02:	2301      	movne	r3, #1
70001f04:	2300      	moveq	r3, #0
70001f06:	b2db      	uxtb	r3, r3
70001f08:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
70001f0a:	683b      	ldr	r3, [r7, #0]
70001f0c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
70001f0e:	687b      	ldr	r3, [r7, #4]
70001f10:	681b      	ldr	r3, [r3, #0]
70001f12:	681b      	ldr	r3, [r3, #0]
70001f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
70001f18:	2b00      	cmp	r3, #0
70001f1a:	bf0c      	ite	eq
70001f1c:	2301      	moveq	r3, #1
70001f1e:	2300      	movne	r3, #0
70001f20:	b2db      	uxtb	r3, r3
70001f22:	461a      	mov	r2, r3
70001f24:	683b      	ldr	r3, [r7, #0]
70001f26:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
70001f28:	687b      	ldr	r3, [r7, #4]
70001f2a:	681b      	ldr	r3, [r3, #0]
70001f2c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
70001f2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
70001f32:	2b00      	cmp	r3, #0
70001f34:	bf14      	ite	ne
70001f36:	2301      	movne	r3, #1
70001f38:	2300      	moveq	r3, #0
70001f3a:	b2db      	uxtb	r3, r3
70001f3c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
70001f3e:	683b      	ldr	r3, [r7, #0]
70001f40:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
70001f42:	687b      	ldr	r3, [r7, #4]
70001f44:	681b      	ldr	r3, [r3, #0]
70001f46:	681b      	ldr	r3, [r3, #0]
70001f48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
70001f4c:	2b00      	cmp	r3, #0
70001f4e:	bf14      	ite	ne
70001f50:	2301      	movne	r3, #1
70001f52:	2300      	moveq	r3, #0
70001f54:	b2db      	uxtb	r3, r3
70001f56:	461a      	mov	r2, r3
70001f58:	683b      	ldr	r3, [r7, #0]
70001f5a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
70001f5c:	687b      	ldr	r3, [r7, #4]
70001f5e:	681b      	ldr	r3, [r3, #0]
70001f60:	681b      	ldr	r3, [r3, #0]
70001f62:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
70001f66:	683b      	ldr	r3, [r7, #0]
70001f68:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
70001f6a:	687b      	ldr	r3, [r7, #4]
70001f6c:	681b      	ldr	r3, [r3, #0]
70001f6e:	681b      	ldr	r3, [r3, #0]
70001f70:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
70001f74:	683b      	ldr	r3, [r7, #0]
70001f76:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
70001f78:	687b      	ldr	r3, [r7, #4]
70001f7a:	681b      	ldr	r3, [r3, #0]
70001f7c:	681b      	ldr	r3, [r3, #0]
70001f7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
70001f82:	2b00      	cmp	r3, #0
70001f84:	bf14      	ite	ne
70001f86:	2301      	movne	r3, #1
70001f88:	2300      	moveq	r3, #0
70001f8a:	b2db      	uxtb	r3, r3
70001f8c:	461a      	mov	r2, r3
70001f8e:	683b      	ldr	r3, [r7, #0]
70001f90:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
70001f92:	687b      	ldr	r3, [r7, #4]
70001f94:	681b      	ldr	r3, [r3, #0]
70001f96:	681b      	ldr	r3, [r3, #0]
70001f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
70001f9c:	2b00      	cmp	r3, #0
70001f9e:	bf0c      	ite	eq
70001fa0:	2301      	moveq	r3, #1
70001fa2:	2300      	movne	r3, #0
70001fa4:	b2db      	uxtb	r3, r3
70001fa6:	461a      	mov	r2, r3
70001fa8:	683b      	ldr	r3, [r7, #0]
70001faa:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
70001fac:	687b      	ldr	r3, [r7, #4]
70001fae:	681b      	ldr	r3, [r3, #0]
70001fb0:	681b      	ldr	r3, [r3, #0]
70001fb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
70001fb6:	2b00      	cmp	r3, #0
70001fb8:	bf0c      	ite	eq
70001fba:	2301      	moveq	r3, #1
70001fbc:	2300      	movne	r3, #0
70001fbe:	b2db      	uxtb	r3, r3
70001fc0:	461a      	mov	r2, r3
70001fc2:	683b      	ldr	r3, [r7, #0]
70001fc4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
70001fc6:	687b      	ldr	r3, [r7, #4]
70001fc8:	681b      	ldr	r3, [r3, #0]
70001fca:	681b      	ldr	r3, [r3, #0]
70001fcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
70001fd0:	2b00      	cmp	r3, #0
70001fd2:	bf14      	ite	ne
70001fd4:	2301      	movne	r3, #1
70001fd6:	2300      	moveq	r3, #0
70001fd8:	b2db      	uxtb	r3, r3
70001fda:	461a      	mov	r2, r3
70001fdc:	683b      	ldr	r3, [r7, #0]
70001fde:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
70001fe0:	687b      	ldr	r3, [r7, #4]
70001fe2:	681b      	ldr	r3, [r3, #0]
70001fe4:	681b      	ldr	r3, [r3, #0]
70001fe6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
70001fea:	2b00      	cmp	r3, #0
70001fec:	bf14      	ite	ne
70001fee:	2301      	movne	r3, #1
70001ff0:	2300      	moveq	r3, #0
70001ff2:	b2db      	uxtb	r3, r3
70001ff4:	461a      	mov	r2, r3
70001ff6:	683b      	ldr	r3, [r7, #0]
70001ff8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
70001ffa:	687b      	ldr	r3, [r7, #4]
70001ffc:	681b      	ldr	r3, [r3, #0]
70001ffe:	681b      	ldr	r3, [r3, #0]
70002000:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
70002004:	2b00      	cmp	r3, #0
70002006:	bf14      	ite	ne
70002008:	2301      	movne	r3, #1
7000200a:	2300      	moveq	r3, #0
7000200c:	b2db      	uxtb	r3, r3
7000200e:	461a      	mov	r2, r3
70002010:	683b      	ldr	r3, [r7, #0]
70002012:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
70002014:	687b      	ldr	r3, [r7, #4]
70002016:	681b      	ldr	r3, [r3, #0]
70002018:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
7000201a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
7000201e:	2b00      	cmp	r3, #0
70002020:	bf14      	ite	ne
70002022:	2301      	movne	r3, #1
70002024:	2300      	moveq	r3, #0
70002026:	b2db      	uxtb	r3, r3
70002028:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
7000202a:	683b      	ldr	r3, [r7, #0]
7000202c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
7000202e:	687b      	ldr	r3, [r7, #4]
70002030:	681b      	ldr	r3, [r3, #0]
70002032:	681b      	ldr	r3, [r3, #0]
70002034:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
70002038:	683b      	ldr	r3, [r7, #0]
7000203a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
7000203c:	687b      	ldr	r3, [r7, #4]
7000203e:	681b      	ldr	r3, [r3, #0]
70002040:	681b      	ldr	r3, [r3, #0]
70002042:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
70002046:	2b00      	cmp	r3, #0
70002048:	bf14      	ite	ne
7000204a:	2301      	movne	r3, #1
7000204c:	2300      	moveq	r3, #0
7000204e:	b2db      	uxtb	r3, r3
70002050:	461a      	mov	r2, r3
70002052:	683b      	ldr	r3, [r7, #0]
70002054:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
70002056:	687b      	ldr	r3, [r7, #4]
70002058:	681b      	ldr	r3, [r3, #0]
7000205a:	681b      	ldr	r3, [r3, #0]
7000205c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
70002060:	683b      	ldr	r3, [r7, #0]
70002062:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
70002064:	687b      	ldr	r3, [r7, #4]
70002066:	681b      	ldr	r3, [r3, #0]
70002068:	685b      	ldr	r3, [r3, #4]
7000206a:	f3c3 020d 	ubfx	r2, r3, #0, #14
7000206e:	683b      	ldr	r3, [r7, #0]
70002070:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
70002072:	687b      	ldr	r3, [r7, #4]
70002074:	681b      	ldr	r3, [r3, #0]
70002076:	685b      	ldr	r3, [r3, #4]
70002078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
7000207c:	2b00      	cmp	r3, #0
7000207e:	bf0c      	ite	eq
70002080:	2301      	moveq	r3, #1
70002082:	2300      	movne	r3, #0
70002084:	b2db      	uxtb	r3, r3
70002086:	461a      	mov	r2, r3
70002088:	683b      	ldr	r3, [r7, #0]
7000208a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
7000208e:	687b      	ldr	r3, [r7, #4]
70002090:	681b      	ldr	r3, [r3, #0]
70002092:	685b      	ldr	r3, [r3, #4]
70002094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
70002098:	2b00      	cmp	r3, #0
7000209a:	bf14      	ite	ne
7000209c:	2301      	movne	r3, #1
7000209e:	2300      	moveq	r3, #0
700020a0:	b2db      	uxtb	r3, r3
700020a2:	461a      	mov	r2, r3
700020a4:	683b      	ldr	r3, [r7, #0]
700020a6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
700020aa:	687b      	ldr	r3, [r7, #4]
700020ac:	681b      	ldr	r3, [r3, #0]
700020ae:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
700020b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
700020b4:	2b00      	cmp	r3, #0
700020b6:	bf14      	ite	ne
700020b8:	2301      	movne	r3, #1
700020ba:	2300      	moveq	r3, #0
700020bc:	b2db      	uxtb	r3, r3
700020be:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
700020c0:	683b      	ldr	r3, [r7, #0]
700020c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
700020c6:	687b      	ldr	r3, [r7, #4]
700020c8:	681b      	ldr	r3, [r3, #0]
700020ca:	685b      	ldr	r3, [r3, #4]
700020cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
700020d0:	2b00      	cmp	r3, #0
700020d2:	bf14      	ite	ne
700020d4:	2301      	movne	r3, #1
700020d6:	2300      	moveq	r3, #0
700020d8:	b2db      	uxtb	r3, r3
700020da:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
700020dc:	683b      	ldr	r3, [r7, #0]
700020de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
700020e2:	687b      	ldr	r3, [r7, #4]
700020e4:	681b      	ldr	r3, [r3, #0]
700020e6:	685b      	ldr	r3, [r3, #4]
700020e8:	0e5b      	lsrs	r3, r3, #25
700020ea:	f003 021f 	and.w	r2, r3, #31
700020ee:	683b      	ldr	r3, [r7, #0]
700020f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
700020f2:	687b      	ldr	r3, [r7, #4]
700020f4:	681b      	ldr	r3, [r3, #0]
700020f6:	68db      	ldr	r3, [r3, #12]
700020f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
700020fc:	2b00      	cmp	r3, #0
700020fe:	bf14      	ite	ne
70002100:	2301      	movne	r3, #1
70002102:	2300      	moveq	r3, #0
70002104:	b2db      	uxtb	r3, r3
70002106:	461a      	mov	r2, r3
70002108:	683b      	ldr	r3, [r7, #0]
7000210a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
7000210e:	687b      	ldr	r3, [r7, #4]
70002110:	681b      	ldr	r3, [r3, #0]
70002112:	68db      	ldr	r3, [r3, #12]
70002114:	f003 020f 	and.w	r2, r3, #15
70002118:	683b      	ldr	r3, [r7, #0]
7000211a:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
7000211c:	687b      	ldr	r3, [r7, #4]
7000211e:	681b      	ldr	r3, [r3, #0]
70002120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70002122:	f003 0302 	and.w	r3, r3, #2
70002126:	2b00      	cmp	r3, #0
70002128:	bf14      	ite	ne
7000212a:	2301      	movne	r3, #1
7000212c:	2300      	moveq	r3, #0
7000212e:	b2db      	uxtb	r3, r3
70002130:	461a      	mov	r2, r3
70002132:	683b      	ldr	r3, [r7, #0]
70002134:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
70002138:	687b      	ldr	r3, [r7, #4]
7000213a:	681b      	ldr	r3, [r3, #0]
7000213c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000213e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
70002142:	2b00      	cmp	r3, #0
70002144:	bf0c      	ite	eq
70002146:	2301      	moveq	r3, #1
70002148:	2300      	movne	r3, #0
7000214a:	b2db      	uxtb	r3, r3
7000214c:	461a      	mov	r2, r3
7000214e:	683b      	ldr	r3, [r7, #0]
70002150:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
70002154:	687b      	ldr	r3, [r7, #4]
70002156:	681b      	ldr	r3, [r3, #0]
70002158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000215a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
7000215e:	683b      	ldr	r3, [r7, #0]
70002160:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
70002162:	687b      	ldr	r3, [r7, #4]
70002164:	681b      	ldr	r3, [r3, #0]
70002166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70002168:	0c1b      	lsrs	r3, r3, #16
7000216a:	b29a      	uxth	r2, r3
7000216c:	683b      	ldr	r3, [r7, #0]
7000216e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
70002170:	687b      	ldr	r3, [r7, #4]
70002172:	681b      	ldr	r3, [r3, #0]
70002174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
70002178:	f003 0301 	and.w	r3, r3, #1
7000217c:	2b00      	cmp	r3, #0
7000217e:	bf14      	ite	ne
70002180:	2301      	movne	r3, #1
70002182:	2300      	moveq	r3, #0
70002184:	b2db      	uxtb	r3, r3
70002186:	461a      	mov	r2, r3
70002188:	683b      	ldr	r3, [r7, #0]
7000218a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
7000218e:	687b      	ldr	r3, [r7, #4]
70002190:	681b      	ldr	r3, [r3, #0]
70002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
70002196:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
7000219a:	2b00      	cmp	r3, #0
7000219c:	bf14      	ite	ne
7000219e:	2301      	movne	r3, #1
700021a0:	2300      	moveq	r3, #0
700021a2:	b2db      	uxtb	r3, r3
700021a4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
700021a6:	683b      	ldr	r3, [r7, #0]
700021a8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
700021ac:	687b      	ldr	r3, [r7, #4]
700021ae:	681b      	ldr	r3, [r3, #0]
700021b0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
700021b4:	f003 0272 	and.w	r2, r3, #114	@ 0x72
700021b8:	683b      	ldr	r3, [r7, #0]
700021ba:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
700021bc:	687b      	ldr	r3, [r7, #4]
700021be:	681b      	ldr	r3, [r3, #0]
700021c0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
700021c4:	f003 0223 	and.w	r2, r3, #35	@ 0x23
700021c8:	683b      	ldr	r3, [r7, #0]
700021ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
700021cc:	687b      	ldr	r3, [r7, #4]
700021ce:	681b      	ldr	r3, [r3, #0]
700021d0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
700021d4:	f003 0308 	and.w	r3, r3, #8
700021d8:	2b00      	cmp	r3, #0
700021da:	bf14      	ite	ne
700021dc:	2301      	movne	r3, #1
700021de:	2300      	moveq	r3, #0
700021e0:	b2db      	uxtb	r3, r3
700021e2:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
700021e4:	683b      	ldr	r3, [r7, #0]
700021e6:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
700021ea:	687b      	ldr	r3, [r7, #4]
700021ec:	681b      	ldr	r3, [r3, #0]
700021ee:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
700021f2:	f003 0310 	and.w	r3, r3, #16
700021f6:	2b00      	cmp	r3, #0
700021f8:	bf14      	ite	ne
700021fa:	2301      	movne	r3, #1
700021fc:	2300      	moveq	r3, #0
700021fe:	b2db      	uxtb	r3, r3
70002200:	461a      	mov	r2, r3
70002202:	683b      	ldr	r3, [r7, #0]
70002204:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
70002208:	687b      	ldr	r3, [r7, #4]
7000220a:	681b      	ldr	r3, [r3, #0]
7000220c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
70002210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
70002214:	2b00      	cmp	r3, #0
70002216:	bf0c      	ite	eq
70002218:	2301      	moveq	r3, #1
7000221a:	2300      	movne	r3, #0
7000221c:	b2db      	uxtb	r3, r3
7000221e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
70002220:	683b      	ldr	r3, [r7, #0]
70002222:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
70002226:	2300      	movs	r3, #0
}
70002228:	4618      	mov	r0, r3
7000222a:	370c      	adds	r7, #12
7000222c:	46bd      	mov	sp, r7
7000222e:	f85d 7b04 	ldr.w	r7, [sp], #4
70002232:	4770      	bx	lr

70002234 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
70002234:	b580      	push	{r7, lr}
70002236:	b082      	sub	sp, #8
70002238:	af00      	add	r7, sp, #0
7000223a:	6078      	str	r0, [r7, #4]
7000223c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
7000223e:	683b      	ldr	r3, [r7, #0]
70002240:	2b00      	cmp	r3, #0
70002242:	d101      	bne.n	70002248 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
70002244:	2301      	movs	r3, #1
70002246:	e00b      	b.n	70002260 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
70002248:	687b      	ldr	r3, [r7, #4]
7000224a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
7000224e:	2b10      	cmp	r3, #16
70002250:	d105      	bne.n	7000225e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
70002252:	6839      	ldr	r1, [r7, #0]
70002254:	6878      	ldr	r0, [r7, #4]
70002256:	f000 f871 	bl	7000233c <ETH_SetMACConfig>

    return HAL_OK;
7000225a:	2300      	movs	r3, #0
7000225c:	e000      	b.n	70002260 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
7000225e:	2301      	movs	r3, #1
  }
}
70002260:	4618      	mov	r0, r3
70002262:	3708      	adds	r7, #8
70002264:	46bd      	mov	sp, r7
70002266:	bd80      	pop	{r7, pc}

70002268 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
70002268:	b580      	push	{r7, lr}
7000226a:	b084      	sub	sp, #16
7000226c:	af00      	add	r7, sp, #0
7000226e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
70002270:	687b      	ldr	r3, [r7, #4]
70002272:	681b      	ldr	r3, [r3, #0]
70002274:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
70002278:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
7000227a:	68fb      	ldr	r3, [r7, #12]
7000227c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
70002280:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
70002282:	f001 f8cb 	bl	7000341c <HAL_RCC_GetHCLKFreq>
70002286:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
70002288:	68bb      	ldr	r3, [r7, #8]
7000228a:	4a1a      	ldr	r2, [pc, #104]	@ (700022f4 <HAL_ETH_SetMDIOClockRange+0x8c>)
7000228c:	4293      	cmp	r3, r2
7000228e:	d804      	bhi.n	7000229a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
70002290:	68fb      	ldr	r3, [r7, #12]
70002292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
70002296:	60fb      	str	r3, [r7, #12]
70002298:	e022      	b.n	700022e0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
7000229a:	68bb      	ldr	r3, [r7, #8]
7000229c:	4a16      	ldr	r2, [pc, #88]	@ (700022f8 <HAL_ETH_SetMDIOClockRange+0x90>)
7000229e:	4293      	cmp	r3, r2
700022a0:	d204      	bcs.n	700022ac <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
700022a2:	68fb      	ldr	r3, [r7, #12]
700022a4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
700022a8:	60fb      	str	r3, [r7, #12]
700022aa:	e019      	b.n	700022e0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
700022ac:	68bb      	ldr	r3, [r7, #8]
700022ae:	4a13      	ldr	r2, [pc, #76]	@ (700022fc <HAL_ETH_SetMDIOClockRange+0x94>)
700022b0:	4293      	cmp	r3, r2
700022b2:	d915      	bls.n	700022e0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
700022b4:	68bb      	ldr	r3, [r7, #8]
700022b6:	4a12      	ldr	r2, [pc, #72]	@ (70002300 <HAL_ETH_SetMDIOClockRange+0x98>)
700022b8:	4293      	cmp	r3, r2
700022ba:	d804      	bhi.n	700022c6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
700022bc:	68fb      	ldr	r3, [r7, #12]
700022be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
700022c2:	60fb      	str	r3, [r7, #12]
700022c4:	e00c      	b.n	700022e0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
700022c6:	68bb      	ldr	r3, [r7, #8]
700022c8:	4a0e      	ldr	r2, [pc, #56]	@ (70002304 <HAL_ETH_SetMDIOClockRange+0x9c>)
700022ca:	4293      	cmp	r3, r2
700022cc:	d804      	bhi.n	700022d8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
700022ce:	68fb      	ldr	r3, [r7, #12]
700022d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
700022d4:	60fb      	str	r3, [r7, #12]
700022d6:	e003      	b.n	700022e0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
700022d8:	68fb      	ldr	r3, [r7, #12]
700022da:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
700022de:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
700022e0:	687b      	ldr	r3, [r7, #4]
700022e2:	681b      	ldr	r3, [r3, #0]
700022e4:	68fa      	ldr	r2, [r7, #12]
700022e6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
700022ea:	bf00      	nop
700022ec:	3710      	adds	r7, #16
700022ee:	46bd      	mov	sp, r7
700022f0:	bd80      	pop	{r7, pc}
700022f2:	bf00      	nop
700022f4:	02160ebf 	.word	0x02160ebf
700022f8:	03938700 	.word	0x03938700
700022fc:	05f5e0ff 	.word	0x05f5e0ff
70002300:	08f0d17f 	.word	0x08f0d17f
70002304:	0ee6b27f 	.word	0x0ee6b27f

70002308 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
70002308:	b480      	push	{r7}
7000230a:	b083      	sub	sp, #12
7000230c:	af00      	add	r7, sp, #0
7000230e:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
70002310:	687b      	ldr	r3, [r7, #4]
70002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
70002316:	4618      	mov	r0, r3
70002318:	370c      	adds	r7, #12
7000231a:	46bd      	mov	sp, r7
7000231c:	f85d 7b04 	ldr.w	r7, [sp], #4
70002320:	4770      	bx	lr

70002322 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
70002322:	b480      	push	{r7}
70002324:	b083      	sub	sp, #12
70002326:	af00      	add	r7, sp, #0
70002328:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
7000232a:	687b      	ldr	r3, [r7, #4]
7000232c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
70002330:	4618      	mov	r0, r3
70002332:	370c      	adds	r7, #12
70002334:	46bd      	mov	sp, r7
70002336:	f85d 7b04 	ldr.w	r7, [sp], #4
7000233a:	4770      	bx	lr

7000233c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
7000233c:	b480      	push	{r7}
7000233e:	b085      	sub	sp, #20
70002340:	af00      	add	r7, sp, #0
70002342:	6078      	str	r0, [r7, #4]
70002344:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
70002346:	683b      	ldr	r3, [r7, #0]
70002348:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
7000234a:	683b      	ldr	r3, [r7, #0]
7000234c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
7000234e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
70002350:	683b      	ldr	r3, [r7, #0]
70002352:	791b      	ldrb	r3, [r3, #4]
70002354:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
70002356:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
70002358:	683b      	ldr	r3, [r7, #0]
7000235a:	7b1b      	ldrb	r3, [r3, #12]
7000235c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
7000235e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
70002360:	683b      	ldr	r3, [r7, #0]
70002362:	7b5b      	ldrb	r3, [r3, #13]
70002364:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
70002366:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
70002368:	683b      	ldr	r3, [r7, #0]
7000236a:	7b9b      	ldrb	r3, [r3, #14]
7000236c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
7000236e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
70002370:	683b      	ldr	r3, [r7, #0]
70002372:	7bdb      	ldrb	r3, [r3, #15]
70002374:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
70002376:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
70002378:	683a      	ldr	r2, [r7, #0]
7000237a:	7c12      	ldrb	r2, [r2, #16]
7000237c:	2a00      	cmp	r2, #0
7000237e:	d102      	bne.n	70002386 <ETH_SetMACConfig+0x4a>
70002380:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
70002384:	e000      	b.n	70002388 <ETH_SetMACConfig+0x4c>
70002386:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
70002388:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
7000238a:	683a      	ldr	r2, [r7, #0]
7000238c:	7c52      	ldrb	r2, [r2, #17]
7000238e:	2a00      	cmp	r2, #0
70002390:	d102      	bne.n	70002398 <ETH_SetMACConfig+0x5c>
70002392:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
70002396:	e000      	b.n	7000239a <ETH_SetMACConfig+0x5e>
70002398:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
7000239a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
7000239c:	683b      	ldr	r3, [r7, #0]
7000239e:	7c9b      	ldrb	r3, [r3, #18]
700023a0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
700023a2:	431a      	orrs	r2, r3
               macconf->Speed |
700023a4:	683b      	ldr	r3, [r7, #0]
700023a6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
700023a8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
700023aa:	683b      	ldr	r3, [r7, #0]
700023ac:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
700023ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
700023b0:	683b      	ldr	r3, [r7, #0]
700023b2:	7f1b      	ldrb	r3, [r3, #28]
700023b4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
700023b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
700023b8:	683b      	ldr	r3, [r7, #0]
700023ba:	7f5b      	ldrb	r3, [r3, #29]
700023bc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
700023be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
700023c0:	683a      	ldr	r2, [r7, #0]
700023c2:	7f92      	ldrb	r2, [r2, #30]
700023c4:	2a00      	cmp	r2, #0
700023c6:	d102      	bne.n	700023ce <ETH_SetMACConfig+0x92>
700023c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
700023cc:	e000      	b.n	700023d0 <ETH_SetMACConfig+0x94>
700023ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
700023d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
700023d2:	683b      	ldr	r3, [r7, #0]
700023d4:	7fdb      	ldrb	r3, [r3, #31]
700023d6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
700023d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
700023da:	683a      	ldr	r2, [r7, #0]
700023dc:	f892 2020 	ldrb.w	r2, [r2, #32]
700023e0:	2a00      	cmp	r2, #0
700023e2:	d102      	bne.n	700023ea <ETH_SetMACConfig+0xae>
700023e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
700023e8:	e000      	b.n	700023ec <ETH_SetMACConfig+0xb0>
700023ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
700023ec:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
700023ee:	683b      	ldr	r3, [r7, #0]
700023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
700023f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
700023f4:	683b      	ldr	r3, [r7, #0]
700023f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
700023fa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
700023fc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
700023fe:	683b      	ldr	r3, [r7, #0]
70002400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
70002402:	4313      	orrs	r3, r2
70002404:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
70002406:	687b      	ldr	r3, [r7, #4]
70002408:	681b      	ldr	r3, [r3, #0]
7000240a:	681a      	ldr	r2, [r3, #0]
7000240c:	4b56      	ldr	r3, [pc, #344]	@ (70002568 <ETH_SetMACConfig+0x22c>)
7000240e:	4013      	ands	r3, r2
70002410:	687a      	ldr	r2, [r7, #4]
70002412:	6812      	ldr	r2, [r2, #0]
70002414:	68f9      	ldr	r1, [r7, #12]
70002416:	430b      	orrs	r3, r1
70002418:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
7000241a:	683b      	ldr	r3, [r7, #0]
7000241c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
7000241e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
70002420:	683b      	ldr	r3, [r7, #0]
70002422:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
70002426:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
70002428:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
7000242a:	683b      	ldr	r3, [r7, #0]
7000242c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
70002430:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
70002432:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
70002434:	683b      	ldr	r3, [r7, #0]
70002436:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
7000243a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
7000243c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
7000243e:	683a      	ldr	r2, [r7, #0]
70002440:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
70002444:	2a00      	cmp	r2, #0
70002446:	d102      	bne.n	7000244e <ETH_SetMACConfig+0x112>
70002448:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
7000244c:	e000      	b.n	70002450 <ETH_SetMACConfig+0x114>
7000244e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
70002450:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
70002452:	683b      	ldr	r3, [r7, #0]
70002454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
70002456:	4313      	orrs	r3, r2
70002458:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
7000245a:	687b      	ldr	r3, [r7, #4]
7000245c:	681b      	ldr	r3, [r3, #0]
7000245e:	685a      	ldr	r2, [r3, #4]
70002460:	4b42      	ldr	r3, [pc, #264]	@ (7000256c <ETH_SetMACConfig+0x230>)
70002462:	4013      	ands	r3, r2
70002464:	687a      	ldr	r2, [r7, #4]
70002466:	6812      	ldr	r2, [r2, #0]
70002468:	68f9      	ldr	r1, [r7, #12]
7000246a:	430b      	orrs	r3, r1
7000246c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
7000246e:	683b      	ldr	r3, [r7, #0]
70002470:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
70002474:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
70002476:	683b      	ldr	r3, [r7, #0]
70002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
7000247a:	4313      	orrs	r3, r2
7000247c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
7000247e:	687b      	ldr	r3, [r7, #4]
70002480:	681b      	ldr	r3, [r3, #0]
70002482:	68da      	ldr	r2, [r3, #12]
70002484:	4b3a      	ldr	r3, [pc, #232]	@ (70002570 <ETH_SetMACConfig+0x234>)
70002486:	4013      	ands	r3, r2
70002488:	687a      	ldr	r2, [r7, #4]
7000248a:	6812      	ldr	r2, [r2, #0]
7000248c:	68f9      	ldr	r1, [r7, #12]
7000248e:	430b      	orrs	r3, r1
70002490:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
70002492:	683b      	ldr	r3, [r7, #0]
70002494:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
70002498:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
7000249a:	683b      	ldr	r3, [r7, #0]
7000249c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
7000249e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
700024a0:	683a      	ldr	r2, [r7, #0]
700024a2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
700024a6:	2a00      	cmp	r2, #0
700024a8:	d101      	bne.n	700024ae <ETH_SetMACConfig+0x172>
700024aa:	2280      	movs	r2, #128	@ 0x80
700024ac:	e000      	b.n	700024b0 <ETH_SetMACConfig+0x174>
700024ae:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
700024b0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
700024b2:	683b      	ldr	r3, [r7, #0]
700024b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
700024b6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
700024b8:	4313      	orrs	r3, r2
700024ba:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
700024bc:	687b      	ldr	r3, [r7, #4]
700024be:	681b      	ldr	r3, [r3, #0]
700024c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
700024c2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
700024c6:	4013      	ands	r3, r2
700024c8:	687a      	ldr	r2, [r7, #4]
700024ca:	6812      	ldr	r2, [r2, #0]
700024cc:	68f9      	ldr	r1, [r7, #12]
700024ce:	430b      	orrs	r3, r1
700024d0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
700024d2:	683b      	ldr	r3, [r7, #0]
700024d4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
700024d8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
700024da:	683b      	ldr	r3, [r7, #0]
700024dc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
700024e0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
700024e2:	4313      	orrs	r3, r2
700024e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
700024e6:	687b      	ldr	r3, [r7, #4]
700024e8:	681b      	ldr	r3, [r3, #0]
700024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
700024ee:	f023 0103 	bic.w	r1, r3, #3
700024f2:	687b      	ldr	r3, [r7, #4]
700024f4:	681b      	ldr	r3, [r3, #0]
700024f6:	68fa      	ldr	r2, [r7, #12]
700024f8:	430a      	orrs	r2, r1
700024fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
700024fe:	687b      	ldr	r3, [r7, #4]
70002500:	681b      	ldr	r3, [r3, #0]
70002502:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
70002506:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
7000250a:	683b      	ldr	r3, [r7, #0]
7000250c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
7000250e:	687b      	ldr	r3, [r7, #4]
70002510:	681b      	ldr	r3, [r3, #0]
70002512:	430a      	orrs	r2, r1
70002514:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
70002518:	683b      	ldr	r3, [r7, #0]
7000251a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
7000251c:	683a      	ldr	r2, [r7, #0]
7000251e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
70002522:	2a00      	cmp	r2, #0
70002524:	d101      	bne.n	7000252a <ETH_SetMACConfig+0x1ee>
70002526:	2240      	movs	r2, #64	@ 0x40
70002528:	e000      	b.n	7000252c <ETH_SetMACConfig+0x1f0>
7000252a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
7000252c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
7000252e:	683b      	ldr	r3, [r7, #0]
70002530:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
70002534:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
70002536:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
70002538:	683b      	ldr	r3, [r7, #0]
7000253a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
7000253e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
70002540:	4313      	orrs	r3, r2
70002542:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
70002544:	687b      	ldr	r3, [r7, #4]
70002546:	681b      	ldr	r3, [r3, #0]
70002548:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
7000254c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
70002550:	687b      	ldr	r3, [r7, #4]
70002552:	681b      	ldr	r3, [r3, #0]
70002554:	68fa      	ldr	r2, [r7, #12]
70002556:	430a      	orrs	r2, r1
70002558:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
7000255c:	bf00      	nop
7000255e:	3714      	adds	r7, #20
70002560:	46bd      	mov	sp, r7
70002562:	f85d 7b04 	ldr.w	r7, [sp], #4
70002566:	4770      	bx	lr
70002568:	00048083 	.word	0x00048083
7000256c:	c0f88000 	.word	0xc0f88000
70002570:	fffffef0 	.word	0xfffffef0

70002574 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
70002574:	b480      	push	{r7}
70002576:	b085      	sub	sp, #20
70002578:	af00      	add	r7, sp, #0
7000257a:	6078      	str	r0, [r7, #4]
7000257c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
7000257e:	687b      	ldr	r3, [r7, #4]
70002580:	681b      	ldr	r3, [r3, #0]
70002582:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70002586:	681a      	ldr	r2, [r3, #0]
70002588:	4b38      	ldr	r3, [pc, #224]	@ (7000266c <ETH_SetDMAConfig+0xf8>)
7000258a:	4013      	ands	r3, r2
7000258c:	683a      	ldr	r2, [r7, #0]
7000258e:	6811      	ldr	r1, [r2, #0]
70002590:	687a      	ldr	r2, [r7, #4]
70002592:	6812      	ldr	r2, [r2, #0]
70002594:	430b      	orrs	r3, r1
70002596:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
7000259a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
7000259c:	683b      	ldr	r3, [r7, #0]
7000259e:	791b      	ldrb	r3, [r3, #4]
700025a0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
700025a2:	683b      	ldr	r3, [r7, #0]
700025a4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
700025a6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
700025a8:	683b      	ldr	r3, [r7, #0]
700025aa:	7b1b      	ldrb	r3, [r3, #12]
700025ac:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
700025ae:	4313      	orrs	r3, r2
700025b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
700025b2:	687b      	ldr	r3, [r7, #4]
700025b4:	681b      	ldr	r3, [r3, #0]
700025b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
700025ba:	685a      	ldr	r2, [r3, #4]
700025bc:	4b2c      	ldr	r3, [pc, #176]	@ (70002670 <ETH_SetDMAConfig+0xfc>)
700025be:	4013      	ands	r3, r2
700025c0:	687a      	ldr	r2, [r7, #4]
700025c2:	6812      	ldr	r2, [r2, #0]
700025c4:	68f9      	ldr	r1, [r7, #12]
700025c6:	430b      	orrs	r3, r1
700025c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
700025cc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
700025ce:	683b      	ldr	r3, [r7, #0]
700025d0:	7b5b      	ldrb	r3, [r3, #13]
700025d2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
700025d4:	683b      	ldr	r3, [r7, #0]
700025d6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
700025d8:	4313      	orrs	r3, r2
700025da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
700025dc:	687b      	ldr	r3, [r7, #4]
700025de:	681b      	ldr	r3, [r3, #0]
700025e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
700025e4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
700025e8:	4b22      	ldr	r3, [pc, #136]	@ (70002674 <ETH_SetDMAConfig+0x100>)
700025ea:	4013      	ands	r3, r2
700025ec:	687a      	ldr	r2, [r7, #4]
700025ee:	6812      	ldr	r2, [r2, #0]
700025f0:	68f9      	ldr	r1, [r7, #12]
700025f2:	430b      	orrs	r3, r1
700025f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
700025f8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
700025fc:	683b      	ldr	r3, [r7, #0]
700025fe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
70002600:	683b      	ldr	r3, [r7, #0]
70002602:	7d1b      	ldrb	r3, [r3, #20]
70002604:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
70002606:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
70002608:	683b      	ldr	r3, [r7, #0]
7000260a:	7f5b      	ldrb	r3, [r3, #29]
7000260c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
7000260e:	4313      	orrs	r3, r2
70002610:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
70002612:	687b      	ldr	r3, [r7, #4]
70002614:	681b      	ldr	r3, [r3, #0]
70002616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
7000261a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
7000261e:	4b16      	ldr	r3, [pc, #88]	@ (70002678 <ETH_SetDMAConfig+0x104>)
70002620:	4013      	ands	r3, r2
70002622:	687a      	ldr	r2, [r7, #4]
70002624:	6812      	ldr	r2, [r2, #0]
70002626:	68f9      	ldr	r1, [r7, #12]
70002628:	430b      	orrs	r3, r1
7000262a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
7000262e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
70002632:	683b      	ldr	r3, [r7, #0]
70002634:	7f1b      	ldrb	r3, [r3, #28]
70002636:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
70002638:	683b      	ldr	r3, [r7, #0]
7000263a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
7000263c:	4313      	orrs	r3, r2
7000263e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
70002640:	687b      	ldr	r3, [r7, #4]
70002642:	681b      	ldr	r3, [r3, #0]
70002644:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70002648:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
7000264c:	4b0b      	ldr	r3, [pc, #44]	@ (7000267c <ETH_SetDMAConfig+0x108>)
7000264e:	4013      	ands	r3, r2
70002650:	687a      	ldr	r2, [r7, #4]
70002652:	6812      	ldr	r2, [r2, #0]
70002654:	68f9      	ldr	r1, [r7, #12]
70002656:	430b      	orrs	r3, r1
70002658:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
7000265c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
70002660:	bf00      	nop
70002662:	3714      	adds	r7, #20
70002664:	46bd      	mov	sp, r7
70002666:	f85d 7b04 	ldr.w	r7, [sp], #4
7000266a:	4770      	bx	lr
7000266c:	ffff87fd 	.word	0xffff87fd
70002670:	ffff2ffe 	.word	0xffff2ffe
70002674:	fffec000 	.word	0xfffec000
70002678:	ffc0efef 	.word	0xffc0efef
7000267c:	7fc0ffff 	.word	0x7fc0ffff

70002680 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
70002680:	b580      	push	{r7, lr}
70002682:	b0a4      	sub	sp, #144	@ 0x90
70002684:	af00      	add	r7, sp, #0
70002686:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
70002688:	2301      	movs	r3, #1
7000268a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
7000268e:	2300      	movs	r3, #0
70002690:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
70002692:	2300      	movs	r3, #0
70002694:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
70002698:	2300      	movs	r3, #0
7000269a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
7000269e:	2301      	movs	r3, #1
700026a0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
700026a4:	2301      	movs	r3, #1
700026a6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
700026aa:	2301      	movs	r3, #1
700026ac:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
700026b0:	2300      	movs	r3, #0
700026b2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
700026b6:	2301      	movs	r3, #1
700026b8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
700026bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
700026c0:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
700026c2:	2300      	movs	r3, #0
700026c4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
700026c8:	2300      	movs	r3, #0
700026ca:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
700026cc:	2300      	movs	r3, #0
700026ce:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
700026d2:	2300      	movs	r3, #0
700026d4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
700026d8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
700026dc:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
700026de:	2300      	movs	r3, #0
700026e0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
700026e4:	2300      	movs	r3, #0
700026e6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
700026e8:	2301      	movs	r3, #1
700026ea:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
700026ee:	2300      	movs	r3, #0
700026f0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
700026f4:	2300      	movs	r3, #0
700026f6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
700026fa:	2300      	movs	r3, #0
700026fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
700026fe:	2300      	movs	r3, #0
70002700:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
70002702:	2300      	movs	r3, #0
70002704:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
70002706:	2300      	movs	r3, #0
70002708:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
7000270c:	2300      	movs	r3, #0
7000270e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
70002712:	2301      	movs	r3, #1
70002714:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
70002718:	2320      	movs	r3, #32
7000271a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
7000271e:	2301      	movs	r3, #1
70002720:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
70002724:	2300      	movs	r3, #0
70002726:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
7000272a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
7000272e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
70002730:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
70002734:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
70002736:	2300      	movs	r3, #0
70002738:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
7000273c:	2302      	movs	r3, #2
7000273e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
70002742:	2300      	movs	r3, #0
70002744:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
70002748:	2300      	movs	r3, #0
7000274a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
7000274e:	2300      	movs	r3, #0
70002750:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
70002754:	2301      	movs	r3, #1
70002756:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
7000275a:	2300      	movs	r3, #0
7000275c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
7000275e:	2301      	movs	r3, #1
70002760:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
70002764:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
70002768:	4619      	mov	r1, r3
7000276a:	6878      	ldr	r0, [r7, #4]
7000276c:	f7ff fde6 	bl	7000233c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
70002770:	2301      	movs	r3, #1
70002772:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
70002774:	2301      	movs	r3, #1
70002776:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
70002778:	2300      	movs	r3, #0
7000277a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
7000277c:	2300      	movs	r3, #0
7000277e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
70002782:	2300      	movs	r3, #0
70002784:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
70002786:	2300      	movs	r3, #0
70002788:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
7000278a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
7000278e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
70002790:	2300      	movs	r3, #0
70002792:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
70002794:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
70002798:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
7000279a:	2300      	movs	r3, #0
7000279c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
700027a0:	f44f 7306 	mov.w	r3, #536	@ 0x218
700027a4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
700027a6:	f107 0308 	add.w	r3, r7, #8
700027aa:	4619      	mov	r1, r3
700027ac:	6878      	ldr	r0, [r7, #4]
700027ae:	f7ff fee1 	bl	70002574 <ETH_SetDMAConfig>
}
700027b2:	bf00      	nop
700027b4:	3790      	adds	r7, #144	@ 0x90
700027b6:	46bd      	mov	sp, r7
700027b8:	bd80      	pop	{r7, pc}

700027ba <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
700027ba:	b480      	push	{r7}
700027bc:	b085      	sub	sp, #20
700027be:	af00      	add	r7, sp, #0
700027c0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
700027c2:	2300      	movs	r3, #0
700027c4:	60fb      	str	r3, [r7, #12]
700027c6:	e01d      	b.n	70002804 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
700027c8:	687b      	ldr	r3, [r7, #4]
700027ca:	68d9      	ldr	r1, [r3, #12]
700027cc:	68fa      	ldr	r2, [r7, #12]
700027ce:	4613      	mov	r3, r2
700027d0:	005b      	lsls	r3, r3, #1
700027d2:	4413      	add	r3, r2
700027d4:	00db      	lsls	r3, r3, #3
700027d6:	440b      	add	r3, r1
700027d8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
700027da:	68bb      	ldr	r3, [r7, #8]
700027dc:	2200      	movs	r2, #0
700027de:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
700027e0:	68bb      	ldr	r3, [r7, #8]
700027e2:	2200      	movs	r2, #0
700027e4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
700027e6:	68bb      	ldr	r3, [r7, #8]
700027e8:	2200      	movs	r2, #0
700027ea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
700027ec:	68bb      	ldr	r3, [r7, #8]
700027ee:	2200      	movs	r2, #0
700027f0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
700027f2:	68b9      	ldr	r1, [r7, #8]
700027f4:	687b      	ldr	r3, [r7, #4]
700027f6:	68fa      	ldr	r2, [r7, #12]
700027f8:	3206      	adds	r2, #6
700027fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
700027fe:	68fb      	ldr	r3, [r7, #12]
70002800:	3301      	adds	r3, #1
70002802:	60fb      	str	r3, [r7, #12]
70002804:	68fb      	ldr	r3, [r7, #12]
70002806:	2b03      	cmp	r3, #3
70002808:	d9de      	bls.n	700027c8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
7000280a:	687b      	ldr	r3, [r7, #4]
7000280c:	2200      	movs	r2, #0
7000280e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
70002810:	687b      	ldr	r3, [r7, #4]
70002812:	681b      	ldr	r3, [r3, #0]
70002814:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70002818:	461a      	mov	r2, r3
7000281a:	2303      	movs	r3, #3
7000281c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
70002820:	687b      	ldr	r3, [r7, #4]
70002822:	68da      	ldr	r2, [r3, #12]
70002824:	687b      	ldr	r3, [r7, #4]
70002826:	681b      	ldr	r3, [r3, #0]
70002828:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
7000282c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
70002830:	687b      	ldr	r3, [r7, #4]
70002832:	68da      	ldr	r2, [r3, #12]
70002834:	687b      	ldr	r3, [r7, #4]
70002836:	681b      	ldr	r3, [r3, #0]
70002838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
7000283c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
70002840:	bf00      	nop
70002842:	3714      	adds	r7, #20
70002844:	46bd      	mov	sp, r7
70002846:	f85d 7b04 	ldr.w	r7, [sp], #4
7000284a:	4770      	bx	lr

7000284c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
7000284c:	b480      	push	{r7}
7000284e:	b085      	sub	sp, #20
70002850:	af00      	add	r7, sp, #0
70002852:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
70002854:	2300      	movs	r3, #0
70002856:	60fb      	str	r3, [r7, #12]
70002858:	e023      	b.n	700028a2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
7000285a:	687b      	ldr	r3, [r7, #4]
7000285c:	6919      	ldr	r1, [r3, #16]
7000285e:	68fa      	ldr	r2, [r7, #12]
70002860:	4613      	mov	r3, r2
70002862:	005b      	lsls	r3, r3, #1
70002864:	4413      	add	r3, r2
70002866:	00db      	lsls	r3, r3, #3
70002868:	440b      	add	r3, r1
7000286a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
7000286c:	68bb      	ldr	r3, [r7, #8]
7000286e:	2200      	movs	r2, #0
70002870:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
70002872:	68bb      	ldr	r3, [r7, #8]
70002874:	2200      	movs	r2, #0
70002876:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
70002878:	68bb      	ldr	r3, [r7, #8]
7000287a:	2200      	movs	r2, #0
7000287c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
7000287e:	68bb      	ldr	r3, [r7, #8]
70002880:	2200      	movs	r2, #0
70002882:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
70002884:	68bb      	ldr	r3, [r7, #8]
70002886:	2200      	movs	r2, #0
70002888:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
7000288a:	68bb      	ldr	r3, [r7, #8]
7000288c:	2200      	movs	r2, #0
7000288e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
70002890:	68b9      	ldr	r1, [r7, #8]
70002892:	687b      	ldr	r3, [r7, #4]
70002894:	68fa      	ldr	r2, [r7, #12]
70002896:	3212      	adds	r2, #18
70002898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
7000289c:	68fb      	ldr	r3, [r7, #12]
7000289e:	3301      	adds	r3, #1
700028a0:	60fb      	str	r3, [r7, #12]
700028a2:	68fb      	ldr	r3, [r7, #12]
700028a4:	2b03      	cmp	r3, #3
700028a6:	d9d8      	bls.n	7000285a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
700028a8:	687b      	ldr	r3, [r7, #4]
700028aa:	2200      	movs	r2, #0
700028ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
700028ae:	687b      	ldr	r3, [r7, #4]
700028b0:	2200      	movs	r2, #0
700028b2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
700028b4:	687b      	ldr	r3, [r7, #4]
700028b6:	2200      	movs	r2, #0
700028b8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
700028ba:	687b      	ldr	r3, [r7, #4]
700028bc:	2200      	movs	r2, #0
700028be:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
700028c0:	687b      	ldr	r3, [r7, #4]
700028c2:	2200      	movs	r2, #0
700028c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
700028c6:	687b      	ldr	r3, [r7, #4]
700028c8:	681b      	ldr	r3, [r3, #0]
700028ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
700028ce:	461a      	mov	r2, r3
700028d0:	2303      	movs	r3, #3
700028d2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
700028d6:	687b      	ldr	r3, [r7, #4]
700028d8:	691a      	ldr	r2, [r3, #16]
700028da:	687b      	ldr	r3, [r7, #4]
700028dc:	681b      	ldr	r3, [r3, #0]
700028de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
700028e2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
700028e6:	687b      	ldr	r3, [r7, #4]
700028e8:	691b      	ldr	r3, [r3, #16]
700028ea:	f103 0248 	add.w	r2, r3, #72	@ 0x48
700028ee:	687b      	ldr	r3, [r7, #4]
700028f0:	681b      	ldr	r3, [r3, #0]
700028f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
700028f6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
700028fa:	bf00      	nop
700028fc:	3714      	adds	r7, #20
700028fe:	46bd      	mov	sp, r7
70002900:	f85d 7b04 	ldr.w	r7, [sp], #4
70002904:	4770      	bx	lr
	...

70002908 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
70002908:	b480      	push	{r7}
7000290a:	b091      	sub	sp, #68	@ 0x44
7000290c:	af00      	add	r7, sp, #0
7000290e:	60f8      	str	r0, [r7, #12]
70002910:	60b9      	str	r1, [r7, #8]
70002912:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
70002914:	68fb      	ldr	r3, [r7, #12]
70002916:	3318      	adds	r3, #24
70002918:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
7000291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000291c:	691b      	ldr	r3, [r3, #16]
7000291e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
70002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002922:	691b      	ldr	r3, [r3, #16]
70002924:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
70002926:	2300      	movs	r3, #0
70002928:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
7000292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000292c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
7000292e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002932:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
70002934:	68bb      	ldr	r3, [r7, #8]
70002936:	689b      	ldr	r3, [r3, #8]
70002938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
7000293a:	2300      	movs	r3, #0
7000293c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
7000293e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002940:	68db      	ldr	r3, [r3, #12]
70002942:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
70002946:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
7000294a:	d007      	beq.n	7000295c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
7000294c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
7000294e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002950:	3304      	adds	r3, #4
70002952:	009b      	lsls	r3, r3, #2
70002954:	4413      	add	r3, r2
70002956:	685b      	ldr	r3, [r3, #4]
70002958:	2b00      	cmp	r3, #0
7000295a:	d001      	beq.n	70002960 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
7000295c:	2302      	movs	r3, #2
7000295e:	e266      	b.n	70002e2e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
70002960:	68bb      	ldr	r3, [r7, #8]
70002962:	681b      	ldr	r3, [r3, #0]
70002964:	f003 0304 	and.w	r3, r3, #4
70002968:	2b00      	cmp	r3, #0
7000296a:	d044      	beq.n	700029f6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
7000296c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000296e:	68da      	ldr	r2, [r3, #12]
70002970:	4b75      	ldr	r3, [pc, #468]	@ (70002b48 <ETH_Prepare_Tx_Descriptors+0x240>)
70002972:	4013      	ands	r3, r2
70002974:	68ba      	ldr	r2, [r7, #8]
70002976:	6a52      	ldr	r2, [r2, #36]	@ 0x24
70002978:	431a      	orrs	r2, r3
7000297a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000297c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
7000297e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002980:	68db      	ldr	r3, [r3, #12]
70002982:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
70002986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002988:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
7000298a:	68fb      	ldr	r3, [r7, #12]
7000298c:	681b      	ldr	r3, [r3, #0]
7000298e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
70002990:	68fb      	ldr	r3, [r7, #12]
70002992:	681b      	ldr	r3, [r3, #0]
70002994:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
70002998:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
7000299a:	68bb      	ldr	r3, [r7, #8]
7000299c:	681b      	ldr	r3, [r3, #0]
7000299e:	f003 0308 	and.w	r3, r3, #8
700029a2:	2b00      	cmp	r3, #0
700029a4:	d027      	beq.n	700029f6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
700029a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700029a8:	689b      	ldr	r3, [r3, #8]
700029aa:	b29a      	uxth	r2, r3
700029ac:	68bb      	ldr	r3, [r7, #8]
700029ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700029b0:	041b      	lsls	r3, r3, #16
700029b2:	431a      	orrs	r2, r3
700029b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700029b6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
700029b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700029ba:	68db      	ldr	r3, [r3, #12]
700029bc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
700029c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700029c2:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
700029c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700029c6:	68db      	ldr	r3, [r3, #12]
700029c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
700029cc:	68bb      	ldr	r3, [r7, #8]
700029ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
700029d0:	431a      	orrs	r2, r3
700029d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700029d4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
700029d6:	68fb      	ldr	r3, [r7, #12]
700029d8:	681b      	ldr	r3, [r3, #0]
700029da:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
700029dc:	68fb      	ldr	r3, [r7, #12]
700029de:	681b      	ldr	r3, [r3, #0]
700029e0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
700029e4:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
700029e6:	68fb      	ldr	r3, [r7, #12]
700029e8:	681b      	ldr	r3, [r3, #0]
700029ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
700029ec:	68fb      	ldr	r3, [r7, #12]
700029ee:	681b      	ldr	r3, [r3, #0]
700029f0:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
700029f4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
700029f6:	68bb      	ldr	r3, [r7, #8]
700029f8:	681b      	ldr	r3, [r3, #0]
700029fa:	f003 0310 	and.w	r3, r3, #16
700029fe:	2b00      	cmp	r3, #0
70002a00:	d00e      	beq.n	70002a20 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
70002a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a04:	689a      	ldr	r2, [r3, #8]
70002a06:	4b51      	ldr	r3, [pc, #324]	@ (70002b4c <ETH_Prepare_Tx_Descriptors+0x244>)
70002a08:	4013      	ands	r3, r2
70002a0a:	68ba      	ldr	r2, [r7, #8]
70002a0c:	6992      	ldr	r2, [r2, #24]
70002a0e:	431a      	orrs	r2, r3
70002a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a12:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
70002a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a16:	68db      	ldr	r3, [r3, #12]
70002a18:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
70002a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a1e:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
70002a20:	68bb      	ldr	r3, [r7, #8]
70002a22:	681b      	ldr	r3, [r3, #0]
70002a24:	f003 0304 	and.w	r3, r3, #4
70002a28:	2b00      	cmp	r3, #0
70002a2a:	d105      	bne.n	70002a38 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
70002a2c:	68bb      	ldr	r3, [r7, #8]
70002a2e:	681b      	ldr	r3, [r3, #0]
70002a30:	f003 0310 	and.w	r3, r3, #16
70002a34:	2b00      	cmp	r3, #0
70002a36:	d036      	beq.n	70002aa6 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
70002a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a3a:	68db      	ldr	r3, [r3, #12]
70002a3c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
70002a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a42:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
70002a44:	f3bf 8f5f 	dmb	sy
}
70002a48:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
70002a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a4c:	68db      	ldr	r3, [r3, #12]
70002a4e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
70002a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a54:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
70002a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002a58:	3301      	adds	r3, #1
70002a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
70002a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002a5e:	2b03      	cmp	r3, #3
70002a60:	d902      	bls.n	70002a68 <ETH_Prepare_Tx_Descriptors+0x160>
70002a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002a64:	3b04      	subs	r3, #4
70002a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
70002a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002a6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
70002a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002a70:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
70002a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70002a74:	3301      	adds	r3, #1
70002a76:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
70002a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a7a:	68db      	ldr	r3, [r3, #12]
70002a7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
70002a80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
70002a84:	d10f      	bne.n	70002aa6 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
70002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002a88:	6a3a      	ldr	r2, [r7, #32]
70002a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
70002a90:	f3bf 8f5f 	dmb	sy
}
70002a94:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
70002a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002a98:	68db      	ldr	r3, [r3, #12]
70002a9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
70002a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002aa0:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
70002aa2:	2302      	movs	r3, #2
70002aa4:	e1c3      	b.n	70002e2e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
70002aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70002aa8:	3301      	adds	r3, #1
70002aaa:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
70002aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002aae:	681b      	ldr	r3, [r3, #0]
70002ab0:	461a      	mov	r2, r3
70002ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002ab4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
70002ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002ab8:	689a      	ldr	r2, [r3, #8]
70002aba:	4b24      	ldr	r3, [pc, #144]	@ (70002b4c <ETH_Prepare_Tx_Descriptors+0x244>)
70002abc:	4013      	ands	r3, r2
70002abe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
70002ac0:	6852      	ldr	r2, [r2, #4]
70002ac2:	431a      	orrs	r2, r3
70002ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002ac6:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
70002ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002aca:	689b      	ldr	r3, [r3, #8]
70002acc:	2b00      	cmp	r3, #0
70002ace:	d012      	beq.n	70002af6 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
70002ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002ad2:	689b      	ldr	r3, [r3, #8]
70002ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
70002ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002ad8:	681b      	ldr	r3, [r3, #0]
70002ada:	461a      	mov	r2, r3
70002adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002ade:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
70002ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002ae2:	689a      	ldr	r2, [r3, #8]
70002ae4:	4b1a      	ldr	r3, [pc, #104]	@ (70002b50 <ETH_Prepare_Tx_Descriptors+0x248>)
70002ae6:	4013      	ands	r3, r2
70002ae8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
70002aea:	6852      	ldr	r2, [r2, #4]
70002aec:	0412      	lsls	r2, r2, #16
70002aee:	431a      	orrs	r2, r3
70002af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002af2:	609a      	str	r2, [r3, #8]
70002af4:	e008      	b.n	70002b08 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
70002af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002af8:	2200      	movs	r2, #0
70002afa:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
70002afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002afe:	689a      	ldr	r2, [r3, #8]
70002b00:	4b13      	ldr	r3, [pc, #76]	@ (70002b50 <ETH_Prepare_Tx_Descriptors+0x248>)
70002b02:	4013      	ands	r3, r2
70002b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
70002b06:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
70002b08:	68bb      	ldr	r3, [r7, #8]
70002b0a:	681b      	ldr	r3, [r3, #0]
70002b0c:	f003 0310 	and.w	r3, r3, #16
70002b10:	2b00      	cmp	r3, #0
70002b12:	d021      	beq.n	70002b58 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
70002b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b16:	68db      	ldr	r3, [r3, #12]
70002b18:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
70002b1c:	68bb      	ldr	r3, [r7, #8]
70002b1e:	6a1b      	ldr	r3, [r3, #32]
70002b20:	04db      	lsls	r3, r3, #19
70002b22:	431a      	orrs	r2, r3
70002b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b26:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
70002b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b2a:	68da      	ldr	r2, [r3, #12]
70002b2c:	4b09      	ldr	r3, [pc, #36]	@ (70002b54 <ETH_Prepare_Tx_Descriptors+0x24c>)
70002b2e:	4013      	ands	r3, r2
70002b30:	68ba      	ldr	r2, [r7, #8]
70002b32:	69d2      	ldr	r2, [r2, #28]
70002b34:	431a      	orrs	r2, r3
70002b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b38:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
70002b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b3c:	68db      	ldr	r3, [r3, #12]
70002b3e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
70002b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b44:	60da      	str	r2, [r3, #12]
70002b46:	e02e      	b.n	70002ba6 <ETH_Prepare_Tx_Descriptors+0x29e>
70002b48:	ffff0000 	.word	0xffff0000
70002b4c:	ffffc000 	.word	0xffffc000
70002b50:	c000ffff 	.word	0xc000ffff
70002b54:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
70002b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b5a:	68da      	ldr	r2, [r3, #12]
70002b5c:	4b7b      	ldr	r3, [pc, #492]	@ (70002d4c <ETH_Prepare_Tx_Descriptors+0x444>)
70002b5e:	4013      	ands	r3, r2
70002b60:	68ba      	ldr	r2, [r7, #8]
70002b62:	6852      	ldr	r2, [r2, #4]
70002b64:	431a      	orrs	r2, r3
70002b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b68:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
70002b6a:	68bb      	ldr	r3, [r7, #8]
70002b6c:	681b      	ldr	r3, [r3, #0]
70002b6e:	f003 0301 	and.w	r3, r3, #1
70002b72:	2b00      	cmp	r3, #0
70002b74:	d008      	beq.n	70002b88 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
70002b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b78:	68db      	ldr	r3, [r3, #12]
70002b7a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
70002b7e:	68bb      	ldr	r3, [r7, #8]
70002b80:	695b      	ldr	r3, [r3, #20]
70002b82:	431a      	orrs	r2, r3
70002b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b86:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
70002b88:	68bb      	ldr	r3, [r7, #8]
70002b8a:	681b      	ldr	r3, [r3, #0]
70002b8c:	f003 0320 	and.w	r3, r3, #32
70002b90:	2b00      	cmp	r3, #0
70002b92:	d008      	beq.n	70002ba6 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
70002b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002b96:	68db      	ldr	r3, [r3, #12]
70002b98:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
70002b9c:	68bb      	ldr	r3, [r7, #8]
70002b9e:	691b      	ldr	r3, [r3, #16]
70002ba0:	431a      	orrs	r2, r3
70002ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002ba4:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
70002ba6:	68bb      	ldr	r3, [r7, #8]
70002ba8:	681b      	ldr	r3, [r3, #0]
70002baa:	f003 0304 	and.w	r3, r3, #4
70002bae:	2b00      	cmp	r3, #0
70002bb0:	d008      	beq.n	70002bc4 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
70002bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002bb4:	689b      	ldr	r3, [r3, #8]
70002bb6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
70002bba:	68bb      	ldr	r3, [r7, #8]
70002bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70002bbe:	431a      	orrs	r2, r3
70002bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002bc2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
70002bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002bc6:	68db      	ldr	r3, [r3, #12]
70002bc8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
70002bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002bce:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
70002bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002bd2:	68db      	ldr	r3, [r3, #12]
70002bd4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
70002bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002bda:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
70002bdc:	f3bf 8f5f 	dmb	sy
}
70002be0:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
70002be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002be4:	68db      	ldr	r3, [r3, #12]
70002be6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
70002bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002bec:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
70002bee:	68bb      	ldr	r3, [r7, #8]
70002bf0:	681b      	ldr	r3, [r3, #0]
70002bf2:	f003 0302 	and.w	r3, r3, #2
70002bf6:	2b00      	cmp	r3, #0
70002bf8:	f000 80da 	beq.w	70002db0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
70002bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002bfe:	68db      	ldr	r3, [r3, #12]
70002c00:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
70002c04:	68bb      	ldr	r3, [r7, #8]
70002c06:	68db      	ldr	r3, [r3, #12]
70002c08:	431a      	orrs	r2, r3
70002c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002c0c:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
70002c0e:	e0cf      	b.n	70002db0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
70002c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002c12:	68db      	ldr	r3, [r3, #12]
70002c14:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
70002c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002c1a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
70002c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002c1e:	3301      	adds	r3, #1
70002c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
70002c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002c24:	2b03      	cmp	r3, #3
70002c26:	d902      	bls.n	70002c2e <ETH_Prepare_Tx_Descriptors+0x326>
70002c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002c2a:	3b04      	subs	r3, #4
70002c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
70002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002c30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
70002c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002c36:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
70002c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002c3a:	68db      	ldr	r3, [r3, #12]
70002c3c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
70002c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002c42:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
70002c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002c46:	68db      	ldr	r3, [r3, #12]
70002c48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
70002c4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
70002c50:	d007      	beq.n	70002c62 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
70002c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70002c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002c56:	3304      	adds	r3, #4
70002c58:	009b      	lsls	r3, r3, #2
70002c5a:	4413      	add	r3, r2
70002c5c:	685b      	ldr	r3, [r3, #4]
70002c5e:	2b00      	cmp	r3, #0
70002c60:	d029      	beq.n	70002cb6 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
70002c62:	6a3b      	ldr	r3, [r7, #32]
70002c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
70002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002c68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
70002c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002c6e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
70002c70:	2300      	movs	r3, #0
70002c72:	63bb      	str	r3, [r7, #56]	@ 0x38
70002c74:	e019      	b.n	70002caa <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
70002c76:	f3bf 8f5f 	dmb	sy
}
70002c7a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
70002c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002c7e:	68db      	ldr	r3, [r3, #12]
70002c80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
70002c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002c86:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
70002c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002c8a:	3301      	adds	r3, #1
70002c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
70002c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002c90:	2b03      	cmp	r3, #3
70002c92:	d902      	bls.n	70002c9a <ETH_Prepare_Tx_Descriptors+0x392>
70002c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002c96:	3b04      	subs	r3, #4
70002c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
70002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002c9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
70002c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002ca2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
70002ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70002ca6:	3301      	adds	r3, #1
70002ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
70002caa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
70002cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70002cae:	429a      	cmp	r2, r3
70002cb0:	d3e1      	bcc.n	70002c76 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
70002cb2:	2302      	movs	r3, #2
70002cb4:	e0bb      	b.n	70002e2e <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
70002cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70002cb8:	3301      	adds	r3, #1
70002cba:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
70002cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002cbe:	689b      	ldr	r3, [r3, #8]
70002cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
70002cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002cc4:	681b      	ldr	r3, [r3, #0]
70002cc6:	461a      	mov	r2, r3
70002cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002cca:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
70002ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002cce:	689a      	ldr	r2, [r3, #8]
70002cd0:	4b1f      	ldr	r3, [pc, #124]	@ (70002d50 <ETH_Prepare_Tx_Descriptors+0x448>)
70002cd2:	4013      	ands	r3, r2
70002cd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
70002cd6:	6852      	ldr	r2, [r2, #4]
70002cd8:	431a      	orrs	r2, r3
70002cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002cdc:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
70002cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002ce0:	689b      	ldr	r3, [r3, #8]
70002ce2:	2b00      	cmp	r3, #0
70002ce4:	d012      	beq.n	70002d0c <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
70002ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002ce8:	689b      	ldr	r3, [r3, #8]
70002cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
70002cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002cee:	681b      	ldr	r3, [r3, #0]
70002cf0:	461a      	mov	r2, r3
70002cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002cf4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
70002cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002cf8:	689a      	ldr	r2, [r3, #8]
70002cfa:	4b16      	ldr	r3, [pc, #88]	@ (70002d54 <ETH_Prepare_Tx_Descriptors+0x44c>)
70002cfc:	4013      	ands	r3, r2
70002cfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
70002d00:	6852      	ldr	r2, [r2, #4]
70002d02:	0412      	lsls	r2, r2, #16
70002d04:	431a      	orrs	r2, r3
70002d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d08:	609a      	str	r2, [r3, #8]
70002d0a:	e008      	b.n	70002d1e <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
70002d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d0e:	2200      	movs	r2, #0
70002d10:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
70002d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d14:	689a      	ldr	r2, [r3, #8]
70002d16:	4b0f      	ldr	r3, [pc, #60]	@ (70002d54 <ETH_Prepare_Tx_Descriptors+0x44c>)
70002d18:	4013      	ands	r3, r2
70002d1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
70002d1c:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
70002d1e:	68bb      	ldr	r3, [r7, #8]
70002d20:	681b      	ldr	r3, [r3, #0]
70002d22:	f003 0310 	and.w	r3, r3, #16
70002d26:	2b00      	cmp	r3, #0
70002d28:	d018      	beq.n	70002d5c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
70002d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d2c:	68da      	ldr	r2, [r3, #12]
70002d2e:	4b0a      	ldr	r3, [pc, #40]	@ (70002d58 <ETH_Prepare_Tx_Descriptors+0x450>)
70002d30:	4013      	ands	r3, r2
70002d32:	68ba      	ldr	r2, [r7, #8]
70002d34:	69d2      	ldr	r2, [r2, #28]
70002d36:	431a      	orrs	r2, r3
70002d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d3a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
70002d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d3e:	68db      	ldr	r3, [r3, #12]
70002d40:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
70002d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d46:	60da      	str	r2, [r3, #12]
70002d48:	e020      	b.n	70002d8c <ETH_Prepare_Tx_Descriptors+0x484>
70002d4a:	bf00      	nop
70002d4c:	ffff8000 	.word	0xffff8000
70002d50:	ffffc000 	.word	0xffffc000
70002d54:	c000ffff 	.word	0xc000ffff
70002d58:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
70002d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d5e:	68da      	ldr	r2, [r3, #12]
70002d60:	4b36      	ldr	r3, [pc, #216]	@ (70002e3c <ETH_Prepare_Tx_Descriptors+0x534>)
70002d62:	4013      	ands	r3, r2
70002d64:	68ba      	ldr	r2, [r7, #8]
70002d66:	6852      	ldr	r2, [r2, #4]
70002d68:	431a      	orrs	r2, r3
70002d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d6c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
70002d6e:	68bb      	ldr	r3, [r7, #8]
70002d70:	681b      	ldr	r3, [r3, #0]
70002d72:	f003 0301 	and.w	r3, r3, #1
70002d76:	2b00      	cmp	r3, #0
70002d78:	d008      	beq.n	70002d8c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
70002d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d7c:	68db      	ldr	r3, [r3, #12]
70002d7e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
70002d82:	68bb      	ldr	r3, [r7, #8]
70002d84:	695b      	ldr	r3, [r3, #20]
70002d86:	431a      	orrs	r2, r3
70002d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d8a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
70002d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70002d8e:	3301      	adds	r3, #1
70002d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
70002d92:	f3bf 8f5f 	dmb	sy
}
70002d96:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
70002d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002d9a:	68db      	ldr	r3, [r3, #12]
70002d9c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
70002da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002da2:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
70002da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002da6:	68db      	ldr	r3, [r3, #12]
70002da8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
70002dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002dae:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
70002db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002db2:	689b      	ldr	r3, [r3, #8]
70002db4:	2b00      	cmp	r3, #0
70002db6:	f47f af2b 	bne.w	70002c10 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
70002dba:	687b      	ldr	r3, [r7, #4]
70002dbc:	2b00      	cmp	r3, #0
70002dbe:	d006      	beq.n	70002dce <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
70002dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002dc2:	689b      	ldr	r3, [r3, #8]
70002dc4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
70002dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002dca:	609a      	str	r2, [r3, #8]
70002dcc:	e005      	b.n	70002dda <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
70002dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002dd0:	689b      	ldr	r3, [r3, #8]
70002dd2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
70002dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002dd8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
70002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002ddc:	68db      	ldr	r3, [r3, #12]
70002dde:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
70002de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70002de4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
70002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002de8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
70002dea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
70002dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70002dee:	3304      	adds	r3, #4
70002df0:	009b      	lsls	r3, r3, #2
70002df2:	440b      	add	r3, r1
70002df4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
70002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002df8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
70002dfa:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
70002dfc:	f3ef 8310 	mrs	r3, PRIMASK
70002e00:	613b      	str	r3, [r7, #16]
  return(result);
70002e02:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
70002e04:	61fb      	str	r3, [r7, #28]
70002e06:	2301      	movs	r3, #1
70002e08:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
70002e0a:	697b      	ldr	r3, [r7, #20]
70002e0c:	f383 8810 	msr	PRIMASK, r3
}
70002e10:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
70002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002e14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
70002e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70002e18:	4413      	add	r3, r2
70002e1a:	1c5a      	adds	r2, r3, #1
70002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002e1e:	629a      	str	r2, [r3, #40]	@ 0x28
70002e20:	69fb      	ldr	r3, [r7, #28]
70002e22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
70002e24:	69bb      	ldr	r3, [r7, #24]
70002e26:	f383 8810 	msr	PRIMASK, r3
}
70002e2a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
70002e2c:	2300      	movs	r3, #0
}
70002e2e:	4618      	mov	r0, r3
70002e30:	3744      	adds	r7, #68	@ 0x44
70002e32:	46bd      	mov	sp, r7
70002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
70002e38:	4770      	bx	lr
70002e3a:	bf00      	nop
70002e3c:	ffff8000 	.word	0xffff8000

70002e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
70002e40:	b480      	push	{r7}
70002e42:	b087      	sub	sp, #28
70002e44:	af00      	add	r7, sp, #0
70002e46:	6078      	str	r0, [r7, #4]
70002e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
70002e4a:	2300      	movs	r3, #0
70002e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
70002e4e:	e139      	b.n	700030c4 <HAL_GPIO_Init+0x284>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
70002e50:	683b      	ldr	r3, [r7, #0]
70002e52:	681a      	ldr	r2, [r3, #0]
70002e54:	2101      	movs	r1, #1
70002e56:	697b      	ldr	r3, [r7, #20]
70002e58:	fa01 f303 	lsl.w	r3, r1, r3
70002e5c:	4013      	ands	r3, r2
70002e5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
70002e60:	68fb      	ldr	r3, [r7, #12]
70002e62:	2b00      	cmp	r3, #0
70002e64:	f000 812b 	beq.w	700030be <HAL_GPIO_Init+0x27e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
70002e68:	683b      	ldr	r3, [r7, #0]
70002e6a:	685b      	ldr	r3, [r3, #4]
70002e6c:	f003 0303 	and.w	r3, r3, #3
70002e70:	2b01      	cmp	r3, #1
70002e72:	d005      	beq.n	70002e80 <HAL_GPIO_Init+0x40>
70002e74:	683b      	ldr	r3, [r7, #0]
70002e76:	685b      	ldr	r3, [r3, #4]
70002e78:	f003 0303 	and.w	r3, r3, #3
70002e7c:	2b02      	cmp	r3, #2
70002e7e:	d130      	bne.n	70002ee2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
70002e80:	687b      	ldr	r3, [r7, #4]
70002e82:	689b      	ldr	r3, [r3, #8]
70002e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
70002e86:	697b      	ldr	r3, [r7, #20]
70002e88:	005b      	lsls	r3, r3, #1
70002e8a:	2203      	movs	r2, #3
70002e8c:	fa02 f303 	lsl.w	r3, r2, r3
70002e90:	43db      	mvns	r3, r3
70002e92:	693a      	ldr	r2, [r7, #16]
70002e94:	4013      	ands	r3, r2
70002e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
70002e98:	683b      	ldr	r3, [r7, #0]
70002e9a:	68da      	ldr	r2, [r3, #12]
70002e9c:	697b      	ldr	r3, [r7, #20]
70002e9e:	005b      	lsls	r3, r3, #1
70002ea0:	fa02 f303 	lsl.w	r3, r2, r3
70002ea4:	693a      	ldr	r2, [r7, #16]
70002ea6:	4313      	orrs	r3, r2
70002ea8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
70002eaa:	687b      	ldr	r3, [r7, #4]
70002eac:	693a      	ldr	r2, [r7, #16]
70002eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
70002eb0:	687b      	ldr	r3, [r7, #4]
70002eb2:	685b      	ldr	r3, [r3, #4]
70002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
70002eb6:	2201      	movs	r2, #1
70002eb8:	697b      	ldr	r3, [r7, #20]
70002eba:	fa02 f303 	lsl.w	r3, r2, r3
70002ebe:	43db      	mvns	r3, r3
70002ec0:	693a      	ldr	r2, [r7, #16]
70002ec2:	4013      	ands	r3, r2
70002ec4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
70002ec6:	683b      	ldr	r3, [r7, #0]
70002ec8:	685b      	ldr	r3, [r3, #4]
70002eca:	091b      	lsrs	r3, r3, #4
70002ecc:	f003 0201 	and.w	r2, r3, #1
70002ed0:	697b      	ldr	r3, [r7, #20]
70002ed2:	fa02 f303 	lsl.w	r3, r2, r3
70002ed6:	693a      	ldr	r2, [r7, #16]
70002ed8:	4313      	orrs	r3, r2
70002eda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
70002edc:	687b      	ldr	r3, [r7, #4]
70002ede:	693a      	ldr	r2, [r7, #16]
70002ee0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
70002ee2:	683b      	ldr	r3, [r7, #0]
70002ee4:	685b      	ldr	r3, [r3, #4]
70002ee6:	f003 0303 	and.w	r3, r3, #3
70002eea:	2b03      	cmp	r3, #3
70002eec:	d017      	beq.n	70002f1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
70002eee:	687b      	ldr	r3, [r7, #4]
70002ef0:	68db      	ldr	r3, [r3, #12]
70002ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
70002ef4:	697b      	ldr	r3, [r7, #20]
70002ef6:	005b      	lsls	r3, r3, #1
70002ef8:	2203      	movs	r2, #3
70002efa:	fa02 f303 	lsl.w	r3, r2, r3
70002efe:	43db      	mvns	r3, r3
70002f00:	693a      	ldr	r2, [r7, #16]
70002f02:	4013      	ands	r3, r2
70002f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
70002f06:	683b      	ldr	r3, [r7, #0]
70002f08:	689a      	ldr	r2, [r3, #8]
70002f0a:	697b      	ldr	r3, [r7, #20]
70002f0c:	005b      	lsls	r3, r3, #1
70002f0e:	fa02 f303 	lsl.w	r3, r2, r3
70002f12:	693a      	ldr	r2, [r7, #16]
70002f14:	4313      	orrs	r3, r2
70002f16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
70002f18:	687b      	ldr	r3, [r7, #4]
70002f1a:	693a      	ldr	r2, [r7, #16]
70002f1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
70002f1e:	683b      	ldr	r3, [r7, #0]
70002f20:	685b      	ldr	r3, [r3, #4]
70002f22:	f003 0303 	and.w	r3, r3, #3
70002f26:	2b02      	cmp	r3, #2
70002f28:	d123      	bne.n	70002f72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
70002f2a:	697b      	ldr	r3, [r7, #20]
70002f2c:	08da      	lsrs	r2, r3, #3
70002f2e:	687b      	ldr	r3, [r7, #4]
70002f30:	3208      	adds	r2, #8
70002f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
70002f38:	697b      	ldr	r3, [r7, #20]
70002f3a:	f003 0307 	and.w	r3, r3, #7
70002f3e:	009b      	lsls	r3, r3, #2
70002f40:	220f      	movs	r2, #15
70002f42:	fa02 f303 	lsl.w	r3, r2, r3
70002f46:	43db      	mvns	r3, r3
70002f48:	693a      	ldr	r2, [r7, #16]
70002f4a:	4013      	ands	r3, r2
70002f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
70002f4e:	683b      	ldr	r3, [r7, #0]
70002f50:	691a      	ldr	r2, [r3, #16]
70002f52:	697b      	ldr	r3, [r7, #20]
70002f54:	f003 0307 	and.w	r3, r3, #7
70002f58:	009b      	lsls	r3, r3, #2
70002f5a:	fa02 f303 	lsl.w	r3, r2, r3
70002f5e:	693a      	ldr	r2, [r7, #16]
70002f60:	4313      	orrs	r3, r2
70002f62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
70002f64:	697b      	ldr	r3, [r7, #20]
70002f66:	08da      	lsrs	r2, r3, #3
70002f68:	687b      	ldr	r3, [r7, #4]
70002f6a:	3208      	adds	r2, #8
70002f6c:	6939      	ldr	r1, [r7, #16]
70002f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
70002f72:	687b      	ldr	r3, [r7, #4]
70002f74:	681b      	ldr	r3, [r3, #0]
70002f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
70002f78:	697b      	ldr	r3, [r7, #20]
70002f7a:	005b      	lsls	r3, r3, #1
70002f7c:	2203      	movs	r2, #3
70002f7e:	fa02 f303 	lsl.w	r3, r2, r3
70002f82:	43db      	mvns	r3, r3
70002f84:	693a      	ldr	r2, [r7, #16]
70002f86:	4013      	ands	r3, r2
70002f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
70002f8a:	683b      	ldr	r3, [r7, #0]
70002f8c:	685b      	ldr	r3, [r3, #4]
70002f8e:	f003 0203 	and.w	r2, r3, #3
70002f92:	697b      	ldr	r3, [r7, #20]
70002f94:	005b      	lsls	r3, r3, #1
70002f96:	fa02 f303 	lsl.w	r3, r2, r3
70002f9a:	693a      	ldr	r2, [r7, #16]
70002f9c:	4313      	orrs	r3, r2
70002f9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
70002fa0:	687b      	ldr	r3, [r7, #4]
70002fa2:	693a      	ldr	r2, [r7, #16]
70002fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
70002fa6:	683b      	ldr	r3, [r7, #0]
70002fa8:	685b      	ldr	r3, [r3, #4]
70002faa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
70002fae:	2b00      	cmp	r3, #0
70002fb0:	f000 8085 	beq.w	700030be <HAL_GPIO_Init+0x27e>
      {
        temp = SBS->EXTICR[position >> 2u];
70002fb4:	4a4b      	ldr	r2, [pc, #300]	@ (700030e4 <HAL_GPIO_Init+0x2a4>)
70002fb6:	697b      	ldr	r3, [r7, #20]
70002fb8:	089b      	lsrs	r3, r3, #2
70002fba:	334c      	adds	r3, #76	@ 0x4c
70002fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
70002fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
70002fc2:	697b      	ldr	r3, [r7, #20]
70002fc4:	f003 0303 	and.w	r3, r3, #3
70002fc8:	009b      	lsls	r3, r3, #2
70002fca:	220f      	movs	r2, #15
70002fcc:	fa02 f303 	lsl.w	r3, r2, r3
70002fd0:	43db      	mvns	r3, r3
70002fd2:	693a      	ldr	r2, [r7, #16]
70002fd4:	4013      	ands	r3, r2
70002fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
70002fd8:	687b      	ldr	r3, [r7, #4]
70002fda:	0a9a      	lsrs	r2, r3, #10
70002fdc:	4b42      	ldr	r3, [pc, #264]	@ (700030e8 <HAL_GPIO_Init+0x2a8>)
70002fde:	4013      	ands	r3, r2
70002fe0:	697a      	ldr	r2, [r7, #20]
70002fe2:	f002 0203 	and.w	r2, r2, #3
70002fe6:	0092      	lsls	r2, r2, #2
70002fe8:	4093      	lsls	r3, r2
70002fea:	693a      	ldr	r2, [r7, #16]
70002fec:	4313      	orrs	r3, r2
70002fee:	613b      	str	r3, [r7, #16]
        SBS->EXTICR[position >> 2u] = temp;
70002ff0:	493c      	ldr	r1, [pc, #240]	@ (700030e4 <HAL_GPIO_Init+0x2a4>)
70002ff2:	697b      	ldr	r3, [r7, #20]
70002ff4:	089b      	lsrs	r3, r3, #2
70002ff6:	334c      	adds	r3, #76	@ 0x4c
70002ff8:	693a      	ldr	r2, [r7, #16]
70002ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
70002ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70003002:	681b      	ldr	r3, [r3, #0]
70003004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
70003006:	68fb      	ldr	r3, [r7, #12]
70003008:	43db      	mvns	r3, r3
7000300a:	693a      	ldr	r2, [r7, #16]
7000300c:	4013      	ands	r3, r2
7000300e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
70003010:	683b      	ldr	r3, [r7, #0]
70003012:	685b      	ldr	r3, [r3, #4]
70003014:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
70003018:	2b00      	cmp	r3, #0
7000301a:	d003      	beq.n	70003024 <HAL_GPIO_Init+0x1e4>
        {
          temp |= iocurrent;
7000301c:	693a      	ldr	r2, [r7, #16]
7000301e:	68fb      	ldr	r3, [r7, #12]
70003020:	4313      	orrs	r3, r2
70003022:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
70003024:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
70003028:	693b      	ldr	r3, [r7, #16]
7000302a:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
7000302c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70003030:	685b      	ldr	r3, [r3, #4]
70003032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
70003034:	68fb      	ldr	r3, [r7, #12]
70003036:	43db      	mvns	r3, r3
70003038:	693a      	ldr	r2, [r7, #16]
7000303a:	4013      	ands	r3, r2
7000303c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
7000303e:	683b      	ldr	r3, [r7, #0]
70003040:	685b      	ldr	r3, [r3, #4]
70003042:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
70003046:	2b00      	cmp	r3, #0
70003048:	d003      	beq.n	70003052 <HAL_GPIO_Init+0x212>
        {
          temp |= iocurrent;
7000304a:	693a      	ldr	r2, [r7, #16]
7000304c:	68fb      	ldr	r3, [r7, #12]
7000304e:	4313      	orrs	r3, r2
70003050:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
70003052:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
70003056:	693b      	ldr	r3, [r7, #16]
70003058:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
7000305a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
7000305e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
70003062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
70003064:	68fb      	ldr	r3, [r7, #12]
70003066:	43db      	mvns	r3, r3
70003068:	693a      	ldr	r2, [r7, #16]
7000306a:	4013      	ands	r3, r2
7000306c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
7000306e:	683b      	ldr	r3, [r7, #0]
70003070:	685b      	ldr	r3, [r3, #4]
70003072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
70003076:	2b00      	cmp	r3, #0
70003078:	d003      	beq.n	70003082 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
7000307a:	693a      	ldr	r2, [r7, #16]
7000307c:	68fb      	ldr	r3, [r7, #12]
7000307e:	4313      	orrs	r3, r2
70003080:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
70003082:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
70003086:	693b      	ldr	r3, [r7, #16]
70003088:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
7000308c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70003090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
70003094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
70003096:	68fb      	ldr	r3, [r7, #12]
70003098:	43db      	mvns	r3, r3
7000309a:	693a      	ldr	r2, [r7, #16]
7000309c:	4013      	ands	r3, r2
7000309e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
700030a0:	683b      	ldr	r3, [r7, #0]
700030a2:	685b      	ldr	r3, [r3, #4]
700030a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
700030a8:	2b00      	cmp	r3, #0
700030aa:	d003      	beq.n	700030b4 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
700030ac:	693a      	ldr	r2, [r7, #16]
700030ae:	68fb      	ldr	r3, [r7, #12]
700030b0:	4313      	orrs	r3, r2
700030b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
700030b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
700030b8:	693b      	ldr	r3, [r7, #16]
700030ba:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
700030be:	697b      	ldr	r3, [r7, #20]
700030c0:	3301      	adds	r3, #1
700030c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
700030c4:	683b      	ldr	r3, [r7, #0]
700030c6:	681a      	ldr	r2, [r3, #0]
700030c8:	697b      	ldr	r3, [r7, #20]
700030ca:	fa22 f303 	lsr.w	r3, r2, r3
700030ce:	2b00      	cmp	r3, #0
700030d0:	f47f aebe 	bne.w	70002e50 <HAL_GPIO_Init+0x10>
  }
}
700030d4:	bf00      	nop
700030d6:	bf00      	nop
700030d8:	371c      	adds	r7, #28
700030da:	46bd      	mov	sp, r7
700030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
700030e0:	4770      	bx	lr
700030e2:	bf00      	nop
700030e4:	58000400 	.word	0x58000400
700030e8:	0029ff7f 	.word	0x0029ff7f

700030ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
700030ec:	b480      	push	{r7}
700030ee:	b083      	sub	sp, #12
700030f0:	af00      	add	r7, sp, #0
700030f2:	6078      	str	r0, [r7, #4]
700030f4:	460b      	mov	r3, r1
700030f6:	807b      	strh	r3, [r7, #2]
700030f8:	4613      	mov	r3, r2
700030fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
700030fc:	787b      	ldrb	r3, [r7, #1]
700030fe:	2b00      	cmp	r3, #0
70003100:	d003      	beq.n	7000310a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
70003102:	887a      	ldrh	r2, [r7, #2]
70003104:	687b      	ldr	r3, [r7, #4]
70003106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
70003108:	e002      	b.n	70003110 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
7000310a:	887a      	ldrh	r2, [r7, #2]
7000310c:	687b      	ldr	r3, [r7, #4]
7000310e:	629a      	str	r2, [r3, #40]	@ 0x28
}
70003110:	bf00      	nop
70003112:	370c      	adds	r7, #12
70003114:	46bd      	mov	sp, r7
70003116:	f85d 7b04 	ldr.w	r7, [sp], #4
7000311a:	4770      	bx	lr

7000311c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
7000311c:	b480      	push	{r7}
7000311e:	b085      	sub	sp, #20
70003120:	af00      	add	r7, sp, #0
70003122:	6078      	str	r0, [r7, #4]
70003124:	460b      	mov	r3, r1
70003126:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
70003128:	687b      	ldr	r3, [r7, #4]
7000312a:	695b      	ldr	r3, [r3, #20]
7000312c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
7000312e:	887a      	ldrh	r2, [r7, #2]
70003130:	68fb      	ldr	r3, [r7, #12]
70003132:	4013      	ands	r3, r2
70003134:	041a      	lsls	r2, r3, #16
70003136:	68fb      	ldr	r3, [r7, #12]
70003138:	43d9      	mvns	r1, r3
7000313a:	887b      	ldrh	r3, [r7, #2]
7000313c:	400b      	ands	r3, r1
7000313e:	431a      	orrs	r2, r3
70003140:	687b      	ldr	r3, [r7, #4]
70003142:	619a      	str	r2, [r3, #24]
}
70003144:	bf00      	nop
70003146:	3714      	adds	r7, #20
70003148:	46bd      	mov	sp, r7
7000314a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000314e:	4770      	bx	lr

70003150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
70003150:	b480      	push	{r7}
70003152:	b08b      	sub	sp, #44	@ 0x2c
70003154:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t prescaler;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
70003156:	4baa      	ldr	r3, [pc, #680]	@ (70003400 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003158:	691b      	ldr	r3, [r3, #16]
7000315a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
7000315e:	2b18      	cmp	r3, #24
70003160:	f200 8136 	bhi.w	700033d0 <HAL_RCC_GetSysClockFreq+0x280>
70003164:	a201      	add	r2, pc, #4	@ (adr r2, 7000316c <HAL_RCC_GetSysClockFreq+0x1c>)
70003166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
7000316a:	bf00      	nop
7000316c:	700031d1 	.word	0x700031d1
70003170:	700033d1 	.word	0x700033d1
70003174:	700033d1 	.word	0x700033d1
70003178:	700033d1 	.word	0x700033d1
7000317c:	700033d1 	.word	0x700033d1
70003180:	700033d1 	.word	0x700033d1
70003184:	700033d1 	.word	0x700033d1
70003188:	700033d1 	.word	0x700033d1
7000318c:	700031f7 	.word	0x700031f7
70003190:	700033d1 	.word	0x700033d1
70003194:	700033d1 	.word	0x700033d1
70003198:	700033d1 	.word	0x700033d1
7000319c:	700033d1 	.word	0x700033d1
700031a0:	700033d1 	.word	0x700033d1
700031a4:	700033d1 	.word	0x700033d1
700031a8:	700033d1 	.word	0x700033d1
700031ac:	700031fd 	.word	0x700031fd
700031b0:	700033d1 	.word	0x700033d1
700031b4:	700033d1 	.word	0x700033d1
700031b8:	700033d1 	.word	0x700033d1
700031bc:	700033d1 	.word	0x700033d1
700031c0:	700033d1 	.word	0x700033d1
700031c4:	700033d1 	.word	0x700033d1
700031c8:	700033d1 	.word	0x700033d1
700031cc:	70003203 	.word	0x70003203
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */

      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
700031d0:	4b8b      	ldr	r3, [pc, #556]	@ (70003400 <HAL_RCC_GetSysClockFreq+0x2b0>)
700031d2:	681b      	ldr	r3, [r3, #0]
700031d4:	f003 0320 	and.w	r3, r3, #32
700031d8:	2b00      	cmp	r3, #0
700031da:	d009      	beq.n	700031f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
700031dc:	4b88      	ldr	r3, [pc, #544]	@ (70003400 <HAL_RCC_GetSysClockFreq+0x2b0>)
700031de:	681b      	ldr	r3, [r3, #0]
700031e0:	08db      	lsrs	r3, r3, #3
700031e2:	f003 0303 	and.w	r3, r3, #3
700031e6:	4a87      	ldr	r2, [pc, #540]	@ (70003404 <HAL_RCC_GetSysClockFreq+0x2b4>)
700031e8:	fa22 f303 	lsr.w	r3, r2, r3
700031ec:	623b      	str	r3, [r7, #32]
      {
        /* Can't retrieve HSIDIV value */
        sysclockfreq = 0U;
      }

      break;
700031ee:	e0f2      	b.n	700033d6 <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
700031f0:	2300      	movs	r3, #0
700031f2:	623b      	str	r3, [r7, #32]
      break;
700031f4:	e0ef      	b.n	700033d6 <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
700031f6:	4b84      	ldr	r3, [pc, #528]	@ (70003408 <HAL_RCC_GetSysClockFreq+0x2b8>)
700031f8:	623b      	str	r3, [r7, #32]
      break;
700031fa:	e0ec      	b.n	700033d6 <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
700031fc:	4b83      	ldr	r3, [pc, #524]	@ (7000340c <HAL_RCC_GetSysClockFreq+0x2bc>)
700031fe:	623b      	str	r3, [r7, #32]
      break;
70003200:	e0e9      	b.n	700033d6 <HAL_RCC_GetSysClockFreq+0x286>
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
70003202:	4b7f      	ldr	r3, [pc, #508]	@ (70003400 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70003206:	f003 0303 	and.w	r3, r3, #3
7000320a:	61fb      	str	r3, [r7, #28]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
7000320c:	4b7c      	ldr	r3, [pc, #496]	@ (70003400 <HAL_RCC_GetSysClockFreq+0x2b0>)
7000320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70003210:	091b      	lsrs	r3, r3, #4
70003212:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
70003216:	61bb      	str	r3, [r7, #24]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
70003218:	4b79      	ldr	r3, [pc, #484]	@ (70003400 <HAL_RCC_GetSysClockFreq+0x2b0>)
7000321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000321c:	f003 0301 	and.w	r3, r3, #1
70003220:	617b      	str	r3, [r7, #20]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> 3));
70003222:	4b77      	ldr	r3, [pc, #476]	@ (70003400 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
70003226:	08db      	lsrs	r3, r3, #3
70003228:	f3c3 030c 	ubfx	r3, r3, #0, #13
7000322c:	697a      	ldr	r2, [r7, #20]
7000322e:	fb02 f303 	mul.w	r3, r2, r3
70003232:	ee07 3a90 	vmov	s15, r3
70003236:	eef8 7a67 	vcvt.f32.u32	s15, s15
7000323a:	edc7 7a04 	vstr	s15, [r7, #16]

      if (pllm != 0U)
7000323e:	69bb      	ldr	r3, [r7, #24]
70003240:	2b00      	cmp	r3, #0
70003242:	f000 80c2 	beq.w	700033ca <HAL_RCC_GetSysClockFreq+0x27a>
70003246:	69fb      	ldr	r3, [r7, #28]
70003248:	2b02      	cmp	r3, #2
7000324a:	d064      	beq.n	70003316 <HAL_RCC_GetSysClockFreq+0x1c6>
7000324c:	69fb      	ldr	r3, [r7, #28]
7000324e:	2b02      	cmp	r3, #2
70003250:	f200 8083 	bhi.w	7000335a <HAL_RCC_GetSysClockFreq+0x20a>
70003254:	69fb      	ldr	r3, [r7, #28]
70003256:	2b00      	cmp	r3, #0
70003258:	d003      	beq.n	70003262 <HAL_RCC_GetSysClockFreq+0x112>
7000325a:	69fb      	ldr	r3, [r7, #28]
7000325c:	2b01      	cmp	r3, #1
7000325e:	d038      	beq.n	700032d2 <HAL_RCC_GetSysClockFreq+0x182>
70003260:	e07b      	b.n	7000335a <HAL_RCC_GetSysClockFreq+0x20a>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
70003262:	4b67      	ldr	r3, [pc, #412]	@ (70003400 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003264:	681b      	ldr	r3, [r3, #0]
70003266:	f003 0320 	and.w	r3, r3, #32
7000326a:	2b00      	cmp	r3, #0
7000326c:	d02d      	beq.n	700032ca <HAL_RCC_GetSysClockFreq+0x17a>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
7000326e:	4b64      	ldr	r3, [pc, #400]	@ (70003400 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003270:	681b      	ldr	r3, [r3, #0]
70003272:	08db      	lsrs	r3, r3, #3
70003274:	f003 0303 	and.w	r3, r3, #3
70003278:	4a62      	ldr	r2, [pc, #392]	@ (70003404 <HAL_RCC_GetSysClockFreq+0x2b4>)
7000327a:	fa22 f303 	lsr.w	r3, r2, r3
7000327e:	60fb      	str	r3, [r7, #12]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
70003280:	68fb      	ldr	r3, [r7, #12]
70003282:	ee07 3a90 	vmov	s15, r3
70003286:	eef8 6a67 	vcvt.f32.u32	s13, s15
7000328a:	69bb      	ldr	r3, [r7, #24]
7000328c:	ee07 3a90 	vmov	s15, r3
70003290:	eef8 7a67 	vcvt.f32.u32	s15, s15
70003294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70003298:	4b59      	ldr	r3, [pc, #356]	@ (70003400 <HAL_RCC_GetSysClockFreq+0x2b0>)
7000329a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
7000329c:	f3c3 0308 	ubfx	r3, r3, #0, #9
700032a0:	ee07 3a90 	vmov	s15, r3
700032a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
700032a8:	ed97 6a04 	vldr	s12, [r7, #16]
700032ac:	eddf 5a58 	vldr	s11, [pc, #352]	@ 70003410 <HAL_RCC_GetSysClockFreq+0x2c0>
700032b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
700032b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
700032b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
700032bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
700032c0:	ee67 7a27 	vmul.f32	s15, s14, s15
700032c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            else
            {
              /* Can't retrieve HSIDIV value */
              pllvco = (float_t)0;
            }
            break;
700032c8:	e069      	b.n	7000339e <HAL_RCC_GetSysClockFreq+0x24e>
              pllvco = (float_t)0;
700032ca:	f04f 0300 	mov.w	r3, #0
700032ce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
700032d0:	e065      	b.n	7000339e <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
700032d2:	69bb      	ldr	r3, [r7, #24]
700032d4:	ee07 3a90 	vmov	s15, r3
700032d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
700032dc:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 70003414 <HAL_RCC_GetSysClockFreq+0x2c4>
700032e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
700032e4:	4b46      	ldr	r3, [pc, #280]	@ (70003400 <HAL_RCC_GetSysClockFreq+0x2b0>)
700032e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
700032e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
700032ec:	ee07 3a90 	vmov	s15, r3
700032f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
700032f4:	ed97 6a04 	vldr	s12, [r7, #16]
700032f8:	eddf 5a45 	vldr	s11, [pc, #276]	@ 70003410 <HAL_RCC_GetSysClockFreq+0x2c0>
700032fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
70003300:	ee76 7aa7 	vadd.f32	s15, s13, s15
70003304:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70003308:	ee77 7aa6 	vadd.f32	s15, s15, s13
7000330c:	ee67 7a27 	vmul.f32	s15, s14, s15
70003310:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
70003314:	e043      	b.n	7000339e <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
70003316:	69bb      	ldr	r3, [r7, #24]
70003318:	ee07 3a90 	vmov	s15, r3
7000331c:	eef8 7a67 	vcvt.f32.u32	s15, s15
70003320:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 70003418 <HAL_RCC_GetSysClockFreq+0x2c8>
70003324:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70003328:	4b35      	ldr	r3, [pc, #212]	@ (70003400 <HAL_RCC_GetSysClockFreq+0x2b0>)
7000332a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
7000332c:	f3c3 0308 	ubfx	r3, r3, #0, #9
70003330:	ee07 3a90 	vmov	s15, r3
70003334:	eef8 6a67 	vcvt.f32.u32	s13, s15
70003338:	ed97 6a04 	vldr	s12, [r7, #16]
7000333c:	eddf 5a34 	vldr	s11, [pc, #208]	@ 70003410 <HAL_RCC_GetSysClockFreq+0x2c0>
70003340:	eec6 7a25 	vdiv.f32	s15, s12, s11
70003344:	ee76 7aa7 	vadd.f32	s15, s13, s15
70003348:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
7000334c:	ee77 7aa6 	vadd.f32	s15, s15, s13
70003350:	ee67 7a27 	vmul.f32	s15, s14, s15
70003354:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
70003358:	e021      	b.n	7000339e <HAL_RCC_GetSysClockFreq+0x24e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
7000335a:	69bb      	ldr	r3, [r7, #24]
7000335c:	ee07 3a90 	vmov	s15, r3
70003360:	eef8 7a67 	vcvt.f32.u32	s15, s15
70003364:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 70003414 <HAL_RCC_GetSysClockFreq+0x2c4>
70003368:	ee86 7aa7 	vdiv.f32	s14, s13, s15
7000336c:	4b24      	ldr	r3, [pc, #144]	@ (70003400 <HAL_RCC_GetSysClockFreq+0x2b0>)
7000336e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70003370:	f3c3 0308 	ubfx	r3, r3, #0, #9
70003374:	ee07 3a90 	vmov	s15, r3
70003378:	eef8 6a67 	vcvt.f32.u32	s13, s15
7000337c:	ed97 6a04 	vldr	s12, [r7, #16]
70003380:	eddf 5a23 	vldr	s11, [pc, #140]	@ 70003410 <HAL_RCC_GetSysClockFreq+0x2c0>
70003384:	eec6 7a25 	vdiv.f32	s15, s12, s11
70003388:	ee76 7aa7 	vadd.f32	s15, s13, s15
7000338c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70003390:	ee77 7aa6 	vadd.f32	s15, s15, s13
70003394:	ee67 7a27 	vmul.f32	s15, s14, s15
70003398:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
7000339c:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U) ;
7000339e:	4b18      	ldr	r3, [pc, #96]	@ (70003400 <HAL_RCC_GetSysClockFreq+0x2b0>)
700033a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
700033a2:	0a5b      	lsrs	r3, r3, #9
700033a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
700033a8:	3301      	adds	r3, #1
700033aa:	60bb      	str	r3, [r7, #8]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
700033ac:	68bb      	ldr	r3, [r7, #8]
700033ae:	ee07 3a90 	vmov	s15, r3
700033b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
700033b6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
700033ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
700033be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
700033c2:	ee17 3a90 	vmov	r3, s15
700033c6:	623b      	str	r3, [r7, #32]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
700033c8:	e005      	b.n	700033d6 <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
700033ca:	2300      	movs	r3, #0
700033cc:	623b      	str	r3, [r7, #32]
      break;
700033ce:	e002      	b.n	700033d6 <HAL_RCC_GetSysClockFreq+0x286>

    default:
      sysclockfreq = CSI_VALUE;
700033d0:	4b0d      	ldr	r3, [pc, #52]	@ (70003408 <HAL_RCC_GetSysClockFreq+0x2b8>)
700033d2:	623b      	str	r3, [r7, #32]
      break;
700033d4:	bf00      	nop
  }

  prescaler = RCC->CDCFGR & RCC_CDCFGR_CPRE;
700033d6:	4b0a      	ldr	r3, [pc, #40]	@ (70003400 <HAL_RCC_GetSysClockFreq+0x2b0>)
700033d8:	699b      	ldr	r3, [r3, #24]
700033da:	f003 030f 	and.w	r3, r3, #15
700033de:	607b      	str	r3, [r7, #4]
  if (prescaler >= 8U)
700033e0:	687b      	ldr	r3, [r7, #4]
700033e2:	2b07      	cmp	r3, #7
700033e4:	d905      	bls.n	700033f2 <HAL_RCC_GetSysClockFreq+0x2a2>
  {
    sysclockfreq = sysclockfreq >> (prescaler - RCC_CDCFGR_CPRE_3 + 1U);
700033e6:	687b      	ldr	r3, [r7, #4]
700033e8:	3b07      	subs	r3, #7
700033ea:	6a3a      	ldr	r2, [r7, #32]
700033ec:	fa22 f303 	lsr.w	r3, r2, r3
700033f0:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
700033f2:	6a3b      	ldr	r3, [r7, #32]
}
700033f4:	4618      	mov	r0, r3
700033f6:	372c      	adds	r7, #44	@ 0x2c
700033f8:	46bd      	mov	sp, r7
700033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
700033fe:	4770      	bx	lr
70003400:	58024400 	.word	0x58024400
70003404:	03d09000 	.word	0x03d09000
70003408:	003d0900 	.word	0x003d0900
7000340c:	016e3600 	.word	0x016e3600
70003410:	46000000 	.word	0x46000000
70003414:	4a742400 	.word	0x4a742400
70003418:	4bb71b00 	.word	0x4bb71b00

7000341c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
7000341c:	b580      	push	{r7, lr}
7000341e:	b084      	sub	sp, #16
70003420:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  const uint8_t AHBPrescTable[8] = {1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
70003422:	4a10      	ldr	r2, [pc, #64]	@ (70003464 <HAL_RCC_GetHCLKFreq+0x48>)
70003424:	463b      	mov	r3, r7
70003426:	e892 0003 	ldmia.w	r2, {r0, r1}
7000342a:	e883 0003 	stmia.w	r3, {r0, r1}

  /* SysClk */
  clock = HAL_RCC_GetSysClockFreq();
7000342e:	f7ff fe8f 	bl	70003150 <HAL_RCC_GetSysClockFreq>
70003432:	60f8      	str	r0, [r7, #12]
  /* Bus matrix divider */
  prescaler = (RCC->BMCFGR & RCC_BMCFGR_BMPRE) >> RCC_BMCFGR_BMPRE_Pos;
70003434:	4b0c      	ldr	r3, [pc, #48]	@ (70003468 <HAL_RCC_GetHCLKFreq+0x4c>)
70003436:	69db      	ldr	r3, [r3, #28]
70003438:	f003 030f 	and.w	r3, r3, #15
7000343c:	60bb      	str	r3, [r7, #8]
  if (prescaler >= 8U)
7000343e:	68bb      	ldr	r3, [r7, #8]
70003440:	2b07      	cmp	r3, #7
70003442:	d909      	bls.n	70003458 <HAL_RCC_GetHCLKFreq+0x3c>
  {
    clock = clock >> AHBPrescTable[prescaler - 8U];
70003444:	68bb      	ldr	r3, [r7, #8]
70003446:	3b08      	subs	r3, #8
70003448:	3310      	adds	r3, #16
7000344a:	443b      	add	r3, r7
7000344c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
70003450:	461a      	mov	r2, r3
70003452:	68fb      	ldr	r3, [r7, #12]
70003454:	40d3      	lsrs	r3, r2
70003456:	60fb      	str	r3, [r7, #12]
  }
  return (clock);
70003458:	68fb      	ldr	r3, [r7, #12]
}
7000345a:	4618      	mov	r0, r3
7000345c:	3710      	adds	r7, #16
7000345e:	46bd      	mov	sp, r7
70003460:	bd80      	pop	{r7, pc}
70003462:	bf00      	nop
70003464:	70014c10 	.word	0x70014c10
70003468:	58024400 	.word	0x58024400

7000346c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
7000346c:	b580      	push	{r7, lr}
7000346e:	b082      	sub	sp, #8
70003470:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK1 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
70003472:	f7ff ffd3 	bl	7000341c <HAL_RCC_GetHCLKFreq>
70003476:	6078      	str	r0, [r7, #4]
  /* APB1 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE1) >> RCC_APBCFGR_PPRE1_Pos;
70003478:	4b09      	ldr	r3, [pc, #36]	@ (700034a0 <HAL_RCC_GetPCLK1Freq+0x34>)
7000347a:	6a1b      	ldr	r3, [r3, #32]
7000347c:	f003 0307 	and.w	r3, r3, #7
70003480:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
70003482:	683b      	ldr	r3, [r7, #0]
70003484:	2b03      	cmp	r3, #3
70003486:	d905      	bls.n	70003494 <HAL_RCC_GetPCLK1Freq+0x28>
  {
    clock = clock >> (prescaler - 3U);
70003488:	683b      	ldr	r3, [r7, #0]
7000348a:	3b03      	subs	r3, #3
7000348c:	687a      	ldr	r2, [r7, #4]
7000348e:	fa22 f303 	lsr.w	r3, r2, r3
70003492:	607b      	str	r3, [r7, #4]
  }
  return (clock);
70003494:	687b      	ldr	r3, [r7, #4]
}
70003496:	4618      	mov	r0, r3
70003498:	3708      	adds	r7, #8
7000349a:	46bd      	mov	sp, r7
7000349c:	bd80      	pop	{r7, pc}
7000349e:	bf00      	nop
700034a0:	58024400 	.word	0x58024400

700034a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
700034a4:	b480      	push	{r7}
700034a6:	b083      	sub	sp, #12
700034a8:	af00      	add	r7, sp, #0
700034aa:	6078      	str	r0, [r7, #4]
700034ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK  | \
700034ae:	687b      	ldr	r3, [r7, #4]
700034b0:	223f      	movs	r2, #63	@ 0x3f
700034b2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK1  | RCC_CLOCKTYPE_PCLK2 | \
                                 RCC_CLOCKTYPE_PCLK4  | RCC_CLOCKTYPE_PCLK5;

  /* Get the SYSCLK source ---------------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
700034b4:	4b1a      	ldr	r3, [pc, #104]	@ (70003520 <HAL_RCC_GetClockConfig+0x7c>)
700034b6:	691b      	ldr	r3, [r3, #16]
700034b8:	f003 0207 	and.w	r2, r3, #7
700034bc:	687b      	ldr	r3, [r7, #4]
700034be:	605a      	str	r2, [r3, #4]

  /* Get the SYSCLK configuration---------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = READ_BIT(RCC->CDCFGR, RCC_CDCFGR_CPRE);
700034c0:	4b17      	ldr	r3, [pc, #92]	@ (70003520 <HAL_RCC_GetClockConfig+0x7c>)
700034c2:	699b      	ldr	r3, [r3, #24]
700034c4:	f003 020f 	and.w	r2, r3, #15
700034c8:	687b      	ldr	r3, [r7, #4]
700034ca:	609a      	str	r2, [r3, #8]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->BMCFGR, RCC_BMCFGR_BMPRE);
700034cc:	4b14      	ldr	r3, [pc, #80]	@ (70003520 <HAL_RCC_GetClockConfig+0x7c>)
700034ce:	69db      	ldr	r3, [r3, #28]
700034d0:	f003 020f 	and.w	r2, r3, #15
700034d4:	687b      	ldr	r3, [r7, #4]
700034d6:	60da      	str	r2, [r3, #12]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->APBCFGR, RCC_APBCFGR_PPRE1);
700034d8:	4b11      	ldr	r3, [pc, #68]	@ (70003520 <HAL_RCC_GetClockConfig+0x7c>)
700034da:	6a1b      	ldr	r3, [r3, #32]
700034dc:	f003 0207 	and.w	r2, r3, #7
700034e0:	687b      	ldr	r3, [r7, #4]
700034e2:	611a      	str	r2, [r3, #16]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = READ_BIT(RCC->APBCFGR, RCC_APBCFGR_PPRE2);
700034e4:	4b0e      	ldr	r3, [pc, #56]	@ (70003520 <HAL_RCC_GetClockConfig+0x7c>)
700034e6:	6a1b      	ldr	r3, [r3, #32]
700034e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
700034ec:	687b      	ldr	r3, [r7, #4]
700034ee:	615a      	str	r2, [r3, #20]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = READ_BIT(RCC->APBCFGR, RCC_APBCFGR_PPRE4);
700034f0:	4b0b      	ldr	r3, [pc, #44]	@ (70003520 <HAL_RCC_GetClockConfig+0x7c>)
700034f2:	6a1b      	ldr	r3, [r3, #32]
700034f4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
700034f8:	687b      	ldr	r3, [r7, #4]
700034fa:	619a      	str	r2, [r3, #24]

  /* Get the APB5 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB5CLKDivider = READ_BIT(RCC->APBCFGR, RCC_APBCFGR_PPRE5);
700034fc:	4b08      	ldr	r3, [pc, #32]	@ (70003520 <HAL_RCC_GetClockConfig+0x7c>)
700034fe:	6a1b      	ldr	r3, [r3, #32]
70003500:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
70003504:	687b      	ldr	r3, [r7, #4]
70003506:	61da      	str	r2, [r3, #28]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
70003508:	4b06      	ldr	r3, [pc, #24]	@ (70003524 <HAL_RCC_GetClockConfig+0x80>)
7000350a:	681b      	ldr	r3, [r3, #0]
7000350c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
70003510:	683b      	ldr	r3, [r7, #0]
70003512:	601a      	str	r2, [r3, #0]
}
70003514:	bf00      	nop
70003516:	370c      	adds	r7, #12
70003518:	46bd      	mov	sp, r7
7000351a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000351e:	4770      	bx	lr
70003520:	58024400 	.word	0x58024400
70003524:	52002000 	.word	0x52002000

70003528 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
70003528:	b580      	push	{r7, lr}
7000352a:	b086      	sub	sp, #24
7000352c:	af00      	add	r7, sp, #0
7000352e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
70003530:	2300      	movs	r3, #0
70003532:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
70003534:	2300      	movs	r3, #0
70003536:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
70003538:	687b      	ldr	r3, [r7, #4]
7000353a:	681b      	ldr	r3, [r3, #0]
7000353c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
70003540:	2b00      	cmp	r3, #0
70003542:	f000 8081 	beq.w	70003648 <HAL_RCCEx_PeriphCLKConfig+0x120>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
70003546:	4b8c      	ldr	r3, [pc, #560]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000354a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
7000354e:	613b      	str	r3, [r7, #16]

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
70003550:	693b      	ldr	r3, [r7, #16]
70003552:	2b00      	cmp	r3, #0
70003554:	d029      	beq.n	700035aa <HAL_RCCEx_PeriphCLKConfig+0x82>
70003556:	687b      	ldr	r3, [r7, #4]
70003558:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
7000355a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
7000355e:	693a      	ldr	r2, [r7, #16]
70003560:	429a      	cmp	r2, r3
70003562:	d022      	beq.n	700035aa <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
70003564:	4b85      	ldr	r3, [pc, #532]	@ (7000377c <HAL_RCCEx_PeriphCLKConfig+0x254>)
70003566:	681b      	ldr	r3, [r3, #0]
70003568:	4a84      	ldr	r2, [pc, #528]	@ (7000377c <HAL_RCCEx_PeriphCLKConfig+0x254>)
7000356a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
7000356e:	6013      	str	r3, [r2, #0]

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
70003570:	4b82      	ldr	r3, [pc, #520]	@ (7000377c <HAL_RCCEx_PeriphCLKConfig+0x254>)
70003572:	681b      	ldr	r3, [r3, #0]
70003574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
70003578:	2b00      	cmp	r3, #0
7000357a:	d102      	bne.n	70003582 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      {
        ret = HAL_ERROR;
7000357c:	2301      	movs	r3, #1
7000357e:	75fb      	strb	r3, [r7, #23]
70003580:	e013      	b.n	700035aa <HAL_RCCEx_PeriphCLKConfig+0x82>
      }
      else
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        /* excepted the RTC clock source selection that will be changed */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
70003582:	4b7d      	ldr	r3, [pc, #500]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70003586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
7000358a:	613b      	str	r3, [r7, #16]
        __HAL_RCC_BACKUPRESET_FORCE();
7000358c:	4b7a      	ldr	r3, [pc, #488]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000358e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70003590:	4a79      	ldr	r2, [pc, #484]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70003596:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
70003598:	4b77      	ldr	r3, [pc, #476]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000359a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000359c:	4a76      	ldr	r2, [pc, #472]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000359e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
700035a2:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the content of BDCR register */
        WRITE_REG(RCC->BDCR, tmpreg);
700035a4:	4a74      	ldr	r2, [pc, #464]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700035a6:	693b      	ldr	r3, [r7, #16]
700035a8:	6713      	str	r3, [r2, #112]	@ 0x70
      }
    }

    if (ret == HAL_OK)
700035aa:	7dfb      	ldrb	r3, [r7, #23]
700035ac:	2b00      	cmp	r3, #0
700035ae:	d149      	bne.n	70003644 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
700035b0:	687b      	ldr	r3, [r7, #4]
700035b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
700035b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
700035b8:	d115      	bne.n	700035e6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
700035ba:	f7fd fd51 	bl	70001060 <HAL_GetTick>
700035be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
700035c0:	e00b      	b.n	700035da <HAL_RCCEx_PeriphCLKConfig+0xb2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
700035c2:	f7fd fd4d 	bl	70001060 <HAL_GetTick>
700035c6:	4602      	mov	r2, r0
700035c8:	68fb      	ldr	r3, [r7, #12]
700035ca:	1ad3      	subs	r3, r2, r3
700035cc:	f241 3288 	movw	r2, #5000	@ 0x1388
700035d0:	4293      	cmp	r3, r2
700035d2:	d902      	bls.n	700035da <HAL_RCCEx_PeriphCLKConfig+0xb2>
          {
            ret = HAL_TIMEOUT;
700035d4:	2303      	movs	r3, #3
700035d6:	75fb      	strb	r3, [r7, #23]
            break;
700035d8:	e005      	b.n	700035e6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
700035da:	4b67      	ldr	r3, [pc, #412]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700035dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
700035de:	f003 0302 	and.w	r3, r3, #2
700035e2:	2b00      	cmp	r3, #0
700035e4:	d0ed      	beq.n	700035c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
          }
        }
      }

      if (ret == HAL_OK)
700035e6:	7dfb      	ldrb	r3, [r7, #23]
700035e8:	2b00      	cmp	r3, #0
700035ea:	d128      	bne.n	7000363e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
700035ec:	687b      	ldr	r3, [r7, #4]
700035ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
700035f0:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
700035f4:	2b00      	cmp	r3, #0
700035f6:	d00c      	beq.n	70003612 <HAL_RCCEx_PeriphCLKConfig+0xea>
700035f8:	4b5f      	ldr	r3, [pc, #380]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700035fa:	691b      	ldr	r3, [r3, #16]
700035fc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
70003600:	687b      	ldr	r3, [r7, #4]
70003602:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
70003604:	0919      	lsrs	r1, r3, #4
70003606:	4b5e      	ldr	r3, [pc, #376]	@ (70003780 <HAL_RCCEx_PeriphCLKConfig+0x258>)
70003608:	400b      	ands	r3, r1
7000360a:	495b      	ldr	r1, [pc, #364]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000360c:	4313      	orrs	r3, r2
7000360e:	610b      	str	r3, [r1, #16]
70003610:	e005      	b.n	7000361e <HAL_RCCEx_PeriphCLKConfig+0xf6>
70003612:	4b59      	ldr	r3, [pc, #356]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003614:	691b      	ldr	r3, [r3, #16]
70003616:	4a58      	ldr	r2, [pc, #352]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003618:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
7000361c:	6113      	str	r3, [r2, #16]
7000361e:	4b56      	ldr	r3, [pc, #344]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003620:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
70003622:	687b      	ldr	r3, [r7, #4]
70003624:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
70003626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
7000362a:	4953      	ldr	r1, [pc, #332]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000362c:	4313      	orrs	r3, r2
7000362e:	670b      	str	r3, [r1, #112]	@ 0x70
        __HAL_RCC_RTC_ENABLE();
70003630:	4b51      	ldr	r3, [pc, #324]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70003634:	4a50      	ldr	r2, [pc, #320]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003636:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
7000363a:	6713      	str	r3, [r2, #112]	@ 0x70
7000363c:	e004      	b.n	70003648 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
      else
      {
        /* set overall return value */
        status = ret;
7000363e:	7dfb      	ldrb	r3, [r7, #23]
70003640:	75bb      	strb	r3, [r7, #22]
70003642:	e001      	b.n	70003648 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
70003644:	7dfb      	ldrb	r3, [r7, #23]
70003646:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
70003648:	687b      	ldr	r3, [r7, #4]
7000364a:	681b      	ldr	r3, [r3, #0]
7000364c:	f003 0301 	and.w	r3, r3, #1
70003650:	2b00      	cmp	r3, #0
70003652:	d030      	beq.n	700036b6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
70003654:	687b      	ldr	r3, [r7, #4]
70003656:	685b      	ldr	r3, [r3, #4]
70003658:	2b03      	cmp	r3, #3
7000365a:	d819      	bhi.n	70003690 <HAL_RCCEx_PeriphCLKConfig+0x168>
7000365c:	a201      	add	r2, pc, #4	@ (adr r2, 70003664 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
7000365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70003662:	bf00      	nop
70003664:	70003697 	.word	0x70003697
70003668:	70003675 	.word	0x70003675
7000366c:	70003683 	.word	0x70003683
70003670:	70003697 	.word	0x70003697
      case RCC_FMCCLKSOURCE_HCLK:   /* HCLK  clock selected as FMC kernel peripheral clock */
        break;

      case RCC_FMCCLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for FMC kernel */
        /* Enable FMC kernel clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
70003674:	4b40      	ldr	r3, [pc, #256]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003678:	4a3f      	ldr	r2, [pc, #252]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000367a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
7000367e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
70003680:	e00a      	b.n	70003698 <HAL_RCCEx_PeriphCLKConfig+0x170>

      case RCC_FMCCLKSOURCE_PLL2R:  /* PLL2_R is used as clock source for FMC kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
70003682:	4b3d      	ldr	r3, [pc, #244]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003686:	4a3c      	ldr	r2, [pc, #240]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
7000368c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
7000368e:	e003      	b.n	70003698 <HAL_RCCEx_PeriphCLKConfig+0x170>
      case RCC_FMCCLKSOURCE_HSI:   /* HSI oscillator is used as clock source for FMC kernel */
        /* FMC kernel clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003690:	2301      	movs	r3, #1
70003692:	75fb      	strb	r3, [r7, #23]
        break;
70003694:	e000      	b.n	70003698 <HAL_RCCEx_PeriphCLKConfig+0x170>
        break;
70003696:	bf00      	nop
    }

    if (ret == HAL_OK)
70003698:	7dfb      	ldrb	r3, [r7, #23]
7000369a:	2b00      	cmp	r3, #0
7000369c:	d109      	bne.n	700036b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Set the source of FMC kernel clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
7000369e:	4b36      	ldr	r3, [pc, #216]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700036a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
700036a2:	f023 0203 	bic.w	r2, r3, #3
700036a6:	687b      	ldr	r3, [r7, #4]
700036a8:	685b      	ldr	r3, [r3, #4]
700036aa:	4933      	ldr	r1, [pc, #204]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700036ac:	4313      	orrs	r3, r2
700036ae:	64cb      	str	r3, [r1, #76]	@ 0x4c
700036b0:	e001      	b.n	700036b6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    }
    else
    {
      /* set overall return value */
      status = ret;
700036b2:	7dfb      	ldrb	r3, [r7, #23]
700036b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
700036b6:	687b      	ldr	r3, [r7, #4]
700036b8:	681b      	ldr	r3, [r3, #0]
700036ba:	f003 0302 	and.w	r3, r3, #2
700036be:	2b00      	cmp	r3, #0
700036c0:	d02a      	beq.n	70003718 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    switch (PeriphClkInit->Xspi1ClockSelection)
700036c2:	687b      	ldr	r3, [r7, #4]
700036c4:	689b      	ldr	r3, [r3, #8]
700036c6:	2b20      	cmp	r3, #32
700036c8:	d00c      	beq.n	700036e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
700036ca:	2b20      	cmp	r3, #32
700036cc:	d811      	bhi.n	700036f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
700036ce:	2b00      	cmp	r3, #0
700036d0:	d012      	beq.n	700036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
700036d2:	2b10      	cmp	r3, #16
700036d4:	d10d      	bne.n	700036f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      case RCC_XSPI1CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi1 */
        /* Nothing to do */
        break;

      case RCC_XSPI1CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
700036d6:	4b28      	ldr	r3, [pc, #160]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700036d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700036da:	4a27      	ldr	r2, [pc, #156]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700036dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
700036e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
700036e2:	e00a      	b.n	700036fa <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      case RCC_XSPI1CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
700036e4:	4b24      	ldr	r3, [pc, #144]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700036e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700036e8:	4a23      	ldr	r2, [pc, #140]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700036ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
700036ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
700036f0:	e003      	b.n	700036fa <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      default:
        ret = HAL_ERROR;
700036f2:	2301      	movs	r3, #1
700036f4:	75fb      	strb	r3, [r7, #23]
        break;
700036f6:	e000      	b.n	700036fa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        break;
700036f8:	bf00      	nop
    }

    if (ret == HAL_OK)
700036fa:	7dfb      	ldrb	r3, [r7, #23]
700036fc:	2b00      	cmp	r3, #0
700036fe:	d109      	bne.n	70003714 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      /* Configure the XSPI1 clock source */
      __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
70003700:	4b1d      	ldr	r3, [pc, #116]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70003704:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
70003708:	687b      	ldr	r3, [r7, #4]
7000370a:	689b      	ldr	r3, [r3, #8]
7000370c:	491a      	ldr	r1, [pc, #104]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000370e:	4313      	orrs	r3, r2
70003710:	64cb      	str	r3, [r1, #76]	@ 0x4c
70003712:	e001      	b.n	70003718 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003714:	7dfb      	ldrb	r3, [r7, #23]
70003716:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
70003718:	687b      	ldr	r3, [r7, #4]
7000371a:	681b      	ldr	r3, [r3, #0]
7000371c:	f003 0304 	and.w	r3, r3, #4
70003720:	2b00      	cmp	r3, #0
70003722:	d031      	beq.n	70003788 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    switch (PeriphClkInit->Xspi2ClockSelection)
70003724:	687b      	ldr	r3, [r7, #4]
70003726:	68db      	ldr	r3, [r3, #12]
70003728:	2b80      	cmp	r3, #128	@ 0x80
7000372a:	d00c      	beq.n	70003746 <HAL_RCCEx_PeriphCLKConfig+0x21e>
7000372c:	2b80      	cmp	r3, #128	@ 0x80
7000372e:	d811      	bhi.n	70003754 <HAL_RCCEx_PeriphCLKConfig+0x22c>
70003730:	2b00      	cmp	r3, #0
70003732:	d012      	beq.n	7000375a <HAL_RCCEx_PeriphCLKConfig+0x232>
70003734:	2b40      	cmp	r3, #64	@ 0x40
70003736:	d10d      	bne.n	70003754 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      case RCC_XSPI2CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi2 */
        /* Nothing to do */
        break;

      case RCC_XSPI2CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
70003738:	4b0f      	ldr	r3, [pc, #60]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000373a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000373c:	4a0e      	ldr	r2, [pc, #56]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000373e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
70003742:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
70003744:	e00a      	b.n	7000375c <HAL_RCCEx_PeriphCLKConfig+0x234>

      case RCC_XSPI2CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
70003746:	4b0c      	ldr	r3, [pc, #48]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000374a:	4a0b      	ldr	r2, [pc, #44]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000374c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
70003750:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
70003752:	e003      	b.n	7000375c <HAL_RCCEx_PeriphCLKConfig+0x234>

      default:
        ret = HAL_ERROR;
70003754:	2301      	movs	r3, #1
70003756:	75fb      	strb	r3, [r7, #23]
        break;
70003758:	e000      	b.n	7000375c <HAL_RCCEx_PeriphCLKConfig+0x234>
        break;
7000375a:	bf00      	nop
    }

    if (ret == HAL_OK)
7000375c:	7dfb      	ldrb	r3, [r7, #23]
7000375e:	2b00      	cmp	r3, #0
70003760:	d110      	bne.n	70003784 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Configure the XSPI2 clock source */
      __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
70003762:	4b05      	ldr	r3, [pc, #20]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70003766:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
7000376a:	687b      	ldr	r3, [r7, #4]
7000376c:	68db      	ldr	r3, [r3, #12]
7000376e:	4902      	ldr	r1, [pc, #8]	@ (70003778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003770:	4313      	orrs	r3, r2
70003772:	64cb      	str	r3, [r1, #76]	@ 0x4c
70003774:	e008      	b.n	70003788 <HAL_RCCEx_PeriphCLKConfig+0x260>
70003776:	bf00      	nop
70003778:	58024400 	.word	0x58024400
7000377c:	58024800 	.word	0x58024800
70003780:	0fffffcf 	.word	0x0fffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
70003784:	7dfb      	ldrb	r3, [r7, #23]
70003786:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
70003788:	687b      	ldr	r3, [r7, #4]
7000378a:	681b      	ldr	r3, [r3, #0]
7000378c:	f003 0308 	and.w	r3, r3, #8
70003790:	2b00      	cmp	r3, #0
70003792:	d008      	beq.n	700037a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
70003794:	4b93      	ldr	r3, [pc, #588]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70003796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70003798:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
7000379c:	687b      	ldr	r3, [r7, #4]
7000379e:	691b      	ldr	r3, [r3, #16]
700037a0:	4990      	ldr	r1, [pc, #576]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700037a2:	4313      	orrs	r3, r2
700037a4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------------- SDMMC12 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC12) == RCC_PERIPHCLK_SDMMC12)
700037a6:	687b      	ldr	r3, [r7, #4]
700037a8:	681b      	ldr	r3, [r3, #0]
700037aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
700037ae:	2b00      	cmp	r3, #0
700037b0:	d026      	beq.n	70003800 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
700037b2:	687b      	ldr	r3, [r7, #4]
700037b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
700037b6:	2b00      	cmp	r3, #0
700037b8:	d002      	beq.n	700037c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
700037ba:	2b04      	cmp	r3, #4
700037bc:	d007      	beq.n	700037ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
700037be:	e00d      	b.n	700037dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      case RCC_SDMMC12CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
700037c0:	4b88      	ldr	r3, [pc, #544]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700037c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700037c4:	4a87      	ldr	r2, [pc, #540]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700037c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
700037ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
700037cc:	e009      	b.n	700037e2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      case RCC_SDMMC12CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
700037ce:	4b85      	ldr	r3, [pc, #532]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700037d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700037d2:	4a84      	ldr	r2, [pc, #528]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700037d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
700037d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
700037da:	e002      	b.n	700037e2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      default:
        ret = HAL_ERROR;
700037dc:	2301      	movs	r3, #1
700037de:	75fb      	strb	r3, [r7, #23]
        break;
700037e0:	bf00      	nop
    }

    if (ret == HAL_OK)
700037e2:	7dfb      	ldrb	r3, [r7, #23]
700037e4:	2b00      	cmp	r3, #0
700037e6:	d109      	bne.n	700037fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
    {
      /* Set the source of SDMMC12 clock*/
      __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
700037e8:	4b7e      	ldr	r3, [pc, #504]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700037ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
700037ec:	f023 0204 	bic.w	r2, r3, #4
700037f0:	687b      	ldr	r3, [r7, #4]
700037f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
700037f4:	497b      	ldr	r1, [pc, #492]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700037f6:	4313      	orrs	r3, r2
700037f8:	64cb      	str	r3, [r1, #76]	@ 0x4c
700037fa:	e001      	b.n	70003800 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
700037fc:	7dfb      	ldrb	r3, [r7, #23]
700037fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
70003800:	687b      	ldr	r3, [r7, #4]
70003802:	681b      	ldr	r3, [r3, #0]
70003804:	f003 0310 	and.w	r3, r3, #16
70003808:	2b00      	cmp	r3, #0
7000380a:	d02e      	beq.n	7000386a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
7000380c:	687b      	ldr	r3, [r7, #4]
7000380e:	695b      	ldr	r3, [r3, #20]
70003810:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
70003814:	d019      	beq.n	7000384a <HAL_RCCEx_PeriphCLKConfig+0x322>
70003816:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
7000381a:	d813      	bhi.n	70003844 <HAL_RCCEx_PeriphCLKConfig+0x31c>
7000381c:	2b00      	cmp	r3, #0
7000381e:	d003      	beq.n	70003828 <HAL_RCCEx_PeriphCLKConfig+0x300>
70003820:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
70003824:	d007      	beq.n	70003836 <HAL_RCCEx_PeriphCLKConfig+0x30e>
70003826:	e00d      	b.n	70003844 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    {

      case RCC_ADCCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for ADC */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70003828:	4b6e      	ldr	r3, [pc, #440]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
7000382a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000382c:	4a6d      	ldr	r2, [pc, #436]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
7000382e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70003832:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
70003834:	e00a      	b.n	7000384c <HAL_RCCEx_PeriphCLKConfig+0x324>

      case RCC_ADCCLKSOURCE_PLL3R: /* PLL3_R is used as clock source for ADC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70003836:	4b6b      	ldr	r3, [pc, #428]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70003838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000383a:	4a6a      	ldr	r2, [pc, #424]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
7000383c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70003840:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
70003842:	e003      	b.n	7000384c <HAL_RCCEx_PeriphCLKConfig+0x324>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003844:	2301      	movs	r3, #1
70003846:	75fb      	strb	r3, [r7, #23]
        break;
70003848:	e000      	b.n	7000384c <HAL_RCCEx_PeriphCLKConfig+0x324>
        break;
7000384a:	bf00      	nop
    }

    if (ret == HAL_OK)
7000384c:	7dfb      	ldrb	r3, [r7, #23]
7000384e:	2b00      	cmp	r3, #0
70003850:	d109      	bne.n	70003866 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
70003852:	4b64      	ldr	r3, [pc, #400]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70003854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70003856:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
7000385a:	687b      	ldr	r3, [r7, #4]
7000385c:	695b      	ldr	r3, [r3, #20]
7000385e:	4961      	ldr	r1, [pc, #388]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70003860:	4313      	orrs	r3, r2
70003862:	64cb      	str	r3, [r1, #76]	@ 0x4c
70003864:	e001      	b.n	7000386a <HAL_RCCEx_PeriphCLKConfig+0x342>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003866:	7dfb      	ldrb	r3, [r7, #23]
70003868:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
7000386a:	687b      	ldr	r3, [r7, #4]
7000386c:	681b      	ldr	r3, [r3, #0]
7000386e:	f003 0320 	and.w	r3, r3, #32
70003872:	2b00      	cmp	r3, #0
70003874:	d03f      	beq.n	700038f6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    switch (PeriphClkInit->Adf1ClockSelection)
70003876:	687b      	ldr	r3, [r7, #4]
70003878:	699b      	ldr	r3, [r3, #24]
7000387a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
7000387e:	d02a      	beq.n	700038d6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
70003880:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
70003884:	d824      	bhi.n	700038d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
70003886:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
7000388a:	d024      	beq.n	700038d6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
7000388c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
70003890:	d81e      	bhi.n	700038d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
70003892:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
70003896:	d01e      	beq.n	700038d6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
70003898:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
7000389c:	d818      	bhi.n	700038d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
7000389e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
700038a2:	d00e      	beq.n	700038c2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
700038a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
700038a8:	d812      	bhi.n	700038d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
700038aa:	2b00      	cmp	r3, #0
700038ac:	d013      	beq.n	700038d6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
700038ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
700038b2:	d10d      	bne.n	700038d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      case RCC_ADF1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for ADF1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
700038b4:	4b4b      	ldr	r3, [pc, #300]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700038b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700038b8:	4a4a      	ldr	r2, [pc, #296]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700038ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
700038be:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
700038c0:	e00a      	b.n	700038d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>

      case RCC_ADF1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for ADF1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
700038c2:	4b48      	ldr	r3, [pc, #288]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700038c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700038c6:	4a47      	ldr	r2, [pc, #284]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700038c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
700038cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
700038ce:	e003      	b.n	700038d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      case RCC_ADF1CLKSOURCE_HSI:    /* HSI is used as clock source for ADF1 */
        /* ADF1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
700038d0:	2301      	movs	r3, #1
700038d2:	75fb      	strb	r3, [r7, #23]
        break;
700038d4:	e000      	b.n	700038d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        break;
700038d6:	bf00      	nop
    }

    if (ret == HAL_OK)
700038d8:	7dfb      	ldrb	r3, [r7, #23]
700038da:	2b00      	cmp	r3, #0
700038dc:	d109      	bne.n	700038f2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    {
      /* Set the source of ADF1 clock*/
      __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
700038de:	4b41      	ldr	r3, [pc, #260]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700038e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
700038e2:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
700038e6:	687b      	ldr	r3, [r7, #4]
700038e8:	699b      	ldr	r3, [r3, #24]
700038ea:	493e      	ldr	r1, [pc, #248]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700038ec:	4313      	orrs	r3, r2
700038ee:	64cb      	str	r3, [r1, #76]	@ 0x4c
700038f0:	e001      	b.n	700038f6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
700038f2:	7dfb      	ldrb	r3, [r7, #23]
700038f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- CEC configuration ---------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
700038f6:	687b      	ldr	r3, [r7, #4]
700038f8:	681b      	ldr	r3, [r3, #0]
700038fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
700038fe:	2b00      	cmp	r3, #0
70003900:	d008      	beq.n	70003914 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
70003902:	4b38      	ldr	r3, [pc, #224]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70003904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70003906:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
7000390a:	687b      	ldr	r3, [r7, #4]
7000390c:	69db      	ldr	r3, [r3, #28]
7000390e:	4935      	ldr	r1, [pc, #212]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70003910:	4313      	orrs	r3, r2
70003912:	650b      	str	r3, [r1, #80]	@ 0x50
  }

  /*---------------------- ETH1 REF configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1REF) == RCC_PERIPHCLK_ETH1REF)
70003914:	687b      	ldr	r3, [r7, #4]
70003916:	681b      	ldr	r3, [r3, #0]
70003918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
7000391c:	2b00      	cmp	r3, #0
7000391e:	d008      	beq.n	70003932 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1REFCLKSOURCE(PeriphClkInit->Eth1RefClockSelection));

    /* Configure the ETH1 REF clock source */
    __HAL_RCC_ETH1REF_CONFIG(PeriphClkInit->Eth1RefClockSelection);
70003920:	4b30      	ldr	r3, [pc, #192]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70003922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70003924:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
70003928:	687b      	ldr	r3, [r7, #4]
7000392a:	6a1b      	ldr	r3, [r3, #32]
7000392c:	492d      	ldr	r1, [pc, #180]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
7000392e:	4313      	orrs	r3, r2
70003930:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*---------------------- ETH1PHY configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
70003932:	687b      	ldr	r3, [r7, #4]
70003934:	681b      	ldr	r3, [r3, #0]
70003936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
7000393a:	2b00      	cmp	r3, #0
7000393c:	d020      	beq.n	70003980 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYCLKSOURCE(PeriphClkInit->Eth1PhyClockSelection));

    switch (PeriphClkInit->Eth1PhyClockSelection)
7000393e:	687b      	ldr	r3, [r7, #4]
70003940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70003942:	2b00      	cmp	r3, #0
70003944:	d00c      	beq.n	70003960 <HAL_RCCEx_PeriphCLKConfig+0x438>
70003946:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
7000394a:	d106      	bne.n	7000395a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_ETH1PHYCLKSOURCE_HSE:    /* HSE is used as clock source for ETH PHY */
        /* ETH PHY clock source configuration done later after clock selection check */
        break;

      case RCC_ETH1PHYCLKSOURCE_PLL3S:  /* PLL3_S is used as clock source for ETH PHY */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_SCLK);
7000394c:	4b25      	ldr	r3, [pc, #148]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
7000394e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003950:	4a24      	ldr	r2, [pc, #144]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70003952:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
70003956:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ETH PHY clock source configuration done later after clock selection check */
        break;
70003958:	e003      	b.n	70003962 <HAL_RCCEx_PeriphCLKConfig+0x43a>

      default:
        ret = HAL_ERROR;
7000395a:	2301      	movs	r3, #1
7000395c:	75fb      	strb	r3, [r7, #23]
        break;
7000395e:	e000      	b.n	70003962 <HAL_RCCEx_PeriphCLKConfig+0x43a>
        break;
70003960:	bf00      	nop
    }

    if (ret == HAL_OK)
70003962:	7dfb      	ldrb	r3, [r7, #23]
70003964:	2b00      	cmp	r3, #0
70003966:	d109      	bne.n	7000397c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of ETH PHY clock*/
      __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyClockSelection);
70003968:	4b1e      	ldr	r3, [pc, #120]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
7000396a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
7000396c:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
70003970:	687b      	ldr	r3, [r7, #4]
70003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70003974:	491b      	ldr	r1, [pc, #108]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70003976:	4313      	orrs	r3, r2
70003978:	64cb      	str	r3, [r1, #76]	@ 0x4c
7000397a:	e001      	b.n	70003980 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
7000397c:	7dfb      	ldrb	r3, [r7, #23]
7000397e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
70003980:	687b      	ldr	r3, [r7, #4]
70003982:	681b      	ldr	r3, [r3, #0]
70003984:	f403 7300 	and.w	r3, r3, #512	@ 0x200
70003988:	2b00      	cmp	r3, #0
7000398a:	d02f      	beq.n	700039ec <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
7000398c:	687b      	ldr	r3, [r7, #4]
7000398e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70003990:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
70003994:	d00e      	beq.n	700039b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
70003996:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
7000399a:	d812      	bhi.n	700039c2 <HAL_RCCEx_PeriphCLKConfig+0x49a>
7000399c:	2b00      	cmp	r3, #0
7000399e:	d013      	beq.n	700039c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
700039a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
700039a4:	d10d      	bne.n	700039c2 <HAL_RCCEx_PeriphCLKConfig+0x49a>
    {
      case RCC_FDCANCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for FDCAN kernel */
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
700039a6:	4b0f      	ldr	r3, [pc, #60]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700039a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700039aa:	4a0e      	ldr	r2, [pc, #56]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700039ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
700039b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
700039b2:	e00a      	b.n	700039ca <HAL_RCCEx_PeriphCLKConfig+0x4a2>

      case RCC_FDCANCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for FDCAN kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
700039b4:	4b0b      	ldr	r3, [pc, #44]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700039b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700039b8:	4a0a      	ldr	r2, [pc, #40]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700039ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
700039be:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
700039c0:	e003      	b.n	700039ca <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      case RCC_FDCANCLKSOURCE_HSE:   /* HSE is used as clock source for FDCAN kernel */
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
700039c2:	2301      	movs	r3, #1
700039c4:	75fb      	strb	r3, [r7, #23]
        break;
700039c6:	e000      	b.n	700039ca <HAL_RCCEx_PeriphCLKConfig+0x4a2>
        break;
700039c8:	bf00      	nop
    }

    if (ret == HAL_OK)
700039ca:	7dfb      	ldrb	r3, [r7, #23]
700039cc:	2b00      	cmp	r3, #0
700039ce:	d10b      	bne.n	700039e8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
700039d0:	4b04      	ldr	r3, [pc, #16]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700039d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
700039d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
700039d8:	687b      	ldr	r3, [r7, #4]
700039da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
700039dc:	4901      	ldr	r1, [pc, #4]	@ (700039e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700039de:	4313      	orrs	r3, r2
700039e0:	650b      	str	r3, [r1, #80]	@ 0x50
700039e2:	e003      	b.n	700039ec <HAL_RCCEx_PeriphCLKConfig+0x4c4>
700039e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
700039e8:	7dfb      	ldrb	r3, [r7, #23]
700039ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1_I3C1) == RCC_PERIPHCLK_I2C1_I3C1)
700039ec:	687b      	ldr	r3, [r7, #4]
700039ee:	681b      	ldr	r3, [r3, #0]
700039f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
700039f4:	2b00      	cmp	r3, #0
700039f6:	d02c      	beq.n	70003a52 <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1_I3C1CLKSOURCE(PeriphClkInit->I2c1_I3c1ClockSelection));

    switch (PeriphClkInit->I2c1_I3c1ClockSelection)
700039f8:	687b      	ldr	r3, [r7, #4]
700039fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700039fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
70003a00:	d017      	beq.n	70003a32 <HAL_RCCEx_PeriphCLKConfig+0x50a>
70003a02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
70003a06:	d811      	bhi.n	70003a2c <HAL_RCCEx_PeriphCLKConfig+0x504>
70003a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
70003a0c:	d011      	beq.n	70003a32 <HAL_RCCEx_PeriphCLKConfig+0x50a>
70003a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
70003a12:	d80b      	bhi.n	70003a2c <HAL_RCCEx_PeriphCLKConfig+0x504>
70003a14:	2b00      	cmp	r3, #0
70003a16:	d00c      	beq.n	70003a32 <HAL_RCCEx_PeriphCLKConfig+0x50a>
70003a18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
70003a1c:	d106      	bne.n	70003a2c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_I2C1_I3C1CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C1/I3C1*/
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70003a1e:	4b97      	ldr	r3, [pc, #604]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003a22:	4a96      	ldr	r2, [pc, #600]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003a24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70003a28:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;
70003a2a:	e003      	b.n	70003a34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_I2C1_I3C1CLKSOURCE_CSI:     /* CSI is used as clock source for I2C1/I3C1*/
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003a2c:	2301      	movs	r3, #1
70003a2e:	75fb      	strb	r3, [r7, #23]
        break;
70003a30:	e000      	b.n	70003a34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
70003a32:	bf00      	nop
    }

    if (ret == HAL_OK)
70003a34:	7dfb      	ldrb	r3, [r7, #23]
70003a36:	2b00      	cmp	r3, #0
70003a38:	d109      	bne.n	70003a4e <HAL_RCCEx_PeriphCLKConfig+0x526>
    {
      /* Set the source of I2C1/I3C1 clock*/
      __HAL_RCC_I2C1_I3C1_CONFIG(PeriphClkInit->I2c1_I3c1ClockSelection);
70003a3a:	4b90      	ldr	r3, [pc, #576]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70003a3e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
70003a42:	687b      	ldr	r3, [r7, #4]
70003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003a46:	498d      	ldr	r1, [pc, #564]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003a48:	4313      	orrs	r3, r2
70003a4a:	650b      	str	r3, [r1, #80]	@ 0x50
70003a4c:	e001      	b.n	70003a52 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003a4e:	7dfb      	ldrb	r3, [r7, #23]
70003a50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C2/I2C3 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C23) == RCC_PERIPHCLK_I2C23)
70003a52:	687b      	ldr	r3, [r7, #4]
70003a54:	681b      	ldr	r3, [r3, #0]
70003a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
70003a5a:	2b00      	cmp	r3, #0
70003a5c:	d02c      	beq.n	70003ab8 <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C23CLKSOURCE(PeriphClkInit->I2c23ClockSelection));

    switch (PeriphClkInit->I2c23ClockSelection)
70003a5e:	687b      	ldr	r3, [r7, #4]
70003a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70003a62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
70003a66:	d017      	beq.n	70003a98 <HAL_RCCEx_PeriphCLKConfig+0x570>
70003a68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
70003a6c:	d811      	bhi.n	70003a92 <HAL_RCCEx_PeriphCLKConfig+0x56a>
70003a6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
70003a72:	d011      	beq.n	70003a98 <HAL_RCCEx_PeriphCLKConfig+0x570>
70003a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
70003a78:	d80b      	bhi.n	70003a92 <HAL_RCCEx_PeriphCLKConfig+0x56a>
70003a7a:	2b00      	cmp	r3, #0
70003a7c:	d00c      	beq.n	70003a98 <HAL_RCCEx_PeriphCLKConfig+0x570>
70003a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
70003a82:	d106      	bne.n	70003a92 <HAL_RCCEx_PeriphCLKConfig+0x56a>
    {
      case RCC_I2C23CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C2/I2C3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70003a84:	4b7d      	ldr	r3, [pc, #500]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003a88:	4a7c      	ldr	r2, [pc, #496]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003a8a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70003a8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;
70003a90:	e003      	b.n	70003a9a <HAL_RCCEx_PeriphCLKConfig+0x572>
      case RCC_I2C23CLKSOURCE_CSI:     /* CSI is used as clock source for I2C2/I2C3 */
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003a92:	2301      	movs	r3, #1
70003a94:	75fb      	strb	r3, [r7, #23]
        break;
70003a96:	e000      	b.n	70003a9a <HAL_RCCEx_PeriphCLKConfig+0x572>
        break;
70003a98:	bf00      	nop
    }

    if (ret == HAL_OK)
70003a9a:	7dfb      	ldrb	r3, [r7, #23]
70003a9c:	2b00      	cmp	r3, #0
70003a9e:	d109      	bne.n	70003ab4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Set the source of I2C2/I2C3 clock*/
      __HAL_RCC_I2C23_CONFIG(PeriphClkInit->I2c23ClockSelection);
70003aa0:	4b76      	ldr	r3, [pc, #472]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70003aa4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
70003aa8:	687b      	ldr	r3, [r7, #4]
70003aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70003aac:	4973      	ldr	r1, [pc, #460]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003aae:	4313      	orrs	r3, r2
70003ab0:	650b      	str	r3, [r1, #80]	@ 0x50
70003ab2:	e001      	b.n	70003ab8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003ab4:	7dfb      	ldrb	r3, [r7, #23]
70003ab6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
70003ab8:	687b      	ldr	r3, [r7, #4]
70003aba:	681b      	ldr	r3, [r3, #0]
70003abc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
70003ac0:	2b00      	cmp	r3, #0
70003ac2:	d045      	beq.n	70003b50 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
70003ac4:	687b      	ldr	r3, [r7, #4]
70003ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
70003ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
70003acc:	d02a      	beq.n	70003b24 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
70003ace:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
70003ad2:	d824      	bhi.n	70003b1e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
70003ad4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
70003ad8:	d026      	beq.n	70003b28 <HAL_RCCEx_PeriphCLKConfig+0x600>
70003ada:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
70003ade:	d81e      	bhi.n	70003b1e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
70003ae0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
70003ae4:	d022      	beq.n	70003b2c <HAL_RCCEx_PeriphCLKConfig+0x604>
70003ae6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
70003aea:	d818      	bhi.n	70003b1e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
70003aec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
70003af0:	d00e      	beq.n	70003b10 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
70003af2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
70003af6:	d812      	bhi.n	70003b1e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
70003af8:	2b00      	cmp	r3, #0
70003afa:	d019      	beq.n	70003b30 <HAL_RCCEx_PeriphCLKConfig+0x608>
70003afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
70003b00:	d10d      	bne.n	70003b1e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      case RCC_LPTIM1CLKSOURCE_PCLK1: /* PCLK1 as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70003b02:	4b5e      	ldr	r3, [pc, #376]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003b06:	4a5d      	ldr	r2, [pc, #372]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70003b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
70003b0e:	e010      	b.n	70003b32 <HAL_RCCEx_PeriphCLKConfig+0x60a>

      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for LPTIM1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70003b10:	4b5a      	ldr	r3, [pc, #360]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003b14:	4a59      	ldr	r2, [pc, #356]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003b16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70003b1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
70003b1c:	e009      	b.n	70003b32 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        /* HSI, HSE, or CSI oscillator is used as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003b1e:	2301      	movs	r3, #1
70003b20:	75fb      	strb	r3, [r7, #23]
        break;
70003b22:	e006      	b.n	70003b32 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
70003b24:	bf00      	nop
70003b26:	e004      	b.n	70003b32 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
70003b28:	bf00      	nop
70003b2a:	e002      	b.n	70003b32 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
70003b2c:	bf00      	nop
70003b2e:	e000      	b.n	70003b32 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
70003b30:	bf00      	nop
    }

    if (ret == HAL_OK)
70003b32:	7dfb      	ldrb	r3, [r7, #23]
70003b34:	2b00      	cmp	r3, #0
70003b36:	d109      	bne.n	70003b4c <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
70003b38:	4b50      	ldr	r3, [pc, #320]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70003b3c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
70003b40:	687b      	ldr	r3, [r7, #4]
70003b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
70003b44:	494d      	ldr	r1, [pc, #308]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003b46:	4313      	orrs	r3, r2
70003b48:	650b      	str	r3, [r1, #80]	@ 0x50
70003b4a:	e001      	b.n	70003b50 <HAL_RCCEx_PeriphCLKConfig+0x628>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003b4c:	7dfb      	ldrb	r3, [r7, #23]
70003b4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2/LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM23) == RCC_PERIPHCLK_LPTIM23)
70003b50:	687b      	ldr	r3, [r7, #4]
70003b52:	681b      	ldr	r3, [r3, #0]
70003b54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
70003b58:	2b00      	cmp	r3, #0
70003b5a:	d045      	beq.n	70003be8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
  {
    switch (PeriphClkInit->Lptim23ClockSelection)
70003b5c:	687b      	ldr	r3, [r7, #4]
70003b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
70003b60:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
70003b64:	d02a      	beq.n	70003bbc <HAL_RCCEx_PeriphCLKConfig+0x694>
70003b66:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
70003b6a:	d824      	bhi.n	70003bb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
70003b6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
70003b70:	d026      	beq.n	70003bc0 <HAL_RCCEx_PeriphCLKConfig+0x698>
70003b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
70003b76:	d81e      	bhi.n	70003bb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
70003b78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
70003b7c:	d022      	beq.n	70003bc4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
70003b7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
70003b82:	d818      	bhi.n	70003bb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
70003b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
70003b88:	d00e      	beq.n	70003ba8 <HAL_RCCEx_PeriphCLKConfig+0x680>
70003b8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
70003b8e:	d812      	bhi.n	70003bb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
70003b90:	2b00      	cmp	r3, #0
70003b92:	d019      	beq.n	70003bc8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
70003b94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
70003b98:	d10d      	bne.n	70003bb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_LPTIM23CLKSOURCE_PCLK4: /* PCLK4 as clock source for LPTIM2/LPTIM3 */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM23CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70003b9a:	4b38      	ldr	r3, [pc, #224]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003b9e:	4a37      	ldr	r2, [pc, #220]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70003ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
70003ba6:	e010      	b.n	70003bca <HAL_RCCEx_PeriphCLKConfig+0x6a2>

      case RCC_LPTIM23CLKSOURCE_PLL3R: /* PLL3_R is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70003ba8:	4b34      	ldr	r3, [pc, #208]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003bac:	4a33      	ldr	r2, [pc, #204]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003bae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70003bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
70003bb4:	e009      	b.n	70003bca <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003bb6:	2301      	movs	r3, #1
70003bb8:	75fb      	strb	r3, [r7, #23]
        break;
70003bba:	e006      	b.n	70003bca <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
70003bbc:	bf00      	nop
70003bbe:	e004      	b.n	70003bca <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
70003bc0:	bf00      	nop
70003bc2:	e002      	b.n	70003bca <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
70003bc4:	bf00      	nop
70003bc6:	e000      	b.n	70003bca <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
70003bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
70003bca:	7dfb      	ldrb	r3, [r7, #23]
70003bcc:	2b00      	cmp	r3, #0
70003bce:	d109      	bne.n	70003be4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      /* Set the source of LPTIM2/LPTIM3 clock*/
      __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
70003bd0:	4b2a      	ldr	r3, [pc, #168]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
70003bd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
70003bd8:	687b      	ldr	r3, [r7, #4]
70003bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
70003bdc:	4927      	ldr	r1, [pc, #156]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003bde:	4313      	orrs	r3, r2
70003be0:	658b      	str	r3, [r1, #88]	@ 0x58
70003be2:	e001      	b.n	70003be8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003be4:	7dfb      	ldrb	r3, [r7, #23]
70003be6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM4/LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM45) == RCC_PERIPHCLK_LPTIM45)
70003be8:	687b      	ldr	r3, [r7, #4]
70003bea:	681b      	ldr	r3, [r3, #0]
70003bec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
70003bf0:	2b00      	cmp	r3, #0
70003bf2:	d047      	beq.n	70003c84 <HAL_RCCEx_PeriphCLKConfig+0x75c>
  {
    switch (PeriphClkInit->Lptim45ClockSelection)
70003bf4:	687b      	ldr	r3, [r7, #4]
70003bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70003bf8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
70003bfc:	d02a      	beq.n	70003c54 <HAL_RCCEx_PeriphCLKConfig+0x72c>
70003bfe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
70003c02:	d824      	bhi.n	70003c4e <HAL_RCCEx_PeriphCLKConfig+0x726>
70003c04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
70003c08:	d026      	beq.n	70003c58 <HAL_RCCEx_PeriphCLKConfig+0x730>
70003c0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
70003c0e:	d81e      	bhi.n	70003c4e <HAL_RCCEx_PeriphCLKConfig+0x726>
70003c10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
70003c14:	d022      	beq.n	70003c5c <HAL_RCCEx_PeriphCLKConfig+0x734>
70003c16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
70003c1a:	d818      	bhi.n	70003c4e <HAL_RCCEx_PeriphCLKConfig+0x726>
70003c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
70003c20:	d00e      	beq.n	70003c40 <HAL_RCCEx_PeriphCLKConfig+0x718>
70003c22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
70003c26:	d812      	bhi.n	70003c4e <HAL_RCCEx_PeriphCLKConfig+0x726>
70003c28:	2b00      	cmp	r3, #0
70003c2a:	d019      	beq.n	70003c60 <HAL_RCCEx_PeriphCLKConfig+0x738>
70003c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
70003c30:	d10d      	bne.n	70003c4e <HAL_RCCEx_PeriphCLKConfig+0x726>
      case RCC_LPTIM45CLKSOURCE_PCLK4:  /* PCLK4 as clock source for LPTIM4/LPTIM5 */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM45CLKSOURCE_PLL2P: /* PLL2 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70003c32:	4b12      	ldr	r3, [pc, #72]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003c36:	4a11      	ldr	r2, [pc, #68]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70003c3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
70003c3e:	e010      	b.n	70003c62 <HAL_RCCEx_PeriphCLKConfig+0x73a>

      case RCC_LPTIM45CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70003c40:	4b0e      	ldr	r3, [pc, #56]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003c44:	4a0d      	ldr	r2, [pc, #52]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003c46:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70003c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
70003c4c:	e009      	b.n	70003c62 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM4/LPTIM5 clock */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003c4e:	2301      	movs	r3, #1
70003c50:	75fb      	strb	r3, [r7, #23]
        break;
70003c52:	e006      	b.n	70003c62 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
70003c54:	bf00      	nop
70003c56:	e004      	b.n	70003c62 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
70003c58:	bf00      	nop
70003c5a:	e002      	b.n	70003c62 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
70003c5c:	bf00      	nop
70003c5e:	e000      	b.n	70003c62 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
70003c60:	bf00      	nop
    }

    if (ret == HAL_OK)
70003c62:	7dfb      	ldrb	r3, [r7, #23]
70003c64:	2b00      	cmp	r3, #0
70003c66:	d10b      	bne.n	70003c80 <HAL_RCCEx_PeriphCLKConfig+0x758>
    {
      /* Set the source of LPTIM4/LPTIM5 clock */
      __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
70003c68:	4b04      	ldr	r3, [pc, #16]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
70003c6c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
70003c70:	687b      	ldr	r3, [r7, #4]
70003c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70003c74:	4901      	ldr	r1, [pc, #4]	@ (70003c7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70003c76:	4313      	orrs	r3, r2
70003c78:	658b      	str	r3, [r1, #88]	@ 0x58
70003c7a:	e003      	b.n	70003c84 <HAL_RCCEx_PeriphCLKConfig+0x75c>
70003c7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
70003c80:	7dfb      	ldrb	r3, [r7, #23]
70003c82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
70003c84:	687b      	ldr	r3, [r7, #4]
70003c86:	681b      	ldr	r3, [r3, #0]
70003c88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
70003c8c:	2b00      	cmp	r3, #0
70003c8e:	d034      	beq.n	70003cfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    switch (PeriphClkInit->Lpuart1ClockSelection)
70003c90:	687b      	ldr	r3, [r7, #4]
70003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70003c94:	2b05      	cmp	r3, #5
70003c96:	d81d      	bhi.n	70003cd4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
70003c98:	a201      	add	r2, pc, #4	@ (adr r2, 70003ca0 <HAL_RCCEx_PeriphCLKConfig+0x778>)
70003c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70003c9e:	bf00      	nop
70003ca0:	70003cdb 	.word	0x70003cdb
70003ca4:	70003cb9 	.word	0x70003cb9
70003ca8:	70003cc7 	.word	0x70003cc7
70003cac:	70003cdb 	.word	0x70003cdb
70003cb0:	70003cdb 	.word	0x70003cdb
70003cb4:	70003cdb 	.word	0x70003cdb
      case RCC_LPUART1CLKSOURCE_PCLK4: /* PCLK4 selected as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
70003cb8:	4b91      	ldr	r3, [pc, #580]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003cbc:	4a90      	ldr	r2, [pc, #576]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
70003cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
70003cc4:	e00a      	b.n	70003cdc <HAL_RCCEx_PeriphCLKConfig+0x7b4>

      case RCC_LPUART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
70003cc6:	4b8e      	ldr	r3, [pc, #568]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003cca:	4a8d      	ldr	r2, [pc, #564]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70003cd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
70003cd2:	e003      	b.n	70003cdc <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003cd4:	2301      	movs	r3, #1
70003cd6:	75fb      	strb	r3, [r7, #23]
        break;
70003cd8:	e000      	b.n	70003cdc <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        break;
70003cda:	bf00      	nop
    }

    if (ret == HAL_OK)
70003cdc:	7dfb      	ldrb	r3, [r7, #23]
70003cde:	2b00      	cmp	r3, #0
70003ce0:	d109      	bne.n	70003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
70003ce2:	4b87      	ldr	r3, [pc, #540]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
70003ce6:	f023 0207 	bic.w	r2, r3, #7
70003cea:	687b      	ldr	r3, [r7, #4]
70003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70003cee:	4984      	ldr	r1, [pc, #528]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003cf0:	4313      	orrs	r3, r2
70003cf2:	658b      	str	r3, [r1, #88]	@ 0x58
70003cf4:	e001      	b.n	70003cfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003cf6:	7dfb      	ldrb	r3, [r7, #23]
70003cf8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
70003cfa:	687b      	ldr	r3, [r7, #4]
70003cfc:	681b      	ldr	r3, [r3, #0]
70003cfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
70003d02:	2b00      	cmp	r3, #0
70003d04:	d005      	beq.n	70003d12 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
  {
    /* LTDC internally connected to PLL3_R output clock */
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70003d06:	4b7e      	ldr	r3, [pc, #504]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003d0a:	4a7d      	ldr	r2, [pc, #500]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003d0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70003d10:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
70003d12:	687b      	ldr	r3, [r7, #4]
70003d14:	681b      	ldr	r3, [r3, #0]
70003d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
70003d1a:	2b00      	cmp	r3, #0
70003d1c:	d021      	beq.n	70003d62 <HAL_RCCEx_PeriphCLKConfig+0x83a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    switch (PeriphClkInit->PssiClockSelection)
70003d1e:	687b      	ldr	r3, [r7, #4]
70003d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
70003d22:	2b00      	cmp	r3, #0
70003d24:	d003      	beq.n	70003d2e <HAL_RCCEx_PeriphCLKConfig+0x806>
70003d26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
70003d2a:	d00a      	beq.n	70003d42 <HAL_RCCEx_PeriphCLKConfig+0x81a>
70003d2c:	e006      	b.n	70003d3c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      case RCC_PSSICLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for PSSI */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70003d2e:	4b74      	ldr	r3, [pc, #464]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003d32:	4a73      	ldr	r2, [pc, #460]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003d34:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70003d38:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* PSSI clock source configuration done later after clock selection check */
        break;
70003d3a:	e003      	b.n	70003d44 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        /* HSI, HSE, or CSI oscillator is used as source of PSSI clock */
        /* PSSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003d3c:	2301      	movs	r3, #1
70003d3e:	75fb      	strb	r3, [r7, #23]
        break;
70003d40:	e000      	b.n	70003d44 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
70003d42:	bf00      	nop
    }

    if (ret == HAL_OK)
70003d44:	7dfb      	ldrb	r3, [r7, #23]
70003d46:	2b00      	cmp	r3, #0
70003d48:	d109      	bne.n	70003d5e <HAL_RCCEx_PeriphCLKConfig+0x836>
    {
      /* Set the source of PSSI clock*/
      __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
70003d4a:	4b6d      	ldr	r3, [pc, #436]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70003d4e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
70003d52:	687b      	ldr	r3, [r7, #4]
70003d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
70003d56:	496a      	ldr	r1, [pc, #424]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003d58:	4313      	orrs	r3, r2
70003d5a:	64cb      	str	r3, [r1, #76]	@ 0x4c
70003d5c:	e001      	b.n	70003d62 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003d5e:	7dfb      	ldrb	r3, [r7, #23]
70003d60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
70003d62:	687b      	ldr	r3, [r7, #4]
70003d64:	681b      	ldr	r3, [r3, #0]
70003d66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
70003d6a:	2b00      	cmp	r3, #0
70003d6c:	d043      	beq.n	70003df6 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
70003d6e:	687b      	ldr	r3, [r7, #4]
70003d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70003d72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
70003d76:	d02c      	beq.n	70003dd2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
70003d78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
70003d7c:	d826      	bhi.n	70003dcc <HAL_RCCEx_PeriphCLKConfig+0x8a4>
70003d7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
70003d82:	d028      	beq.n	70003dd6 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
70003d84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
70003d88:	d820      	bhi.n	70003dcc <HAL_RCCEx_PeriphCLKConfig+0x8a4>
70003d8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
70003d8e:	d016      	beq.n	70003dbe <HAL_RCCEx_PeriphCLKConfig+0x896>
70003d90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
70003d94:	d81a      	bhi.n	70003dcc <HAL_RCCEx_PeriphCLKConfig+0x8a4>
70003d96:	2b00      	cmp	r3, #0
70003d98:	d003      	beq.n	70003da2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
70003d9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
70003d9e:	d007      	beq.n	70003db0 <HAL_RCCEx_PeriphCLKConfig+0x888>
70003da0:	e014      	b.n	70003dcc <HAL_RCCEx_PeriphCLKConfig+0x8a4>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI1 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
70003da2:	4b57      	ldr	r3, [pc, #348]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003da6:	4a56      	ldr	r2, [pc, #344]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003da8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
70003dac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
70003dae:	e013      	b.n	70003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70003db0:	4b53      	ldr	r3, [pc, #332]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003db4:	4a52      	ldr	r2, [pc, #328]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003db6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70003dba:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
70003dbc:	e00c      	b.n	70003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
70003dbe:	4b50      	ldr	r3, [pc, #320]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003dc2:	4a4f      	ldr	r2, [pc, #316]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003dc4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
70003dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
70003dca:	e005      	b.n	70003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003dcc:	2301      	movs	r3, #1
70003dce:	75fb      	strb	r3, [r7, #23]
        break;
70003dd0:	e002      	b.n	70003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
70003dd2:	bf00      	nop
70003dd4:	e000      	b.n	70003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
70003dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
70003dd8:	7dfb      	ldrb	r3, [r7, #23]
70003dda:	2b00      	cmp	r3, #0
70003ddc:	d109      	bne.n	70003df2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
70003dde:	4b48      	ldr	r3, [pc, #288]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70003de2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
70003de6:	687b      	ldr	r3, [r7, #4]
70003de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70003dea:	4945      	ldr	r1, [pc, #276]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003dec:	4313      	orrs	r3, r2
70003dee:	654b      	str	r3, [r1, #84]	@ 0x54
70003df0:	e001      	b.n	70003df6 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003df2:	7dfb      	ldrb	r3, [r7, #23]
70003df4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
70003df6:	687b      	ldr	r3, [r7, #4]
70003df8:	681b      	ldr	r3, [r3, #0]
70003dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
70003dfe:	2b00      	cmp	r3, #0
70003e00:	d04b      	beq.n	70003e9a <HAL_RCCEx_PeriphCLKConfig+0x972>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
70003e02:	687b      	ldr	r3, [r7, #4]
70003e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70003e06:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
70003e0a:	d032      	beq.n	70003e72 <HAL_RCCEx_PeriphCLKConfig+0x94a>
70003e0c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
70003e10:	d82c      	bhi.n	70003e6c <HAL_RCCEx_PeriphCLKConfig+0x944>
70003e12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
70003e16:	d02e      	beq.n	70003e76 <HAL_RCCEx_PeriphCLKConfig+0x94e>
70003e18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
70003e1c:	d826      	bhi.n	70003e6c <HAL_RCCEx_PeriphCLKConfig+0x944>
70003e1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
70003e22:	d02a      	beq.n	70003e7a <HAL_RCCEx_PeriphCLKConfig+0x952>
70003e24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
70003e28:	d820      	bhi.n	70003e6c <HAL_RCCEx_PeriphCLKConfig+0x944>
70003e2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
70003e2e:	d016      	beq.n	70003e5e <HAL_RCCEx_PeriphCLKConfig+0x936>
70003e30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
70003e34:	d81a      	bhi.n	70003e6c <HAL_RCCEx_PeriphCLKConfig+0x944>
70003e36:	2b00      	cmp	r3, #0
70003e38:	d003      	beq.n	70003e42 <HAL_RCCEx_PeriphCLKConfig+0x91a>
70003e3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
70003e3e:	d007      	beq.n	70003e50 <HAL_RCCEx_PeriphCLKConfig+0x928>
70003e40:	e014      	b.n	70003e6c <HAL_RCCEx_PeriphCLKConfig+0x944>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI2 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
70003e42:	4b2f      	ldr	r3, [pc, #188]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003e46:	4a2e      	ldr	r2, [pc, #184]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003e48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
70003e4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
70003e4e:	e015      	b.n	70003e7c <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70003e50:	4b2b      	ldr	r3, [pc, #172]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003e54:	4a2a      	ldr	r2, [pc, #168]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70003e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
70003e5c:	e00e      	b.n	70003e7c <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI2 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
70003e5e:	4b28      	ldr	r3, [pc, #160]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003e62:	4a27      	ldr	r2, [pc, #156]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003e64:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
70003e68:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
70003e6a:	e007      	b.n	70003e7c <HAL_RCCEx_PeriphCLKConfig+0x954>
      case RCC_SAI2CLKSOURCE_SPDIF: /* SPDIF clock is used as source of SAI2 clock */
        /* SAI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003e6c:	2301      	movs	r3, #1
70003e6e:	75fb      	strb	r3, [r7, #23]
        break;
70003e70:	e004      	b.n	70003e7c <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
70003e72:	bf00      	nop
70003e74:	e002      	b.n	70003e7c <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
70003e76:	bf00      	nop
70003e78:	e000      	b.n	70003e7c <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
70003e7a:	bf00      	nop
    }

    if (ret == HAL_OK)
70003e7c:	7dfb      	ldrb	r3, [r7, #23]
70003e7e:	2b00      	cmp	r3, #0
70003e80:	d109      	bne.n	70003e96 <HAL_RCCEx_PeriphCLKConfig+0x96e>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
70003e82:	4b1f      	ldr	r3, [pc, #124]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70003e86:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
70003e8a:	687b      	ldr	r3, [r7, #4]
70003e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70003e8e:	491c      	ldr	r1, [pc, #112]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003e90:	4313      	orrs	r3, r2
70003e92:	654b      	str	r3, [r1, #84]	@ 0x54
70003e94:	e001      	b.n	70003e9a <HAL_RCCEx_PeriphCLKConfig+0x972>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003e96:	7dfb      	ldrb	r3, [r7, #23]
70003e98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPDIFRX configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
70003e9a:	687b      	ldr	r3, [r7, #4]
70003e9c:	681b      	ldr	r3, [r3, #0]
70003e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
70003ea2:	2b00      	cmp	r3, #0
70003ea4:	d03e      	beq.n	70003f24 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
70003ea6:	687b      	ldr	r3, [r7, #4]
70003ea8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
70003eaa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
70003eae:	d029      	beq.n	70003f04 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
70003eb0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
70003eb4:	d820      	bhi.n	70003ef8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
70003eb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
70003eba:	d016      	beq.n	70003eea <HAL_RCCEx_PeriphCLKConfig+0x9c2>
70003ebc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
70003ec0:	d81a      	bhi.n	70003ef8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
70003ec2:	2b00      	cmp	r3, #0
70003ec4:	d003      	beq.n	70003ece <HAL_RCCEx_PeriphCLKConfig+0x9a6>
70003ec6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
70003eca:	d007      	beq.n	70003edc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
70003ecc:	e014      	b.n	70003ef8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for SPDIFRX */
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
70003ece:	4b0c      	ldr	r3, [pc, #48]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003ed2:	4a0b      	ldr	r2, [pc, #44]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
70003ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
70003eda:	e014      	b.n	70003f06 <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL2R: /* PLL2_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
70003edc:	4b08      	ldr	r3, [pc, #32]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003ee0:	4a07      	ldr	r2, [pc, #28]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003ee2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
70003ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
70003ee8:	e00d      	b.n	70003f06 <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70003eea:	4b05      	ldr	r3, [pc, #20]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003eee:	4a04      	ldr	r2, [pc, #16]	@ (70003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70003ef0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70003ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
70003ef6:	e006      	b.n	70003f06 <HAL_RCCEx_PeriphCLKConfig+0x9de>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003ef8:	2301      	movs	r3, #1
70003efa:	75fb      	strb	r3, [r7, #23]
        break;
70003efc:	e003      	b.n	70003f06 <HAL_RCCEx_PeriphCLKConfig+0x9de>
70003efe:	bf00      	nop
70003f00:	58024400 	.word	0x58024400
        break;
70003f04:	bf00      	nop
    }

    if (ret == HAL_OK)
70003f06:	7dfb      	ldrb	r3, [r7, #23]
70003f08:	2b00      	cmp	r3, #0
70003f0a:	d109      	bne.n	70003f20 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
    {
      /* Set the source of SPDIFRX clock */
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
70003f0c:	4b8e      	ldr	r3, [pc, #568]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70003f10:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
70003f14:	687b      	ldr	r3, [r7, #4]
70003f16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
70003f18:	498b      	ldr	r1, [pc, #556]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003f1a:	4313      	orrs	r3, r2
70003f1c:	650b      	str	r3, [r1, #80]	@ 0x50
70003f1e:	e001      	b.n	70003f24 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003f20:	7dfb      	ldrb	r3, [r7, #23]
70003f22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
70003f24:	687b      	ldr	r3, [r7, #4]
70003f26:	681b      	ldr	r3, [r3, #0]
70003f28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
70003f2c:	2b00      	cmp	r3, #0
70003f2e:	d043      	beq.n	70003fb8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
70003f30:	687b      	ldr	r3, [r7, #4]
70003f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
70003f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
70003f38:	d02c      	beq.n	70003f94 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
70003f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
70003f3e:	d826      	bhi.n	70003f8e <HAL_RCCEx_PeriphCLKConfig+0xa66>
70003f40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
70003f44:	d028      	beq.n	70003f98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
70003f46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
70003f4a:	d820      	bhi.n	70003f8e <HAL_RCCEx_PeriphCLKConfig+0xa66>
70003f4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
70003f50:	d016      	beq.n	70003f80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
70003f52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
70003f56:	d81a      	bhi.n	70003f8e <HAL_RCCEx_PeriphCLKConfig+0xa66>
70003f58:	2b00      	cmp	r3, #0
70003f5a:	d003      	beq.n	70003f64 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
70003f5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
70003f60:	d007      	beq.n	70003f72 <HAL_RCCEx_PeriphCLKConfig+0xa4a>
70003f62:	e014      	b.n	70003f8e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI1 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
70003f64:	4b78      	ldr	r3, [pc, #480]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003f68:	4a77      	ldr	r2, [pc, #476]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003f6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
70003f6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
70003f70:	e013      	b.n	70003f9a <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70003f72:	4b75      	ldr	r3, [pc, #468]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003f76:	4a74      	ldr	r2, [pc, #464]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70003f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
70003f7e:	e00c      	b.n	70003f9a <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
70003f80:	4b71      	ldr	r3, [pc, #452]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003f84:	4a70      	ldr	r2, [pc, #448]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003f86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
70003f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
70003f8c:	e005      	b.n	70003f9a <HAL_RCCEx_PeriphCLKConfig+0xa72>
      case RCC_SPI1CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70003f8e:	2301      	movs	r3, #1
70003f90:	75fb      	strb	r3, [r7, #23]
        break;
70003f92:	e002      	b.n	70003f9a <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
70003f94:	bf00      	nop
70003f96:	e000      	b.n	70003f9a <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
70003f98:	bf00      	nop
    }

    if (ret == HAL_OK)
70003f9a:	7dfb      	ldrb	r3, [r7, #23]
70003f9c:	2b00      	cmp	r3, #0
70003f9e:	d109      	bne.n	70003fb4 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
      /* Set the source of SPI1 clock*/
      __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
70003fa0:	4b69      	ldr	r3, [pc, #420]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70003fa4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
70003fa8:	687b      	ldr	r3, [r7, #4]
70003faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
70003fac:	4966      	ldr	r1, [pc, #408]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003fae:	4313      	orrs	r3, r2
70003fb0:	654b      	str	r3, [r1, #84]	@ 0x54
70003fb2:	e001      	b.n	70003fb8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    }
    else
    {
      /* set overall return value */
      status = ret;
70003fb4:	7dfb      	ldrb	r3, [r7, #23]
70003fb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI2/SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI23) == RCC_PERIPHCLK_SPI23)
70003fb8:	687b      	ldr	r3, [r7, #4]
70003fba:	681b      	ldr	r3, [r3, #0]
70003fbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
70003fc0:	2b00      	cmp	r3, #0
70003fc2:	d03c      	beq.n	7000403e <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
70003fc4:	687b      	ldr	r3, [r7, #4]
70003fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
70003fc8:	2b40      	cmp	r3, #64	@ 0x40
70003fca:	d026      	beq.n	7000401a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
70003fcc:	2b40      	cmp	r3, #64	@ 0x40
70003fce:	d821      	bhi.n	70004014 <HAL_RCCEx_PeriphCLKConfig+0xaec>
70003fd0:	2b30      	cmp	r3, #48	@ 0x30
70003fd2:	d024      	beq.n	7000401e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
70003fd4:	2b30      	cmp	r3, #48	@ 0x30
70003fd6:	d81d      	bhi.n	70004014 <HAL_RCCEx_PeriphCLKConfig+0xaec>
70003fd8:	2b20      	cmp	r3, #32
70003fda:	d014      	beq.n	70004006 <HAL_RCCEx_PeriphCLKConfig+0xade>
70003fdc:	2b20      	cmp	r3, #32
70003fde:	d819      	bhi.n	70004014 <HAL_RCCEx_PeriphCLKConfig+0xaec>
70003fe0:	2b00      	cmp	r3, #0
70003fe2:	d002      	beq.n	70003fea <HAL_RCCEx_PeriphCLKConfig+0xac2>
70003fe4:	2b10      	cmp	r3, #16
70003fe6:	d007      	beq.n	70003ff8 <HAL_RCCEx_PeriphCLKConfig+0xad0>
70003fe8:	e014      	b.n	70004014 <HAL_RCCEx_PeriphCLKConfig+0xaec>
    {
      case RCC_SPI23CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI2/SPI3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
70003fea:	4b57      	ldr	r3, [pc, #348]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003fee:	4a56      	ldr	r2, [pc, #344]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
70003ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
70003ff6:	e013      	b.n	70004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70003ff8:	4b53      	ldr	r3, [pc, #332]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003ffc:	4a52      	ldr	r2, [pc, #328]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70003ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70004002:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
70004004:	e00c      	b.n	70004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
70004006:	4b50      	ldr	r3, [pc, #320]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000400a:	4a4f      	ldr	r2, [pc, #316]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
7000400c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
70004010:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
70004012:	e005      	b.n	70004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
      case RCC_SPI23CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI2/SPI3 clock */
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004014:	2301      	movs	r3, #1
70004016:	75fb      	strb	r3, [r7, #23]
        break;
70004018:	e002      	b.n	70004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
7000401a:	bf00      	nop
7000401c:	e000      	b.n	70004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
7000401e:	bf00      	nop
    }

    if (ret == HAL_OK)
70004020:	7dfb      	ldrb	r3, [r7, #23]
70004022:	2b00      	cmp	r3, #0
70004024:	d109      	bne.n	7000403a <HAL_RCCEx_PeriphCLKConfig+0xb12>
    {
      /* Set the source of SPI2/SPI3 clock*/
      __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
70004026:	4b48      	ldr	r3, [pc, #288]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
7000402a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
7000402e:	687b      	ldr	r3, [r7, #4]
70004030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
70004032:	4945      	ldr	r1, [pc, #276]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004034:	4313      	orrs	r3, r2
70004036:	650b      	str	r3, [r1, #80]	@ 0x50
70004038:	e001      	b.n	7000403e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
7000403a:	7dfb      	ldrb	r3, [r7, #23]
7000403c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
7000403e:	687b      	ldr	r3, [r7, #4]
70004040:	681b      	ldr	r3, [r3, #0]
70004042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
70004046:	2b00      	cmp	r3, #0
70004048:	d03c      	beq.n	700040c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    switch (PeriphClkInit->Spi45ClockSelection)
7000404a:	687b      	ldr	r3, [r7, #4]
7000404c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
7000404e:	2b50      	cmp	r3, #80	@ 0x50
70004050:	d022      	beq.n	70004098 <HAL_RCCEx_PeriphCLKConfig+0xb70>
70004052:	2b50      	cmp	r3, #80	@ 0x50
70004054:	d81d      	bhi.n	70004092 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
70004056:	2b40      	cmp	r3, #64	@ 0x40
70004058:	d020      	beq.n	7000409c <HAL_RCCEx_PeriphCLKConfig+0xb74>
7000405a:	2b40      	cmp	r3, #64	@ 0x40
7000405c:	d819      	bhi.n	70004092 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
7000405e:	2b30      	cmp	r3, #48	@ 0x30
70004060:	d01e      	beq.n	700040a0 <HAL_RCCEx_PeriphCLKConfig+0xb78>
70004062:	2b30      	cmp	r3, #48	@ 0x30
70004064:	d815      	bhi.n	70004092 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
70004066:	2b20      	cmp	r3, #32
70004068:	d00c      	beq.n	70004084 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
7000406a:	2b20      	cmp	r3, #32
7000406c:	d811      	bhi.n	70004092 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
7000406e:	2b00      	cmp	r3, #0
70004070:	d018      	beq.n	700040a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
70004072:	2b10      	cmp	r3, #16
70004074:	d10d      	bne.n	70004092 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
      case RCC_SPI45CLKSOURCE_PCLK2:  /* PCLK2 as clock source for SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
70004076:	4b34      	ldr	r3, [pc, #208]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000407a:	4a33      	ldr	r2, [pc, #204]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
7000407c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
70004080:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
70004082:	e010      	b.n	700040a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_SPI45CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
70004084:	4b30      	ldr	r3, [pc, #192]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004088:	4a2f      	ldr	r2, [pc, #188]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
7000408a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
7000408e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
70004090:	e009      	b.n	700040a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
      case RCC_SPI45CLKSOURCE_HSE: /* HSE oscillator clock is used as source of SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004092:	2301      	movs	r3, #1
70004094:	75fb      	strb	r3, [r7, #23]
        break;
70004096:	e006      	b.n	700040a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
70004098:	bf00      	nop
7000409a:	e004      	b.n	700040a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
7000409c:	bf00      	nop
7000409e:	e002      	b.n	700040a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
700040a0:	bf00      	nop
700040a2:	e000      	b.n	700040a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
700040a4:	bf00      	nop
    }

    if (ret == HAL_OK)
700040a6:	7dfb      	ldrb	r3, [r7, #23]
700040a8:	2b00      	cmp	r3, #0
700040aa:	d109      	bne.n	700040c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of SPI4/SPI5 clock */
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
700040ac:	4b26      	ldr	r3, [pc, #152]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
700040ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
700040b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
700040b4:	687b      	ldr	r3, [r7, #4]
700040b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
700040b8:	4923      	ldr	r1, [pc, #140]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
700040ba:	4313      	orrs	r3, r2
700040bc:	654b      	str	r3, [r1, #84]	@ 0x54
700040be:	e001      	b.n	700040c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
700040c0:	7dfb      	ldrb	r3, [r7, #23]
700040c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
700040c4:	687b      	ldr	r3, [r7, #4]
700040c6:	681b      	ldr	r3, [r3, #0]
700040c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
700040cc:	2b00      	cmp	r3, #0
700040ce:	d03f      	beq.n	70004150 <HAL_RCCEx_PeriphCLKConfig+0xc28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
700040d0:	687b      	ldr	r3, [r7, #4]
700040d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
700040d4:	2b50      	cmp	r3, #80	@ 0x50
700040d6:	d022      	beq.n	7000411e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
700040d8:	2b50      	cmp	r3, #80	@ 0x50
700040da:	d81d      	bhi.n	70004118 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
700040dc:	2b40      	cmp	r3, #64	@ 0x40
700040de:	d020      	beq.n	70004122 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
700040e0:	2b40      	cmp	r3, #64	@ 0x40
700040e2:	d819      	bhi.n	70004118 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
700040e4:	2b30      	cmp	r3, #48	@ 0x30
700040e6:	d01e      	beq.n	70004126 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
700040e8:	2b30      	cmp	r3, #48	@ 0x30
700040ea:	d815      	bhi.n	70004118 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
700040ec:	2b20      	cmp	r3, #32
700040ee:	d00c      	beq.n	7000410a <HAL_RCCEx_PeriphCLKConfig+0xbe2>
700040f0:	2b20      	cmp	r3, #32
700040f2:	d811      	bhi.n	70004118 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
700040f4:	2b00      	cmp	r3, #0
700040f6:	d018      	beq.n	7000412a <HAL_RCCEx_PeriphCLKConfig+0xc02>
700040f8:	2b10      	cmp	r3, #16
700040fa:	d10d      	bne.n	70004118 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
      case RCC_SPI6CLKSOURCE_PCLK4: /* PCLK4 as clock source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
700040fc:	4b12      	ldr	r3, [pc, #72]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
700040fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004100:	4a11      	ldr	r2, [pc, #68]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
70004106:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
70004108:	e010      	b.n	7000412c <HAL_RCCEx_PeriphCLKConfig+0xc04>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
7000410a:	4b0f      	ldr	r3, [pc, #60]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
7000410c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000410e:	4a0e      	ldr	r2, [pc, #56]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70004114:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
70004116:	e009      	b.n	7000412c <HAL_RCCEx_PeriphCLKConfig+0xc04>
      case RCC_SPI6CLKSOURCE_HSE: /* HSE oscillator is used as source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004118:	2301      	movs	r3, #1
7000411a:	75fb      	strb	r3, [r7, #23]
        break;
7000411c:	e006      	b.n	7000412c <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
7000411e:	bf00      	nop
70004120:	e004      	b.n	7000412c <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
70004122:	bf00      	nop
70004124:	e002      	b.n	7000412c <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
70004126:	bf00      	nop
70004128:	e000      	b.n	7000412c <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
7000412a:	bf00      	nop
    }

    if (ret == HAL_OK)
7000412c:	7dfb      	ldrb	r3, [r7, #23]
7000412e:	2b00      	cmp	r3, #0
70004130:	d10c      	bne.n	7000414c <HAL_RCCEx_PeriphCLKConfig+0xc24>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
70004132:	4b05      	ldr	r3, [pc, #20]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
70004136:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
7000413a:	687b      	ldr	r3, [r7, #4]
7000413c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
7000413e:	4902      	ldr	r1, [pc, #8]	@ (70004148 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004140:	4313      	orrs	r3, r2
70004142:	658b      	str	r3, [r1, #88]	@ 0x58
70004144:	e004      	b.n	70004150 <HAL_RCCEx_PeriphCLKConfig+0xc28>
70004146:	bf00      	nop
70004148:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
7000414c:	7dfb      	ldrb	r3, [r7, #23]
7000414e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
70004150:	687b      	ldr	r3, [r7, #4]
70004152:	681b      	ldr	r3, [r3, #0]
70004154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
70004158:	2b00      	cmp	r3, #0
7000415a:	d034      	beq.n	700041c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
7000415c:	687b      	ldr	r3, [r7, #4]
7000415e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70004160:	2b05      	cmp	r3, #5
70004162:	d81d      	bhi.n	700041a0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
70004164:	a201      	add	r2, pc, #4	@ (adr r2, 7000416c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
70004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
7000416a:	bf00      	nop
7000416c:	700041a7 	.word	0x700041a7
70004170:	70004185 	.word	0x70004185
70004174:	70004193 	.word	0x70004193
70004178:	700041a7 	.word	0x700041a7
7000417c:	700041a7 	.word	0x700041a7
70004180:	700041a7 	.word	0x700041a7
      case RCC_USART1CLKSOURCE_PCLK2: /* PCLK2 as clock source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
70004184:	4b69      	ldr	r3, [pc, #420]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004188:	4a68      	ldr	r2, [pc, #416]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
7000418a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
7000418e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
70004190:	e00a      	b.n	700041a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>

      case RCC_USART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
70004192:	4b66      	ldr	r3, [pc, #408]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004196:	4a65      	ldr	r2, [pc, #404]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
7000419c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
7000419e:	e003      	b.n	700041a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
      case RCC_USART1CLKSOURCE_LSE: /* LSE oscillator is used as source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
700041a0:	2301      	movs	r3, #1
700041a2:	75fb      	strb	r3, [r7, #23]
        break;
700041a4:	e000      	b.n	700041a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
        break;
700041a6:	bf00      	nop
    }

    if (ret == HAL_OK)
700041a8:	7dfb      	ldrb	r3, [r7, #23]
700041aa:	2b00      	cmp	r3, #0
700041ac:	d109      	bne.n	700041c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    {
      /* Set the source of USART1 clock */
      __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
700041ae:	4b5f      	ldr	r3, [pc, #380]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
700041b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
700041b2:	f023 0207 	bic.w	r2, r3, #7
700041b6:	687b      	ldr	r3, [r7, #4]
700041b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
700041ba:	495c      	ldr	r1, [pc, #368]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
700041bc:	4313      	orrs	r3, r2
700041be:	654b      	str	r3, [r1, #84]	@ 0x54
700041c0:	e001      	b.n	700041c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
700041c2:	7dfb      	ldrb	r3, [r7, #23]
700041c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------- USART2/USART3/UART4/UART5/UART7/UART8 Configuration --------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
700041c6:	687b      	ldr	r3, [r7, #4]
700041c8:	681b      	ldr	r3, [r3, #0]
700041ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
700041ce:	2b00      	cmp	r3, #0
700041d0:	d033      	beq.n	7000423a <HAL_RCCEx_PeriphCLKConfig+0xd12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART234578CLKSOURCE(PeriphClkInit->Usart234578ClockSelection));

    switch (PeriphClkInit->Usart234578ClockSelection)
700041d2:	687b      	ldr	r3, [r7, #4]
700041d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
700041d6:	2b05      	cmp	r3, #5
700041d8:	d81c      	bhi.n	70004214 <HAL_RCCEx_PeriphCLKConfig+0xcec>
700041da:	a201      	add	r2, pc, #4	@ (adr r2, 700041e0 <HAL_RCCEx_PeriphCLKConfig+0xcb8>)
700041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
700041e0:	7000421b 	.word	0x7000421b
700041e4:	700041f9 	.word	0x700041f9
700041e8:	70004207 	.word	0x70004207
700041ec:	7000421b 	.word	0x7000421b
700041f0:	7000421b 	.word	0x7000421b
700041f4:	7000421b 	.word	0x7000421b
      case RCC_USART234578CLKSOURCE_PCLK1: /* PCLK1 as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
700041f8:	4b4c      	ldr	r3, [pc, #304]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
700041fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700041fc:	4a4b      	ldr	r2, [pc, #300]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
700041fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
70004202:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
70004204:	e00a      	b.n	7000421c <HAL_RCCEx_PeriphCLKConfig+0xcf4>

      case RCC_USART234578CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
70004206:	4b49      	ldr	r3, [pc, #292]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000420a:	4a48      	ldr	r2, [pc, #288]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
7000420c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70004210:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
70004212:	e003      	b.n	7000421c <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        /* LSE,  oscillator is used as source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004214:	2301      	movs	r3, #1
70004216:	75fb      	strb	r3, [r7, #23]
        break;
70004218:	e000      	b.n	7000421c <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        break;
7000421a:	bf00      	nop
    }

    if (ret == HAL_OK)
7000421c:	7dfb      	ldrb	r3, [r7, #23]
7000421e:	2b00      	cmp	r3, #0
70004220:	d109      	bne.n	70004236 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      /* Set the source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
70004222:	4b42      	ldr	r3, [pc, #264]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70004226:	f023 0207 	bic.w	r2, r3, #7
7000422a:	687b      	ldr	r3, [r7, #4]
7000422c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000422e:	493f      	ldr	r1, [pc, #252]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004230:	4313      	orrs	r3, r2
70004232:	650b      	str	r3, [r1, #80]	@ 0x50
70004234:	e001      	b.n	7000423a <HAL_RCCEx_PeriphCLKConfig+0xd12>
    }
    else
    {
      /* set overall return value */
      status = ret;
70004236:	7dfb      	ldrb	r3, [r7, #23]
70004238:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBPHYC Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHYC) == RCC_PERIPHCLK_USBPHYC)
7000423a:	687b      	ldr	r3, [r7, #4]
7000423c:	681b      	ldr	r3, [r3, #0]
7000423e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
70004242:	2b00      	cmp	r3, #0
70004244:	d027      	beq.n	70004296 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCCLKSOURCE(PeriphClkInit->UsbPhycClockSelection));

    switch (PeriphClkInit->UsbPhycClockSelection)
70004246:	687b      	ldr	r3, [r7, #4]
70004248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000424a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
7000424e:	d008      	beq.n	70004262 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
70004250:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
70004254:	d80c      	bhi.n	70004270 <HAL_RCCEx_PeriphCLKConfig+0xd48>
70004256:	2b00      	cmp	r3, #0
70004258:	d00d      	beq.n	70004276 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
7000425a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
7000425e:	d00a      	beq.n	70004276 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
70004260:	e006      	b.n	70004270 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      case RCC_USBPHYCCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USBPHYC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
70004262:	4b32      	ldr	r3, [pc, #200]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004266:	4a31      	ldr	r2, [pc, #196]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
7000426c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USBPHYC clock source configuration done later after clock selection check */
        break;
7000426e:	e003      	b.n	70004278 <HAL_RCCEx_PeriphCLKConfig+0xd50>
      case RCC_USBPHYCCLKSOURCE_HSE_DIV2: /* HSE divided by 2 is used as clock source for USBPHYC */
        /* USBPHYC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004270:	2301      	movs	r3, #1
70004272:	75fb      	strb	r3, [r7, #23]
        break;
70004274:	e000      	b.n	70004278 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
70004276:	bf00      	nop
    }

    if (ret == HAL_OK)
70004278:	7dfb      	ldrb	r3, [r7, #23]
7000427a:	2b00      	cmp	r3, #0
7000427c:	d109      	bne.n	70004292 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBPHYC_CONFIG(PeriphClkInit->UsbPhycClockSelection);
7000427e:	4b2b      	ldr	r3, [pc, #172]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70004282:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
70004286:	687b      	ldr	r3, [r7, #4]
70004288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000428a:	4928      	ldr	r1, [pc, #160]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
7000428c:	4313      	orrs	r3, r2
7000428e:	64cb      	str	r3, [r1, #76]	@ 0x4c
70004290:	e001      	b.n	70004296 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
70004292:	7dfb      	ldrb	r3, [r7, #23]
70004294:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBOTGFS Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGFS) == RCC_PERIPHCLK_USBOTGFS)
70004296:	687b      	ldr	r3, [r7, #4]
70004298:	681b      	ldr	r3, [r3, #0]
7000429a:	2b00      	cmp	r3, #0
7000429c:	da2c      	bge.n	700042f8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGFSCLKSOURCE(PeriphClkInit->UsbOtgFsClockSelection));

    switch (PeriphClkInit->UsbOtgFsClockSelection)
7000429e:	687b      	ldr	r3, [r7, #4]
700042a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
700042a2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
700042a6:	d017      	beq.n	700042d8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
700042a8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
700042ac:	d811      	bhi.n	700042d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
700042ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
700042b2:	d011      	beq.n	700042d8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
700042b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
700042b8:	d80b      	bhi.n	700042d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
700042ba:	2b00      	cmp	r3, #0
700042bc:	d00c      	beq.n	700042d8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
700042be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
700042c2:	d106      	bne.n	700042d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      case RCC_USBOTGFSCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USB OTG FS */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
700042c4:	4b19      	ldr	r3, [pc, #100]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
700042c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700042c8:	4a18      	ldr	r2, [pc, #96]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
700042ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
700042ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;
700042d0:	e003      	b.n	700042da <HAL_RCCEx_PeriphCLKConfig+0xdb2>
      case RCC_USBOTGFSCLKSOURCE_CLK48: /* USBPHYC CLK48 is used as clock source for USB OTG FS */
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
700042d2:	2301      	movs	r3, #1
700042d4:	75fb      	strb	r3, [r7, #23]
        break;
700042d6:	e000      	b.n	700042da <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
700042d8:	bf00      	nop
    }

    if (ret == HAL_OK)
700042da:	7dfb      	ldrb	r3, [r7, #23]
700042dc:	2b00      	cmp	r3, #0
700042de:	d109      	bne.n	700042f4 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBOTGFS_CONFIG(PeriphClkInit->UsbOtgFsClockSelection);
700042e0:	4b12      	ldr	r3, [pc, #72]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
700042e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
700042e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
700042e8:	687b      	ldr	r3, [r7, #4]
700042ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
700042ec:	490f      	ldr	r1, [pc, #60]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
700042ee:	4313      	orrs	r3, r2
700042f0:	64cb      	str	r3, [r1, #76]	@ 0x4c
700042f2:	e001      	b.n	700042f8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
    }
    else
    {
      /* set overall return value */
      status = ret;
700042f4:	7dfb      	ldrb	r3, [r7, #23]
700042f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
700042f8:	687b      	ldr	r3, [r7, #4]
700042fa:	681b      	ldr	r3, [r3, #0]
700042fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
70004300:	2b00      	cmp	r3, #0
70004302:	d009      	beq.n	70004318 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
70004304:	4b09      	ldr	r3, [pc, #36]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004306:	691b      	ldr	r3, [r3, #16]
70004308:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
7000430c:	687b      	ldr	r3, [r7, #4]
7000430e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
70004312:	4906      	ldr	r1, [pc, #24]	@ (7000432c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004314:	4313      	orrs	r3, r2
70004316:	610b      	str	r3, [r1, #16]
  }

  if (status == HAL_OK)
70004318:	7dbb      	ldrb	r3, [r7, #22]
7000431a:	2b00      	cmp	r3, #0
7000431c:	d101      	bne.n	70004322 <HAL_RCCEx_PeriphCLKConfig+0xdfa>
  {
    return HAL_OK;
7000431e:	2300      	movs	r3, #0
70004320:	e000      	b.n	70004324 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  }
  return HAL_ERROR;
70004322:	2301      	movs	r3, #1
}
70004324:	4618      	mov	r0, r3
70004326:	3718      	adds	r7, #24
70004328:	46bd      	mov	sp, r7
7000432a:	bd80      	pop	{r7, pc}
7000432c:	58024400 	.word	0x58024400

70004330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
70004330:	b580      	push	{r7, lr}
70004332:	b082      	sub	sp, #8
70004334:	af00      	add	r7, sp, #0
70004336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
70004338:	687b      	ldr	r3, [r7, #4]
7000433a:	2b00      	cmp	r3, #0
7000433c:	d101      	bne.n	70004342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
7000433e:	2301      	movs	r3, #1
70004340:	e049      	b.n	700043d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
70004342:	687b      	ldr	r3, [r7, #4]
70004344:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
70004348:	b2db      	uxtb	r3, r3
7000434a:	2b00      	cmp	r3, #0
7000434c:	d106      	bne.n	7000435c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
7000434e:	687b      	ldr	r3, [r7, #4]
70004350:	2200      	movs	r2, #0
70004352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
70004356:	6878      	ldr	r0, [r7, #4]
70004358:	f000 f841 	bl	700043de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
7000435c:	687b      	ldr	r3, [r7, #4]
7000435e:	2202      	movs	r2, #2
70004360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
70004364:	687b      	ldr	r3, [r7, #4]
70004366:	681a      	ldr	r2, [r3, #0]
70004368:	687b      	ldr	r3, [r7, #4]
7000436a:	3304      	adds	r3, #4
7000436c:	4619      	mov	r1, r3
7000436e:	4610      	mov	r0, r2
70004370:	f000 fa2e 	bl	700047d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
70004374:	687b      	ldr	r3, [r7, #4]
70004376:	2201      	movs	r2, #1
70004378:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
7000437c:	687b      	ldr	r3, [r7, #4]
7000437e:	2201      	movs	r2, #1
70004380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
70004384:	687b      	ldr	r3, [r7, #4]
70004386:	2201      	movs	r2, #1
70004388:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
7000438c:	687b      	ldr	r3, [r7, #4]
7000438e:	2201      	movs	r2, #1
70004390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
70004394:	687b      	ldr	r3, [r7, #4]
70004396:	2201      	movs	r2, #1
70004398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
7000439c:	687b      	ldr	r3, [r7, #4]
7000439e:	2201      	movs	r2, #1
700043a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
700043a4:	687b      	ldr	r3, [r7, #4]
700043a6:	2201      	movs	r2, #1
700043a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
700043ac:	687b      	ldr	r3, [r7, #4]
700043ae:	2201      	movs	r2, #1
700043b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
700043b4:	687b      	ldr	r3, [r7, #4]
700043b6:	2201      	movs	r2, #1
700043b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
700043bc:	687b      	ldr	r3, [r7, #4]
700043be:	2201      	movs	r2, #1
700043c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
700043c4:	687b      	ldr	r3, [r7, #4]
700043c6:	2201      	movs	r2, #1
700043c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
700043cc:	687b      	ldr	r3, [r7, #4]
700043ce:	2201      	movs	r2, #1
700043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
700043d4:	2300      	movs	r3, #0
}
700043d6:	4618      	mov	r0, r3
700043d8:	3708      	adds	r7, #8
700043da:	46bd      	mov	sp, r7
700043dc:	bd80      	pop	{r7, pc}

700043de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
700043de:	b480      	push	{r7}
700043e0:	b083      	sub	sp, #12
700043e2:	af00      	add	r7, sp, #0
700043e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
700043e6:	bf00      	nop
700043e8:	370c      	adds	r7, #12
700043ea:	46bd      	mov	sp, r7
700043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
700043f0:	4770      	bx	lr
	...

700043f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
700043f4:	b480      	push	{r7}
700043f6:	b085      	sub	sp, #20
700043f8:	af00      	add	r7, sp, #0
700043fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
700043fc:	687b      	ldr	r3, [r7, #4]
700043fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
70004402:	b2db      	uxtb	r3, r3
70004404:	2b01      	cmp	r3, #1
70004406:	d001      	beq.n	7000440c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
70004408:	2301      	movs	r3, #1
7000440a:	e054      	b.n	700044b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
7000440c:	687b      	ldr	r3, [r7, #4]
7000440e:	2202      	movs	r2, #2
70004410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
70004414:	687b      	ldr	r3, [r7, #4]
70004416:	681b      	ldr	r3, [r3, #0]
70004418:	68da      	ldr	r2, [r3, #12]
7000441a:	687b      	ldr	r3, [r7, #4]
7000441c:	681b      	ldr	r3, [r3, #0]
7000441e:	f042 0201 	orr.w	r2, r2, #1
70004422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
70004424:	687b      	ldr	r3, [r7, #4]
70004426:	681b      	ldr	r3, [r3, #0]
70004428:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
7000442c:	d022      	beq.n	70004474 <HAL_TIM_Base_Start_IT+0x80>
7000442e:	687b      	ldr	r3, [r7, #4]
70004430:	681b      	ldr	r3, [r3, #0]
70004432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
70004436:	d01d      	beq.n	70004474 <HAL_TIM_Base_Start_IT+0x80>
70004438:	687b      	ldr	r3, [r7, #4]
7000443a:	681b      	ldr	r3, [r3, #0]
7000443c:	4a21      	ldr	r2, [pc, #132]	@ (700044c4 <HAL_TIM_Base_Start_IT+0xd0>)
7000443e:	4293      	cmp	r3, r2
70004440:	d018      	beq.n	70004474 <HAL_TIM_Base_Start_IT+0x80>
70004442:	687b      	ldr	r3, [r7, #4]
70004444:	681b      	ldr	r3, [r3, #0]
70004446:	4a20      	ldr	r2, [pc, #128]	@ (700044c8 <HAL_TIM_Base_Start_IT+0xd4>)
70004448:	4293      	cmp	r3, r2
7000444a:	d013      	beq.n	70004474 <HAL_TIM_Base_Start_IT+0x80>
7000444c:	687b      	ldr	r3, [r7, #4]
7000444e:	681b      	ldr	r3, [r3, #0]
70004450:	4a1e      	ldr	r2, [pc, #120]	@ (700044cc <HAL_TIM_Base_Start_IT+0xd8>)
70004452:	4293      	cmp	r3, r2
70004454:	d00e      	beq.n	70004474 <HAL_TIM_Base_Start_IT+0x80>
70004456:	687b      	ldr	r3, [r7, #4]
70004458:	681b      	ldr	r3, [r3, #0]
7000445a:	4a1d      	ldr	r2, [pc, #116]	@ (700044d0 <HAL_TIM_Base_Start_IT+0xdc>)
7000445c:	4293      	cmp	r3, r2
7000445e:	d009      	beq.n	70004474 <HAL_TIM_Base_Start_IT+0x80>
70004460:	687b      	ldr	r3, [r7, #4]
70004462:	681b      	ldr	r3, [r3, #0]
70004464:	4a1b      	ldr	r2, [pc, #108]	@ (700044d4 <HAL_TIM_Base_Start_IT+0xe0>)
70004466:	4293      	cmp	r3, r2
70004468:	d004      	beq.n	70004474 <HAL_TIM_Base_Start_IT+0x80>
7000446a:	687b      	ldr	r3, [r7, #4]
7000446c:	681b      	ldr	r3, [r3, #0]
7000446e:	4a1a      	ldr	r2, [pc, #104]	@ (700044d8 <HAL_TIM_Base_Start_IT+0xe4>)
70004470:	4293      	cmp	r3, r2
70004472:	d115      	bne.n	700044a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
70004474:	687b      	ldr	r3, [r7, #4]
70004476:	681b      	ldr	r3, [r3, #0]
70004478:	689a      	ldr	r2, [r3, #8]
7000447a:	4b18      	ldr	r3, [pc, #96]	@ (700044dc <HAL_TIM_Base_Start_IT+0xe8>)
7000447c:	4013      	ands	r3, r2
7000447e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
70004480:	68fb      	ldr	r3, [r7, #12]
70004482:	2b06      	cmp	r3, #6
70004484:	d015      	beq.n	700044b2 <HAL_TIM_Base_Start_IT+0xbe>
70004486:	68fb      	ldr	r3, [r7, #12]
70004488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
7000448c:	d011      	beq.n	700044b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
7000448e:	687b      	ldr	r3, [r7, #4]
70004490:	681b      	ldr	r3, [r3, #0]
70004492:	681a      	ldr	r2, [r3, #0]
70004494:	687b      	ldr	r3, [r7, #4]
70004496:	681b      	ldr	r3, [r3, #0]
70004498:	f042 0201 	orr.w	r2, r2, #1
7000449c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
7000449e:	e008      	b.n	700044b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
700044a0:	687b      	ldr	r3, [r7, #4]
700044a2:	681b      	ldr	r3, [r3, #0]
700044a4:	681a      	ldr	r2, [r3, #0]
700044a6:	687b      	ldr	r3, [r7, #4]
700044a8:	681b      	ldr	r3, [r3, #0]
700044aa:	f042 0201 	orr.w	r2, r2, #1
700044ae:	601a      	str	r2, [r3, #0]
700044b0:	e000      	b.n	700044b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
700044b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
700044b4:	2300      	movs	r3, #0
}
700044b6:	4618      	mov	r0, r3
700044b8:	3714      	adds	r7, #20
700044ba:	46bd      	mov	sp, r7
700044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
700044c0:	4770      	bx	lr
700044c2:	bf00      	nop
700044c4:	40000400 	.word	0x40000400
700044c8:	40000800 	.word	0x40000800
700044cc:	40000c00 	.word	0x40000c00
700044d0:	42004c00 	.word	0x42004c00
700044d4:	40001800 	.word	0x40001800
700044d8:	42004000 	.word	0x42004000
700044dc:	00010007 	.word	0x00010007

700044e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
700044e0:	b580      	push	{r7, lr}
700044e2:	b084      	sub	sp, #16
700044e4:	af00      	add	r7, sp, #0
700044e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
700044e8:	687b      	ldr	r3, [r7, #4]
700044ea:	681b      	ldr	r3, [r3, #0]
700044ec:	68db      	ldr	r3, [r3, #12]
700044ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
700044f0:	687b      	ldr	r3, [r7, #4]
700044f2:	681b      	ldr	r3, [r3, #0]
700044f4:	691b      	ldr	r3, [r3, #16]
700044f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
700044f8:	68bb      	ldr	r3, [r7, #8]
700044fa:	f003 0302 	and.w	r3, r3, #2
700044fe:	2b00      	cmp	r3, #0
70004500:	d020      	beq.n	70004544 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
70004502:	68fb      	ldr	r3, [r7, #12]
70004504:	f003 0302 	and.w	r3, r3, #2
70004508:	2b00      	cmp	r3, #0
7000450a:	d01b      	beq.n	70004544 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
7000450c:	687b      	ldr	r3, [r7, #4]
7000450e:	681b      	ldr	r3, [r3, #0]
70004510:	f06f 0202 	mvn.w	r2, #2
70004514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
70004516:	687b      	ldr	r3, [r7, #4]
70004518:	2201      	movs	r2, #1
7000451a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
7000451c:	687b      	ldr	r3, [r7, #4]
7000451e:	681b      	ldr	r3, [r3, #0]
70004520:	699b      	ldr	r3, [r3, #24]
70004522:	f003 0303 	and.w	r3, r3, #3
70004526:	2b00      	cmp	r3, #0
70004528:	d003      	beq.n	70004532 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
7000452a:	6878      	ldr	r0, [r7, #4]
7000452c:	f000 f931 	bl	70004792 <HAL_TIM_IC_CaptureCallback>
70004530:	e005      	b.n	7000453e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
70004532:	6878      	ldr	r0, [r7, #4]
70004534:	f000 f923 	bl	7000477e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
70004538:	6878      	ldr	r0, [r7, #4]
7000453a:	f000 f934 	bl	700047a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
7000453e:	687b      	ldr	r3, [r7, #4]
70004540:	2200      	movs	r2, #0
70004542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
70004544:	68bb      	ldr	r3, [r7, #8]
70004546:	f003 0304 	and.w	r3, r3, #4
7000454a:	2b00      	cmp	r3, #0
7000454c:	d020      	beq.n	70004590 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
7000454e:	68fb      	ldr	r3, [r7, #12]
70004550:	f003 0304 	and.w	r3, r3, #4
70004554:	2b00      	cmp	r3, #0
70004556:	d01b      	beq.n	70004590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
70004558:	687b      	ldr	r3, [r7, #4]
7000455a:	681b      	ldr	r3, [r3, #0]
7000455c:	f06f 0204 	mvn.w	r2, #4
70004560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
70004562:	687b      	ldr	r3, [r7, #4]
70004564:	2202      	movs	r2, #2
70004566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
70004568:	687b      	ldr	r3, [r7, #4]
7000456a:	681b      	ldr	r3, [r3, #0]
7000456c:	699b      	ldr	r3, [r3, #24]
7000456e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
70004572:	2b00      	cmp	r3, #0
70004574:	d003      	beq.n	7000457e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
70004576:	6878      	ldr	r0, [r7, #4]
70004578:	f000 f90b 	bl	70004792 <HAL_TIM_IC_CaptureCallback>
7000457c:	e005      	b.n	7000458a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
7000457e:	6878      	ldr	r0, [r7, #4]
70004580:	f000 f8fd 	bl	7000477e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
70004584:	6878      	ldr	r0, [r7, #4]
70004586:	f000 f90e 	bl	700047a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
7000458a:	687b      	ldr	r3, [r7, #4]
7000458c:	2200      	movs	r2, #0
7000458e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
70004590:	68bb      	ldr	r3, [r7, #8]
70004592:	f003 0308 	and.w	r3, r3, #8
70004596:	2b00      	cmp	r3, #0
70004598:	d020      	beq.n	700045dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
7000459a:	68fb      	ldr	r3, [r7, #12]
7000459c:	f003 0308 	and.w	r3, r3, #8
700045a0:	2b00      	cmp	r3, #0
700045a2:	d01b      	beq.n	700045dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
700045a4:	687b      	ldr	r3, [r7, #4]
700045a6:	681b      	ldr	r3, [r3, #0]
700045a8:	f06f 0208 	mvn.w	r2, #8
700045ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
700045ae:	687b      	ldr	r3, [r7, #4]
700045b0:	2204      	movs	r2, #4
700045b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
700045b4:	687b      	ldr	r3, [r7, #4]
700045b6:	681b      	ldr	r3, [r3, #0]
700045b8:	69db      	ldr	r3, [r3, #28]
700045ba:	f003 0303 	and.w	r3, r3, #3
700045be:	2b00      	cmp	r3, #0
700045c0:	d003      	beq.n	700045ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
700045c2:	6878      	ldr	r0, [r7, #4]
700045c4:	f000 f8e5 	bl	70004792 <HAL_TIM_IC_CaptureCallback>
700045c8:	e005      	b.n	700045d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
700045ca:	6878      	ldr	r0, [r7, #4]
700045cc:	f000 f8d7 	bl	7000477e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
700045d0:	6878      	ldr	r0, [r7, #4]
700045d2:	f000 f8e8 	bl	700047a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
700045d6:	687b      	ldr	r3, [r7, #4]
700045d8:	2200      	movs	r2, #0
700045da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
700045dc:	68bb      	ldr	r3, [r7, #8]
700045de:	f003 0310 	and.w	r3, r3, #16
700045e2:	2b00      	cmp	r3, #0
700045e4:	d020      	beq.n	70004628 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
700045e6:	68fb      	ldr	r3, [r7, #12]
700045e8:	f003 0310 	and.w	r3, r3, #16
700045ec:	2b00      	cmp	r3, #0
700045ee:	d01b      	beq.n	70004628 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
700045f0:	687b      	ldr	r3, [r7, #4]
700045f2:	681b      	ldr	r3, [r3, #0]
700045f4:	f06f 0210 	mvn.w	r2, #16
700045f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
700045fa:	687b      	ldr	r3, [r7, #4]
700045fc:	2208      	movs	r2, #8
700045fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
70004600:	687b      	ldr	r3, [r7, #4]
70004602:	681b      	ldr	r3, [r3, #0]
70004604:	69db      	ldr	r3, [r3, #28]
70004606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
7000460a:	2b00      	cmp	r3, #0
7000460c:	d003      	beq.n	70004616 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
7000460e:	6878      	ldr	r0, [r7, #4]
70004610:	f000 f8bf 	bl	70004792 <HAL_TIM_IC_CaptureCallback>
70004614:	e005      	b.n	70004622 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
70004616:	6878      	ldr	r0, [r7, #4]
70004618:	f000 f8b1 	bl	7000477e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
7000461c:	6878      	ldr	r0, [r7, #4]
7000461e:	f000 f8c2 	bl	700047a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
70004622:	687b      	ldr	r3, [r7, #4]
70004624:	2200      	movs	r2, #0
70004626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
70004628:	68bb      	ldr	r3, [r7, #8]
7000462a:	f003 0301 	and.w	r3, r3, #1
7000462e:	2b00      	cmp	r3, #0
70004630:	d00c      	beq.n	7000464c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
70004632:	68fb      	ldr	r3, [r7, #12]
70004634:	f003 0301 	and.w	r3, r3, #1
70004638:	2b00      	cmp	r3, #0
7000463a:	d007      	beq.n	7000464c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
7000463c:	687b      	ldr	r3, [r7, #4]
7000463e:	681b      	ldr	r3, [r3, #0]
70004640:	f06f 0201 	mvn.w	r2, #1
70004644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
70004646:	6878      	ldr	r0, [r7, #4]
70004648:	f7fc f856 	bl	700006f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
7000464c:	68bb      	ldr	r3, [r7, #8]
7000464e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
70004652:	2b00      	cmp	r3, #0
70004654:	d104      	bne.n	70004660 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
70004656:	68bb      	ldr	r3, [r7, #8]
70004658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
7000465c:	2b00      	cmp	r3, #0
7000465e:	d00c      	beq.n	7000467a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
70004660:	68fb      	ldr	r3, [r7, #12]
70004662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
70004666:	2b00      	cmp	r3, #0
70004668:	d007      	beq.n	7000467a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
7000466a:	687b      	ldr	r3, [r7, #4]
7000466c:	681b      	ldr	r3, [r3, #0]
7000466e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
70004672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
70004674:	6878      	ldr	r0, [r7, #4]
70004676:	f000 f963 	bl	70004940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
7000467a:	68bb      	ldr	r3, [r7, #8]
7000467c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
70004680:	2b00      	cmp	r3, #0
70004682:	d00c      	beq.n	7000469e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
70004684:	68fb      	ldr	r3, [r7, #12]
70004686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
7000468a:	2b00      	cmp	r3, #0
7000468c:	d007      	beq.n	7000469e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
7000468e:	687b      	ldr	r3, [r7, #4]
70004690:	681b      	ldr	r3, [r3, #0]
70004692:	f46f 7280 	mvn.w	r2, #256	@ 0x100
70004696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
70004698:	6878      	ldr	r0, [r7, #4]
7000469a:	f000 f95b 	bl	70004954 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
7000469e:	68bb      	ldr	r3, [r7, #8]
700046a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
700046a4:	2b00      	cmp	r3, #0
700046a6:	d00c      	beq.n	700046c2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
700046a8:	68fb      	ldr	r3, [r7, #12]
700046aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
700046ae:	2b00      	cmp	r3, #0
700046b0:	d007      	beq.n	700046c2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
700046b2:	687b      	ldr	r3, [r7, #4]
700046b4:	681b      	ldr	r3, [r3, #0]
700046b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
700046ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
700046bc:	6878      	ldr	r0, [r7, #4]
700046be:	f000 f87c 	bl	700047ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
700046c2:	68bb      	ldr	r3, [r7, #8]
700046c4:	f003 0320 	and.w	r3, r3, #32
700046c8:	2b00      	cmp	r3, #0
700046ca:	d00c      	beq.n	700046e6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
700046cc:	68fb      	ldr	r3, [r7, #12]
700046ce:	f003 0320 	and.w	r3, r3, #32
700046d2:	2b00      	cmp	r3, #0
700046d4:	d007      	beq.n	700046e6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
700046d6:	687b      	ldr	r3, [r7, #4]
700046d8:	681b      	ldr	r3, [r3, #0]
700046da:	f06f 0220 	mvn.w	r2, #32
700046de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
700046e0:	6878      	ldr	r0, [r7, #4]
700046e2:	f000 f923 	bl	7000492c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
700046e6:	68bb      	ldr	r3, [r7, #8]
700046e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
700046ec:	2b00      	cmp	r3, #0
700046ee:	d00c      	beq.n	7000470a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
700046f0:	68fb      	ldr	r3, [r7, #12]
700046f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
700046f6:	2b00      	cmp	r3, #0
700046f8:	d007      	beq.n	7000470a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
700046fa:	687b      	ldr	r3, [r7, #4]
700046fc:	681b      	ldr	r3, [r3, #0]
700046fe:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
70004702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
70004704:	6878      	ldr	r0, [r7, #4]
70004706:	f000 f92f 	bl	70004968 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
7000470a:	68bb      	ldr	r3, [r7, #8]
7000470c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
70004710:	2b00      	cmp	r3, #0
70004712:	d00c      	beq.n	7000472e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
70004714:	68fb      	ldr	r3, [r7, #12]
70004716:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
7000471a:	2b00      	cmp	r3, #0
7000471c:	d007      	beq.n	7000472e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
7000471e:	687b      	ldr	r3, [r7, #4]
70004720:	681b      	ldr	r3, [r3, #0]
70004722:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
70004726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
70004728:	6878      	ldr	r0, [r7, #4]
7000472a:	f000 f927 	bl	7000497c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
7000472e:	68bb      	ldr	r3, [r7, #8]
70004730:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
70004734:	2b00      	cmp	r3, #0
70004736:	d00c      	beq.n	70004752 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
70004738:	68fb      	ldr	r3, [r7, #12]
7000473a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
7000473e:	2b00      	cmp	r3, #0
70004740:	d007      	beq.n	70004752 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
70004742:	687b      	ldr	r3, [r7, #4]
70004744:	681b      	ldr	r3, [r3, #0]
70004746:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
7000474a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
7000474c:	6878      	ldr	r0, [r7, #4]
7000474e:	f000 f91f 	bl	70004990 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
70004752:	68bb      	ldr	r3, [r7, #8]
70004754:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
70004758:	2b00      	cmp	r3, #0
7000475a:	d00c      	beq.n	70004776 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
7000475c:	68fb      	ldr	r3, [r7, #12]
7000475e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
70004762:	2b00      	cmp	r3, #0
70004764:	d007      	beq.n	70004776 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
70004766:	687b      	ldr	r3, [r7, #4]
70004768:	681b      	ldr	r3, [r3, #0]
7000476a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
7000476e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
70004770:	6878      	ldr	r0, [r7, #4]
70004772:	f000 f917 	bl	700049a4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
70004776:	bf00      	nop
70004778:	3710      	adds	r7, #16
7000477a:	46bd      	mov	sp, r7
7000477c:	bd80      	pop	{r7, pc}

7000477e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
7000477e:	b480      	push	{r7}
70004780:	b083      	sub	sp, #12
70004782:	af00      	add	r7, sp, #0
70004784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
70004786:	bf00      	nop
70004788:	370c      	adds	r7, #12
7000478a:	46bd      	mov	sp, r7
7000478c:	f85d 7b04 	ldr.w	r7, [sp], #4
70004790:	4770      	bx	lr

70004792 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
70004792:	b480      	push	{r7}
70004794:	b083      	sub	sp, #12
70004796:	af00      	add	r7, sp, #0
70004798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
7000479a:	bf00      	nop
7000479c:	370c      	adds	r7, #12
7000479e:	46bd      	mov	sp, r7
700047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
700047a4:	4770      	bx	lr

700047a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
700047a6:	b480      	push	{r7}
700047a8:	b083      	sub	sp, #12
700047aa:	af00      	add	r7, sp, #0
700047ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
700047ae:	bf00      	nop
700047b0:	370c      	adds	r7, #12
700047b2:	46bd      	mov	sp, r7
700047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
700047b8:	4770      	bx	lr

700047ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
700047ba:	b480      	push	{r7}
700047bc:	b083      	sub	sp, #12
700047be:	af00      	add	r7, sp, #0
700047c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
700047c2:	bf00      	nop
700047c4:	370c      	adds	r7, #12
700047c6:	46bd      	mov	sp, r7
700047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
700047cc:	4770      	bx	lr
	...

700047d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
700047d0:	b480      	push	{r7}
700047d2:	b085      	sub	sp, #20
700047d4:	af00      	add	r7, sp, #0
700047d6:	6078      	str	r0, [r7, #4]
700047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
700047da:	687b      	ldr	r3, [r7, #4]
700047dc:	681b      	ldr	r3, [r3, #0]
700047de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
700047e0:	687b      	ldr	r3, [r7, #4]
700047e2:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
700047e6:	d00f      	beq.n	70004808 <TIM_Base_SetConfig+0x38>
700047e8:	687b      	ldr	r3, [r7, #4]
700047ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
700047ee:	d00b      	beq.n	70004808 <TIM_Base_SetConfig+0x38>
700047f0:	687b      	ldr	r3, [r7, #4]
700047f2:	4a44      	ldr	r2, [pc, #272]	@ (70004904 <TIM_Base_SetConfig+0x134>)
700047f4:	4293      	cmp	r3, r2
700047f6:	d007      	beq.n	70004808 <TIM_Base_SetConfig+0x38>
700047f8:	687b      	ldr	r3, [r7, #4]
700047fa:	4a43      	ldr	r2, [pc, #268]	@ (70004908 <TIM_Base_SetConfig+0x138>)
700047fc:	4293      	cmp	r3, r2
700047fe:	d003      	beq.n	70004808 <TIM_Base_SetConfig+0x38>
70004800:	687b      	ldr	r3, [r7, #4]
70004802:	4a42      	ldr	r2, [pc, #264]	@ (7000490c <TIM_Base_SetConfig+0x13c>)
70004804:	4293      	cmp	r3, r2
70004806:	d108      	bne.n	7000481a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
70004808:	68fb      	ldr	r3, [r7, #12]
7000480a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
7000480e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
70004810:	683b      	ldr	r3, [r7, #0]
70004812:	685b      	ldr	r3, [r3, #4]
70004814:	68fa      	ldr	r2, [r7, #12]
70004816:	4313      	orrs	r3, r2
70004818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
7000481a:	687b      	ldr	r3, [r7, #4]
7000481c:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
70004820:	d02b      	beq.n	7000487a <TIM_Base_SetConfig+0xaa>
70004822:	687b      	ldr	r3, [r7, #4]
70004824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
70004828:	d027      	beq.n	7000487a <TIM_Base_SetConfig+0xaa>
7000482a:	687b      	ldr	r3, [r7, #4]
7000482c:	4a35      	ldr	r2, [pc, #212]	@ (70004904 <TIM_Base_SetConfig+0x134>)
7000482e:	4293      	cmp	r3, r2
70004830:	d023      	beq.n	7000487a <TIM_Base_SetConfig+0xaa>
70004832:	687b      	ldr	r3, [r7, #4]
70004834:	4a34      	ldr	r2, [pc, #208]	@ (70004908 <TIM_Base_SetConfig+0x138>)
70004836:	4293      	cmp	r3, r2
70004838:	d01f      	beq.n	7000487a <TIM_Base_SetConfig+0xaa>
7000483a:	687b      	ldr	r3, [r7, #4]
7000483c:	4a33      	ldr	r2, [pc, #204]	@ (7000490c <TIM_Base_SetConfig+0x13c>)
7000483e:	4293      	cmp	r3, r2
70004840:	d01b      	beq.n	7000487a <TIM_Base_SetConfig+0xaa>
70004842:	687b      	ldr	r3, [r7, #4]
70004844:	4a32      	ldr	r2, [pc, #200]	@ (70004910 <TIM_Base_SetConfig+0x140>)
70004846:	4293      	cmp	r3, r2
70004848:	d017      	beq.n	7000487a <TIM_Base_SetConfig+0xaa>
7000484a:	687b      	ldr	r3, [r7, #4]
7000484c:	4a31      	ldr	r2, [pc, #196]	@ (70004914 <TIM_Base_SetConfig+0x144>)
7000484e:	4293      	cmp	r3, r2
70004850:	d013      	beq.n	7000487a <TIM_Base_SetConfig+0xaa>
70004852:	687b      	ldr	r3, [r7, #4]
70004854:	4a30      	ldr	r2, [pc, #192]	@ (70004918 <TIM_Base_SetConfig+0x148>)
70004856:	4293      	cmp	r3, r2
70004858:	d00f      	beq.n	7000487a <TIM_Base_SetConfig+0xaa>
7000485a:	687b      	ldr	r3, [r7, #4]
7000485c:	4a2f      	ldr	r2, [pc, #188]	@ (7000491c <TIM_Base_SetConfig+0x14c>)
7000485e:	4293      	cmp	r3, r2
70004860:	d00b      	beq.n	7000487a <TIM_Base_SetConfig+0xaa>
70004862:	687b      	ldr	r3, [r7, #4]
70004864:	4a2e      	ldr	r2, [pc, #184]	@ (70004920 <TIM_Base_SetConfig+0x150>)
70004866:	4293      	cmp	r3, r2
70004868:	d007      	beq.n	7000487a <TIM_Base_SetConfig+0xaa>
7000486a:	687b      	ldr	r3, [r7, #4]
7000486c:	4a2d      	ldr	r2, [pc, #180]	@ (70004924 <TIM_Base_SetConfig+0x154>)
7000486e:	4293      	cmp	r3, r2
70004870:	d003      	beq.n	7000487a <TIM_Base_SetConfig+0xaa>
70004872:	687b      	ldr	r3, [r7, #4]
70004874:	4a2c      	ldr	r2, [pc, #176]	@ (70004928 <TIM_Base_SetConfig+0x158>)
70004876:	4293      	cmp	r3, r2
70004878:	d108      	bne.n	7000488c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
7000487a:	68fb      	ldr	r3, [r7, #12]
7000487c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
70004880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
70004882:	683b      	ldr	r3, [r7, #0]
70004884:	68db      	ldr	r3, [r3, #12]
70004886:	68fa      	ldr	r2, [r7, #12]
70004888:	4313      	orrs	r3, r2
7000488a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
7000488c:	68fb      	ldr	r3, [r7, #12]
7000488e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
70004892:	683b      	ldr	r3, [r7, #0]
70004894:	695b      	ldr	r3, [r3, #20]
70004896:	4313      	orrs	r3, r2
70004898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
7000489a:	687b      	ldr	r3, [r7, #4]
7000489c:	68fa      	ldr	r2, [r7, #12]
7000489e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
700048a0:	683b      	ldr	r3, [r7, #0]
700048a2:	689a      	ldr	r2, [r3, #8]
700048a4:	687b      	ldr	r3, [r7, #4]
700048a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
700048a8:	683b      	ldr	r3, [r7, #0]
700048aa:	681a      	ldr	r2, [r3, #0]
700048ac:	687b      	ldr	r3, [r7, #4]
700048ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
700048b0:	687b      	ldr	r3, [r7, #4]
700048b2:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
700048b6:	d00b      	beq.n	700048d0 <TIM_Base_SetConfig+0x100>
700048b8:	687b      	ldr	r3, [r7, #4]
700048ba:	4a19      	ldr	r2, [pc, #100]	@ (70004920 <TIM_Base_SetConfig+0x150>)
700048bc:	4293      	cmp	r3, r2
700048be:	d007      	beq.n	700048d0 <TIM_Base_SetConfig+0x100>
700048c0:	687b      	ldr	r3, [r7, #4]
700048c2:	4a18      	ldr	r2, [pc, #96]	@ (70004924 <TIM_Base_SetConfig+0x154>)
700048c4:	4293      	cmp	r3, r2
700048c6:	d003      	beq.n	700048d0 <TIM_Base_SetConfig+0x100>
700048c8:	687b      	ldr	r3, [r7, #4]
700048ca:	4a17      	ldr	r2, [pc, #92]	@ (70004928 <TIM_Base_SetConfig+0x158>)
700048cc:	4293      	cmp	r3, r2
700048ce:	d103      	bne.n	700048d8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
700048d0:	683b      	ldr	r3, [r7, #0]
700048d2:	691a      	ldr	r2, [r3, #16]
700048d4:	687b      	ldr	r3, [r7, #4]
700048d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
700048d8:	687b      	ldr	r3, [r7, #4]
700048da:	2201      	movs	r2, #1
700048dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
700048de:	687b      	ldr	r3, [r7, #4]
700048e0:	691b      	ldr	r3, [r3, #16]
700048e2:	f003 0301 	and.w	r3, r3, #1
700048e6:	2b01      	cmp	r3, #1
700048e8:	d105      	bne.n	700048f6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
700048ea:	687b      	ldr	r3, [r7, #4]
700048ec:	691b      	ldr	r3, [r3, #16]
700048ee:	f023 0201 	bic.w	r2, r3, #1
700048f2:	687b      	ldr	r3, [r7, #4]
700048f4:	611a      	str	r2, [r3, #16]
  }
}
700048f6:	bf00      	nop
700048f8:	3714      	adds	r7, #20
700048fa:	46bd      	mov	sp, r7
700048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
70004900:	4770      	bx	lr
70004902:	bf00      	nop
70004904:	40000400 	.word	0x40000400
70004908:	40000800 	.word	0x40000800
7000490c:	40000c00 	.word	0x40000c00
70004910:	42004c00 	.word	0x42004c00
70004914:	40001800 	.word	0x40001800
70004918:	40001c00 	.word	0x40001c00
7000491c:	40002000 	.word	0x40002000
70004920:	42004000 	.word	0x42004000
70004924:	42004400 	.word	0x42004400
70004928:	42004800 	.word	0x42004800

7000492c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
7000492c:	b480      	push	{r7}
7000492e:	b083      	sub	sp, #12
70004930:	af00      	add	r7, sp, #0
70004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
70004934:	bf00      	nop
70004936:	370c      	adds	r7, #12
70004938:	46bd      	mov	sp, r7
7000493a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000493e:	4770      	bx	lr

70004940 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
70004940:	b480      	push	{r7}
70004942:	b083      	sub	sp, #12
70004944:	af00      	add	r7, sp, #0
70004946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
70004948:	bf00      	nop
7000494a:	370c      	adds	r7, #12
7000494c:	46bd      	mov	sp, r7
7000494e:	f85d 7b04 	ldr.w	r7, [sp], #4
70004952:	4770      	bx	lr

70004954 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
70004954:	b480      	push	{r7}
70004956:	b083      	sub	sp, #12
70004958:	af00      	add	r7, sp, #0
7000495a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
7000495c:	bf00      	nop
7000495e:	370c      	adds	r7, #12
70004960:	46bd      	mov	sp, r7
70004962:	f85d 7b04 	ldr.w	r7, [sp], #4
70004966:	4770      	bx	lr

70004968 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
70004968:	b480      	push	{r7}
7000496a:	b083      	sub	sp, #12
7000496c:	af00      	add	r7, sp, #0
7000496e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
70004970:	bf00      	nop
70004972:	370c      	adds	r7, #12
70004974:	46bd      	mov	sp, r7
70004976:	f85d 7b04 	ldr.w	r7, [sp], #4
7000497a:	4770      	bx	lr

7000497c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
7000497c:	b480      	push	{r7}
7000497e:	b083      	sub	sp, #12
70004980:	af00      	add	r7, sp, #0
70004982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
70004984:	bf00      	nop
70004986:	370c      	adds	r7, #12
70004988:	46bd      	mov	sp, r7
7000498a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000498e:	4770      	bx	lr

70004990 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
70004990:	b480      	push	{r7}
70004992:	b083      	sub	sp, #12
70004994:	af00      	add	r7, sp, #0
70004996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
70004998:	bf00      	nop
7000499a:	370c      	adds	r7, #12
7000499c:	46bd      	mov	sp, r7
7000499e:	f85d 7b04 	ldr.w	r7, [sp], #4
700049a2:	4770      	bx	lr

700049a4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
700049a4:	b480      	push	{r7}
700049a6:	b083      	sub	sp, #12
700049a8:	af00      	add	r7, sp, #0
700049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
700049ac:	bf00      	nop
700049ae:	370c      	adds	r7, #12
700049b0:	46bd      	mov	sp, r7
700049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
700049b6:	4770      	bx	lr

700049b8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
700049b8:	b580      	push	{r7, lr}
700049ba:	b084      	sub	sp, #16
700049bc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
700049be:	4b92      	ldr	r3, [pc, #584]	@ (70004c08 <MX_LWIP_Init+0x250>)
700049c0:	22c0      	movs	r2, #192	@ 0xc0
700049c2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
700049c4:	4b90      	ldr	r3, [pc, #576]	@ (70004c08 <MX_LWIP_Init+0x250>)
700049c6:	22a8      	movs	r2, #168	@ 0xa8
700049c8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
700049ca:	4b8f      	ldr	r3, [pc, #572]	@ (70004c08 <MX_LWIP_Init+0x250>)
700049cc:	2200      	movs	r2, #0
700049ce:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 234;
700049d0:	4b8d      	ldr	r3, [pc, #564]	@ (70004c08 <MX_LWIP_Init+0x250>)
700049d2:	22ea      	movs	r2, #234	@ 0xea
700049d4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
700049d6:	4b8d      	ldr	r3, [pc, #564]	@ (70004c0c <MX_LWIP_Init+0x254>)
700049d8:	22ff      	movs	r2, #255	@ 0xff
700049da:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
700049dc:	4b8b      	ldr	r3, [pc, #556]	@ (70004c0c <MX_LWIP_Init+0x254>)
700049de:	22ff      	movs	r2, #255	@ 0xff
700049e0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
700049e2:	4b8a      	ldr	r3, [pc, #552]	@ (70004c0c <MX_LWIP_Init+0x254>)
700049e4:	22ff      	movs	r2, #255	@ 0xff
700049e6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
700049e8:	4b88      	ldr	r3, [pc, #544]	@ (70004c0c <MX_LWIP_Init+0x254>)
700049ea:	2200      	movs	r2, #0
700049ec:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
700049ee:	4b88      	ldr	r3, [pc, #544]	@ (70004c10 <MX_LWIP_Init+0x258>)
700049f0:	2200      	movs	r2, #0
700049f2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
700049f4:	4b86      	ldr	r3, [pc, #536]	@ (70004c10 <MX_LWIP_Init+0x258>)
700049f6:	2200      	movs	r2, #0
700049f8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
700049fa:	4b85      	ldr	r3, [pc, #532]	@ (70004c10 <MX_LWIP_Init+0x258>)
700049fc:	2200      	movs	r2, #0
700049fe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
70004a00:	4b83      	ldr	r3, [pc, #524]	@ (70004c10 <MX_LWIP_Init+0x258>)
70004a02:	2200      	movs	r2, #0
70004a04:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
70004a06:	2100      	movs	r1, #0
70004a08:	2000      	movs	r0, #0
70004a0a:	f00e fce7 	bl	700133dc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
70004a0e:	4b7e      	ldr	r3, [pc, #504]	@ (70004c08 <MX_LWIP_Init+0x250>)
70004a10:	781b      	ldrb	r3, [r3, #0]
70004a12:	061a      	lsls	r2, r3, #24
70004a14:	4b7c      	ldr	r3, [pc, #496]	@ (70004c08 <MX_LWIP_Init+0x250>)
70004a16:	785b      	ldrb	r3, [r3, #1]
70004a18:	041b      	lsls	r3, r3, #16
70004a1a:	431a      	orrs	r2, r3
70004a1c:	4b7a      	ldr	r3, [pc, #488]	@ (70004c08 <MX_LWIP_Init+0x250>)
70004a1e:	789b      	ldrb	r3, [r3, #2]
70004a20:	021b      	lsls	r3, r3, #8
70004a22:	4313      	orrs	r3, r2
70004a24:	4a78      	ldr	r2, [pc, #480]	@ (70004c08 <MX_LWIP_Init+0x250>)
70004a26:	78d2      	ldrb	r2, [r2, #3]
70004a28:	4313      	orrs	r3, r2
70004a2a:	061a      	lsls	r2, r3, #24
70004a2c:	4b76      	ldr	r3, [pc, #472]	@ (70004c08 <MX_LWIP_Init+0x250>)
70004a2e:	781b      	ldrb	r3, [r3, #0]
70004a30:	0619      	lsls	r1, r3, #24
70004a32:	4b75      	ldr	r3, [pc, #468]	@ (70004c08 <MX_LWIP_Init+0x250>)
70004a34:	785b      	ldrb	r3, [r3, #1]
70004a36:	041b      	lsls	r3, r3, #16
70004a38:	4319      	orrs	r1, r3
70004a3a:	4b73      	ldr	r3, [pc, #460]	@ (70004c08 <MX_LWIP_Init+0x250>)
70004a3c:	789b      	ldrb	r3, [r3, #2]
70004a3e:	021b      	lsls	r3, r3, #8
70004a40:	430b      	orrs	r3, r1
70004a42:	4971      	ldr	r1, [pc, #452]	@ (70004c08 <MX_LWIP_Init+0x250>)
70004a44:	78c9      	ldrb	r1, [r1, #3]
70004a46:	430b      	orrs	r3, r1
70004a48:	021b      	lsls	r3, r3, #8
70004a4a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
70004a4e:	431a      	orrs	r2, r3
70004a50:	4b6d      	ldr	r3, [pc, #436]	@ (70004c08 <MX_LWIP_Init+0x250>)
70004a52:	781b      	ldrb	r3, [r3, #0]
70004a54:	0619      	lsls	r1, r3, #24
70004a56:	4b6c      	ldr	r3, [pc, #432]	@ (70004c08 <MX_LWIP_Init+0x250>)
70004a58:	785b      	ldrb	r3, [r3, #1]
70004a5a:	041b      	lsls	r3, r3, #16
70004a5c:	4319      	orrs	r1, r3
70004a5e:	4b6a      	ldr	r3, [pc, #424]	@ (70004c08 <MX_LWIP_Init+0x250>)
70004a60:	789b      	ldrb	r3, [r3, #2]
70004a62:	021b      	lsls	r3, r3, #8
70004a64:	430b      	orrs	r3, r1
70004a66:	4968      	ldr	r1, [pc, #416]	@ (70004c08 <MX_LWIP_Init+0x250>)
70004a68:	78c9      	ldrb	r1, [r1, #3]
70004a6a:	430b      	orrs	r3, r1
70004a6c:	0a1b      	lsrs	r3, r3, #8
70004a6e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
70004a72:	431a      	orrs	r2, r3
70004a74:	4b64      	ldr	r3, [pc, #400]	@ (70004c08 <MX_LWIP_Init+0x250>)
70004a76:	781b      	ldrb	r3, [r3, #0]
70004a78:	0619      	lsls	r1, r3, #24
70004a7a:	4b63      	ldr	r3, [pc, #396]	@ (70004c08 <MX_LWIP_Init+0x250>)
70004a7c:	785b      	ldrb	r3, [r3, #1]
70004a7e:	041b      	lsls	r3, r3, #16
70004a80:	4319      	orrs	r1, r3
70004a82:	4b61      	ldr	r3, [pc, #388]	@ (70004c08 <MX_LWIP_Init+0x250>)
70004a84:	789b      	ldrb	r3, [r3, #2]
70004a86:	021b      	lsls	r3, r3, #8
70004a88:	430b      	orrs	r3, r1
70004a8a:	495f      	ldr	r1, [pc, #380]	@ (70004c08 <MX_LWIP_Init+0x250>)
70004a8c:	78c9      	ldrb	r1, [r1, #3]
70004a8e:	430b      	orrs	r3, r1
70004a90:	0e1b      	lsrs	r3, r3, #24
70004a92:	4313      	orrs	r3, r2
70004a94:	4a5f      	ldr	r2, [pc, #380]	@ (70004c14 <MX_LWIP_Init+0x25c>)
70004a96:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
70004a98:	4b5c      	ldr	r3, [pc, #368]	@ (70004c0c <MX_LWIP_Init+0x254>)
70004a9a:	781b      	ldrb	r3, [r3, #0]
70004a9c:	061a      	lsls	r2, r3, #24
70004a9e:	4b5b      	ldr	r3, [pc, #364]	@ (70004c0c <MX_LWIP_Init+0x254>)
70004aa0:	785b      	ldrb	r3, [r3, #1]
70004aa2:	041b      	lsls	r3, r3, #16
70004aa4:	431a      	orrs	r2, r3
70004aa6:	4b59      	ldr	r3, [pc, #356]	@ (70004c0c <MX_LWIP_Init+0x254>)
70004aa8:	789b      	ldrb	r3, [r3, #2]
70004aaa:	021b      	lsls	r3, r3, #8
70004aac:	4313      	orrs	r3, r2
70004aae:	4a57      	ldr	r2, [pc, #348]	@ (70004c0c <MX_LWIP_Init+0x254>)
70004ab0:	78d2      	ldrb	r2, [r2, #3]
70004ab2:	4313      	orrs	r3, r2
70004ab4:	061a      	lsls	r2, r3, #24
70004ab6:	4b55      	ldr	r3, [pc, #340]	@ (70004c0c <MX_LWIP_Init+0x254>)
70004ab8:	781b      	ldrb	r3, [r3, #0]
70004aba:	0619      	lsls	r1, r3, #24
70004abc:	4b53      	ldr	r3, [pc, #332]	@ (70004c0c <MX_LWIP_Init+0x254>)
70004abe:	785b      	ldrb	r3, [r3, #1]
70004ac0:	041b      	lsls	r3, r3, #16
70004ac2:	4319      	orrs	r1, r3
70004ac4:	4b51      	ldr	r3, [pc, #324]	@ (70004c0c <MX_LWIP_Init+0x254>)
70004ac6:	789b      	ldrb	r3, [r3, #2]
70004ac8:	021b      	lsls	r3, r3, #8
70004aca:	430b      	orrs	r3, r1
70004acc:	494f      	ldr	r1, [pc, #316]	@ (70004c0c <MX_LWIP_Init+0x254>)
70004ace:	78c9      	ldrb	r1, [r1, #3]
70004ad0:	430b      	orrs	r3, r1
70004ad2:	021b      	lsls	r3, r3, #8
70004ad4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
70004ad8:	431a      	orrs	r2, r3
70004ada:	4b4c      	ldr	r3, [pc, #304]	@ (70004c0c <MX_LWIP_Init+0x254>)
70004adc:	781b      	ldrb	r3, [r3, #0]
70004ade:	0619      	lsls	r1, r3, #24
70004ae0:	4b4a      	ldr	r3, [pc, #296]	@ (70004c0c <MX_LWIP_Init+0x254>)
70004ae2:	785b      	ldrb	r3, [r3, #1]
70004ae4:	041b      	lsls	r3, r3, #16
70004ae6:	4319      	orrs	r1, r3
70004ae8:	4b48      	ldr	r3, [pc, #288]	@ (70004c0c <MX_LWIP_Init+0x254>)
70004aea:	789b      	ldrb	r3, [r3, #2]
70004aec:	021b      	lsls	r3, r3, #8
70004aee:	430b      	orrs	r3, r1
70004af0:	4946      	ldr	r1, [pc, #280]	@ (70004c0c <MX_LWIP_Init+0x254>)
70004af2:	78c9      	ldrb	r1, [r1, #3]
70004af4:	430b      	orrs	r3, r1
70004af6:	0a1b      	lsrs	r3, r3, #8
70004af8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
70004afc:	431a      	orrs	r2, r3
70004afe:	4b43      	ldr	r3, [pc, #268]	@ (70004c0c <MX_LWIP_Init+0x254>)
70004b00:	781b      	ldrb	r3, [r3, #0]
70004b02:	0619      	lsls	r1, r3, #24
70004b04:	4b41      	ldr	r3, [pc, #260]	@ (70004c0c <MX_LWIP_Init+0x254>)
70004b06:	785b      	ldrb	r3, [r3, #1]
70004b08:	041b      	lsls	r3, r3, #16
70004b0a:	4319      	orrs	r1, r3
70004b0c:	4b3f      	ldr	r3, [pc, #252]	@ (70004c0c <MX_LWIP_Init+0x254>)
70004b0e:	789b      	ldrb	r3, [r3, #2]
70004b10:	021b      	lsls	r3, r3, #8
70004b12:	430b      	orrs	r3, r1
70004b14:	493d      	ldr	r1, [pc, #244]	@ (70004c0c <MX_LWIP_Init+0x254>)
70004b16:	78c9      	ldrb	r1, [r1, #3]
70004b18:	430b      	orrs	r3, r1
70004b1a:	0e1b      	lsrs	r3, r3, #24
70004b1c:	4313      	orrs	r3, r2
70004b1e:	4a3e      	ldr	r2, [pc, #248]	@ (70004c18 <MX_LWIP_Init+0x260>)
70004b20:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
70004b22:	4b3b      	ldr	r3, [pc, #236]	@ (70004c10 <MX_LWIP_Init+0x258>)
70004b24:	781b      	ldrb	r3, [r3, #0]
70004b26:	061a      	lsls	r2, r3, #24
70004b28:	4b39      	ldr	r3, [pc, #228]	@ (70004c10 <MX_LWIP_Init+0x258>)
70004b2a:	785b      	ldrb	r3, [r3, #1]
70004b2c:	041b      	lsls	r3, r3, #16
70004b2e:	431a      	orrs	r2, r3
70004b30:	4b37      	ldr	r3, [pc, #220]	@ (70004c10 <MX_LWIP_Init+0x258>)
70004b32:	789b      	ldrb	r3, [r3, #2]
70004b34:	021b      	lsls	r3, r3, #8
70004b36:	4313      	orrs	r3, r2
70004b38:	4a35      	ldr	r2, [pc, #212]	@ (70004c10 <MX_LWIP_Init+0x258>)
70004b3a:	78d2      	ldrb	r2, [r2, #3]
70004b3c:	4313      	orrs	r3, r2
70004b3e:	061a      	lsls	r2, r3, #24
70004b40:	4b33      	ldr	r3, [pc, #204]	@ (70004c10 <MX_LWIP_Init+0x258>)
70004b42:	781b      	ldrb	r3, [r3, #0]
70004b44:	0619      	lsls	r1, r3, #24
70004b46:	4b32      	ldr	r3, [pc, #200]	@ (70004c10 <MX_LWIP_Init+0x258>)
70004b48:	785b      	ldrb	r3, [r3, #1]
70004b4a:	041b      	lsls	r3, r3, #16
70004b4c:	4319      	orrs	r1, r3
70004b4e:	4b30      	ldr	r3, [pc, #192]	@ (70004c10 <MX_LWIP_Init+0x258>)
70004b50:	789b      	ldrb	r3, [r3, #2]
70004b52:	021b      	lsls	r3, r3, #8
70004b54:	430b      	orrs	r3, r1
70004b56:	492e      	ldr	r1, [pc, #184]	@ (70004c10 <MX_LWIP_Init+0x258>)
70004b58:	78c9      	ldrb	r1, [r1, #3]
70004b5a:	430b      	orrs	r3, r1
70004b5c:	021b      	lsls	r3, r3, #8
70004b5e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
70004b62:	431a      	orrs	r2, r3
70004b64:	4b2a      	ldr	r3, [pc, #168]	@ (70004c10 <MX_LWIP_Init+0x258>)
70004b66:	781b      	ldrb	r3, [r3, #0]
70004b68:	0619      	lsls	r1, r3, #24
70004b6a:	4b29      	ldr	r3, [pc, #164]	@ (70004c10 <MX_LWIP_Init+0x258>)
70004b6c:	785b      	ldrb	r3, [r3, #1]
70004b6e:	041b      	lsls	r3, r3, #16
70004b70:	4319      	orrs	r1, r3
70004b72:	4b27      	ldr	r3, [pc, #156]	@ (70004c10 <MX_LWIP_Init+0x258>)
70004b74:	789b      	ldrb	r3, [r3, #2]
70004b76:	021b      	lsls	r3, r3, #8
70004b78:	430b      	orrs	r3, r1
70004b7a:	4925      	ldr	r1, [pc, #148]	@ (70004c10 <MX_LWIP_Init+0x258>)
70004b7c:	78c9      	ldrb	r1, [r1, #3]
70004b7e:	430b      	orrs	r3, r1
70004b80:	0a1b      	lsrs	r3, r3, #8
70004b82:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
70004b86:	431a      	orrs	r2, r3
70004b88:	4b21      	ldr	r3, [pc, #132]	@ (70004c10 <MX_LWIP_Init+0x258>)
70004b8a:	781b      	ldrb	r3, [r3, #0]
70004b8c:	0619      	lsls	r1, r3, #24
70004b8e:	4b20      	ldr	r3, [pc, #128]	@ (70004c10 <MX_LWIP_Init+0x258>)
70004b90:	785b      	ldrb	r3, [r3, #1]
70004b92:	041b      	lsls	r3, r3, #16
70004b94:	4319      	orrs	r1, r3
70004b96:	4b1e      	ldr	r3, [pc, #120]	@ (70004c10 <MX_LWIP_Init+0x258>)
70004b98:	789b      	ldrb	r3, [r3, #2]
70004b9a:	021b      	lsls	r3, r3, #8
70004b9c:	430b      	orrs	r3, r1
70004b9e:	491c      	ldr	r1, [pc, #112]	@ (70004c10 <MX_LWIP_Init+0x258>)
70004ba0:	78c9      	ldrb	r1, [r1, #3]
70004ba2:	430b      	orrs	r3, r1
70004ba4:	0e1b      	lsrs	r3, r3, #24
70004ba6:	4313      	orrs	r3, r2
70004ba8:	4a1c      	ldr	r2, [pc, #112]	@ (70004c1c <MX_LWIP_Init+0x264>)
70004baa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
70004bac:	4b1c      	ldr	r3, [pc, #112]	@ (70004c20 <MX_LWIP_Init+0x268>)
70004bae:	9302      	str	r3, [sp, #8]
70004bb0:	4b1c      	ldr	r3, [pc, #112]	@ (70004c24 <MX_LWIP_Init+0x26c>)
70004bb2:	9301      	str	r3, [sp, #4]
70004bb4:	2300      	movs	r3, #0
70004bb6:	9300      	str	r3, [sp, #0]
70004bb8:	4b18      	ldr	r3, [pc, #96]	@ (70004c1c <MX_LWIP_Init+0x264>)
70004bba:	4a17      	ldr	r2, [pc, #92]	@ (70004c18 <MX_LWIP_Init+0x260>)
70004bbc:	4915      	ldr	r1, [pc, #84]	@ (70004c14 <MX_LWIP_Init+0x25c>)
70004bbe:	481a      	ldr	r0, [pc, #104]	@ (70004c28 <MX_LWIP_Init+0x270>)
70004bc0:	f008 f824 	bl	7000cc0c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
70004bc4:	4818      	ldr	r0, [pc, #96]	@ (70004c28 <MX_LWIP_Init+0x270>)
70004bc6:	f008 f9c1 	bl	7000cf4c <netif_set_default>

  ethernet_link_status_updated(&gnetif);
70004bca:	4817      	ldr	r0, [pc, #92]	@ (70004c28 <MX_LWIP_Init+0x270>)
70004bcc:	f000 f836 	bl	70004c3c <ethernet_link_status_updated>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
70004bd0:	4916      	ldr	r1, [pc, #88]	@ (70004c2c <MX_LWIP_Init+0x274>)
70004bd2:	4815      	ldr	r0, [pc, #84]	@ (70004c28 <MX_LWIP_Init+0x270>)
70004bd4:	f008 fa94 	bl	7000d100 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
70004bd8:	2224      	movs	r2, #36	@ 0x24
70004bda:	2100      	movs	r1, #0
70004bdc:	4814      	ldr	r0, [pc, #80]	@ (70004c30 <MX_LWIP_Init+0x278>)
70004bde:	f00f f904 	bl	70013dea <memset>
  attributes.name = "EthLink";
70004be2:	4b13      	ldr	r3, [pc, #76]	@ (70004c30 <MX_LWIP_Init+0x278>)
70004be4:	4a13      	ldr	r2, [pc, #76]	@ (70004c34 <MX_LWIP_Init+0x27c>)
70004be6:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
70004be8:	4b11      	ldr	r3, [pc, #68]	@ (70004c30 <MX_LWIP_Init+0x278>)
70004bea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
70004bee:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
70004bf0:	4b0f      	ldr	r3, [pc, #60]	@ (70004c30 <MX_LWIP_Init+0x278>)
70004bf2:	2210      	movs	r2, #16
70004bf4:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
70004bf6:	4a0e      	ldr	r2, [pc, #56]	@ (70004c30 <MX_LWIP_Init+0x278>)
70004bf8:	490b      	ldr	r1, [pc, #44]	@ (70004c28 <MX_LWIP_Init+0x270>)
70004bfa:	480f      	ldr	r0, [pc, #60]	@ (70004c38 <MX_LWIP_Init+0x280>)
70004bfc:	f000 fe06 	bl	7000580c <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
70004c00:	bf00      	nop
70004c02:	46bd      	mov	sp, r7
70004c04:	bd80      	pop	{r7, pc}
70004c06:	bf00      	nop
70004c08:	24000148 	.word	0x24000148
70004c0c:	2400014c 	.word	0x2400014c
70004c10:	24000150 	.word	0x24000150
70004c14:	2400013c 	.word	0x2400013c
70004c18:	24000140 	.word	0x24000140
70004c1c:	24000144 	.word	0x24000144
70004c20:	70013319 	.word	0x70013319
70004c24:	70005125 	.word	0x70005125
70004c28:	24000108 	.word	0x24000108
70004c2c:	70004c3d 	.word	0x70004c3d
70004c30:	24000154 	.word	0x24000154
70004c34:	70014c18 	.word	0x70014c18
70004c38:	7000540d 	.word	0x7000540d

70004c3c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
70004c3c:	b480      	push	{r7}
70004c3e:	b083      	sub	sp, #12
70004c40:	af00      	add	r7, sp, #0
70004c42:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
70004c44:	bf00      	nop
70004c46:	370c      	adds	r7, #12
70004c48:	46bd      	mov	sp, r7
70004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
70004c4e:	4770      	bx	lr

70004c50 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
70004c50:	b580      	push	{r7, lr}
70004c52:	b082      	sub	sp, #8
70004c54:	af00      	add	r7, sp, #0
70004c56:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
70004c58:	4b04      	ldr	r3, [pc, #16]	@ (70004c6c <HAL_ETH_RxCpltCallback+0x1c>)
70004c5a:	681b      	ldr	r3, [r3, #0]
70004c5c:	4618      	mov	r0, r3
70004c5e:	f001 f891 	bl	70005d84 <osSemaphoreRelease>
}
70004c62:	bf00      	nop
70004c64:	3708      	adds	r7, #8
70004c66:	46bd      	mov	sp, r7
70004c68:	bd80      	pop	{r7, pc}
70004c6a:	bf00      	nop
70004c6c:	24000180 	.word	0x24000180

70004c70 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
70004c70:	b580      	push	{r7, lr}
70004c72:	b082      	sub	sp, #8
70004c74:	af00      	add	r7, sp, #0
70004c76:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
70004c78:	4b04      	ldr	r3, [pc, #16]	@ (70004c8c <HAL_ETH_TxCpltCallback+0x1c>)
70004c7a:	681b      	ldr	r3, [r3, #0]
70004c7c:	4618      	mov	r0, r3
70004c7e:	f001 f881 	bl	70005d84 <osSemaphoreRelease>
}
70004c82:	bf00      	nop
70004c84:	3708      	adds	r7, #8
70004c86:	46bd      	mov	sp, r7
70004c88:	bd80      	pop	{r7, pc}
70004c8a:	bf00      	nop
70004c8c:	24000184 	.word	0x24000184

70004c90 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
70004c90:	b580      	push	{r7, lr}
70004c92:	b082      	sub	sp, #8
70004c94:	af00      	add	r7, sp, #0
70004c96:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
70004c98:	6878      	ldr	r0, [r7, #4]
70004c9a:	f7fd fb42 	bl	70002322 <HAL_ETH_GetDMAError>
70004c9e:	4603      	mov	r3, r0
70004ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
70004ca4:	2b80      	cmp	r3, #128	@ 0x80
70004ca6:	d104      	bne.n	70004cb2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
70004ca8:	4b04      	ldr	r3, [pc, #16]	@ (70004cbc <HAL_ETH_ErrorCallback+0x2c>)
70004caa:	681b      	ldr	r3, [r3, #0]
70004cac:	4618      	mov	r0, r3
70004cae:	f001 f869 	bl	70005d84 <osSemaphoreRelease>
  }
}
70004cb2:	bf00      	nop
70004cb4:	3708      	adds	r7, #8
70004cb6:	46bd      	mov	sp, r7
70004cb8:	bd80      	pop	{r7, pc}
70004cba:	bf00      	nop
70004cbc:	24000180 	.word	0x24000180

70004cc0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
70004cc0:	b580      	push	{r7, lr}
70004cc2:	b0aa      	sub	sp, #168	@ 0xa8
70004cc4:	af00      	add	r7, sp, #0
70004cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
70004cc8:	2300      	movs	r3, #0
70004cca:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
70004cce:	2300      	movs	r3, #0
70004cd0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
70004cd4:	2300      	movs	r3, #0
70004cd6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
70004cda:	f107 0310 	add.w	r3, r7, #16
70004cde:	2264      	movs	r2, #100	@ 0x64
70004ce0:	2100      	movs	r1, #0
70004ce2:	4618      	mov	r0, r3
70004ce4:	f00f f881 	bl	70013dea <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
70004ce8:	4b89      	ldr	r3, [pc, #548]	@ (70004f10 <low_level_init+0x250>)
70004cea:	4a8a      	ldr	r2, [pc, #552]	@ (70004f14 <low_level_init+0x254>)
70004cec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
70004cee:	2300      	movs	r3, #0
70004cf0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
70004cf2:	2380      	movs	r3, #128	@ 0x80
70004cf4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
70004cf6:	23e1      	movs	r3, #225	@ 0xe1
70004cf8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
70004cfa:	2300      	movs	r3, #0
70004cfc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
70004cfe:	2300      	movs	r3, #0
70004d00:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
70004d02:	2300      	movs	r3, #0
70004d04:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
70004d06:	4a82      	ldr	r2, [pc, #520]	@ (70004f10 <low_level_init+0x250>)
70004d08:	f107 0308 	add.w	r3, r7, #8
70004d0c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
70004d0e:	4b80      	ldr	r3, [pc, #512]	@ (70004f10 <low_level_init+0x250>)
70004d10:	2201      	movs	r2, #1
70004d12:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
70004d14:	4b7e      	ldr	r3, [pc, #504]	@ (70004f10 <low_level_init+0x250>)
70004d16:	4a80      	ldr	r2, [pc, #512]	@ (70004f18 <low_level_init+0x258>)
70004d18:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
70004d1a:	4b7d      	ldr	r3, [pc, #500]	@ (70004f10 <low_level_init+0x250>)
70004d1c:	4a7f      	ldr	r2, [pc, #508]	@ (70004f1c <low_level_init+0x25c>)
70004d1e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1000;
70004d20:	4b7b      	ldr	r3, [pc, #492]	@ (70004f10 <low_level_init+0x250>)
70004d22:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
70004d26:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
70004d28:	4879      	ldr	r0, [pc, #484]	@ (70004f10 <low_level_init+0x250>)
70004d2a:	f7fc fb21 	bl	70001370 <HAL_ETH_Init>
70004d2e:	4603      	mov	r3, r0
70004d30:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfigTypeDef));
70004d34:	2238      	movs	r2, #56	@ 0x38
70004d36:	2100      	movs	r1, #0
70004d38:	4879      	ldr	r0, [pc, #484]	@ (70004f20 <low_level_init+0x260>)
70004d3a:	f00f f856 	bl	70013dea <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
70004d3e:	4b78      	ldr	r3, [pc, #480]	@ (70004f20 <low_level_init+0x260>)
70004d40:	2221      	movs	r2, #33	@ 0x21
70004d42:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
70004d44:	4b76      	ldr	r3, [pc, #472]	@ (70004f20 <low_level_init+0x260>)
70004d46:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
70004d4a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
70004d4c:	4b74      	ldr	r3, [pc, #464]	@ (70004f20 <low_level_init+0x260>)
70004d4e:	2200      	movs	r2, #0
70004d50:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
70004d52:	4874      	ldr	r0, [pc, #464]	@ (70004f24 <low_level_init+0x264>)
70004d54:	f007 fe2e 	bl	7000c9b4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
70004d58:	687b      	ldr	r3, [r7, #4]
70004d5a:	2206      	movs	r2, #6
70004d5c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
70004d60:	4b6b      	ldr	r3, [pc, #428]	@ (70004f10 <low_level_init+0x250>)
70004d62:	685b      	ldr	r3, [r3, #4]
70004d64:	781a      	ldrb	r2, [r3, #0]
70004d66:	687b      	ldr	r3, [r7, #4]
70004d68:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
70004d6c:	4b68      	ldr	r3, [pc, #416]	@ (70004f10 <low_level_init+0x250>)
70004d6e:	685b      	ldr	r3, [r3, #4]
70004d70:	785a      	ldrb	r2, [r3, #1]
70004d72:	687b      	ldr	r3, [r7, #4]
70004d74:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
70004d78:	4b65      	ldr	r3, [pc, #404]	@ (70004f10 <low_level_init+0x250>)
70004d7a:	685b      	ldr	r3, [r3, #4]
70004d7c:	789a      	ldrb	r2, [r3, #2]
70004d7e:	687b      	ldr	r3, [r7, #4]
70004d80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
70004d84:	4b62      	ldr	r3, [pc, #392]	@ (70004f10 <low_level_init+0x250>)
70004d86:	685b      	ldr	r3, [r3, #4]
70004d88:	78da      	ldrb	r2, [r3, #3]
70004d8a:	687b      	ldr	r3, [r7, #4]
70004d8c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
70004d90:	4b5f      	ldr	r3, [pc, #380]	@ (70004f10 <low_level_init+0x250>)
70004d92:	685b      	ldr	r3, [r3, #4]
70004d94:	791a      	ldrb	r2, [r3, #4]
70004d96:	687b      	ldr	r3, [r7, #4]
70004d98:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
70004d9c:	4b5c      	ldr	r3, [pc, #368]	@ (70004f10 <low_level_init+0x250>)
70004d9e:	685b      	ldr	r3, [r3, #4]
70004da0:	795a      	ldrb	r2, [r3, #5]
70004da2:	687b      	ldr	r3, [r7, #4]
70004da4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
70004da8:	687b      	ldr	r3, [r7, #4]
70004daa:	f240 52dc 	movw	r2, #1500	@ 0x5dc
70004dae:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
70004db0:	687b      	ldr	r3, [r7, #4]
70004db2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
70004db6:	f043 030a 	orr.w	r3, r3, #10
70004dba:	b2da      	uxtb	r2, r3
70004dbc:	687b      	ldr	r3, [r7, #4]
70004dbe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
70004dc2:	2200      	movs	r2, #0
70004dc4:	2100      	movs	r1, #0
70004dc6:	2001      	movs	r0, #1
70004dc8:	f000 ff03 	bl	70005bd2 <osSemaphoreNew>
70004dcc:	4603      	mov	r3, r0
70004dce:	4a56      	ldr	r2, [pc, #344]	@ (70004f28 <low_level_init+0x268>)
70004dd0:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
70004dd2:	2200      	movs	r2, #0
70004dd4:	2100      	movs	r1, #0
70004dd6:	2001      	movs	r0, #1
70004dd8:	f000 fefb 	bl	70005bd2 <osSemaphoreNew>
70004ddc:	4603      	mov	r3, r0
70004dde:	4a53      	ldr	r2, [pc, #332]	@ (70004f2c <low_level_init+0x26c>)
70004de0:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
70004de2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
70004de6:	2224      	movs	r2, #36	@ 0x24
70004de8:	2100      	movs	r1, #0
70004dea:	4618      	mov	r0, r3
70004dec:	f00e fffd 	bl	70013dea <memset>
  attributes.name = "EthIf";
70004df0:	4b4f      	ldr	r3, [pc, #316]	@ (70004f30 <low_level_init+0x270>)
70004df2:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
70004df4:	f44f 73af 	mov.w	r3, #350	@ 0x15e
70004df8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
70004dfc:	2330      	movs	r3, #48	@ 0x30
70004dfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
70004e02:	f107 0374 	add.w	r3, r7, #116	@ 0x74
70004e06:	461a      	mov	r2, r3
70004e08:	6879      	ldr	r1, [r7, #4]
70004e0a:	484a      	ldr	r0, [pc, #296]	@ (70004f34 <low_level_init+0x274>)
70004e0c:	f000 fcfe 	bl	7000580c <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
70004e10:	4949      	ldr	r1, [pc, #292]	@ (70004f38 <low_level_init+0x278>)
70004e12:	484a      	ldr	r0, [pc, #296]	@ (70004f3c <low_level_init+0x27c>)
70004e14:	f7fb ff97 	bl	70000d46 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
70004e18:	4848      	ldr	r0, [pc, #288]	@ (70004f3c <low_level_init+0x27c>)
70004e1a:	f7fb ffc6 	bl	70000daa <LAN8742_Init>
70004e1e:	4603      	mov	r3, r0
70004e20:	2b00      	cmp	r3, #0
70004e22:	d006      	beq.n	70004e32 <low_level_init+0x172>
  {
    netif_set_link_down(netif);
70004e24:	6878      	ldr	r0, [r7, #4]
70004e26:	f008 f949 	bl	7000d0bc <netif_set_link_down>
    netif_set_down(netif);
70004e2a:	6878      	ldr	r0, [r7, #4]
70004e2c:	f008 f8fc 	bl	7000d028 <netif_set_down>
70004e30:	e06b      	b.n	70004f0a <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
70004e32:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
70004e36:	2b00      	cmp	r3, #0
70004e38:	d165      	bne.n	70004f06 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
70004e3a:	4840      	ldr	r0, [pc, #256]	@ (70004f3c <low_level_init+0x27c>)
70004e3c:	f7fc f85d 	bl	70000efa <LAN8742_GetLinkState>
70004e40:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
70004e44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
70004e48:	2b01      	cmp	r3, #1
70004e4a:	dc06      	bgt.n	70004e5a <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
70004e4c:	6878      	ldr	r0, [r7, #4]
70004e4e:	f008 f935 	bl	7000d0bc <netif_set_link_down>
      netif_set_down(netif);
70004e52:	6878      	ldr	r0, [r7, #4]
70004e54:	f008 f8e8 	bl	7000d028 <netif_set_down>
70004e58:	e057      	b.n	70004f0a <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
70004e5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
70004e5e:	3b02      	subs	r3, #2
70004e60:	2b03      	cmp	r3, #3
70004e62:	d82b      	bhi.n	70004ebc <low_level_init+0x1fc>
70004e64:	a201      	add	r2, pc, #4	@ (adr r2, 70004e6c <low_level_init+0x1ac>)
70004e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70004e6a:	bf00      	nop
70004e6c:	70004e7d 	.word	0x70004e7d
70004e70:	70004e8f 	.word	0x70004e8f
70004e74:	70004e9f 	.word	0x70004e9f
70004e78:	70004eaf 	.word	0x70004eaf
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
70004e7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
70004e80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
70004e84:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
70004e88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
70004e8c:	e01f      	b.n	70004ece <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
70004e8e:	2300      	movs	r3, #0
70004e90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
70004e94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
70004e98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
70004e9c:	e017      	b.n	70004ece <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
70004e9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
70004ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
70004ea6:	2300      	movs	r3, #0
70004ea8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
70004eac:	e00f      	b.n	70004ece <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
70004eae:	2300      	movs	r3, #0
70004eb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
70004eb4:	2300      	movs	r3, #0
70004eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
70004eba:	e008      	b.n	70004ece <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
70004ebc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
70004ec0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
70004ec4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
70004ec8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
70004ecc:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
70004ece:	f107 0310 	add.w	r3, r7, #16
70004ed2:	4619      	mov	r1, r3
70004ed4:	480e      	ldr	r0, [pc, #56]	@ (70004f10 <low_level_init+0x250>)
70004ed6:	f7fc ffd9 	bl	70001e8c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
70004eda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
70004ede:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
70004ee0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
70004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
70004ee6:	f107 0310 	add.w	r3, r7, #16
70004eea:	4619      	mov	r1, r3
70004eec:	4808      	ldr	r0, [pc, #32]	@ (70004f10 <low_level_init+0x250>)
70004eee:	f7fd f9a1 	bl	70002234 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
70004ef2:	4807      	ldr	r0, [pc, #28]	@ (70004f10 <low_level_init+0x250>)
70004ef4:	f7fc fb38 	bl	70001568 <HAL_ETH_Start_IT>
    netif_set_up(netif);
70004ef8:	6878      	ldr	r0, [r7, #4]
70004efa:	f008 f837 	bl	7000cf6c <netif_set_up>
    netif_set_link_up(netif);
70004efe:	6878      	ldr	r0, [r7, #4]
70004f00:	f008 f8b6 	bl	7000d070 <netif_set_link_up>
70004f04:	e001      	b.n	70004f0a <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
70004f06:	f7fb fc09 	bl	7000071c <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
70004f0a:	37a8      	adds	r7, #168	@ 0xa8
70004f0c:	46bd      	mov	sp, r7
70004f0e:	bd80      	pop	{r7, pc}
70004f10:	24000188 	.word	0x24000188
70004f14:	40028000 	.word	0x40028000
70004f18:	24020080 	.word	0x24020080
70004f1c:	24020000 	.word	0x24020000
70004f20:	24000238 	.word	0x24000238
70004f24:	70017250 	.word	0x70017250
70004f28:	24000180 	.word	0x24000180
70004f2c:	24000184 	.word	0x24000184
70004f30:	70014c20 	.word	0x70014c20
70004f34:	700050d1 	.word	0x700050d1
70004f38:	2400000c 	.word	0x2400000c
70004f3c:	24000270 	.word	0x24000270

70004f40 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
70004f40:	b580      	push	{r7, lr}
70004f42:	b092      	sub	sp, #72	@ 0x48
70004f44:	af00      	add	r7, sp, #0
70004f46:	6078      	str	r0, [r7, #4]
70004f48:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
70004f4a:	2300      	movs	r3, #0
70004f4c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
70004f4e:	2300      	movs	r3, #0
70004f50:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
70004f52:	2300      	movs	r3, #0
70004f54:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
70004f58:	f107 030c 	add.w	r3, r7, #12
70004f5c:	2230      	movs	r2, #48	@ 0x30
70004f5e:	2100      	movs	r1, #0
70004f60:	4618      	mov	r0, r3
70004f62:	f00e ff42 	bl	70013dea <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
70004f66:	f107 030c 	add.w	r3, r7, #12
70004f6a:	2230      	movs	r2, #48	@ 0x30
70004f6c:	2100      	movs	r1, #0
70004f6e:	4618      	mov	r0, r3
70004f70:	f00e ff3b 	bl	70013dea <memset>

  for(q = p; q != NULL; q = q->next)
70004f74:	683b      	ldr	r3, [r7, #0]
70004f76:	643b      	str	r3, [r7, #64]	@ 0x40
70004f78:	e045      	b.n	70005006 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
70004f7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
70004f7c:	2b03      	cmp	r3, #3
70004f7e:	d902      	bls.n	70004f86 <low_level_output+0x46>
      return ERR_IF;
70004f80:	f06f 030b 	mvn.w	r3, #11
70004f84:	e07f      	b.n	70005086 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
70004f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
70004f88:	6859      	ldr	r1, [r3, #4]
70004f8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
70004f8c:	4613      	mov	r3, r2
70004f8e:	005b      	lsls	r3, r3, #1
70004f90:	4413      	add	r3, r2
70004f92:	009b      	lsls	r3, r3, #2
70004f94:	3348      	adds	r3, #72	@ 0x48
70004f96:	443b      	add	r3, r7
70004f98:	3b3c      	subs	r3, #60	@ 0x3c
70004f9a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
70004f9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
70004f9e:	895b      	ldrh	r3, [r3, #10]
70004fa0:	4619      	mov	r1, r3
70004fa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
70004fa4:	4613      	mov	r3, r2
70004fa6:	005b      	lsls	r3, r3, #1
70004fa8:	4413      	add	r3, r2
70004faa:	009b      	lsls	r3, r3, #2
70004fac:	3348      	adds	r3, #72	@ 0x48
70004fae:	443b      	add	r3, r7
70004fb0:	3b38      	subs	r3, #56	@ 0x38
70004fb2:	6019      	str	r1, [r3, #0]

    if(i>0)
70004fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
70004fb6:	2b00      	cmp	r3, #0
70004fb8:	d011      	beq.n	70004fde <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
70004fba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
70004fbc:	1e5a      	subs	r2, r3, #1
70004fbe:	f107 000c 	add.w	r0, r7, #12
70004fc2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
70004fc4:	460b      	mov	r3, r1
70004fc6:	005b      	lsls	r3, r3, #1
70004fc8:	440b      	add	r3, r1
70004fca:	009b      	lsls	r3, r3, #2
70004fcc:	18c1      	adds	r1, r0, r3
70004fce:	4613      	mov	r3, r2
70004fd0:	005b      	lsls	r3, r3, #1
70004fd2:	4413      	add	r3, r2
70004fd4:	009b      	lsls	r3, r3, #2
70004fd6:	3348      	adds	r3, #72	@ 0x48
70004fd8:	443b      	add	r3, r7
70004fda:	3b34      	subs	r3, #52	@ 0x34
70004fdc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
70004fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
70004fe0:	681b      	ldr	r3, [r3, #0]
70004fe2:	2b00      	cmp	r3, #0
70004fe4:	d109      	bne.n	70004ffa <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
70004fe6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
70004fe8:	4613      	mov	r3, r2
70004fea:	005b      	lsls	r3, r3, #1
70004fec:	4413      	add	r3, r2
70004fee:	009b      	lsls	r3, r3, #2
70004ff0:	3348      	adds	r3, #72	@ 0x48
70004ff2:	443b      	add	r3, r7
70004ff4:	3b34      	subs	r3, #52	@ 0x34
70004ff6:	2200      	movs	r2, #0
70004ff8:	601a      	str	r2, [r3, #0]
    }

    i++;
70004ffa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
70004ffc:	3301      	adds	r3, #1
70004ffe:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
70005000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
70005002:	681b      	ldr	r3, [r3, #0]
70005004:	643b      	str	r3, [r7, #64]	@ 0x40
70005006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
70005008:	2b00      	cmp	r3, #0
7000500a:	d1b6      	bne.n	70004f7a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
7000500c:	683b      	ldr	r3, [r7, #0]
7000500e:	891b      	ldrh	r3, [r3, #8]
70005010:	461a      	mov	r2, r3
70005012:	4b1f      	ldr	r3, [pc, #124]	@ (70005090 <low_level_output+0x150>)
70005014:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
70005016:	4a1e      	ldr	r2, [pc, #120]	@ (70005090 <low_level_output+0x150>)
70005018:	f107 030c 	add.w	r3, r7, #12
7000501c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
7000501e:	4a1c      	ldr	r2, [pc, #112]	@ (70005090 <low_level_output+0x150>)
70005020:	683b      	ldr	r3, [r7, #0]
70005022:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
70005024:	6838      	ldr	r0, [r7, #0]
70005026:	f008 fcb5 	bl	7000d994 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
7000502a:	4919      	ldr	r1, [pc, #100]	@ (70005090 <low_level_output+0x150>)
7000502c:	4819      	ldr	r0, [pc, #100]	@ (70005094 <low_level_output+0x154>)
7000502e:	f7fc fb87 	bl	70001740 <HAL_ETH_Transmit_IT>
70005032:	4603      	mov	r3, r0
70005034:	2b00      	cmp	r3, #0
70005036:	d103      	bne.n	70005040 <low_level_output+0x100>
    {
      errval = ERR_OK;
70005038:	2300      	movs	r3, #0
7000503a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
7000503e:	e01b      	b.n	70005078 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
70005040:	4814      	ldr	r0, [pc, #80]	@ (70005094 <low_level_output+0x154>)
70005042:	f7fd f961 	bl	70002308 <HAL_ETH_GetError>
70005046:	4603      	mov	r3, r0
70005048:	f003 0302 	and.w	r3, r3, #2
7000504c:	2b00      	cmp	r3, #0
7000504e:	d00d      	beq.n	7000506c <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
70005050:	4b11      	ldr	r3, [pc, #68]	@ (70005098 <low_level_output+0x158>)
70005052:	681b      	ldr	r3, [r3, #0]
70005054:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
70005058:	4618      	mov	r0, r3
7000505a:	f000 fe43 	bl	70005ce4 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
7000505e:	480d      	ldr	r0, [pc, #52]	@ (70005094 <low_level_output+0x154>)
70005060:	f7fc fcf5 	bl	70001a4e <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
70005064:	23fe      	movs	r3, #254	@ 0xfe
70005066:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
7000506a:	e005      	b.n	70005078 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
7000506c:	6838      	ldr	r0, [r7, #0]
7000506e:	f008 fbeb 	bl	7000d848 <pbuf_free>
        errval =  ERR_IF;
70005072:	23f4      	movs	r3, #244	@ 0xf4
70005074:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
70005078:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
7000507c:	f113 0f02 	cmn.w	r3, #2
70005080:	d0d3      	beq.n	7000502a <low_level_output+0xea>

  return errval;
70005082:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
70005086:	4618      	mov	r0, r3
70005088:	3748      	adds	r7, #72	@ 0x48
7000508a:	46bd      	mov	sp, r7
7000508c:	bd80      	pop	{r7, pc}
7000508e:	bf00      	nop
70005090:	24000238 	.word	0x24000238
70005094:	24000188 	.word	0x24000188
70005098:	24000184 	.word	0x24000184

7000509c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
7000509c:	b580      	push	{r7, lr}
7000509e:	b084      	sub	sp, #16
700050a0:	af00      	add	r7, sp, #0
700050a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
700050a4:	2300      	movs	r3, #0
700050a6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
700050a8:	4b07      	ldr	r3, [pc, #28]	@ (700050c8 <low_level_input+0x2c>)
700050aa:	781b      	ldrb	r3, [r3, #0]
700050ac:	2b00      	cmp	r3, #0
700050ae:	d105      	bne.n	700050bc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
700050b0:	f107 030c 	add.w	r3, r7, #12
700050b4:	4619      	mov	r1, r3
700050b6:	4805      	ldr	r0, [pc, #20]	@ (700050cc <low_level_input+0x30>)
700050b8:	f7fc fb93 	bl	700017e2 <HAL_ETH_ReadData>
  }

  return p;
700050bc:	68fb      	ldr	r3, [r7, #12]
}
700050be:	4618      	mov	r0, r3
700050c0:	3710      	adds	r7, #16
700050c2:	46bd      	mov	sp, r7
700050c4:	bd80      	pop	{r7, pc}
700050c6:	bf00      	nop
700050c8:	2400017c 	.word	0x2400017c
700050cc:	24000188 	.word	0x24000188

700050d0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
700050d0:	b580      	push	{r7, lr}
700050d2:	b084      	sub	sp, #16
700050d4:	af00      	add	r7, sp, #0
700050d6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
700050d8:	2300      	movs	r3, #0
700050da:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
700050dc:	687b      	ldr	r3, [r7, #4]
700050de:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
700050e0:	4b0f      	ldr	r3, [pc, #60]	@ (70005120 <ethernetif_input+0x50>)
700050e2:	681b      	ldr	r3, [r3, #0]
700050e4:	f04f 31ff 	mov.w	r1, #4294967295
700050e8:	4618      	mov	r0, r3
700050ea:	f000 fdfb 	bl	70005ce4 <osSemaphoreAcquire>
700050ee:	4603      	mov	r3, r0
700050f0:	2b00      	cmp	r3, #0
700050f2:	d1f5      	bne.n	700050e0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
700050f4:	68b8      	ldr	r0, [r7, #8]
700050f6:	f7ff ffd1 	bl	7000509c <low_level_input>
700050fa:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
700050fc:	68fb      	ldr	r3, [r7, #12]
700050fe:	2b00      	cmp	r3, #0
70005100:	d00a      	beq.n	70005118 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
70005102:	68bb      	ldr	r3, [r7, #8]
70005104:	691b      	ldr	r3, [r3, #16]
70005106:	68b9      	ldr	r1, [r7, #8]
70005108:	68f8      	ldr	r0, [r7, #12]
7000510a:	4798      	blx	r3
7000510c:	4603      	mov	r3, r0
7000510e:	2b00      	cmp	r3, #0
70005110:	d002      	beq.n	70005118 <ethernetif_input+0x48>
          {
            pbuf_free(p);
70005112:	68f8      	ldr	r0, [r7, #12]
70005114:	f008 fb98 	bl	7000d848 <pbuf_free>
          }
        }
      } while(p!=NULL);
70005118:	68fb      	ldr	r3, [r7, #12]
7000511a:	2b00      	cmp	r3, #0
7000511c:	d1ea      	bne.n	700050f4 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
7000511e:	e7df      	b.n	700050e0 <ethernetif_input+0x10>
70005120:	24000180 	.word	0x24000180

70005124 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
70005124:	b580      	push	{r7, lr}
70005126:	b082      	sub	sp, #8
70005128:	af00      	add	r7, sp, #0
7000512a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
7000512c:	687b      	ldr	r3, [r7, #4]
7000512e:	2b00      	cmp	r3, #0
70005130:	d106      	bne.n	70005140 <ethernetif_init+0x1c>
70005132:	4b0e      	ldr	r3, [pc, #56]	@ (7000516c <ethernetif_init+0x48>)
70005134:	f240 221a 	movw	r2, #538	@ 0x21a
70005138:	490d      	ldr	r1, [pc, #52]	@ (70005170 <ethernetif_init+0x4c>)
7000513a:	480e      	ldr	r0, [pc, #56]	@ (70005174 <ethernetif_init+0x50>)
7000513c:	f00e fdf0 	bl	70013d20 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
70005140:	687b      	ldr	r3, [r7, #4]
70005142:	2273      	movs	r2, #115	@ 0x73
70005144:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
70005148:	687b      	ldr	r3, [r7, #4]
7000514a:	2274      	movs	r2, #116	@ 0x74
7000514c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
70005150:	687b      	ldr	r3, [r7, #4]
70005152:	4a09      	ldr	r2, [pc, #36]	@ (70005178 <ethernetif_init+0x54>)
70005154:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
70005156:	687b      	ldr	r3, [r7, #4]
70005158:	4a08      	ldr	r2, [pc, #32]	@ (7000517c <ethernetif_init+0x58>)
7000515a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
7000515c:	6878      	ldr	r0, [r7, #4]
7000515e:	f7ff fdaf 	bl	70004cc0 <low_level_init>

  return ERR_OK;
70005162:	2300      	movs	r3, #0
}
70005164:	4618      	mov	r0, r3
70005166:	3708      	adds	r7, #8
70005168:	46bd      	mov	sp, r7
7000516a:	bd80      	pop	{r7, pc}
7000516c:	70014c28 	.word	0x70014c28
70005170:	70014c44 	.word	0x70014c44
70005174:	70014c54 	.word	0x70014c54
70005178:	7000a2a9 	.word	0x7000a2a9
7000517c:	70004f41 	.word	0x70004f41

70005180 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
70005180:	b580      	push	{r7, lr}
70005182:	b084      	sub	sp, #16
70005184:	af00      	add	r7, sp, #0
70005186:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
70005188:	687b      	ldr	r3, [r7, #4]
7000518a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
7000518c:	68f9      	ldr	r1, [r7, #12]
7000518e:	4809      	ldr	r0, [pc, #36]	@ (700051b4 <pbuf_free_custom+0x34>)
70005190:	f007 fcf4 	bl	7000cb7c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
70005194:	4b08      	ldr	r3, [pc, #32]	@ (700051b8 <pbuf_free_custom+0x38>)
70005196:	781b      	ldrb	r3, [r3, #0]
70005198:	2b01      	cmp	r3, #1
7000519a:	d107      	bne.n	700051ac <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
7000519c:	4b06      	ldr	r3, [pc, #24]	@ (700051b8 <pbuf_free_custom+0x38>)
7000519e:	2200      	movs	r2, #0
700051a0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
700051a2:	4b06      	ldr	r3, [pc, #24]	@ (700051bc <pbuf_free_custom+0x3c>)
700051a4:	681b      	ldr	r3, [r3, #0]
700051a6:	4618      	mov	r0, r3
700051a8:	f000 fdec 	bl	70005d84 <osSemaphoreRelease>
  }
}
700051ac:	bf00      	nop
700051ae:	3710      	adds	r7, #16
700051b0:	46bd      	mov	sp, r7
700051b2:	bd80      	pop	{r7, pc}
700051b4:	70017250 	.word	0x70017250
700051b8:	2400017c 	.word	0x2400017c
700051bc:	24000180 	.word	0x24000180

700051c0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
700051c0:	b580      	push	{r7, lr}
700051c2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
700051c4:	f7fb ff4c 	bl	70001060 <HAL_GetTick>
700051c8:	4603      	mov	r3, r0
}
700051ca:	4618      	mov	r0, r3
700051cc:	bd80      	pop	{r7, pc}
	...

700051d0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
700051d0:	b580      	push	{r7, lr}
700051d2:	b0ae      	sub	sp, #184	@ 0xb8
700051d4:	af00      	add	r7, sp, #0
700051d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
700051d8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
700051dc:	2200      	movs	r2, #0
700051de:	601a      	str	r2, [r3, #0]
700051e0:	605a      	str	r2, [r3, #4]
700051e2:	609a      	str	r2, [r3, #8]
700051e4:	60da      	str	r2, [r3, #12]
700051e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
700051e8:	f107 0320 	add.w	r3, r7, #32
700051ec:	2284      	movs	r2, #132	@ 0x84
700051ee:	2100      	movs	r1, #0
700051f0:	4618      	mov	r0, r3
700051f2:	f00e fdfa 	bl	70013dea <memset>
  if(ethHandle->Instance==ETH)
700051f6:	687b      	ldr	r3, [r7, #4]
700051f8:	681b      	ldr	r3, [r3, #0]
700051fa:	4a58      	ldr	r2, [pc, #352]	@ (7000535c <HAL_ETH_MspInit+0x18c>)
700051fc:	4293      	cmp	r3, r2
700051fe:	f040 80a8 	bne.w	70005352 <HAL_ETH_MspInit+0x182>

  /* USER CODE END ETH_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ETH1REF|RCC_PERIPHCLK_ETH1PHY;
70005202:	f44f 73c0 	mov.w	r3, #384	@ 0x180
70005206:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Eth1RefClockSelection = RCC_ETH1REFCLKSOURCE_PHY;
70005208:	2300      	movs	r3, #0
7000520a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.Eth1PhyClockSelection = RCC_ETH1PHYCLKSOURCE_PLL3S;
7000520c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
70005210:	647b      	str	r3, [r7, #68]	@ 0x44

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
70005212:	f107 0320 	add.w	r3, r7, #32
70005216:	4618      	mov	r0, r3
70005218:	f7fe f986 	bl	70003528 <HAL_RCCEx_PeriphCLKConfig>
7000521c:	4603      	mov	r3, r0
7000521e:	2b00      	cmp	r3, #0
70005220:	d001      	beq.n	70005226 <HAL_ETH_MspInit+0x56>
    {
      Error_Handler();
70005222:	f7fb fa7b 	bl	7000071c <Error_Handler>
    }

    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
70005226:	4b4e      	ldr	r3, [pc, #312]	@ (70005360 <HAL_ETH_MspInit+0x190>)
70005228:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
7000522c:	4a4c      	ldr	r2, [pc, #304]	@ (70005360 <HAL_ETH_MspInit+0x190>)
7000522e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
70005232:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
70005236:	4b4a      	ldr	r3, [pc, #296]	@ (70005360 <HAL_ETH_MspInit+0x190>)
70005238:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
7000523c:	61fb      	str	r3, [r7, #28]
7000523e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
70005240:	4b47      	ldr	r3, [pc, #284]	@ (70005360 <HAL_ETH_MspInit+0x190>)
70005242:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
70005246:	4a46      	ldr	r2, [pc, #280]	@ (70005360 <HAL_ETH_MspInit+0x190>)
70005248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
7000524c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
70005250:	4b43      	ldr	r3, [pc, #268]	@ (70005360 <HAL_ETH_MspInit+0x190>)
70005252:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
70005256:	61bb      	str	r3, [r7, #24]
70005258:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
7000525a:	4b41      	ldr	r3, [pc, #260]	@ (70005360 <HAL_ETH_MspInit+0x190>)
7000525c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
70005260:	4a3f      	ldr	r2, [pc, #252]	@ (70005360 <HAL_ETH_MspInit+0x190>)
70005262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
70005266:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
7000526a:	4b3d      	ldr	r3, [pc, #244]	@ (70005360 <HAL_ETH_MspInit+0x190>)
7000526c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
70005270:	617b      	str	r3, [r7, #20]
70005272:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
70005274:	4b3a      	ldr	r3, [pc, #232]	@ (70005360 <HAL_ETH_MspInit+0x190>)
70005276:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
7000527a:	4a39      	ldr	r2, [pc, #228]	@ (70005360 <HAL_ETH_MspInit+0x190>)
7000527c:	f043 0302 	orr.w	r3, r3, #2
70005280:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
70005284:	4b36      	ldr	r3, [pc, #216]	@ (70005360 <HAL_ETH_MspInit+0x190>)
70005286:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
7000528a:	613b      	str	r3, [r7, #16]
7000528c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
7000528e:	4b34      	ldr	r3, [pc, #208]	@ (70005360 <HAL_ETH_MspInit+0x190>)
70005290:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
70005294:	4a32      	ldr	r2, [pc, #200]	@ (70005360 <HAL_ETH_MspInit+0x190>)
70005296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
7000529a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
7000529e:	4b30      	ldr	r3, [pc, #192]	@ (70005360 <HAL_ETH_MspInit+0x190>)
700052a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
700052a4:	60fb      	str	r3, [r7, #12]
700052a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
700052a8:	4b2d      	ldr	r3, [pc, #180]	@ (70005360 <HAL_ETH_MspInit+0x190>)
700052aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
700052ae:	4a2c      	ldr	r2, [pc, #176]	@ (70005360 <HAL_ETH_MspInit+0x190>)
700052b0:	f043 0301 	orr.w	r3, r3, #1
700052b4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
700052b8:	4b29      	ldr	r3, [pc, #164]	@ (70005360 <HAL_ETH_MspInit+0x190>)
700052ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
700052be:	60bb      	str	r3, [r7, #8]
700052c0:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> ETH_RMII_CRS_DV
    PG6     ------> ETH_MDC
    PG4     ------> ETH_RMII_RXD0
    PG5     ------> ETH_RMII_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
700052c2:	2340      	movs	r3, #64	@ 0x40
700052c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
700052c8:	2302      	movs	r3, #2
700052ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
700052ce:	2300      	movs	r3, #0
700052d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
700052d4:	2303      	movs	r3, #3
700052d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
700052da:	230b      	movs	r3, #11
700052dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
700052e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
700052e4:	4619      	mov	r1, r3
700052e6:	481f      	ldr	r0, [pc, #124]	@ (70005364 <HAL_ETH_MspInit+0x194>)
700052e8:	f7fd fdaa 	bl	70002e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_6
700052ec:	f643 0370 	movw	r3, #14448	@ 0x3870
700052f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
700052f4:	2302      	movs	r3, #2
700052f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
700052fa:	2300      	movs	r3, #0
700052fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
70005300:	2303      	movs	r3, #3
70005302:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
70005306:	230b      	movs	r3, #11
70005308:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
7000530c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
70005310:	4619      	mov	r1, r3
70005312:	4815      	ldr	r0, [pc, #84]	@ (70005368 <HAL_ETH_MspInit+0x198>)
70005314:	f7fd fd94 	bl	70002e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
70005318:	2384      	movs	r3, #132	@ 0x84
7000531a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
7000531e:	2302      	movs	r3, #2
70005320:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
70005324:	2300      	movs	r3, #0
70005326:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
7000532a:	2303      	movs	r3, #3
7000532c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
70005330:	230b      	movs	r3, #11
70005332:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
70005336:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
7000533a:	4619      	mov	r1, r3
7000533c:	480b      	ldr	r0, [pc, #44]	@ (7000536c <HAL_ETH_MspInit+0x19c>)
7000533e:	f7fd fd7f 	bl	70002e40 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
70005342:	2200      	movs	r2, #0
70005344:	2105      	movs	r1, #5
70005346:	205c      	movs	r0, #92	@ 0x5c
70005348:	f7fb ff64 	bl	70001214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
7000534c:	205c      	movs	r0, #92	@ 0x5c
7000534e:	f7fb ff7b 	bl	70001248 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
70005352:	bf00      	nop
70005354:	37b8      	adds	r7, #184	@ 0xb8
70005356:	46bd      	mov	sp, r7
70005358:	bd80      	pop	{r7, pc}
7000535a:	bf00      	nop
7000535c:	40028000 	.word	0x40028000
70005360:	58024400 	.word	0x58024400
70005364:	58020400 	.word	0x58020400
70005368:	58021800 	.word	0x58021800
7000536c:	58020000 	.word	0x58020000

70005370 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
70005370:	b580      	push	{r7, lr}
70005372:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
70005374:	4802      	ldr	r0, [pc, #8]	@ (70005380 <ETH_PHY_IO_Init+0x10>)
70005376:	f7fc ff77 	bl	70002268 <HAL_ETH_SetMDIOClockRange>

  return 0;
7000537a:	2300      	movs	r3, #0
}
7000537c:	4618      	mov	r0, r3
7000537e:	bd80      	pop	{r7, pc}
70005380:	24000188 	.word	0x24000188

70005384 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
70005384:	b480      	push	{r7}
70005386:	af00      	add	r7, sp, #0
  return 0;
70005388:	2300      	movs	r3, #0
}
7000538a:	4618      	mov	r0, r3
7000538c:	46bd      	mov	sp, r7
7000538e:	f85d 7b04 	ldr.w	r7, [sp], #4
70005392:	4770      	bx	lr

70005394 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
70005394:	b580      	push	{r7, lr}
70005396:	b084      	sub	sp, #16
70005398:	af00      	add	r7, sp, #0
7000539a:	60f8      	str	r0, [r7, #12]
7000539c:	60b9      	str	r1, [r7, #8]
7000539e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
700053a0:	687b      	ldr	r3, [r7, #4]
700053a2:	68ba      	ldr	r2, [r7, #8]
700053a4:	68f9      	ldr	r1, [r7, #12]
700053a6:	4807      	ldr	r0, [pc, #28]	@ (700053c4 <ETH_PHY_IO_ReadReg+0x30>)
700053a8:	f7fc fcc7 	bl	70001d3a <HAL_ETH_ReadPHYRegister>
700053ac:	4603      	mov	r3, r0
700053ae:	2b00      	cmp	r3, #0
700053b0:	d002      	beq.n	700053b8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
700053b2:	f04f 33ff 	mov.w	r3, #4294967295
700053b6:	e000      	b.n	700053ba <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
700053b8:	2300      	movs	r3, #0
}
700053ba:	4618      	mov	r0, r3
700053bc:	3710      	adds	r7, #16
700053be:	46bd      	mov	sp, r7
700053c0:	bd80      	pop	{r7, pc}
700053c2:	bf00      	nop
700053c4:	24000188 	.word	0x24000188

700053c8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
700053c8:	b580      	push	{r7, lr}
700053ca:	b084      	sub	sp, #16
700053cc:	af00      	add	r7, sp, #0
700053ce:	60f8      	str	r0, [r7, #12]
700053d0:	60b9      	str	r1, [r7, #8]
700053d2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
700053d4:	687b      	ldr	r3, [r7, #4]
700053d6:	68ba      	ldr	r2, [r7, #8]
700053d8:	68f9      	ldr	r1, [r7, #12]
700053da:	4807      	ldr	r0, [pc, #28]	@ (700053f8 <ETH_PHY_IO_WriteReg+0x30>)
700053dc:	f7fc fd02 	bl	70001de4 <HAL_ETH_WritePHYRegister>
700053e0:	4603      	mov	r3, r0
700053e2:	2b00      	cmp	r3, #0
700053e4:	d002      	beq.n	700053ec <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
700053e6:	f04f 33ff 	mov.w	r3, #4294967295
700053ea:	e000      	b.n	700053ee <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
700053ec:	2300      	movs	r3, #0
}
700053ee:	4618      	mov	r0, r3
700053f0:	3710      	adds	r7, #16
700053f2:	46bd      	mov	sp, r7
700053f4:	bd80      	pop	{r7, pc}
700053f6:	bf00      	nop
700053f8:	24000188 	.word	0x24000188

700053fc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
700053fc:	b580      	push	{r7, lr}
700053fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
70005400:	f7fb fe2e 	bl	70001060 <HAL_GetTick>
70005404:	4603      	mov	r3, r0
}
70005406:	4618      	mov	r0, r3
70005408:	bd80      	pop	{r7, pc}
	...

7000540c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
7000540c:	b580      	push	{r7, lr}
7000540e:	b0a0      	sub	sp, #128	@ 0x80
70005410:	af00      	add	r7, sp, #0
70005412:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
70005414:	f107 0308 	add.w	r3, r7, #8
70005418:	2264      	movs	r2, #100	@ 0x64
7000541a:	2100      	movs	r1, #0
7000541c:	4618      	mov	r0, r3
7000541e:	f00e fce4 	bl	70013dea <memset>
  int32_t PHYLinkState = 0;
70005422:	2300      	movs	r3, #0
70005424:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
70005426:	2300      	movs	r3, #0
70005428:	67fb      	str	r3, [r7, #124]	@ 0x7c
7000542a:	2300      	movs	r3, #0
7000542c:	67bb      	str	r3, [r7, #120]	@ 0x78
7000542e:	2300      	movs	r3, #0
70005430:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
70005432:	687b      	ldr	r3, [r7, #4]
70005434:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
70005436:	483a      	ldr	r0, [pc, #232]	@ (70005520 <ethernet_link_thread+0x114>)
70005438:	f7fb fd5f 	bl	70000efa <LAN8742_GetLinkState>
7000543c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
7000543e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
70005440:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
70005444:	089b      	lsrs	r3, r3, #2
70005446:	f003 0301 	and.w	r3, r3, #1
7000544a:	b2db      	uxtb	r3, r3
7000544c:	2b00      	cmp	r3, #0
7000544e:	d00c      	beq.n	7000546a <ethernet_link_thread+0x5e>
70005450:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
70005452:	2b01      	cmp	r3, #1
70005454:	dc09      	bgt.n	7000546a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
70005456:	4833      	ldr	r0, [pc, #204]	@ (70005524 <ethernet_link_thread+0x118>)
70005458:	f7fc f8fa 	bl	70001650 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
7000545c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
7000545e:	f007 fde3 	bl	7000d028 <netif_set_down>
    netif_set_link_down(netif);
70005462:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
70005464:	f007 fe2a 	bl	7000d0bc <netif_set_link_down>
70005468:	e055      	b.n	70005516 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
7000546a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
7000546c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
70005470:	f003 0304 	and.w	r3, r3, #4
70005474:	2b00      	cmp	r3, #0
70005476:	d14e      	bne.n	70005516 <ethernet_link_thread+0x10a>
70005478:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
7000547a:	2b01      	cmp	r3, #1
7000547c:	dd4b      	ble.n	70005516 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
7000547e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
70005480:	3b02      	subs	r3, #2
70005482:	2b03      	cmp	r3, #3
70005484:	d82a      	bhi.n	700054dc <ethernet_link_thread+0xd0>
70005486:	a201      	add	r2, pc, #4	@ (adr r2, 7000548c <ethernet_link_thread+0x80>)
70005488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
7000548c:	7000549d 	.word	0x7000549d
70005490:	700054af 	.word	0x700054af
70005494:	700054bf 	.word	0x700054bf
70005498:	700054cf 	.word	0x700054cf
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
7000549c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
700054a0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
700054a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
700054a6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
700054a8:	2301      	movs	r3, #1
700054aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
700054ac:	e017      	b.n	700054de <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
700054ae:	2300      	movs	r3, #0
700054b0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
700054b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
700054b6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
700054b8:	2301      	movs	r3, #1
700054ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
700054bc:	e00f      	b.n	700054de <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
700054be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
700054c2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
700054c4:	2300      	movs	r3, #0
700054c6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
700054c8:	2301      	movs	r3, #1
700054ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
700054cc:	e007      	b.n	700054de <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
700054ce:	2300      	movs	r3, #0
700054d0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
700054d2:	2300      	movs	r3, #0
700054d4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
700054d6:	2301      	movs	r3, #1
700054d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
700054da:	e000      	b.n	700054de <ethernet_link_thread+0xd2>
    default:
      break;
700054dc:	bf00      	nop
    }

    if(linkchanged)
700054de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
700054e0:	2b00      	cmp	r3, #0
700054e2:	d018      	beq.n	70005516 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
700054e4:	f107 0308 	add.w	r3, r7, #8
700054e8:	4619      	mov	r1, r3
700054ea:	480e      	ldr	r0, [pc, #56]	@ (70005524 <ethernet_link_thread+0x118>)
700054ec:	f7fc fcce 	bl	70001e8c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
700054f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
700054f2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
700054f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
700054f6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
700054f8:	f107 0308 	add.w	r3, r7, #8
700054fc:	4619      	mov	r1, r3
700054fe:	4809      	ldr	r0, [pc, #36]	@ (70005524 <ethernet_link_thread+0x118>)
70005500:	f7fc fe98 	bl	70002234 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
70005504:	4807      	ldr	r0, [pc, #28]	@ (70005524 <ethernet_link_thread+0x118>)
70005506:	f7fc f82f 	bl	70001568 <HAL_ETH_Start_IT>
      netif_set_up(netif);
7000550a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
7000550c:	f007 fd2e 	bl	7000cf6c <netif_set_up>
      netif_set_link_up(netif);
70005510:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
70005512:	f007 fdad 	bl	7000d070 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
70005516:	2064      	movs	r0, #100	@ 0x64
70005518:	f000 fa36 	bl	70005988 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
7000551c:	e78b      	b.n	70005436 <ethernet_link_thread+0x2a>
7000551e:	bf00      	nop
70005520:	24000270 	.word	0x24000270
70005524:	24000188 	.word	0x24000188

70005528 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
70005528:	b580      	push	{r7, lr}
7000552a:	b086      	sub	sp, #24
7000552c:	af02      	add	r7, sp, #8
7000552e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
70005530:	4812      	ldr	r0, [pc, #72]	@ (7000557c <HAL_ETH_RxAllocateCallback+0x54>)
70005532:	f007 fabb 	bl	7000caac <memp_malloc_pool>
70005536:	60f8      	str	r0, [r7, #12]
  if (p)
70005538:	68fb      	ldr	r3, [r7, #12]
7000553a:	2b00      	cmp	r3, #0
7000553c:	d014      	beq.n	70005568 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
7000553e:	68fb      	ldr	r3, [r7, #12]
70005540:	f103 0220 	add.w	r2, r3, #32
70005544:	687b      	ldr	r3, [r7, #4]
70005546:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
70005548:	68fb      	ldr	r3, [r7, #12]
7000554a:	4a0d      	ldr	r2, [pc, #52]	@ (70005580 <HAL_ETH_RxAllocateCallback+0x58>)
7000554c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
7000554e:	687b      	ldr	r3, [r7, #4]
70005550:	681b      	ldr	r3, [r3, #0]
70005552:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
70005556:	9201      	str	r2, [sp, #4]
70005558:	9300      	str	r3, [sp, #0]
7000555a:	68fb      	ldr	r3, [r7, #12]
7000555c:	2241      	movs	r2, #65	@ 0x41
7000555e:	2100      	movs	r1, #0
70005560:	2000      	movs	r0, #0
70005562:	f007 ffc1 	bl	7000d4e8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
70005566:	e005      	b.n	70005574 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
70005568:	4b06      	ldr	r3, [pc, #24]	@ (70005584 <HAL_ETH_RxAllocateCallback+0x5c>)
7000556a:	2201      	movs	r2, #1
7000556c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
7000556e:	687b      	ldr	r3, [r7, #4]
70005570:	2200      	movs	r2, #0
70005572:	601a      	str	r2, [r3, #0]
}
70005574:	bf00      	nop
70005576:	3710      	adds	r7, #16
70005578:	46bd      	mov	sp, r7
7000557a:	bd80      	pop	{r7, pc}
7000557c:	70017250 	.word	0x70017250
70005580:	70005181 	.word	0x70005181
70005584:	2400017c 	.word	0x2400017c

70005588 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
70005588:	b480      	push	{r7}
7000558a:	b08d      	sub	sp, #52	@ 0x34
7000558c:	af00      	add	r7, sp, #0
7000558e:	60f8      	str	r0, [r7, #12]
70005590:	60b9      	str	r1, [r7, #8]
70005592:	607a      	str	r2, [r7, #4]
70005594:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
70005596:	68fb      	ldr	r3, [r7, #12]
70005598:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
7000559a:	68bb      	ldr	r3, [r7, #8]
7000559c:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
7000559e:	2300      	movs	r3, #0
700055a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
700055a2:	687b      	ldr	r3, [r7, #4]
700055a4:	3b20      	subs	r3, #32
700055a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
700055a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
700055aa:	2200      	movs	r2, #0
700055ac:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
700055ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
700055b0:	2200      	movs	r2, #0
700055b2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
700055b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
700055b6:	887a      	ldrh	r2, [r7, #2]
700055b8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
700055ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700055bc:	681b      	ldr	r3, [r3, #0]
700055be:	2b00      	cmp	r3, #0
700055c0:	d103      	bne.n	700055ca <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
700055c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700055c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
700055c6:	601a      	str	r2, [r3, #0]
700055c8:	e003      	b.n	700055d2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
700055ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700055cc:	681b      	ldr	r3, [r3, #0]
700055ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
700055d0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
700055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700055d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
700055d6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
700055d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700055da:	681b      	ldr	r3, [r3, #0]
700055dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
700055de:	e009      	b.n	700055f4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
700055e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
700055e2:	891a      	ldrh	r2, [r3, #8]
700055e4:	887b      	ldrh	r3, [r7, #2]
700055e6:	4413      	add	r3, r2
700055e8:	b29a      	uxth	r2, r3
700055ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
700055ec:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
700055ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
700055f0:	681b      	ldr	r3, [r3, #0]
700055f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
700055f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
700055f6:	2b00      	cmp	r3, #0
700055f8:	d1f2      	bne.n	700055e0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
700055fa:	887b      	ldrh	r3, [r7, #2]
700055fc:	687a      	ldr	r2, [r7, #4]
700055fe:	623a      	str	r2, [r7, #32]
70005600:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
70005602:	69fb      	ldr	r3, [r7, #28]
70005604:	2b00      	cmp	r3, #0
70005606:	dd1d      	ble.n	70005644 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
70005608:	6a3b      	ldr	r3, [r7, #32]
7000560a:	f003 021f 	and.w	r2, r3, #31
7000560e:	69fb      	ldr	r3, [r7, #28]
70005610:	4413      	add	r3, r2
70005612:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
70005614:	6a3b      	ldr	r3, [r7, #32]
70005616:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
70005618:	f3bf 8f4f 	dsb	sy
}
7000561c:	bf00      	nop

      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
7000561e:	4a0d      	ldr	r2, [pc, #52]	@ (70005654 <HAL_ETH_RxLinkCallback+0xcc>)
70005620:	697b      	ldr	r3, [r7, #20]
70005622:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
70005626:	697b      	ldr	r3, [r7, #20]
70005628:	3320      	adds	r3, #32
7000562a:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
7000562c:	69bb      	ldr	r3, [r7, #24]
7000562e:	3b20      	subs	r3, #32
70005630:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
70005632:	69bb      	ldr	r3, [r7, #24]
70005634:	2b00      	cmp	r3, #0
70005636:	dcf2      	bgt.n	7000561e <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
70005638:	f3bf 8f4f 	dsb	sy
}
7000563c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
7000563e:	f3bf 8f6f 	isb	sy
}
70005642:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
70005644:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
70005646:	bf00      	nop
70005648:	3734      	adds	r7, #52	@ 0x34
7000564a:	46bd      	mov	sp, r7
7000564c:	f85d 7b04 	ldr.w	r7, [sp], #4
70005650:	4770      	bx	lr
70005652:	bf00      	nop
70005654:	e000ed00 	.word	0xe000ed00

70005658 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
70005658:	b580      	push	{r7, lr}
7000565a:	b082      	sub	sp, #8
7000565c:	af00      	add	r7, sp, #0
7000565e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
70005660:	6878      	ldr	r0, [r7, #4]
70005662:	f008 f8f1 	bl	7000d848 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
70005666:	bf00      	nop
70005668:	3708      	adds	r7, #8
7000566a:	46bd      	mov	sp, r7
7000566c:	bd80      	pop	{r7, pc}
	...

70005670 <__NVIC_SetPriority>:
{
70005670:	b480      	push	{r7}
70005672:	b083      	sub	sp, #12
70005674:	af00      	add	r7, sp, #0
70005676:	4603      	mov	r3, r0
70005678:	6039      	str	r1, [r7, #0]
7000567a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
7000567c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70005680:	2b00      	cmp	r3, #0
70005682:	db0a      	blt.n	7000569a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
70005684:	683b      	ldr	r3, [r7, #0]
70005686:	b2da      	uxtb	r2, r3
70005688:	490c      	ldr	r1, [pc, #48]	@ (700056bc <__NVIC_SetPriority+0x4c>)
7000568a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
7000568e:	0112      	lsls	r2, r2, #4
70005690:	b2d2      	uxtb	r2, r2
70005692:	440b      	add	r3, r1
70005694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
70005698:	e00a      	b.n	700056b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
7000569a:	683b      	ldr	r3, [r7, #0]
7000569c:	b2da      	uxtb	r2, r3
7000569e:	4908      	ldr	r1, [pc, #32]	@ (700056c0 <__NVIC_SetPriority+0x50>)
700056a0:	88fb      	ldrh	r3, [r7, #6]
700056a2:	f003 030f 	and.w	r3, r3, #15
700056a6:	3b04      	subs	r3, #4
700056a8:	0112      	lsls	r2, r2, #4
700056aa:	b2d2      	uxtb	r2, r2
700056ac:	440b      	add	r3, r1
700056ae:	761a      	strb	r2, [r3, #24]
}
700056b0:	bf00      	nop
700056b2:	370c      	adds	r7, #12
700056b4:	46bd      	mov	sp, r7
700056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
700056ba:	4770      	bx	lr
700056bc:	e000e100 	.word	0xe000e100
700056c0:	e000ed00 	.word	0xe000ed00

700056c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
700056c4:	b580      	push	{r7, lr}
700056c6:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
700056c8:	4b05      	ldr	r3, [pc, #20]	@ (700056e0 <SysTick_Handler+0x1c>)
700056ca:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
700056cc:	f003 fc44 	bl	70008f58 <xTaskGetSchedulerState>
700056d0:	4603      	mov	r3, r0
700056d2:	2b01      	cmp	r3, #1
700056d4:	d001      	beq.n	700056da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
700056d6:	f001 f947 	bl	70006968 <xPortSysTickHandler>
  }
}
700056da:	bf00      	nop
700056dc:	bd80      	pop	{r7, pc}
700056de:	bf00      	nop
700056e0:	e000e010 	.word	0xe000e010

700056e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
700056e4:	b580      	push	{r7, lr}
700056e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
700056e8:	2100      	movs	r1, #0
700056ea:	f06f 0004 	mvn.w	r0, #4
700056ee:	f7ff ffbf 	bl	70005670 <__NVIC_SetPriority>
#endif
}
700056f2:	bf00      	nop
700056f4:	bd80      	pop	{r7, pc}

700056f6 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
700056f6:	b580      	push	{r7, lr}
700056f8:	b086      	sub	sp, #24
700056fa:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
700056fc:	2300      	movs	r3, #0
700056fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
70005700:	f3ef 8305 	mrs	r3, IPSR
70005704:	60fb      	str	r3, [r7, #12]
  return(result);
70005706:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
70005708:	2b00      	cmp	r3, #0
7000570a:	d002      	beq.n	70005712 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
7000570c:	2301      	movs	r3, #1
7000570e:	617b      	str	r3, [r7, #20]
70005710:	e013      	b.n	7000573a <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
70005712:	f003 fc21 	bl	70008f58 <xTaskGetSchedulerState>
70005716:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
70005718:	693b      	ldr	r3, [r7, #16]
7000571a:	2b01      	cmp	r3, #1
7000571c:	d00d      	beq.n	7000573a <IRQ_Context+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
7000571e:	f3ef 8310 	mrs	r3, PRIMASK
70005722:	60bb      	str	r3, [r7, #8]
  return(result);
70005724:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
70005726:	2b00      	cmp	r3, #0
70005728:	d105      	bne.n	70005736 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
7000572a:	f3ef 8311 	mrs	r3, BASEPRI
7000572e:	607b      	str	r3, [r7, #4]
  return(result);
70005730:	687b      	ldr	r3, [r7, #4]
70005732:	2b00      	cmp	r3, #0
70005734:	d001      	beq.n	7000573a <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
70005736:	2301      	movs	r3, #1
70005738:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
7000573a:	697b      	ldr	r3, [r7, #20]
}
7000573c:	4618      	mov	r0, r3
7000573e:	3718      	adds	r7, #24
70005740:	46bd      	mov	sp, r7
70005742:	bd80      	pop	{r7, pc}

70005744 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
70005744:	b580      	push	{r7, lr}
70005746:	b082      	sub	sp, #8
70005748:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
7000574a:	f7ff ffd4 	bl	700056f6 <IRQ_Context>
7000574e:	4603      	mov	r3, r0
70005750:	2b00      	cmp	r3, #0
70005752:	d003      	beq.n	7000575c <osKernelInitialize+0x18>
    stat = osErrorISR;
70005754:	f06f 0305 	mvn.w	r3, #5
70005758:	607b      	str	r3, [r7, #4]
7000575a:	e012      	b.n	70005782 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
7000575c:	f003 fbfc 	bl	70008f58 <xTaskGetSchedulerState>
70005760:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
70005762:	683b      	ldr	r3, [r7, #0]
70005764:	2b01      	cmp	r3, #1
70005766:	d109      	bne.n	7000577c <osKernelInitialize+0x38>
70005768:	4b08      	ldr	r3, [pc, #32]	@ (7000578c <osKernelInitialize+0x48>)
7000576a:	681b      	ldr	r3, [r3, #0]
7000576c:	2b00      	cmp	r3, #0
7000576e:	d105      	bne.n	7000577c <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
70005770:	4b06      	ldr	r3, [pc, #24]	@ (7000578c <osKernelInitialize+0x48>)
70005772:	2201      	movs	r2, #1
70005774:	601a      	str	r2, [r3, #0]
      stat = osOK;
70005776:	2300      	movs	r3, #0
70005778:	607b      	str	r3, [r7, #4]
7000577a:	e002      	b.n	70005782 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
7000577c:	f04f 33ff 	mov.w	r3, #4294967295
70005780:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
70005782:	687b      	ldr	r3, [r7, #4]
}
70005784:	4618      	mov	r0, r3
70005786:	3708      	adds	r7, #8
70005788:	46bd      	mov	sp, r7
7000578a:	bd80      	pop	{r7, pc}
7000578c:	24000290 	.word	0x24000290

70005790 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
70005790:	b580      	push	{r7, lr}
70005792:	b082      	sub	sp, #8
70005794:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
70005796:	f7ff ffae 	bl	700056f6 <IRQ_Context>
7000579a:	4603      	mov	r3, r0
7000579c:	2b00      	cmp	r3, #0
7000579e:	d003      	beq.n	700057a8 <osKernelStart+0x18>
    stat = osErrorISR;
700057a0:	f06f 0305 	mvn.w	r3, #5
700057a4:	607b      	str	r3, [r7, #4]
700057a6:	e016      	b.n	700057d6 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
700057a8:	f003 fbd6 	bl	70008f58 <xTaskGetSchedulerState>
700057ac:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
700057ae:	683b      	ldr	r3, [r7, #0]
700057b0:	2b01      	cmp	r3, #1
700057b2:	d10d      	bne.n	700057d0 <osKernelStart+0x40>
700057b4:	4b0a      	ldr	r3, [pc, #40]	@ (700057e0 <osKernelStart+0x50>)
700057b6:	681b      	ldr	r3, [r3, #0]
700057b8:	2b01      	cmp	r3, #1
700057ba:	d109      	bne.n	700057d0 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
700057bc:	f7ff ff92 	bl	700056e4 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
700057c0:	4b07      	ldr	r3, [pc, #28]	@ (700057e0 <osKernelStart+0x50>)
700057c2:	2202      	movs	r2, #2
700057c4:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
700057c6:	f002 fde3 	bl	70008390 <vTaskStartScheduler>
      stat = osOK;
700057ca:	2300      	movs	r3, #0
700057cc:	607b      	str	r3, [r7, #4]
700057ce:	e002      	b.n	700057d6 <osKernelStart+0x46>
    } else {
      stat = osError;
700057d0:	f04f 33ff 	mov.w	r3, #4294967295
700057d4:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
700057d6:	687b      	ldr	r3, [r7, #4]
}
700057d8:	4618      	mov	r0, r3
700057da:	3708      	adds	r7, #8
700057dc:	46bd      	mov	sp, r7
700057de:	bd80      	pop	{r7, pc}
700057e0:	24000290 	.word	0x24000290

700057e4 <osKernelGetTickCount>:
}

/*
  Get the RTOS kernel tick count.
*/
uint32_t osKernelGetTickCount (void) {
700057e4:	b580      	push	{r7, lr}
700057e6:	b082      	sub	sp, #8
700057e8:	af00      	add	r7, sp, #0
  TickType_t ticks;

  if (IRQ_Context() != 0U) {
700057ea:	f7ff ff84 	bl	700056f6 <IRQ_Context>
700057ee:	4603      	mov	r3, r0
700057f0:	2b00      	cmp	r3, #0
700057f2:	d003      	beq.n	700057fc <osKernelGetTickCount+0x18>
    ticks = xTaskGetTickCountFromISR();
700057f4:	f002 ff5c 	bl	700086b0 <xTaskGetTickCountFromISR>
700057f8:	6078      	str	r0, [r7, #4]
700057fa:	e002      	b.n	70005802 <osKernelGetTickCount+0x1e>
  } else {
    ticks = xTaskGetTickCount();
700057fc:	f002 ff48 	bl	70008690 <xTaskGetTickCount>
70005800:	6078      	str	r0, [r7, #4]
  }

  /* Return kernel tick count */
  return (ticks);
70005802:	687b      	ldr	r3, [r7, #4]
}
70005804:	4618      	mov	r0, r3
70005806:	3708      	adds	r7, #8
70005808:	46bd      	mov	sp, r7
7000580a:	bd80      	pop	{r7, pc}

7000580c <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
7000580c:	b580      	push	{r7, lr}
7000580e:	b08e      	sub	sp, #56	@ 0x38
70005810:	af04      	add	r7, sp, #16
70005812:	60f8      	str	r0, [r7, #12]
70005814:	60b9      	str	r1, [r7, #8]
70005816:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
70005818:	2300      	movs	r3, #0
7000581a:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
7000581c:	f7ff ff6b 	bl	700056f6 <IRQ_Context>
70005820:	4603      	mov	r3, r0
70005822:	2b00      	cmp	r3, #0
70005824:	d17f      	bne.n	70005926 <osThreadNew+0x11a>
70005826:	68fb      	ldr	r3, [r7, #12]
70005828:	2b00      	cmp	r3, #0
7000582a:	d07c      	beq.n	70005926 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
7000582c:	f44f 7380 	mov.w	r3, #256	@ 0x100
70005830:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
70005832:	2318      	movs	r3, #24
70005834:	61fb      	str	r3, [r7, #28]

    name = NULL;
70005836:	2300      	movs	r3, #0
70005838:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
7000583a:	f04f 33ff 	mov.w	r3, #4294967295
7000583e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
70005840:	687b      	ldr	r3, [r7, #4]
70005842:	2b00      	cmp	r3, #0
70005844:	d045      	beq.n	700058d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
70005846:	687b      	ldr	r3, [r7, #4]
70005848:	681b      	ldr	r3, [r3, #0]
7000584a:	2b00      	cmp	r3, #0
7000584c:	d002      	beq.n	70005854 <osThreadNew+0x48>
        name = attr->name;
7000584e:	687b      	ldr	r3, [r7, #4]
70005850:	681b      	ldr	r3, [r3, #0]
70005852:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
70005854:	687b      	ldr	r3, [r7, #4]
70005856:	699b      	ldr	r3, [r3, #24]
70005858:	2b00      	cmp	r3, #0
7000585a:	d002      	beq.n	70005862 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
7000585c:	687b      	ldr	r3, [r7, #4]
7000585e:	699b      	ldr	r3, [r3, #24]
70005860:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
70005862:	69fb      	ldr	r3, [r7, #28]
70005864:	2b00      	cmp	r3, #0
70005866:	d008      	beq.n	7000587a <osThreadNew+0x6e>
70005868:	69fb      	ldr	r3, [r7, #28]
7000586a:	2b38      	cmp	r3, #56	@ 0x38
7000586c:	d805      	bhi.n	7000587a <osThreadNew+0x6e>
7000586e:	687b      	ldr	r3, [r7, #4]
70005870:	685b      	ldr	r3, [r3, #4]
70005872:	f003 0301 	and.w	r3, r3, #1
70005876:	2b00      	cmp	r3, #0
70005878:	d001      	beq.n	7000587e <osThreadNew+0x72>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
7000587a:	2300      	movs	r3, #0
7000587c:	e054      	b.n	70005928 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
7000587e:	687b      	ldr	r3, [r7, #4]
70005880:	695b      	ldr	r3, [r3, #20]
70005882:	2b00      	cmp	r3, #0
70005884:	d003      	beq.n	7000588e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
70005886:	687b      	ldr	r3, [r7, #4]
70005888:	695b      	ldr	r3, [r3, #20]
7000588a:	089b      	lsrs	r3, r3, #2
7000588c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
7000588e:	687b      	ldr	r3, [r7, #4]
70005890:	689b      	ldr	r3, [r3, #8]
70005892:	2b00      	cmp	r3, #0
70005894:	d00e      	beq.n	700058b4 <osThreadNew+0xa8>
70005896:	687b      	ldr	r3, [r7, #4]
70005898:	68db      	ldr	r3, [r3, #12]
7000589a:	2ba7      	cmp	r3, #167	@ 0xa7
7000589c:	d90a      	bls.n	700058b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
7000589e:	687b      	ldr	r3, [r7, #4]
700058a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
700058a2:	2b00      	cmp	r3, #0
700058a4:	d006      	beq.n	700058b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
700058a6:	687b      	ldr	r3, [r7, #4]
700058a8:	695b      	ldr	r3, [r3, #20]
700058aa:	2b00      	cmp	r3, #0
700058ac:	d002      	beq.n	700058b4 <osThreadNew+0xa8>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
700058ae:	2301      	movs	r3, #1
700058b0:	61bb      	str	r3, [r7, #24]
700058b2:	e010      	b.n	700058d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
700058b4:	687b      	ldr	r3, [r7, #4]
700058b6:	689b      	ldr	r3, [r3, #8]
700058b8:	2b00      	cmp	r3, #0
700058ba:	d10c      	bne.n	700058d6 <osThreadNew+0xca>
700058bc:	687b      	ldr	r3, [r7, #4]
700058be:	68db      	ldr	r3, [r3, #12]
700058c0:	2b00      	cmp	r3, #0
700058c2:	d108      	bne.n	700058d6 <osThreadNew+0xca>
700058c4:	687b      	ldr	r3, [r7, #4]
700058c6:	691b      	ldr	r3, [r3, #16]
700058c8:	2b00      	cmp	r3, #0
700058ca:	d104      	bne.n	700058d6 <osThreadNew+0xca>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
700058cc:	2300      	movs	r3, #0
700058ce:	61bb      	str	r3, [r7, #24]
700058d0:	e001      	b.n	700058d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
700058d2:	2300      	movs	r3, #0
700058d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
700058d6:	69bb      	ldr	r3, [r7, #24]
700058d8:	2b01      	cmp	r3, #1
700058da:	d110      	bne.n	700058fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
700058dc:	687b      	ldr	r3, [r7, #4]
700058de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
700058e0:	687a      	ldr	r2, [r7, #4]
700058e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
700058e4:	9202      	str	r2, [sp, #8]
700058e6:	9301      	str	r3, [sp, #4]
700058e8:	69fb      	ldr	r3, [r7, #28]
700058ea:	9300      	str	r3, [sp, #0]
700058ec:	68bb      	ldr	r3, [r7, #8]
700058ee:	6a3a      	ldr	r2, [r7, #32]
700058f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
700058f2:	68f8      	ldr	r0, [r7, #12]
700058f4:	f002 fa36 	bl	70007d64 <xTaskCreateStatic>
700058f8:	4603      	mov	r3, r0
700058fa:	617b      	str	r3, [r7, #20]
700058fc:	e013      	b.n	70005926 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
700058fe:	69bb      	ldr	r3, [r7, #24]
70005900:	2b00      	cmp	r3, #0
70005902:	d110      	bne.n	70005926 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
70005904:	6a3b      	ldr	r3, [r7, #32]
70005906:	b29a      	uxth	r2, r3
70005908:	f107 0314 	add.w	r3, r7, #20
7000590c:	9301      	str	r3, [sp, #4]
7000590e:	69fb      	ldr	r3, [r7, #28]
70005910:	9300      	str	r3, [sp, #0]
70005912:	68bb      	ldr	r3, [r7, #8]
70005914:	6a79      	ldr	r1, [r7, #36]	@ 0x24
70005916:	68f8      	ldr	r0, [r7, #12]
70005918:	f002 fa89 	bl	70007e2e <xTaskCreate>
7000591c:	4603      	mov	r3, r0
7000591e:	2b01      	cmp	r3, #1
70005920:	d001      	beq.n	70005926 <osThreadNew+0x11a>
            hTask = NULL;
70005922:	2300      	movs	r3, #0
70005924:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
70005926:	697b      	ldr	r3, [r7, #20]
}
70005928:	4618      	mov	r0, r3
7000592a:	3728      	adds	r7, #40	@ 0x28
7000592c:	46bd      	mov	sp, r7
7000592e:	bd80      	pop	{r7, pc}

70005930 <osThreadTerminate>:
}

/*
  Terminate execution of a thread.
*/
osStatus_t osThreadTerminate (osThreadId_t thread_id) {
70005930:	b580      	push	{r7, lr}
70005932:	b086      	sub	sp, #24
70005934:	af00      	add	r7, sp, #0
70005936:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
70005938:	687b      	ldr	r3, [r7, #4]
7000593a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IRQ_Context() != 0U) {
7000593c:	f7ff fedb 	bl	700056f6 <IRQ_Context>
70005940:	4603      	mov	r3, r0
70005942:	2b00      	cmp	r3, #0
70005944:	d003      	beq.n	7000594e <osThreadTerminate+0x1e>
    stat = osErrorISR;
70005946:	f06f 0305 	mvn.w	r3, #5
7000594a:	617b      	str	r3, [r7, #20]
7000594c:	e017      	b.n	7000597e <osThreadTerminate+0x4e>
  }
  else if (hTask == NULL) {
7000594e:	693b      	ldr	r3, [r7, #16]
70005950:	2b00      	cmp	r3, #0
70005952:	d103      	bne.n	7000595c <osThreadTerminate+0x2c>
    stat = osErrorParameter;
70005954:	f06f 0303 	mvn.w	r3, #3
70005958:	617b      	str	r3, [r7, #20]
7000595a:	e010      	b.n	7000597e <osThreadTerminate+0x4e>
  }
  else {
    tstate = eTaskGetState (hTask);
7000595c:	6938      	ldr	r0, [r7, #16]
7000595e:	f002 fc9d 	bl	7000829c <eTaskGetState>
70005962:	4603      	mov	r3, r0
70005964:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
70005966:	7bfb      	ldrb	r3, [r7, #15]
70005968:	2b04      	cmp	r3, #4
7000596a:	d005      	beq.n	70005978 <osThreadTerminate+0x48>
      stat = osOK;
7000596c:	2300      	movs	r3, #0
7000596e:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
70005970:	6938      	ldr	r0, [r7, #16]
70005972:	f002 fbe5 	bl	70008140 <vTaskDelete>
70005976:	e002      	b.n	7000597e <osThreadTerminate+0x4e>
    } else {
      stat = osErrorResource;
70005978:	f06f 0302 	mvn.w	r3, #2
7000597c:	617b      	str	r3, [r7, #20]
#else
  stat = osError;
#endif

  /* Return execution status */
  return (stat);
7000597e:	697b      	ldr	r3, [r7, #20]
}
70005980:	4618      	mov	r0, r3
70005982:	3718      	adds	r7, #24
70005984:	46bd      	mov	sp, r7
70005986:	bd80      	pop	{r7, pc}

70005988 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
70005988:	b580      	push	{r7, lr}
7000598a:	b084      	sub	sp, #16
7000598c:	af00      	add	r7, sp, #0
7000598e:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
70005990:	f7ff feb1 	bl	700056f6 <IRQ_Context>
70005994:	4603      	mov	r3, r0
70005996:	2b00      	cmp	r3, #0
70005998:	d003      	beq.n	700059a2 <osDelay+0x1a>
    stat = osErrorISR;
7000599a:	f06f 0305 	mvn.w	r3, #5
7000599e:	60fb      	str	r3, [r7, #12]
700059a0:	e007      	b.n	700059b2 <osDelay+0x2a>
  }
  else {
    stat = osOK;
700059a2:	2300      	movs	r3, #0
700059a4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
700059a6:	687b      	ldr	r3, [r7, #4]
700059a8:	2b00      	cmp	r3, #0
700059aa:	d002      	beq.n	700059b2 <osDelay+0x2a>
      vTaskDelay(ticks);
700059ac:	6878      	ldr	r0, [r7, #4]
700059ae:	f002 fc3f 	bl	70008230 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
700059b2:	68fb      	ldr	r3, [r7, #12]
}
700059b4:	4618      	mov	r0, r3
700059b6:	3710      	adds	r7, #16
700059b8:	46bd      	mov	sp, r7
700059ba:	bd80      	pop	{r7, pc}

700059bc <osMutexNew>:

  Limitations:
  - Priority inherit protocol is used by default, osMutexPrioInherit attribute is ignored.
  - Robust mutex is not supported, NULL is returned if used.
*/
osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
700059bc:	b580      	push	{r7, lr}
700059be:	b086      	sub	sp, #24
700059c0:	af00      	add	r7, sp, #0
700059c2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  uint32_t type;
  uint32_t rmtx;
  int32_t  mem;

  hMutex = NULL;
700059c4:	2300      	movs	r3, #0
700059c6:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() == 0U) {
700059c8:	f7ff fe95 	bl	700056f6 <IRQ_Context>
700059cc:	4603      	mov	r3, r0
700059ce:	2b00      	cmp	r3, #0
700059d0:	d174      	bne.n	70005abc <osMutexNew+0x100>
    if (attr != NULL) {
700059d2:	687b      	ldr	r3, [r7, #4]
700059d4:	2b00      	cmp	r3, #0
700059d6:	d003      	beq.n	700059e0 <osMutexNew+0x24>
      type = attr->attr_bits;
700059d8:	687b      	ldr	r3, [r7, #4]
700059da:	685b      	ldr	r3, [r3, #4]
700059dc:	613b      	str	r3, [r7, #16]
700059de:	e001      	b.n	700059e4 <osMutexNew+0x28>
    } else {
      type = 0U;
700059e0:	2300      	movs	r3, #0
700059e2:	613b      	str	r3, [r7, #16]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
700059e4:	693b      	ldr	r3, [r7, #16]
700059e6:	f003 0301 	and.w	r3, r3, #1
700059ea:	2b00      	cmp	r3, #0
700059ec:	d002      	beq.n	700059f4 <osMutexNew+0x38>
      rmtx = 1U;
700059ee:	2301      	movs	r3, #1
700059f0:	60fb      	str	r3, [r7, #12]
700059f2:	e001      	b.n	700059f8 <osMutexNew+0x3c>
    } else {
      rmtx = 0U;
700059f4:	2300      	movs	r3, #0
700059f6:	60fb      	str	r3, [r7, #12]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
700059f8:	693b      	ldr	r3, [r7, #16]
700059fa:	f003 0308 	and.w	r3, r3, #8
700059fe:	2b00      	cmp	r3, #0
70005a00:	d15c      	bne.n	70005abc <osMutexNew+0x100>
      mem = -1;
70005a02:	f04f 33ff 	mov.w	r3, #4294967295
70005a06:	60bb      	str	r3, [r7, #8]

      if (attr != NULL) {
70005a08:	687b      	ldr	r3, [r7, #4]
70005a0a:	2b00      	cmp	r3, #0
70005a0c:	d015      	beq.n	70005a3a <osMutexNew+0x7e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
70005a0e:	687b      	ldr	r3, [r7, #4]
70005a10:	689b      	ldr	r3, [r3, #8]
70005a12:	2b00      	cmp	r3, #0
70005a14:	d006      	beq.n	70005a24 <osMutexNew+0x68>
70005a16:	687b      	ldr	r3, [r7, #4]
70005a18:	68db      	ldr	r3, [r3, #12]
70005a1a:	2b4f      	cmp	r3, #79	@ 0x4f
70005a1c:	d902      	bls.n	70005a24 <osMutexNew+0x68>
          /* The memory for control block is provided, use static object */
          mem = 1;
70005a1e:	2301      	movs	r3, #1
70005a20:	60bb      	str	r3, [r7, #8]
70005a22:	e00c      	b.n	70005a3e <osMutexNew+0x82>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
70005a24:	687b      	ldr	r3, [r7, #4]
70005a26:	689b      	ldr	r3, [r3, #8]
70005a28:	2b00      	cmp	r3, #0
70005a2a:	d108      	bne.n	70005a3e <osMutexNew+0x82>
70005a2c:	687b      	ldr	r3, [r7, #4]
70005a2e:	68db      	ldr	r3, [r3, #12]
70005a30:	2b00      	cmp	r3, #0
70005a32:	d104      	bne.n	70005a3e <osMutexNew+0x82>
            /* Control block will be allocated from the dynamic pool */
            mem = 0;
70005a34:	2300      	movs	r3, #0
70005a36:	60bb      	str	r3, [r7, #8]
70005a38:	e001      	b.n	70005a3e <osMutexNew+0x82>
          }
        }
      }
      else {
        mem = 0;
70005a3a:	2300      	movs	r3, #0
70005a3c:	60bb      	str	r3, [r7, #8]
      }

      if (mem == 1) {
70005a3e:	68bb      	ldr	r3, [r7, #8]
70005a40:	2b01      	cmp	r3, #1
70005a42:	d112      	bne.n	70005a6a <osMutexNew+0xae>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
70005a44:	68fb      	ldr	r3, [r7, #12]
70005a46:	2b00      	cmp	r3, #0
70005a48:	d007      	beq.n	70005a5a <osMutexNew+0x9e>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
70005a4a:	687b      	ldr	r3, [r7, #4]
70005a4c:	689b      	ldr	r3, [r3, #8]
70005a4e:	4619      	mov	r1, r3
70005a50:	2004      	movs	r0, #4
70005a52:	f001 f9b8 	bl	70006dc6 <xQueueCreateMutexStatic>
70005a56:	6178      	str	r0, [r7, #20]
70005a58:	e016      	b.n	70005a88 <osMutexNew+0xcc>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
70005a5a:	687b      	ldr	r3, [r7, #4]
70005a5c:	689b      	ldr	r3, [r3, #8]
70005a5e:	4619      	mov	r1, r3
70005a60:	2001      	movs	r0, #1
70005a62:	f001 f9b0 	bl	70006dc6 <xQueueCreateMutexStatic>
70005a66:	6178      	str	r0, [r7, #20]
70005a68:	e00e      	b.n	70005a88 <osMutexNew+0xcc>
          }
        #endif
      }
      else {
        if (mem == 0) {
70005a6a:	68bb      	ldr	r3, [r7, #8]
70005a6c:	2b00      	cmp	r3, #0
70005a6e:	d10b      	bne.n	70005a88 <osMutexNew+0xcc>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
70005a70:	68fb      	ldr	r3, [r7, #12]
70005a72:	2b00      	cmp	r3, #0
70005a74:	d004      	beq.n	70005a80 <osMutexNew+0xc4>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
70005a76:	2004      	movs	r0, #4
70005a78:	f001 f98d 	bl	70006d96 <xQueueCreateMutex>
70005a7c:	6178      	str	r0, [r7, #20]
70005a7e:	e003      	b.n	70005a88 <osMutexNew+0xcc>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
70005a80:	2001      	movs	r0, #1
70005a82:	f001 f988 	bl	70006d96 <xQueueCreateMutex>
70005a86:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
70005a88:	697b      	ldr	r3, [r7, #20]
70005a8a:	2b00      	cmp	r3, #0
70005a8c:	d00c      	beq.n	70005aa8 <osMutexNew+0xec>
        if ((attr != NULL) && (attr->name != NULL)) {
70005a8e:	687b      	ldr	r3, [r7, #4]
70005a90:	2b00      	cmp	r3, #0
70005a92:	d009      	beq.n	70005aa8 <osMutexNew+0xec>
70005a94:	687b      	ldr	r3, [r7, #4]
70005a96:	681b      	ldr	r3, [r3, #0]
70005a98:	2b00      	cmp	r3, #0
70005a9a:	d005      	beq.n	70005aa8 <osMutexNew+0xec>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hMutex, attr->name);
70005a9c:	687b      	ldr	r3, [r7, #4]
70005a9e:	681b      	ldr	r3, [r3, #0]
70005aa0:	4619      	mov	r1, r3
70005aa2:	6978      	ldr	r0, [r7, #20]
70005aa4:	f002 f8a0 	bl	70007be8 <vQueueAddToRegistry>
        }
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
70005aa8:	697b      	ldr	r3, [r7, #20]
70005aaa:	2b00      	cmp	r3, #0
70005aac:	d006      	beq.n	70005abc <osMutexNew+0x100>
70005aae:	68fb      	ldr	r3, [r7, #12]
70005ab0:	2b00      	cmp	r3, #0
70005ab2:	d003      	beq.n	70005abc <osMutexNew+0x100>
        /* Set LSB as 'recursive mutex flag' */
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
70005ab4:	697b      	ldr	r3, [r7, #20]
70005ab6:	f043 0301 	orr.w	r3, r3, #1
70005aba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return mutex ID */
  return ((osMutexId_t)hMutex);
70005abc:	697b      	ldr	r3, [r7, #20]
}
70005abe:	4618      	mov	r0, r3
70005ac0:	3718      	adds	r7, #24
70005ac2:	46bd      	mov	sp, r7
70005ac4:	bd80      	pop	{r7, pc}

70005ac6 <osMutexAcquire>:

/*
  Acquire a Mutex or timeout if it is locked.
*/
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
70005ac6:	b580      	push	{r7, lr}
70005ac8:	b086      	sub	sp, #24
70005aca:	af00      	add	r7, sp, #0
70005acc:	6078      	str	r0, [r7, #4]
70005ace:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
70005ad0:	687b      	ldr	r3, [r7, #4]
70005ad2:	f023 0301 	bic.w	r3, r3, #1
70005ad6:	613b      	str	r3, [r7, #16]

  /* Extract recursive mutex flag */
  rmtx = (uint32_t)mutex_id & 1U;
70005ad8:	687b      	ldr	r3, [r7, #4]
70005ada:	f003 0301 	and.w	r3, r3, #1
70005ade:	60fb      	str	r3, [r7, #12]

  stat = osOK;
70005ae0:	2300      	movs	r3, #0
70005ae2:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() != 0U) {
70005ae4:	f7ff fe07 	bl	700056f6 <IRQ_Context>
70005ae8:	4603      	mov	r3, r0
70005aea:	2b00      	cmp	r3, #0
70005aec:	d003      	beq.n	70005af6 <osMutexAcquire+0x30>
    stat = osErrorISR;
70005aee:	f06f 0305 	mvn.w	r3, #5
70005af2:	617b      	str	r3, [r7, #20]
70005af4:	e02c      	b.n	70005b50 <osMutexAcquire+0x8a>
  }
  else if (hMutex == NULL) {
70005af6:	693b      	ldr	r3, [r7, #16]
70005af8:	2b00      	cmp	r3, #0
70005afa:	d103      	bne.n	70005b04 <osMutexAcquire+0x3e>
    stat = osErrorParameter;
70005afc:	f06f 0303 	mvn.w	r3, #3
70005b00:	617b      	str	r3, [r7, #20]
70005b02:	e025      	b.n	70005b50 <osMutexAcquire+0x8a>
  }
  else {
    if (rmtx != 0U) {
70005b04:	68fb      	ldr	r3, [r7, #12]
70005b06:	2b00      	cmp	r3, #0
70005b08:	d011      	beq.n	70005b2e <osMutexAcquire+0x68>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
70005b0a:	6839      	ldr	r1, [r7, #0]
70005b0c:	6938      	ldr	r0, [r7, #16]
70005b0e:	f001 f9aa 	bl	70006e66 <xQueueTakeMutexRecursive>
70005b12:	4603      	mov	r3, r0
70005b14:	2b01      	cmp	r3, #1
70005b16:	d01b      	beq.n	70005b50 <osMutexAcquire+0x8a>
        if (timeout != 0U) {
70005b18:	683b      	ldr	r3, [r7, #0]
70005b1a:	2b00      	cmp	r3, #0
70005b1c:	d003      	beq.n	70005b26 <osMutexAcquire+0x60>
          stat = osErrorTimeout;
70005b1e:	f06f 0301 	mvn.w	r3, #1
70005b22:	617b      	str	r3, [r7, #20]
70005b24:	e014      	b.n	70005b50 <osMutexAcquire+0x8a>
        } else {
          stat = osErrorResource;
70005b26:	f06f 0302 	mvn.w	r3, #2
70005b2a:	617b      	str	r3, [r7, #20]
70005b2c:	e010      	b.n	70005b50 <osMutexAcquire+0x8a>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
70005b2e:	6839      	ldr	r1, [r7, #0]
70005b30:	6938      	ldr	r0, [r7, #16]
70005b32:	f001 fd73 	bl	7000761c <xQueueSemaphoreTake>
70005b36:	4603      	mov	r3, r0
70005b38:	2b01      	cmp	r3, #1
70005b3a:	d009      	beq.n	70005b50 <osMutexAcquire+0x8a>
        if (timeout != 0U) {
70005b3c:	683b      	ldr	r3, [r7, #0]
70005b3e:	2b00      	cmp	r3, #0
70005b40:	d003      	beq.n	70005b4a <osMutexAcquire+0x84>
          stat = osErrorTimeout;
70005b42:	f06f 0301 	mvn.w	r3, #1
70005b46:	617b      	str	r3, [r7, #20]
70005b48:	e002      	b.n	70005b50 <osMutexAcquire+0x8a>
        } else {
          stat = osErrorResource;
70005b4a:	f06f 0302 	mvn.w	r3, #2
70005b4e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
70005b50:	697b      	ldr	r3, [r7, #20]
}
70005b52:	4618      	mov	r0, r3
70005b54:	3718      	adds	r7, #24
70005b56:	46bd      	mov	sp, r7
70005b58:	bd80      	pop	{r7, pc}

70005b5a <osMutexRelease>:

/*
  Release a Mutex that was acquired by osMutexAcquire.
*/
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
70005b5a:	b580      	push	{r7, lr}
70005b5c:	b086      	sub	sp, #24
70005b5e:	af00      	add	r7, sp, #0
70005b60:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
70005b62:	687b      	ldr	r3, [r7, #4]
70005b64:	f023 0301 	bic.w	r3, r3, #1
70005b68:	613b      	str	r3, [r7, #16]

  /* Extract recursive mutex flag */
  rmtx = (uint32_t)mutex_id & 1U;
70005b6a:	687b      	ldr	r3, [r7, #4]
70005b6c:	f003 0301 	and.w	r3, r3, #1
70005b70:	60fb      	str	r3, [r7, #12]

  stat = osOK;
70005b72:	2300      	movs	r3, #0
70005b74:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() != 0U) {
70005b76:	f7ff fdbe 	bl	700056f6 <IRQ_Context>
70005b7a:	4603      	mov	r3, r0
70005b7c:	2b00      	cmp	r3, #0
70005b7e:	d003      	beq.n	70005b88 <osMutexRelease+0x2e>
    stat = osErrorISR;
70005b80:	f06f 0305 	mvn.w	r3, #5
70005b84:	617b      	str	r3, [r7, #20]
70005b86:	e01f      	b.n	70005bc8 <osMutexRelease+0x6e>
  }
  else if (hMutex == NULL) {
70005b88:	693b      	ldr	r3, [r7, #16]
70005b8a:	2b00      	cmp	r3, #0
70005b8c:	d103      	bne.n	70005b96 <osMutexRelease+0x3c>
    stat = osErrorParameter;
70005b8e:	f06f 0303 	mvn.w	r3, #3
70005b92:	617b      	str	r3, [r7, #20]
70005b94:	e018      	b.n	70005bc8 <osMutexRelease+0x6e>
  }
  else {
    if (rmtx != 0U) {
70005b96:	68fb      	ldr	r3, [r7, #12]
70005b98:	2b00      	cmp	r3, #0
70005b9a:	d009      	beq.n	70005bb0 <osMutexRelease+0x56>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
70005b9c:	6938      	ldr	r0, [r7, #16]
70005b9e:	f001 f92d 	bl	70006dfc <xQueueGiveMutexRecursive>
70005ba2:	4603      	mov	r3, r0
70005ba4:	2b01      	cmp	r3, #1
70005ba6:	d00f      	beq.n	70005bc8 <osMutexRelease+0x6e>
        stat = osErrorResource;
70005ba8:	f06f 0302 	mvn.w	r3, #2
70005bac:	617b      	str	r3, [r7, #20]
70005bae:	e00b      	b.n	70005bc8 <osMutexRelease+0x6e>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
70005bb0:	2300      	movs	r3, #0
70005bb2:	2200      	movs	r2, #0
70005bb4:	2100      	movs	r1, #0
70005bb6:	6938      	ldr	r0, [r7, #16]
70005bb8:	f001 f9ee 	bl	70006f98 <xQueueGenericSend>
70005bbc:	4603      	mov	r3, r0
70005bbe:	2b01      	cmp	r3, #1
70005bc0:	d002      	beq.n	70005bc8 <osMutexRelease+0x6e>
        stat = osErrorResource;
70005bc2:	f06f 0302 	mvn.w	r3, #2
70005bc6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
70005bc8:	697b      	ldr	r3, [r7, #20]
}
70005bca:	4618      	mov	r0, r3
70005bcc:	3718      	adds	r7, #24
70005bce:	46bd      	mov	sp, r7
70005bd0:	bd80      	pop	{r7, pc}

70005bd2 <osSemaphoreNew>:
/* ==== Semaphore Management Functions ==== */

/*
  Create and Initialize a Semaphore object.
*/
osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
70005bd2:	b580      	push	{r7, lr}
70005bd4:	b088      	sub	sp, #32
70005bd6:	af02      	add	r7, sp, #8
70005bd8:	60f8      	str	r0, [r7, #12]
70005bda:	60b9      	str	r1, [r7, #8]
70005bdc:	607a      	str	r2, [r7, #4]
  SemaphoreHandle_t hSemaphore;
  int32_t mem;

  hSemaphore = NULL;
70005bde:	2300      	movs	r3, #0
70005be0:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (max_count > 0U) && (initial_count <= max_count)) {
70005be2:	f7ff fd88 	bl	700056f6 <IRQ_Context>
70005be6:	4603      	mov	r3, r0
70005be8:	2b00      	cmp	r3, #0
70005bea:	d175      	bne.n	70005cd8 <osSemaphoreNew+0x106>
70005bec:	68fb      	ldr	r3, [r7, #12]
70005bee:	2b00      	cmp	r3, #0
70005bf0:	d072      	beq.n	70005cd8 <osSemaphoreNew+0x106>
70005bf2:	68ba      	ldr	r2, [r7, #8]
70005bf4:	68fb      	ldr	r3, [r7, #12]
70005bf6:	429a      	cmp	r2, r3
70005bf8:	d86e      	bhi.n	70005cd8 <osSemaphoreNew+0x106>
    mem = -1;
70005bfa:	f04f 33ff 	mov.w	r3, #4294967295
70005bfe:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
70005c00:	687b      	ldr	r3, [r7, #4]
70005c02:	2b00      	cmp	r3, #0
70005c04:	d015      	beq.n	70005c32 <osSemaphoreNew+0x60>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
70005c06:	687b      	ldr	r3, [r7, #4]
70005c08:	689b      	ldr	r3, [r3, #8]
70005c0a:	2b00      	cmp	r3, #0
70005c0c:	d006      	beq.n	70005c1c <osSemaphoreNew+0x4a>
70005c0e:	687b      	ldr	r3, [r7, #4]
70005c10:	68db      	ldr	r3, [r3, #12]
70005c12:	2b4f      	cmp	r3, #79	@ 0x4f
70005c14:	d902      	bls.n	70005c1c <osSemaphoreNew+0x4a>
        /* The memory for control block is provided, use static object */
        mem = 1;
70005c16:	2301      	movs	r3, #1
70005c18:	613b      	str	r3, [r7, #16]
70005c1a:	e00c      	b.n	70005c36 <osSemaphoreNew+0x64>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
70005c1c:	687b      	ldr	r3, [r7, #4]
70005c1e:	689b      	ldr	r3, [r3, #8]
70005c20:	2b00      	cmp	r3, #0
70005c22:	d108      	bne.n	70005c36 <osSemaphoreNew+0x64>
70005c24:	687b      	ldr	r3, [r7, #4]
70005c26:	68db      	ldr	r3, [r3, #12]
70005c28:	2b00      	cmp	r3, #0
70005c2a:	d104      	bne.n	70005c36 <osSemaphoreNew+0x64>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
70005c2c:	2300      	movs	r3, #0
70005c2e:	613b      	str	r3, [r7, #16]
70005c30:	e001      	b.n	70005c36 <osSemaphoreNew+0x64>
        }
      }
    }
    else {
      mem = 0;
70005c32:	2300      	movs	r3, #0
70005c34:	613b      	str	r3, [r7, #16]
    }

    if (mem != -1) {
70005c36:	693b      	ldr	r3, [r7, #16]
70005c38:	f1b3 3fff 	cmp.w	r3, #4294967295
70005c3c:	d04c      	beq.n	70005cd8 <osSemaphoreNew+0x106>
      if (max_count == 1U) {
70005c3e:	68fb      	ldr	r3, [r7, #12]
70005c40:	2b01      	cmp	r3, #1
70005c42:	d128      	bne.n	70005c96 <osSemaphoreNew+0xc4>
        if (mem == 1) {
70005c44:	693b      	ldr	r3, [r7, #16]
70005c46:	2b01      	cmp	r3, #1
70005c48:	d10a      	bne.n	70005c60 <osSemaphoreNew+0x8e>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
70005c4a:	687b      	ldr	r3, [r7, #4]
70005c4c:	689b      	ldr	r3, [r3, #8]
70005c4e:	2203      	movs	r2, #3
70005c50:	9200      	str	r2, [sp, #0]
70005c52:	2200      	movs	r2, #0
70005c54:	2100      	movs	r1, #0
70005c56:	2001      	movs	r0, #1
70005c58:	f000 ffac 	bl	70006bb4 <xQueueGenericCreateStatic>
70005c5c:	6178      	str	r0, [r7, #20]
70005c5e:	e005      	b.n	70005c6c <osSemaphoreNew+0x9a>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
70005c60:	2203      	movs	r2, #3
70005c62:	2100      	movs	r1, #0
70005c64:	2001      	movs	r0, #1
70005c66:	f001 f806 	bl	70006c76 <xQueueGenericCreate>
70005c6a:	6178      	str	r0, [r7, #20]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
70005c6c:	697b      	ldr	r3, [r7, #20]
70005c6e:	2b00      	cmp	r3, #0
70005c70:	d022      	beq.n	70005cb8 <osSemaphoreNew+0xe6>
70005c72:	68bb      	ldr	r3, [r7, #8]
70005c74:	2b00      	cmp	r3, #0
70005c76:	d01f      	beq.n	70005cb8 <osSemaphoreNew+0xe6>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
70005c78:	2300      	movs	r3, #0
70005c7a:	2200      	movs	r2, #0
70005c7c:	2100      	movs	r1, #0
70005c7e:	6978      	ldr	r0, [r7, #20]
70005c80:	f001 f98a 	bl	70006f98 <xQueueGenericSend>
70005c84:	4603      	mov	r3, r0
70005c86:	2b01      	cmp	r3, #1
70005c88:	d016      	beq.n	70005cb8 <osSemaphoreNew+0xe6>
            vSemaphoreDelete (hSemaphore);
70005c8a:	6978      	ldr	r0, [r7, #20]
70005c8c:	f001 fe60 	bl	70007950 <vQueueDelete>
            hSemaphore = NULL;
70005c90:	2300      	movs	r3, #0
70005c92:	617b      	str	r3, [r7, #20]
70005c94:	e010      	b.n	70005cb8 <osSemaphoreNew+0xe6>
          }
        }
      }
      else {
        if (mem == 1) {
70005c96:	693b      	ldr	r3, [r7, #16]
70005c98:	2b01      	cmp	r3, #1
70005c9a:	d108      	bne.n	70005cae <osSemaphoreNew+0xdc>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
70005c9c:	687b      	ldr	r3, [r7, #4]
70005c9e:	689b      	ldr	r3, [r3, #8]
70005ca0:	461a      	mov	r2, r3
70005ca2:	68b9      	ldr	r1, [r7, #8]
70005ca4:	68f8      	ldr	r0, [r7, #12]
70005ca6:	f001 f915 	bl	70006ed4 <xQueueCreateCountingSemaphoreStatic>
70005caa:	6178      	str	r0, [r7, #20]
70005cac:	e004      	b.n	70005cb8 <osSemaphoreNew+0xe6>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
70005cae:	68b9      	ldr	r1, [r7, #8]
70005cb0:	68f8      	ldr	r0, [r7, #12]
70005cb2:	f001 f942 	bl	70006f3a <xQueueCreateCountingSemaphore>
70005cb6:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
70005cb8:	697b      	ldr	r3, [r7, #20]
70005cba:	2b00      	cmp	r3, #0
70005cbc:	d00c      	beq.n	70005cd8 <osSemaphoreNew+0x106>
        if ((attr != NULL) && (attr->name != NULL)) {
70005cbe:	687b      	ldr	r3, [r7, #4]
70005cc0:	2b00      	cmp	r3, #0
70005cc2:	d009      	beq.n	70005cd8 <osSemaphoreNew+0x106>
70005cc4:	687b      	ldr	r3, [r7, #4]
70005cc6:	681b      	ldr	r3, [r3, #0]
70005cc8:	2b00      	cmp	r3, #0
70005cca:	d005      	beq.n	70005cd8 <osSemaphoreNew+0x106>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hSemaphore, attr->name);
70005ccc:	687b      	ldr	r3, [r7, #4]
70005cce:	681b      	ldr	r3, [r3, #0]
70005cd0:	4619      	mov	r1, r3
70005cd2:	6978      	ldr	r0, [r7, #20]
70005cd4:	f001 ff88 	bl	70007be8 <vQueueAddToRegistry>
      #endif
    }
  }

  /* Return semaphore ID */
  return ((osSemaphoreId_t)hSemaphore);
70005cd8:	697b      	ldr	r3, [r7, #20]
}
70005cda:	4618      	mov	r0, r3
70005cdc:	3718      	adds	r7, #24
70005cde:	46bd      	mov	sp, r7
70005ce0:	bd80      	pop	{r7, pc}
	...

70005ce4 <osSemaphoreAcquire>:

/*
  Acquire a Semaphore token or timeout if no tokens are available.
*/
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
70005ce4:	b580      	push	{r7, lr}
70005ce6:	b086      	sub	sp, #24
70005ce8:	af00      	add	r7, sp, #0
70005cea:	6078      	str	r0, [r7, #4]
70005cec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
70005cee:	687b      	ldr	r3, [r7, #4]
70005cf0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
70005cf2:	2300      	movs	r3, #0
70005cf4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
70005cf6:	693b      	ldr	r3, [r7, #16]
70005cf8:	2b00      	cmp	r3, #0
70005cfa:	d103      	bne.n	70005d04 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
70005cfc:	f06f 0303 	mvn.w	r3, #3
70005d00:	617b      	str	r3, [r7, #20]
70005d02:	e038      	b.n	70005d76 <osSemaphoreAcquire+0x92>
  }
  else if (IRQ_Context() != 0U) {
70005d04:	f7ff fcf7 	bl	700056f6 <IRQ_Context>
70005d08:	4603      	mov	r3, r0
70005d0a:	2b00      	cmp	r3, #0
70005d0c:	d022      	beq.n	70005d54 <osSemaphoreAcquire+0x70>
    if (timeout != 0U) {
70005d0e:	683b      	ldr	r3, [r7, #0]
70005d10:	2b00      	cmp	r3, #0
70005d12:	d003      	beq.n	70005d1c <osSemaphoreAcquire+0x38>
      stat = osErrorParameter;
70005d14:	f06f 0303 	mvn.w	r3, #3
70005d18:	617b      	str	r3, [r7, #20]
70005d1a:	e02c      	b.n	70005d76 <osSemaphoreAcquire+0x92>
    }
    else {
      yield = pdFALSE;
70005d1c:	2300      	movs	r3, #0
70005d1e:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
70005d20:	f107 030c 	add.w	r3, r7, #12
70005d24:	461a      	mov	r2, r3
70005d26:	2100      	movs	r1, #0
70005d28:	6938      	ldr	r0, [r7, #16]
70005d2a:	f001 fd77 	bl	7000781c <xQueueReceiveFromISR>
70005d2e:	4603      	mov	r3, r0
70005d30:	2b01      	cmp	r3, #1
70005d32:	d003      	beq.n	70005d3c <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
70005d34:	f06f 0302 	mvn.w	r3, #2
70005d38:	617b      	str	r3, [r7, #20]
70005d3a:	e01c      	b.n	70005d76 <osSemaphoreAcquire+0x92>
      } else {
        portYIELD_FROM_ISR (yield);
70005d3c:	68fb      	ldr	r3, [r7, #12]
70005d3e:	2b00      	cmp	r3, #0
70005d40:	d019      	beq.n	70005d76 <osSemaphoreAcquire+0x92>
70005d42:	4b0f      	ldr	r3, [pc, #60]	@ (70005d80 <osSemaphoreAcquire+0x9c>)
70005d44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70005d48:	601a      	str	r2, [r3, #0]
70005d4a:	f3bf 8f4f 	dsb	sy
70005d4e:	f3bf 8f6f 	isb	sy
70005d52:	e010      	b.n	70005d76 <osSemaphoreAcquire+0x92>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
70005d54:	6839      	ldr	r1, [r7, #0]
70005d56:	6938      	ldr	r0, [r7, #16]
70005d58:	f001 fc60 	bl	7000761c <xQueueSemaphoreTake>
70005d5c:	4603      	mov	r3, r0
70005d5e:	2b01      	cmp	r3, #1
70005d60:	d009      	beq.n	70005d76 <osSemaphoreAcquire+0x92>
      if (timeout != 0U) {
70005d62:	683b      	ldr	r3, [r7, #0]
70005d64:	2b00      	cmp	r3, #0
70005d66:	d003      	beq.n	70005d70 <osSemaphoreAcquire+0x8c>
        stat = osErrorTimeout;
70005d68:	f06f 0301 	mvn.w	r3, #1
70005d6c:	617b      	str	r3, [r7, #20]
70005d6e:	e002      	b.n	70005d76 <osSemaphoreAcquire+0x92>
      } else {
        stat = osErrorResource;
70005d70:	f06f 0302 	mvn.w	r3, #2
70005d74:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
70005d76:	697b      	ldr	r3, [r7, #20]
}
70005d78:	4618      	mov	r0, r3
70005d7a:	3718      	adds	r7, #24
70005d7c:	46bd      	mov	sp, r7
70005d7e:	bd80      	pop	{r7, pc}
70005d80:	e000ed04 	.word	0xe000ed04

70005d84 <osSemaphoreRelease>:

/*
  Release a Semaphore token up to the initial maximum count.
*/
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
70005d84:	b580      	push	{r7, lr}
70005d86:	b086      	sub	sp, #24
70005d88:	af00      	add	r7, sp, #0
70005d8a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
70005d8c:	687b      	ldr	r3, [r7, #4]
70005d8e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
70005d90:	2300      	movs	r3, #0
70005d92:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
70005d94:	693b      	ldr	r3, [r7, #16]
70005d96:	2b00      	cmp	r3, #0
70005d98:	d103      	bne.n	70005da2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
70005d9a:	f06f 0303 	mvn.w	r3, #3
70005d9e:	617b      	str	r3, [r7, #20]
70005da0:	e02b      	b.n	70005dfa <osSemaphoreRelease+0x76>
  }
  else if (IRQ_Context() != 0U) {
70005da2:	f7ff fca8 	bl	700056f6 <IRQ_Context>
70005da6:	4603      	mov	r3, r0
70005da8:	2b00      	cmp	r3, #0
70005daa:	d01a      	beq.n	70005de2 <osSemaphoreRelease+0x5e>
    yield = pdFALSE;
70005dac:	2300      	movs	r3, #0
70005dae:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
70005db0:	f107 030c 	add.w	r3, r7, #12
70005db4:	4619      	mov	r1, r3
70005db6:	6938      	ldr	r0, [r7, #16]
70005db8:	f001 faa6 	bl	70007308 <xQueueGiveFromISR>
70005dbc:	4603      	mov	r3, r0
70005dbe:	2b01      	cmp	r3, #1
70005dc0:	d003      	beq.n	70005dca <osSemaphoreRelease+0x46>
      stat = osErrorResource;
70005dc2:	f06f 0302 	mvn.w	r3, #2
70005dc6:	617b      	str	r3, [r7, #20]
70005dc8:	e017      	b.n	70005dfa <osSemaphoreRelease+0x76>
    } else {
      portYIELD_FROM_ISR (yield);
70005dca:	68fb      	ldr	r3, [r7, #12]
70005dcc:	2b00      	cmp	r3, #0
70005dce:	d014      	beq.n	70005dfa <osSemaphoreRelease+0x76>
70005dd0:	4b0c      	ldr	r3, [pc, #48]	@ (70005e04 <osSemaphoreRelease+0x80>)
70005dd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70005dd6:	601a      	str	r2, [r3, #0]
70005dd8:	f3bf 8f4f 	dsb	sy
70005ddc:	f3bf 8f6f 	isb	sy
70005de0:	e00b      	b.n	70005dfa <osSemaphoreRelease+0x76>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
70005de2:	2300      	movs	r3, #0
70005de4:	2200      	movs	r2, #0
70005de6:	2100      	movs	r1, #0
70005de8:	6938      	ldr	r0, [r7, #16]
70005dea:	f001 f8d5 	bl	70006f98 <xQueueGenericSend>
70005dee:	4603      	mov	r3, r0
70005df0:	2b01      	cmp	r3, #1
70005df2:	d002      	beq.n	70005dfa <osSemaphoreRelease+0x76>
      stat = osErrorResource;
70005df4:	f06f 0302 	mvn.w	r3, #2
70005df8:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return execution status */
  return (stat);
70005dfa:	697b      	ldr	r3, [r7, #20]
}
70005dfc:	4618      	mov	r0, r3
70005dfe:	3718      	adds	r7, #24
70005e00:	46bd      	mov	sp, r7
70005e02:	bd80      	pop	{r7, pc}
70005e04:	e000ed04 	.word	0xe000ed04

70005e08 <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
70005e08:	b580      	push	{r7, lr}
70005e0a:	b088      	sub	sp, #32
70005e0c:	af02      	add	r7, sp, #8
70005e0e:	60f8      	str	r0, [r7, #12]
70005e10:	60b9      	str	r1, [r7, #8]
70005e12:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
70005e14:	2300      	movs	r3, #0
70005e16:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
70005e18:	f7ff fc6d 	bl	700056f6 <IRQ_Context>
70005e1c:	4603      	mov	r3, r0
70005e1e:	2b00      	cmp	r3, #0
70005e20:	d15f      	bne.n	70005ee2 <osMessageQueueNew+0xda>
70005e22:	68fb      	ldr	r3, [r7, #12]
70005e24:	2b00      	cmp	r3, #0
70005e26:	d05c      	beq.n	70005ee2 <osMessageQueueNew+0xda>
70005e28:	68bb      	ldr	r3, [r7, #8]
70005e2a:	2b00      	cmp	r3, #0
70005e2c:	d059      	beq.n	70005ee2 <osMessageQueueNew+0xda>
    mem = -1;
70005e2e:	f04f 33ff 	mov.w	r3, #4294967295
70005e32:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
70005e34:	687b      	ldr	r3, [r7, #4]
70005e36:	2b00      	cmp	r3, #0
70005e38:	d029      	beq.n	70005e8e <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
70005e3a:	687b      	ldr	r3, [r7, #4]
70005e3c:	689b      	ldr	r3, [r3, #8]
70005e3e:	2b00      	cmp	r3, #0
70005e40:	d012      	beq.n	70005e68 <osMessageQueueNew+0x60>
70005e42:	687b      	ldr	r3, [r7, #4]
70005e44:	68db      	ldr	r3, [r3, #12]
70005e46:	2b4f      	cmp	r3, #79	@ 0x4f
70005e48:	d90e      	bls.n	70005e68 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
70005e4a:	687b      	ldr	r3, [r7, #4]
70005e4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
70005e4e:	2b00      	cmp	r3, #0
70005e50:	d00a      	beq.n	70005e68 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
70005e52:	687b      	ldr	r3, [r7, #4]
70005e54:	695a      	ldr	r2, [r3, #20]
70005e56:	68fb      	ldr	r3, [r7, #12]
70005e58:	68b9      	ldr	r1, [r7, #8]
70005e5a:	fb01 f303 	mul.w	r3, r1, r3
70005e5e:	429a      	cmp	r2, r3
70005e60:	d302      	bcc.n	70005e68 <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
70005e62:	2301      	movs	r3, #1
70005e64:	613b      	str	r3, [r7, #16]
70005e66:	e014      	b.n	70005e92 <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
70005e68:	687b      	ldr	r3, [r7, #4]
70005e6a:	689b      	ldr	r3, [r3, #8]
70005e6c:	2b00      	cmp	r3, #0
70005e6e:	d110      	bne.n	70005e92 <osMessageQueueNew+0x8a>
70005e70:	687b      	ldr	r3, [r7, #4]
70005e72:	68db      	ldr	r3, [r3, #12]
70005e74:	2b00      	cmp	r3, #0
70005e76:	d10c      	bne.n	70005e92 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
70005e78:	687b      	ldr	r3, [r7, #4]
70005e7a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
70005e7c:	2b00      	cmp	r3, #0
70005e7e:	d108      	bne.n	70005e92 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
70005e80:	687b      	ldr	r3, [r7, #4]
70005e82:	695b      	ldr	r3, [r3, #20]
70005e84:	2b00      	cmp	r3, #0
70005e86:	d104      	bne.n	70005e92 <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
70005e88:	2300      	movs	r3, #0
70005e8a:	613b      	str	r3, [r7, #16]
70005e8c:	e001      	b.n	70005e92 <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
70005e8e:	2300      	movs	r3, #0
70005e90:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
70005e92:	693b      	ldr	r3, [r7, #16]
70005e94:	2b01      	cmp	r3, #1
70005e96:	d10b      	bne.n	70005eb0 <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
70005e98:	687b      	ldr	r3, [r7, #4]
70005e9a:	691a      	ldr	r2, [r3, #16]
70005e9c:	687b      	ldr	r3, [r7, #4]
70005e9e:	689b      	ldr	r3, [r3, #8]
70005ea0:	2100      	movs	r1, #0
70005ea2:	9100      	str	r1, [sp, #0]
70005ea4:	68b9      	ldr	r1, [r7, #8]
70005ea6:	68f8      	ldr	r0, [r7, #12]
70005ea8:	f000 fe84 	bl	70006bb4 <xQueueGenericCreateStatic>
70005eac:	6178      	str	r0, [r7, #20]
70005eae:	e008      	b.n	70005ec2 <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
70005eb0:	693b      	ldr	r3, [r7, #16]
70005eb2:	2b00      	cmp	r3, #0
70005eb4:	d105      	bne.n	70005ec2 <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
70005eb6:	2200      	movs	r2, #0
70005eb8:	68b9      	ldr	r1, [r7, #8]
70005eba:	68f8      	ldr	r0, [r7, #12]
70005ebc:	f000 fedb 	bl	70006c76 <xQueueGenericCreate>
70005ec0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
70005ec2:	697b      	ldr	r3, [r7, #20]
70005ec4:	2b00      	cmp	r3, #0
70005ec6:	d00c      	beq.n	70005ee2 <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
70005ec8:	687b      	ldr	r3, [r7, #4]
70005eca:	2b00      	cmp	r3, #0
70005ecc:	d009      	beq.n	70005ee2 <osMessageQueueNew+0xda>
70005ece:	687b      	ldr	r3, [r7, #4]
70005ed0:	681b      	ldr	r3, [r3, #0]
70005ed2:	2b00      	cmp	r3, #0
70005ed4:	d005      	beq.n	70005ee2 <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
70005ed6:	687b      	ldr	r3, [r7, #4]
70005ed8:	681b      	ldr	r3, [r3, #0]
70005eda:	4619      	mov	r1, r3
70005edc:	6978      	ldr	r0, [r7, #20]
70005ede:	f001 fe83 	bl	70007be8 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
70005ee2:	697b      	ldr	r3, [r7, #20]
}
70005ee4:	4618      	mov	r0, r3
70005ee6:	3718      	adds	r7, #24
70005ee8:	46bd      	mov	sp, r7
70005eea:	bd80      	pop	{r7, pc}

70005eec <osMessageQueuePut>:
  Put a Message into a Queue or timeout if Queue is full.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
70005eec:	b580      	push	{r7, lr}
70005eee:	b088      	sub	sp, #32
70005ef0:	af00      	add	r7, sp, #0
70005ef2:	60f8      	str	r0, [r7, #12]
70005ef4:	60b9      	str	r1, [r7, #8]
70005ef6:	603b      	str	r3, [r7, #0]
70005ef8:	4613      	mov	r3, r2
70005efa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
70005efc:	68fb      	ldr	r3, [r7, #12]
70005efe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
70005f00:	2300      	movs	r3, #0
70005f02:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
70005f04:	f7ff fbf7 	bl	700056f6 <IRQ_Context>
70005f08:	4603      	mov	r3, r0
70005f0a:	2b00      	cmp	r3, #0
70005f0c:	d028      	beq.n	70005f60 <osMessageQueuePut+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
70005f0e:	69bb      	ldr	r3, [r7, #24]
70005f10:	2b00      	cmp	r3, #0
70005f12:	d005      	beq.n	70005f20 <osMessageQueuePut+0x34>
70005f14:	68bb      	ldr	r3, [r7, #8]
70005f16:	2b00      	cmp	r3, #0
70005f18:	d002      	beq.n	70005f20 <osMessageQueuePut+0x34>
70005f1a:	683b      	ldr	r3, [r7, #0]
70005f1c:	2b00      	cmp	r3, #0
70005f1e:	d003      	beq.n	70005f28 <osMessageQueuePut+0x3c>
      stat = osErrorParameter;
70005f20:	f06f 0303 	mvn.w	r3, #3
70005f24:	61fb      	str	r3, [r7, #28]
70005f26:	e038      	b.n	70005f9a <osMessageQueuePut+0xae>
    }
    else {
      yield = pdFALSE;
70005f28:	2300      	movs	r3, #0
70005f2a:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
70005f2c:	f107 0214 	add.w	r2, r7, #20
70005f30:	2300      	movs	r3, #0
70005f32:	68b9      	ldr	r1, [r7, #8]
70005f34:	69b8      	ldr	r0, [r7, #24]
70005f36:	f001 f931 	bl	7000719c <xQueueGenericSendFromISR>
70005f3a:	4603      	mov	r3, r0
70005f3c:	2b01      	cmp	r3, #1
70005f3e:	d003      	beq.n	70005f48 <osMessageQueuePut+0x5c>
        stat = osErrorResource;
70005f40:	f06f 0302 	mvn.w	r3, #2
70005f44:	61fb      	str	r3, [r7, #28]
70005f46:	e028      	b.n	70005f9a <osMessageQueuePut+0xae>
      } else {
        portYIELD_FROM_ISR (yield);
70005f48:	697b      	ldr	r3, [r7, #20]
70005f4a:	2b00      	cmp	r3, #0
70005f4c:	d025      	beq.n	70005f9a <osMessageQueuePut+0xae>
70005f4e:	4b15      	ldr	r3, [pc, #84]	@ (70005fa4 <osMessageQueuePut+0xb8>)
70005f50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70005f54:	601a      	str	r2, [r3, #0]
70005f56:	f3bf 8f4f 	dsb	sy
70005f5a:	f3bf 8f6f 	isb	sy
70005f5e:	e01c      	b.n	70005f9a <osMessageQueuePut+0xae>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
70005f60:	69bb      	ldr	r3, [r7, #24]
70005f62:	2b00      	cmp	r3, #0
70005f64:	d002      	beq.n	70005f6c <osMessageQueuePut+0x80>
70005f66:	68bb      	ldr	r3, [r7, #8]
70005f68:	2b00      	cmp	r3, #0
70005f6a:	d103      	bne.n	70005f74 <osMessageQueuePut+0x88>
      stat = osErrorParameter;
70005f6c:	f06f 0303 	mvn.w	r3, #3
70005f70:	61fb      	str	r3, [r7, #28]
70005f72:	e012      	b.n	70005f9a <osMessageQueuePut+0xae>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
70005f74:	2300      	movs	r3, #0
70005f76:	683a      	ldr	r2, [r7, #0]
70005f78:	68b9      	ldr	r1, [r7, #8]
70005f7a:	69b8      	ldr	r0, [r7, #24]
70005f7c:	f001 f80c 	bl	70006f98 <xQueueGenericSend>
70005f80:	4603      	mov	r3, r0
70005f82:	2b01      	cmp	r3, #1
70005f84:	d009      	beq.n	70005f9a <osMessageQueuePut+0xae>
        if (timeout != 0U) {
70005f86:	683b      	ldr	r3, [r7, #0]
70005f88:	2b00      	cmp	r3, #0
70005f8a:	d003      	beq.n	70005f94 <osMessageQueuePut+0xa8>
          stat = osErrorTimeout;
70005f8c:	f06f 0301 	mvn.w	r3, #1
70005f90:	61fb      	str	r3, [r7, #28]
70005f92:	e002      	b.n	70005f9a <osMessageQueuePut+0xae>
        } else {
          stat = osErrorResource;
70005f94:	f06f 0302 	mvn.w	r3, #2
70005f98:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
70005f9a:	69fb      	ldr	r3, [r7, #28]
}
70005f9c:	4618      	mov	r0, r3
70005f9e:	3720      	adds	r7, #32
70005fa0:	46bd      	mov	sp, r7
70005fa2:	bd80      	pop	{r7, pc}
70005fa4:	e000ed04 	.word	0xe000ed04

70005fa8 <osMessageQueueGet>:
  Get a Message from a Queue or timeout if Queue is empty.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
70005fa8:	b580      	push	{r7, lr}
70005faa:	b088      	sub	sp, #32
70005fac:	af00      	add	r7, sp, #0
70005fae:	60f8      	str	r0, [r7, #12]
70005fb0:	60b9      	str	r1, [r7, #8]
70005fb2:	607a      	str	r2, [r7, #4]
70005fb4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
70005fb6:	68fb      	ldr	r3, [r7, #12]
70005fb8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
70005fba:	2300      	movs	r3, #0
70005fbc:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
70005fbe:	f7ff fb9a 	bl	700056f6 <IRQ_Context>
70005fc2:	4603      	mov	r3, r0
70005fc4:	2b00      	cmp	r3, #0
70005fc6:	d028      	beq.n	7000601a <osMessageQueueGet+0x72>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
70005fc8:	69bb      	ldr	r3, [r7, #24]
70005fca:	2b00      	cmp	r3, #0
70005fcc:	d005      	beq.n	70005fda <osMessageQueueGet+0x32>
70005fce:	68bb      	ldr	r3, [r7, #8]
70005fd0:	2b00      	cmp	r3, #0
70005fd2:	d002      	beq.n	70005fda <osMessageQueueGet+0x32>
70005fd4:	683b      	ldr	r3, [r7, #0]
70005fd6:	2b00      	cmp	r3, #0
70005fd8:	d003      	beq.n	70005fe2 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
70005fda:	f06f 0303 	mvn.w	r3, #3
70005fde:	61fb      	str	r3, [r7, #28]
70005fe0:	e037      	b.n	70006052 <osMessageQueueGet+0xaa>
    }
    else {
      yield = pdFALSE;
70005fe2:	2300      	movs	r3, #0
70005fe4:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
70005fe6:	f107 0314 	add.w	r3, r7, #20
70005fea:	461a      	mov	r2, r3
70005fec:	68b9      	ldr	r1, [r7, #8]
70005fee:	69b8      	ldr	r0, [r7, #24]
70005ff0:	f001 fc14 	bl	7000781c <xQueueReceiveFromISR>
70005ff4:	4603      	mov	r3, r0
70005ff6:	2b01      	cmp	r3, #1
70005ff8:	d003      	beq.n	70006002 <osMessageQueueGet+0x5a>
        stat = osErrorResource;
70005ffa:	f06f 0302 	mvn.w	r3, #2
70005ffe:	61fb      	str	r3, [r7, #28]
70006000:	e027      	b.n	70006052 <osMessageQueueGet+0xaa>
      } else {
        portYIELD_FROM_ISR (yield);
70006002:	697b      	ldr	r3, [r7, #20]
70006004:	2b00      	cmp	r3, #0
70006006:	d024      	beq.n	70006052 <osMessageQueueGet+0xaa>
70006008:	4b14      	ldr	r3, [pc, #80]	@ (7000605c <osMessageQueueGet+0xb4>)
7000600a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
7000600e:	601a      	str	r2, [r3, #0]
70006010:	f3bf 8f4f 	dsb	sy
70006014:	f3bf 8f6f 	isb	sy
70006018:	e01b      	b.n	70006052 <osMessageQueueGet+0xaa>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
7000601a:	69bb      	ldr	r3, [r7, #24]
7000601c:	2b00      	cmp	r3, #0
7000601e:	d002      	beq.n	70006026 <osMessageQueueGet+0x7e>
70006020:	68bb      	ldr	r3, [r7, #8]
70006022:	2b00      	cmp	r3, #0
70006024:	d103      	bne.n	7000602e <osMessageQueueGet+0x86>
      stat = osErrorParameter;
70006026:	f06f 0303 	mvn.w	r3, #3
7000602a:	61fb      	str	r3, [r7, #28]
7000602c:	e011      	b.n	70006052 <osMessageQueueGet+0xaa>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
7000602e:	683a      	ldr	r2, [r7, #0]
70006030:	68b9      	ldr	r1, [r7, #8]
70006032:	69b8      	ldr	r0, [r7, #24]
70006034:	f001 fa10 	bl	70007458 <xQueueReceive>
70006038:	4603      	mov	r3, r0
7000603a:	2b01      	cmp	r3, #1
7000603c:	d009      	beq.n	70006052 <osMessageQueueGet+0xaa>
        if (timeout != 0U) {
7000603e:	683b      	ldr	r3, [r7, #0]
70006040:	2b00      	cmp	r3, #0
70006042:	d003      	beq.n	7000604c <osMessageQueueGet+0xa4>
          stat = osErrorTimeout;
70006044:	f06f 0301 	mvn.w	r3, #1
70006048:	61fb      	str	r3, [r7, #28]
7000604a:	e002      	b.n	70006052 <osMessageQueueGet+0xaa>
        } else {
          stat = osErrorResource;
7000604c:	f06f 0302 	mvn.w	r3, #2
70006050:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
70006052:	69fb      	ldr	r3, [r7, #28]
}
70006054:	4618      	mov	r0, r3
70006056:	3720      	adds	r7, #32
70006058:	46bd      	mov	sp, r7
7000605a:	bd80      	pop	{r7, pc}
7000605c:	e000ed04 	.word	0xe000ed04

70006060 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
70006060:	b480      	push	{r7}
70006062:	b085      	sub	sp, #20
70006064:	af00      	add	r7, sp, #0
70006066:	60f8      	str	r0, [r7, #12]
70006068:	60b9      	str	r1, [r7, #8]
7000606a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
7000606c:	68fb      	ldr	r3, [r7, #12]
7000606e:	4a07      	ldr	r2, [pc, #28]	@ (7000608c <vApplicationGetIdleTaskMemory+0x2c>)
70006070:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
70006072:	68bb      	ldr	r3, [r7, #8]
70006074:	4a06      	ldr	r2, [pc, #24]	@ (70006090 <vApplicationGetIdleTaskMemory+0x30>)
70006076:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
70006078:	687b      	ldr	r3, [r7, #4]
7000607a:	f44f 7280 	mov.w	r2, #256	@ 0x100
7000607e:	601a      	str	r2, [r3, #0]
}
70006080:	bf00      	nop
70006082:	3714      	adds	r7, #20
70006084:	46bd      	mov	sp, r7
70006086:	f85d 7b04 	ldr.w	r7, [sp], #4
7000608a:	4770      	bx	lr
7000608c:	24000294 	.word	0x24000294
70006090:	2400033c 	.word	0x2400033c

70006094 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
70006094:	b480      	push	{r7}
70006096:	b085      	sub	sp, #20
70006098:	af00      	add	r7, sp, #0
7000609a:	60f8      	str	r0, [r7, #12]
7000609c:	60b9      	str	r1, [r7, #8]
7000609e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
700060a0:	68fb      	ldr	r3, [r7, #12]
700060a2:	4a07      	ldr	r2, [pc, #28]	@ (700060c0 <vApplicationGetTimerTaskMemory+0x2c>)
700060a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
700060a6:	68bb      	ldr	r3, [r7, #8]
700060a8:	4a06      	ldr	r2, [pc, #24]	@ (700060c4 <vApplicationGetTimerTaskMemory+0x30>)
700060aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
700060ac:	687b      	ldr	r3, [r7, #4]
700060ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
700060b2:	601a      	str	r2, [r3, #0]
}
700060b4:	bf00      	nop
700060b6:	3714      	adds	r7, #20
700060b8:	46bd      	mov	sp, r7
700060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
700060be:	4770      	bx	lr
700060c0:	2400073c 	.word	0x2400073c
700060c4:	240007e4 	.word	0x240007e4

700060c8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
700060c8:	b580      	push	{r7, lr}
700060ca:	b08a      	sub	sp, #40	@ 0x28
700060cc:	af00      	add	r7, sp, #0
700060ce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
700060d0:	2300      	movs	r3, #0
700060d2:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
700060d4:	f002 f9d0 	bl	70008478 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
700060d8:	4b54      	ldr	r3, [pc, #336]	@ (7000622c <pvPortMalloc+0x164>)
700060da:	681b      	ldr	r3, [r3, #0]
700060dc:	2b00      	cmp	r3, #0
700060de:	d101      	bne.n	700060e4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
700060e0:	f000 f90c 	bl	700062fc <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
700060e4:	687b      	ldr	r3, [r7, #4]
700060e6:	2b00      	cmp	r3, #0
700060e8:	d012      	beq.n	70006110 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
700060ea:	2208      	movs	r2, #8
700060ec:	687b      	ldr	r3, [r7, #4]
700060ee:	f003 0307 	and.w	r3, r3, #7
700060f2:	1ad3      	subs	r3, r2, r3
700060f4:	3308      	adds	r3, #8
700060f6:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
700060f8:	69bb      	ldr	r3, [r7, #24]
700060fa:	43db      	mvns	r3, r3
700060fc:	687a      	ldr	r2, [r7, #4]
700060fe:	429a      	cmp	r2, r3
70006100:	d804      	bhi.n	7000610c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
70006102:	687a      	ldr	r2, [r7, #4]
70006104:	69bb      	ldr	r3, [r7, #24]
70006106:	4413      	add	r3, r2
70006108:	607b      	str	r3, [r7, #4]
7000610a:	e001      	b.n	70006110 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
7000610c:	2300      	movs	r3, #0
7000610e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
70006110:	687b      	ldr	r3, [r7, #4]
70006112:	2b00      	cmp	r3, #0
70006114:	db71      	blt.n	700061fa <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
70006116:	687b      	ldr	r3, [r7, #4]
70006118:	2b00      	cmp	r3, #0
7000611a:	d06e      	beq.n	700061fa <pvPortMalloc+0x132>
7000611c:	4b44      	ldr	r3, [pc, #272]	@ (70006230 <pvPortMalloc+0x168>)
7000611e:	681b      	ldr	r3, [r3, #0]
70006120:	687a      	ldr	r2, [r7, #4]
70006122:	429a      	cmp	r2, r3
70006124:	d869      	bhi.n	700061fa <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
70006126:	4b43      	ldr	r3, [pc, #268]	@ (70006234 <pvPortMalloc+0x16c>)
70006128:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
7000612a:	4b42      	ldr	r3, [pc, #264]	@ (70006234 <pvPortMalloc+0x16c>)
7000612c:	681b      	ldr	r3, [r3, #0]
7000612e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
70006130:	e004      	b.n	7000613c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
70006132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70006134:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
70006136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70006138:	681b      	ldr	r3, [r3, #0]
7000613a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
7000613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000613e:	685b      	ldr	r3, [r3, #4]
70006140:	687a      	ldr	r2, [r7, #4]
70006142:	429a      	cmp	r2, r3
70006144:	d903      	bls.n	7000614e <pvPortMalloc+0x86>
70006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70006148:	681b      	ldr	r3, [r3, #0]
7000614a:	2b00      	cmp	r3, #0
7000614c:	d1f1      	bne.n	70006132 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
7000614e:	4b37      	ldr	r3, [pc, #220]	@ (7000622c <pvPortMalloc+0x164>)
70006150:	681b      	ldr	r3, [r3, #0]
70006152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70006154:	429a      	cmp	r2, r3
70006156:	d050      	beq.n	700061fa <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
70006158:	6a3b      	ldr	r3, [r7, #32]
7000615a:	681b      	ldr	r3, [r3, #0]
7000615c:	2208      	movs	r2, #8
7000615e:	4413      	add	r3, r2
70006160:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
70006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70006164:	681a      	ldr	r2, [r3, #0]
70006166:	6a3b      	ldr	r3, [r7, #32]
70006168:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
7000616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000616c:	685a      	ldr	r2, [r3, #4]
7000616e:	687b      	ldr	r3, [r7, #4]
70006170:	1ad2      	subs	r2, r2, r3
70006172:	2308      	movs	r3, #8
70006174:	005b      	lsls	r3, r3, #1
70006176:	429a      	cmp	r2, r3
70006178:	d920      	bls.n	700061bc <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
7000617a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
7000617c:	687b      	ldr	r3, [r7, #4]
7000617e:	4413      	add	r3, r2
70006180:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
70006182:	697b      	ldr	r3, [r7, #20]
70006184:	f003 0307 	and.w	r3, r3, #7
70006188:	2b00      	cmp	r3, #0
7000618a:	d00b      	beq.n	700061a4 <pvPortMalloc+0xdc>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
7000618c:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006190:	f383 8811 	msr	BASEPRI, r3
70006194:	f3bf 8f6f 	isb	sy
70006198:	f3bf 8f4f 	dsb	sy
7000619c:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
7000619e:	bf00      	nop
700061a0:	bf00      	nop
700061a2:	e7fd      	b.n	700061a0 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
700061a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700061a6:	685a      	ldr	r2, [r3, #4]
700061a8:	687b      	ldr	r3, [r7, #4]
700061aa:	1ad2      	subs	r2, r2, r3
700061ac:	697b      	ldr	r3, [r7, #20]
700061ae:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
700061b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700061b2:	687a      	ldr	r2, [r7, #4]
700061b4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
700061b6:	6978      	ldr	r0, [r7, #20]
700061b8:	f000 f8fc 	bl	700063b4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
700061bc:	4b1c      	ldr	r3, [pc, #112]	@ (70006230 <pvPortMalloc+0x168>)
700061be:	681a      	ldr	r2, [r3, #0]
700061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700061c2:	685b      	ldr	r3, [r3, #4]
700061c4:	1ad3      	subs	r3, r2, r3
700061c6:	4a1a      	ldr	r2, [pc, #104]	@ (70006230 <pvPortMalloc+0x168>)
700061c8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
700061ca:	4b19      	ldr	r3, [pc, #100]	@ (70006230 <pvPortMalloc+0x168>)
700061cc:	681a      	ldr	r2, [r3, #0]
700061ce:	4b1a      	ldr	r3, [pc, #104]	@ (70006238 <pvPortMalloc+0x170>)
700061d0:	681b      	ldr	r3, [r3, #0]
700061d2:	429a      	cmp	r2, r3
700061d4:	d203      	bcs.n	700061de <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
700061d6:	4b16      	ldr	r3, [pc, #88]	@ (70006230 <pvPortMalloc+0x168>)
700061d8:	681b      	ldr	r3, [r3, #0]
700061da:	4a17      	ldr	r2, [pc, #92]	@ (70006238 <pvPortMalloc+0x170>)
700061dc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
700061de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700061e0:	685b      	ldr	r3, [r3, #4]
700061e2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
700061e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700061e8:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
700061ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700061ec:	2200      	movs	r2, #0
700061ee:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
700061f0:	4b12      	ldr	r3, [pc, #72]	@ (7000623c <pvPortMalloc+0x174>)
700061f2:	681b      	ldr	r3, [r3, #0]
700061f4:	3301      	adds	r3, #1
700061f6:	4a11      	ldr	r2, [pc, #68]	@ (7000623c <pvPortMalloc+0x174>)
700061f8:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
700061fa:	f002 f94b 	bl	70008494 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
700061fe:	69fb      	ldr	r3, [r7, #28]
70006200:	f003 0307 	and.w	r3, r3, #7
70006204:	2b00      	cmp	r3, #0
70006206:	d00b      	beq.n	70006220 <pvPortMalloc+0x158>
        __asm volatile
70006208:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000620c:	f383 8811 	msr	BASEPRI, r3
70006210:	f3bf 8f6f 	isb	sy
70006214:	f3bf 8f4f 	dsb	sy
70006218:	60fb      	str	r3, [r7, #12]
    }
7000621a:	bf00      	nop
7000621c:	bf00      	nop
7000621e:	e7fd      	b.n	7000621c <pvPortMalloc+0x154>
    return pvReturn;
70006220:	69fb      	ldr	r3, [r7, #28]
}
70006222:	4618      	mov	r0, r3
70006224:	3728      	adds	r7, #40	@ 0x28
70006226:	46bd      	mov	sp, r7
70006228:	bd80      	pop	{r7, pc}
7000622a:	bf00      	nop
7000622c:	24004bec 	.word	0x24004bec
70006230:	24004bf0 	.word	0x24004bf0
70006234:	24004be4 	.word	0x24004be4
70006238:	24004bf4 	.word	0x24004bf4
7000623c:	24004bf8 	.word	0x24004bf8

70006240 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
70006240:	b580      	push	{r7, lr}
70006242:	b086      	sub	sp, #24
70006244:	af00      	add	r7, sp, #0
70006246:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
70006248:	687b      	ldr	r3, [r7, #4]
7000624a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
7000624c:	687b      	ldr	r3, [r7, #4]
7000624e:	2b00      	cmp	r3, #0
70006250:	d04b      	beq.n	700062ea <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
70006252:	2308      	movs	r3, #8
70006254:	425b      	negs	r3, r3
70006256:	697a      	ldr	r2, [r7, #20]
70006258:	4413      	add	r3, r2
7000625a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
7000625c:	697b      	ldr	r3, [r7, #20]
7000625e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
70006260:	693b      	ldr	r3, [r7, #16]
70006262:	685b      	ldr	r3, [r3, #4]
70006264:	2b00      	cmp	r3, #0
70006266:	db0b      	blt.n	70006280 <vPortFree+0x40>
        __asm volatile
70006268:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000626c:	f383 8811 	msr	BASEPRI, r3
70006270:	f3bf 8f6f 	isb	sy
70006274:	f3bf 8f4f 	dsb	sy
70006278:	60fb      	str	r3, [r7, #12]
    }
7000627a:	bf00      	nop
7000627c:	bf00      	nop
7000627e:	e7fd      	b.n	7000627c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
70006280:	693b      	ldr	r3, [r7, #16]
70006282:	681b      	ldr	r3, [r3, #0]
70006284:	2b00      	cmp	r3, #0
70006286:	d00b      	beq.n	700062a0 <vPortFree+0x60>
        __asm volatile
70006288:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000628c:	f383 8811 	msr	BASEPRI, r3
70006290:	f3bf 8f6f 	isb	sy
70006294:	f3bf 8f4f 	dsb	sy
70006298:	60bb      	str	r3, [r7, #8]
    }
7000629a:	bf00      	nop
7000629c:	bf00      	nop
7000629e:	e7fd      	b.n	7000629c <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
700062a0:	693b      	ldr	r3, [r7, #16]
700062a2:	685b      	ldr	r3, [r3, #4]
700062a4:	0fdb      	lsrs	r3, r3, #31
700062a6:	f003 0301 	and.w	r3, r3, #1
700062aa:	b2db      	uxtb	r3, r3
700062ac:	2b00      	cmp	r3, #0
700062ae:	d01c      	beq.n	700062ea <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
700062b0:	693b      	ldr	r3, [r7, #16]
700062b2:	681b      	ldr	r3, [r3, #0]
700062b4:	2b00      	cmp	r3, #0
700062b6:	d118      	bne.n	700062ea <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
700062b8:	693b      	ldr	r3, [r7, #16]
700062ba:	685b      	ldr	r3, [r3, #4]
700062bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
700062c0:	693b      	ldr	r3, [r7, #16]
700062c2:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
700062c4:	f002 f8d8 	bl	70008478 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
700062c8:	693b      	ldr	r3, [r7, #16]
700062ca:	685a      	ldr	r2, [r3, #4]
700062cc:	4b09      	ldr	r3, [pc, #36]	@ (700062f4 <vPortFree+0xb4>)
700062ce:	681b      	ldr	r3, [r3, #0]
700062d0:	4413      	add	r3, r2
700062d2:	4a08      	ldr	r2, [pc, #32]	@ (700062f4 <vPortFree+0xb4>)
700062d4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
700062d6:	6938      	ldr	r0, [r7, #16]
700062d8:	f000 f86c 	bl	700063b4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
700062dc:	4b06      	ldr	r3, [pc, #24]	@ (700062f8 <vPortFree+0xb8>)
700062de:	681b      	ldr	r3, [r3, #0]
700062e0:	3301      	adds	r3, #1
700062e2:	4a05      	ldr	r2, [pc, #20]	@ (700062f8 <vPortFree+0xb8>)
700062e4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
700062e6:	f002 f8d5 	bl	70008494 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
700062ea:	bf00      	nop
700062ec:	3718      	adds	r7, #24
700062ee:	46bd      	mov	sp, r7
700062f0:	bd80      	pop	{r7, pc}
700062f2:	bf00      	nop
700062f4:	24004bf0 	.word	0x24004bf0
700062f8:	24004bfc 	.word	0x24004bfc

700062fc <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
700062fc:	b480      	push	{r7}
700062fe:	b085      	sub	sp, #20
70006300:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
70006302:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
70006306:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
70006308:	4b25      	ldr	r3, [pc, #148]	@ (700063a0 <prvHeapInit+0xa4>)
7000630a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
7000630c:	68fb      	ldr	r3, [r7, #12]
7000630e:	f003 0307 	and.w	r3, r3, #7
70006312:	2b00      	cmp	r3, #0
70006314:	d00c      	beq.n	70006330 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
70006316:	68fb      	ldr	r3, [r7, #12]
70006318:	3307      	adds	r3, #7
7000631a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
7000631c:	68fb      	ldr	r3, [r7, #12]
7000631e:	f023 0307 	bic.w	r3, r3, #7
70006322:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
70006324:	68ba      	ldr	r2, [r7, #8]
70006326:	68fb      	ldr	r3, [r7, #12]
70006328:	1ad3      	subs	r3, r2, r3
7000632a:	4a1d      	ldr	r2, [pc, #116]	@ (700063a0 <prvHeapInit+0xa4>)
7000632c:	4413      	add	r3, r2
7000632e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
70006330:	68fb      	ldr	r3, [r7, #12]
70006332:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
70006334:	4a1b      	ldr	r2, [pc, #108]	@ (700063a4 <prvHeapInit+0xa8>)
70006336:	687b      	ldr	r3, [r7, #4]
70006338:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
7000633a:	4b1a      	ldr	r3, [pc, #104]	@ (700063a4 <prvHeapInit+0xa8>)
7000633c:	2200      	movs	r2, #0
7000633e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
70006340:	687b      	ldr	r3, [r7, #4]
70006342:	68ba      	ldr	r2, [r7, #8]
70006344:	4413      	add	r3, r2
70006346:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
70006348:	2208      	movs	r2, #8
7000634a:	68fb      	ldr	r3, [r7, #12]
7000634c:	1a9b      	subs	r3, r3, r2
7000634e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
70006350:	68fb      	ldr	r3, [r7, #12]
70006352:	f023 0307 	bic.w	r3, r3, #7
70006356:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
70006358:	68fb      	ldr	r3, [r7, #12]
7000635a:	4a13      	ldr	r2, [pc, #76]	@ (700063a8 <prvHeapInit+0xac>)
7000635c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
7000635e:	4b12      	ldr	r3, [pc, #72]	@ (700063a8 <prvHeapInit+0xac>)
70006360:	681b      	ldr	r3, [r3, #0]
70006362:	2200      	movs	r2, #0
70006364:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
70006366:	4b10      	ldr	r3, [pc, #64]	@ (700063a8 <prvHeapInit+0xac>)
70006368:	681b      	ldr	r3, [r3, #0]
7000636a:	2200      	movs	r2, #0
7000636c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
7000636e:	687b      	ldr	r3, [r7, #4]
70006370:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
70006372:	683b      	ldr	r3, [r7, #0]
70006374:	68fa      	ldr	r2, [r7, #12]
70006376:	1ad2      	subs	r2, r2, r3
70006378:	683b      	ldr	r3, [r7, #0]
7000637a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
7000637c:	4b0a      	ldr	r3, [pc, #40]	@ (700063a8 <prvHeapInit+0xac>)
7000637e:	681a      	ldr	r2, [r3, #0]
70006380:	683b      	ldr	r3, [r7, #0]
70006382:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
70006384:	683b      	ldr	r3, [r7, #0]
70006386:	685b      	ldr	r3, [r3, #4]
70006388:	4a08      	ldr	r2, [pc, #32]	@ (700063ac <prvHeapInit+0xb0>)
7000638a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
7000638c:	683b      	ldr	r3, [r7, #0]
7000638e:	685b      	ldr	r3, [r3, #4]
70006390:	4a07      	ldr	r2, [pc, #28]	@ (700063b0 <prvHeapInit+0xb4>)
70006392:	6013      	str	r3, [r2, #0]
}
70006394:	bf00      	nop
70006396:	3714      	adds	r7, #20
70006398:	46bd      	mov	sp, r7
7000639a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000639e:	4770      	bx	lr
700063a0:	24000fe4 	.word	0x24000fe4
700063a4:	24004be4 	.word	0x24004be4
700063a8:	24004bec 	.word	0x24004bec
700063ac:	24004bf4 	.word	0x24004bf4
700063b0:	24004bf0 	.word	0x24004bf0

700063b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
700063b4:	b480      	push	{r7}
700063b6:	b085      	sub	sp, #20
700063b8:	af00      	add	r7, sp, #0
700063ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
700063bc:	4b28      	ldr	r3, [pc, #160]	@ (70006460 <prvInsertBlockIntoFreeList+0xac>)
700063be:	60fb      	str	r3, [r7, #12]
700063c0:	e002      	b.n	700063c8 <prvInsertBlockIntoFreeList+0x14>
700063c2:	68fb      	ldr	r3, [r7, #12]
700063c4:	681b      	ldr	r3, [r3, #0]
700063c6:	60fb      	str	r3, [r7, #12]
700063c8:	68fb      	ldr	r3, [r7, #12]
700063ca:	681b      	ldr	r3, [r3, #0]
700063cc:	687a      	ldr	r2, [r7, #4]
700063ce:	429a      	cmp	r2, r3
700063d0:	d8f7      	bhi.n	700063c2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
700063d2:	68fb      	ldr	r3, [r7, #12]
700063d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
700063d6:	68fb      	ldr	r3, [r7, #12]
700063d8:	685b      	ldr	r3, [r3, #4]
700063da:	68ba      	ldr	r2, [r7, #8]
700063dc:	4413      	add	r3, r2
700063de:	687a      	ldr	r2, [r7, #4]
700063e0:	429a      	cmp	r2, r3
700063e2:	d108      	bne.n	700063f6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
700063e4:	68fb      	ldr	r3, [r7, #12]
700063e6:	685a      	ldr	r2, [r3, #4]
700063e8:	687b      	ldr	r3, [r7, #4]
700063ea:	685b      	ldr	r3, [r3, #4]
700063ec:	441a      	add	r2, r3
700063ee:	68fb      	ldr	r3, [r7, #12]
700063f0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
700063f2:	68fb      	ldr	r3, [r7, #12]
700063f4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
700063f6:	687b      	ldr	r3, [r7, #4]
700063f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
700063fa:	687b      	ldr	r3, [r7, #4]
700063fc:	685b      	ldr	r3, [r3, #4]
700063fe:	68ba      	ldr	r2, [r7, #8]
70006400:	441a      	add	r2, r3
70006402:	68fb      	ldr	r3, [r7, #12]
70006404:	681b      	ldr	r3, [r3, #0]
70006406:	429a      	cmp	r2, r3
70006408:	d118      	bne.n	7000643c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
7000640a:	68fb      	ldr	r3, [r7, #12]
7000640c:	681a      	ldr	r2, [r3, #0]
7000640e:	4b15      	ldr	r3, [pc, #84]	@ (70006464 <prvInsertBlockIntoFreeList+0xb0>)
70006410:	681b      	ldr	r3, [r3, #0]
70006412:	429a      	cmp	r2, r3
70006414:	d00d      	beq.n	70006432 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
70006416:	687b      	ldr	r3, [r7, #4]
70006418:	685a      	ldr	r2, [r3, #4]
7000641a:	68fb      	ldr	r3, [r7, #12]
7000641c:	681b      	ldr	r3, [r3, #0]
7000641e:	685b      	ldr	r3, [r3, #4]
70006420:	441a      	add	r2, r3
70006422:	687b      	ldr	r3, [r7, #4]
70006424:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
70006426:	68fb      	ldr	r3, [r7, #12]
70006428:	681b      	ldr	r3, [r3, #0]
7000642a:	681a      	ldr	r2, [r3, #0]
7000642c:	687b      	ldr	r3, [r7, #4]
7000642e:	601a      	str	r2, [r3, #0]
70006430:	e008      	b.n	70006444 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
70006432:	4b0c      	ldr	r3, [pc, #48]	@ (70006464 <prvInsertBlockIntoFreeList+0xb0>)
70006434:	681a      	ldr	r2, [r3, #0]
70006436:	687b      	ldr	r3, [r7, #4]
70006438:	601a      	str	r2, [r3, #0]
7000643a:	e003      	b.n	70006444 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
7000643c:	68fb      	ldr	r3, [r7, #12]
7000643e:	681a      	ldr	r2, [r3, #0]
70006440:	687b      	ldr	r3, [r7, #4]
70006442:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
70006444:	68fa      	ldr	r2, [r7, #12]
70006446:	687b      	ldr	r3, [r7, #4]
70006448:	429a      	cmp	r2, r3
7000644a:	d002      	beq.n	70006452 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
7000644c:	68fb      	ldr	r3, [r7, #12]
7000644e:	687a      	ldr	r2, [r7, #4]
70006450:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
70006452:	bf00      	nop
70006454:	3714      	adds	r7, #20
70006456:	46bd      	mov	sp, r7
70006458:	f85d 7b04 	ldr.w	r7, [sp], #4
7000645c:	4770      	bx	lr
7000645e:	bf00      	nop
70006460:	24004be4 	.word	0x24004be4
70006464:	24004bec 	.word	0x24004bec

70006468 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
70006468:	b480      	push	{r7}
7000646a:	b083      	sub	sp, #12
7000646c:	af00      	add	r7, sp, #0
7000646e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
70006470:	687b      	ldr	r3, [r7, #4]
70006472:	f103 0208 	add.w	r2, r3, #8
70006476:	687b      	ldr	r3, [r7, #4]
70006478:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
7000647a:	687b      	ldr	r3, [r7, #4]
7000647c:	f04f 32ff 	mov.w	r2, #4294967295
70006480:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
70006482:	687b      	ldr	r3, [r7, #4]
70006484:	f103 0208 	add.w	r2, r3, #8
70006488:	687b      	ldr	r3, [r7, #4]
7000648a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
7000648c:	687b      	ldr	r3, [r7, #4]
7000648e:	f103 0208 	add.w	r2, r3, #8
70006492:	687b      	ldr	r3, [r7, #4]
70006494:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
70006496:	687b      	ldr	r3, [r7, #4]
70006498:	2200      	movs	r2, #0
7000649a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
7000649c:	bf00      	nop
7000649e:	370c      	adds	r7, #12
700064a0:	46bd      	mov	sp, r7
700064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
700064a6:	4770      	bx	lr

700064a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
700064a8:	b480      	push	{r7}
700064aa:	b083      	sub	sp, #12
700064ac:	af00      	add	r7, sp, #0
700064ae:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
700064b0:	687b      	ldr	r3, [r7, #4]
700064b2:	2200      	movs	r2, #0
700064b4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
700064b6:	bf00      	nop
700064b8:	370c      	adds	r7, #12
700064ba:	46bd      	mov	sp, r7
700064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
700064c0:	4770      	bx	lr

700064c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
700064c2:	b480      	push	{r7}
700064c4:	b085      	sub	sp, #20
700064c6:	af00      	add	r7, sp, #0
700064c8:	6078      	str	r0, [r7, #4]
700064ca:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
700064cc:	687b      	ldr	r3, [r7, #4]
700064ce:	685b      	ldr	r3, [r3, #4]
700064d0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
700064d2:	683b      	ldr	r3, [r7, #0]
700064d4:	68fa      	ldr	r2, [r7, #12]
700064d6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
700064d8:	68fb      	ldr	r3, [r7, #12]
700064da:	689a      	ldr	r2, [r3, #8]
700064dc:	683b      	ldr	r3, [r7, #0]
700064de:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
700064e0:	68fb      	ldr	r3, [r7, #12]
700064e2:	689b      	ldr	r3, [r3, #8]
700064e4:	683a      	ldr	r2, [r7, #0]
700064e6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
700064e8:	68fb      	ldr	r3, [r7, #12]
700064ea:	683a      	ldr	r2, [r7, #0]
700064ec:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
700064ee:	683b      	ldr	r3, [r7, #0]
700064f0:	687a      	ldr	r2, [r7, #4]
700064f2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
700064f4:	687b      	ldr	r3, [r7, #4]
700064f6:	681b      	ldr	r3, [r3, #0]
700064f8:	1c5a      	adds	r2, r3, #1
700064fa:	687b      	ldr	r3, [r7, #4]
700064fc:	601a      	str	r2, [r3, #0]
}
700064fe:	bf00      	nop
70006500:	3714      	adds	r7, #20
70006502:	46bd      	mov	sp, r7
70006504:	f85d 7b04 	ldr.w	r7, [sp], #4
70006508:	4770      	bx	lr

7000650a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
7000650a:	b480      	push	{r7}
7000650c:	b085      	sub	sp, #20
7000650e:	af00      	add	r7, sp, #0
70006510:	6078      	str	r0, [r7, #4]
70006512:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
70006514:	683b      	ldr	r3, [r7, #0]
70006516:	681b      	ldr	r3, [r3, #0]
70006518:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
7000651a:	68bb      	ldr	r3, [r7, #8]
7000651c:	f1b3 3fff 	cmp.w	r3, #4294967295
70006520:	d103      	bne.n	7000652a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
70006522:	687b      	ldr	r3, [r7, #4]
70006524:	691b      	ldr	r3, [r3, #16]
70006526:	60fb      	str	r3, [r7, #12]
70006528:	e00c      	b.n	70006544 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
7000652a:	687b      	ldr	r3, [r7, #4]
7000652c:	3308      	adds	r3, #8
7000652e:	60fb      	str	r3, [r7, #12]
70006530:	e002      	b.n	70006538 <vListInsert+0x2e>
70006532:	68fb      	ldr	r3, [r7, #12]
70006534:	685b      	ldr	r3, [r3, #4]
70006536:	60fb      	str	r3, [r7, #12]
70006538:	68fb      	ldr	r3, [r7, #12]
7000653a:	685b      	ldr	r3, [r3, #4]
7000653c:	681b      	ldr	r3, [r3, #0]
7000653e:	68ba      	ldr	r2, [r7, #8]
70006540:	429a      	cmp	r2, r3
70006542:	d2f6      	bcs.n	70006532 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
70006544:	68fb      	ldr	r3, [r7, #12]
70006546:	685a      	ldr	r2, [r3, #4]
70006548:	683b      	ldr	r3, [r7, #0]
7000654a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
7000654c:	683b      	ldr	r3, [r7, #0]
7000654e:	685b      	ldr	r3, [r3, #4]
70006550:	683a      	ldr	r2, [r7, #0]
70006552:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
70006554:	683b      	ldr	r3, [r7, #0]
70006556:	68fa      	ldr	r2, [r7, #12]
70006558:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
7000655a:	68fb      	ldr	r3, [r7, #12]
7000655c:	683a      	ldr	r2, [r7, #0]
7000655e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
70006560:	683b      	ldr	r3, [r7, #0]
70006562:	687a      	ldr	r2, [r7, #4]
70006564:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
70006566:	687b      	ldr	r3, [r7, #4]
70006568:	681b      	ldr	r3, [r3, #0]
7000656a:	1c5a      	adds	r2, r3, #1
7000656c:	687b      	ldr	r3, [r7, #4]
7000656e:	601a      	str	r2, [r3, #0]
}
70006570:	bf00      	nop
70006572:	3714      	adds	r7, #20
70006574:	46bd      	mov	sp, r7
70006576:	f85d 7b04 	ldr.w	r7, [sp], #4
7000657a:	4770      	bx	lr

7000657c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
7000657c:	b480      	push	{r7}
7000657e:	b085      	sub	sp, #20
70006580:	af00      	add	r7, sp, #0
70006582:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
70006584:	687b      	ldr	r3, [r7, #4]
70006586:	691b      	ldr	r3, [r3, #16]
70006588:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
7000658a:	687b      	ldr	r3, [r7, #4]
7000658c:	685b      	ldr	r3, [r3, #4]
7000658e:	687a      	ldr	r2, [r7, #4]
70006590:	6892      	ldr	r2, [r2, #8]
70006592:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
70006594:	687b      	ldr	r3, [r7, #4]
70006596:	689b      	ldr	r3, [r3, #8]
70006598:	687a      	ldr	r2, [r7, #4]
7000659a:	6852      	ldr	r2, [r2, #4]
7000659c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
7000659e:	68fb      	ldr	r3, [r7, #12]
700065a0:	685b      	ldr	r3, [r3, #4]
700065a2:	687a      	ldr	r2, [r7, #4]
700065a4:	429a      	cmp	r2, r3
700065a6:	d103      	bne.n	700065b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
700065a8:	687b      	ldr	r3, [r7, #4]
700065aa:	689a      	ldr	r2, [r3, #8]
700065ac:	68fb      	ldr	r3, [r7, #12]
700065ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
700065b0:	687b      	ldr	r3, [r7, #4]
700065b2:	2200      	movs	r2, #0
700065b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
700065b6:	68fb      	ldr	r3, [r7, #12]
700065b8:	681b      	ldr	r3, [r3, #0]
700065ba:	1e5a      	subs	r2, r3, #1
700065bc:	68fb      	ldr	r3, [r7, #12]
700065be:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
700065c0:	68fb      	ldr	r3, [r7, #12]
700065c2:	681b      	ldr	r3, [r3, #0]
}
700065c4:	4618      	mov	r0, r3
700065c6:	3714      	adds	r7, #20
700065c8:	46bd      	mov	sp, r7
700065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
700065ce:	4770      	bx	lr

700065d0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
700065d0:	b480      	push	{r7}
700065d2:	b085      	sub	sp, #20
700065d4:	af00      	add	r7, sp, #0
700065d6:	60f8      	str	r0, [r7, #12]
700065d8:	60b9      	str	r1, [r7, #8]
700065da:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
700065dc:	68fb      	ldr	r3, [r7, #12]
700065de:	3b04      	subs	r3, #4
700065e0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
700065e2:	68fb      	ldr	r3, [r7, #12]
700065e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
700065e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
700065ea:	68fb      	ldr	r3, [r7, #12]
700065ec:	3b04      	subs	r3, #4
700065ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
700065f0:	68bb      	ldr	r3, [r7, #8]
700065f2:	f023 0201 	bic.w	r2, r3, #1
700065f6:	68fb      	ldr	r3, [r7, #12]
700065f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
700065fa:	68fb      	ldr	r3, [r7, #12]
700065fc:	3b04      	subs	r3, #4
700065fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
70006600:	4a0c      	ldr	r2, [pc, #48]	@ (70006634 <pxPortInitialiseStack+0x64>)
70006602:	68fb      	ldr	r3, [r7, #12]
70006604:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
70006606:	68fb      	ldr	r3, [r7, #12]
70006608:	3b14      	subs	r3, #20
7000660a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
7000660c:	687a      	ldr	r2, [r7, #4]
7000660e:	68fb      	ldr	r3, [r7, #12]
70006610:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
70006612:	68fb      	ldr	r3, [r7, #12]
70006614:	3b04      	subs	r3, #4
70006616:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
70006618:	68fb      	ldr	r3, [r7, #12]
7000661a:	f06f 0202 	mvn.w	r2, #2
7000661e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
70006620:	68fb      	ldr	r3, [r7, #12]
70006622:	3b20      	subs	r3, #32
70006624:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
70006626:	68fb      	ldr	r3, [r7, #12]
}
70006628:	4618      	mov	r0, r3
7000662a:	3714      	adds	r7, #20
7000662c:	46bd      	mov	sp, r7
7000662e:	f85d 7b04 	ldr.w	r7, [sp], #4
70006632:	4770      	bx	lr
70006634:	70006639 	.word	0x70006639

70006638 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
70006638:	b480      	push	{r7}
7000663a:	b085      	sub	sp, #20
7000663c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
7000663e:	2300      	movs	r3, #0
70006640:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
70006642:	4b13      	ldr	r3, [pc, #76]	@ (70006690 <prvTaskExitError+0x58>)
70006644:	681b      	ldr	r3, [r3, #0]
70006646:	f1b3 3fff 	cmp.w	r3, #4294967295
7000664a:	d00b      	beq.n	70006664 <prvTaskExitError+0x2c>
        __asm volatile
7000664c:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006650:	f383 8811 	msr	BASEPRI, r3
70006654:	f3bf 8f6f 	isb	sy
70006658:	f3bf 8f4f 	dsb	sy
7000665c:	60fb      	str	r3, [r7, #12]
    }
7000665e:	bf00      	nop
70006660:	bf00      	nop
70006662:	e7fd      	b.n	70006660 <prvTaskExitError+0x28>
        __asm volatile
70006664:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006668:	f383 8811 	msr	BASEPRI, r3
7000666c:	f3bf 8f6f 	isb	sy
70006670:	f3bf 8f4f 	dsb	sy
70006674:	60bb      	str	r3, [r7, #8]
    }
70006676:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
70006678:	bf00      	nop
7000667a:	687b      	ldr	r3, [r7, #4]
7000667c:	2b00      	cmp	r3, #0
7000667e:	d0fc      	beq.n	7000667a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
70006680:	bf00      	nop
70006682:	bf00      	nop
70006684:	3714      	adds	r7, #20
70006686:	46bd      	mov	sp, r7
70006688:	f85d 7b04 	ldr.w	r7, [sp], #4
7000668c:	4770      	bx	lr
7000668e:	bf00      	nop
70006690:	24000020 	.word	0x24000020
	...

700066a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
700066a0:	4b07      	ldr	r3, [pc, #28]	@ (700066c0 <pxCurrentTCBConst2>)
700066a2:	6819      	ldr	r1, [r3, #0]
700066a4:	6808      	ldr	r0, [r1, #0]
700066a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
700066aa:	f380 8809 	msr	PSP, r0
700066ae:	f3bf 8f6f 	isb	sy
700066b2:	f04f 0000 	mov.w	r0, #0
700066b6:	f380 8811 	msr	BASEPRI, r0
700066ba:	4770      	bx	lr
700066bc:	f3af 8000 	nop.w

700066c0 <pxCurrentTCBConst2>:
700066c0:	24004c48 	.word	0x24004c48
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
700066c4:	bf00      	nop
700066c6:	bf00      	nop

700066c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
700066c8:	4808      	ldr	r0, [pc, #32]	@ (700066ec <prvPortStartFirstTask+0x24>)
700066ca:	6800      	ldr	r0, [r0, #0]
700066cc:	6800      	ldr	r0, [r0, #0]
700066ce:	f380 8808 	msr	MSP, r0
700066d2:	f04f 0000 	mov.w	r0, #0
700066d6:	f380 8814 	msr	CONTROL, r0
700066da:	b662      	cpsie	i
700066dc:	b661      	cpsie	f
700066de:	f3bf 8f4f 	dsb	sy
700066e2:	f3bf 8f6f 	isb	sy
700066e6:	df00      	svc	0
700066e8:	bf00      	nop
700066ea:	0000      	.short	0x0000
700066ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
700066f0:	bf00      	nop
700066f2:	bf00      	nop

700066f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
700066f4:	b580      	push	{r7, lr}
700066f6:	b086      	sub	sp, #24
700066f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
700066fa:	4b47      	ldr	r3, [pc, #284]	@ (70006818 <xPortStartScheduler+0x124>)
700066fc:	681b      	ldr	r3, [r3, #0]
700066fe:	4a47      	ldr	r2, [pc, #284]	@ (7000681c <xPortStartScheduler+0x128>)
70006700:	4293      	cmp	r3, r2
70006702:	d10b      	bne.n	7000671c <xPortStartScheduler+0x28>
        __asm volatile
70006704:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006708:	f383 8811 	msr	BASEPRI, r3
7000670c:	f3bf 8f6f 	isb	sy
70006710:	f3bf 8f4f 	dsb	sy
70006714:	613b      	str	r3, [r7, #16]
    }
70006716:	bf00      	nop
70006718:	bf00      	nop
7000671a:	e7fd      	b.n	70006718 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
7000671c:	4b3e      	ldr	r3, [pc, #248]	@ (70006818 <xPortStartScheduler+0x124>)
7000671e:	681b      	ldr	r3, [r3, #0]
70006720:	4a3f      	ldr	r2, [pc, #252]	@ (70006820 <xPortStartScheduler+0x12c>)
70006722:	4293      	cmp	r3, r2
70006724:	d10b      	bne.n	7000673e <xPortStartScheduler+0x4a>
        __asm volatile
70006726:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000672a:	f383 8811 	msr	BASEPRI, r3
7000672e:	f3bf 8f6f 	isb	sy
70006732:	f3bf 8f4f 	dsb	sy
70006736:	60fb      	str	r3, [r7, #12]
    }
70006738:	bf00      	nop
7000673a:	bf00      	nop
7000673c:	e7fd      	b.n	7000673a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
7000673e:	4b39      	ldr	r3, [pc, #228]	@ (70006824 <xPortStartScheduler+0x130>)
70006740:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
70006742:	697b      	ldr	r3, [r7, #20]
70006744:	781b      	ldrb	r3, [r3, #0]
70006746:	b2db      	uxtb	r3, r3
70006748:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
7000674a:	697b      	ldr	r3, [r7, #20]
7000674c:	22ff      	movs	r2, #255	@ 0xff
7000674e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
70006750:	697b      	ldr	r3, [r7, #20]
70006752:	781b      	ldrb	r3, [r3, #0]
70006754:	b2db      	uxtb	r3, r3
70006756:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
70006758:	78fb      	ldrb	r3, [r7, #3]
7000675a:	b2db      	uxtb	r3, r3
7000675c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
70006760:	b2da      	uxtb	r2, r3
70006762:	4b31      	ldr	r3, [pc, #196]	@ (70006828 <xPortStartScheduler+0x134>)
70006764:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
70006766:	4b31      	ldr	r3, [pc, #196]	@ (7000682c <xPortStartScheduler+0x138>)
70006768:	2207      	movs	r2, #7
7000676a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
7000676c:	e009      	b.n	70006782 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
7000676e:	4b2f      	ldr	r3, [pc, #188]	@ (7000682c <xPortStartScheduler+0x138>)
70006770:	681b      	ldr	r3, [r3, #0]
70006772:	3b01      	subs	r3, #1
70006774:	4a2d      	ldr	r2, [pc, #180]	@ (7000682c <xPortStartScheduler+0x138>)
70006776:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
70006778:	78fb      	ldrb	r3, [r7, #3]
7000677a:	b2db      	uxtb	r3, r3
7000677c:	005b      	lsls	r3, r3, #1
7000677e:	b2db      	uxtb	r3, r3
70006780:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
70006782:	78fb      	ldrb	r3, [r7, #3]
70006784:	b2db      	uxtb	r3, r3
70006786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
7000678a:	2b80      	cmp	r3, #128	@ 0x80
7000678c:	d0ef      	beq.n	7000676e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
7000678e:	4b27      	ldr	r3, [pc, #156]	@ (7000682c <xPortStartScheduler+0x138>)
70006790:	681b      	ldr	r3, [r3, #0]
70006792:	f1c3 0307 	rsb	r3, r3, #7
70006796:	2b04      	cmp	r3, #4
70006798:	d00b      	beq.n	700067b2 <xPortStartScheduler+0xbe>
        __asm volatile
7000679a:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000679e:	f383 8811 	msr	BASEPRI, r3
700067a2:	f3bf 8f6f 	isb	sy
700067a6:	f3bf 8f4f 	dsb	sy
700067aa:	60bb      	str	r3, [r7, #8]
    }
700067ac:	bf00      	nop
700067ae:	bf00      	nop
700067b0:	e7fd      	b.n	700067ae <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
700067b2:	4b1e      	ldr	r3, [pc, #120]	@ (7000682c <xPortStartScheduler+0x138>)
700067b4:	681b      	ldr	r3, [r3, #0]
700067b6:	021b      	lsls	r3, r3, #8
700067b8:	4a1c      	ldr	r2, [pc, #112]	@ (7000682c <xPortStartScheduler+0x138>)
700067ba:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
700067bc:	4b1b      	ldr	r3, [pc, #108]	@ (7000682c <xPortStartScheduler+0x138>)
700067be:	681b      	ldr	r3, [r3, #0]
700067c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
700067c4:	4a19      	ldr	r2, [pc, #100]	@ (7000682c <xPortStartScheduler+0x138>)
700067c6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
700067c8:	687b      	ldr	r3, [r7, #4]
700067ca:	b2da      	uxtb	r2, r3
700067cc:	697b      	ldr	r3, [r7, #20]
700067ce:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
700067d0:	4b17      	ldr	r3, [pc, #92]	@ (70006830 <xPortStartScheduler+0x13c>)
700067d2:	681b      	ldr	r3, [r3, #0]
700067d4:	4a16      	ldr	r2, [pc, #88]	@ (70006830 <xPortStartScheduler+0x13c>)
700067d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
700067da:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
700067dc:	4b14      	ldr	r3, [pc, #80]	@ (70006830 <xPortStartScheduler+0x13c>)
700067de:	681b      	ldr	r3, [r3, #0]
700067e0:	4a13      	ldr	r2, [pc, #76]	@ (70006830 <xPortStartScheduler+0x13c>)
700067e2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
700067e6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
700067e8:	f000 f8e0 	bl	700069ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
700067ec:	4b11      	ldr	r3, [pc, #68]	@ (70006834 <xPortStartScheduler+0x140>)
700067ee:	2200      	movs	r2, #0
700067f0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
700067f2:	f000 f8ff 	bl	700069f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
700067f6:	4b10      	ldr	r3, [pc, #64]	@ (70006838 <xPortStartScheduler+0x144>)
700067f8:	681b      	ldr	r3, [r3, #0]
700067fa:	4a0f      	ldr	r2, [pc, #60]	@ (70006838 <xPortStartScheduler+0x144>)
700067fc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
70006800:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
70006802:	f7ff ff61 	bl	700066c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
70006806:	f002 f889 	bl	7000891c <vTaskSwitchContext>
    prvTaskExitError();
7000680a:	f7ff ff15 	bl	70006638 <prvTaskExitError>

    /* Should not get here! */
    return 0;
7000680e:	2300      	movs	r3, #0
}
70006810:	4618      	mov	r0, r3
70006812:	3718      	adds	r7, #24
70006814:	46bd      	mov	sp, r7
70006816:	bd80      	pop	{r7, pc}
70006818:	e000ed00 	.word	0xe000ed00
7000681c:	410fc271 	.word	0x410fc271
70006820:	410fc270 	.word	0x410fc270
70006824:	e000e400 	.word	0xe000e400
70006828:	24004c00 	.word	0x24004c00
7000682c:	24004c04 	.word	0x24004c04
70006830:	e000ed20 	.word	0xe000ed20
70006834:	24000020 	.word	0x24000020
70006838:	e000ef34 	.word	0xe000ef34

7000683c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
7000683c:	b480      	push	{r7}
7000683e:	b083      	sub	sp, #12
70006840:	af00      	add	r7, sp, #0
        __asm volatile
70006842:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006846:	f383 8811 	msr	BASEPRI, r3
7000684a:	f3bf 8f6f 	isb	sy
7000684e:	f3bf 8f4f 	dsb	sy
70006852:	607b      	str	r3, [r7, #4]
    }
70006854:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
70006856:	4b10      	ldr	r3, [pc, #64]	@ (70006898 <vPortEnterCritical+0x5c>)
70006858:	681b      	ldr	r3, [r3, #0]
7000685a:	3301      	adds	r3, #1
7000685c:	4a0e      	ldr	r2, [pc, #56]	@ (70006898 <vPortEnterCritical+0x5c>)
7000685e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
70006860:	4b0d      	ldr	r3, [pc, #52]	@ (70006898 <vPortEnterCritical+0x5c>)
70006862:	681b      	ldr	r3, [r3, #0]
70006864:	2b01      	cmp	r3, #1
70006866:	d110      	bne.n	7000688a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
70006868:	4b0c      	ldr	r3, [pc, #48]	@ (7000689c <vPortEnterCritical+0x60>)
7000686a:	681b      	ldr	r3, [r3, #0]
7000686c:	b2db      	uxtb	r3, r3
7000686e:	2b00      	cmp	r3, #0
70006870:	d00b      	beq.n	7000688a <vPortEnterCritical+0x4e>
        __asm volatile
70006872:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006876:	f383 8811 	msr	BASEPRI, r3
7000687a:	f3bf 8f6f 	isb	sy
7000687e:	f3bf 8f4f 	dsb	sy
70006882:	603b      	str	r3, [r7, #0]
    }
70006884:	bf00      	nop
70006886:	bf00      	nop
70006888:	e7fd      	b.n	70006886 <vPortEnterCritical+0x4a>
    }
}
7000688a:	bf00      	nop
7000688c:	370c      	adds	r7, #12
7000688e:	46bd      	mov	sp, r7
70006890:	f85d 7b04 	ldr.w	r7, [sp], #4
70006894:	4770      	bx	lr
70006896:	bf00      	nop
70006898:	24000020 	.word	0x24000020
7000689c:	e000ed04 	.word	0xe000ed04

700068a0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
700068a0:	b480      	push	{r7}
700068a2:	b083      	sub	sp, #12
700068a4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
700068a6:	4b12      	ldr	r3, [pc, #72]	@ (700068f0 <vPortExitCritical+0x50>)
700068a8:	681b      	ldr	r3, [r3, #0]
700068aa:	2b00      	cmp	r3, #0
700068ac:	d10b      	bne.n	700068c6 <vPortExitCritical+0x26>
        __asm volatile
700068ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
700068b2:	f383 8811 	msr	BASEPRI, r3
700068b6:	f3bf 8f6f 	isb	sy
700068ba:	f3bf 8f4f 	dsb	sy
700068be:	607b      	str	r3, [r7, #4]
    }
700068c0:	bf00      	nop
700068c2:	bf00      	nop
700068c4:	e7fd      	b.n	700068c2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
700068c6:	4b0a      	ldr	r3, [pc, #40]	@ (700068f0 <vPortExitCritical+0x50>)
700068c8:	681b      	ldr	r3, [r3, #0]
700068ca:	3b01      	subs	r3, #1
700068cc:	4a08      	ldr	r2, [pc, #32]	@ (700068f0 <vPortExitCritical+0x50>)
700068ce:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
700068d0:	4b07      	ldr	r3, [pc, #28]	@ (700068f0 <vPortExitCritical+0x50>)
700068d2:	681b      	ldr	r3, [r3, #0]
700068d4:	2b00      	cmp	r3, #0
700068d6:	d105      	bne.n	700068e4 <vPortExitCritical+0x44>
700068d8:	2300      	movs	r3, #0
700068da:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
700068dc:	683b      	ldr	r3, [r7, #0]
700068de:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
700068e2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
700068e4:	bf00      	nop
700068e6:	370c      	adds	r7, #12
700068e8:	46bd      	mov	sp, r7
700068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
700068ee:	4770      	bx	lr
700068f0:	24000020 	.word	0x24000020
	...

70006900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
70006900:	f3ef 8009 	mrs	r0, PSP
70006904:	f3bf 8f6f 	isb	sy
70006908:	4b15      	ldr	r3, [pc, #84]	@ (70006960 <pxCurrentTCBConst>)
7000690a:	681a      	ldr	r2, [r3, #0]
7000690c:	f01e 0f10 	tst.w	lr, #16
70006910:	bf08      	it	eq
70006912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
70006916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
7000691a:	6010      	str	r0, [r2, #0]
7000691c:	e92d 0009 	stmdb	sp!, {r0, r3}
70006920:	f04f 0050 	mov.w	r0, #80	@ 0x50
70006924:	f380 8811 	msr	BASEPRI, r0
70006928:	f3bf 8f4f 	dsb	sy
7000692c:	f3bf 8f6f 	isb	sy
70006930:	f001 fff4 	bl	7000891c <vTaskSwitchContext>
70006934:	f04f 0000 	mov.w	r0, #0
70006938:	f380 8811 	msr	BASEPRI, r0
7000693c:	bc09      	pop	{r0, r3}
7000693e:	6819      	ldr	r1, [r3, #0]
70006940:	6808      	ldr	r0, [r1, #0]
70006942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
70006946:	f01e 0f10 	tst.w	lr, #16
7000694a:	bf08      	it	eq
7000694c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
70006950:	f380 8809 	msr	PSP, r0
70006954:	f3bf 8f6f 	isb	sy
70006958:	4770      	bx	lr
7000695a:	bf00      	nop
7000695c:	f3af 8000 	nop.w

70006960 <pxCurrentTCBConst>:
70006960:	24004c48 	.word	0x24004c48
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
70006964:	bf00      	nop
70006966:	bf00      	nop

70006968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
70006968:	b580      	push	{r7, lr}
7000696a:	b082      	sub	sp, #8
7000696c:	af00      	add	r7, sp, #0
        __asm volatile
7000696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006972:	f383 8811 	msr	BASEPRI, r3
70006976:	f3bf 8f6f 	isb	sy
7000697a:	f3bf 8f4f 	dsb	sy
7000697e:	607b      	str	r3, [r7, #4]
    }
70006980:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
70006982:	f001 feb3 	bl	700086ec <xTaskIncrementTick>
70006986:	4603      	mov	r3, r0
70006988:	2b00      	cmp	r3, #0
7000698a:	d003      	beq.n	70006994 <xPortSysTickHandler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
7000698c:	4b06      	ldr	r3, [pc, #24]	@ (700069a8 <xPortSysTickHandler+0x40>)
7000698e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70006992:	601a      	str	r2, [r3, #0]
70006994:	2300      	movs	r3, #0
70006996:	603b      	str	r3, [r7, #0]
        __asm volatile
70006998:	683b      	ldr	r3, [r7, #0]
7000699a:	f383 8811 	msr	BASEPRI, r3
    }
7000699e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
700069a0:	bf00      	nop
700069a2:	3708      	adds	r7, #8
700069a4:	46bd      	mov	sp, r7
700069a6:	bd80      	pop	{r7, pc}
700069a8:	e000ed04 	.word	0xe000ed04

700069ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
700069ac:	b480      	push	{r7}
700069ae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
700069b0:	4b0b      	ldr	r3, [pc, #44]	@ (700069e0 <vPortSetupTimerInterrupt+0x34>)
700069b2:	2200      	movs	r2, #0
700069b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
700069b6:	4b0b      	ldr	r3, [pc, #44]	@ (700069e4 <vPortSetupTimerInterrupt+0x38>)
700069b8:	2200      	movs	r2, #0
700069ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
700069bc:	4b0a      	ldr	r3, [pc, #40]	@ (700069e8 <vPortSetupTimerInterrupt+0x3c>)
700069be:	681b      	ldr	r3, [r3, #0]
700069c0:	4a0a      	ldr	r2, [pc, #40]	@ (700069ec <vPortSetupTimerInterrupt+0x40>)
700069c2:	fba2 2303 	umull	r2, r3, r2, r3
700069c6:	099b      	lsrs	r3, r3, #6
700069c8:	4a09      	ldr	r2, [pc, #36]	@ (700069f0 <vPortSetupTimerInterrupt+0x44>)
700069ca:	3b01      	subs	r3, #1
700069cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
700069ce:	4b04      	ldr	r3, [pc, #16]	@ (700069e0 <vPortSetupTimerInterrupt+0x34>)
700069d0:	2207      	movs	r2, #7
700069d2:	601a      	str	r2, [r3, #0]
}
700069d4:	bf00      	nop
700069d6:	46bd      	mov	sp, r7
700069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
700069dc:	4770      	bx	lr
700069de:	bf00      	nop
700069e0:	e000e010 	.word	0xe000e010
700069e4:	e000e018 	.word	0xe000e018
700069e8:	24000000 	.word	0x24000000
700069ec:	10624dd3 	.word	0x10624dd3
700069f0:	e000e014 	.word	0xe000e014

700069f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
700069f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 70006a04 <vPortEnableVFP+0x10>
700069f8:	6801      	ldr	r1, [r0, #0]
700069fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
700069fe:	6001      	str	r1, [r0, #0]
70006a00:	4770      	bx	lr
70006a02:	0000      	.short	0x0000
70006a04:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
70006a08:	bf00      	nop
70006a0a:	bf00      	nop

70006a0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
70006a0c:	b480      	push	{r7}
70006a0e:	b085      	sub	sp, #20
70006a10:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
70006a12:	f3ef 8305 	mrs	r3, IPSR
70006a16:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
70006a18:	68fb      	ldr	r3, [r7, #12]
70006a1a:	2b0f      	cmp	r3, #15
70006a1c:	d915      	bls.n	70006a4a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
70006a1e:	4a18      	ldr	r2, [pc, #96]	@ (70006a80 <vPortValidateInterruptPriority+0x74>)
70006a20:	68fb      	ldr	r3, [r7, #12]
70006a22:	4413      	add	r3, r2
70006a24:	781b      	ldrb	r3, [r3, #0]
70006a26:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
70006a28:	4b16      	ldr	r3, [pc, #88]	@ (70006a84 <vPortValidateInterruptPriority+0x78>)
70006a2a:	781b      	ldrb	r3, [r3, #0]
70006a2c:	7afa      	ldrb	r2, [r7, #11]
70006a2e:	429a      	cmp	r2, r3
70006a30:	d20b      	bcs.n	70006a4a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
70006a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006a36:	f383 8811 	msr	BASEPRI, r3
70006a3a:	f3bf 8f6f 	isb	sy
70006a3e:	f3bf 8f4f 	dsb	sy
70006a42:	607b      	str	r3, [r7, #4]
    }
70006a44:	bf00      	nop
70006a46:	bf00      	nop
70006a48:	e7fd      	b.n	70006a46 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
70006a4a:	4b0f      	ldr	r3, [pc, #60]	@ (70006a88 <vPortValidateInterruptPriority+0x7c>)
70006a4c:	681b      	ldr	r3, [r3, #0]
70006a4e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
70006a52:	4b0e      	ldr	r3, [pc, #56]	@ (70006a8c <vPortValidateInterruptPriority+0x80>)
70006a54:	681b      	ldr	r3, [r3, #0]
70006a56:	429a      	cmp	r2, r3
70006a58:	d90b      	bls.n	70006a72 <vPortValidateInterruptPriority+0x66>
        __asm volatile
70006a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006a5e:	f383 8811 	msr	BASEPRI, r3
70006a62:	f3bf 8f6f 	isb	sy
70006a66:	f3bf 8f4f 	dsb	sy
70006a6a:	603b      	str	r3, [r7, #0]
    }
70006a6c:	bf00      	nop
70006a6e:	bf00      	nop
70006a70:	e7fd      	b.n	70006a6e <vPortValidateInterruptPriority+0x62>
    }
70006a72:	bf00      	nop
70006a74:	3714      	adds	r7, #20
70006a76:	46bd      	mov	sp, r7
70006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
70006a7c:	4770      	bx	lr
70006a7e:	bf00      	nop
70006a80:	e000e3f0 	.word	0xe000e3f0
70006a84:	24004c00 	.word	0x24004c00
70006a88:	e000ed0c 	.word	0xe000ed0c
70006a8c:	24004c04 	.word	0x24004c04

70006a90 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
70006a90:	b580      	push	{r7, lr}
70006a92:	b086      	sub	sp, #24
70006a94:	af00      	add	r7, sp, #0
70006a96:	6078      	str	r0, [r7, #4]
70006a98:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
70006a9a:	2301      	movs	r3, #1
70006a9c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
70006a9e:	687b      	ldr	r3, [r7, #4]
70006aa0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
70006aa2:	693b      	ldr	r3, [r7, #16]
70006aa4:	2b00      	cmp	r3, #0
70006aa6:	d10b      	bne.n	70006ac0 <xQueueGenericReset+0x30>
        __asm volatile
70006aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006aac:	f383 8811 	msr	BASEPRI, r3
70006ab0:	f3bf 8f6f 	isb	sy
70006ab4:	f3bf 8f4f 	dsb	sy
70006ab8:	60fb      	str	r3, [r7, #12]
    }
70006aba:	bf00      	nop
70006abc:	bf00      	nop
70006abe:	e7fd      	b.n	70006abc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
70006ac0:	693b      	ldr	r3, [r7, #16]
70006ac2:	2b00      	cmp	r3, #0
70006ac4:	d05d      	beq.n	70006b82 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
70006ac6:	693b      	ldr	r3, [r7, #16]
70006ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
70006aca:	2b00      	cmp	r3, #0
70006acc:	d059      	beq.n	70006b82 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
70006ace:	693b      	ldr	r3, [r7, #16]
70006ad0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
70006ad2:	693b      	ldr	r3, [r7, #16]
70006ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70006ad6:	2100      	movs	r1, #0
70006ad8:	fba3 2302 	umull	r2, r3, r3, r2
70006adc:	2b00      	cmp	r3, #0
70006ade:	d000      	beq.n	70006ae2 <xQueueGenericReset+0x52>
70006ae0:	2101      	movs	r1, #1
70006ae2:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
70006ae4:	2b00      	cmp	r3, #0
70006ae6:	d14c      	bne.n	70006b82 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
70006ae8:	f7ff fea8 	bl	7000683c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
70006aec:	693b      	ldr	r3, [r7, #16]
70006aee:	681a      	ldr	r2, [r3, #0]
70006af0:	693b      	ldr	r3, [r7, #16]
70006af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70006af4:	6939      	ldr	r1, [r7, #16]
70006af6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
70006af8:	fb01 f303 	mul.w	r3, r1, r3
70006afc:	441a      	add	r2, r3
70006afe:	693b      	ldr	r3, [r7, #16]
70006b00:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
70006b02:	693b      	ldr	r3, [r7, #16]
70006b04:	2200      	movs	r2, #0
70006b06:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
70006b08:	693b      	ldr	r3, [r7, #16]
70006b0a:	681a      	ldr	r2, [r3, #0]
70006b0c:	693b      	ldr	r3, [r7, #16]
70006b0e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
70006b10:	693b      	ldr	r3, [r7, #16]
70006b12:	681a      	ldr	r2, [r3, #0]
70006b14:	693b      	ldr	r3, [r7, #16]
70006b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70006b18:	3b01      	subs	r3, #1
70006b1a:	6939      	ldr	r1, [r7, #16]
70006b1c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
70006b1e:	fb01 f303 	mul.w	r3, r1, r3
70006b22:	441a      	add	r2, r3
70006b24:	693b      	ldr	r3, [r7, #16]
70006b26:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
70006b28:	693b      	ldr	r3, [r7, #16]
70006b2a:	22ff      	movs	r2, #255	@ 0xff
70006b2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
70006b30:	693b      	ldr	r3, [r7, #16]
70006b32:	22ff      	movs	r2, #255	@ 0xff
70006b34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
70006b38:	683b      	ldr	r3, [r7, #0]
70006b3a:	2b00      	cmp	r3, #0
70006b3c:	d114      	bne.n	70006b68 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
70006b3e:	693b      	ldr	r3, [r7, #16]
70006b40:	691b      	ldr	r3, [r3, #16]
70006b42:	2b00      	cmp	r3, #0
70006b44:	d01a      	beq.n	70006b7c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
70006b46:	693b      	ldr	r3, [r7, #16]
70006b48:	3310      	adds	r3, #16
70006b4a:	4618      	mov	r0, r3
70006b4c:	f001 ffb8 	bl	70008ac0 <xTaskRemoveFromEventList>
70006b50:	4603      	mov	r3, r0
70006b52:	2b00      	cmp	r3, #0
70006b54:	d012      	beq.n	70006b7c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
70006b56:	4b16      	ldr	r3, [pc, #88]	@ (70006bb0 <xQueueGenericReset+0x120>)
70006b58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70006b5c:	601a      	str	r2, [r3, #0]
70006b5e:	f3bf 8f4f 	dsb	sy
70006b62:	f3bf 8f6f 	isb	sy
70006b66:	e009      	b.n	70006b7c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
70006b68:	693b      	ldr	r3, [r7, #16]
70006b6a:	3310      	adds	r3, #16
70006b6c:	4618      	mov	r0, r3
70006b6e:	f7ff fc7b 	bl	70006468 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
70006b72:	693b      	ldr	r3, [r7, #16]
70006b74:	3324      	adds	r3, #36	@ 0x24
70006b76:	4618      	mov	r0, r3
70006b78:	f7ff fc76 	bl	70006468 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
70006b7c:	f7ff fe90 	bl	700068a0 <vPortExitCritical>
70006b80:	e001      	b.n	70006b86 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
70006b82:	2300      	movs	r3, #0
70006b84:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
70006b86:	697b      	ldr	r3, [r7, #20]
70006b88:	2b00      	cmp	r3, #0
70006b8a:	d10b      	bne.n	70006ba4 <xQueueGenericReset+0x114>
        __asm volatile
70006b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006b90:	f383 8811 	msr	BASEPRI, r3
70006b94:	f3bf 8f6f 	isb	sy
70006b98:	f3bf 8f4f 	dsb	sy
70006b9c:	60bb      	str	r3, [r7, #8]
    }
70006b9e:	bf00      	nop
70006ba0:	bf00      	nop
70006ba2:	e7fd      	b.n	70006ba0 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
70006ba4:	697b      	ldr	r3, [r7, #20]
}
70006ba6:	4618      	mov	r0, r3
70006ba8:	3718      	adds	r7, #24
70006baa:	46bd      	mov	sp, r7
70006bac:	bd80      	pop	{r7, pc}
70006bae:	bf00      	nop
70006bb0:	e000ed04 	.word	0xe000ed04

70006bb4 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
70006bb4:	b580      	push	{r7, lr}
70006bb6:	b08c      	sub	sp, #48	@ 0x30
70006bb8:	af02      	add	r7, sp, #8
70006bba:	60f8      	str	r0, [r7, #12]
70006bbc:	60b9      	str	r1, [r7, #8]
70006bbe:	607a      	str	r2, [r7, #4]
70006bc0:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
70006bc2:	2300      	movs	r3, #0
70006bc4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
70006bc6:	683b      	ldr	r3, [r7, #0]
70006bc8:	2b00      	cmp	r3, #0
70006bca:	d10b      	bne.n	70006be4 <xQueueGenericCreateStatic+0x30>
        __asm volatile
70006bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006bd0:	f383 8811 	msr	BASEPRI, r3
70006bd4:	f3bf 8f6f 	isb	sy
70006bd8:	f3bf 8f4f 	dsb	sy
70006bdc:	623b      	str	r3, [r7, #32]
    }
70006bde:	bf00      	nop
70006be0:	bf00      	nop
70006be2:	e7fd      	b.n	70006be0 <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
70006be4:	68fb      	ldr	r3, [r7, #12]
70006be6:	2b00      	cmp	r3, #0
70006be8:	d031      	beq.n	70006c4e <xQueueGenericCreateStatic+0x9a>
70006bea:	683b      	ldr	r3, [r7, #0]
70006bec:	2b00      	cmp	r3, #0
70006bee:	d02e      	beq.n	70006c4e <xQueueGenericCreateStatic+0x9a>
            ( pxStaticQueue != NULL ) &&
70006bf0:	687b      	ldr	r3, [r7, #4]
70006bf2:	2b00      	cmp	r3, #0
70006bf4:	d002      	beq.n	70006bfc <xQueueGenericCreateStatic+0x48>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
70006bf6:	68bb      	ldr	r3, [r7, #8]
70006bf8:	2b00      	cmp	r3, #0
70006bfa:	d028      	beq.n	70006c4e <xQueueGenericCreateStatic+0x9a>
70006bfc:	687b      	ldr	r3, [r7, #4]
70006bfe:	2b00      	cmp	r3, #0
70006c00:	d102      	bne.n	70006c08 <xQueueGenericCreateStatic+0x54>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
70006c02:	68bb      	ldr	r3, [r7, #8]
70006c04:	2b00      	cmp	r3, #0
70006c06:	d122      	bne.n	70006c4e <xQueueGenericCreateStatic+0x9a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
70006c08:	2350      	movs	r3, #80	@ 0x50
70006c0a:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
70006c0c:	697b      	ldr	r3, [r7, #20]
70006c0e:	2b50      	cmp	r3, #80	@ 0x50
70006c10:	d00b      	beq.n	70006c2a <xQueueGenericCreateStatic+0x76>
        __asm volatile
70006c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006c16:	f383 8811 	msr	BASEPRI, r3
70006c1a:	f3bf 8f6f 	isb	sy
70006c1e:	f3bf 8f4f 	dsb	sy
70006c22:	61fb      	str	r3, [r7, #28]
    }
70006c24:	bf00      	nop
70006c26:	bf00      	nop
70006c28:	e7fd      	b.n	70006c26 <xQueueGenericCreateStatic+0x72>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
70006c2a:	697b      	ldr	r3, [r7, #20]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
70006c2c:	683b      	ldr	r3, [r7, #0]
70006c2e:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
70006c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70006c32:	2201      	movs	r2, #1
70006c34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
70006c38:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
70006c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70006c3e:	9300      	str	r3, [sp, #0]
70006c40:	4613      	mov	r3, r2
70006c42:	687a      	ldr	r2, [r7, #4]
70006c44:	68b9      	ldr	r1, [r7, #8]
70006c46:	68f8      	ldr	r0, [r7, #12]
70006c48:	f000 f868 	bl	70006d1c <prvInitialiseNewQueue>
70006c4c:	e00e      	b.n	70006c6c <xQueueGenericCreateStatic+0xb8>
        }
        else
        {
            configASSERT( pxNewQueue );
70006c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70006c50:	2b00      	cmp	r3, #0
70006c52:	d10b      	bne.n	70006c6c <xQueueGenericCreateStatic+0xb8>
        __asm volatile
70006c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006c58:	f383 8811 	msr	BASEPRI, r3
70006c5c:	f3bf 8f6f 	isb	sy
70006c60:	f3bf 8f4f 	dsb	sy
70006c64:	61bb      	str	r3, [r7, #24]
    }
70006c66:	bf00      	nop
70006c68:	bf00      	nop
70006c6a:	e7fd      	b.n	70006c68 <xQueueGenericCreateStatic+0xb4>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
70006c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
70006c6e:	4618      	mov	r0, r3
70006c70:	3728      	adds	r7, #40	@ 0x28
70006c72:	46bd      	mov	sp, r7
70006c74:	bd80      	pop	{r7, pc}

70006c76 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
70006c76:	b580      	push	{r7, lr}
70006c78:	b08a      	sub	sp, #40	@ 0x28
70006c7a:	af02      	add	r7, sp, #8
70006c7c:	60f8      	str	r0, [r7, #12]
70006c7e:	60b9      	str	r1, [r7, #8]
70006c80:	4613      	mov	r3, r2
70006c82:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
70006c84:	2300      	movs	r3, #0
70006c86:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
70006c88:	68fb      	ldr	r3, [r7, #12]
70006c8a:	2b00      	cmp	r3, #0
70006c8c:	d032      	beq.n	70006cf4 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
70006c8e:	2100      	movs	r1, #0
70006c90:	68ba      	ldr	r2, [r7, #8]
70006c92:	68fb      	ldr	r3, [r7, #12]
70006c94:	fba3 2302 	umull	r2, r3, r3, r2
70006c98:	2b00      	cmp	r3, #0
70006c9a:	d000      	beq.n	70006c9e <xQueueGenericCreate+0x28>
70006c9c:	2101      	movs	r1, #1
70006c9e:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
70006ca0:	2b00      	cmp	r3, #0
70006ca2:	d127      	bne.n	70006cf4 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
70006ca4:	68fb      	ldr	r3, [r7, #12]
70006ca6:	68ba      	ldr	r2, [r7, #8]
70006ca8:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
70006cac:	f113 0f51 	cmn.w	r3, #81	@ 0x51
70006cb0:	d820      	bhi.n	70006cf4 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
70006cb2:	68fb      	ldr	r3, [r7, #12]
70006cb4:	68ba      	ldr	r2, [r7, #8]
70006cb6:	fb02 f303 	mul.w	r3, r2, r3
70006cba:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
70006cbc:	69bb      	ldr	r3, [r7, #24]
70006cbe:	3350      	adds	r3, #80	@ 0x50
70006cc0:	4618      	mov	r0, r3
70006cc2:	f7ff fa01 	bl	700060c8 <pvPortMalloc>
70006cc6:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
70006cc8:	69fb      	ldr	r3, [r7, #28]
70006cca:	2b00      	cmp	r3, #0
70006ccc:	d021      	beq.n	70006d12 <xQueueGenericCreate+0x9c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
70006cce:	69fb      	ldr	r3, [r7, #28]
70006cd0:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
70006cd2:	697b      	ldr	r3, [r7, #20]
70006cd4:	3350      	adds	r3, #80	@ 0x50
70006cd6:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
70006cd8:	69fb      	ldr	r3, [r7, #28]
70006cda:	2200      	movs	r2, #0
70006cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
70006ce0:	79fa      	ldrb	r2, [r7, #7]
70006ce2:	69fb      	ldr	r3, [r7, #28]
70006ce4:	9300      	str	r3, [sp, #0]
70006ce6:	4613      	mov	r3, r2
70006ce8:	697a      	ldr	r2, [r7, #20]
70006cea:	68b9      	ldr	r1, [r7, #8]
70006cec:	68f8      	ldr	r0, [r7, #12]
70006cee:	f000 f815 	bl	70006d1c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
70006cf2:	e00e      	b.n	70006d12 <xQueueGenericCreate+0x9c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
70006cf4:	69fb      	ldr	r3, [r7, #28]
70006cf6:	2b00      	cmp	r3, #0
70006cf8:	d10b      	bne.n	70006d12 <xQueueGenericCreate+0x9c>
        __asm volatile
70006cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006cfe:	f383 8811 	msr	BASEPRI, r3
70006d02:	f3bf 8f6f 	isb	sy
70006d06:	f3bf 8f4f 	dsb	sy
70006d0a:	613b      	str	r3, [r7, #16]
    }
70006d0c:	bf00      	nop
70006d0e:	bf00      	nop
70006d10:	e7fd      	b.n	70006d0e <xQueueGenericCreate+0x98>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
70006d12:	69fb      	ldr	r3, [r7, #28]
    }
70006d14:	4618      	mov	r0, r3
70006d16:	3720      	adds	r7, #32
70006d18:	46bd      	mov	sp, r7
70006d1a:	bd80      	pop	{r7, pc}

70006d1c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
70006d1c:	b580      	push	{r7, lr}
70006d1e:	b084      	sub	sp, #16
70006d20:	af00      	add	r7, sp, #0
70006d22:	60f8      	str	r0, [r7, #12]
70006d24:	60b9      	str	r1, [r7, #8]
70006d26:	607a      	str	r2, [r7, #4]
70006d28:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
70006d2a:	68bb      	ldr	r3, [r7, #8]
70006d2c:	2b00      	cmp	r3, #0
70006d2e:	d103      	bne.n	70006d38 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
70006d30:	69bb      	ldr	r3, [r7, #24]
70006d32:	69ba      	ldr	r2, [r7, #24]
70006d34:	601a      	str	r2, [r3, #0]
70006d36:	e002      	b.n	70006d3e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
70006d38:	69bb      	ldr	r3, [r7, #24]
70006d3a:	687a      	ldr	r2, [r7, #4]
70006d3c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
70006d3e:	69bb      	ldr	r3, [r7, #24]
70006d40:	68fa      	ldr	r2, [r7, #12]
70006d42:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
70006d44:	69bb      	ldr	r3, [r7, #24]
70006d46:	68ba      	ldr	r2, [r7, #8]
70006d48:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
70006d4a:	2101      	movs	r1, #1
70006d4c:	69b8      	ldr	r0, [r7, #24]
70006d4e:	f7ff fe9f 	bl	70006a90 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
70006d52:	69bb      	ldr	r3, [r7, #24]
70006d54:	78fa      	ldrb	r2, [r7, #3]
70006d56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
70006d5a:	bf00      	nop
70006d5c:	3710      	adds	r7, #16
70006d5e:	46bd      	mov	sp, r7
70006d60:	bd80      	pop	{r7, pc}

70006d62 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
70006d62:	b580      	push	{r7, lr}
70006d64:	b082      	sub	sp, #8
70006d66:	af00      	add	r7, sp, #0
70006d68:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
70006d6a:	687b      	ldr	r3, [r7, #4]
70006d6c:	2b00      	cmp	r3, #0
70006d6e:	d00e      	beq.n	70006d8e <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
70006d70:	687b      	ldr	r3, [r7, #4]
70006d72:	2200      	movs	r2, #0
70006d74:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
70006d76:	687b      	ldr	r3, [r7, #4]
70006d78:	2200      	movs	r2, #0
70006d7a:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
70006d7c:	687b      	ldr	r3, [r7, #4]
70006d7e:	2200      	movs	r2, #0
70006d80:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
70006d82:	2300      	movs	r3, #0
70006d84:	2200      	movs	r2, #0
70006d86:	2100      	movs	r1, #0
70006d88:	6878      	ldr	r0, [r7, #4]
70006d8a:	f000 f905 	bl	70006f98 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
70006d8e:	bf00      	nop
70006d90:	3708      	adds	r7, #8
70006d92:	46bd      	mov	sp, r7
70006d94:	bd80      	pop	{r7, pc}

70006d96 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
70006d96:	b580      	push	{r7, lr}
70006d98:	b086      	sub	sp, #24
70006d9a:	af00      	add	r7, sp, #0
70006d9c:	4603      	mov	r3, r0
70006d9e:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
70006da0:	2301      	movs	r3, #1
70006da2:	617b      	str	r3, [r7, #20]
70006da4:	2300      	movs	r3, #0
70006da6:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
70006da8:	79fb      	ldrb	r3, [r7, #7]
70006daa:	461a      	mov	r2, r3
70006dac:	6939      	ldr	r1, [r7, #16]
70006dae:	6978      	ldr	r0, [r7, #20]
70006db0:	f7ff ff61 	bl	70006c76 <xQueueGenericCreate>
70006db4:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
70006db6:	68f8      	ldr	r0, [r7, #12]
70006db8:	f7ff ffd3 	bl	70006d62 <prvInitialiseMutex>

        return xNewQueue;
70006dbc:	68fb      	ldr	r3, [r7, #12]
    }
70006dbe:	4618      	mov	r0, r3
70006dc0:	3718      	adds	r7, #24
70006dc2:	46bd      	mov	sp, r7
70006dc4:	bd80      	pop	{r7, pc}

70006dc6 <xQueueCreateMutexStatic>:

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                           StaticQueue_t * pxStaticQueue )
    {
70006dc6:	b580      	push	{r7, lr}
70006dc8:	b088      	sub	sp, #32
70006dca:	af02      	add	r7, sp, #8
70006dcc:	4603      	mov	r3, r0
70006dce:	6039      	str	r1, [r7, #0]
70006dd0:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
70006dd2:	2301      	movs	r3, #1
70006dd4:	617b      	str	r3, [r7, #20]
70006dd6:	2300      	movs	r3, #0
70006dd8:	613b      	str	r3, [r7, #16]

        /* Prevent compiler warnings about unused parameters if
         * configUSE_TRACE_FACILITY does not equal 1. */
        ( void ) ucQueueType;

        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
70006dda:	79fb      	ldrb	r3, [r7, #7]
70006ddc:	9300      	str	r3, [sp, #0]
70006dde:	683b      	ldr	r3, [r7, #0]
70006de0:	2200      	movs	r2, #0
70006de2:	6939      	ldr	r1, [r7, #16]
70006de4:	6978      	ldr	r0, [r7, #20]
70006de6:	f7ff fee5 	bl	70006bb4 <xQueueGenericCreateStatic>
70006dea:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
70006dec:	68f8      	ldr	r0, [r7, #12]
70006dee:	f7ff ffb8 	bl	70006d62 <prvInitialiseMutex>

        return xNewQueue;
70006df2:	68fb      	ldr	r3, [r7, #12]
    }
70006df4:	4618      	mov	r0, r3
70006df6:	3718      	adds	r7, #24
70006df8:	46bd      	mov	sp, r7
70006dfa:	bd80      	pop	{r7, pc}

70006dfc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
70006dfc:	b590      	push	{r4, r7, lr}
70006dfe:	b087      	sub	sp, #28
70006e00:	af00      	add	r7, sp, #0
70006e02:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
70006e04:	687b      	ldr	r3, [r7, #4]
70006e06:	613b      	str	r3, [r7, #16]

        configASSERT( pxMutex );
70006e08:	693b      	ldr	r3, [r7, #16]
70006e0a:	2b00      	cmp	r3, #0
70006e0c:	d10b      	bne.n	70006e26 <xQueueGiveMutexRecursive+0x2a>
        __asm volatile
70006e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006e12:	f383 8811 	msr	BASEPRI, r3
70006e16:	f3bf 8f6f 	isb	sy
70006e1a:	f3bf 8f4f 	dsb	sy
70006e1e:	60fb      	str	r3, [r7, #12]
    }
70006e20:	bf00      	nop
70006e22:	bf00      	nop
70006e24:	e7fd      	b.n	70006e22 <xQueueGiveMutexRecursive+0x26>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
70006e26:	693b      	ldr	r3, [r7, #16]
70006e28:	689c      	ldr	r4, [r3, #8]
70006e2a:	f002 f885 	bl	70008f38 <xTaskGetCurrentTaskHandle>
70006e2e:	4603      	mov	r3, r0
70006e30:	429c      	cmp	r4, r3
70006e32:	d111      	bne.n	70006e58 <xQueueGiveMutexRecursive+0x5c>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
70006e34:	693b      	ldr	r3, [r7, #16]
70006e36:	68db      	ldr	r3, [r3, #12]
70006e38:	1e5a      	subs	r2, r3, #1
70006e3a:	693b      	ldr	r3, [r7, #16]
70006e3c:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
70006e3e:	693b      	ldr	r3, [r7, #16]
70006e40:	68db      	ldr	r3, [r3, #12]
70006e42:	2b00      	cmp	r3, #0
70006e44:	d105      	bne.n	70006e52 <xQueueGiveMutexRecursive+0x56>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
70006e46:	2300      	movs	r3, #0
70006e48:	2200      	movs	r2, #0
70006e4a:	2100      	movs	r1, #0
70006e4c:	6938      	ldr	r0, [r7, #16]
70006e4e:	f000 f8a3 	bl	70006f98 <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
70006e52:	2301      	movs	r3, #1
70006e54:	617b      	str	r3, [r7, #20]
70006e56:	e001      	b.n	70006e5c <xQueueGiveMutexRecursive+0x60>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
70006e58:	2300      	movs	r3, #0
70006e5a:	617b      	str	r3, [r7, #20]

            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        return xReturn;
70006e5c:	697b      	ldr	r3, [r7, #20]
    }
70006e5e:	4618      	mov	r0, r3
70006e60:	371c      	adds	r7, #28
70006e62:	46bd      	mov	sp, r7
70006e64:	bd90      	pop	{r4, r7, pc}

70006e66 <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
70006e66:	b590      	push	{r4, r7, lr}
70006e68:	b087      	sub	sp, #28
70006e6a:	af00      	add	r7, sp, #0
70006e6c:	6078      	str	r0, [r7, #4]
70006e6e:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
70006e70:	687b      	ldr	r3, [r7, #4]
70006e72:	613b      	str	r3, [r7, #16]

        configASSERT( pxMutex );
70006e74:	693b      	ldr	r3, [r7, #16]
70006e76:	2b00      	cmp	r3, #0
70006e78:	d10b      	bne.n	70006e92 <xQueueTakeMutexRecursive+0x2c>
        __asm volatile
70006e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006e7e:	f383 8811 	msr	BASEPRI, r3
70006e82:	f3bf 8f6f 	isb	sy
70006e86:	f3bf 8f4f 	dsb	sy
70006e8a:	60fb      	str	r3, [r7, #12]
    }
70006e8c:	bf00      	nop
70006e8e:	bf00      	nop
70006e90:	e7fd      	b.n	70006e8e <xQueueTakeMutexRecursive+0x28>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
70006e92:	693b      	ldr	r3, [r7, #16]
70006e94:	689c      	ldr	r4, [r3, #8]
70006e96:	f002 f84f 	bl	70008f38 <xTaskGetCurrentTaskHandle>
70006e9a:	4603      	mov	r3, r0
70006e9c:	429c      	cmp	r4, r3
70006e9e:	d107      	bne.n	70006eb0 <xQueueTakeMutexRecursive+0x4a>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
70006ea0:	693b      	ldr	r3, [r7, #16]
70006ea2:	68db      	ldr	r3, [r3, #12]
70006ea4:	1c5a      	adds	r2, r3, #1
70006ea6:	693b      	ldr	r3, [r7, #16]
70006ea8:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
70006eaa:	2301      	movs	r3, #1
70006eac:	617b      	str	r3, [r7, #20]
70006eae:	e00c      	b.n	70006eca <xQueueTakeMutexRecursive+0x64>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
70006eb0:	6839      	ldr	r1, [r7, #0]
70006eb2:	6938      	ldr	r0, [r7, #16]
70006eb4:	f000 fbb2 	bl	7000761c <xQueueSemaphoreTake>
70006eb8:	6178      	str	r0, [r7, #20]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
70006eba:	697b      	ldr	r3, [r7, #20]
70006ebc:	2b00      	cmp	r3, #0
70006ebe:	d004      	beq.n	70006eca <xQueueTakeMutexRecursive+0x64>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
70006ec0:	693b      	ldr	r3, [r7, #16]
70006ec2:	68db      	ldr	r3, [r3, #12]
70006ec4:	1c5a      	adds	r2, r3, #1
70006ec6:	693b      	ldr	r3, [r7, #16]
70006ec8:	60da      	str	r2, [r3, #12]
            {
                traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
            }
        }

        return xReturn;
70006eca:	697b      	ldr	r3, [r7, #20]
    }
70006ecc:	4618      	mov	r0, r3
70006ece:	371c      	adds	r7, #28
70006ed0:	46bd      	mov	sp, r7
70006ed2:	bd90      	pop	{r4, r7, pc}

70006ed4 <xQueueCreateCountingSemaphoreStatic>:
#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                       const UBaseType_t uxInitialCount,
                                                       StaticQueue_t * pxStaticQueue )
    {
70006ed4:	b580      	push	{r7, lr}
70006ed6:	b088      	sub	sp, #32
70006ed8:	af02      	add	r7, sp, #8
70006eda:	60f8      	str	r0, [r7, #12]
70006edc:	60b9      	str	r1, [r7, #8]
70006ede:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
70006ee0:	2300      	movs	r3, #0
70006ee2:	617b      	str	r3, [r7, #20]

        if( ( uxMaxCount != 0 ) &&
70006ee4:	68fb      	ldr	r3, [r7, #12]
70006ee6:	2b00      	cmp	r3, #0
70006ee8:	d013      	beq.n	70006f12 <xQueueCreateCountingSemaphoreStatic+0x3e>
70006eea:	68ba      	ldr	r2, [r7, #8]
70006eec:	68fb      	ldr	r3, [r7, #12]
70006eee:	429a      	cmp	r2, r3
70006ef0:	d80f      	bhi.n	70006f12 <xQueueCreateCountingSemaphoreStatic+0x3e>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
70006ef2:	2302      	movs	r3, #2
70006ef4:	9300      	str	r3, [sp, #0]
70006ef6:	687b      	ldr	r3, [r7, #4]
70006ef8:	2200      	movs	r2, #0
70006efa:	2100      	movs	r1, #0
70006efc:	68f8      	ldr	r0, [r7, #12]
70006efe:	f7ff fe59 	bl	70006bb4 <xQueueGenericCreateStatic>
70006f02:	6178      	str	r0, [r7, #20]

            if( xHandle != NULL )
70006f04:	697b      	ldr	r3, [r7, #20]
70006f06:	2b00      	cmp	r3, #0
70006f08:	d012      	beq.n	70006f30 <xQueueCreateCountingSemaphoreStatic+0x5c>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
70006f0a:	697b      	ldr	r3, [r7, #20]
70006f0c:	68ba      	ldr	r2, [r7, #8]
70006f0e:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
70006f10:	e00e      	b.n	70006f30 <xQueueCreateCountingSemaphoreStatic+0x5c>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
70006f12:	697b      	ldr	r3, [r7, #20]
70006f14:	2b00      	cmp	r3, #0
70006f16:	d10b      	bne.n	70006f30 <xQueueCreateCountingSemaphoreStatic+0x5c>
        __asm volatile
70006f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006f1c:	f383 8811 	msr	BASEPRI, r3
70006f20:	f3bf 8f6f 	isb	sy
70006f24:	f3bf 8f4f 	dsb	sy
70006f28:	613b      	str	r3, [r7, #16]
    }
70006f2a:	bf00      	nop
70006f2c:	bf00      	nop
70006f2e:	e7fd      	b.n	70006f2c <xQueueCreateCountingSemaphoreStatic+0x58>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
70006f30:	697b      	ldr	r3, [r7, #20]
    }
70006f32:	4618      	mov	r0, r3
70006f34:	3718      	adds	r7, #24
70006f36:	46bd      	mov	sp, r7
70006f38:	bd80      	pop	{r7, pc}

70006f3a <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
70006f3a:	b580      	push	{r7, lr}
70006f3c:	b084      	sub	sp, #16
70006f3e:	af00      	add	r7, sp, #0
70006f40:	6078      	str	r0, [r7, #4]
70006f42:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
70006f44:	2300      	movs	r3, #0
70006f46:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
70006f48:	687b      	ldr	r3, [r7, #4]
70006f4a:	2b00      	cmp	r3, #0
70006f4c:	d010      	beq.n	70006f70 <xQueueCreateCountingSemaphore+0x36>
70006f4e:	683a      	ldr	r2, [r7, #0]
70006f50:	687b      	ldr	r3, [r7, #4]
70006f52:	429a      	cmp	r2, r3
70006f54:	d80c      	bhi.n	70006f70 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
70006f56:	2202      	movs	r2, #2
70006f58:	2100      	movs	r1, #0
70006f5a:	6878      	ldr	r0, [r7, #4]
70006f5c:	f7ff fe8b 	bl	70006c76 <xQueueGenericCreate>
70006f60:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
70006f62:	68fb      	ldr	r3, [r7, #12]
70006f64:	2b00      	cmp	r3, #0
70006f66:	d012      	beq.n	70006f8e <xQueueCreateCountingSemaphore+0x54>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
70006f68:	68fb      	ldr	r3, [r7, #12]
70006f6a:	683a      	ldr	r2, [r7, #0]
70006f6c:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
70006f6e:	e00e      	b.n	70006f8e <xQueueCreateCountingSemaphore+0x54>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
70006f70:	68fb      	ldr	r3, [r7, #12]
70006f72:	2b00      	cmp	r3, #0
70006f74:	d10b      	bne.n	70006f8e <xQueueCreateCountingSemaphore+0x54>
        __asm volatile
70006f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006f7a:	f383 8811 	msr	BASEPRI, r3
70006f7e:	f3bf 8f6f 	isb	sy
70006f82:	f3bf 8f4f 	dsb	sy
70006f86:	60bb      	str	r3, [r7, #8]
    }
70006f88:	bf00      	nop
70006f8a:	bf00      	nop
70006f8c:	e7fd      	b.n	70006f8a <xQueueCreateCountingSemaphore+0x50>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
70006f8e:	68fb      	ldr	r3, [r7, #12]
    }
70006f90:	4618      	mov	r0, r3
70006f92:	3710      	adds	r7, #16
70006f94:	46bd      	mov	sp, r7
70006f96:	bd80      	pop	{r7, pc}

70006f98 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
70006f98:	b580      	push	{r7, lr}
70006f9a:	b08e      	sub	sp, #56	@ 0x38
70006f9c:	af00      	add	r7, sp, #0
70006f9e:	60f8      	str	r0, [r7, #12]
70006fa0:	60b9      	str	r1, [r7, #8]
70006fa2:	607a      	str	r2, [r7, #4]
70006fa4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
70006fa6:	2300      	movs	r3, #0
70006fa8:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
70006faa:	68fb      	ldr	r3, [r7, #12]
70006fac:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
70006fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70006fb0:	2b00      	cmp	r3, #0
70006fb2:	d10b      	bne.n	70006fcc <xQueueGenericSend+0x34>
        __asm volatile
70006fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006fb8:	f383 8811 	msr	BASEPRI, r3
70006fbc:	f3bf 8f6f 	isb	sy
70006fc0:	f3bf 8f4f 	dsb	sy
70006fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
70006fc6:	bf00      	nop
70006fc8:	bf00      	nop
70006fca:	e7fd      	b.n	70006fc8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
70006fcc:	68bb      	ldr	r3, [r7, #8]
70006fce:	2b00      	cmp	r3, #0
70006fd0:	d103      	bne.n	70006fda <xQueueGenericSend+0x42>
70006fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70006fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70006fd6:	2b00      	cmp	r3, #0
70006fd8:	d101      	bne.n	70006fde <xQueueGenericSend+0x46>
70006fda:	2301      	movs	r3, #1
70006fdc:	e000      	b.n	70006fe0 <xQueueGenericSend+0x48>
70006fde:	2300      	movs	r3, #0
70006fe0:	2b00      	cmp	r3, #0
70006fe2:	d10b      	bne.n	70006ffc <xQueueGenericSend+0x64>
        __asm volatile
70006fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
70006fe8:	f383 8811 	msr	BASEPRI, r3
70006fec:	f3bf 8f6f 	isb	sy
70006ff0:	f3bf 8f4f 	dsb	sy
70006ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
70006ff6:	bf00      	nop
70006ff8:	bf00      	nop
70006ffa:	e7fd      	b.n	70006ff8 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
70006ffc:	683b      	ldr	r3, [r7, #0]
70006ffe:	2b02      	cmp	r3, #2
70007000:	d103      	bne.n	7000700a <xQueueGenericSend+0x72>
70007002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70007006:	2b01      	cmp	r3, #1
70007008:	d101      	bne.n	7000700e <xQueueGenericSend+0x76>
7000700a:	2301      	movs	r3, #1
7000700c:	e000      	b.n	70007010 <xQueueGenericSend+0x78>
7000700e:	2300      	movs	r3, #0
70007010:	2b00      	cmp	r3, #0
70007012:	d10b      	bne.n	7000702c <xQueueGenericSend+0x94>
        __asm volatile
70007014:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007018:	f383 8811 	msr	BASEPRI, r3
7000701c:	f3bf 8f6f 	isb	sy
70007020:	f3bf 8f4f 	dsb	sy
70007024:	623b      	str	r3, [r7, #32]
    }
70007026:	bf00      	nop
70007028:	bf00      	nop
7000702a:	e7fd      	b.n	70007028 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
7000702c:	f001 ff94 	bl	70008f58 <xTaskGetSchedulerState>
70007030:	4603      	mov	r3, r0
70007032:	2b00      	cmp	r3, #0
70007034:	d102      	bne.n	7000703c <xQueueGenericSend+0xa4>
70007036:	687b      	ldr	r3, [r7, #4]
70007038:	2b00      	cmp	r3, #0
7000703a:	d101      	bne.n	70007040 <xQueueGenericSend+0xa8>
7000703c:	2301      	movs	r3, #1
7000703e:	e000      	b.n	70007042 <xQueueGenericSend+0xaa>
70007040:	2300      	movs	r3, #0
70007042:	2b00      	cmp	r3, #0
70007044:	d10b      	bne.n	7000705e <xQueueGenericSend+0xc6>
        __asm volatile
70007046:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000704a:	f383 8811 	msr	BASEPRI, r3
7000704e:	f3bf 8f6f 	isb	sy
70007052:	f3bf 8f4f 	dsb	sy
70007056:	61fb      	str	r3, [r7, #28]
    }
70007058:	bf00      	nop
7000705a:	bf00      	nop
7000705c:	e7fd      	b.n	7000705a <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
7000705e:	f7ff fbed 	bl	7000683c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
70007062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
70007066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
7000706a:	429a      	cmp	r2, r3
7000706c:	d302      	bcc.n	70007074 <xQueueGenericSend+0xdc>
7000706e:	683b      	ldr	r3, [r7, #0]
70007070:	2b02      	cmp	r3, #2
70007072:	d129      	bne.n	700070c8 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
70007074:	683a      	ldr	r2, [r7, #0]
70007076:	68b9      	ldr	r1, [r7, #8]
70007078:	6b38      	ldr	r0, [r7, #48]	@ 0x30
7000707a:	f000 fca5 	bl	700079c8 <prvCopyDataToQueue>
7000707e:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
70007080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70007084:	2b00      	cmp	r3, #0
70007086:	d010      	beq.n	700070aa <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
70007088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000708a:	3324      	adds	r3, #36	@ 0x24
7000708c:	4618      	mov	r0, r3
7000708e:	f001 fd17 	bl	70008ac0 <xTaskRemoveFromEventList>
70007092:	4603      	mov	r3, r0
70007094:	2b00      	cmp	r3, #0
70007096:	d013      	beq.n	700070c0 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
70007098:	4b3f      	ldr	r3, [pc, #252]	@ (70007198 <xQueueGenericSend+0x200>)
7000709a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
7000709e:	601a      	str	r2, [r3, #0]
700070a0:	f3bf 8f4f 	dsb	sy
700070a4:	f3bf 8f6f 	isb	sy
700070a8:	e00a      	b.n	700070c0 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
700070aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
700070ac:	2b00      	cmp	r3, #0
700070ae:	d007      	beq.n	700070c0 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
700070b0:	4b39      	ldr	r3, [pc, #228]	@ (70007198 <xQueueGenericSend+0x200>)
700070b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
700070b6:	601a      	str	r2, [r3, #0]
700070b8:	f3bf 8f4f 	dsb	sy
700070bc:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
700070c0:	f7ff fbee 	bl	700068a0 <vPortExitCritical>
                return pdPASS;
700070c4:	2301      	movs	r3, #1
700070c6:	e063      	b.n	70007190 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
700070c8:	687b      	ldr	r3, [r7, #4]
700070ca:	2b00      	cmp	r3, #0
700070cc:	d103      	bne.n	700070d6 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
700070ce:	f7ff fbe7 	bl	700068a0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
700070d2:	2300      	movs	r3, #0
700070d4:	e05c      	b.n	70007190 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
700070d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
700070d8:	2b00      	cmp	r3, #0
700070da:	d106      	bne.n	700070ea <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
700070dc:	f107 0314 	add.w	r3, r7, #20
700070e0:	4618      	mov	r0, r3
700070e2:	f001 fdc5 	bl	70008c70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
700070e6:	2301      	movs	r3, #1
700070e8:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
700070ea:	f7ff fbd9 	bl	700068a0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
700070ee:	f001 f9c3 	bl	70008478 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
700070f2:	f7ff fba3 	bl	7000683c <vPortEnterCritical>
700070f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700070f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
700070fc:	b25b      	sxtb	r3, r3
700070fe:	f1b3 3fff 	cmp.w	r3, #4294967295
70007102:	d103      	bne.n	7000710c <xQueueGenericSend+0x174>
70007104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007106:	2200      	movs	r2, #0
70007108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
7000710c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000710e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
70007112:	b25b      	sxtb	r3, r3
70007114:	f1b3 3fff 	cmp.w	r3, #4294967295
70007118:	d103      	bne.n	70007122 <xQueueGenericSend+0x18a>
7000711a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000711c:	2200      	movs	r2, #0
7000711e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
70007122:	f7ff fbbd 	bl	700068a0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
70007126:	1d3a      	adds	r2, r7, #4
70007128:	f107 0314 	add.w	r3, r7, #20
7000712c:	4611      	mov	r1, r2
7000712e:	4618      	mov	r0, r3
70007130:	f001 fdb4 	bl	70008c9c <xTaskCheckForTimeOut>
70007134:	4603      	mov	r3, r0
70007136:	2b00      	cmp	r3, #0
70007138:	d124      	bne.n	70007184 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
7000713a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
7000713c:	f000 fd3c 	bl	70007bb8 <prvIsQueueFull>
70007140:	4603      	mov	r3, r0
70007142:	2b00      	cmp	r3, #0
70007144:	d018      	beq.n	70007178 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
70007146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007148:	3310      	adds	r3, #16
7000714a:	687a      	ldr	r2, [r7, #4]
7000714c:	4611      	mov	r1, r2
7000714e:	4618      	mov	r0, r3
70007150:	f001 fc4a 	bl	700089e8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
70007154:	6b38      	ldr	r0, [r7, #48]	@ 0x30
70007156:	f000 fcc7 	bl	70007ae8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
7000715a:	f001 f99b 	bl	70008494 <xTaskResumeAll>
7000715e:	4603      	mov	r3, r0
70007160:	2b00      	cmp	r3, #0
70007162:	f47f af7c 	bne.w	7000705e <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
70007166:	4b0c      	ldr	r3, [pc, #48]	@ (70007198 <xQueueGenericSend+0x200>)
70007168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
7000716c:	601a      	str	r2, [r3, #0]
7000716e:	f3bf 8f4f 	dsb	sy
70007172:	f3bf 8f6f 	isb	sy
70007176:	e772      	b.n	7000705e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
70007178:	6b38      	ldr	r0, [r7, #48]	@ 0x30
7000717a:	f000 fcb5 	bl	70007ae8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
7000717e:	f001 f989 	bl	70008494 <xTaskResumeAll>
70007182:	e76c      	b.n	7000705e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
70007184:	6b38      	ldr	r0, [r7, #48]	@ 0x30
70007186:	f000 fcaf 	bl	70007ae8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
7000718a:	f001 f983 	bl	70008494 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
7000718e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
70007190:	4618      	mov	r0, r3
70007192:	3738      	adds	r7, #56	@ 0x38
70007194:	46bd      	mov	sp, r7
70007196:	bd80      	pop	{r7, pc}
70007198:	e000ed04 	.word	0xe000ed04

7000719c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
7000719c:	b580      	push	{r7, lr}
7000719e:	b092      	sub	sp, #72	@ 0x48
700071a0:	af00      	add	r7, sp, #0
700071a2:	60f8      	str	r0, [r7, #12]
700071a4:	60b9      	str	r1, [r7, #8]
700071a6:	607a      	str	r2, [r7, #4]
700071a8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
700071aa:	68fb      	ldr	r3, [r7, #12]
700071ac:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
700071ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
700071b0:	2b00      	cmp	r3, #0
700071b2:	d10b      	bne.n	700071cc <xQueueGenericSendFromISR+0x30>
        __asm volatile
700071b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
700071b8:	f383 8811 	msr	BASEPRI, r3
700071bc:	f3bf 8f6f 	isb	sy
700071c0:	f3bf 8f4f 	dsb	sy
700071c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
700071c6:	bf00      	nop
700071c8:	bf00      	nop
700071ca:	e7fd      	b.n	700071c8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
700071cc:	68bb      	ldr	r3, [r7, #8]
700071ce:	2b00      	cmp	r3, #0
700071d0:	d103      	bne.n	700071da <xQueueGenericSendFromISR+0x3e>
700071d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
700071d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
700071d6:	2b00      	cmp	r3, #0
700071d8:	d101      	bne.n	700071de <xQueueGenericSendFromISR+0x42>
700071da:	2301      	movs	r3, #1
700071dc:	e000      	b.n	700071e0 <xQueueGenericSendFromISR+0x44>
700071de:	2300      	movs	r3, #0
700071e0:	2b00      	cmp	r3, #0
700071e2:	d10b      	bne.n	700071fc <xQueueGenericSendFromISR+0x60>
        __asm volatile
700071e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
700071e8:	f383 8811 	msr	BASEPRI, r3
700071ec:	f3bf 8f6f 	isb	sy
700071f0:	f3bf 8f4f 	dsb	sy
700071f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
700071f6:	bf00      	nop
700071f8:	bf00      	nop
700071fa:	e7fd      	b.n	700071f8 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
700071fc:	683b      	ldr	r3, [r7, #0]
700071fe:	2b02      	cmp	r3, #2
70007200:	d103      	bne.n	7000720a <xQueueGenericSendFromISR+0x6e>
70007202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
70007204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70007206:	2b01      	cmp	r3, #1
70007208:	d101      	bne.n	7000720e <xQueueGenericSendFromISR+0x72>
7000720a:	2301      	movs	r3, #1
7000720c:	e000      	b.n	70007210 <xQueueGenericSendFromISR+0x74>
7000720e:	2300      	movs	r3, #0
70007210:	2b00      	cmp	r3, #0
70007212:	d10b      	bne.n	7000722c <xQueueGenericSendFromISR+0x90>
        __asm volatile
70007214:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007218:	f383 8811 	msr	BASEPRI, r3
7000721c:	f3bf 8f6f 	isb	sy
70007220:	f3bf 8f4f 	dsb	sy
70007224:	627b      	str	r3, [r7, #36]	@ 0x24
    }
70007226:	bf00      	nop
70007228:	bf00      	nop
7000722a:	e7fd      	b.n	70007228 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
7000722c:	f7ff fbee 	bl	70006a0c <vPortValidateInterruptPriority>
        __asm volatile
70007230:	f3ef 8211 	mrs	r2, BASEPRI
70007234:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007238:	f383 8811 	msr	BASEPRI, r3
7000723c:	f3bf 8f6f 	isb	sy
70007240:	f3bf 8f4f 	dsb	sy
70007244:	623a      	str	r2, [r7, #32]
70007246:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
70007248:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
7000724a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
7000724c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
7000724e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
70007250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
70007252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70007254:	429a      	cmp	r2, r3
70007256:	d302      	bcc.n	7000725e <xQueueGenericSendFromISR+0xc2>
70007258:	683b      	ldr	r3, [r7, #0]
7000725a:	2b02      	cmp	r3, #2
7000725c:	d147      	bne.n	700072ee <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
7000725e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
70007260:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
70007264:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
70007268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
7000726a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
7000726c:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
7000726e:	683a      	ldr	r2, [r7, #0]
70007270:	68b9      	ldr	r1, [r7, #8]
70007272:	6c38      	ldr	r0, [r7, #64]	@ 0x40
70007274:	f000 fba8 	bl	700079c8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
70007278:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
7000727c:	f1b3 3fff 	cmp.w	r3, #4294967295
70007280:	d112      	bne.n	700072a8 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
70007282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
70007284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70007286:	2b00      	cmp	r3, #0
70007288:	d02e      	beq.n	700072e8 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
7000728a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
7000728c:	3324      	adds	r3, #36	@ 0x24
7000728e:	4618      	mov	r0, r3
70007290:	f001 fc16 	bl	70008ac0 <xTaskRemoveFromEventList>
70007294:	4603      	mov	r3, r0
70007296:	2b00      	cmp	r3, #0
70007298:	d026      	beq.n	700072e8 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
7000729a:	687b      	ldr	r3, [r7, #4]
7000729c:	2b00      	cmp	r3, #0
7000729e:	d023      	beq.n	700072e8 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
700072a0:	687b      	ldr	r3, [r7, #4]
700072a2:	2201      	movs	r2, #1
700072a4:	601a      	str	r2, [r3, #0]
700072a6:	e01f      	b.n	700072e8 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
700072a8:	f001 fa14 	bl	700086d4 <uxTaskGetNumberOfTasks>
700072ac:	6338      	str	r0, [r7, #48]	@ 0x30
700072ae:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
700072b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
700072b4:	429a      	cmp	r2, r3
700072b6:	d917      	bls.n	700072e8 <xQueueGenericSendFromISR+0x14c>
700072b8:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
700072bc:	2b7f      	cmp	r3, #127	@ 0x7f
700072be:	d10b      	bne.n	700072d8 <xQueueGenericSendFromISR+0x13c>
        __asm volatile
700072c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
700072c4:	f383 8811 	msr	BASEPRI, r3
700072c8:	f3bf 8f6f 	isb	sy
700072cc:	f3bf 8f4f 	dsb	sy
700072d0:	61bb      	str	r3, [r7, #24]
    }
700072d2:	bf00      	nop
700072d4:	bf00      	nop
700072d6:	e7fd      	b.n	700072d4 <xQueueGenericSendFromISR+0x138>
700072d8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
700072dc:	3301      	adds	r3, #1
700072de:	b2db      	uxtb	r3, r3
700072e0:	b25a      	sxtb	r2, r3
700072e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
700072e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
700072e8:	2301      	movs	r3, #1
700072ea:	647b      	str	r3, [r7, #68]	@ 0x44
        {
700072ec:	e001      	b.n	700072f2 <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
700072ee:	2300      	movs	r3, #0
700072f0:	647b      	str	r3, [r7, #68]	@ 0x44
700072f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
700072f4:	617b      	str	r3, [r7, #20]
        __asm volatile
700072f6:	697b      	ldr	r3, [r7, #20]
700072f8:	f383 8811 	msr	BASEPRI, r3
    }
700072fc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
700072fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
70007300:	4618      	mov	r0, r3
70007302:	3748      	adds	r7, #72	@ 0x48
70007304:	46bd      	mov	sp, r7
70007306:	bd80      	pop	{r7, pc}

70007308 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
70007308:	b580      	push	{r7, lr}
7000730a:	b090      	sub	sp, #64	@ 0x40
7000730c:	af00      	add	r7, sp, #0
7000730e:	6078      	str	r0, [r7, #4]
70007310:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
70007312:	687b      	ldr	r3, [r7, #4]
70007314:	63bb      	str	r3, [r7, #56]	@ 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
70007316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70007318:	2b00      	cmp	r3, #0
7000731a:	d10b      	bne.n	70007334 <xQueueGiveFromISR+0x2c>
        __asm volatile
7000731c:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007320:	f383 8811 	msr	BASEPRI, r3
70007324:	f3bf 8f6f 	isb	sy
70007328:	f3bf 8f4f 	dsb	sy
7000732c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
7000732e:	bf00      	nop
70007330:	bf00      	nop
70007332:	e7fd      	b.n	70007330 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
70007334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70007336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007338:	2b00      	cmp	r3, #0
7000733a:	d00b      	beq.n	70007354 <xQueueGiveFromISR+0x4c>
        __asm volatile
7000733c:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007340:	f383 8811 	msr	BASEPRI, r3
70007344:	f3bf 8f6f 	isb	sy
70007348:	f3bf 8f4f 	dsb	sy
7000734c:	623b      	str	r3, [r7, #32]
    }
7000734e:	bf00      	nop
70007350:	bf00      	nop
70007352:	e7fd      	b.n	70007350 <xQueueGiveFromISR+0x48>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
70007354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70007356:	681b      	ldr	r3, [r3, #0]
70007358:	2b00      	cmp	r3, #0
7000735a:	d103      	bne.n	70007364 <xQueueGiveFromISR+0x5c>
7000735c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7000735e:	689b      	ldr	r3, [r3, #8]
70007360:	2b00      	cmp	r3, #0
70007362:	d101      	bne.n	70007368 <xQueueGiveFromISR+0x60>
70007364:	2301      	movs	r3, #1
70007366:	e000      	b.n	7000736a <xQueueGiveFromISR+0x62>
70007368:	2300      	movs	r3, #0
7000736a:	2b00      	cmp	r3, #0
7000736c:	d10b      	bne.n	70007386 <xQueueGiveFromISR+0x7e>
        __asm volatile
7000736e:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007372:	f383 8811 	msr	BASEPRI, r3
70007376:	f3bf 8f6f 	isb	sy
7000737a:	f3bf 8f4f 	dsb	sy
7000737e:	61fb      	str	r3, [r7, #28]
    }
70007380:	bf00      	nop
70007382:	bf00      	nop
70007384:	e7fd      	b.n	70007382 <xQueueGiveFromISR+0x7a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
70007386:	f7ff fb41 	bl	70006a0c <vPortValidateInterruptPriority>
        __asm volatile
7000738a:	f3ef 8211 	mrs	r2, BASEPRI
7000738e:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007392:	f383 8811 	msr	BASEPRI, r3
70007396:	f3bf 8f6f 	isb	sy
7000739a:	f3bf 8f4f 	dsb	sy
7000739e:	61ba      	str	r2, [r7, #24]
700073a0:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
700073a2:	69bb      	ldr	r3, [r7, #24]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
700073a4:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
700073a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700073a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
700073aa:	633b      	str	r3, [r7, #48]	@ 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
700073ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700073ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
700073b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
700073b2:	429a      	cmp	r2, r3
700073b4:	d243      	bcs.n	7000743e <xQueueGiveFromISR+0x136>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
700073b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700073b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
700073bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
700073c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700073c2:	1c5a      	adds	r2, r3, #1
700073c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700073c6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
700073c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
700073cc:	f1b3 3fff 	cmp.w	r3, #4294967295
700073d0:	d112      	bne.n	700073f8 <xQueueGiveFromISR+0xf0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
700073d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700073d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700073d6:	2b00      	cmp	r3, #0
700073d8:	d02e      	beq.n	70007438 <xQueueGiveFromISR+0x130>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
700073da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700073dc:	3324      	adds	r3, #36	@ 0x24
700073de:	4618      	mov	r0, r3
700073e0:	f001 fb6e 	bl	70008ac0 <xTaskRemoveFromEventList>
700073e4:	4603      	mov	r3, r0
700073e6:	2b00      	cmp	r3, #0
700073e8:	d026      	beq.n	70007438 <xQueueGiveFromISR+0x130>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
700073ea:	683b      	ldr	r3, [r7, #0]
700073ec:	2b00      	cmp	r3, #0
700073ee:	d023      	beq.n	70007438 <xQueueGiveFromISR+0x130>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
700073f0:	683b      	ldr	r3, [r7, #0]
700073f2:	2201      	movs	r2, #1
700073f4:	601a      	str	r2, [r3, #0]
700073f6:	e01f      	b.n	70007438 <xQueueGiveFromISR+0x130>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
700073f8:	f001 f96c 	bl	700086d4 <uxTaskGetNumberOfTasks>
700073fc:	62b8      	str	r0, [r7, #40]	@ 0x28
700073fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
70007402:	6aba      	ldr	r2, [r7, #40]	@ 0x28
70007404:	429a      	cmp	r2, r3
70007406:	d917      	bls.n	70007438 <xQueueGiveFromISR+0x130>
70007408:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
7000740c:	2b7f      	cmp	r3, #127	@ 0x7f
7000740e:	d10b      	bne.n	70007428 <xQueueGiveFromISR+0x120>
        __asm volatile
70007410:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007414:	f383 8811 	msr	BASEPRI, r3
70007418:	f3bf 8f6f 	isb	sy
7000741c:	f3bf 8f4f 	dsb	sy
70007420:	613b      	str	r3, [r7, #16]
    }
70007422:	bf00      	nop
70007424:	bf00      	nop
70007426:	e7fd      	b.n	70007424 <xQueueGiveFromISR+0x11c>
70007428:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
7000742c:	3301      	adds	r3, #1
7000742e:	b2db      	uxtb	r3, r3
70007430:	b25a      	sxtb	r2, r3
70007432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70007434:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
70007438:	2301      	movs	r3, #1
7000743a:	63fb      	str	r3, [r7, #60]	@ 0x3c
7000743c:	e001      	b.n	70007442 <xQueueGiveFromISR+0x13a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
7000743e:	2300      	movs	r3, #0
70007440:	63fb      	str	r3, [r7, #60]	@ 0x3c
70007442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70007444:	60fb      	str	r3, [r7, #12]
        __asm volatile
70007446:	68fb      	ldr	r3, [r7, #12]
70007448:	f383 8811 	msr	BASEPRI, r3
    }
7000744c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
7000744e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
70007450:	4618      	mov	r0, r3
70007452:	3740      	adds	r7, #64	@ 0x40
70007454:	46bd      	mov	sp, r7
70007456:	bd80      	pop	{r7, pc}

70007458 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
70007458:	b580      	push	{r7, lr}
7000745a:	b08c      	sub	sp, #48	@ 0x30
7000745c:	af00      	add	r7, sp, #0
7000745e:	60f8      	str	r0, [r7, #12]
70007460:	60b9      	str	r1, [r7, #8]
70007462:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
70007464:	2300      	movs	r3, #0
70007466:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
70007468:	68fb      	ldr	r3, [r7, #12]
7000746a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
7000746c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000746e:	2b00      	cmp	r3, #0
70007470:	d10b      	bne.n	7000748a <xQueueReceive+0x32>
        __asm volatile
70007472:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007476:	f383 8811 	msr	BASEPRI, r3
7000747a:	f3bf 8f6f 	isb	sy
7000747e:	f3bf 8f4f 	dsb	sy
70007482:	623b      	str	r3, [r7, #32]
    }
70007484:	bf00      	nop
70007486:	bf00      	nop
70007488:	e7fd      	b.n	70007486 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
7000748a:	68bb      	ldr	r3, [r7, #8]
7000748c:	2b00      	cmp	r3, #0
7000748e:	d103      	bne.n	70007498 <xQueueReceive+0x40>
70007490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70007492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007494:	2b00      	cmp	r3, #0
70007496:	d101      	bne.n	7000749c <xQueueReceive+0x44>
70007498:	2301      	movs	r3, #1
7000749a:	e000      	b.n	7000749e <xQueueReceive+0x46>
7000749c:	2300      	movs	r3, #0
7000749e:	2b00      	cmp	r3, #0
700074a0:	d10b      	bne.n	700074ba <xQueueReceive+0x62>
        __asm volatile
700074a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
700074a6:	f383 8811 	msr	BASEPRI, r3
700074aa:	f3bf 8f6f 	isb	sy
700074ae:	f3bf 8f4f 	dsb	sy
700074b2:	61fb      	str	r3, [r7, #28]
    }
700074b4:	bf00      	nop
700074b6:	bf00      	nop
700074b8:	e7fd      	b.n	700074b6 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
700074ba:	f001 fd4d 	bl	70008f58 <xTaskGetSchedulerState>
700074be:	4603      	mov	r3, r0
700074c0:	2b00      	cmp	r3, #0
700074c2:	d102      	bne.n	700074ca <xQueueReceive+0x72>
700074c4:	687b      	ldr	r3, [r7, #4]
700074c6:	2b00      	cmp	r3, #0
700074c8:	d101      	bne.n	700074ce <xQueueReceive+0x76>
700074ca:	2301      	movs	r3, #1
700074cc:	e000      	b.n	700074d0 <xQueueReceive+0x78>
700074ce:	2300      	movs	r3, #0
700074d0:	2b00      	cmp	r3, #0
700074d2:	d10b      	bne.n	700074ec <xQueueReceive+0x94>
        __asm volatile
700074d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
700074d8:	f383 8811 	msr	BASEPRI, r3
700074dc:	f3bf 8f6f 	isb	sy
700074e0:	f3bf 8f4f 	dsb	sy
700074e4:	61bb      	str	r3, [r7, #24]
    }
700074e6:	bf00      	nop
700074e8:	bf00      	nop
700074ea:	e7fd      	b.n	700074e8 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
700074ec:	f7ff f9a6 	bl	7000683c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
700074f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700074f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
700074f4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
700074f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700074f8:	2b00      	cmp	r3, #0
700074fa:	d01f      	beq.n	7000753c <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
700074fc:	68b9      	ldr	r1, [r7, #8]
700074fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
70007500:	f000 facc 	bl	70007a9c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
70007504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007506:	1e5a      	subs	r2, r3, #1
70007508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000750a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
7000750c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000750e:	691b      	ldr	r3, [r3, #16]
70007510:	2b00      	cmp	r3, #0
70007512:	d00f      	beq.n	70007534 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
70007514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70007516:	3310      	adds	r3, #16
70007518:	4618      	mov	r0, r3
7000751a:	f001 fad1 	bl	70008ac0 <xTaskRemoveFromEventList>
7000751e:	4603      	mov	r3, r0
70007520:	2b00      	cmp	r3, #0
70007522:	d007      	beq.n	70007534 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
70007524:	4b3c      	ldr	r3, [pc, #240]	@ (70007618 <xQueueReceive+0x1c0>)
70007526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
7000752a:	601a      	str	r2, [r3, #0]
7000752c:	f3bf 8f4f 	dsb	sy
70007530:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
70007534:	f7ff f9b4 	bl	700068a0 <vPortExitCritical>
                return pdPASS;
70007538:	2301      	movs	r3, #1
7000753a:	e069      	b.n	70007610 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
7000753c:	687b      	ldr	r3, [r7, #4]
7000753e:	2b00      	cmp	r3, #0
70007540:	d103      	bne.n	7000754a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
70007542:	f7ff f9ad 	bl	700068a0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
70007546:	2300      	movs	r3, #0
70007548:	e062      	b.n	70007610 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
7000754a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000754c:	2b00      	cmp	r3, #0
7000754e:	d106      	bne.n	7000755e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
70007550:	f107 0310 	add.w	r3, r7, #16
70007554:	4618      	mov	r0, r3
70007556:	f001 fb8b 	bl	70008c70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
7000755a:	2301      	movs	r3, #1
7000755c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
7000755e:	f7ff f99f 	bl	700068a0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
70007562:	f000 ff89 	bl	70008478 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
70007566:	f7ff f969 	bl	7000683c <vPortEnterCritical>
7000756a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000756c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
70007570:	b25b      	sxtb	r3, r3
70007572:	f1b3 3fff 	cmp.w	r3, #4294967295
70007576:	d103      	bne.n	70007580 <xQueueReceive+0x128>
70007578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000757a:	2200      	movs	r2, #0
7000757c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
70007580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70007582:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
70007586:	b25b      	sxtb	r3, r3
70007588:	f1b3 3fff 	cmp.w	r3, #4294967295
7000758c:	d103      	bne.n	70007596 <xQueueReceive+0x13e>
7000758e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70007590:	2200      	movs	r2, #0
70007592:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
70007596:	f7ff f983 	bl	700068a0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
7000759a:	1d3a      	adds	r2, r7, #4
7000759c:	f107 0310 	add.w	r3, r7, #16
700075a0:	4611      	mov	r1, r2
700075a2:	4618      	mov	r0, r3
700075a4:	f001 fb7a 	bl	70008c9c <xTaskCheckForTimeOut>
700075a8:	4603      	mov	r3, r0
700075aa:	2b00      	cmp	r3, #0
700075ac:	d123      	bne.n	700075f6 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
700075ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
700075b0:	f000 faec 	bl	70007b8c <prvIsQueueEmpty>
700075b4:	4603      	mov	r3, r0
700075b6:	2b00      	cmp	r3, #0
700075b8:	d017      	beq.n	700075ea <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
700075ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700075bc:	3324      	adds	r3, #36	@ 0x24
700075be:	687a      	ldr	r2, [r7, #4]
700075c0:	4611      	mov	r1, r2
700075c2:	4618      	mov	r0, r3
700075c4:	f001 fa10 	bl	700089e8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
700075c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
700075ca:	f000 fa8d 	bl	70007ae8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
700075ce:	f000 ff61 	bl	70008494 <xTaskResumeAll>
700075d2:	4603      	mov	r3, r0
700075d4:	2b00      	cmp	r3, #0
700075d6:	d189      	bne.n	700074ec <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
700075d8:	4b0f      	ldr	r3, [pc, #60]	@ (70007618 <xQueueReceive+0x1c0>)
700075da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
700075de:	601a      	str	r2, [r3, #0]
700075e0:	f3bf 8f4f 	dsb	sy
700075e4:	f3bf 8f6f 	isb	sy
700075e8:	e780      	b.n	700074ec <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
700075ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
700075ec:	f000 fa7c 	bl	70007ae8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
700075f0:	f000 ff50 	bl	70008494 <xTaskResumeAll>
700075f4:	e77a      	b.n	700074ec <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
700075f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
700075f8:	f000 fa76 	bl	70007ae8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
700075fc:	f000 ff4a 	bl	70008494 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
70007600:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
70007602:	f000 fac3 	bl	70007b8c <prvIsQueueEmpty>
70007606:	4603      	mov	r3, r0
70007608:	2b00      	cmp	r3, #0
7000760a:	f43f af6f 	beq.w	700074ec <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
7000760e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
70007610:	4618      	mov	r0, r3
70007612:	3730      	adds	r7, #48	@ 0x30
70007614:	46bd      	mov	sp, r7
70007616:	bd80      	pop	{r7, pc}
70007618:	e000ed04 	.word	0xe000ed04

7000761c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
7000761c:	b580      	push	{r7, lr}
7000761e:	b08c      	sub	sp, #48	@ 0x30
70007620:	af00      	add	r7, sp, #0
70007622:	6078      	str	r0, [r7, #4]
70007624:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
70007626:	2300      	movs	r3, #0
70007628:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
7000762a:	687b      	ldr	r3, [r7, #4]
7000762c:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
7000762e:	2300      	movs	r3, #0
70007630:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
70007632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007634:	2b00      	cmp	r3, #0
70007636:	d10b      	bne.n	70007650 <xQueueSemaphoreTake+0x34>
        __asm volatile
70007638:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000763c:	f383 8811 	msr	BASEPRI, r3
70007640:	f3bf 8f6f 	isb	sy
70007644:	f3bf 8f4f 	dsb	sy
70007648:	61bb      	str	r3, [r7, #24]
    }
7000764a:	bf00      	nop
7000764c:	bf00      	nop
7000764e:	e7fd      	b.n	7000764c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
70007650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007654:	2b00      	cmp	r3, #0
70007656:	d00b      	beq.n	70007670 <xQueueSemaphoreTake+0x54>
        __asm volatile
70007658:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000765c:	f383 8811 	msr	BASEPRI, r3
70007660:	f3bf 8f6f 	isb	sy
70007664:	f3bf 8f4f 	dsb	sy
70007668:	617b      	str	r3, [r7, #20]
    }
7000766a:	bf00      	nop
7000766c:	bf00      	nop
7000766e:	e7fd      	b.n	7000766c <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
70007670:	f001 fc72 	bl	70008f58 <xTaskGetSchedulerState>
70007674:	4603      	mov	r3, r0
70007676:	2b00      	cmp	r3, #0
70007678:	d102      	bne.n	70007680 <xQueueSemaphoreTake+0x64>
7000767a:	683b      	ldr	r3, [r7, #0]
7000767c:	2b00      	cmp	r3, #0
7000767e:	d101      	bne.n	70007684 <xQueueSemaphoreTake+0x68>
70007680:	2301      	movs	r3, #1
70007682:	e000      	b.n	70007686 <xQueueSemaphoreTake+0x6a>
70007684:	2300      	movs	r3, #0
70007686:	2b00      	cmp	r3, #0
70007688:	d10b      	bne.n	700076a2 <xQueueSemaphoreTake+0x86>
        __asm volatile
7000768a:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000768e:	f383 8811 	msr	BASEPRI, r3
70007692:	f3bf 8f6f 	isb	sy
70007696:	f3bf 8f4f 	dsb	sy
7000769a:	613b      	str	r3, [r7, #16]
    }
7000769c:	bf00      	nop
7000769e:	bf00      	nop
700076a0:	e7fd      	b.n	7000769e <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
700076a2:	f7ff f8cb 	bl	7000683c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
700076a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700076a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
700076aa:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
700076ac:	6a3b      	ldr	r3, [r7, #32]
700076ae:	2b00      	cmp	r3, #0
700076b0:	d024      	beq.n	700076fc <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
700076b2:	6a3b      	ldr	r3, [r7, #32]
700076b4:	1e5a      	subs	r2, r3, #1
700076b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700076b8:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
700076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700076bc:	681b      	ldr	r3, [r3, #0]
700076be:	2b00      	cmp	r3, #0
700076c0:	d104      	bne.n	700076cc <xQueueSemaphoreTake+0xb0>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
700076c2:	f001 fe3b 	bl	7000933c <pvTaskIncrementMutexHeldCount>
700076c6:	4602      	mov	r2, r0
700076c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700076ca:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
700076cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700076ce:	691b      	ldr	r3, [r3, #16]
700076d0:	2b00      	cmp	r3, #0
700076d2:	d00f      	beq.n	700076f4 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
700076d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700076d6:	3310      	adds	r3, #16
700076d8:	4618      	mov	r0, r3
700076da:	f001 f9f1 	bl	70008ac0 <xTaskRemoveFromEventList>
700076de:	4603      	mov	r3, r0
700076e0:	2b00      	cmp	r3, #0
700076e2:	d007      	beq.n	700076f4 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
700076e4:	4b4c      	ldr	r3, [pc, #304]	@ (70007818 <xQueueSemaphoreTake+0x1fc>)
700076e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
700076ea:	601a      	str	r2, [r3, #0]
700076ec:	f3bf 8f4f 	dsb	sy
700076f0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
700076f4:	f7ff f8d4 	bl	700068a0 <vPortExitCritical>
                return pdPASS;
700076f8:	2301      	movs	r3, #1
700076fa:	e089      	b.n	70007810 <xQueueSemaphoreTake+0x1f4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
700076fc:	683b      	ldr	r3, [r7, #0]
700076fe:	2b00      	cmp	r3, #0
70007700:	d103      	bne.n	7000770a <xQueueSemaphoreTake+0xee>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
70007702:	f7ff f8cd 	bl	700068a0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
70007706:	2300      	movs	r3, #0
70007708:	e082      	b.n	70007810 <xQueueSemaphoreTake+0x1f4>
                }
                else if( xEntryTimeSet == pdFALSE )
7000770a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000770c:	2b00      	cmp	r3, #0
7000770e:	d106      	bne.n	7000771e <xQueueSemaphoreTake+0x102>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
70007710:	f107 0308 	add.w	r3, r7, #8
70007714:	4618      	mov	r0, r3
70007716:	f001 faab 	bl	70008c70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
7000771a:	2301      	movs	r3, #1
7000771c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
7000771e:	f7ff f8bf 	bl	700068a0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
70007722:	f000 fea9 	bl	70008478 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
70007726:	f7ff f889 	bl	7000683c <vPortEnterCritical>
7000772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000772c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
70007730:	b25b      	sxtb	r3, r3
70007732:	f1b3 3fff 	cmp.w	r3, #4294967295
70007736:	d103      	bne.n	70007740 <xQueueSemaphoreTake+0x124>
70007738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000773a:	2200      	movs	r2, #0
7000773c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
70007740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007742:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
70007746:	b25b      	sxtb	r3, r3
70007748:	f1b3 3fff 	cmp.w	r3, #4294967295
7000774c:	d103      	bne.n	70007756 <xQueueSemaphoreTake+0x13a>
7000774e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007750:	2200      	movs	r2, #0
70007752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
70007756:	f7ff f8a3 	bl	700068a0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
7000775a:	463a      	mov	r2, r7
7000775c:	f107 0308 	add.w	r3, r7, #8
70007760:	4611      	mov	r1, r2
70007762:	4618      	mov	r0, r3
70007764:	f001 fa9a 	bl	70008c9c <xTaskCheckForTimeOut>
70007768:	4603      	mov	r3, r0
7000776a:	2b00      	cmp	r3, #0
7000776c:	d132      	bne.n	700077d4 <xQueueSemaphoreTake+0x1b8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
7000776e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
70007770:	f000 fa0c 	bl	70007b8c <prvIsQueueEmpty>
70007774:	4603      	mov	r3, r0
70007776:	2b00      	cmp	r3, #0
70007778:	d026      	beq.n	700077c8 <xQueueSemaphoreTake+0x1ac>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
7000777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000777c:	681b      	ldr	r3, [r3, #0]
7000777e:	2b00      	cmp	r3, #0
70007780:	d109      	bne.n	70007796 <xQueueSemaphoreTake+0x17a>
                    {
                        taskENTER_CRITICAL();
70007782:	f7ff f85b 	bl	7000683c <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
70007786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007788:	689b      	ldr	r3, [r3, #8]
7000778a:	4618      	mov	r0, r3
7000778c:	f001 fc02 	bl	70008f94 <xTaskPriorityInherit>
70007790:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
70007792:	f7ff f885 	bl	700068a0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
70007796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007798:	3324      	adds	r3, #36	@ 0x24
7000779a:	683a      	ldr	r2, [r7, #0]
7000779c:	4611      	mov	r1, r2
7000779e:	4618      	mov	r0, r3
700077a0:	f001 f922 	bl	700089e8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
700077a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
700077a6:	f000 f99f 	bl	70007ae8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
700077aa:	f000 fe73 	bl	70008494 <xTaskResumeAll>
700077ae:	4603      	mov	r3, r0
700077b0:	2b00      	cmp	r3, #0
700077b2:	f47f af76 	bne.w	700076a2 <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
700077b6:	4b18      	ldr	r3, [pc, #96]	@ (70007818 <xQueueSemaphoreTake+0x1fc>)
700077b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
700077bc:	601a      	str	r2, [r3, #0]
700077be:	f3bf 8f4f 	dsb	sy
700077c2:	f3bf 8f6f 	isb	sy
700077c6:	e76c      	b.n	700076a2 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
700077c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
700077ca:	f000 f98d 	bl	70007ae8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
700077ce:	f000 fe61 	bl	70008494 <xTaskResumeAll>
700077d2:	e766      	b.n	700076a2 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
700077d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
700077d6:	f000 f987 	bl	70007ae8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
700077da:	f000 fe5b 	bl	70008494 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
700077de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
700077e0:	f000 f9d4 	bl	70007b8c <prvIsQueueEmpty>
700077e4:	4603      	mov	r3, r0
700077e6:	2b00      	cmp	r3, #0
700077e8:	f43f af5b 	beq.w	700076a2 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
700077ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700077ee:	2b00      	cmp	r3, #0
700077f0:	d00d      	beq.n	7000780e <xQueueSemaphoreTake+0x1f2>
                    {
                        taskENTER_CRITICAL();
700077f2:	f7ff f823 	bl	7000683c <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
700077f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
700077f8:	f000 f8ce 	bl	70007998 <prvGetDisinheritPriorityAfterTimeout>
700077fc:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
700077fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007800:	689b      	ldr	r3, [r3, #8]
70007802:	69f9      	ldr	r1, [r7, #28]
70007804:	4618      	mov	r0, r3
70007806:	f001 fced 	bl	700091e4 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
7000780a:	f7ff f849 	bl	700068a0 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
7000780e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
70007810:	4618      	mov	r0, r3
70007812:	3730      	adds	r7, #48	@ 0x30
70007814:	46bd      	mov	sp, r7
70007816:	bd80      	pop	{r7, pc}
70007818:	e000ed04 	.word	0xe000ed04

7000781c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
7000781c:	b580      	push	{r7, lr}
7000781e:	b090      	sub	sp, #64	@ 0x40
70007820:	af00      	add	r7, sp, #0
70007822:	60f8      	str	r0, [r7, #12]
70007824:	60b9      	str	r1, [r7, #8]
70007826:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
70007828:	68fb      	ldr	r3, [r7, #12]
7000782a:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
7000782c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7000782e:	2b00      	cmp	r3, #0
70007830:	d10b      	bne.n	7000784a <xQueueReceiveFromISR+0x2e>
        __asm volatile
70007832:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007836:	f383 8811 	msr	BASEPRI, r3
7000783a:	f3bf 8f6f 	isb	sy
7000783e:	f3bf 8f4f 	dsb	sy
70007842:	627b      	str	r3, [r7, #36]	@ 0x24
    }
70007844:	bf00      	nop
70007846:	bf00      	nop
70007848:	e7fd      	b.n	70007846 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
7000784a:	68bb      	ldr	r3, [r7, #8]
7000784c:	2b00      	cmp	r3, #0
7000784e:	d103      	bne.n	70007858 <xQueueReceiveFromISR+0x3c>
70007850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70007852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007854:	2b00      	cmp	r3, #0
70007856:	d101      	bne.n	7000785c <xQueueReceiveFromISR+0x40>
70007858:	2301      	movs	r3, #1
7000785a:	e000      	b.n	7000785e <xQueueReceiveFromISR+0x42>
7000785c:	2300      	movs	r3, #0
7000785e:	2b00      	cmp	r3, #0
70007860:	d10b      	bne.n	7000787a <xQueueReceiveFromISR+0x5e>
        __asm volatile
70007862:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007866:	f383 8811 	msr	BASEPRI, r3
7000786a:	f3bf 8f6f 	isb	sy
7000786e:	f3bf 8f4f 	dsb	sy
70007872:	623b      	str	r3, [r7, #32]
    }
70007874:	bf00      	nop
70007876:	bf00      	nop
70007878:	e7fd      	b.n	70007876 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
7000787a:	f7ff f8c7 	bl	70006a0c <vPortValidateInterruptPriority>
        __asm volatile
7000787e:	f3ef 8211 	mrs	r2, BASEPRI
70007882:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007886:	f383 8811 	msr	BASEPRI, r3
7000788a:	f3bf 8f6f 	isb	sy
7000788e:	f3bf 8f4f 	dsb	sy
70007892:	61fa      	str	r2, [r7, #28]
70007894:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
70007896:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
70007898:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
7000789a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7000789c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
7000789e:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
700078a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700078a2:	2b00      	cmp	r3, #0
700078a4:	d047      	beq.n	70007936 <xQueueReceiveFromISR+0x11a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
700078a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700078a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
700078ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
700078b0:	68b9      	ldr	r1, [r7, #8]
700078b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
700078b4:	f000 f8f2 	bl	70007a9c <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
700078b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
700078ba:	1e5a      	subs	r2, r3, #1
700078bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700078be:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
700078c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
700078c4:	f1b3 3fff 	cmp.w	r3, #4294967295
700078c8:	d112      	bne.n	700078f0 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
700078ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700078cc:	691b      	ldr	r3, [r3, #16]
700078ce:	2b00      	cmp	r3, #0
700078d0:	d02e      	beq.n	70007930 <xQueueReceiveFromISR+0x114>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
700078d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700078d4:	3310      	adds	r3, #16
700078d6:	4618      	mov	r0, r3
700078d8:	f001 f8f2 	bl	70008ac0 <xTaskRemoveFromEventList>
700078dc:	4603      	mov	r3, r0
700078de:	2b00      	cmp	r3, #0
700078e0:	d026      	beq.n	70007930 <xQueueReceiveFromISR+0x114>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
700078e2:	687b      	ldr	r3, [r7, #4]
700078e4:	2b00      	cmp	r3, #0
700078e6:	d023      	beq.n	70007930 <xQueueReceiveFromISR+0x114>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
700078e8:	687b      	ldr	r3, [r7, #4]
700078ea:	2201      	movs	r2, #1
700078ec:	601a      	str	r2, [r3, #0]
700078ee:	e01f      	b.n	70007930 <xQueueReceiveFromISR+0x114>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
700078f0:	f000 fef0 	bl	700086d4 <uxTaskGetNumberOfTasks>
700078f4:	62b8      	str	r0, [r7, #40]	@ 0x28
700078f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
700078fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
700078fc:	429a      	cmp	r2, r3
700078fe:	d917      	bls.n	70007930 <xQueueReceiveFromISR+0x114>
70007900:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
70007904:	2b7f      	cmp	r3, #127	@ 0x7f
70007906:	d10b      	bne.n	70007920 <xQueueReceiveFromISR+0x104>
        __asm volatile
70007908:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000790c:	f383 8811 	msr	BASEPRI, r3
70007910:	f3bf 8f6f 	isb	sy
70007914:	f3bf 8f4f 	dsb	sy
70007918:	617b      	str	r3, [r7, #20]
    }
7000791a:	bf00      	nop
7000791c:	bf00      	nop
7000791e:	e7fd      	b.n	7000791c <xQueueReceiveFromISR+0x100>
70007920:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
70007924:	3301      	adds	r3, #1
70007926:	b2db      	uxtb	r3, r3
70007928:	b25a      	sxtb	r2, r3
7000792a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7000792c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
70007930:	2301      	movs	r3, #1
70007932:	63fb      	str	r3, [r7, #60]	@ 0x3c
70007934:	e001      	b.n	7000793a <xQueueReceiveFromISR+0x11e>
        }
        else
        {
            xReturn = pdFAIL;
70007936:	2300      	movs	r3, #0
70007938:	63fb      	str	r3, [r7, #60]	@ 0x3c
7000793a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7000793c:	613b      	str	r3, [r7, #16]
        __asm volatile
7000793e:	693b      	ldr	r3, [r7, #16]
70007940:	f383 8811 	msr	BASEPRI, r3
    }
70007944:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
70007946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
70007948:	4618      	mov	r0, r3
7000794a:	3740      	adds	r7, #64	@ 0x40
7000794c:	46bd      	mov	sp, r7
7000794e:	bd80      	pop	{r7, pc}

70007950 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
70007950:	b580      	push	{r7, lr}
70007952:	b084      	sub	sp, #16
70007954:	af00      	add	r7, sp, #0
70007956:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
70007958:	687b      	ldr	r3, [r7, #4]
7000795a:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
7000795c:	68fb      	ldr	r3, [r7, #12]
7000795e:	2b00      	cmp	r3, #0
70007960:	d10b      	bne.n	7000797a <vQueueDelete+0x2a>
        __asm volatile
70007962:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007966:	f383 8811 	msr	BASEPRI, r3
7000796a:	f3bf 8f6f 	isb	sy
7000796e:	f3bf 8f4f 	dsb	sy
70007972:	60bb      	str	r3, [r7, #8]
    }
70007974:	bf00      	nop
70007976:	bf00      	nop
70007978:	e7fd      	b.n	70007976 <vQueueDelete+0x26>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
7000797a:	68f8      	ldr	r0, [r7, #12]
7000797c:	f000 f984 	bl	70007c88 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
70007980:	68fb      	ldr	r3, [r7, #12]
70007982:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
70007986:	2b00      	cmp	r3, #0
70007988:	d102      	bne.n	70007990 <vQueueDelete+0x40>
        {
            vPortFree( pxQueue );
7000798a:	68f8      	ldr	r0, [r7, #12]
7000798c:	f7fe fc58 	bl	70006240 <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
70007990:	bf00      	nop
70007992:	3710      	adds	r7, #16
70007994:	46bd      	mov	sp, r7
70007996:	bd80      	pop	{r7, pc}

70007998 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
70007998:	b480      	push	{r7}
7000799a:	b085      	sub	sp, #20
7000799c:	af00      	add	r7, sp, #0
7000799e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
700079a0:	687b      	ldr	r3, [r7, #4]
700079a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700079a4:	2b00      	cmp	r3, #0
700079a6:	d006      	beq.n	700079b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
700079a8:	687b      	ldr	r3, [r7, #4]
700079aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
700079ac:	681b      	ldr	r3, [r3, #0]
700079ae:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
700079b2:	60fb      	str	r3, [r7, #12]
700079b4:	e001      	b.n	700079ba <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
700079b6:	2300      	movs	r3, #0
700079b8:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
700079ba:	68fb      	ldr	r3, [r7, #12]
    }
700079bc:	4618      	mov	r0, r3
700079be:	3714      	adds	r7, #20
700079c0:	46bd      	mov	sp, r7
700079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
700079c6:	4770      	bx	lr

700079c8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
700079c8:	b580      	push	{r7, lr}
700079ca:	b086      	sub	sp, #24
700079cc:	af00      	add	r7, sp, #0
700079ce:	60f8      	str	r0, [r7, #12]
700079d0:	60b9      	str	r1, [r7, #8]
700079d2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
700079d4:	2300      	movs	r3, #0
700079d6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
700079d8:	68fb      	ldr	r3, [r7, #12]
700079da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
700079dc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
700079de:	68fb      	ldr	r3, [r7, #12]
700079e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
700079e2:	2b00      	cmp	r3, #0
700079e4:	d10d      	bne.n	70007a02 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
700079e6:	68fb      	ldr	r3, [r7, #12]
700079e8:	681b      	ldr	r3, [r3, #0]
700079ea:	2b00      	cmp	r3, #0
700079ec:	d14d      	bne.n	70007a8a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
700079ee:	68fb      	ldr	r3, [r7, #12]
700079f0:	689b      	ldr	r3, [r3, #8]
700079f2:	4618      	mov	r0, r3
700079f4:	f001 fb5e 	bl	700090b4 <xTaskPriorityDisinherit>
700079f8:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
700079fa:	68fb      	ldr	r3, [r7, #12]
700079fc:	2200      	movs	r2, #0
700079fe:	609a      	str	r2, [r3, #8]
70007a00:	e043      	b.n	70007a8a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
70007a02:	687b      	ldr	r3, [r7, #4]
70007a04:	2b00      	cmp	r3, #0
70007a06:	d119      	bne.n	70007a3c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
70007a08:	68fb      	ldr	r3, [r7, #12]
70007a0a:	6858      	ldr	r0, [r3, #4]
70007a0c:	68fb      	ldr	r3, [r7, #12]
70007a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007a10:	461a      	mov	r2, r3
70007a12:	68b9      	ldr	r1, [r7, #8]
70007a14:	f00c fab5 	bl	70013f82 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
70007a18:	68fb      	ldr	r3, [r7, #12]
70007a1a:	685a      	ldr	r2, [r3, #4]
70007a1c:	68fb      	ldr	r3, [r7, #12]
70007a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007a20:	441a      	add	r2, r3
70007a22:	68fb      	ldr	r3, [r7, #12]
70007a24:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
70007a26:	68fb      	ldr	r3, [r7, #12]
70007a28:	685a      	ldr	r2, [r3, #4]
70007a2a:	68fb      	ldr	r3, [r7, #12]
70007a2c:	689b      	ldr	r3, [r3, #8]
70007a2e:	429a      	cmp	r2, r3
70007a30:	d32b      	bcc.n	70007a8a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
70007a32:	68fb      	ldr	r3, [r7, #12]
70007a34:	681a      	ldr	r2, [r3, #0]
70007a36:	68fb      	ldr	r3, [r7, #12]
70007a38:	605a      	str	r2, [r3, #4]
70007a3a:	e026      	b.n	70007a8a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
70007a3c:	68fb      	ldr	r3, [r7, #12]
70007a3e:	68d8      	ldr	r0, [r3, #12]
70007a40:	68fb      	ldr	r3, [r7, #12]
70007a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007a44:	461a      	mov	r2, r3
70007a46:	68b9      	ldr	r1, [r7, #8]
70007a48:	f00c fa9b 	bl	70013f82 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
70007a4c:	68fb      	ldr	r3, [r7, #12]
70007a4e:	68da      	ldr	r2, [r3, #12]
70007a50:	68fb      	ldr	r3, [r7, #12]
70007a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007a54:	425b      	negs	r3, r3
70007a56:	441a      	add	r2, r3
70007a58:	68fb      	ldr	r3, [r7, #12]
70007a5a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
70007a5c:	68fb      	ldr	r3, [r7, #12]
70007a5e:	68da      	ldr	r2, [r3, #12]
70007a60:	68fb      	ldr	r3, [r7, #12]
70007a62:	681b      	ldr	r3, [r3, #0]
70007a64:	429a      	cmp	r2, r3
70007a66:	d207      	bcs.n	70007a78 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
70007a68:	68fb      	ldr	r3, [r7, #12]
70007a6a:	689a      	ldr	r2, [r3, #8]
70007a6c:	68fb      	ldr	r3, [r7, #12]
70007a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007a70:	425b      	negs	r3, r3
70007a72:	441a      	add	r2, r3
70007a74:	68fb      	ldr	r3, [r7, #12]
70007a76:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
70007a78:	687b      	ldr	r3, [r7, #4]
70007a7a:	2b02      	cmp	r3, #2
70007a7c:	d105      	bne.n	70007a8a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
70007a7e:	693b      	ldr	r3, [r7, #16]
70007a80:	2b00      	cmp	r3, #0
70007a82:	d002      	beq.n	70007a8a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
70007a84:	693b      	ldr	r3, [r7, #16]
70007a86:	3b01      	subs	r3, #1
70007a88:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
70007a8a:	693b      	ldr	r3, [r7, #16]
70007a8c:	1c5a      	adds	r2, r3, #1
70007a8e:	68fb      	ldr	r3, [r7, #12]
70007a90:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
70007a92:	697b      	ldr	r3, [r7, #20]
}
70007a94:	4618      	mov	r0, r3
70007a96:	3718      	adds	r7, #24
70007a98:	46bd      	mov	sp, r7
70007a9a:	bd80      	pop	{r7, pc}

70007a9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
70007a9c:	b580      	push	{r7, lr}
70007a9e:	b082      	sub	sp, #8
70007aa0:	af00      	add	r7, sp, #0
70007aa2:	6078      	str	r0, [r7, #4]
70007aa4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
70007aa6:	687b      	ldr	r3, [r7, #4]
70007aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007aaa:	2b00      	cmp	r3, #0
70007aac:	d018      	beq.n	70007ae0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
70007aae:	687b      	ldr	r3, [r7, #4]
70007ab0:	68da      	ldr	r2, [r3, #12]
70007ab2:	687b      	ldr	r3, [r7, #4]
70007ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007ab6:	441a      	add	r2, r3
70007ab8:	687b      	ldr	r3, [r7, #4]
70007aba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
70007abc:	687b      	ldr	r3, [r7, #4]
70007abe:	68da      	ldr	r2, [r3, #12]
70007ac0:	687b      	ldr	r3, [r7, #4]
70007ac2:	689b      	ldr	r3, [r3, #8]
70007ac4:	429a      	cmp	r2, r3
70007ac6:	d303      	bcc.n	70007ad0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
70007ac8:	687b      	ldr	r3, [r7, #4]
70007aca:	681a      	ldr	r2, [r3, #0]
70007acc:	687b      	ldr	r3, [r7, #4]
70007ace:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
70007ad0:	687b      	ldr	r3, [r7, #4]
70007ad2:	68d9      	ldr	r1, [r3, #12]
70007ad4:	687b      	ldr	r3, [r7, #4]
70007ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70007ad8:	461a      	mov	r2, r3
70007ada:	6838      	ldr	r0, [r7, #0]
70007adc:	f00c fa51 	bl	70013f82 <memcpy>
    }
}
70007ae0:	bf00      	nop
70007ae2:	3708      	adds	r7, #8
70007ae4:	46bd      	mov	sp, r7
70007ae6:	bd80      	pop	{r7, pc}

70007ae8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
70007ae8:	b580      	push	{r7, lr}
70007aea:	b084      	sub	sp, #16
70007aec:	af00      	add	r7, sp, #0
70007aee:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
70007af0:	f7fe fea4 	bl	7000683c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
70007af4:	687b      	ldr	r3, [r7, #4]
70007af6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
70007afa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
70007afc:	e011      	b.n	70007b22 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
70007afe:	687b      	ldr	r3, [r7, #4]
70007b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70007b02:	2b00      	cmp	r3, #0
70007b04:	d012      	beq.n	70007b2c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
70007b06:	687b      	ldr	r3, [r7, #4]
70007b08:	3324      	adds	r3, #36	@ 0x24
70007b0a:	4618      	mov	r0, r3
70007b0c:	f000 ffd8 	bl	70008ac0 <xTaskRemoveFromEventList>
70007b10:	4603      	mov	r3, r0
70007b12:	2b00      	cmp	r3, #0
70007b14:	d001      	beq.n	70007b1a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
70007b16:	f001 f929 	bl	70008d6c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
70007b1a:	7bfb      	ldrb	r3, [r7, #15]
70007b1c:	3b01      	subs	r3, #1
70007b1e:	b2db      	uxtb	r3, r3
70007b20:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
70007b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
70007b26:	2b00      	cmp	r3, #0
70007b28:	dce9      	bgt.n	70007afe <prvUnlockQueue+0x16>
70007b2a:	e000      	b.n	70007b2e <prvUnlockQueue+0x46>
                    break;
70007b2c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
70007b2e:	687b      	ldr	r3, [r7, #4]
70007b30:	22ff      	movs	r2, #255	@ 0xff
70007b32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
70007b36:	f7fe feb3 	bl	700068a0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
70007b3a:	f7fe fe7f 	bl	7000683c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
70007b3e:	687b      	ldr	r3, [r7, #4]
70007b40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
70007b44:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
70007b46:	e011      	b.n	70007b6c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
70007b48:	687b      	ldr	r3, [r7, #4]
70007b4a:	691b      	ldr	r3, [r3, #16]
70007b4c:	2b00      	cmp	r3, #0
70007b4e:	d012      	beq.n	70007b76 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
70007b50:	687b      	ldr	r3, [r7, #4]
70007b52:	3310      	adds	r3, #16
70007b54:	4618      	mov	r0, r3
70007b56:	f000 ffb3 	bl	70008ac0 <xTaskRemoveFromEventList>
70007b5a:	4603      	mov	r3, r0
70007b5c:	2b00      	cmp	r3, #0
70007b5e:	d001      	beq.n	70007b64 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
70007b60:	f001 f904 	bl	70008d6c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
70007b64:	7bbb      	ldrb	r3, [r7, #14]
70007b66:	3b01      	subs	r3, #1
70007b68:	b2db      	uxtb	r3, r3
70007b6a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
70007b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
70007b70:	2b00      	cmp	r3, #0
70007b72:	dce9      	bgt.n	70007b48 <prvUnlockQueue+0x60>
70007b74:	e000      	b.n	70007b78 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
70007b76:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
70007b78:	687b      	ldr	r3, [r7, #4]
70007b7a:	22ff      	movs	r2, #255	@ 0xff
70007b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
70007b80:	f7fe fe8e 	bl	700068a0 <vPortExitCritical>
}
70007b84:	bf00      	nop
70007b86:	3710      	adds	r7, #16
70007b88:	46bd      	mov	sp, r7
70007b8a:	bd80      	pop	{r7, pc}

70007b8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
70007b8c:	b580      	push	{r7, lr}
70007b8e:	b084      	sub	sp, #16
70007b90:	af00      	add	r7, sp, #0
70007b92:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
70007b94:	f7fe fe52 	bl	7000683c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
70007b98:	687b      	ldr	r3, [r7, #4]
70007b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
70007b9c:	2b00      	cmp	r3, #0
70007b9e:	d102      	bne.n	70007ba6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
70007ba0:	2301      	movs	r3, #1
70007ba2:	60fb      	str	r3, [r7, #12]
70007ba4:	e001      	b.n	70007baa <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
70007ba6:	2300      	movs	r3, #0
70007ba8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
70007baa:	f7fe fe79 	bl	700068a0 <vPortExitCritical>

    return xReturn;
70007bae:	68fb      	ldr	r3, [r7, #12]
}
70007bb0:	4618      	mov	r0, r3
70007bb2:	3710      	adds	r7, #16
70007bb4:	46bd      	mov	sp, r7
70007bb6:	bd80      	pop	{r7, pc}

70007bb8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
70007bb8:	b580      	push	{r7, lr}
70007bba:	b084      	sub	sp, #16
70007bbc:	af00      	add	r7, sp, #0
70007bbe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
70007bc0:	f7fe fe3c 	bl	7000683c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
70007bc4:	687b      	ldr	r3, [r7, #4]
70007bc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
70007bc8:	687b      	ldr	r3, [r7, #4]
70007bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70007bcc:	429a      	cmp	r2, r3
70007bce:	d102      	bne.n	70007bd6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
70007bd0:	2301      	movs	r3, #1
70007bd2:	60fb      	str	r3, [r7, #12]
70007bd4:	e001      	b.n	70007bda <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
70007bd6:	2300      	movs	r3, #0
70007bd8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
70007bda:	f7fe fe61 	bl	700068a0 <vPortExitCritical>

    return xReturn;
70007bde:	68fb      	ldr	r3, [r7, #12]
}
70007be0:	4618      	mov	r0, r3
70007be2:	3710      	adds	r7, #16
70007be4:	46bd      	mov	sp, r7
70007be6:	bd80      	pop	{r7, pc}

70007be8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
70007be8:	b480      	push	{r7}
70007bea:	b087      	sub	sp, #28
70007bec:	af00      	add	r7, sp, #0
70007bee:	6078      	str	r0, [r7, #4]
70007bf0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
70007bf2:	2300      	movs	r3, #0
70007bf4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
70007bf6:	687b      	ldr	r3, [r7, #4]
70007bf8:	2b00      	cmp	r3, #0
70007bfa:	d10b      	bne.n	70007c14 <vQueueAddToRegistry+0x2c>
        __asm volatile
70007bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007c00:	f383 8811 	msr	BASEPRI, r3
70007c04:	f3bf 8f6f 	isb	sy
70007c08:	f3bf 8f4f 	dsb	sy
70007c0c:	60fb      	str	r3, [r7, #12]
    }
70007c0e:	bf00      	nop
70007c10:	bf00      	nop
70007c12:	e7fd      	b.n	70007c10 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
70007c14:	683b      	ldr	r3, [r7, #0]
70007c16:	2b00      	cmp	r3, #0
70007c18:	d024      	beq.n	70007c64 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
70007c1a:	2300      	movs	r3, #0
70007c1c:	617b      	str	r3, [r7, #20]
70007c1e:	e01e      	b.n	70007c5e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
70007c20:	4a18      	ldr	r2, [pc, #96]	@ (70007c84 <vQueueAddToRegistry+0x9c>)
70007c22:	697b      	ldr	r3, [r7, #20]
70007c24:	00db      	lsls	r3, r3, #3
70007c26:	4413      	add	r3, r2
70007c28:	685b      	ldr	r3, [r3, #4]
70007c2a:	687a      	ldr	r2, [r7, #4]
70007c2c:	429a      	cmp	r2, r3
70007c2e:	d105      	bne.n	70007c3c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
70007c30:	697b      	ldr	r3, [r7, #20]
70007c32:	00db      	lsls	r3, r3, #3
70007c34:	4a13      	ldr	r2, [pc, #76]	@ (70007c84 <vQueueAddToRegistry+0x9c>)
70007c36:	4413      	add	r3, r2
70007c38:	613b      	str	r3, [r7, #16]
                    break;
70007c3a:	e013      	b.n	70007c64 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
70007c3c:	693b      	ldr	r3, [r7, #16]
70007c3e:	2b00      	cmp	r3, #0
70007c40:	d10a      	bne.n	70007c58 <vQueueAddToRegistry+0x70>
70007c42:	4a10      	ldr	r2, [pc, #64]	@ (70007c84 <vQueueAddToRegistry+0x9c>)
70007c44:	697b      	ldr	r3, [r7, #20]
70007c46:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
70007c4a:	2b00      	cmp	r3, #0
70007c4c:	d104      	bne.n	70007c58 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
70007c4e:	697b      	ldr	r3, [r7, #20]
70007c50:	00db      	lsls	r3, r3, #3
70007c52:	4a0c      	ldr	r2, [pc, #48]	@ (70007c84 <vQueueAddToRegistry+0x9c>)
70007c54:	4413      	add	r3, r2
70007c56:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
70007c58:	697b      	ldr	r3, [r7, #20]
70007c5a:	3301      	adds	r3, #1
70007c5c:	617b      	str	r3, [r7, #20]
70007c5e:	697b      	ldr	r3, [r7, #20]
70007c60:	2b07      	cmp	r3, #7
70007c62:	d9dd      	bls.n	70007c20 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
70007c64:	693b      	ldr	r3, [r7, #16]
70007c66:	2b00      	cmp	r3, #0
70007c68:	d005      	beq.n	70007c76 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
70007c6a:	693b      	ldr	r3, [r7, #16]
70007c6c:	683a      	ldr	r2, [r7, #0]
70007c6e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
70007c70:	693b      	ldr	r3, [r7, #16]
70007c72:	687a      	ldr	r2, [r7, #4]
70007c74:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
70007c76:	bf00      	nop
70007c78:	371c      	adds	r7, #28
70007c7a:	46bd      	mov	sp, r7
70007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
70007c80:	4770      	bx	lr
70007c82:	bf00      	nop
70007c84:	24004c08 	.word	0x24004c08

70007c88 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
70007c88:	b480      	push	{r7}
70007c8a:	b085      	sub	sp, #20
70007c8c:	af00      	add	r7, sp, #0
70007c8e:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
70007c90:	687b      	ldr	r3, [r7, #4]
70007c92:	2b00      	cmp	r3, #0
70007c94:	d10b      	bne.n	70007cae <vQueueUnregisterQueue+0x26>
        __asm volatile
70007c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007c9a:	f383 8811 	msr	BASEPRI, r3
70007c9e:	f3bf 8f6f 	isb	sy
70007ca2:	f3bf 8f4f 	dsb	sy
70007ca6:	60bb      	str	r3, [r7, #8]
    }
70007ca8:	bf00      	nop
70007caa:	bf00      	nop
70007cac:	e7fd      	b.n	70007caa <vQueueUnregisterQueue+0x22>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
70007cae:	2300      	movs	r3, #0
70007cb0:	60fb      	str	r3, [r7, #12]
70007cb2:	e016      	b.n	70007ce2 <vQueueUnregisterQueue+0x5a>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
70007cb4:	4a10      	ldr	r2, [pc, #64]	@ (70007cf8 <vQueueUnregisterQueue+0x70>)
70007cb6:	68fb      	ldr	r3, [r7, #12]
70007cb8:	00db      	lsls	r3, r3, #3
70007cba:	4413      	add	r3, r2
70007cbc:	685b      	ldr	r3, [r3, #4]
70007cbe:	687a      	ldr	r2, [r7, #4]
70007cc0:	429a      	cmp	r2, r3
70007cc2:	d10b      	bne.n	70007cdc <vQueueUnregisterQueue+0x54>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
70007cc4:	4a0c      	ldr	r2, [pc, #48]	@ (70007cf8 <vQueueUnregisterQueue+0x70>)
70007cc6:	68fb      	ldr	r3, [r7, #12]
70007cc8:	2100      	movs	r1, #0
70007cca:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
70007cce:	4a0a      	ldr	r2, [pc, #40]	@ (70007cf8 <vQueueUnregisterQueue+0x70>)
70007cd0:	68fb      	ldr	r3, [r7, #12]
70007cd2:	00db      	lsls	r3, r3, #3
70007cd4:	4413      	add	r3, r2
70007cd6:	2200      	movs	r2, #0
70007cd8:	605a      	str	r2, [r3, #4]
                break;
70007cda:	e006      	b.n	70007cea <vQueueUnregisterQueue+0x62>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
70007cdc:	68fb      	ldr	r3, [r7, #12]
70007cde:	3301      	adds	r3, #1
70007ce0:	60fb      	str	r3, [r7, #12]
70007ce2:	68fb      	ldr	r3, [r7, #12]
70007ce4:	2b07      	cmp	r3, #7
70007ce6:	d9e5      	bls.n	70007cb4 <vQueueUnregisterQueue+0x2c>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
70007ce8:	bf00      	nop
70007cea:	bf00      	nop
70007cec:	3714      	adds	r7, #20
70007cee:	46bd      	mov	sp, r7
70007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
70007cf4:	4770      	bx	lr
70007cf6:	bf00      	nop
70007cf8:	24004c08 	.word	0x24004c08

70007cfc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
70007cfc:	b580      	push	{r7, lr}
70007cfe:	b086      	sub	sp, #24
70007d00:	af00      	add	r7, sp, #0
70007d02:	60f8      	str	r0, [r7, #12]
70007d04:	60b9      	str	r1, [r7, #8]
70007d06:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
70007d08:	68fb      	ldr	r3, [r7, #12]
70007d0a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
70007d0c:	f7fe fd96 	bl	7000683c <vPortEnterCritical>
70007d10:	697b      	ldr	r3, [r7, #20]
70007d12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
70007d16:	b25b      	sxtb	r3, r3
70007d18:	f1b3 3fff 	cmp.w	r3, #4294967295
70007d1c:	d103      	bne.n	70007d26 <vQueueWaitForMessageRestricted+0x2a>
70007d1e:	697b      	ldr	r3, [r7, #20]
70007d20:	2200      	movs	r2, #0
70007d22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
70007d26:	697b      	ldr	r3, [r7, #20]
70007d28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
70007d2c:	b25b      	sxtb	r3, r3
70007d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
70007d32:	d103      	bne.n	70007d3c <vQueueWaitForMessageRestricted+0x40>
70007d34:	697b      	ldr	r3, [r7, #20]
70007d36:	2200      	movs	r2, #0
70007d38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
70007d3c:	f7fe fdb0 	bl	700068a0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
70007d40:	697b      	ldr	r3, [r7, #20]
70007d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
70007d44:	2b00      	cmp	r3, #0
70007d46:	d106      	bne.n	70007d56 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
70007d48:	697b      	ldr	r3, [r7, #20]
70007d4a:	3324      	adds	r3, #36	@ 0x24
70007d4c:	687a      	ldr	r2, [r7, #4]
70007d4e:	68b9      	ldr	r1, [r7, #8]
70007d50:	4618      	mov	r0, r3
70007d52:	f000 fe6f 	bl	70008a34 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
70007d56:	6978      	ldr	r0, [r7, #20]
70007d58:	f7ff fec6 	bl	70007ae8 <prvUnlockQueue>
    }
70007d5c:	bf00      	nop
70007d5e:	3718      	adds	r7, #24
70007d60:	46bd      	mov	sp, r7
70007d62:	bd80      	pop	{r7, pc}

70007d64 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
70007d64:	b580      	push	{r7, lr}
70007d66:	b08e      	sub	sp, #56	@ 0x38
70007d68:	af04      	add	r7, sp, #16
70007d6a:	60f8      	str	r0, [r7, #12]
70007d6c:	60b9      	str	r1, [r7, #8]
70007d6e:	607a      	str	r2, [r7, #4]
70007d70:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
70007d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70007d74:	2b00      	cmp	r3, #0
70007d76:	d10b      	bne.n	70007d90 <xTaskCreateStatic+0x2c>
        __asm volatile
70007d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007d7c:	f383 8811 	msr	BASEPRI, r3
70007d80:	f3bf 8f6f 	isb	sy
70007d84:	f3bf 8f4f 	dsb	sy
70007d88:	623b      	str	r3, [r7, #32]
    }
70007d8a:	bf00      	nop
70007d8c:	bf00      	nop
70007d8e:	e7fd      	b.n	70007d8c <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
70007d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70007d92:	2b00      	cmp	r3, #0
70007d94:	d10b      	bne.n	70007dae <xTaskCreateStatic+0x4a>
        __asm volatile
70007d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007d9a:	f383 8811 	msr	BASEPRI, r3
70007d9e:	f3bf 8f6f 	isb	sy
70007da2:	f3bf 8f4f 	dsb	sy
70007da6:	61fb      	str	r3, [r7, #28]
    }
70007da8:	bf00      	nop
70007daa:	bf00      	nop
70007dac:	e7fd      	b.n	70007daa <xTaskCreateStatic+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
70007dae:	23a8      	movs	r3, #168	@ 0xa8
70007db0:	613b      	str	r3, [r7, #16]
            configASSERT( xSize == sizeof( TCB_t ) );
70007db2:	693b      	ldr	r3, [r7, #16]
70007db4:	2ba8      	cmp	r3, #168	@ 0xa8
70007db6:	d00b      	beq.n	70007dd0 <xTaskCreateStatic+0x6c>
        __asm volatile
70007db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007dbc:	f383 8811 	msr	BASEPRI, r3
70007dc0:	f3bf 8f6f 	isb	sy
70007dc4:	f3bf 8f4f 	dsb	sy
70007dc8:	61bb      	str	r3, [r7, #24]
    }
70007dca:	bf00      	nop
70007dcc:	bf00      	nop
70007dce:	e7fd      	b.n	70007dcc <xTaskCreateStatic+0x68>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
70007dd0:	693b      	ldr	r3, [r7, #16]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
70007dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70007dd4:	2b00      	cmp	r3, #0
70007dd6:	d023      	beq.n	70007e20 <xTaskCreateStatic+0xbc>
70007dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70007dda:	2b00      	cmp	r3, #0
70007ddc:	d020      	beq.n	70007e20 <xTaskCreateStatic+0xbc>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
70007dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70007de0:	627b      	str	r3, [r7, #36]	@ 0x24
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
70007de2:	22a8      	movs	r2, #168	@ 0xa8
70007de4:	2100      	movs	r1, #0
70007de6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
70007de8:	f00b ffff 	bl	70013dea <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
70007dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007dee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
70007df0:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
70007df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007df4:	2202      	movs	r2, #2
70007df6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
70007dfa:	2300      	movs	r3, #0
70007dfc:	9303      	str	r3, [sp, #12]
70007dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70007e00:	9302      	str	r3, [sp, #8]
70007e02:	f107 0314 	add.w	r3, r7, #20
70007e06:	9301      	str	r3, [sp, #4]
70007e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007e0a:	9300      	str	r3, [sp, #0]
70007e0c:	683b      	ldr	r3, [r7, #0]
70007e0e:	687a      	ldr	r2, [r7, #4]
70007e10:	68b9      	ldr	r1, [r7, #8]
70007e12:	68f8      	ldr	r0, [r7, #12]
70007e14:	f000 f856 	bl	70007ec4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
70007e18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
70007e1a:	f000 f8f9 	bl	70008010 <prvAddNewTaskToReadyList>
70007e1e:	e001      	b.n	70007e24 <xTaskCreateStatic+0xc0>
        }
        else
        {
            xReturn = NULL;
70007e20:	2300      	movs	r3, #0
70007e22:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
70007e24:	697b      	ldr	r3, [r7, #20]
    }
70007e26:	4618      	mov	r0, r3
70007e28:	3728      	adds	r7, #40	@ 0x28
70007e2a:	46bd      	mov	sp, r7
70007e2c:	bd80      	pop	{r7, pc}

70007e2e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
70007e2e:	b580      	push	{r7, lr}
70007e30:	b08c      	sub	sp, #48	@ 0x30
70007e32:	af04      	add	r7, sp, #16
70007e34:	60f8      	str	r0, [r7, #12]
70007e36:	60b9      	str	r1, [r7, #8]
70007e38:	603b      	str	r3, [r7, #0]
70007e3a:	4613      	mov	r3, r2
70007e3c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
70007e3e:	88fb      	ldrh	r3, [r7, #6]
70007e40:	009b      	lsls	r3, r3, #2
70007e42:	4618      	mov	r0, r3
70007e44:	f7fe f940 	bl	700060c8 <pvPortMalloc>
70007e48:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
70007e4a:	697b      	ldr	r3, [r7, #20]
70007e4c:	2b00      	cmp	r3, #0
70007e4e:	d013      	beq.n	70007e78 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
70007e50:	20a8      	movs	r0, #168	@ 0xa8
70007e52:	f7fe f939 	bl	700060c8 <pvPortMalloc>
70007e56:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
70007e58:	69fb      	ldr	r3, [r7, #28]
70007e5a:	2b00      	cmp	r3, #0
70007e5c:	d008      	beq.n	70007e70 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
70007e5e:	22a8      	movs	r2, #168	@ 0xa8
70007e60:	2100      	movs	r1, #0
70007e62:	69f8      	ldr	r0, [r7, #28]
70007e64:	f00b ffc1 	bl	70013dea <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
70007e68:	69fb      	ldr	r3, [r7, #28]
70007e6a:	697a      	ldr	r2, [r7, #20]
70007e6c:	631a      	str	r2, [r3, #48]	@ 0x30
70007e6e:	e005      	b.n	70007e7c <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
70007e70:	6978      	ldr	r0, [r7, #20]
70007e72:	f7fe f9e5 	bl	70006240 <vPortFree>
70007e76:	e001      	b.n	70007e7c <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
70007e78:	2300      	movs	r3, #0
70007e7a:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
70007e7c:	69fb      	ldr	r3, [r7, #28]
70007e7e:	2b00      	cmp	r3, #0
70007e80:	d017      	beq.n	70007eb2 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
70007e82:	69fb      	ldr	r3, [r7, #28]
70007e84:	2200      	movs	r2, #0
70007e86:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
70007e8a:	88fa      	ldrh	r2, [r7, #6]
70007e8c:	2300      	movs	r3, #0
70007e8e:	9303      	str	r3, [sp, #12]
70007e90:	69fb      	ldr	r3, [r7, #28]
70007e92:	9302      	str	r3, [sp, #8]
70007e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70007e96:	9301      	str	r3, [sp, #4]
70007e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70007e9a:	9300      	str	r3, [sp, #0]
70007e9c:	683b      	ldr	r3, [r7, #0]
70007e9e:	68b9      	ldr	r1, [r7, #8]
70007ea0:	68f8      	ldr	r0, [r7, #12]
70007ea2:	f000 f80f 	bl	70007ec4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
70007ea6:	69f8      	ldr	r0, [r7, #28]
70007ea8:	f000 f8b2 	bl	70008010 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
70007eac:	2301      	movs	r3, #1
70007eae:	61bb      	str	r3, [r7, #24]
70007eb0:	e002      	b.n	70007eb8 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
70007eb2:	f04f 33ff 	mov.w	r3, #4294967295
70007eb6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
70007eb8:	69bb      	ldr	r3, [r7, #24]
    }
70007eba:	4618      	mov	r0, r3
70007ebc:	3720      	adds	r7, #32
70007ebe:	46bd      	mov	sp, r7
70007ec0:	bd80      	pop	{r7, pc}
	...

70007ec4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
70007ec4:	b580      	push	{r7, lr}
70007ec6:	b088      	sub	sp, #32
70007ec8:	af00      	add	r7, sp, #0
70007eca:	60f8      	str	r0, [r7, #12]
70007ecc:	60b9      	str	r1, [r7, #8]
70007ece:	607a      	str	r2, [r7, #4]
70007ed0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
70007ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007ed4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
70007ed6:	687b      	ldr	r3, [r7, #4]
70007ed8:	009b      	lsls	r3, r3, #2
70007eda:	461a      	mov	r2, r3
70007edc:	21a5      	movs	r1, #165	@ 0xa5
70007ede:	f00b ff84 	bl	70013dea <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
70007ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007ee4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
70007ee6:	6879      	ldr	r1, [r7, #4]
70007ee8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
70007eec:	440b      	add	r3, r1
70007eee:	009b      	lsls	r3, r3, #2
70007ef0:	4413      	add	r3, r2
70007ef2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
70007ef4:	69bb      	ldr	r3, [r7, #24]
70007ef6:	f023 0307 	bic.w	r3, r3, #7
70007efa:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
70007efc:	69bb      	ldr	r3, [r7, #24]
70007efe:	f003 0307 	and.w	r3, r3, #7
70007f02:	2b00      	cmp	r3, #0
70007f04:	d00b      	beq.n	70007f1e <prvInitialiseNewTask+0x5a>
        __asm volatile
70007f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007f0a:	f383 8811 	msr	BASEPRI, r3
70007f0e:	f3bf 8f6f 	isb	sy
70007f12:	f3bf 8f4f 	dsb	sy
70007f16:	617b      	str	r3, [r7, #20]
    }
70007f18:	bf00      	nop
70007f1a:	bf00      	nop
70007f1c:	e7fd      	b.n	70007f1a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
70007f1e:	68bb      	ldr	r3, [r7, #8]
70007f20:	2b00      	cmp	r3, #0
70007f22:	d01e      	beq.n	70007f62 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
70007f24:	2300      	movs	r3, #0
70007f26:	61fb      	str	r3, [r7, #28]
70007f28:	e012      	b.n	70007f50 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
70007f2a:	68ba      	ldr	r2, [r7, #8]
70007f2c:	69fb      	ldr	r3, [r7, #28]
70007f2e:	4413      	add	r3, r2
70007f30:	7819      	ldrb	r1, [r3, #0]
70007f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
70007f34:	69fb      	ldr	r3, [r7, #28]
70007f36:	4413      	add	r3, r2
70007f38:	3334      	adds	r3, #52	@ 0x34
70007f3a:	460a      	mov	r2, r1
70007f3c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
70007f3e:	68ba      	ldr	r2, [r7, #8]
70007f40:	69fb      	ldr	r3, [r7, #28]
70007f42:	4413      	add	r3, r2
70007f44:	781b      	ldrb	r3, [r3, #0]
70007f46:	2b00      	cmp	r3, #0
70007f48:	d006      	beq.n	70007f58 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
70007f4a:	69fb      	ldr	r3, [r7, #28]
70007f4c:	3301      	adds	r3, #1
70007f4e:	61fb      	str	r3, [r7, #28]
70007f50:	69fb      	ldr	r3, [r7, #28]
70007f52:	2b0f      	cmp	r3, #15
70007f54:	d9e9      	bls.n	70007f2a <prvInitialiseNewTask+0x66>
70007f56:	e000      	b.n	70007f5a <prvInitialiseNewTask+0x96>
            {
                break;
70007f58:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
70007f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007f5c:	2200      	movs	r2, #0
70007f5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
70007f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70007f64:	2b37      	cmp	r3, #55	@ 0x37
70007f66:	d90b      	bls.n	70007f80 <prvInitialiseNewTask+0xbc>
        __asm volatile
70007f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
70007f6c:	f383 8811 	msr	BASEPRI, r3
70007f70:	f3bf 8f6f 	isb	sy
70007f74:	f3bf 8f4f 	dsb	sy
70007f78:	613b      	str	r3, [r7, #16]
    }
70007f7a:	bf00      	nop
70007f7c:	bf00      	nop
70007f7e:	e7fd      	b.n	70007f7c <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
70007f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70007f82:	2b37      	cmp	r3, #55	@ 0x37
70007f84:	d901      	bls.n	70007f8a <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
70007f86:	2337      	movs	r3, #55	@ 0x37
70007f88:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
70007f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007f8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
70007f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
70007f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007f92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
70007f94:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
70007f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007f98:	3304      	adds	r3, #4
70007f9a:	4618      	mov	r0, r3
70007f9c:	f7fe fa84 	bl	700064a8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
70007fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007fa2:	3318      	adds	r3, #24
70007fa4:	4618      	mov	r0, r3
70007fa6:	f7fe fa7f 	bl	700064a8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
70007faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
70007fae:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
70007fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70007fb2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
70007fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007fb8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
70007fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
70007fbe:	625a      	str	r2, [r3, #36]	@ 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
70007fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007fc2:	3354      	adds	r3, #84	@ 0x54
70007fc4:	224c      	movs	r2, #76	@ 0x4c
70007fc6:	2100      	movs	r1, #0
70007fc8:	4618      	mov	r0, r3
70007fca:	f00b ff0e 	bl	70013dea <memset>
70007fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007fd0:	4a0c      	ldr	r2, [pc, #48]	@ (70008004 <prvInitialiseNewTask+0x140>)
70007fd2:	659a      	str	r2, [r3, #88]	@ 0x58
70007fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007fd6:	4a0c      	ldr	r2, [pc, #48]	@ (70008008 <prvInitialiseNewTask+0x144>)
70007fd8:	65da      	str	r2, [r3, #92]	@ 0x5c
70007fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007fdc:	4a0b      	ldr	r2, [pc, #44]	@ (7000800c <prvInitialiseNewTask+0x148>)
70007fde:	661a      	str	r2, [r3, #96]	@ 0x60
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
70007fe0:	683a      	ldr	r2, [r7, #0]
70007fe2:	68f9      	ldr	r1, [r7, #12]
70007fe4:	69b8      	ldr	r0, [r7, #24]
70007fe6:	f7fe faf3 	bl	700065d0 <pxPortInitialiseStack>
70007fea:	4602      	mov	r2, r0
70007fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
70007fee:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
70007ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70007ff2:	2b00      	cmp	r3, #0
70007ff4:	d002      	beq.n	70007ffc <prvInitialiseNewTask+0x138>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
70007ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70007ff8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
70007ffa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
70007ffc:	bf00      	nop
70007ffe:	3720      	adds	r7, #32
70008000:	46bd      	mov	sp, r7
70008002:	bd80      	pop	{r7, pc}
70008004:	240084e8 	.word	0x240084e8
70008008:	24008550 	.word	0x24008550
7000800c:	240085b8 	.word	0x240085b8

70008010 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
70008010:	b580      	push	{r7, lr}
70008012:	b084      	sub	sp, #16
70008014:	af00      	add	r7, sp, #0
70008016:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
70008018:	f7fe fc10 	bl	7000683c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
7000801c:	4b41      	ldr	r3, [pc, #260]	@ (70008124 <prvAddNewTaskToReadyList+0x114>)
7000801e:	681b      	ldr	r3, [r3, #0]
70008020:	3301      	adds	r3, #1
70008022:	4a40      	ldr	r2, [pc, #256]	@ (70008124 <prvAddNewTaskToReadyList+0x114>)
70008024:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
70008026:	4b40      	ldr	r3, [pc, #256]	@ (70008128 <prvAddNewTaskToReadyList+0x118>)
70008028:	681b      	ldr	r3, [r3, #0]
7000802a:	2b00      	cmp	r3, #0
7000802c:	d109      	bne.n	70008042 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
7000802e:	4a3e      	ldr	r2, [pc, #248]	@ (70008128 <prvAddNewTaskToReadyList+0x118>)
70008030:	687b      	ldr	r3, [r7, #4]
70008032:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
70008034:	4b3b      	ldr	r3, [pc, #236]	@ (70008124 <prvAddNewTaskToReadyList+0x114>)
70008036:	681b      	ldr	r3, [r3, #0]
70008038:	2b01      	cmp	r3, #1
7000803a:	d110      	bne.n	7000805e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
7000803c:	f000 feba 	bl	70008db4 <prvInitialiseTaskLists>
70008040:	e00d      	b.n	7000805e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
70008042:	4b3a      	ldr	r3, [pc, #232]	@ (7000812c <prvAddNewTaskToReadyList+0x11c>)
70008044:	681b      	ldr	r3, [r3, #0]
70008046:	2b00      	cmp	r3, #0
70008048:	d109      	bne.n	7000805e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
7000804a:	4b37      	ldr	r3, [pc, #220]	@ (70008128 <prvAddNewTaskToReadyList+0x118>)
7000804c:	681b      	ldr	r3, [r3, #0]
7000804e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008050:	687b      	ldr	r3, [r7, #4]
70008052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70008054:	429a      	cmp	r2, r3
70008056:	d802      	bhi.n	7000805e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
70008058:	4a33      	ldr	r2, [pc, #204]	@ (70008128 <prvAddNewTaskToReadyList+0x118>)
7000805a:	687b      	ldr	r3, [r7, #4]
7000805c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
7000805e:	4b34      	ldr	r3, [pc, #208]	@ (70008130 <prvAddNewTaskToReadyList+0x120>)
70008060:	681b      	ldr	r3, [r3, #0]
70008062:	3301      	adds	r3, #1
70008064:	4a32      	ldr	r2, [pc, #200]	@ (70008130 <prvAddNewTaskToReadyList+0x120>)
70008066:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
70008068:	4b31      	ldr	r3, [pc, #196]	@ (70008130 <prvAddNewTaskToReadyList+0x120>)
7000806a:	681a      	ldr	r2, [r3, #0]
7000806c:	687b      	ldr	r3, [r7, #4]
7000806e:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
70008070:	687b      	ldr	r3, [r7, #4]
70008072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008074:	4b2f      	ldr	r3, [pc, #188]	@ (70008134 <prvAddNewTaskToReadyList+0x124>)
70008076:	681b      	ldr	r3, [r3, #0]
70008078:	429a      	cmp	r2, r3
7000807a:	d903      	bls.n	70008084 <prvAddNewTaskToReadyList+0x74>
7000807c:	687b      	ldr	r3, [r7, #4]
7000807e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70008080:	4a2c      	ldr	r2, [pc, #176]	@ (70008134 <prvAddNewTaskToReadyList+0x124>)
70008082:	6013      	str	r3, [r2, #0]
70008084:	687b      	ldr	r3, [r7, #4]
70008086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008088:	492b      	ldr	r1, [pc, #172]	@ (70008138 <prvAddNewTaskToReadyList+0x128>)
7000808a:	4613      	mov	r3, r2
7000808c:	009b      	lsls	r3, r3, #2
7000808e:	4413      	add	r3, r2
70008090:	009b      	lsls	r3, r3, #2
70008092:	440b      	add	r3, r1
70008094:	3304      	adds	r3, #4
70008096:	681b      	ldr	r3, [r3, #0]
70008098:	60fb      	str	r3, [r7, #12]
7000809a:	687b      	ldr	r3, [r7, #4]
7000809c:	68fa      	ldr	r2, [r7, #12]
7000809e:	609a      	str	r2, [r3, #8]
700080a0:	68fb      	ldr	r3, [r7, #12]
700080a2:	689a      	ldr	r2, [r3, #8]
700080a4:	687b      	ldr	r3, [r7, #4]
700080a6:	60da      	str	r2, [r3, #12]
700080a8:	68fb      	ldr	r3, [r7, #12]
700080aa:	689b      	ldr	r3, [r3, #8]
700080ac:	687a      	ldr	r2, [r7, #4]
700080ae:	3204      	adds	r2, #4
700080b0:	605a      	str	r2, [r3, #4]
700080b2:	687b      	ldr	r3, [r7, #4]
700080b4:	1d1a      	adds	r2, r3, #4
700080b6:	68fb      	ldr	r3, [r7, #12]
700080b8:	609a      	str	r2, [r3, #8]
700080ba:	687b      	ldr	r3, [r7, #4]
700080bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700080be:	4613      	mov	r3, r2
700080c0:	009b      	lsls	r3, r3, #2
700080c2:	4413      	add	r3, r2
700080c4:	009b      	lsls	r3, r3, #2
700080c6:	4a1c      	ldr	r2, [pc, #112]	@ (70008138 <prvAddNewTaskToReadyList+0x128>)
700080c8:	441a      	add	r2, r3
700080ca:	687b      	ldr	r3, [r7, #4]
700080cc:	615a      	str	r2, [r3, #20]
700080ce:	687b      	ldr	r3, [r7, #4]
700080d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700080d2:	4919      	ldr	r1, [pc, #100]	@ (70008138 <prvAddNewTaskToReadyList+0x128>)
700080d4:	4613      	mov	r3, r2
700080d6:	009b      	lsls	r3, r3, #2
700080d8:	4413      	add	r3, r2
700080da:	009b      	lsls	r3, r3, #2
700080dc:	440b      	add	r3, r1
700080de:	681b      	ldr	r3, [r3, #0]
700080e0:	1c59      	adds	r1, r3, #1
700080e2:	4815      	ldr	r0, [pc, #84]	@ (70008138 <prvAddNewTaskToReadyList+0x128>)
700080e4:	4613      	mov	r3, r2
700080e6:	009b      	lsls	r3, r3, #2
700080e8:	4413      	add	r3, r2
700080ea:	009b      	lsls	r3, r3, #2
700080ec:	4403      	add	r3, r0
700080ee:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
700080f0:	f7fe fbd6 	bl	700068a0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
700080f4:	4b0d      	ldr	r3, [pc, #52]	@ (7000812c <prvAddNewTaskToReadyList+0x11c>)
700080f6:	681b      	ldr	r3, [r3, #0]
700080f8:	2b00      	cmp	r3, #0
700080fa:	d00e      	beq.n	7000811a <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
700080fc:	4b0a      	ldr	r3, [pc, #40]	@ (70008128 <prvAddNewTaskToReadyList+0x118>)
700080fe:	681b      	ldr	r3, [r3, #0]
70008100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008102:	687b      	ldr	r3, [r7, #4]
70008104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70008106:	429a      	cmp	r2, r3
70008108:	d207      	bcs.n	7000811a <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
7000810a:	4b0c      	ldr	r3, [pc, #48]	@ (7000813c <prvAddNewTaskToReadyList+0x12c>)
7000810c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70008110:	601a      	str	r2, [r3, #0]
70008112:	f3bf 8f4f 	dsb	sy
70008116:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
7000811a:	bf00      	nop
7000811c:	3710      	adds	r7, #16
7000811e:	46bd      	mov	sp, r7
70008120:	bd80      	pop	{r7, pc}
70008122:	bf00      	nop
70008124:	2400511c 	.word	0x2400511c
70008128:	24004c48 	.word	0x24004c48
7000812c:	24005128 	.word	0x24005128
70008130:	24005138 	.word	0x24005138
70008134:	24005124 	.word	0x24005124
70008138:	24004c4c 	.word	0x24004c4c
7000813c:	e000ed04 	.word	0xe000ed04

70008140 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
70008140:	b580      	push	{r7, lr}
70008142:	b084      	sub	sp, #16
70008144:	af00      	add	r7, sp, #0
70008146:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
70008148:	f7fe fb78 	bl	7000683c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
7000814c:	687b      	ldr	r3, [r7, #4]
7000814e:	2b00      	cmp	r3, #0
70008150:	d102      	bne.n	70008158 <vTaskDelete+0x18>
70008152:	4b2f      	ldr	r3, [pc, #188]	@ (70008210 <vTaskDelete+0xd0>)
70008154:	681b      	ldr	r3, [r3, #0]
70008156:	e000      	b.n	7000815a <vTaskDelete+0x1a>
70008158:	687b      	ldr	r3, [r7, #4]
7000815a:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
7000815c:	68fb      	ldr	r3, [r7, #12]
7000815e:	3304      	adds	r3, #4
70008160:	4618      	mov	r0, r3
70008162:	f7fe fa0b 	bl	7000657c <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
70008166:	68fb      	ldr	r3, [r7, #12]
70008168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
7000816a:	2b00      	cmp	r3, #0
7000816c:	d004      	beq.n	70008178 <vTaskDelete+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
7000816e:	68fb      	ldr	r3, [r7, #12]
70008170:	3318      	adds	r3, #24
70008172:	4618      	mov	r0, r3
70008174:	f7fe fa02 	bl	7000657c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
70008178:	4b26      	ldr	r3, [pc, #152]	@ (70008214 <vTaskDelete+0xd4>)
7000817a:	681b      	ldr	r3, [r3, #0]
7000817c:	3301      	adds	r3, #1
7000817e:	4a25      	ldr	r2, [pc, #148]	@ (70008214 <vTaskDelete+0xd4>)
70008180:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
70008182:	4b23      	ldr	r3, [pc, #140]	@ (70008210 <vTaskDelete+0xd0>)
70008184:	681b      	ldr	r3, [r3, #0]
70008186:	68fa      	ldr	r2, [r7, #12]
70008188:	429a      	cmp	r2, r3
7000818a:	d10b      	bne.n	700081a4 <vTaskDelete+0x64>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
7000818c:	68fb      	ldr	r3, [r7, #12]
7000818e:	3304      	adds	r3, #4
70008190:	4619      	mov	r1, r3
70008192:	4821      	ldr	r0, [pc, #132]	@ (70008218 <vTaskDelete+0xd8>)
70008194:	f7fe f995 	bl	700064c2 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
70008198:	4b20      	ldr	r3, [pc, #128]	@ (7000821c <vTaskDelete+0xdc>)
7000819a:	681b      	ldr	r3, [r3, #0]
7000819c:	3301      	adds	r3, #1
7000819e:	4a1f      	ldr	r2, [pc, #124]	@ (7000821c <vTaskDelete+0xdc>)
700081a0:	6013      	str	r3, [r2, #0]
700081a2:	e006      	b.n	700081b2 <vTaskDelete+0x72>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
700081a4:	4b1e      	ldr	r3, [pc, #120]	@ (70008220 <vTaskDelete+0xe0>)
700081a6:	681b      	ldr	r3, [r3, #0]
700081a8:	3b01      	subs	r3, #1
700081aa:	4a1d      	ldr	r2, [pc, #116]	@ (70008220 <vTaskDelete+0xe0>)
700081ac:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
700081ae:	f000 fea7 	bl	70008f00 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
700081b2:	f7fe fb75 	bl	700068a0 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
700081b6:	4b16      	ldr	r3, [pc, #88]	@ (70008210 <vTaskDelete+0xd0>)
700081b8:	681b      	ldr	r3, [r3, #0]
700081ba:	68fa      	ldr	r2, [r7, #12]
700081bc:	429a      	cmp	r2, r3
700081be:	d002      	beq.n	700081c6 <vTaskDelete+0x86>
        {
            prvDeleteTCB( pxTCB );
700081c0:	68f8      	ldr	r0, [r7, #12]
700081c2:	f000 fe65 	bl	70008e90 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
700081c6:	4b17      	ldr	r3, [pc, #92]	@ (70008224 <vTaskDelete+0xe4>)
700081c8:	681b      	ldr	r3, [r3, #0]
700081ca:	2b00      	cmp	r3, #0
700081cc:	d01c      	beq.n	70008208 <vTaskDelete+0xc8>
        {
            if( pxTCB == pxCurrentTCB )
700081ce:	4b10      	ldr	r3, [pc, #64]	@ (70008210 <vTaskDelete+0xd0>)
700081d0:	681b      	ldr	r3, [r3, #0]
700081d2:	68fa      	ldr	r2, [r7, #12]
700081d4:	429a      	cmp	r2, r3
700081d6:	d117      	bne.n	70008208 <vTaskDelete+0xc8>
            {
                configASSERT( uxSchedulerSuspended == 0 );
700081d8:	4b13      	ldr	r3, [pc, #76]	@ (70008228 <vTaskDelete+0xe8>)
700081da:	681b      	ldr	r3, [r3, #0]
700081dc:	2b00      	cmp	r3, #0
700081de:	d00b      	beq.n	700081f8 <vTaskDelete+0xb8>
        __asm volatile
700081e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
700081e4:	f383 8811 	msr	BASEPRI, r3
700081e8:	f3bf 8f6f 	isb	sy
700081ec:	f3bf 8f4f 	dsb	sy
700081f0:	60bb      	str	r3, [r7, #8]
    }
700081f2:	bf00      	nop
700081f4:	bf00      	nop
700081f6:	e7fd      	b.n	700081f4 <vTaskDelete+0xb4>
                portYIELD_WITHIN_API();
700081f8:	4b0c      	ldr	r3, [pc, #48]	@ (7000822c <vTaskDelete+0xec>)
700081fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
700081fe:	601a      	str	r2, [r3, #0]
70008200:	f3bf 8f4f 	dsb	sy
70008204:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
70008208:	bf00      	nop
7000820a:	3710      	adds	r7, #16
7000820c:	46bd      	mov	sp, r7
7000820e:	bd80      	pop	{r7, pc}
70008210:	24004c48 	.word	0x24004c48
70008214:	24005138 	.word	0x24005138
70008218:	240050f0 	.word	0x240050f0
7000821c:	24005104 	.word	0x24005104
70008220:	2400511c 	.word	0x2400511c
70008224:	24005128 	.word	0x24005128
70008228:	24005144 	.word	0x24005144
7000822c:	e000ed04 	.word	0xe000ed04

70008230 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
70008230:	b580      	push	{r7, lr}
70008232:	b084      	sub	sp, #16
70008234:	af00      	add	r7, sp, #0
70008236:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
70008238:	2300      	movs	r3, #0
7000823a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
7000823c:	687b      	ldr	r3, [r7, #4]
7000823e:	2b00      	cmp	r3, #0
70008240:	d018      	beq.n	70008274 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
70008242:	4b14      	ldr	r3, [pc, #80]	@ (70008294 <vTaskDelay+0x64>)
70008244:	681b      	ldr	r3, [r3, #0]
70008246:	2b00      	cmp	r3, #0
70008248:	d00b      	beq.n	70008262 <vTaskDelay+0x32>
        __asm volatile
7000824a:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000824e:	f383 8811 	msr	BASEPRI, r3
70008252:	f3bf 8f6f 	isb	sy
70008256:	f3bf 8f4f 	dsb	sy
7000825a:	60bb      	str	r3, [r7, #8]
    }
7000825c:	bf00      	nop
7000825e:	bf00      	nop
70008260:	e7fd      	b.n	7000825e <vTaskDelay+0x2e>
            vTaskSuspendAll();
70008262:	f000 f909 	bl	70008478 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
70008266:	2100      	movs	r1, #0
70008268:	6878      	ldr	r0, [r7, #4]
7000826a:	f001 f87b 	bl	70009364 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
7000826e:	f000 f911 	bl	70008494 <xTaskResumeAll>
70008272:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
70008274:	68fb      	ldr	r3, [r7, #12]
70008276:	2b00      	cmp	r3, #0
70008278:	d107      	bne.n	7000828a <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
7000827a:	4b07      	ldr	r3, [pc, #28]	@ (70008298 <vTaskDelay+0x68>)
7000827c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70008280:	601a      	str	r2, [r3, #0]
70008282:	f3bf 8f4f 	dsb	sy
70008286:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
7000828a:	bf00      	nop
7000828c:	3710      	adds	r7, #16
7000828e:	46bd      	mov	sp, r7
70008290:	bd80      	pop	{r7, pc}
70008292:	bf00      	nop
70008294:	24005144 	.word	0x24005144
70008298:	e000ed04 	.word	0xe000ed04

7000829c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
7000829c:	b580      	push	{r7, lr}
7000829e:	b08a      	sub	sp, #40	@ 0x28
700082a0:	af00      	add	r7, sp, #0
700082a2:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList;
        List_t const * pxDelayedList;
        List_t const * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
700082a4:	687b      	ldr	r3, [r7, #4]
700082a6:	61fb      	str	r3, [r7, #28]

        configASSERT( pxTCB );
700082a8:	69fb      	ldr	r3, [r7, #28]
700082aa:	2b00      	cmp	r3, #0
700082ac:	d10b      	bne.n	700082c6 <eTaskGetState+0x2a>
        __asm volatile
700082ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
700082b2:	f383 8811 	msr	BASEPRI, r3
700082b6:	f3bf 8f6f 	isb	sy
700082ba:	f3bf 8f4f 	dsb	sy
700082be:	60fb      	str	r3, [r7, #12]
    }
700082c0:	bf00      	nop
700082c2:	bf00      	nop
700082c4:	e7fd      	b.n	700082c2 <eTaskGetState+0x26>

        if( pxTCB == pxCurrentTCB )
700082c6:	4b2d      	ldr	r3, [pc, #180]	@ (7000837c <eTaskGetState+0xe0>)
700082c8:	681b      	ldr	r3, [r3, #0]
700082ca:	69fa      	ldr	r2, [r7, #28]
700082cc:	429a      	cmp	r2, r3
700082ce:	d103      	bne.n	700082d8 <eTaskGetState+0x3c>
        {
            /* The task calling this function is querying its own state. */
            eReturn = eRunning;
700082d0:	2300      	movs	r3, #0
700082d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
700082d6:	e04b      	b.n	70008370 <eTaskGetState+0xd4>
        }
        else
        {
            taskENTER_CRITICAL();
700082d8:	f7fe fab0 	bl	7000683c <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
700082dc:	69fb      	ldr	r3, [r7, #28]
700082de:	695b      	ldr	r3, [r3, #20]
700082e0:	61bb      	str	r3, [r7, #24]
                pxDelayedList = pxDelayedTaskList;
700082e2:	4b27      	ldr	r3, [pc, #156]	@ (70008380 <eTaskGetState+0xe4>)
700082e4:	681b      	ldr	r3, [r3, #0]
700082e6:	617b      	str	r3, [r7, #20]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
700082e8:	4b26      	ldr	r3, [pc, #152]	@ (70008384 <eTaskGetState+0xe8>)
700082ea:	681b      	ldr	r3, [r3, #0]
700082ec:	613b      	str	r3, [r7, #16]
            }
            taskEXIT_CRITICAL();
700082ee:	f7fe fad7 	bl	700068a0 <vPortExitCritical>

            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
700082f2:	69ba      	ldr	r2, [r7, #24]
700082f4:	697b      	ldr	r3, [r7, #20]
700082f6:	429a      	cmp	r2, r3
700082f8:	d003      	beq.n	70008302 <eTaskGetState+0x66>
700082fa:	69ba      	ldr	r2, [r7, #24]
700082fc:	693b      	ldr	r3, [r7, #16]
700082fe:	429a      	cmp	r2, r3
70008300:	d103      	bne.n	7000830a <eTaskGetState+0x6e>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
70008302:	2302      	movs	r3, #2
70008304:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
70008308:	e032      	b.n	70008370 <eTaskGetState+0xd4>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
7000830a:	69bb      	ldr	r3, [r7, #24]
7000830c:	4a1e      	ldr	r2, [pc, #120]	@ (70008388 <eTaskGetState+0xec>)
7000830e:	4293      	cmp	r3, r2
70008310:	d120      	bne.n	70008354 <eTaskGetState+0xb8>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
70008312:	69fb      	ldr	r3, [r7, #28]
70008314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70008316:	2b00      	cmp	r3, #0
70008318:	d118      	bne.n	7000834c <eTaskGetState+0xb0>
                            /* The task does not appear on the event list item of
                             * and of the RTOS objects, but could still be in the
                             * blocked state if it is waiting on its notification
                             * rather than waiting on an object.  If not, is
                             * suspended. */
                            eReturn = eSuspended;
7000831a:	2303      	movs	r3, #3
7000831c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                            for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
70008320:	2300      	movs	r3, #0
70008322:	623b      	str	r3, [r7, #32]
70008324:	e00e      	b.n	70008344 <eTaskGetState+0xa8>
                            {
                                if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
70008326:	69fa      	ldr	r2, [r7, #28]
70008328:	6a3b      	ldr	r3, [r7, #32]
7000832a:	4413      	add	r3, r2
7000832c:	33a4      	adds	r3, #164	@ 0xa4
7000832e:	781b      	ldrb	r3, [r3, #0]
70008330:	b2db      	uxtb	r3, r3
70008332:	2b01      	cmp	r3, #1
70008334:	d103      	bne.n	7000833e <eTaskGetState+0xa2>
                                {
                                    eReturn = eBlocked;
70008336:	2302      	movs	r3, #2
70008338:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                    break;
7000833c:	e018      	b.n	70008370 <eTaskGetState+0xd4>
                            for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
7000833e:	6a3b      	ldr	r3, [r7, #32]
70008340:	3301      	adds	r3, #1
70008342:	623b      	str	r3, [r7, #32]
70008344:	6a3b      	ldr	r3, [r7, #32]
70008346:	2b00      	cmp	r3, #0
70008348:	dded      	ble.n	70008326 <eTaskGetState+0x8a>
7000834a:	e011      	b.n	70008370 <eTaskGetState+0xd4>
                        }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
7000834c:	2302      	movs	r3, #2
7000834e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
70008352:	e00d      	b.n	70008370 <eTaskGetState+0xd4>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
70008354:	69bb      	ldr	r3, [r7, #24]
70008356:	4a0d      	ldr	r2, [pc, #52]	@ (7000838c <eTaskGetState+0xf0>)
70008358:	4293      	cmp	r3, r2
7000835a:	d002      	beq.n	70008362 <eTaskGetState+0xc6>
7000835c:	69bb      	ldr	r3, [r7, #24]
7000835e:	2b00      	cmp	r3, #0
70008360:	d103      	bne.n	7000836a <eTaskGetState+0xce>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
70008362:	2304      	movs	r3, #4
70008364:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
70008368:	e002      	b.n	70008370 <eTaskGetState+0xd4>

            else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
            {
                /* If the task is not in any other state, it must be in the
                 * Ready (including pending ready) state. */
                eReturn = eReady;
7000836a:	2301      	movs	r3, #1
7000836c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }

        return eReturn;
70008370:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
70008374:	4618      	mov	r0, r3
70008376:	3728      	adds	r7, #40	@ 0x28
70008378:	46bd      	mov	sp, r7
7000837a:	bd80      	pop	{r7, pc}
7000837c:	24004c48 	.word	0x24004c48
70008380:	240050d4 	.word	0x240050d4
70008384:	240050d8 	.word	0x240050d8
70008388:	24005108 	.word	0x24005108
7000838c:	240050f0 	.word	0x240050f0

70008390 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
70008390:	b580      	push	{r7, lr}
70008392:	b08a      	sub	sp, #40	@ 0x28
70008394:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
70008396:	2300      	movs	r3, #0
70008398:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
7000839a:	2300      	movs	r3, #0
7000839c:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
7000839e:	463a      	mov	r2, r7
700083a0:	1d39      	adds	r1, r7, #4
700083a2:	f107 0308 	add.w	r3, r7, #8
700083a6:	4618      	mov	r0, r3
700083a8:	f7fd fe5a 	bl	70006060 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
700083ac:	6839      	ldr	r1, [r7, #0]
700083ae:	687b      	ldr	r3, [r7, #4]
700083b0:	68ba      	ldr	r2, [r7, #8]
700083b2:	9202      	str	r2, [sp, #8]
700083b4:	9301      	str	r3, [sp, #4]
700083b6:	2300      	movs	r3, #0
700083b8:	9300      	str	r3, [sp, #0]
700083ba:	2300      	movs	r3, #0
700083bc:	460a      	mov	r2, r1
700083be:	4925      	ldr	r1, [pc, #148]	@ (70008454 <vTaskStartScheduler+0xc4>)
700083c0:	4825      	ldr	r0, [pc, #148]	@ (70008458 <vTaskStartScheduler+0xc8>)
700083c2:	f7ff fccf 	bl	70007d64 <xTaskCreateStatic>
700083c6:	4603      	mov	r3, r0
700083c8:	4a24      	ldr	r2, [pc, #144]	@ (7000845c <vTaskStartScheduler+0xcc>)
700083ca:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
700083cc:	4b23      	ldr	r3, [pc, #140]	@ (7000845c <vTaskStartScheduler+0xcc>)
700083ce:	681b      	ldr	r3, [r3, #0]
700083d0:	2b00      	cmp	r3, #0
700083d2:	d002      	beq.n	700083da <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
700083d4:	2301      	movs	r3, #1
700083d6:	617b      	str	r3, [r7, #20]
700083d8:	e001      	b.n	700083de <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
700083da:	2300      	movs	r3, #0
700083dc:	617b      	str	r3, [r7, #20]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
700083de:	697b      	ldr	r3, [r7, #20]
700083e0:	2b01      	cmp	r3, #1
700083e2:	d102      	bne.n	700083ea <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
700083e4:	f001 f82c 	bl	70009440 <xTimerCreateTimerTask>
700083e8:	6178      	str	r0, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
700083ea:	697b      	ldr	r3, [r7, #20]
700083ec:	2b01      	cmp	r3, #1
700083ee:	d11b      	bne.n	70008428 <vTaskStartScheduler+0x98>
        __asm volatile
700083f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
700083f4:	f383 8811 	msr	BASEPRI, r3
700083f8:	f3bf 8f6f 	isb	sy
700083fc:	f3bf 8f4f 	dsb	sy
70008400:	613b      	str	r3, [r7, #16]
    }
70008402:	bf00      	nop

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
70008404:	4b16      	ldr	r3, [pc, #88]	@ (70008460 <vTaskStartScheduler+0xd0>)
70008406:	681b      	ldr	r3, [r3, #0]
70008408:	3354      	adds	r3, #84	@ 0x54
7000840a:	4a16      	ldr	r2, [pc, #88]	@ (70008464 <vTaskStartScheduler+0xd4>)
7000840c:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
7000840e:	4b16      	ldr	r3, [pc, #88]	@ (70008468 <vTaskStartScheduler+0xd8>)
70008410:	f04f 32ff 	mov.w	r2, #4294967295
70008414:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
70008416:	4b15      	ldr	r3, [pc, #84]	@ (7000846c <vTaskStartScheduler+0xdc>)
70008418:	2201      	movs	r2, #1
7000841a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
7000841c:	4b14      	ldr	r3, [pc, #80]	@ (70008470 <vTaskStartScheduler+0xe0>)
7000841e:	2200      	movs	r2, #0
70008420:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
70008422:	f7fe f967 	bl	700066f4 <xPortStartScheduler>
70008426:	e00f      	b.n	70008448 <vTaskStartScheduler+0xb8>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
70008428:	697b      	ldr	r3, [r7, #20]
7000842a:	f1b3 3fff 	cmp.w	r3, #4294967295
7000842e:	d10b      	bne.n	70008448 <vTaskStartScheduler+0xb8>
        __asm volatile
70008430:	f04f 0350 	mov.w	r3, #80	@ 0x50
70008434:	f383 8811 	msr	BASEPRI, r3
70008438:	f3bf 8f6f 	isb	sy
7000843c:	f3bf 8f4f 	dsb	sy
70008440:	60fb      	str	r3, [r7, #12]
    }
70008442:	bf00      	nop
70008444:	bf00      	nop
70008446:	e7fd      	b.n	70008444 <vTaskStartScheduler+0xb4>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
70008448:	4b0a      	ldr	r3, [pc, #40]	@ (70008474 <vTaskStartScheduler+0xe4>)
7000844a:	681b      	ldr	r3, [r3, #0]
}
7000844c:	bf00      	nop
7000844e:	3718      	adds	r7, #24
70008450:	46bd      	mov	sp, r7
70008452:	bd80      	pop	{r7, pc}
70008454:	70014c7c 	.word	0x70014c7c
70008458:	70008d85 	.word	0x70008d85
7000845c:	24005140 	.word	0x24005140
70008460:	24004c48 	.word	0x24004c48
70008464:	24000040 	.word	0x24000040
70008468:	2400513c 	.word	0x2400513c
7000846c:	24005128 	.word	0x24005128
70008470:	24005120 	.word	0x24005120
70008474:	24000024 	.word	0x24000024

70008478 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
70008478:	b480      	push	{r7}
7000847a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
7000847c:	4b04      	ldr	r3, [pc, #16]	@ (70008490 <vTaskSuspendAll+0x18>)
7000847e:	681b      	ldr	r3, [r3, #0]
70008480:	3301      	adds	r3, #1
70008482:	4a03      	ldr	r2, [pc, #12]	@ (70008490 <vTaskSuspendAll+0x18>)
70008484:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
70008486:	bf00      	nop
70008488:	46bd      	mov	sp, r7
7000848a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000848e:	4770      	bx	lr
70008490:	24005144 	.word	0x24005144

70008494 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
70008494:	b580      	push	{r7, lr}
70008496:	b088      	sub	sp, #32
70008498:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
7000849a:	2300      	movs	r3, #0
7000849c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
7000849e:	2300      	movs	r3, #0
700084a0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
700084a2:	4b72      	ldr	r3, [pc, #456]	@ (7000866c <xTaskResumeAll+0x1d8>)
700084a4:	681b      	ldr	r3, [r3, #0]
700084a6:	2b00      	cmp	r3, #0
700084a8:	d10b      	bne.n	700084c2 <xTaskResumeAll+0x2e>
        __asm volatile
700084aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
700084ae:	f383 8811 	msr	BASEPRI, r3
700084b2:	f3bf 8f6f 	isb	sy
700084b6:	f3bf 8f4f 	dsb	sy
700084ba:	607b      	str	r3, [r7, #4]
    }
700084bc:	bf00      	nop
700084be:	bf00      	nop
700084c0:	e7fd      	b.n	700084be <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
700084c2:	f7fe f9bb 	bl	7000683c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
700084c6:	4b69      	ldr	r3, [pc, #420]	@ (7000866c <xTaskResumeAll+0x1d8>)
700084c8:	681b      	ldr	r3, [r3, #0]
700084ca:	3b01      	subs	r3, #1
700084cc:	4a67      	ldr	r2, [pc, #412]	@ (7000866c <xTaskResumeAll+0x1d8>)
700084ce:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
700084d0:	4b66      	ldr	r3, [pc, #408]	@ (7000866c <xTaskResumeAll+0x1d8>)
700084d2:	681b      	ldr	r3, [r3, #0]
700084d4:	2b00      	cmp	r3, #0
700084d6:	f040 80c1 	bne.w	7000865c <xTaskResumeAll+0x1c8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
700084da:	4b65      	ldr	r3, [pc, #404]	@ (70008670 <xTaskResumeAll+0x1dc>)
700084dc:	681b      	ldr	r3, [r3, #0]
700084de:	2b00      	cmp	r3, #0
700084e0:	f000 80bc 	beq.w	7000865c <xTaskResumeAll+0x1c8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
700084e4:	e08b      	b.n	700085fe <xTaskResumeAll+0x16a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
700084e6:	4b63      	ldr	r3, [pc, #396]	@ (70008674 <xTaskResumeAll+0x1e0>)
700084e8:	68db      	ldr	r3, [r3, #12]
700084ea:	68db      	ldr	r3, [r3, #12]
700084ec:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
700084ee:	69fb      	ldr	r3, [r7, #28]
700084f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
700084f2:	613b      	str	r3, [r7, #16]
700084f4:	69fb      	ldr	r3, [r7, #28]
700084f6:	69db      	ldr	r3, [r3, #28]
700084f8:	69fa      	ldr	r2, [r7, #28]
700084fa:	6a12      	ldr	r2, [r2, #32]
700084fc:	609a      	str	r2, [r3, #8]
700084fe:	69fb      	ldr	r3, [r7, #28]
70008500:	6a1b      	ldr	r3, [r3, #32]
70008502:	69fa      	ldr	r2, [r7, #28]
70008504:	69d2      	ldr	r2, [r2, #28]
70008506:	605a      	str	r2, [r3, #4]
70008508:	693b      	ldr	r3, [r7, #16]
7000850a:	685a      	ldr	r2, [r3, #4]
7000850c:	69fb      	ldr	r3, [r7, #28]
7000850e:	3318      	adds	r3, #24
70008510:	429a      	cmp	r2, r3
70008512:	d103      	bne.n	7000851c <xTaskResumeAll+0x88>
70008514:	69fb      	ldr	r3, [r7, #28]
70008516:	6a1a      	ldr	r2, [r3, #32]
70008518:	693b      	ldr	r3, [r7, #16]
7000851a:	605a      	str	r2, [r3, #4]
7000851c:	69fb      	ldr	r3, [r7, #28]
7000851e:	2200      	movs	r2, #0
70008520:	629a      	str	r2, [r3, #40]	@ 0x28
70008522:	693b      	ldr	r3, [r7, #16]
70008524:	681b      	ldr	r3, [r3, #0]
70008526:	1e5a      	subs	r2, r3, #1
70008528:	693b      	ldr	r3, [r7, #16]
7000852a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
7000852c:	69fb      	ldr	r3, [r7, #28]
7000852e:	695b      	ldr	r3, [r3, #20]
70008530:	60fb      	str	r3, [r7, #12]
70008532:	69fb      	ldr	r3, [r7, #28]
70008534:	689b      	ldr	r3, [r3, #8]
70008536:	69fa      	ldr	r2, [r7, #28]
70008538:	68d2      	ldr	r2, [r2, #12]
7000853a:	609a      	str	r2, [r3, #8]
7000853c:	69fb      	ldr	r3, [r7, #28]
7000853e:	68db      	ldr	r3, [r3, #12]
70008540:	69fa      	ldr	r2, [r7, #28]
70008542:	6892      	ldr	r2, [r2, #8]
70008544:	605a      	str	r2, [r3, #4]
70008546:	68fb      	ldr	r3, [r7, #12]
70008548:	685a      	ldr	r2, [r3, #4]
7000854a:	69fb      	ldr	r3, [r7, #28]
7000854c:	3304      	adds	r3, #4
7000854e:	429a      	cmp	r2, r3
70008550:	d103      	bne.n	7000855a <xTaskResumeAll+0xc6>
70008552:	69fb      	ldr	r3, [r7, #28]
70008554:	68da      	ldr	r2, [r3, #12]
70008556:	68fb      	ldr	r3, [r7, #12]
70008558:	605a      	str	r2, [r3, #4]
7000855a:	69fb      	ldr	r3, [r7, #28]
7000855c:	2200      	movs	r2, #0
7000855e:	615a      	str	r2, [r3, #20]
70008560:	68fb      	ldr	r3, [r7, #12]
70008562:	681b      	ldr	r3, [r3, #0]
70008564:	1e5a      	subs	r2, r3, #1
70008566:	68fb      	ldr	r3, [r7, #12]
70008568:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
7000856a:	69fb      	ldr	r3, [r7, #28]
7000856c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000856e:	4b42      	ldr	r3, [pc, #264]	@ (70008678 <xTaskResumeAll+0x1e4>)
70008570:	681b      	ldr	r3, [r3, #0]
70008572:	429a      	cmp	r2, r3
70008574:	d903      	bls.n	7000857e <xTaskResumeAll+0xea>
70008576:	69fb      	ldr	r3, [r7, #28]
70008578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000857a:	4a3f      	ldr	r2, [pc, #252]	@ (70008678 <xTaskResumeAll+0x1e4>)
7000857c:	6013      	str	r3, [r2, #0]
7000857e:	69fb      	ldr	r3, [r7, #28]
70008580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008582:	493e      	ldr	r1, [pc, #248]	@ (7000867c <xTaskResumeAll+0x1e8>)
70008584:	4613      	mov	r3, r2
70008586:	009b      	lsls	r3, r3, #2
70008588:	4413      	add	r3, r2
7000858a:	009b      	lsls	r3, r3, #2
7000858c:	440b      	add	r3, r1
7000858e:	3304      	adds	r3, #4
70008590:	681b      	ldr	r3, [r3, #0]
70008592:	60bb      	str	r3, [r7, #8]
70008594:	69fb      	ldr	r3, [r7, #28]
70008596:	68ba      	ldr	r2, [r7, #8]
70008598:	609a      	str	r2, [r3, #8]
7000859a:	68bb      	ldr	r3, [r7, #8]
7000859c:	689a      	ldr	r2, [r3, #8]
7000859e:	69fb      	ldr	r3, [r7, #28]
700085a0:	60da      	str	r2, [r3, #12]
700085a2:	68bb      	ldr	r3, [r7, #8]
700085a4:	689b      	ldr	r3, [r3, #8]
700085a6:	69fa      	ldr	r2, [r7, #28]
700085a8:	3204      	adds	r2, #4
700085aa:	605a      	str	r2, [r3, #4]
700085ac:	69fb      	ldr	r3, [r7, #28]
700085ae:	1d1a      	adds	r2, r3, #4
700085b0:	68bb      	ldr	r3, [r7, #8]
700085b2:	609a      	str	r2, [r3, #8]
700085b4:	69fb      	ldr	r3, [r7, #28]
700085b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700085b8:	4613      	mov	r3, r2
700085ba:	009b      	lsls	r3, r3, #2
700085bc:	4413      	add	r3, r2
700085be:	009b      	lsls	r3, r3, #2
700085c0:	4a2e      	ldr	r2, [pc, #184]	@ (7000867c <xTaskResumeAll+0x1e8>)
700085c2:	441a      	add	r2, r3
700085c4:	69fb      	ldr	r3, [r7, #28]
700085c6:	615a      	str	r2, [r3, #20]
700085c8:	69fb      	ldr	r3, [r7, #28]
700085ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700085cc:	492b      	ldr	r1, [pc, #172]	@ (7000867c <xTaskResumeAll+0x1e8>)
700085ce:	4613      	mov	r3, r2
700085d0:	009b      	lsls	r3, r3, #2
700085d2:	4413      	add	r3, r2
700085d4:	009b      	lsls	r3, r3, #2
700085d6:	440b      	add	r3, r1
700085d8:	681b      	ldr	r3, [r3, #0]
700085da:	1c59      	adds	r1, r3, #1
700085dc:	4827      	ldr	r0, [pc, #156]	@ (7000867c <xTaskResumeAll+0x1e8>)
700085de:	4613      	mov	r3, r2
700085e0:	009b      	lsls	r3, r3, #2
700085e2:	4413      	add	r3, r2
700085e4:	009b      	lsls	r3, r3, #2
700085e6:	4403      	add	r3, r0
700085e8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
700085ea:	69fb      	ldr	r3, [r7, #28]
700085ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700085ee:	4b24      	ldr	r3, [pc, #144]	@ (70008680 <xTaskResumeAll+0x1ec>)
700085f0:	681b      	ldr	r3, [r3, #0]
700085f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700085f4:	429a      	cmp	r2, r3
700085f6:	d302      	bcc.n	700085fe <xTaskResumeAll+0x16a>
                    {
                        xYieldPending = pdTRUE;
700085f8:	4b22      	ldr	r3, [pc, #136]	@ (70008684 <xTaskResumeAll+0x1f0>)
700085fa:	2201      	movs	r2, #1
700085fc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
700085fe:	4b1d      	ldr	r3, [pc, #116]	@ (70008674 <xTaskResumeAll+0x1e0>)
70008600:	681b      	ldr	r3, [r3, #0]
70008602:	2b00      	cmp	r3, #0
70008604:	f47f af6f 	bne.w	700084e6 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
70008608:	69fb      	ldr	r3, [r7, #28]
7000860a:	2b00      	cmp	r3, #0
7000860c:	d001      	beq.n	70008612 <xTaskResumeAll+0x17e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
7000860e:	f000 fc77 	bl	70008f00 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
70008612:	4b1d      	ldr	r3, [pc, #116]	@ (70008688 <xTaskResumeAll+0x1f4>)
70008614:	681b      	ldr	r3, [r3, #0]
70008616:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
70008618:	697b      	ldr	r3, [r7, #20]
7000861a:	2b00      	cmp	r3, #0
7000861c:	d010      	beq.n	70008640 <xTaskResumeAll+0x1ac>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
7000861e:	f000 f865 	bl	700086ec <xTaskIncrementTick>
70008622:	4603      	mov	r3, r0
70008624:	2b00      	cmp	r3, #0
70008626:	d002      	beq.n	7000862e <xTaskResumeAll+0x19a>
                            {
                                xYieldPending = pdTRUE;
70008628:	4b16      	ldr	r3, [pc, #88]	@ (70008684 <xTaskResumeAll+0x1f0>)
7000862a:	2201      	movs	r2, #1
7000862c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
7000862e:	697b      	ldr	r3, [r7, #20]
70008630:	3b01      	subs	r3, #1
70008632:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
70008634:	697b      	ldr	r3, [r7, #20]
70008636:	2b00      	cmp	r3, #0
70008638:	d1f1      	bne.n	7000861e <xTaskResumeAll+0x18a>

                        xPendedTicks = 0;
7000863a:	4b13      	ldr	r3, [pc, #76]	@ (70008688 <xTaskResumeAll+0x1f4>)
7000863c:	2200      	movs	r2, #0
7000863e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
70008640:	4b10      	ldr	r3, [pc, #64]	@ (70008684 <xTaskResumeAll+0x1f0>)
70008642:	681b      	ldr	r3, [r3, #0]
70008644:	2b00      	cmp	r3, #0
70008646:	d009      	beq.n	7000865c <xTaskResumeAll+0x1c8>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
70008648:	2301      	movs	r3, #1
7000864a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
7000864c:	4b0f      	ldr	r3, [pc, #60]	@ (7000868c <xTaskResumeAll+0x1f8>)
7000864e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70008652:	601a      	str	r2, [r3, #0]
70008654:	f3bf 8f4f 	dsb	sy
70008658:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
7000865c:	f7fe f920 	bl	700068a0 <vPortExitCritical>

    return xAlreadyYielded;
70008660:	69bb      	ldr	r3, [r7, #24]
}
70008662:	4618      	mov	r0, r3
70008664:	3720      	adds	r7, #32
70008666:	46bd      	mov	sp, r7
70008668:	bd80      	pop	{r7, pc}
7000866a:	bf00      	nop
7000866c:	24005144 	.word	0x24005144
70008670:	2400511c 	.word	0x2400511c
70008674:	240050dc 	.word	0x240050dc
70008678:	24005124 	.word	0x24005124
7000867c:	24004c4c 	.word	0x24004c4c
70008680:	24004c48 	.word	0x24004c48
70008684:	24005130 	.word	0x24005130
70008688:	2400512c 	.word	0x2400512c
7000868c:	e000ed04 	.word	0xe000ed04

70008690 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
70008690:	b480      	push	{r7}
70008692:	b083      	sub	sp, #12
70008694:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
70008696:	4b05      	ldr	r3, [pc, #20]	@ (700086ac <xTaskGetTickCount+0x1c>)
70008698:	681b      	ldr	r3, [r3, #0]
7000869a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
7000869c:	687b      	ldr	r3, [r7, #4]
}
7000869e:	4618      	mov	r0, r3
700086a0:	370c      	adds	r7, #12
700086a2:	46bd      	mov	sp, r7
700086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
700086a8:	4770      	bx	lr
700086aa:	bf00      	nop
700086ac:	24005120 	.word	0x24005120

700086b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
700086b0:	b580      	push	{r7, lr}
700086b2:	b082      	sub	sp, #8
700086b4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
700086b6:	f7fe f9a9 	bl	70006a0c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
700086ba:	2300      	movs	r3, #0
700086bc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
700086be:	4b04      	ldr	r3, [pc, #16]	@ (700086d0 <xTaskGetTickCountFromISR+0x20>)
700086c0:	681b      	ldr	r3, [r3, #0]
700086c2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
700086c4:	683b      	ldr	r3, [r7, #0]
}
700086c6:	4618      	mov	r0, r3
700086c8:	3708      	adds	r7, #8
700086ca:	46bd      	mov	sp, r7
700086cc:	bd80      	pop	{r7, pc}
700086ce:	bf00      	nop
700086d0:	24005120 	.word	0x24005120

700086d4 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
700086d4:	b480      	push	{r7}
700086d6:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
700086d8:	4b03      	ldr	r3, [pc, #12]	@ (700086e8 <uxTaskGetNumberOfTasks+0x14>)
700086da:	681b      	ldr	r3, [r3, #0]
}
700086dc:	4618      	mov	r0, r3
700086de:	46bd      	mov	sp, r7
700086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
700086e4:	4770      	bx	lr
700086e6:	bf00      	nop
700086e8:	2400511c 	.word	0x2400511c

700086ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
700086ec:	b580      	push	{r7, lr}
700086ee:	b08a      	sub	sp, #40	@ 0x28
700086f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
700086f2:	2300      	movs	r3, #0
700086f4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
700086f6:	4b7e      	ldr	r3, [pc, #504]	@ (700088f0 <xTaskIncrementTick+0x204>)
700086f8:	681b      	ldr	r3, [r3, #0]
700086fa:	2b00      	cmp	r3, #0
700086fc:	f040 80ee 	bne.w	700088dc <xTaskIncrementTick+0x1f0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
70008700:	4b7c      	ldr	r3, [pc, #496]	@ (700088f4 <xTaskIncrementTick+0x208>)
70008702:	681b      	ldr	r3, [r3, #0]
70008704:	3301      	adds	r3, #1
70008706:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
70008708:	4a7a      	ldr	r2, [pc, #488]	@ (700088f4 <xTaskIncrementTick+0x208>)
7000870a:	6a3b      	ldr	r3, [r7, #32]
7000870c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
7000870e:	6a3b      	ldr	r3, [r7, #32]
70008710:	2b00      	cmp	r3, #0
70008712:	d121      	bne.n	70008758 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
70008714:	4b78      	ldr	r3, [pc, #480]	@ (700088f8 <xTaskIncrementTick+0x20c>)
70008716:	681b      	ldr	r3, [r3, #0]
70008718:	681b      	ldr	r3, [r3, #0]
7000871a:	2b00      	cmp	r3, #0
7000871c:	d00b      	beq.n	70008736 <xTaskIncrementTick+0x4a>
        __asm volatile
7000871e:	f04f 0350 	mov.w	r3, #80	@ 0x50
70008722:	f383 8811 	msr	BASEPRI, r3
70008726:	f3bf 8f6f 	isb	sy
7000872a:	f3bf 8f4f 	dsb	sy
7000872e:	607b      	str	r3, [r7, #4]
    }
70008730:	bf00      	nop
70008732:	bf00      	nop
70008734:	e7fd      	b.n	70008732 <xTaskIncrementTick+0x46>
70008736:	4b70      	ldr	r3, [pc, #448]	@ (700088f8 <xTaskIncrementTick+0x20c>)
70008738:	681b      	ldr	r3, [r3, #0]
7000873a:	61fb      	str	r3, [r7, #28]
7000873c:	4b6f      	ldr	r3, [pc, #444]	@ (700088fc <xTaskIncrementTick+0x210>)
7000873e:	681b      	ldr	r3, [r3, #0]
70008740:	4a6d      	ldr	r2, [pc, #436]	@ (700088f8 <xTaskIncrementTick+0x20c>)
70008742:	6013      	str	r3, [r2, #0]
70008744:	4a6d      	ldr	r2, [pc, #436]	@ (700088fc <xTaskIncrementTick+0x210>)
70008746:	69fb      	ldr	r3, [r7, #28]
70008748:	6013      	str	r3, [r2, #0]
7000874a:	4b6d      	ldr	r3, [pc, #436]	@ (70008900 <xTaskIncrementTick+0x214>)
7000874c:	681b      	ldr	r3, [r3, #0]
7000874e:	3301      	adds	r3, #1
70008750:	4a6b      	ldr	r2, [pc, #428]	@ (70008900 <xTaskIncrementTick+0x214>)
70008752:	6013      	str	r3, [r2, #0]
70008754:	f000 fbd4 	bl	70008f00 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
70008758:	4b6a      	ldr	r3, [pc, #424]	@ (70008904 <xTaskIncrementTick+0x218>)
7000875a:	681b      	ldr	r3, [r3, #0]
7000875c:	6a3a      	ldr	r2, [r7, #32]
7000875e:	429a      	cmp	r2, r3
70008760:	f0c0 80a7 	bcc.w	700088b2 <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
70008764:	4b64      	ldr	r3, [pc, #400]	@ (700088f8 <xTaskIncrementTick+0x20c>)
70008766:	681b      	ldr	r3, [r3, #0]
70008768:	681b      	ldr	r3, [r3, #0]
7000876a:	2b00      	cmp	r3, #0
7000876c:	d104      	bne.n	70008778 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
7000876e:	4b65      	ldr	r3, [pc, #404]	@ (70008904 <xTaskIncrementTick+0x218>)
70008770:	f04f 32ff 	mov.w	r2, #4294967295
70008774:	601a      	str	r2, [r3, #0]
                    break;
70008776:	e09c      	b.n	700088b2 <xTaskIncrementTick+0x1c6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
70008778:	4b5f      	ldr	r3, [pc, #380]	@ (700088f8 <xTaskIncrementTick+0x20c>)
7000877a:	681b      	ldr	r3, [r3, #0]
7000877c:	68db      	ldr	r3, [r3, #12]
7000877e:	68db      	ldr	r3, [r3, #12]
70008780:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
70008782:	69bb      	ldr	r3, [r7, #24]
70008784:	685b      	ldr	r3, [r3, #4]
70008786:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
70008788:	6a3a      	ldr	r2, [r7, #32]
7000878a:	697b      	ldr	r3, [r7, #20]
7000878c:	429a      	cmp	r2, r3
7000878e:	d203      	bcs.n	70008798 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
70008790:	4a5c      	ldr	r2, [pc, #368]	@ (70008904 <xTaskIncrementTick+0x218>)
70008792:	697b      	ldr	r3, [r7, #20]
70008794:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
70008796:	e08c      	b.n	700088b2 <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
70008798:	69bb      	ldr	r3, [r7, #24]
7000879a:	695b      	ldr	r3, [r3, #20]
7000879c:	613b      	str	r3, [r7, #16]
7000879e:	69bb      	ldr	r3, [r7, #24]
700087a0:	689b      	ldr	r3, [r3, #8]
700087a2:	69ba      	ldr	r2, [r7, #24]
700087a4:	68d2      	ldr	r2, [r2, #12]
700087a6:	609a      	str	r2, [r3, #8]
700087a8:	69bb      	ldr	r3, [r7, #24]
700087aa:	68db      	ldr	r3, [r3, #12]
700087ac:	69ba      	ldr	r2, [r7, #24]
700087ae:	6892      	ldr	r2, [r2, #8]
700087b0:	605a      	str	r2, [r3, #4]
700087b2:	693b      	ldr	r3, [r7, #16]
700087b4:	685a      	ldr	r2, [r3, #4]
700087b6:	69bb      	ldr	r3, [r7, #24]
700087b8:	3304      	adds	r3, #4
700087ba:	429a      	cmp	r2, r3
700087bc:	d103      	bne.n	700087c6 <xTaskIncrementTick+0xda>
700087be:	69bb      	ldr	r3, [r7, #24]
700087c0:	68da      	ldr	r2, [r3, #12]
700087c2:	693b      	ldr	r3, [r7, #16]
700087c4:	605a      	str	r2, [r3, #4]
700087c6:	69bb      	ldr	r3, [r7, #24]
700087c8:	2200      	movs	r2, #0
700087ca:	615a      	str	r2, [r3, #20]
700087cc:	693b      	ldr	r3, [r7, #16]
700087ce:	681b      	ldr	r3, [r3, #0]
700087d0:	1e5a      	subs	r2, r3, #1
700087d2:	693b      	ldr	r3, [r7, #16]
700087d4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
700087d6:	69bb      	ldr	r3, [r7, #24]
700087d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
700087da:	2b00      	cmp	r3, #0
700087dc:	d01e      	beq.n	7000881c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
700087de:	69bb      	ldr	r3, [r7, #24]
700087e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
700087e2:	60fb      	str	r3, [r7, #12]
700087e4:	69bb      	ldr	r3, [r7, #24]
700087e6:	69db      	ldr	r3, [r3, #28]
700087e8:	69ba      	ldr	r2, [r7, #24]
700087ea:	6a12      	ldr	r2, [r2, #32]
700087ec:	609a      	str	r2, [r3, #8]
700087ee:	69bb      	ldr	r3, [r7, #24]
700087f0:	6a1b      	ldr	r3, [r3, #32]
700087f2:	69ba      	ldr	r2, [r7, #24]
700087f4:	69d2      	ldr	r2, [r2, #28]
700087f6:	605a      	str	r2, [r3, #4]
700087f8:	68fb      	ldr	r3, [r7, #12]
700087fa:	685a      	ldr	r2, [r3, #4]
700087fc:	69bb      	ldr	r3, [r7, #24]
700087fe:	3318      	adds	r3, #24
70008800:	429a      	cmp	r2, r3
70008802:	d103      	bne.n	7000880c <xTaskIncrementTick+0x120>
70008804:	69bb      	ldr	r3, [r7, #24]
70008806:	6a1a      	ldr	r2, [r3, #32]
70008808:	68fb      	ldr	r3, [r7, #12]
7000880a:	605a      	str	r2, [r3, #4]
7000880c:	69bb      	ldr	r3, [r7, #24]
7000880e:	2200      	movs	r2, #0
70008810:	629a      	str	r2, [r3, #40]	@ 0x28
70008812:	68fb      	ldr	r3, [r7, #12]
70008814:	681b      	ldr	r3, [r3, #0]
70008816:	1e5a      	subs	r2, r3, #1
70008818:	68fb      	ldr	r3, [r7, #12]
7000881a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
7000881c:	69bb      	ldr	r3, [r7, #24]
7000881e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008820:	4b39      	ldr	r3, [pc, #228]	@ (70008908 <xTaskIncrementTick+0x21c>)
70008822:	681b      	ldr	r3, [r3, #0]
70008824:	429a      	cmp	r2, r3
70008826:	d903      	bls.n	70008830 <xTaskIncrementTick+0x144>
70008828:	69bb      	ldr	r3, [r7, #24]
7000882a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000882c:	4a36      	ldr	r2, [pc, #216]	@ (70008908 <xTaskIncrementTick+0x21c>)
7000882e:	6013      	str	r3, [r2, #0]
70008830:	69bb      	ldr	r3, [r7, #24]
70008832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008834:	4935      	ldr	r1, [pc, #212]	@ (7000890c <xTaskIncrementTick+0x220>)
70008836:	4613      	mov	r3, r2
70008838:	009b      	lsls	r3, r3, #2
7000883a:	4413      	add	r3, r2
7000883c:	009b      	lsls	r3, r3, #2
7000883e:	440b      	add	r3, r1
70008840:	3304      	adds	r3, #4
70008842:	681b      	ldr	r3, [r3, #0]
70008844:	60bb      	str	r3, [r7, #8]
70008846:	69bb      	ldr	r3, [r7, #24]
70008848:	68ba      	ldr	r2, [r7, #8]
7000884a:	609a      	str	r2, [r3, #8]
7000884c:	68bb      	ldr	r3, [r7, #8]
7000884e:	689a      	ldr	r2, [r3, #8]
70008850:	69bb      	ldr	r3, [r7, #24]
70008852:	60da      	str	r2, [r3, #12]
70008854:	68bb      	ldr	r3, [r7, #8]
70008856:	689b      	ldr	r3, [r3, #8]
70008858:	69ba      	ldr	r2, [r7, #24]
7000885a:	3204      	adds	r2, #4
7000885c:	605a      	str	r2, [r3, #4]
7000885e:	69bb      	ldr	r3, [r7, #24]
70008860:	1d1a      	adds	r2, r3, #4
70008862:	68bb      	ldr	r3, [r7, #8]
70008864:	609a      	str	r2, [r3, #8]
70008866:	69bb      	ldr	r3, [r7, #24]
70008868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000886a:	4613      	mov	r3, r2
7000886c:	009b      	lsls	r3, r3, #2
7000886e:	4413      	add	r3, r2
70008870:	009b      	lsls	r3, r3, #2
70008872:	4a26      	ldr	r2, [pc, #152]	@ (7000890c <xTaskIncrementTick+0x220>)
70008874:	441a      	add	r2, r3
70008876:	69bb      	ldr	r3, [r7, #24]
70008878:	615a      	str	r2, [r3, #20]
7000887a:	69bb      	ldr	r3, [r7, #24]
7000887c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000887e:	4923      	ldr	r1, [pc, #140]	@ (7000890c <xTaskIncrementTick+0x220>)
70008880:	4613      	mov	r3, r2
70008882:	009b      	lsls	r3, r3, #2
70008884:	4413      	add	r3, r2
70008886:	009b      	lsls	r3, r3, #2
70008888:	440b      	add	r3, r1
7000888a:	681b      	ldr	r3, [r3, #0]
7000888c:	1c59      	adds	r1, r3, #1
7000888e:	481f      	ldr	r0, [pc, #124]	@ (7000890c <xTaskIncrementTick+0x220>)
70008890:	4613      	mov	r3, r2
70008892:	009b      	lsls	r3, r3, #2
70008894:	4413      	add	r3, r2
70008896:	009b      	lsls	r3, r3, #2
70008898:	4403      	add	r3, r0
7000889a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
7000889c:	69bb      	ldr	r3, [r7, #24]
7000889e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700088a0:	4b1b      	ldr	r3, [pc, #108]	@ (70008910 <xTaskIncrementTick+0x224>)
700088a2:	681b      	ldr	r3, [r3, #0]
700088a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700088a6:	429a      	cmp	r2, r3
700088a8:	f67f af5c 	bls.w	70008764 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
700088ac:	2301      	movs	r3, #1
700088ae:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
700088b0:	e758      	b.n	70008764 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
700088b2:	4b17      	ldr	r3, [pc, #92]	@ (70008910 <xTaskIncrementTick+0x224>)
700088b4:	681b      	ldr	r3, [r3, #0]
700088b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700088b8:	4914      	ldr	r1, [pc, #80]	@ (7000890c <xTaskIncrementTick+0x220>)
700088ba:	4613      	mov	r3, r2
700088bc:	009b      	lsls	r3, r3, #2
700088be:	4413      	add	r3, r2
700088c0:	009b      	lsls	r3, r3, #2
700088c2:	440b      	add	r3, r1
700088c4:	681b      	ldr	r3, [r3, #0]
700088c6:	2b01      	cmp	r3, #1
700088c8:	d901      	bls.n	700088ce <xTaskIncrementTick+0x1e2>
            {
                xSwitchRequired = pdTRUE;
700088ca:	2301      	movs	r3, #1
700088cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
700088ce:	4b11      	ldr	r3, [pc, #68]	@ (70008914 <xTaskIncrementTick+0x228>)
700088d0:	681b      	ldr	r3, [r3, #0]
700088d2:	2b00      	cmp	r3, #0
700088d4:	d007      	beq.n	700088e6 <xTaskIncrementTick+0x1fa>
            {
                xSwitchRequired = pdTRUE;
700088d6:	2301      	movs	r3, #1
700088d8:	627b      	str	r3, [r7, #36]	@ 0x24
700088da:	e004      	b.n	700088e6 <xTaskIncrementTick+0x1fa>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
700088dc:	4b0e      	ldr	r3, [pc, #56]	@ (70008918 <xTaskIncrementTick+0x22c>)
700088de:	681b      	ldr	r3, [r3, #0]
700088e0:	3301      	adds	r3, #1
700088e2:	4a0d      	ldr	r2, [pc, #52]	@ (70008918 <xTaskIncrementTick+0x22c>)
700088e4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
700088e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
700088e8:	4618      	mov	r0, r3
700088ea:	3728      	adds	r7, #40	@ 0x28
700088ec:	46bd      	mov	sp, r7
700088ee:	bd80      	pop	{r7, pc}
700088f0:	24005144 	.word	0x24005144
700088f4:	24005120 	.word	0x24005120
700088f8:	240050d4 	.word	0x240050d4
700088fc:	240050d8 	.word	0x240050d8
70008900:	24005134 	.word	0x24005134
70008904:	2400513c 	.word	0x2400513c
70008908:	24005124 	.word	0x24005124
7000890c:	24004c4c 	.word	0x24004c4c
70008910:	24004c48 	.word	0x24004c48
70008914:	24005130 	.word	0x24005130
70008918:	2400512c 	.word	0x2400512c

7000891c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
7000891c:	b480      	push	{r7}
7000891e:	b085      	sub	sp, #20
70008920:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
70008922:	4b2b      	ldr	r3, [pc, #172]	@ (700089d0 <vTaskSwitchContext+0xb4>)
70008924:	681b      	ldr	r3, [r3, #0]
70008926:	2b00      	cmp	r3, #0
70008928:	d003      	beq.n	70008932 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
7000892a:	4b2a      	ldr	r3, [pc, #168]	@ (700089d4 <vTaskSwitchContext+0xb8>)
7000892c:	2201      	movs	r2, #1
7000892e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
70008930:	e047      	b.n	700089c2 <vTaskSwitchContext+0xa6>
        xYieldPending = pdFALSE;
70008932:	4b28      	ldr	r3, [pc, #160]	@ (700089d4 <vTaskSwitchContext+0xb8>)
70008934:	2200      	movs	r2, #0
70008936:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
70008938:	4b27      	ldr	r3, [pc, #156]	@ (700089d8 <vTaskSwitchContext+0xbc>)
7000893a:	681b      	ldr	r3, [r3, #0]
7000893c:	60fb      	str	r3, [r7, #12]
7000893e:	e011      	b.n	70008964 <vTaskSwitchContext+0x48>
70008940:	68fb      	ldr	r3, [r7, #12]
70008942:	2b00      	cmp	r3, #0
70008944:	d10b      	bne.n	7000895e <vTaskSwitchContext+0x42>
        __asm volatile
70008946:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000894a:	f383 8811 	msr	BASEPRI, r3
7000894e:	f3bf 8f6f 	isb	sy
70008952:	f3bf 8f4f 	dsb	sy
70008956:	607b      	str	r3, [r7, #4]
    }
70008958:	bf00      	nop
7000895a:	bf00      	nop
7000895c:	e7fd      	b.n	7000895a <vTaskSwitchContext+0x3e>
7000895e:	68fb      	ldr	r3, [r7, #12]
70008960:	3b01      	subs	r3, #1
70008962:	60fb      	str	r3, [r7, #12]
70008964:	491d      	ldr	r1, [pc, #116]	@ (700089dc <vTaskSwitchContext+0xc0>)
70008966:	68fa      	ldr	r2, [r7, #12]
70008968:	4613      	mov	r3, r2
7000896a:	009b      	lsls	r3, r3, #2
7000896c:	4413      	add	r3, r2
7000896e:	009b      	lsls	r3, r3, #2
70008970:	440b      	add	r3, r1
70008972:	681b      	ldr	r3, [r3, #0]
70008974:	2b00      	cmp	r3, #0
70008976:	d0e3      	beq.n	70008940 <vTaskSwitchContext+0x24>
70008978:	68fa      	ldr	r2, [r7, #12]
7000897a:	4613      	mov	r3, r2
7000897c:	009b      	lsls	r3, r3, #2
7000897e:	4413      	add	r3, r2
70008980:	009b      	lsls	r3, r3, #2
70008982:	4a16      	ldr	r2, [pc, #88]	@ (700089dc <vTaskSwitchContext+0xc0>)
70008984:	4413      	add	r3, r2
70008986:	60bb      	str	r3, [r7, #8]
70008988:	68bb      	ldr	r3, [r7, #8]
7000898a:	685b      	ldr	r3, [r3, #4]
7000898c:	685a      	ldr	r2, [r3, #4]
7000898e:	68bb      	ldr	r3, [r7, #8]
70008990:	605a      	str	r2, [r3, #4]
70008992:	68bb      	ldr	r3, [r7, #8]
70008994:	685a      	ldr	r2, [r3, #4]
70008996:	68bb      	ldr	r3, [r7, #8]
70008998:	3308      	adds	r3, #8
7000899a:	429a      	cmp	r2, r3
7000899c:	d104      	bne.n	700089a8 <vTaskSwitchContext+0x8c>
7000899e:	68bb      	ldr	r3, [r7, #8]
700089a0:	685b      	ldr	r3, [r3, #4]
700089a2:	685a      	ldr	r2, [r3, #4]
700089a4:	68bb      	ldr	r3, [r7, #8]
700089a6:	605a      	str	r2, [r3, #4]
700089a8:	68bb      	ldr	r3, [r7, #8]
700089aa:	685b      	ldr	r3, [r3, #4]
700089ac:	68db      	ldr	r3, [r3, #12]
700089ae:	4a0c      	ldr	r2, [pc, #48]	@ (700089e0 <vTaskSwitchContext+0xc4>)
700089b0:	6013      	str	r3, [r2, #0]
700089b2:	4a09      	ldr	r2, [pc, #36]	@ (700089d8 <vTaskSwitchContext+0xbc>)
700089b4:	68fb      	ldr	r3, [r7, #12]
700089b6:	6013      	str	r3, [r2, #0]
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
700089b8:	4b09      	ldr	r3, [pc, #36]	@ (700089e0 <vTaskSwitchContext+0xc4>)
700089ba:	681b      	ldr	r3, [r3, #0]
700089bc:	3354      	adds	r3, #84	@ 0x54
700089be:	4a09      	ldr	r2, [pc, #36]	@ (700089e4 <vTaskSwitchContext+0xc8>)
700089c0:	6013      	str	r3, [r2, #0]
}
700089c2:	bf00      	nop
700089c4:	3714      	adds	r7, #20
700089c6:	46bd      	mov	sp, r7
700089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
700089cc:	4770      	bx	lr
700089ce:	bf00      	nop
700089d0:	24005144 	.word	0x24005144
700089d4:	24005130 	.word	0x24005130
700089d8:	24005124 	.word	0x24005124
700089dc:	24004c4c 	.word	0x24004c4c
700089e0:	24004c48 	.word	0x24004c48
700089e4:	24000040 	.word	0x24000040

700089e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
700089e8:	b580      	push	{r7, lr}
700089ea:	b084      	sub	sp, #16
700089ec:	af00      	add	r7, sp, #0
700089ee:	6078      	str	r0, [r7, #4]
700089f0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
700089f2:	687b      	ldr	r3, [r7, #4]
700089f4:	2b00      	cmp	r3, #0
700089f6:	d10b      	bne.n	70008a10 <vTaskPlaceOnEventList+0x28>
        __asm volatile
700089f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
700089fc:	f383 8811 	msr	BASEPRI, r3
70008a00:	f3bf 8f6f 	isb	sy
70008a04:	f3bf 8f4f 	dsb	sy
70008a08:	60fb      	str	r3, [r7, #12]
    }
70008a0a:	bf00      	nop
70008a0c:	bf00      	nop
70008a0e:	e7fd      	b.n	70008a0c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
70008a10:	4b07      	ldr	r3, [pc, #28]	@ (70008a30 <vTaskPlaceOnEventList+0x48>)
70008a12:	681b      	ldr	r3, [r3, #0]
70008a14:	3318      	adds	r3, #24
70008a16:	4619      	mov	r1, r3
70008a18:	6878      	ldr	r0, [r7, #4]
70008a1a:	f7fd fd76 	bl	7000650a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
70008a1e:	2101      	movs	r1, #1
70008a20:	6838      	ldr	r0, [r7, #0]
70008a22:	f000 fc9f 	bl	70009364 <prvAddCurrentTaskToDelayedList>
}
70008a26:	bf00      	nop
70008a28:	3710      	adds	r7, #16
70008a2a:	46bd      	mov	sp, r7
70008a2c:	bd80      	pop	{r7, pc}
70008a2e:	bf00      	nop
70008a30:	24004c48 	.word	0x24004c48

70008a34 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
70008a34:	b580      	push	{r7, lr}
70008a36:	b086      	sub	sp, #24
70008a38:	af00      	add	r7, sp, #0
70008a3a:	60f8      	str	r0, [r7, #12]
70008a3c:	60b9      	str	r1, [r7, #8]
70008a3e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
70008a40:	68fb      	ldr	r3, [r7, #12]
70008a42:	2b00      	cmp	r3, #0
70008a44:	d10b      	bne.n	70008a5e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
70008a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
70008a4a:	f383 8811 	msr	BASEPRI, r3
70008a4e:	f3bf 8f6f 	isb	sy
70008a52:	f3bf 8f4f 	dsb	sy
70008a56:	613b      	str	r3, [r7, #16]
    }
70008a58:	bf00      	nop
70008a5a:	bf00      	nop
70008a5c:	e7fd      	b.n	70008a5a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
70008a5e:	68fb      	ldr	r3, [r7, #12]
70008a60:	685b      	ldr	r3, [r3, #4]
70008a62:	617b      	str	r3, [r7, #20]
70008a64:	4b15      	ldr	r3, [pc, #84]	@ (70008abc <vTaskPlaceOnEventListRestricted+0x88>)
70008a66:	681b      	ldr	r3, [r3, #0]
70008a68:	697a      	ldr	r2, [r7, #20]
70008a6a:	61da      	str	r2, [r3, #28]
70008a6c:	4b13      	ldr	r3, [pc, #76]	@ (70008abc <vTaskPlaceOnEventListRestricted+0x88>)
70008a6e:	681b      	ldr	r3, [r3, #0]
70008a70:	697a      	ldr	r2, [r7, #20]
70008a72:	6892      	ldr	r2, [r2, #8]
70008a74:	621a      	str	r2, [r3, #32]
70008a76:	4b11      	ldr	r3, [pc, #68]	@ (70008abc <vTaskPlaceOnEventListRestricted+0x88>)
70008a78:	681a      	ldr	r2, [r3, #0]
70008a7a:	697b      	ldr	r3, [r7, #20]
70008a7c:	689b      	ldr	r3, [r3, #8]
70008a7e:	3218      	adds	r2, #24
70008a80:	605a      	str	r2, [r3, #4]
70008a82:	4b0e      	ldr	r3, [pc, #56]	@ (70008abc <vTaskPlaceOnEventListRestricted+0x88>)
70008a84:	681b      	ldr	r3, [r3, #0]
70008a86:	f103 0218 	add.w	r2, r3, #24
70008a8a:	697b      	ldr	r3, [r7, #20]
70008a8c:	609a      	str	r2, [r3, #8]
70008a8e:	4b0b      	ldr	r3, [pc, #44]	@ (70008abc <vTaskPlaceOnEventListRestricted+0x88>)
70008a90:	681b      	ldr	r3, [r3, #0]
70008a92:	68fa      	ldr	r2, [r7, #12]
70008a94:	629a      	str	r2, [r3, #40]	@ 0x28
70008a96:	68fb      	ldr	r3, [r7, #12]
70008a98:	681b      	ldr	r3, [r3, #0]
70008a9a:	1c5a      	adds	r2, r3, #1
70008a9c:	68fb      	ldr	r3, [r7, #12]
70008a9e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
70008aa0:	687b      	ldr	r3, [r7, #4]
70008aa2:	2b00      	cmp	r3, #0
70008aa4:	d002      	beq.n	70008aac <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
70008aa6:	f04f 33ff 	mov.w	r3, #4294967295
70008aaa:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
70008aac:	6879      	ldr	r1, [r7, #4]
70008aae:	68b8      	ldr	r0, [r7, #8]
70008ab0:	f000 fc58 	bl	70009364 <prvAddCurrentTaskToDelayedList>
    }
70008ab4:	bf00      	nop
70008ab6:	3718      	adds	r7, #24
70008ab8:	46bd      	mov	sp, r7
70008aba:	bd80      	pop	{r7, pc}
70008abc:	24004c48 	.word	0x24004c48

70008ac0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
70008ac0:	b480      	push	{r7}
70008ac2:	b08b      	sub	sp, #44	@ 0x2c
70008ac4:	af00      	add	r7, sp, #0
70008ac6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
70008ac8:	687b      	ldr	r3, [r7, #4]
70008aca:	68db      	ldr	r3, [r3, #12]
70008acc:	68db      	ldr	r3, [r3, #12]
70008ace:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
70008ad0:	6a3b      	ldr	r3, [r7, #32]
70008ad2:	2b00      	cmp	r3, #0
70008ad4:	d10b      	bne.n	70008aee <xTaskRemoveFromEventList+0x2e>
        __asm volatile
70008ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
70008ada:	f383 8811 	msr	BASEPRI, r3
70008ade:	f3bf 8f6f 	isb	sy
70008ae2:	f3bf 8f4f 	dsb	sy
70008ae6:	60fb      	str	r3, [r7, #12]
    }
70008ae8:	bf00      	nop
70008aea:	bf00      	nop
70008aec:	e7fd      	b.n	70008aea <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
70008aee:	6a3b      	ldr	r3, [r7, #32]
70008af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70008af2:	61fb      	str	r3, [r7, #28]
70008af4:	6a3b      	ldr	r3, [r7, #32]
70008af6:	69db      	ldr	r3, [r3, #28]
70008af8:	6a3a      	ldr	r2, [r7, #32]
70008afa:	6a12      	ldr	r2, [r2, #32]
70008afc:	609a      	str	r2, [r3, #8]
70008afe:	6a3b      	ldr	r3, [r7, #32]
70008b00:	6a1b      	ldr	r3, [r3, #32]
70008b02:	6a3a      	ldr	r2, [r7, #32]
70008b04:	69d2      	ldr	r2, [r2, #28]
70008b06:	605a      	str	r2, [r3, #4]
70008b08:	69fb      	ldr	r3, [r7, #28]
70008b0a:	685a      	ldr	r2, [r3, #4]
70008b0c:	6a3b      	ldr	r3, [r7, #32]
70008b0e:	3318      	adds	r3, #24
70008b10:	429a      	cmp	r2, r3
70008b12:	d103      	bne.n	70008b1c <xTaskRemoveFromEventList+0x5c>
70008b14:	6a3b      	ldr	r3, [r7, #32]
70008b16:	6a1a      	ldr	r2, [r3, #32]
70008b18:	69fb      	ldr	r3, [r7, #28]
70008b1a:	605a      	str	r2, [r3, #4]
70008b1c:	6a3b      	ldr	r3, [r7, #32]
70008b1e:	2200      	movs	r2, #0
70008b20:	629a      	str	r2, [r3, #40]	@ 0x28
70008b22:	69fb      	ldr	r3, [r7, #28]
70008b24:	681b      	ldr	r3, [r3, #0]
70008b26:	1e5a      	subs	r2, r3, #1
70008b28:	69fb      	ldr	r3, [r7, #28]
70008b2a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
70008b2c:	4b4a      	ldr	r3, [pc, #296]	@ (70008c58 <xTaskRemoveFromEventList+0x198>)
70008b2e:	681b      	ldr	r3, [r3, #0]
70008b30:	2b00      	cmp	r3, #0
70008b32:	d15f      	bne.n	70008bf4 <xTaskRemoveFromEventList+0x134>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
70008b34:	6a3b      	ldr	r3, [r7, #32]
70008b36:	695b      	ldr	r3, [r3, #20]
70008b38:	617b      	str	r3, [r7, #20]
70008b3a:	6a3b      	ldr	r3, [r7, #32]
70008b3c:	689b      	ldr	r3, [r3, #8]
70008b3e:	6a3a      	ldr	r2, [r7, #32]
70008b40:	68d2      	ldr	r2, [r2, #12]
70008b42:	609a      	str	r2, [r3, #8]
70008b44:	6a3b      	ldr	r3, [r7, #32]
70008b46:	68db      	ldr	r3, [r3, #12]
70008b48:	6a3a      	ldr	r2, [r7, #32]
70008b4a:	6892      	ldr	r2, [r2, #8]
70008b4c:	605a      	str	r2, [r3, #4]
70008b4e:	697b      	ldr	r3, [r7, #20]
70008b50:	685a      	ldr	r2, [r3, #4]
70008b52:	6a3b      	ldr	r3, [r7, #32]
70008b54:	3304      	adds	r3, #4
70008b56:	429a      	cmp	r2, r3
70008b58:	d103      	bne.n	70008b62 <xTaskRemoveFromEventList+0xa2>
70008b5a:	6a3b      	ldr	r3, [r7, #32]
70008b5c:	68da      	ldr	r2, [r3, #12]
70008b5e:	697b      	ldr	r3, [r7, #20]
70008b60:	605a      	str	r2, [r3, #4]
70008b62:	6a3b      	ldr	r3, [r7, #32]
70008b64:	2200      	movs	r2, #0
70008b66:	615a      	str	r2, [r3, #20]
70008b68:	697b      	ldr	r3, [r7, #20]
70008b6a:	681b      	ldr	r3, [r3, #0]
70008b6c:	1e5a      	subs	r2, r3, #1
70008b6e:	697b      	ldr	r3, [r7, #20]
70008b70:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
70008b72:	6a3b      	ldr	r3, [r7, #32]
70008b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008b76:	4b39      	ldr	r3, [pc, #228]	@ (70008c5c <xTaskRemoveFromEventList+0x19c>)
70008b78:	681b      	ldr	r3, [r3, #0]
70008b7a:	429a      	cmp	r2, r3
70008b7c:	d903      	bls.n	70008b86 <xTaskRemoveFromEventList+0xc6>
70008b7e:	6a3b      	ldr	r3, [r7, #32]
70008b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70008b82:	4a36      	ldr	r2, [pc, #216]	@ (70008c5c <xTaskRemoveFromEventList+0x19c>)
70008b84:	6013      	str	r3, [r2, #0]
70008b86:	6a3b      	ldr	r3, [r7, #32]
70008b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008b8a:	4935      	ldr	r1, [pc, #212]	@ (70008c60 <xTaskRemoveFromEventList+0x1a0>)
70008b8c:	4613      	mov	r3, r2
70008b8e:	009b      	lsls	r3, r3, #2
70008b90:	4413      	add	r3, r2
70008b92:	009b      	lsls	r3, r3, #2
70008b94:	440b      	add	r3, r1
70008b96:	3304      	adds	r3, #4
70008b98:	681b      	ldr	r3, [r3, #0]
70008b9a:	613b      	str	r3, [r7, #16]
70008b9c:	6a3b      	ldr	r3, [r7, #32]
70008b9e:	693a      	ldr	r2, [r7, #16]
70008ba0:	609a      	str	r2, [r3, #8]
70008ba2:	693b      	ldr	r3, [r7, #16]
70008ba4:	689a      	ldr	r2, [r3, #8]
70008ba6:	6a3b      	ldr	r3, [r7, #32]
70008ba8:	60da      	str	r2, [r3, #12]
70008baa:	693b      	ldr	r3, [r7, #16]
70008bac:	689b      	ldr	r3, [r3, #8]
70008bae:	6a3a      	ldr	r2, [r7, #32]
70008bb0:	3204      	adds	r2, #4
70008bb2:	605a      	str	r2, [r3, #4]
70008bb4:	6a3b      	ldr	r3, [r7, #32]
70008bb6:	1d1a      	adds	r2, r3, #4
70008bb8:	693b      	ldr	r3, [r7, #16]
70008bba:	609a      	str	r2, [r3, #8]
70008bbc:	6a3b      	ldr	r3, [r7, #32]
70008bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008bc0:	4613      	mov	r3, r2
70008bc2:	009b      	lsls	r3, r3, #2
70008bc4:	4413      	add	r3, r2
70008bc6:	009b      	lsls	r3, r3, #2
70008bc8:	4a25      	ldr	r2, [pc, #148]	@ (70008c60 <xTaskRemoveFromEventList+0x1a0>)
70008bca:	441a      	add	r2, r3
70008bcc:	6a3b      	ldr	r3, [r7, #32]
70008bce:	615a      	str	r2, [r3, #20]
70008bd0:	6a3b      	ldr	r3, [r7, #32]
70008bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008bd4:	4922      	ldr	r1, [pc, #136]	@ (70008c60 <xTaskRemoveFromEventList+0x1a0>)
70008bd6:	4613      	mov	r3, r2
70008bd8:	009b      	lsls	r3, r3, #2
70008bda:	4413      	add	r3, r2
70008bdc:	009b      	lsls	r3, r3, #2
70008bde:	440b      	add	r3, r1
70008be0:	681b      	ldr	r3, [r3, #0]
70008be2:	1c59      	adds	r1, r3, #1
70008be4:	481e      	ldr	r0, [pc, #120]	@ (70008c60 <xTaskRemoveFromEventList+0x1a0>)
70008be6:	4613      	mov	r3, r2
70008be8:	009b      	lsls	r3, r3, #2
70008bea:	4413      	add	r3, r2
70008bec:	009b      	lsls	r3, r3, #2
70008bee:	4403      	add	r3, r0
70008bf0:	6019      	str	r1, [r3, #0]
70008bf2:	e01b      	b.n	70008c2c <xTaskRemoveFromEventList+0x16c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
70008bf4:	4b1b      	ldr	r3, [pc, #108]	@ (70008c64 <xTaskRemoveFromEventList+0x1a4>)
70008bf6:	685b      	ldr	r3, [r3, #4]
70008bf8:	61bb      	str	r3, [r7, #24]
70008bfa:	6a3b      	ldr	r3, [r7, #32]
70008bfc:	69ba      	ldr	r2, [r7, #24]
70008bfe:	61da      	str	r2, [r3, #28]
70008c00:	69bb      	ldr	r3, [r7, #24]
70008c02:	689a      	ldr	r2, [r3, #8]
70008c04:	6a3b      	ldr	r3, [r7, #32]
70008c06:	621a      	str	r2, [r3, #32]
70008c08:	69bb      	ldr	r3, [r7, #24]
70008c0a:	689b      	ldr	r3, [r3, #8]
70008c0c:	6a3a      	ldr	r2, [r7, #32]
70008c0e:	3218      	adds	r2, #24
70008c10:	605a      	str	r2, [r3, #4]
70008c12:	6a3b      	ldr	r3, [r7, #32]
70008c14:	f103 0218 	add.w	r2, r3, #24
70008c18:	69bb      	ldr	r3, [r7, #24]
70008c1a:	609a      	str	r2, [r3, #8]
70008c1c:	6a3b      	ldr	r3, [r7, #32]
70008c1e:	4a11      	ldr	r2, [pc, #68]	@ (70008c64 <xTaskRemoveFromEventList+0x1a4>)
70008c20:	629a      	str	r2, [r3, #40]	@ 0x28
70008c22:	4b10      	ldr	r3, [pc, #64]	@ (70008c64 <xTaskRemoveFromEventList+0x1a4>)
70008c24:	681b      	ldr	r3, [r3, #0]
70008c26:	3301      	adds	r3, #1
70008c28:	4a0e      	ldr	r2, [pc, #56]	@ (70008c64 <xTaskRemoveFromEventList+0x1a4>)
70008c2a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
70008c2c:	6a3b      	ldr	r3, [r7, #32]
70008c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008c30:	4b0d      	ldr	r3, [pc, #52]	@ (70008c68 <xTaskRemoveFromEventList+0x1a8>)
70008c32:	681b      	ldr	r3, [r3, #0]
70008c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70008c36:	429a      	cmp	r2, r3
70008c38:	d905      	bls.n	70008c46 <xTaskRemoveFromEventList+0x186>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
70008c3a:	2301      	movs	r3, #1
70008c3c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
70008c3e:	4b0b      	ldr	r3, [pc, #44]	@ (70008c6c <xTaskRemoveFromEventList+0x1ac>)
70008c40:	2201      	movs	r2, #1
70008c42:	601a      	str	r2, [r3, #0]
70008c44:	e001      	b.n	70008c4a <xTaskRemoveFromEventList+0x18a>
    }
    else
    {
        xReturn = pdFALSE;
70008c46:	2300      	movs	r3, #0
70008c48:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
70008c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
70008c4c:	4618      	mov	r0, r3
70008c4e:	372c      	adds	r7, #44	@ 0x2c
70008c50:	46bd      	mov	sp, r7
70008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
70008c56:	4770      	bx	lr
70008c58:	24005144 	.word	0x24005144
70008c5c:	24005124 	.word	0x24005124
70008c60:	24004c4c 	.word	0x24004c4c
70008c64:	240050dc 	.word	0x240050dc
70008c68:	24004c48 	.word	0x24004c48
70008c6c:	24005130 	.word	0x24005130

70008c70 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
70008c70:	b480      	push	{r7}
70008c72:	b083      	sub	sp, #12
70008c74:	af00      	add	r7, sp, #0
70008c76:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
70008c78:	4b06      	ldr	r3, [pc, #24]	@ (70008c94 <vTaskInternalSetTimeOutState+0x24>)
70008c7a:	681a      	ldr	r2, [r3, #0]
70008c7c:	687b      	ldr	r3, [r7, #4]
70008c7e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
70008c80:	4b05      	ldr	r3, [pc, #20]	@ (70008c98 <vTaskInternalSetTimeOutState+0x28>)
70008c82:	681a      	ldr	r2, [r3, #0]
70008c84:	687b      	ldr	r3, [r7, #4]
70008c86:	605a      	str	r2, [r3, #4]
}
70008c88:	bf00      	nop
70008c8a:	370c      	adds	r7, #12
70008c8c:	46bd      	mov	sp, r7
70008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
70008c92:	4770      	bx	lr
70008c94:	24005134 	.word	0x24005134
70008c98:	24005120 	.word	0x24005120

70008c9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
70008c9c:	b580      	push	{r7, lr}
70008c9e:	b088      	sub	sp, #32
70008ca0:	af00      	add	r7, sp, #0
70008ca2:	6078      	str	r0, [r7, #4]
70008ca4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
70008ca6:	687b      	ldr	r3, [r7, #4]
70008ca8:	2b00      	cmp	r3, #0
70008caa:	d10b      	bne.n	70008cc4 <xTaskCheckForTimeOut+0x28>
        __asm volatile
70008cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
70008cb0:	f383 8811 	msr	BASEPRI, r3
70008cb4:	f3bf 8f6f 	isb	sy
70008cb8:	f3bf 8f4f 	dsb	sy
70008cbc:	613b      	str	r3, [r7, #16]
    }
70008cbe:	bf00      	nop
70008cc0:	bf00      	nop
70008cc2:	e7fd      	b.n	70008cc0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
70008cc4:	683b      	ldr	r3, [r7, #0]
70008cc6:	2b00      	cmp	r3, #0
70008cc8:	d10b      	bne.n	70008ce2 <xTaskCheckForTimeOut+0x46>
        __asm volatile
70008cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
70008cce:	f383 8811 	msr	BASEPRI, r3
70008cd2:	f3bf 8f6f 	isb	sy
70008cd6:	f3bf 8f4f 	dsb	sy
70008cda:	60fb      	str	r3, [r7, #12]
    }
70008cdc:	bf00      	nop
70008cde:	bf00      	nop
70008ce0:	e7fd      	b.n	70008cde <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
70008ce2:	f7fd fdab 	bl	7000683c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
70008ce6:	4b1f      	ldr	r3, [pc, #124]	@ (70008d64 <xTaskCheckForTimeOut+0xc8>)
70008ce8:	681b      	ldr	r3, [r3, #0]
70008cea:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
70008cec:	687b      	ldr	r3, [r7, #4]
70008cee:	685b      	ldr	r3, [r3, #4]
70008cf0:	69ba      	ldr	r2, [r7, #24]
70008cf2:	1ad3      	subs	r3, r2, r3
70008cf4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
70008cf6:	683b      	ldr	r3, [r7, #0]
70008cf8:	681b      	ldr	r3, [r3, #0]
70008cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
70008cfe:	d102      	bne.n	70008d06 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
70008d00:	2300      	movs	r3, #0
70008d02:	61fb      	str	r3, [r7, #28]
70008d04:	e026      	b.n	70008d54 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
70008d06:	687b      	ldr	r3, [r7, #4]
70008d08:	681a      	ldr	r2, [r3, #0]
70008d0a:	4b17      	ldr	r3, [pc, #92]	@ (70008d68 <xTaskCheckForTimeOut+0xcc>)
70008d0c:	681b      	ldr	r3, [r3, #0]
70008d0e:	429a      	cmp	r2, r3
70008d10:	d00a      	beq.n	70008d28 <xTaskCheckForTimeOut+0x8c>
70008d12:	687b      	ldr	r3, [r7, #4]
70008d14:	685b      	ldr	r3, [r3, #4]
70008d16:	69ba      	ldr	r2, [r7, #24]
70008d18:	429a      	cmp	r2, r3
70008d1a:	d305      	bcc.n	70008d28 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
70008d1c:	2301      	movs	r3, #1
70008d1e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
70008d20:	683b      	ldr	r3, [r7, #0]
70008d22:	2200      	movs	r2, #0
70008d24:	601a      	str	r2, [r3, #0]
70008d26:	e015      	b.n	70008d54 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
70008d28:	683b      	ldr	r3, [r7, #0]
70008d2a:	681b      	ldr	r3, [r3, #0]
70008d2c:	697a      	ldr	r2, [r7, #20]
70008d2e:	429a      	cmp	r2, r3
70008d30:	d20b      	bcs.n	70008d4a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
70008d32:	683b      	ldr	r3, [r7, #0]
70008d34:	681a      	ldr	r2, [r3, #0]
70008d36:	697b      	ldr	r3, [r7, #20]
70008d38:	1ad2      	subs	r2, r2, r3
70008d3a:	683b      	ldr	r3, [r7, #0]
70008d3c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
70008d3e:	6878      	ldr	r0, [r7, #4]
70008d40:	f7ff ff96 	bl	70008c70 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
70008d44:	2300      	movs	r3, #0
70008d46:	61fb      	str	r3, [r7, #28]
70008d48:	e004      	b.n	70008d54 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
70008d4a:	683b      	ldr	r3, [r7, #0]
70008d4c:	2200      	movs	r2, #0
70008d4e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
70008d50:	2301      	movs	r3, #1
70008d52:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
70008d54:	f7fd fda4 	bl	700068a0 <vPortExitCritical>

    return xReturn;
70008d58:	69fb      	ldr	r3, [r7, #28]
}
70008d5a:	4618      	mov	r0, r3
70008d5c:	3720      	adds	r7, #32
70008d5e:	46bd      	mov	sp, r7
70008d60:	bd80      	pop	{r7, pc}
70008d62:	bf00      	nop
70008d64:	24005120 	.word	0x24005120
70008d68:	24005134 	.word	0x24005134

70008d6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
70008d6c:	b480      	push	{r7}
70008d6e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
70008d70:	4b03      	ldr	r3, [pc, #12]	@ (70008d80 <vTaskMissedYield+0x14>)
70008d72:	2201      	movs	r2, #1
70008d74:	601a      	str	r2, [r3, #0]
}
70008d76:	bf00      	nop
70008d78:	46bd      	mov	sp, r7
70008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
70008d7e:	4770      	bx	lr
70008d80:	24005130 	.word	0x24005130

70008d84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
70008d84:	b580      	push	{r7, lr}
70008d86:	b082      	sub	sp, #8
70008d88:	af00      	add	r7, sp, #0
70008d8a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
70008d8c:	f000 f852 	bl	70008e34 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
70008d90:	4b06      	ldr	r3, [pc, #24]	@ (70008dac <prvIdleTask+0x28>)
70008d92:	681b      	ldr	r3, [r3, #0]
70008d94:	2b01      	cmp	r3, #1
70008d96:	d9f9      	bls.n	70008d8c <prvIdleTask+0x8>
            {
                taskYIELD();
70008d98:	4b05      	ldr	r3, [pc, #20]	@ (70008db0 <prvIdleTask+0x2c>)
70008d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70008d9e:	601a      	str	r2, [r3, #0]
70008da0:	f3bf 8f4f 	dsb	sy
70008da4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
70008da8:	e7f0      	b.n	70008d8c <prvIdleTask+0x8>
70008daa:	bf00      	nop
70008dac:	24004c4c 	.word	0x24004c4c
70008db0:	e000ed04 	.word	0xe000ed04

70008db4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
70008db4:	b580      	push	{r7, lr}
70008db6:	b082      	sub	sp, #8
70008db8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
70008dba:	2300      	movs	r3, #0
70008dbc:	607b      	str	r3, [r7, #4]
70008dbe:	e00c      	b.n	70008dda <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
70008dc0:	687a      	ldr	r2, [r7, #4]
70008dc2:	4613      	mov	r3, r2
70008dc4:	009b      	lsls	r3, r3, #2
70008dc6:	4413      	add	r3, r2
70008dc8:	009b      	lsls	r3, r3, #2
70008dca:	4a12      	ldr	r2, [pc, #72]	@ (70008e14 <prvInitialiseTaskLists+0x60>)
70008dcc:	4413      	add	r3, r2
70008dce:	4618      	mov	r0, r3
70008dd0:	f7fd fb4a 	bl	70006468 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
70008dd4:	687b      	ldr	r3, [r7, #4]
70008dd6:	3301      	adds	r3, #1
70008dd8:	607b      	str	r3, [r7, #4]
70008dda:	687b      	ldr	r3, [r7, #4]
70008ddc:	2b37      	cmp	r3, #55	@ 0x37
70008dde:	d9ef      	bls.n	70008dc0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
70008de0:	480d      	ldr	r0, [pc, #52]	@ (70008e18 <prvInitialiseTaskLists+0x64>)
70008de2:	f7fd fb41 	bl	70006468 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
70008de6:	480d      	ldr	r0, [pc, #52]	@ (70008e1c <prvInitialiseTaskLists+0x68>)
70008de8:	f7fd fb3e 	bl	70006468 <vListInitialise>
    vListInitialise( &xPendingReadyList );
70008dec:	480c      	ldr	r0, [pc, #48]	@ (70008e20 <prvInitialiseTaskLists+0x6c>)
70008dee:	f7fd fb3b 	bl	70006468 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
70008df2:	480c      	ldr	r0, [pc, #48]	@ (70008e24 <prvInitialiseTaskLists+0x70>)
70008df4:	f7fd fb38 	bl	70006468 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
70008df8:	480b      	ldr	r0, [pc, #44]	@ (70008e28 <prvInitialiseTaskLists+0x74>)
70008dfa:	f7fd fb35 	bl	70006468 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
70008dfe:	4b0b      	ldr	r3, [pc, #44]	@ (70008e2c <prvInitialiseTaskLists+0x78>)
70008e00:	4a05      	ldr	r2, [pc, #20]	@ (70008e18 <prvInitialiseTaskLists+0x64>)
70008e02:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
70008e04:	4b0a      	ldr	r3, [pc, #40]	@ (70008e30 <prvInitialiseTaskLists+0x7c>)
70008e06:	4a05      	ldr	r2, [pc, #20]	@ (70008e1c <prvInitialiseTaskLists+0x68>)
70008e08:	601a      	str	r2, [r3, #0]
}
70008e0a:	bf00      	nop
70008e0c:	3708      	adds	r7, #8
70008e0e:	46bd      	mov	sp, r7
70008e10:	bd80      	pop	{r7, pc}
70008e12:	bf00      	nop
70008e14:	24004c4c 	.word	0x24004c4c
70008e18:	240050ac 	.word	0x240050ac
70008e1c:	240050c0 	.word	0x240050c0
70008e20:	240050dc 	.word	0x240050dc
70008e24:	240050f0 	.word	0x240050f0
70008e28:	24005108 	.word	0x24005108
70008e2c:	240050d4 	.word	0x240050d4
70008e30:	240050d8 	.word	0x240050d8

70008e34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
70008e34:	b580      	push	{r7, lr}
70008e36:	b082      	sub	sp, #8
70008e38:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
70008e3a:	e019      	b.n	70008e70 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
70008e3c:	f7fd fcfe 	bl	7000683c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
70008e40:	4b10      	ldr	r3, [pc, #64]	@ (70008e84 <prvCheckTasksWaitingTermination+0x50>)
70008e42:	68db      	ldr	r3, [r3, #12]
70008e44:	68db      	ldr	r3, [r3, #12]
70008e46:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
70008e48:	687b      	ldr	r3, [r7, #4]
70008e4a:	3304      	adds	r3, #4
70008e4c:	4618      	mov	r0, r3
70008e4e:	f7fd fb95 	bl	7000657c <uxListRemove>
                --uxCurrentNumberOfTasks;
70008e52:	4b0d      	ldr	r3, [pc, #52]	@ (70008e88 <prvCheckTasksWaitingTermination+0x54>)
70008e54:	681b      	ldr	r3, [r3, #0]
70008e56:	3b01      	subs	r3, #1
70008e58:	4a0b      	ldr	r2, [pc, #44]	@ (70008e88 <prvCheckTasksWaitingTermination+0x54>)
70008e5a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
70008e5c:	4b0b      	ldr	r3, [pc, #44]	@ (70008e8c <prvCheckTasksWaitingTermination+0x58>)
70008e5e:	681b      	ldr	r3, [r3, #0]
70008e60:	3b01      	subs	r3, #1
70008e62:	4a0a      	ldr	r2, [pc, #40]	@ (70008e8c <prvCheckTasksWaitingTermination+0x58>)
70008e64:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
70008e66:	f7fd fd1b 	bl	700068a0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
70008e6a:	6878      	ldr	r0, [r7, #4]
70008e6c:	f000 f810 	bl	70008e90 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
70008e70:	4b06      	ldr	r3, [pc, #24]	@ (70008e8c <prvCheckTasksWaitingTermination+0x58>)
70008e72:	681b      	ldr	r3, [r3, #0]
70008e74:	2b00      	cmp	r3, #0
70008e76:	d1e1      	bne.n	70008e3c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
70008e78:	bf00      	nop
70008e7a:	bf00      	nop
70008e7c:	3708      	adds	r7, #8
70008e7e:	46bd      	mov	sp, r7
70008e80:	bd80      	pop	{r7, pc}
70008e82:	bf00      	nop
70008e84:	240050f0 	.word	0x240050f0
70008e88:	2400511c 	.word	0x2400511c
70008e8c:	24005104 	.word	0x24005104

70008e90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
70008e90:	b580      	push	{r7, lr}
70008e92:	b084      	sub	sp, #16
70008e94:	af00      	add	r7, sp, #0
70008e96:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
70008e98:	4b18      	ldr	r3, [pc, #96]	@ (70008efc <prvDeleteTCB+0x6c>)
70008e9a:	681b      	ldr	r3, [r3, #0]
70008e9c:	3354      	adds	r3, #84	@ 0x54
70008e9e:	4618      	mov	r0, r3
70008ea0:	f00a ffbc 	bl	70013e1c <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
70008ea4:	687b      	ldr	r3, [r7, #4]
70008ea6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
70008eaa:	2b00      	cmp	r3, #0
70008eac:	d108      	bne.n	70008ec0 <prvDeleteTCB+0x30>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
70008eae:	687b      	ldr	r3, [r7, #4]
70008eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70008eb2:	4618      	mov	r0, r3
70008eb4:	f7fd f9c4 	bl	70006240 <vPortFree>
                vPortFree( pxTCB );
70008eb8:	6878      	ldr	r0, [r7, #4]
70008eba:	f7fd f9c1 	bl	70006240 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
70008ebe:	e019      	b.n	70008ef4 <prvDeleteTCB+0x64>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
70008ec0:	687b      	ldr	r3, [r7, #4]
70008ec2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
70008ec6:	2b01      	cmp	r3, #1
70008ec8:	d103      	bne.n	70008ed2 <prvDeleteTCB+0x42>
                vPortFree( pxTCB );
70008eca:	6878      	ldr	r0, [r7, #4]
70008ecc:	f7fd f9b8 	bl	70006240 <vPortFree>
    }
70008ed0:	e010      	b.n	70008ef4 <prvDeleteTCB+0x64>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
70008ed2:	687b      	ldr	r3, [r7, #4]
70008ed4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
70008ed8:	2b02      	cmp	r3, #2
70008eda:	d00b      	beq.n	70008ef4 <prvDeleteTCB+0x64>
        __asm volatile
70008edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
70008ee0:	f383 8811 	msr	BASEPRI, r3
70008ee4:	f3bf 8f6f 	isb	sy
70008ee8:	f3bf 8f4f 	dsb	sy
70008eec:	60fb      	str	r3, [r7, #12]
    }
70008eee:	bf00      	nop
70008ef0:	bf00      	nop
70008ef2:	e7fd      	b.n	70008ef0 <prvDeleteTCB+0x60>
    }
70008ef4:	bf00      	nop
70008ef6:	3710      	adds	r7, #16
70008ef8:	46bd      	mov	sp, r7
70008efa:	bd80      	pop	{r7, pc}
70008efc:	24004c48 	.word	0x24004c48

70008f00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
70008f00:	b480      	push	{r7}
70008f02:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
70008f04:	4b0a      	ldr	r3, [pc, #40]	@ (70008f30 <prvResetNextTaskUnblockTime+0x30>)
70008f06:	681b      	ldr	r3, [r3, #0]
70008f08:	681b      	ldr	r3, [r3, #0]
70008f0a:	2b00      	cmp	r3, #0
70008f0c:	d104      	bne.n	70008f18 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
70008f0e:	4b09      	ldr	r3, [pc, #36]	@ (70008f34 <prvResetNextTaskUnblockTime+0x34>)
70008f10:	f04f 32ff 	mov.w	r2, #4294967295
70008f14:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
70008f16:	e005      	b.n	70008f24 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
70008f18:	4b05      	ldr	r3, [pc, #20]	@ (70008f30 <prvResetNextTaskUnblockTime+0x30>)
70008f1a:	681b      	ldr	r3, [r3, #0]
70008f1c:	68db      	ldr	r3, [r3, #12]
70008f1e:	681b      	ldr	r3, [r3, #0]
70008f20:	4a04      	ldr	r2, [pc, #16]	@ (70008f34 <prvResetNextTaskUnblockTime+0x34>)
70008f22:	6013      	str	r3, [r2, #0]
}
70008f24:	bf00      	nop
70008f26:	46bd      	mov	sp, r7
70008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
70008f2c:	4770      	bx	lr
70008f2e:	bf00      	nop
70008f30:	240050d4 	.word	0x240050d4
70008f34:	2400513c 	.word	0x2400513c

70008f38 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
70008f38:	b480      	push	{r7}
70008f3a:	b083      	sub	sp, #12
70008f3c:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
70008f3e:	4b05      	ldr	r3, [pc, #20]	@ (70008f54 <xTaskGetCurrentTaskHandle+0x1c>)
70008f40:	681b      	ldr	r3, [r3, #0]
70008f42:	607b      	str	r3, [r7, #4]

        return xReturn;
70008f44:	687b      	ldr	r3, [r7, #4]
    }
70008f46:	4618      	mov	r0, r3
70008f48:	370c      	adds	r7, #12
70008f4a:	46bd      	mov	sp, r7
70008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
70008f50:	4770      	bx	lr
70008f52:	bf00      	nop
70008f54:	24004c48 	.word	0x24004c48

70008f58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
70008f58:	b480      	push	{r7}
70008f5a:	b083      	sub	sp, #12
70008f5c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
70008f5e:	4b0b      	ldr	r3, [pc, #44]	@ (70008f8c <xTaskGetSchedulerState+0x34>)
70008f60:	681b      	ldr	r3, [r3, #0]
70008f62:	2b00      	cmp	r3, #0
70008f64:	d102      	bne.n	70008f6c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
70008f66:	2301      	movs	r3, #1
70008f68:	607b      	str	r3, [r7, #4]
70008f6a:	e008      	b.n	70008f7e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
70008f6c:	4b08      	ldr	r3, [pc, #32]	@ (70008f90 <xTaskGetSchedulerState+0x38>)
70008f6e:	681b      	ldr	r3, [r3, #0]
70008f70:	2b00      	cmp	r3, #0
70008f72:	d102      	bne.n	70008f7a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
70008f74:	2302      	movs	r3, #2
70008f76:	607b      	str	r3, [r7, #4]
70008f78:	e001      	b.n	70008f7e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
70008f7a:	2300      	movs	r3, #0
70008f7c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
70008f7e:	687b      	ldr	r3, [r7, #4]
    }
70008f80:	4618      	mov	r0, r3
70008f82:	370c      	adds	r7, #12
70008f84:	46bd      	mov	sp, r7
70008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
70008f8a:	4770      	bx	lr
70008f8c:	24005128 	.word	0x24005128
70008f90:	24005144 	.word	0x24005144

70008f94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
70008f94:	b580      	push	{r7, lr}
70008f96:	b086      	sub	sp, #24
70008f98:	af00      	add	r7, sp, #0
70008f9a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
70008f9c:	687b      	ldr	r3, [r7, #4]
70008f9e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
70008fa0:	2300      	movs	r3, #0
70008fa2:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
70008fa4:	687b      	ldr	r3, [r7, #4]
70008fa6:	2b00      	cmp	r3, #0
70008fa8:	d079      	beq.n	7000909e <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
70008faa:	693b      	ldr	r3, [r7, #16]
70008fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008fae:	4b3e      	ldr	r3, [pc, #248]	@ (700090a8 <xTaskPriorityInherit+0x114>)
70008fb0:	681b      	ldr	r3, [r3, #0]
70008fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70008fb4:	429a      	cmp	r2, r3
70008fb6:	d269      	bcs.n	7000908c <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
70008fb8:	693b      	ldr	r3, [r7, #16]
70008fba:	699b      	ldr	r3, [r3, #24]
70008fbc:	2b00      	cmp	r3, #0
70008fbe:	db06      	blt.n	70008fce <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
70008fc0:	4b39      	ldr	r3, [pc, #228]	@ (700090a8 <xTaskPriorityInherit+0x114>)
70008fc2:	681b      	ldr	r3, [r3, #0]
70008fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70008fc6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
70008fca:	693b      	ldr	r3, [r7, #16]
70008fcc:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
70008fce:	693b      	ldr	r3, [r7, #16]
70008fd0:	6959      	ldr	r1, [r3, #20]
70008fd2:	693b      	ldr	r3, [r7, #16]
70008fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008fd6:	4613      	mov	r3, r2
70008fd8:	009b      	lsls	r3, r3, #2
70008fda:	4413      	add	r3, r2
70008fdc:	009b      	lsls	r3, r3, #2
70008fde:	4a33      	ldr	r2, [pc, #204]	@ (700090ac <xTaskPriorityInherit+0x118>)
70008fe0:	4413      	add	r3, r2
70008fe2:	4299      	cmp	r1, r3
70008fe4:	d14a      	bne.n	7000907c <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
70008fe6:	693b      	ldr	r3, [r7, #16]
70008fe8:	3304      	adds	r3, #4
70008fea:	4618      	mov	r0, r3
70008fec:	f7fd fac6 	bl	7000657c <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
70008ff0:	4b2d      	ldr	r3, [pc, #180]	@ (700090a8 <xTaskPriorityInherit+0x114>)
70008ff2:	681b      	ldr	r3, [r3, #0]
70008ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008ff6:	693b      	ldr	r3, [r7, #16]
70008ff8:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
70008ffa:	693b      	ldr	r3, [r7, #16]
70008ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70008ffe:	4b2c      	ldr	r3, [pc, #176]	@ (700090b0 <xTaskPriorityInherit+0x11c>)
70009000:	681b      	ldr	r3, [r3, #0]
70009002:	429a      	cmp	r2, r3
70009004:	d903      	bls.n	7000900e <xTaskPriorityInherit+0x7a>
70009006:	693b      	ldr	r3, [r7, #16]
70009008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000900a:	4a29      	ldr	r2, [pc, #164]	@ (700090b0 <xTaskPriorityInherit+0x11c>)
7000900c:	6013      	str	r3, [r2, #0]
7000900e:	693b      	ldr	r3, [r7, #16]
70009010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70009012:	4926      	ldr	r1, [pc, #152]	@ (700090ac <xTaskPriorityInherit+0x118>)
70009014:	4613      	mov	r3, r2
70009016:	009b      	lsls	r3, r3, #2
70009018:	4413      	add	r3, r2
7000901a:	009b      	lsls	r3, r3, #2
7000901c:	440b      	add	r3, r1
7000901e:	3304      	adds	r3, #4
70009020:	681b      	ldr	r3, [r3, #0]
70009022:	60fb      	str	r3, [r7, #12]
70009024:	693b      	ldr	r3, [r7, #16]
70009026:	68fa      	ldr	r2, [r7, #12]
70009028:	609a      	str	r2, [r3, #8]
7000902a:	68fb      	ldr	r3, [r7, #12]
7000902c:	689a      	ldr	r2, [r3, #8]
7000902e:	693b      	ldr	r3, [r7, #16]
70009030:	60da      	str	r2, [r3, #12]
70009032:	68fb      	ldr	r3, [r7, #12]
70009034:	689b      	ldr	r3, [r3, #8]
70009036:	693a      	ldr	r2, [r7, #16]
70009038:	3204      	adds	r2, #4
7000903a:	605a      	str	r2, [r3, #4]
7000903c:	693b      	ldr	r3, [r7, #16]
7000903e:	1d1a      	adds	r2, r3, #4
70009040:	68fb      	ldr	r3, [r7, #12]
70009042:	609a      	str	r2, [r3, #8]
70009044:	693b      	ldr	r3, [r7, #16]
70009046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70009048:	4613      	mov	r3, r2
7000904a:	009b      	lsls	r3, r3, #2
7000904c:	4413      	add	r3, r2
7000904e:	009b      	lsls	r3, r3, #2
70009050:	4a16      	ldr	r2, [pc, #88]	@ (700090ac <xTaskPriorityInherit+0x118>)
70009052:	441a      	add	r2, r3
70009054:	693b      	ldr	r3, [r7, #16]
70009056:	615a      	str	r2, [r3, #20]
70009058:	693b      	ldr	r3, [r7, #16]
7000905a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000905c:	4913      	ldr	r1, [pc, #76]	@ (700090ac <xTaskPriorityInherit+0x118>)
7000905e:	4613      	mov	r3, r2
70009060:	009b      	lsls	r3, r3, #2
70009062:	4413      	add	r3, r2
70009064:	009b      	lsls	r3, r3, #2
70009066:	440b      	add	r3, r1
70009068:	681b      	ldr	r3, [r3, #0]
7000906a:	1c59      	adds	r1, r3, #1
7000906c:	480f      	ldr	r0, [pc, #60]	@ (700090ac <xTaskPriorityInherit+0x118>)
7000906e:	4613      	mov	r3, r2
70009070:	009b      	lsls	r3, r3, #2
70009072:	4413      	add	r3, r2
70009074:	009b      	lsls	r3, r3, #2
70009076:	4403      	add	r3, r0
70009078:	6019      	str	r1, [r3, #0]
7000907a:	e004      	b.n	70009086 <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
7000907c:	4b0a      	ldr	r3, [pc, #40]	@ (700090a8 <xTaskPriorityInherit+0x114>)
7000907e:	681b      	ldr	r3, [r3, #0]
70009080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70009082:	693b      	ldr	r3, [r7, #16]
70009084:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
70009086:	2301      	movs	r3, #1
70009088:	617b      	str	r3, [r7, #20]
7000908a:	e008      	b.n	7000909e <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
7000908c:	693b      	ldr	r3, [r7, #16]
7000908e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
70009090:	4b05      	ldr	r3, [pc, #20]	@ (700090a8 <xTaskPriorityInherit+0x114>)
70009092:	681b      	ldr	r3, [r3, #0]
70009094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70009096:	429a      	cmp	r2, r3
70009098:	d201      	bcs.n	7000909e <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
7000909a:	2301      	movs	r3, #1
7000909c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
7000909e:	697b      	ldr	r3, [r7, #20]
    }
700090a0:	4618      	mov	r0, r3
700090a2:	3718      	adds	r7, #24
700090a4:	46bd      	mov	sp, r7
700090a6:	bd80      	pop	{r7, pc}
700090a8:	24004c48 	.word	0x24004c48
700090ac:	24004c4c 	.word	0x24004c4c
700090b0:	24005124 	.word	0x24005124

700090b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
700090b4:	b580      	push	{r7, lr}
700090b6:	b088      	sub	sp, #32
700090b8:	af00      	add	r7, sp, #0
700090ba:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
700090bc:	687b      	ldr	r3, [r7, #4]
700090be:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
700090c0:	2300      	movs	r3, #0
700090c2:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
700090c4:	687b      	ldr	r3, [r7, #4]
700090c6:	2b00      	cmp	r3, #0
700090c8:	f000 8081 	beq.w	700091ce <xTaskPriorityDisinherit+0x11a>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
700090cc:	4b42      	ldr	r3, [pc, #264]	@ (700091d8 <xTaskPriorityDisinherit+0x124>)
700090ce:	681b      	ldr	r3, [r3, #0]
700090d0:	69ba      	ldr	r2, [r7, #24]
700090d2:	429a      	cmp	r2, r3
700090d4:	d00b      	beq.n	700090ee <xTaskPriorityDisinherit+0x3a>
        __asm volatile
700090d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
700090da:	f383 8811 	msr	BASEPRI, r3
700090de:	f3bf 8f6f 	isb	sy
700090e2:	f3bf 8f4f 	dsb	sy
700090e6:	613b      	str	r3, [r7, #16]
    }
700090e8:	bf00      	nop
700090ea:	bf00      	nop
700090ec:	e7fd      	b.n	700090ea <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
700090ee:	69bb      	ldr	r3, [r7, #24]
700090f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
700090f2:	2b00      	cmp	r3, #0
700090f4:	d10b      	bne.n	7000910e <xTaskPriorityDisinherit+0x5a>
        __asm volatile
700090f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
700090fa:	f383 8811 	msr	BASEPRI, r3
700090fe:	f3bf 8f6f 	isb	sy
70009102:	f3bf 8f4f 	dsb	sy
70009106:	60fb      	str	r3, [r7, #12]
    }
70009108:	bf00      	nop
7000910a:	bf00      	nop
7000910c:	e7fd      	b.n	7000910a <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
7000910e:	69bb      	ldr	r3, [r7, #24]
70009110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70009112:	1e5a      	subs	r2, r3, #1
70009114:	69bb      	ldr	r3, [r7, #24]
70009116:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
70009118:	69bb      	ldr	r3, [r7, #24]
7000911a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000911c:	69bb      	ldr	r3, [r7, #24]
7000911e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70009120:	429a      	cmp	r2, r3
70009122:	d054      	beq.n	700091ce <xTaskPriorityDisinherit+0x11a>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
70009124:	69bb      	ldr	r3, [r7, #24]
70009126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70009128:	2b00      	cmp	r3, #0
7000912a:	d150      	bne.n	700091ce <xTaskPriorityDisinherit+0x11a>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
7000912c:	69bb      	ldr	r3, [r7, #24]
7000912e:	3304      	adds	r3, #4
70009130:	4618      	mov	r0, r3
70009132:	f7fd fa23 	bl	7000657c <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
70009136:	69bb      	ldr	r3, [r7, #24]
70009138:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
7000913a:	69bb      	ldr	r3, [r7, #24]
7000913c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
7000913e:	69bb      	ldr	r3, [r7, #24]
70009140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70009142:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
70009146:	69bb      	ldr	r3, [r7, #24]
70009148:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
7000914a:	69bb      	ldr	r3, [r7, #24]
7000914c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000914e:	4b23      	ldr	r3, [pc, #140]	@ (700091dc <xTaskPriorityDisinherit+0x128>)
70009150:	681b      	ldr	r3, [r3, #0]
70009152:	429a      	cmp	r2, r3
70009154:	d903      	bls.n	7000915e <xTaskPriorityDisinherit+0xaa>
70009156:	69bb      	ldr	r3, [r7, #24]
70009158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000915a:	4a20      	ldr	r2, [pc, #128]	@ (700091dc <xTaskPriorityDisinherit+0x128>)
7000915c:	6013      	str	r3, [r2, #0]
7000915e:	69bb      	ldr	r3, [r7, #24]
70009160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70009162:	491f      	ldr	r1, [pc, #124]	@ (700091e0 <xTaskPriorityDisinherit+0x12c>)
70009164:	4613      	mov	r3, r2
70009166:	009b      	lsls	r3, r3, #2
70009168:	4413      	add	r3, r2
7000916a:	009b      	lsls	r3, r3, #2
7000916c:	440b      	add	r3, r1
7000916e:	3304      	adds	r3, #4
70009170:	681b      	ldr	r3, [r3, #0]
70009172:	617b      	str	r3, [r7, #20]
70009174:	69bb      	ldr	r3, [r7, #24]
70009176:	697a      	ldr	r2, [r7, #20]
70009178:	609a      	str	r2, [r3, #8]
7000917a:	697b      	ldr	r3, [r7, #20]
7000917c:	689a      	ldr	r2, [r3, #8]
7000917e:	69bb      	ldr	r3, [r7, #24]
70009180:	60da      	str	r2, [r3, #12]
70009182:	697b      	ldr	r3, [r7, #20]
70009184:	689b      	ldr	r3, [r3, #8]
70009186:	69ba      	ldr	r2, [r7, #24]
70009188:	3204      	adds	r2, #4
7000918a:	605a      	str	r2, [r3, #4]
7000918c:	69bb      	ldr	r3, [r7, #24]
7000918e:	1d1a      	adds	r2, r3, #4
70009190:	697b      	ldr	r3, [r7, #20]
70009192:	609a      	str	r2, [r3, #8]
70009194:	69bb      	ldr	r3, [r7, #24]
70009196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
70009198:	4613      	mov	r3, r2
7000919a:	009b      	lsls	r3, r3, #2
7000919c:	4413      	add	r3, r2
7000919e:	009b      	lsls	r3, r3, #2
700091a0:	4a0f      	ldr	r2, [pc, #60]	@ (700091e0 <xTaskPriorityDisinherit+0x12c>)
700091a2:	441a      	add	r2, r3
700091a4:	69bb      	ldr	r3, [r7, #24]
700091a6:	615a      	str	r2, [r3, #20]
700091a8:	69bb      	ldr	r3, [r7, #24]
700091aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700091ac:	490c      	ldr	r1, [pc, #48]	@ (700091e0 <xTaskPriorityDisinherit+0x12c>)
700091ae:	4613      	mov	r3, r2
700091b0:	009b      	lsls	r3, r3, #2
700091b2:	4413      	add	r3, r2
700091b4:	009b      	lsls	r3, r3, #2
700091b6:	440b      	add	r3, r1
700091b8:	681b      	ldr	r3, [r3, #0]
700091ba:	1c59      	adds	r1, r3, #1
700091bc:	4808      	ldr	r0, [pc, #32]	@ (700091e0 <xTaskPriorityDisinherit+0x12c>)
700091be:	4613      	mov	r3, r2
700091c0:	009b      	lsls	r3, r3, #2
700091c2:	4413      	add	r3, r2
700091c4:	009b      	lsls	r3, r3, #2
700091c6:	4403      	add	r3, r0
700091c8:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
700091ca:	2301      	movs	r3, #1
700091cc:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
700091ce:	69fb      	ldr	r3, [r7, #28]
    }
700091d0:	4618      	mov	r0, r3
700091d2:	3720      	adds	r7, #32
700091d4:	46bd      	mov	sp, r7
700091d6:	bd80      	pop	{r7, pc}
700091d8:	24004c48 	.word	0x24004c48
700091dc:	24005124 	.word	0x24005124
700091e0:	24004c4c 	.word	0x24004c4c

700091e4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
700091e4:	b580      	push	{r7, lr}
700091e6:	b08a      	sub	sp, #40	@ 0x28
700091e8:	af00      	add	r7, sp, #0
700091ea:	6078      	str	r0, [r7, #4]
700091ec:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
700091ee:	687b      	ldr	r3, [r7, #4]
700091f0:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
700091f2:	2301      	movs	r3, #1
700091f4:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
700091f6:	687b      	ldr	r3, [r7, #4]
700091f8:	2b00      	cmp	r3, #0
700091fa:	f000 8095 	beq.w	70009328 <vTaskPriorityDisinheritAfterTimeout+0x144>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
700091fe:	6a3b      	ldr	r3, [r7, #32]
70009200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70009202:	2b00      	cmp	r3, #0
70009204:	d10b      	bne.n	7000921e <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
70009206:	f04f 0350 	mov.w	r3, #80	@ 0x50
7000920a:	f383 8811 	msr	BASEPRI, r3
7000920e:	f3bf 8f6f 	isb	sy
70009212:	f3bf 8f4f 	dsb	sy
70009216:	613b      	str	r3, [r7, #16]
    }
70009218:	bf00      	nop
7000921a:	bf00      	nop
7000921c:	e7fd      	b.n	7000921a <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
7000921e:	6a3b      	ldr	r3, [r7, #32]
70009220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70009222:	683a      	ldr	r2, [r7, #0]
70009224:	429a      	cmp	r2, r3
70009226:	d902      	bls.n	7000922e <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
70009228:	683b      	ldr	r3, [r7, #0]
7000922a:	627b      	str	r3, [r7, #36]	@ 0x24
7000922c:	e002      	b.n	70009234 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
7000922e:	6a3b      	ldr	r3, [r7, #32]
70009230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70009232:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
70009234:	6a3b      	ldr	r3, [r7, #32]
70009236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70009238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
7000923a:	429a      	cmp	r2, r3
7000923c:	d074      	beq.n	70009328 <vTaskPriorityDisinheritAfterTimeout+0x144>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
7000923e:	6a3b      	ldr	r3, [r7, #32]
70009240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70009242:	69fa      	ldr	r2, [r7, #28]
70009244:	429a      	cmp	r2, r3
70009246:	d16f      	bne.n	70009328 <vTaskPriorityDisinheritAfterTimeout+0x144>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
70009248:	4b39      	ldr	r3, [pc, #228]	@ (70009330 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
7000924a:	681b      	ldr	r3, [r3, #0]
7000924c:	6a3a      	ldr	r2, [r7, #32]
7000924e:	429a      	cmp	r2, r3
70009250:	d10b      	bne.n	7000926a <vTaskPriorityDisinheritAfterTimeout+0x86>
        __asm volatile
70009252:	f04f 0350 	mov.w	r3, #80	@ 0x50
70009256:	f383 8811 	msr	BASEPRI, r3
7000925a:	f3bf 8f6f 	isb	sy
7000925e:	f3bf 8f4f 	dsb	sy
70009262:	60fb      	str	r3, [r7, #12]
    }
70009264:	bf00      	nop
70009266:	bf00      	nop
70009268:	e7fd      	b.n	70009266 <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
7000926a:	6a3b      	ldr	r3, [r7, #32]
7000926c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000926e:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
70009270:	6a3b      	ldr	r3, [r7, #32]
70009272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70009274:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
70009276:	6a3b      	ldr	r3, [r7, #32]
70009278:	699b      	ldr	r3, [r3, #24]
7000927a:	2b00      	cmp	r3, #0
7000927c:	db04      	blt.n	70009288 <vTaskPriorityDisinheritAfterTimeout+0xa4>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
7000927e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70009280:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
70009284:	6a3b      	ldr	r3, [r7, #32]
70009286:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
70009288:	6a3b      	ldr	r3, [r7, #32]
7000928a:	6959      	ldr	r1, [r3, #20]
7000928c:	69ba      	ldr	r2, [r7, #24]
7000928e:	4613      	mov	r3, r2
70009290:	009b      	lsls	r3, r3, #2
70009292:	4413      	add	r3, r2
70009294:	009b      	lsls	r3, r3, #2
70009296:	4a27      	ldr	r2, [pc, #156]	@ (70009334 <vTaskPriorityDisinheritAfterTimeout+0x150>)
70009298:	4413      	add	r3, r2
7000929a:	4299      	cmp	r1, r3
7000929c:	d144      	bne.n	70009328 <vTaskPriorityDisinheritAfterTimeout+0x144>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
7000929e:	6a3b      	ldr	r3, [r7, #32]
700092a0:	3304      	adds	r3, #4
700092a2:	4618      	mov	r0, r3
700092a4:	f7fd f96a 	bl	7000657c <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
700092a8:	6a3b      	ldr	r3, [r7, #32]
700092aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700092ac:	4b22      	ldr	r3, [pc, #136]	@ (70009338 <vTaskPriorityDisinheritAfterTimeout+0x154>)
700092ae:	681b      	ldr	r3, [r3, #0]
700092b0:	429a      	cmp	r2, r3
700092b2:	d903      	bls.n	700092bc <vTaskPriorityDisinheritAfterTimeout+0xd8>
700092b4:	6a3b      	ldr	r3, [r7, #32]
700092b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700092b8:	4a1f      	ldr	r2, [pc, #124]	@ (70009338 <vTaskPriorityDisinheritAfterTimeout+0x154>)
700092ba:	6013      	str	r3, [r2, #0]
700092bc:	6a3b      	ldr	r3, [r7, #32]
700092be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700092c0:	491c      	ldr	r1, [pc, #112]	@ (70009334 <vTaskPriorityDisinheritAfterTimeout+0x150>)
700092c2:	4613      	mov	r3, r2
700092c4:	009b      	lsls	r3, r3, #2
700092c6:	4413      	add	r3, r2
700092c8:	009b      	lsls	r3, r3, #2
700092ca:	440b      	add	r3, r1
700092cc:	3304      	adds	r3, #4
700092ce:	681b      	ldr	r3, [r3, #0]
700092d0:	617b      	str	r3, [r7, #20]
700092d2:	6a3b      	ldr	r3, [r7, #32]
700092d4:	697a      	ldr	r2, [r7, #20]
700092d6:	609a      	str	r2, [r3, #8]
700092d8:	697b      	ldr	r3, [r7, #20]
700092da:	689a      	ldr	r2, [r3, #8]
700092dc:	6a3b      	ldr	r3, [r7, #32]
700092de:	60da      	str	r2, [r3, #12]
700092e0:	697b      	ldr	r3, [r7, #20]
700092e2:	689b      	ldr	r3, [r3, #8]
700092e4:	6a3a      	ldr	r2, [r7, #32]
700092e6:	3204      	adds	r2, #4
700092e8:	605a      	str	r2, [r3, #4]
700092ea:	6a3b      	ldr	r3, [r7, #32]
700092ec:	1d1a      	adds	r2, r3, #4
700092ee:	697b      	ldr	r3, [r7, #20]
700092f0:	609a      	str	r2, [r3, #8]
700092f2:	6a3b      	ldr	r3, [r7, #32]
700092f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
700092f6:	4613      	mov	r3, r2
700092f8:	009b      	lsls	r3, r3, #2
700092fa:	4413      	add	r3, r2
700092fc:	009b      	lsls	r3, r3, #2
700092fe:	4a0d      	ldr	r2, [pc, #52]	@ (70009334 <vTaskPriorityDisinheritAfterTimeout+0x150>)
70009300:	441a      	add	r2, r3
70009302:	6a3b      	ldr	r3, [r7, #32]
70009304:	615a      	str	r2, [r3, #20]
70009306:	6a3b      	ldr	r3, [r7, #32]
70009308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000930a:	490a      	ldr	r1, [pc, #40]	@ (70009334 <vTaskPriorityDisinheritAfterTimeout+0x150>)
7000930c:	4613      	mov	r3, r2
7000930e:	009b      	lsls	r3, r3, #2
70009310:	4413      	add	r3, r2
70009312:	009b      	lsls	r3, r3, #2
70009314:	440b      	add	r3, r1
70009316:	681b      	ldr	r3, [r3, #0]
70009318:	1c59      	adds	r1, r3, #1
7000931a:	4806      	ldr	r0, [pc, #24]	@ (70009334 <vTaskPriorityDisinheritAfterTimeout+0x150>)
7000931c:	4613      	mov	r3, r2
7000931e:	009b      	lsls	r3, r3, #2
70009320:	4413      	add	r3, r2
70009322:	009b      	lsls	r3, r3, #2
70009324:	4403      	add	r3, r0
70009326:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
70009328:	bf00      	nop
7000932a:	3728      	adds	r7, #40	@ 0x28
7000932c:	46bd      	mov	sp, r7
7000932e:	bd80      	pop	{r7, pc}
70009330:	24004c48 	.word	0x24004c48
70009334:	24004c4c 	.word	0x24004c4c
70009338:	24005124 	.word	0x24005124

7000933c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
7000933c:	b480      	push	{r7}
7000933e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
70009340:	4b07      	ldr	r3, [pc, #28]	@ (70009360 <pvTaskIncrementMutexHeldCount+0x24>)
70009342:	681b      	ldr	r3, [r3, #0]
70009344:	2b00      	cmp	r3, #0
70009346:	d004      	beq.n	70009352 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
70009348:	4b05      	ldr	r3, [pc, #20]	@ (70009360 <pvTaskIncrementMutexHeldCount+0x24>)
7000934a:	681b      	ldr	r3, [r3, #0]
7000934c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
7000934e:	3201      	adds	r2, #1
70009350:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
70009352:	4b03      	ldr	r3, [pc, #12]	@ (70009360 <pvTaskIncrementMutexHeldCount+0x24>)
70009354:	681b      	ldr	r3, [r3, #0]
    }
70009356:	4618      	mov	r0, r3
70009358:	46bd      	mov	sp, r7
7000935a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000935e:	4770      	bx	lr
70009360:	24004c48 	.word	0x24004c48

70009364 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
70009364:	b580      	push	{r7, lr}
70009366:	b086      	sub	sp, #24
70009368:	af00      	add	r7, sp, #0
7000936a:	6078      	str	r0, [r7, #4]
7000936c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
7000936e:	4b2e      	ldr	r3, [pc, #184]	@ (70009428 <prvAddCurrentTaskToDelayedList+0xc4>)
70009370:	681b      	ldr	r3, [r3, #0]
70009372:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
70009374:	4b2d      	ldr	r3, [pc, #180]	@ (7000942c <prvAddCurrentTaskToDelayedList+0xc8>)
70009376:	681b      	ldr	r3, [r3, #0]
70009378:	3304      	adds	r3, #4
7000937a:	4618      	mov	r0, r3
7000937c:	f7fd f8fe 	bl	7000657c <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
70009380:	687b      	ldr	r3, [r7, #4]
70009382:	f1b3 3fff 	cmp.w	r3, #4294967295
70009386:	d124      	bne.n	700093d2 <prvAddCurrentTaskToDelayedList+0x6e>
70009388:	683b      	ldr	r3, [r7, #0]
7000938a:	2b00      	cmp	r3, #0
7000938c:	d021      	beq.n	700093d2 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
7000938e:	4b28      	ldr	r3, [pc, #160]	@ (70009430 <prvAddCurrentTaskToDelayedList+0xcc>)
70009390:	685b      	ldr	r3, [r3, #4]
70009392:	613b      	str	r3, [r7, #16]
70009394:	4b25      	ldr	r3, [pc, #148]	@ (7000942c <prvAddCurrentTaskToDelayedList+0xc8>)
70009396:	681b      	ldr	r3, [r3, #0]
70009398:	693a      	ldr	r2, [r7, #16]
7000939a:	609a      	str	r2, [r3, #8]
7000939c:	4b23      	ldr	r3, [pc, #140]	@ (7000942c <prvAddCurrentTaskToDelayedList+0xc8>)
7000939e:	681b      	ldr	r3, [r3, #0]
700093a0:	693a      	ldr	r2, [r7, #16]
700093a2:	6892      	ldr	r2, [r2, #8]
700093a4:	60da      	str	r2, [r3, #12]
700093a6:	4b21      	ldr	r3, [pc, #132]	@ (7000942c <prvAddCurrentTaskToDelayedList+0xc8>)
700093a8:	681a      	ldr	r2, [r3, #0]
700093aa:	693b      	ldr	r3, [r7, #16]
700093ac:	689b      	ldr	r3, [r3, #8]
700093ae:	3204      	adds	r2, #4
700093b0:	605a      	str	r2, [r3, #4]
700093b2:	4b1e      	ldr	r3, [pc, #120]	@ (7000942c <prvAddCurrentTaskToDelayedList+0xc8>)
700093b4:	681b      	ldr	r3, [r3, #0]
700093b6:	1d1a      	adds	r2, r3, #4
700093b8:	693b      	ldr	r3, [r7, #16]
700093ba:	609a      	str	r2, [r3, #8]
700093bc:	4b1b      	ldr	r3, [pc, #108]	@ (7000942c <prvAddCurrentTaskToDelayedList+0xc8>)
700093be:	681b      	ldr	r3, [r3, #0]
700093c0:	4a1b      	ldr	r2, [pc, #108]	@ (70009430 <prvAddCurrentTaskToDelayedList+0xcc>)
700093c2:	615a      	str	r2, [r3, #20]
700093c4:	4b1a      	ldr	r3, [pc, #104]	@ (70009430 <prvAddCurrentTaskToDelayedList+0xcc>)
700093c6:	681b      	ldr	r3, [r3, #0]
700093c8:	3301      	adds	r3, #1
700093ca:	4a19      	ldr	r2, [pc, #100]	@ (70009430 <prvAddCurrentTaskToDelayedList+0xcc>)
700093cc:	6013      	str	r3, [r2, #0]
700093ce:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
700093d0:	e026      	b.n	70009420 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
700093d2:	697a      	ldr	r2, [r7, #20]
700093d4:	687b      	ldr	r3, [r7, #4]
700093d6:	4413      	add	r3, r2
700093d8:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
700093da:	4b14      	ldr	r3, [pc, #80]	@ (7000942c <prvAddCurrentTaskToDelayedList+0xc8>)
700093dc:	681b      	ldr	r3, [r3, #0]
700093de:	68fa      	ldr	r2, [r7, #12]
700093e0:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
700093e2:	68fa      	ldr	r2, [r7, #12]
700093e4:	697b      	ldr	r3, [r7, #20]
700093e6:	429a      	cmp	r2, r3
700093e8:	d209      	bcs.n	700093fe <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
700093ea:	4b12      	ldr	r3, [pc, #72]	@ (70009434 <prvAddCurrentTaskToDelayedList+0xd0>)
700093ec:	681a      	ldr	r2, [r3, #0]
700093ee:	4b0f      	ldr	r3, [pc, #60]	@ (7000942c <prvAddCurrentTaskToDelayedList+0xc8>)
700093f0:	681b      	ldr	r3, [r3, #0]
700093f2:	3304      	adds	r3, #4
700093f4:	4619      	mov	r1, r3
700093f6:	4610      	mov	r0, r2
700093f8:	f7fd f887 	bl	7000650a <vListInsert>
}
700093fc:	e010      	b.n	70009420 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
700093fe:	4b0e      	ldr	r3, [pc, #56]	@ (70009438 <prvAddCurrentTaskToDelayedList+0xd4>)
70009400:	681a      	ldr	r2, [r3, #0]
70009402:	4b0a      	ldr	r3, [pc, #40]	@ (7000942c <prvAddCurrentTaskToDelayedList+0xc8>)
70009404:	681b      	ldr	r3, [r3, #0]
70009406:	3304      	adds	r3, #4
70009408:	4619      	mov	r1, r3
7000940a:	4610      	mov	r0, r2
7000940c:	f7fd f87d 	bl	7000650a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
70009410:	4b0a      	ldr	r3, [pc, #40]	@ (7000943c <prvAddCurrentTaskToDelayedList+0xd8>)
70009412:	681b      	ldr	r3, [r3, #0]
70009414:	68fa      	ldr	r2, [r7, #12]
70009416:	429a      	cmp	r2, r3
70009418:	d202      	bcs.n	70009420 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
7000941a:	4a08      	ldr	r2, [pc, #32]	@ (7000943c <prvAddCurrentTaskToDelayedList+0xd8>)
7000941c:	68fb      	ldr	r3, [r7, #12]
7000941e:	6013      	str	r3, [r2, #0]
}
70009420:	bf00      	nop
70009422:	3718      	adds	r7, #24
70009424:	46bd      	mov	sp, r7
70009426:	bd80      	pop	{r7, pc}
70009428:	24005120 	.word	0x24005120
7000942c:	24004c48 	.word	0x24004c48
70009430:	24005108 	.word	0x24005108
70009434:	240050d8 	.word	0x240050d8
70009438:	240050d4 	.word	0x240050d4
7000943c:	2400513c 	.word	0x2400513c

70009440 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
70009440:	b580      	push	{r7, lr}
70009442:	b08a      	sub	sp, #40	@ 0x28
70009444:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
70009446:	2300      	movs	r3, #0
70009448:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
7000944a:	f000 fa81 	bl	70009950 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
7000944e:	4b1d      	ldr	r3, [pc, #116]	@ (700094c4 <xTimerCreateTimerTask+0x84>)
70009450:	681b      	ldr	r3, [r3, #0]
70009452:	2b00      	cmp	r3, #0
70009454:	d021      	beq.n	7000949a <xTimerCreateTimerTask+0x5a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
70009456:	2300      	movs	r3, #0
70009458:	60fb      	str	r3, [r7, #12]
                StackType_t * pxTimerTaskStackBuffer = NULL;
7000945a:	2300      	movs	r3, #0
7000945c:	60bb      	str	r3, [r7, #8]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
7000945e:	1d3a      	adds	r2, r7, #4
70009460:	f107 0108 	add.w	r1, r7, #8
70009464:	f107 030c 	add.w	r3, r7, #12
70009468:	4618      	mov	r0, r3
7000946a:	f7fc fe13 	bl	70006094 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
7000946e:	6879      	ldr	r1, [r7, #4]
70009470:	68bb      	ldr	r3, [r7, #8]
70009472:	68fa      	ldr	r2, [r7, #12]
70009474:	9202      	str	r2, [sp, #8]
70009476:	9301      	str	r3, [sp, #4]
70009478:	2302      	movs	r3, #2
7000947a:	9300      	str	r3, [sp, #0]
7000947c:	2300      	movs	r3, #0
7000947e:	460a      	mov	r2, r1
70009480:	4911      	ldr	r1, [pc, #68]	@ (700094c8 <xTimerCreateTimerTask+0x88>)
70009482:	4812      	ldr	r0, [pc, #72]	@ (700094cc <xTimerCreateTimerTask+0x8c>)
70009484:	f7fe fc6e 	bl	70007d64 <xTaskCreateStatic>
70009488:	4603      	mov	r3, r0
7000948a:	4a11      	ldr	r2, [pc, #68]	@ (700094d0 <xTimerCreateTimerTask+0x90>)
7000948c:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
7000948e:	4b10      	ldr	r3, [pc, #64]	@ (700094d0 <xTimerCreateTimerTask+0x90>)
70009490:	681b      	ldr	r3, [r3, #0]
70009492:	2b00      	cmp	r3, #0
70009494:	d001      	beq.n	7000949a <xTimerCreateTimerTask+0x5a>
                {
                    xReturn = pdPASS;
70009496:	2301      	movs	r3, #1
70009498:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
7000949a:	697b      	ldr	r3, [r7, #20]
7000949c:	2b00      	cmp	r3, #0
7000949e:	d10b      	bne.n	700094b8 <xTimerCreateTimerTask+0x78>
        __asm volatile
700094a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
700094a4:	f383 8811 	msr	BASEPRI, r3
700094a8:	f3bf 8f6f 	isb	sy
700094ac:	f3bf 8f4f 	dsb	sy
700094b0:	613b      	str	r3, [r7, #16]
    }
700094b2:	bf00      	nop
700094b4:	bf00      	nop
700094b6:	e7fd      	b.n	700094b4 <xTimerCreateTimerTask+0x74>
        return xReturn;
700094b8:	697b      	ldr	r3, [r7, #20]
    }
700094ba:	4618      	mov	r0, r3
700094bc:	3718      	adds	r7, #24
700094be:	46bd      	mov	sp, r7
700094c0:	bd80      	pop	{r7, pc}
700094c2:	bf00      	nop
700094c4:	24005178 	.word	0x24005178
700094c8:	70014c84 	.word	0x70014c84
700094cc:	70009579 	.word	0x70009579
700094d0:	2400517c 	.word	0x2400517c

700094d4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
700094d4:	b580      	push	{r7, lr}
700094d6:	b084      	sub	sp, #16
700094d8:	af00      	add	r7, sp, #0
700094da:	60f8      	str	r0, [r7, #12]
700094dc:	60b9      	str	r1, [r7, #8]
700094de:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
700094e0:	e008      	b.n	700094f4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
700094e2:	68fb      	ldr	r3, [r7, #12]
700094e4:	699b      	ldr	r3, [r3, #24]
700094e6:	68ba      	ldr	r2, [r7, #8]
700094e8:	4413      	add	r3, r2
700094ea:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
700094ec:	68fb      	ldr	r3, [r7, #12]
700094ee:	6a1b      	ldr	r3, [r3, #32]
700094f0:	68f8      	ldr	r0, [r7, #12]
700094f2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
700094f4:	68fb      	ldr	r3, [r7, #12]
700094f6:	699a      	ldr	r2, [r3, #24]
700094f8:	68bb      	ldr	r3, [r7, #8]
700094fa:	18d1      	adds	r1, r2, r3
700094fc:	68bb      	ldr	r3, [r7, #8]
700094fe:	687a      	ldr	r2, [r7, #4]
70009500:	68f8      	ldr	r0, [r7, #12]
70009502:	f000 f8df 	bl	700096c4 <prvInsertTimerInActiveList>
70009506:	4603      	mov	r3, r0
70009508:	2b00      	cmp	r3, #0
7000950a:	d1ea      	bne.n	700094e2 <prvReloadTimer+0xe>
        }
    }
7000950c:	bf00      	nop
7000950e:	bf00      	nop
70009510:	3710      	adds	r7, #16
70009512:	46bd      	mov	sp, r7
70009514:	bd80      	pop	{r7, pc}
	...

70009518 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
70009518:	b580      	push	{r7, lr}
7000951a:	b084      	sub	sp, #16
7000951c:	af00      	add	r7, sp, #0
7000951e:	6078      	str	r0, [r7, #4]
70009520:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
70009522:	4b14      	ldr	r3, [pc, #80]	@ (70009574 <prvProcessExpiredTimer+0x5c>)
70009524:	681b      	ldr	r3, [r3, #0]
70009526:	68db      	ldr	r3, [r3, #12]
70009528:	68db      	ldr	r3, [r3, #12]
7000952a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
7000952c:	68fb      	ldr	r3, [r7, #12]
7000952e:	3304      	adds	r3, #4
70009530:	4618      	mov	r0, r3
70009532:	f7fd f823 	bl	7000657c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
70009536:	68fb      	ldr	r3, [r7, #12]
70009538:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
7000953c:	f003 0304 	and.w	r3, r3, #4
70009540:	2b00      	cmp	r3, #0
70009542:	d005      	beq.n	70009550 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
70009544:	683a      	ldr	r2, [r7, #0]
70009546:	6879      	ldr	r1, [r7, #4]
70009548:	68f8      	ldr	r0, [r7, #12]
7000954a:	f7ff ffc3 	bl	700094d4 <prvReloadTimer>
7000954e:	e008      	b.n	70009562 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
70009550:	68fb      	ldr	r3, [r7, #12]
70009552:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
70009556:	f023 0301 	bic.w	r3, r3, #1
7000955a:	b2da      	uxtb	r2, r3
7000955c:	68fb      	ldr	r3, [r7, #12]
7000955e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
70009562:	68fb      	ldr	r3, [r7, #12]
70009564:	6a1b      	ldr	r3, [r3, #32]
70009566:	68f8      	ldr	r0, [r7, #12]
70009568:	4798      	blx	r3
    }
7000956a:	bf00      	nop
7000956c:	3710      	adds	r7, #16
7000956e:	46bd      	mov	sp, r7
70009570:	bd80      	pop	{r7, pc}
70009572:	bf00      	nop
70009574:	24005170 	.word	0x24005170

70009578 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
70009578:	b580      	push	{r7, lr}
7000957a:	b084      	sub	sp, #16
7000957c:	af00      	add	r7, sp, #0
7000957e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
70009580:	f107 0308 	add.w	r3, r7, #8
70009584:	4618      	mov	r0, r3
70009586:	f000 f859 	bl	7000963c <prvGetNextExpireTime>
7000958a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
7000958c:	68bb      	ldr	r3, [r7, #8]
7000958e:	4619      	mov	r1, r3
70009590:	68f8      	ldr	r0, [r7, #12]
70009592:	f000 f805 	bl	700095a0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
70009596:	f000 f8d7 	bl	70009748 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
7000959a:	bf00      	nop
7000959c:	e7f0      	b.n	70009580 <prvTimerTask+0x8>
	...

700095a0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
700095a0:	b580      	push	{r7, lr}
700095a2:	b084      	sub	sp, #16
700095a4:	af00      	add	r7, sp, #0
700095a6:	6078      	str	r0, [r7, #4]
700095a8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
700095aa:	f7fe ff65 	bl	70008478 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
700095ae:	f107 0308 	add.w	r3, r7, #8
700095b2:	4618      	mov	r0, r3
700095b4:	f000 f866 	bl	70009684 <prvSampleTimeNow>
700095b8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
700095ba:	68bb      	ldr	r3, [r7, #8]
700095bc:	2b00      	cmp	r3, #0
700095be:	d130      	bne.n	70009622 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
700095c0:	683b      	ldr	r3, [r7, #0]
700095c2:	2b00      	cmp	r3, #0
700095c4:	d10a      	bne.n	700095dc <prvProcessTimerOrBlockTask+0x3c>
700095c6:	687a      	ldr	r2, [r7, #4]
700095c8:	68fb      	ldr	r3, [r7, #12]
700095ca:	429a      	cmp	r2, r3
700095cc:	d806      	bhi.n	700095dc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
700095ce:	f7fe ff61 	bl	70008494 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
700095d2:	68f9      	ldr	r1, [r7, #12]
700095d4:	6878      	ldr	r0, [r7, #4]
700095d6:	f7ff ff9f 	bl	70009518 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
700095da:	e024      	b.n	70009626 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
700095dc:	683b      	ldr	r3, [r7, #0]
700095de:	2b00      	cmp	r3, #0
700095e0:	d008      	beq.n	700095f4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
700095e2:	4b13      	ldr	r3, [pc, #76]	@ (70009630 <prvProcessTimerOrBlockTask+0x90>)
700095e4:	681b      	ldr	r3, [r3, #0]
700095e6:	681b      	ldr	r3, [r3, #0]
700095e8:	2b00      	cmp	r3, #0
700095ea:	d101      	bne.n	700095f0 <prvProcessTimerOrBlockTask+0x50>
700095ec:	2301      	movs	r3, #1
700095ee:	e000      	b.n	700095f2 <prvProcessTimerOrBlockTask+0x52>
700095f0:	2300      	movs	r3, #0
700095f2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
700095f4:	4b0f      	ldr	r3, [pc, #60]	@ (70009634 <prvProcessTimerOrBlockTask+0x94>)
700095f6:	6818      	ldr	r0, [r3, #0]
700095f8:	687a      	ldr	r2, [r7, #4]
700095fa:	68fb      	ldr	r3, [r7, #12]
700095fc:	1ad3      	subs	r3, r2, r3
700095fe:	683a      	ldr	r2, [r7, #0]
70009600:	4619      	mov	r1, r3
70009602:	f7fe fb7b 	bl	70007cfc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
70009606:	f7fe ff45 	bl	70008494 <xTaskResumeAll>
7000960a:	4603      	mov	r3, r0
7000960c:	2b00      	cmp	r3, #0
7000960e:	d10a      	bne.n	70009626 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
70009610:	4b09      	ldr	r3, [pc, #36]	@ (70009638 <prvProcessTimerOrBlockTask+0x98>)
70009612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
70009616:	601a      	str	r2, [r3, #0]
70009618:	f3bf 8f4f 	dsb	sy
7000961c:	f3bf 8f6f 	isb	sy
    }
70009620:	e001      	b.n	70009626 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
70009622:	f7fe ff37 	bl	70008494 <xTaskResumeAll>
    }
70009626:	bf00      	nop
70009628:	3710      	adds	r7, #16
7000962a:	46bd      	mov	sp, r7
7000962c:	bd80      	pop	{r7, pc}
7000962e:	bf00      	nop
70009630:	24005174 	.word	0x24005174
70009634:	24005178 	.word	0x24005178
70009638:	e000ed04 	.word	0xe000ed04

7000963c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
7000963c:	b480      	push	{r7}
7000963e:	b085      	sub	sp, #20
70009640:	af00      	add	r7, sp, #0
70009642:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
70009644:	4b0e      	ldr	r3, [pc, #56]	@ (70009680 <prvGetNextExpireTime+0x44>)
70009646:	681b      	ldr	r3, [r3, #0]
70009648:	681b      	ldr	r3, [r3, #0]
7000964a:	2b00      	cmp	r3, #0
7000964c:	d101      	bne.n	70009652 <prvGetNextExpireTime+0x16>
7000964e:	2201      	movs	r2, #1
70009650:	e000      	b.n	70009654 <prvGetNextExpireTime+0x18>
70009652:	2200      	movs	r2, #0
70009654:	687b      	ldr	r3, [r7, #4]
70009656:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
70009658:	687b      	ldr	r3, [r7, #4]
7000965a:	681b      	ldr	r3, [r3, #0]
7000965c:	2b00      	cmp	r3, #0
7000965e:	d105      	bne.n	7000966c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
70009660:	4b07      	ldr	r3, [pc, #28]	@ (70009680 <prvGetNextExpireTime+0x44>)
70009662:	681b      	ldr	r3, [r3, #0]
70009664:	68db      	ldr	r3, [r3, #12]
70009666:	681b      	ldr	r3, [r3, #0]
70009668:	60fb      	str	r3, [r7, #12]
7000966a:	e001      	b.n	70009670 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
7000966c:	2300      	movs	r3, #0
7000966e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
70009670:	68fb      	ldr	r3, [r7, #12]
    }
70009672:	4618      	mov	r0, r3
70009674:	3714      	adds	r7, #20
70009676:	46bd      	mov	sp, r7
70009678:	f85d 7b04 	ldr.w	r7, [sp], #4
7000967c:	4770      	bx	lr
7000967e:	bf00      	nop
70009680:	24005170 	.word	0x24005170

70009684 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
70009684:	b580      	push	{r7, lr}
70009686:	b084      	sub	sp, #16
70009688:	af00      	add	r7, sp, #0
7000968a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
7000968c:	f7ff f800 	bl	70008690 <xTaskGetTickCount>
70009690:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
70009692:	4b0b      	ldr	r3, [pc, #44]	@ (700096c0 <prvSampleTimeNow+0x3c>)
70009694:	681b      	ldr	r3, [r3, #0]
70009696:	68fa      	ldr	r2, [r7, #12]
70009698:	429a      	cmp	r2, r3
7000969a:	d205      	bcs.n	700096a8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
7000969c:	f000 f932 	bl	70009904 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
700096a0:	687b      	ldr	r3, [r7, #4]
700096a2:	2201      	movs	r2, #1
700096a4:	601a      	str	r2, [r3, #0]
700096a6:	e002      	b.n	700096ae <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
700096a8:	687b      	ldr	r3, [r7, #4]
700096aa:	2200      	movs	r2, #0
700096ac:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
700096ae:	4a04      	ldr	r2, [pc, #16]	@ (700096c0 <prvSampleTimeNow+0x3c>)
700096b0:	68fb      	ldr	r3, [r7, #12]
700096b2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
700096b4:	68fb      	ldr	r3, [r7, #12]
    }
700096b6:	4618      	mov	r0, r3
700096b8:	3710      	adds	r7, #16
700096ba:	46bd      	mov	sp, r7
700096bc:	bd80      	pop	{r7, pc}
700096be:	bf00      	nop
700096c0:	24005180 	.word	0x24005180

700096c4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
700096c4:	b580      	push	{r7, lr}
700096c6:	b086      	sub	sp, #24
700096c8:	af00      	add	r7, sp, #0
700096ca:	60f8      	str	r0, [r7, #12]
700096cc:	60b9      	str	r1, [r7, #8]
700096ce:	607a      	str	r2, [r7, #4]
700096d0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
700096d2:	2300      	movs	r3, #0
700096d4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
700096d6:	68fb      	ldr	r3, [r7, #12]
700096d8:	68ba      	ldr	r2, [r7, #8]
700096da:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
700096dc:	68fb      	ldr	r3, [r7, #12]
700096de:	68fa      	ldr	r2, [r7, #12]
700096e0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
700096e2:	68ba      	ldr	r2, [r7, #8]
700096e4:	687b      	ldr	r3, [r7, #4]
700096e6:	429a      	cmp	r2, r3
700096e8:	d812      	bhi.n	70009710 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
700096ea:	687a      	ldr	r2, [r7, #4]
700096ec:	683b      	ldr	r3, [r7, #0]
700096ee:	1ad2      	subs	r2, r2, r3
700096f0:	68fb      	ldr	r3, [r7, #12]
700096f2:	699b      	ldr	r3, [r3, #24]
700096f4:	429a      	cmp	r2, r3
700096f6:	d302      	bcc.n	700096fe <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
700096f8:	2301      	movs	r3, #1
700096fa:	617b      	str	r3, [r7, #20]
700096fc:	e01b      	b.n	70009736 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
700096fe:	4b10      	ldr	r3, [pc, #64]	@ (70009740 <prvInsertTimerInActiveList+0x7c>)
70009700:	681a      	ldr	r2, [r3, #0]
70009702:	68fb      	ldr	r3, [r7, #12]
70009704:	3304      	adds	r3, #4
70009706:	4619      	mov	r1, r3
70009708:	4610      	mov	r0, r2
7000970a:	f7fc fefe 	bl	7000650a <vListInsert>
7000970e:	e012      	b.n	70009736 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
70009710:	687a      	ldr	r2, [r7, #4]
70009712:	683b      	ldr	r3, [r7, #0]
70009714:	429a      	cmp	r2, r3
70009716:	d206      	bcs.n	70009726 <prvInsertTimerInActiveList+0x62>
70009718:	68ba      	ldr	r2, [r7, #8]
7000971a:	683b      	ldr	r3, [r7, #0]
7000971c:	429a      	cmp	r2, r3
7000971e:	d302      	bcc.n	70009726 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
70009720:	2301      	movs	r3, #1
70009722:	617b      	str	r3, [r7, #20]
70009724:	e007      	b.n	70009736 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
70009726:	4b07      	ldr	r3, [pc, #28]	@ (70009744 <prvInsertTimerInActiveList+0x80>)
70009728:	681a      	ldr	r2, [r3, #0]
7000972a:	68fb      	ldr	r3, [r7, #12]
7000972c:	3304      	adds	r3, #4
7000972e:	4619      	mov	r1, r3
70009730:	4610      	mov	r0, r2
70009732:	f7fc feea 	bl	7000650a <vListInsert>
            }
        }

        return xProcessTimerNow;
70009736:	697b      	ldr	r3, [r7, #20]
    }
70009738:	4618      	mov	r0, r3
7000973a:	3718      	adds	r7, #24
7000973c:	46bd      	mov	sp, r7
7000973e:	bd80      	pop	{r7, pc}
70009740:	24005174 	.word	0x24005174
70009744:	24005170 	.word	0x24005170

70009748 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
70009748:	b580      	push	{r7, lr}
7000974a:	b08a      	sub	sp, #40	@ 0x28
7000974c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
7000974e:	e0c7      	b.n	700098e0 <prvProcessReceivedCommands+0x198>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
70009750:	687b      	ldr	r3, [r7, #4]
70009752:	2b00      	cmp	r3, #0
70009754:	da19      	bge.n	7000978a <prvProcessReceivedCommands+0x42>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
70009756:	1d3b      	adds	r3, r7, #4
70009758:	3304      	adds	r3, #4
7000975a:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
7000975c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000975e:	2b00      	cmp	r3, #0
70009760:	d10b      	bne.n	7000977a <prvProcessReceivedCommands+0x32>
        __asm volatile
70009762:	f04f 0350 	mov.w	r3, #80	@ 0x50
70009766:	f383 8811 	msr	BASEPRI, r3
7000976a:	f3bf 8f6f 	isb	sy
7000976e:	f3bf 8f4f 	dsb	sy
70009772:	61bb      	str	r3, [r7, #24]
    }
70009774:	bf00      	nop
70009776:	bf00      	nop
70009778:	e7fd      	b.n	70009776 <prvProcessReceivedCommands+0x2e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
7000977a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000977c:	681b      	ldr	r3, [r3, #0]
7000977e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70009780:	6850      	ldr	r0, [r2, #4]
70009782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70009784:	6892      	ldr	r2, [r2, #8]
70009786:	4611      	mov	r1, r2
70009788:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
7000978a:	687b      	ldr	r3, [r7, #4]
7000978c:	2b00      	cmp	r3, #0
7000978e:	f2c0 80a7 	blt.w	700098e0 <prvProcessReceivedCommands+0x198>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
70009792:	68fb      	ldr	r3, [r7, #12]
70009794:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
70009796:	6a3b      	ldr	r3, [r7, #32]
70009798:	695b      	ldr	r3, [r3, #20]
7000979a:	2b00      	cmp	r3, #0
7000979c:	d004      	beq.n	700097a8 <prvProcessReceivedCommands+0x60>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
7000979e:	6a3b      	ldr	r3, [r7, #32]
700097a0:	3304      	adds	r3, #4
700097a2:	4618      	mov	r0, r3
700097a4:	f7fc feea 	bl	7000657c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
700097a8:	463b      	mov	r3, r7
700097aa:	4618      	mov	r0, r3
700097ac:	f7ff ff6a 	bl	70009684 <prvSampleTimeNow>
700097b0:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
700097b2:	687b      	ldr	r3, [r7, #4]
700097b4:	3b01      	subs	r3, #1
700097b6:	2b08      	cmp	r3, #8
700097b8:	f200 808f 	bhi.w	700098da <prvProcessReceivedCommands+0x192>
700097bc:	a201      	add	r2, pc, #4	@ (adr r2, 700097c4 <prvProcessReceivedCommands+0x7c>)
700097be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
700097c2:	bf00      	nop
700097c4:	700097e9 	.word	0x700097e9
700097c8:	700097e9 	.word	0x700097e9
700097cc:	70009851 	.word	0x70009851
700097d0:	70009865 	.word	0x70009865
700097d4:	700098b1 	.word	0x700098b1
700097d8:	700097e9 	.word	0x700097e9
700097dc:	700097e9 	.word	0x700097e9
700097e0:	70009851 	.word	0x70009851
700097e4:	70009865 	.word	0x70009865
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
700097e8:	6a3b      	ldr	r3, [r7, #32]
700097ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
700097ee:	f043 0301 	orr.w	r3, r3, #1
700097f2:	b2da      	uxtb	r2, r3
700097f4:	6a3b      	ldr	r3, [r7, #32]
700097f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
700097fa:	68ba      	ldr	r2, [r7, #8]
700097fc:	6a3b      	ldr	r3, [r7, #32]
700097fe:	699b      	ldr	r3, [r3, #24]
70009800:	18d1      	adds	r1, r2, r3
70009802:	68bb      	ldr	r3, [r7, #8]
70009804:	69fa      	ldr	r2, [r7, #28]
70009806:	6a38      	ldr	r0, [r7, #32]
70009808:	f7ff ff5c 	bl	700096c4 <prvInsertTimerInActiveList>
7000980c:	4603      	mov	r3, r0
7000980e:	2b00      	cmp	r3, #0
70009810:	d065      	beq.n	700098de <prvProcessReceivedCommands+0x196>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
70009812:	6a3b      	ldr	r3, [r7, #32]
70009814:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
70009818:	f003 0304 	and.w	r3, r3, #4
7000981c:	2b00      	cmp	r3, #0
7000981e:	d009      	beq.n	70009834 <prvProcessReceivedCommands+0xec>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
70009820:	68ba      	ldr	r2, [r7, #8]
70009822:	6a3b      	ldr	r3, [r7, #32]
70009824:	699b      	ldr	r3, [r3, #24]
70009826:	4413      	add	r3, r2
70009828:	69fa      	ldr	r2, [r7, #28]
7000982a:	4619      	mov	r1, r3
7000982c:	6a38      	ldr	r0, [r7, #32]
7000982e:	f7ff fe51 	bl	700094d4 <prvReloadTimer>
70009832:	e008      	b.n	70009846 <prvProcessReceivedCommands+0xfe>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
70009834:	6a3b      	ldr	r3, [r7, #32]
70009836:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
7000983a:	f023 0301 	bic.w	r3, r3, #1
7000983e:	b2da      	uxtb	r2, r3
70009840:	6a3b      	ldr	r3, [r7, #32]
70009842:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
70009846:	6a3b      	ldr	r3, [r7, #32]
70009848:	6a1b      	ldr	r3, [r3, #32]
7000984a:	6a38      	ldr	r0, [r7, #32]
7000984c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
7000984e:	e046      	b.n	700098de <prvProcessReceivedCommands+0x196>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
70009850:	6a3b      	ldr	r3, [r7, #32]
70009852:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
70009856:	f023 0301 	bic.w	r3, r3, #1
7000985a:	b2da      	uxtb	r2, r3
7000985c:	6a3b      	ldr	r3, [r7, #32]
7000985e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
70009862:	e03d      	b.n	700098e0 <prvProcessReceivedCommands+0x198>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
70009864:	6a3b      	ldr	r3, [r7, #32]
70009866:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
7000986a:	f043 0301 	orr.w	r3, r3, #1
7000986e:	b2da      	uxtb	r2, r3
70009870:	6a3b      	ldr	r3, [r7, #32]
70009872:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
70009876:	68ba      	ldr	r2, [r7, #8]
70009878:	6a3b      	ldr	r3, [r7, #32]
7000987a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
7000987c:	6a3b      	ldr	r3, [r7, #32]
7000987e:	699b      	ldr	r3, [r3, #24]
70009880:	2b00      	cmp	r3, #0
70009882:	d10b      	bne.n	7000989c <prvProcessReceivedCommands+0x154>
        __asm volatile
70009884:	f04f 0350 	mov.w	r3, #80	@ 0x50
70009888:	f383 8811 	msr	BASEPRI, r3
7000988c:	f3bf 8f6f 	isb	sy
70009890:	f3bf 8f4f 	dsb	sy
70009894:	617b      	str	r3, [r7, #20]
    }
70009896:	bf00      	nop
70009898:	bf00      	nop
7000989a:	e7fd      	b.n	70009898 <prvProcessReceivedCommands+0x150>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
7000989c:	6a3b      	ldr	r3, [r7, #32]
7000989e:	699a      	ldr	r2, [r3, #24]
700098a0:	69fb      	ldr	r3, [r7, #28]
700098a2:	18d1      	adds	r1, r2, r3
700098a4:	69fb      	ldr	r3, [r7, #28]
700098a6:	69fa      	ldr	r2, [r7, #28]
700098a8:	6a38      	ldr	r0, [r7, #32]
700098aa:	f7ff ff0b 	bl	700096c4 <prvInsertTimerInActiveList>
                        break;
700098ae:	e017      	b.n	700098e0 <prvProcessReceivedCommands+0x198>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
700098b0:	6a3b      	ldr	r3, [r7, #32]
700098b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
700098b6:	f003 0302 	and.w	r3, r3, #2
700098ba:	2b00      	cmp	r3, #0
700098bc:	d103      	bne.n	700098c6 <prvProcessReceivedCommands+0x17e>
                            {
                                vPortFree( pxTimer );
700098be:	6a38      	ldr	r0, [r7, #32]
700098c0:	f7fc fcbe 	bl	70006240 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
700098c4:	e00c      	b.n	700098e0 <prvProcessReceivedCommands+0x198>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
700098c6:	6a3b      	ldr	r3, [r7, #32]
700098c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
700098cc:	f023 0301 	bic.w	r3, r3, #1
700098d0:	b2da      	uxtb	r2, r3
700098d2:	6a3b      	ldr	r3, [r7, #32]
700098d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
700098d8:	e002      	b.n	700098e0 <prvProcessReceivedCommands+0x198>

                    default:
                        /* Don't expect to get here. */
                        break;
700098da:	bf00      	nop
700098dc:	e000      	b.n	700098e0 <prvProcessReceivedCommands+0x198>
                        break;
700098de:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
700098e0:	4b07      	ldr	r3, [pc, #28]	@ (70009900 <prvProcessReceivedCommands+0x1b8>)
700098e2:	681b      	ldr	r3, [r3, #0]
700098e4:	1d39      	adds	r1, r7, #4
700098e6:	2200      	movs	r2, #0
700098e8:	4618      	mov	r0, r3
700098ea:	f7fd fdb5 	bl	70007458 <xQueueReceive>
700098ee:	4603      	mov	r3, r0
700098f0:	2b00      	cmp	r3, #0
700098f2:	f47f af2d 	bne.w	70009750 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
700098f6:	bf00      	nop
700098f8:	bf00      	nop
700098fa:	3728      	adds	r7, #40	@ 0x28
700098fc:	46bd      	mov	sp, r7
700098fe:	bd80      	pop	{r7, pc}
70009900:	24005178 	.word	0x24005178

70009904 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
70009904:	b580      	push	{r7, lr}
70009906:	b082      	sub	sp, #8
70009908:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
7000990a:	e009      	b.n	70009920 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
7000990c:	4b0e      	ldr	r3, [pc, #56]	@ (70009948 <prvSwitchTimerLists+0x44>)
7000990e:	681b      	ldr	r3, [r3, #0]
70009910:	68db      	ldr	r3, [r3, #12]
70009912:	681b      	ldr	r3, [r3, #0]
70009914:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
70009916:	f04f 31ff 	mov.w	r1, #4294967295
7000991a:	6838      	ldr	r0, [r7, #0]
7000991c:	f7ff fdfc 	bl	70009518 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
70009920:	4b09      	ldr	r3, [pc, #36]	@ (70009948 <prvSwitchTimerLists+0x44>)
70009922:	681b      	ldr	r3, [r3, #0]
70009924:	681b      	ldr	r3, [r3, #0]
70009926:	2b00      	cmp	r3, #0
70009928:	d1f0      	bne.n	7000990c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
7000992a:	4b07      	ldr	r3, [pc, #28]	@ (70009948 <prvSwitchTimerLists+0x44>)
7000992c:	681b      	ldr	r3, [r3, #0]
7000992e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
70009930:	4b06      	ldr	r3, [pc, #24]	@ (7000994c <prvSwitchTimerLists+0x48>)
70009932:	681b      	ldr	r3, [r3, #0]
70009934:	4a04      	ldr	r2, [pc, #16]	@ (70009948 <prvSwitchTimerLists+0x44>)
70009936:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
70009938:	4a04      	ldr	r2, [pc, #16]	@ (7000994c <prvSwitchTimerLists+0x48>)
7000993a:	687b      	ldr	r3, [r7, #4]
7000993c:	6013      	str	r3, [r2, #0]
    }
7000993e:	bf00      	nop
70009940:	3708      	adds	r7, #8
70009942:	46bd      	mov	sp, r7
70009944:	bd80      	pop	{r7, pc}
70009946:	bf00      	nop
70009948:	24005170 	.word	0x24005170
7000994c:	24005174 	.word	0x24005174

70009950 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
70009950:	b580      	push	{r7, lr}
70009952:	b082      	sub	sp, #8
70009954:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
70009956:	f7fc ff71 	bl	7000683c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
7000995a:	4b15      	ldr	r3, [pc, #84]	@ (700099b0 <prvCheckForValidListAndQueue+0x60>)
7000995c:	681b      	ldr	r3, [r3, #0]
7000995e:	2b00      	cmp	r3, #0
70009960:	d120      	bne.n	700099a4 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
70009962:	4814      	ldr	r0, [pc, #80]	@ (700099b4 <prvCheckForValidListAndQueue+0x64>)
70009964:	f7fc fd80 	bl	70006468 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
70009968:	4813      	ldr	r0, [pc, #76]	@ (700099b8 <prvCheckForValidListAndQueue+0x68>)
7000996a:	f7fc fd7d 	bl	70006468 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
7000996e:	4b13      	ldr	r3, [pc, #76]	@ (700099bc <prvCheckForValidListAndQueue+0x6c>)
70009970:	4a10      	ldr	r2, [pc, #64]	@ (700099b4 <prvCheckForValidListAndQueue+0x64>)
70009972:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
70009974:	4b12      	ldr	r3, [pc, #72]	@ (700099c0 <prvCheckForValidListAndQueue+0x70>)
70009976:	4a10      	ldr	r2, [pc, #64]	@ (700099b8 <prvCheckForValidListAndQueue+0x68>)
70009978:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
7000997a:	2300      	movs	r3, #0
7000997c:	9300      	str	r3, [sp, #0]
7000997e:	4b11      	ldr	r3, [pc, #68]	@ (700099c4 <prvCheckForValidListAndQueue+0x74>)
70009980:	4a11      	ldr	r2, [pc, #68]	@ (700099c8 <prvCheckForValidListAndQueue+0x78>)
70009982:	2110      	movs	r1, #16
70009984:	200a      	movs	r0, #10
70009986:	f7fd f915 	bl	70006bb4 <xQueueGenericCreateStatic>
7000998a:	4603      	mov	r3, r0
7000998c:	4a08      	ldr	r2, [pc, #32]	@ (700099b0 <prvCheckForValidListAndQueue+0x60>)
7000998e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
70009990:	4b07      	ldr	r3, [pc, #28]	@ (700099b0 <prvCheckForValidListAndQueue+0x60>)
70009992:	681b      	ldr	r3, [r3, #0]
70009994:	2b00      	cmp	r3, #0
70009996:	d005      	beq.n	700099a4 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
70009998:	4b05      	ldr	r3, [pc, #20]	@ (700099b0 <prvCheckForValidListAndQueue+0x60>)
7000999a:	681b      	ldr	r3, [r3, #0]
7000999c:	490b      	ldr	r1, [pc, #44]	@ (700099cc <prvCheckForValidListAndQueue+0x7c>)
7000999e:	4618      	mov	r0, r3
700099a0:	f7fe f922 	bl	70007be8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
700099a4:	f7fc ff7c 	bl	700068a0 <vPortExitCritical>
    }
700099a8:	bf00      	nop
700099aa:	46bd      	mov	sp, r7
700099ac:	bd80      	pop	{r7, pc}
700099ae:	bf00      	nop
700099b0:	24005178 	.word	0x24005178
700099b4:	24005148 	.word	0x24005148
700099b8:	2400515c 	.word	0x2400515c
700099bc:	24005170 	.word	0x24005170
700099c0:	24005174 	.word	0x24005174
700099c4:	24005224 	.word	0x24005224
700099c8:	24005184 	.word	0x24005184
700099cc:	70014c8c 	.word	0x70014c8c

700099d0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
700099d0:	b480      	push	{r7}
700099d2:	b083      	sub	sp, #12
700099d4:	af00      	add	r7, sp, #0
700099d6:	4603      	mov	r3, r0
700099d8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
700099da:	88fb      	ldrh	r3, [r7, #6]
700099dc:	021b      	lsls	r3, r3, #8
700099de:	b21a      	sxth	r2, r3
700099e0:	88fb      	ldrh	r3, [r7, #6]
700099e2:	0a1b      	lsrs	r3, r3, #8
700099e4:	b29b      	uxth	r3, r3
700099e6:	b21b      	sxth	r3, r3
700099e8:	4313      	orrs	r3, r2
700099ea:	b21b      	sxth	r3, r3
700099ec:	b29b      	uxth	r3, r3
}
700099ee:	4618      	mov	r0, r3
700099f0:	370c      	adds	r7, #12
700099f2:	46bd      	mov	sp, r7
700099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
700099f8:	4770      	bx	lr

700099fa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
700099fa:	b480      	push	{r7}
700099fc:	b083      	sub	sp, #12
700099fe:	af00      	add	r7, sp, #0
70009a00:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
70009a02:	687b      	ldr	r3, [r7, #4]
70009a04:	061a      	lsls	r2, r3, #24
70009a06:	687b      	ldr	r3, [r7, #4]
70009a08:	021b      	lsls	r3, r3, #8
70009a0a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
70009a0e:	431a      	orrs	r2, r3
70009a10:	687b      	ldr	r3, [r7, #4]
70009a12:	0a1b      	lsrs	r3, r3, #8
70009a14:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
70009a18:	431a      	orrs	r2, r3
70009a1a:	687b      	ldr	r3, [r7, #4]
70009a1c:	0e1b      	lsrs	r3, r3, #24
70009a1e:	4313      	orrs	r3, r2
}
70009a20:	4618      	mov	r0, r3
70009a22:	370c      	adds	r7, #12
70009a24:	46bd      	mov	sp, r7
70009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
70009a2a:	4770      	bx	lr

70009a2c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
70009a2c:	b580      	push	{r7, lr}
70009a2e:	b082      	sub	sp, #8
70009a30:	af00      	add	r7, sp, #0
70009a32:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
70009a34:	4915      	ldr	r1, [pc, #84]	@ (70009a8c <etharp_free_entry+0x60>)
70009a36:	687a      	ldr	r2, [r7, #4]
70009a38:	4613      	mov	r3, r2
70009a3a:	005b      	lsls	r3, r3, #1
70009a3c:	4413      	add	r3, r2
70009a3e:	00db      	lsls	r3, r3, #3
70009a40:	440b      	add	r3, r1
70009a42:	681b      	ldr	r3, [r3, #0]
70009a44:	2b00      	cmp	r3, #0
70009a46:	d013      	beq.n	70009a70 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
70009a48:	4910      	ldr	r1, [pc, #64]	@ (70009a8c <etharp_free_entry+0x60>)
70009a4a:	687a      	ldr	r2, [r7, #4]
70009a4c:	4613      	mov	r3, r2
70009a4e:	005b      	lsls	r3, r3, #1
70009a50:	4413      	add	r3, r2
70009a52:	00db      	lsls	r3, r3, #3
70009a54:	440b      	add	r3, r1
70009a56:	681b      	ldr	r3, [r3, #0]
70009a58:	4618      	mov	r0, r3
70009a5a:	f003 fef5 	bl	7000d848 <pbuf_free>
    arp_table[i].q = NULL;
70009a5e:	490b      	ldr	r1, [pc, #44]	@ (70009a8c <etharp_free_entry+0x60>)
70009a60:	687a      	ldr	r2, [r7, #4]
70009a62:	4613      	mov	r3, r2
70009a64:	005b      	lsls	r3, r3, #1
70009a66:	4413      	add	r3, r2
70009a68:	00db      	lsls	r3, r3, #3
70009a6a:	440b      	add	r3, r1
70009a6c:	2200      	movs	r2, #0
70009a6e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
70009a70:	4906      	ldr	r1, [pc, #24]	@ (70009a8c <etharp_free_entry+0x60>)
70009a72:	687a      	ldr	r2, [r7, #4]
70009a74:	4613      	mov	r3, r2
70009a76:	005b      	lsls	r3, r3, #1
70009a78:	4413      	add	r3, r2
70009a7a:	00db      	lsls	r3, r3, #3
70009a7c:	440b      	add	r3, r1
70009a7e:	3314      	adds	r3, #20
70009a80:	2200      	movs	r2, #0
70009a82:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
70009a84:	bf00      	nop
70009a86:	3708      	adds	r7, #8
70009a88:	46bd      	mov	sp, r7
70009a8a:	bd80      	pop	{r7, pc}
70009a8c:	24005274 	.word	0x24005274

70009a90 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
70009a90:	b580      	push	{r7, lr}
70009a92:	b082      	sub	sp, #8
70009a94:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
70009a96:	2300      	movs	r3, #0
70009a98:	607b      	str	r3, [r7, #4]
70009a9a:	e096      	b.n	70009bca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
70009a9c:	494f      	ldr	r1, [pc, #316]	@ (70009bdc <etharp_tmr+0x14c>)
70009a9e:	687a      	ldr	r2, [r7, #4]
70009aa0:	4613      	mov	r3, r2
70009aa2:	005b      	lsls	r3, r3, #1
70009aa4:	4413      	add	r3, r2
70009aa6:	00db      	lsls	r3, r3, #3
70009aa8:	440b      	add	r3, r1
70009aaa:	3314      	adds	r3, #20
70009aac:	781b      	ldrb	r3, [r3, #0]
70009aae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
70009ab0:	78fb      	ldrb	r3, [r7, #3]
70009ab2:	2b00      	cmp	r3, #0
70009ab4:	f000 8086 	beq.w	70009bc4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
70009ab8:	4948      	ldr	r1, [pc, #288]	@ (70009bdc <etharp_tmr+0x14c>)
70009aba:	687a      	ldr	r2, [r7, #4]
70009abc:	4613      	mov	r3, r2
70009abe:	005b      	lsls	r3, r3, #1
70009ac0:	4413      	add	r3, r2
70009ac2:	00db      	lsls	r3, r3, #3
70009ac4:	440b      	add	r3, r1
70009ac6:	3312      	adds	r3, #18
70009ac8:	881b      	ldrh	r3, [r3, #0]
70009aca:	3301      	adds	r3, #1
70009acc:	b298      	uxth	r0, r3
70009ace:	4943      	ldr	r1, [pc, #268]	@ (70009bdc <etharp_tmr+0x14c>)
70009ad0:	687a      	ldr	r2, [r7, #4]
70009ad2:	4613      	mov	r3, r2
70009ad4:	005b      	lsls	r3, r3, #1
70009ad6:	4413      	add	r3, r2
70009ad8:	00db      	lsls	r3, r3, #3
70009ada:	440b      	add	r3, r1
70009adc:	3312      	adds	r3, #18
70009ade:	4602      	mov	r2, r0
70009ae0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
70009ae2:	493e      	ldr	r1, [pc, #248]	@ (70009bdc <etharp_tmr+0x14c>)
70009ae4:	687a      	ldr	r2, [r7, #4]
70009ae6:	4613      	mov	r3, r2
70009ae8:	005b      	lsls	r3, r3, #1
70009aea:	4413      	add	r3, r2
70009aec:	00db      	lsls	r3, r3, #3
70009aee:	440b      	add	r3, r1
70009af0:	3312      	adds	r3, #18
70009af2:	881b      	ldrh	r3, [r3, #0]
70009af4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
70009af8:	d215      	bcs.n	70009b26 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
70009afa:	4938      	ldr	r1, [pc, #224]	@ (70009bdc <etharp_tmr+0x14c>)
70009afc:	687a      	ldr	r2, [r7, #4]
70009afe:	4613      	mov	r3, r2
70009b00:	005b      	lsls	r3, r3, #1
70009b02:	4413      	add	r3, r2
70009b04:	00db      	lsls	r3, r3, #3
70009b06:	440b      	add	r3, r1
70009b08:	3314      	adds	r3, #20
70009b0a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
70009b0c:	2b01      	cmp	r3, #1
70009b0e:	d10e      	bne.n	70009b2e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
70009b10:	4932      	ldr	r1, [pc, #200]	@ (70009bdc <etharp_tmr+0x14c>)
70009b12:	687a      	ldr	r2, [r7, #4]
70009b14:	4613      	mov	r3, r2
70009b16:	005b      	lsls	r3, r3, #1
70009b18:	4413      	add	r3, r2
70009b1a:	00db      	lsls	r3, r3, #3
70009b1c:	440b      	add	r3, r1
70009b1e:	3312      	adds	r3, #18
70009b20:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
70009b22:	2b04      	cmp	r3, #4
70009b24:	d903      	bls.n	70009b2e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
70009b26:	6878      	ldr	r0, [r7, #4]
70009b28:	f7ff ff80 	bl	70009a2c <etharp_free_entry>
70009b2c:	e04a      	b.n	70009bc4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
70009b2e:	492b      	ldr	r1, [pc, #172]	@ (70009bdc <etharp_tmr+0x14c>)
70009b30:	687a      	ldr	r2, [r7, #4]
70009b32:	4613      	mov	r3, r2
70009b34:	005b      	lsls	r3, r3, #1
70009b36:	4413      	add	r3, r2
70009b38:	00db      	lsls	r3, r3, #3
70009b3a:	440b      	add	r3, r1
70009b3c:	3314      	adds	r3, #20
70009b3e:	781b      	ldrb	r3, [r3, #0]
70009b40:	2b03      	cmp	r3, #3
70009b42:	d10a      	bne.n	70009b5a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
70009b44:	4925      	ldr	r1, [pc, #148]	@ (70009bdc <etharp_tmr+0x14c>)
70009b46:	687a      	ldr	r2, [r7, #4]
70009b48:	4613      	mov	r3, r2
70009b4a:	005b      	lsls	r3, r3, #1
70009b4c:	4413      	add	r3, r2
70009b4e:	00db      	lsls	r3, r3, #3
70009b50:	440b      	add	r3, r1
70009b52:	3314      	adds	r3, #20
70009b54:	2204      	movs	r2, #4
70009b56:	701a      	strb	r2, [r3, #0]
70009b58:	e034      	b.n	70009bc4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
70009b5a:	4920      	ldr	r1, [pc, #128]	@ (70009bdc <etharp_tmr+0x14c>)
70009b5c:	687a      	ldr	r2, [r7, #4]
70009b5e:	4613      	mov	r3, r2
70009b60:	005b      	lsls	r3, r3, #1
70009b62:	4413      	add	r3, r2
70009b64:	00db      	lsls	r3, r3, #3
70009b66:	440b      	add	r3, r1
70009b68:	3314      	adds	r3, #20
70009b6a:	781b      	ldrb	r3, [r3, #0]
70009b6c:	2b04      	cmp	r3, #4
70009b6e:	d10a      	bne.n	70009b86 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
70009b70:	491a      	ldr	r1, [pc, #104]	@ (70009bdc <etharp_tmr+0x14c>)
70009b72:	687a      	ldr	r2, [r7, #4]
70009b74:	4613      	mov	r3, r2
70009b76:	005b      	lsls	r3, r3, #1
70009b78:	4413      	add	r3, r2
70009b7a:	00db      	lsls	r3, r3, #3
70009b7c:	440b      	add	r3, r1
70009b7e:	3314      	adds	r3, #20
70009b80:	2202      	movs	r2, #2
70009b82:	701a      	strb	r2, [r3, #0]
70009b84:	e01e      	b.n	70009bc4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
70009b86:	4915      	ldr	r1, [pc, #84]	@ (70009bdc <etharp_tmr+0x14c>)
70009b88:	687a      	ldr	r2, [r7, #4]
70009b8a:	4613      	mov	r3, r2
70009b8c:	005b      	lsls	r3, r3, #1
70009b8e:	4413      	add	r3, r2
70009b90:	00db      	lsls	r3, r3, #3
70009b92:	440b      	add	r3, r1
70009b94:	3314      	adds	r3, #20
70009b96:	781b      	ldrb	r3, [r3, #0]
70009b98:	2b01      	cmp	r3, #1
70009b9a:	d113      	bne.n	70009bc4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
70009b9c:	490f      	ldr	r1, [pc, #60]	@ (70009bdc <etharp_tmr+0x14c>)
70009b9e:	687a      	ldr	r2, [r7, #4]
70009ba0:	4613      	mov	r3, r2
70009ba2:	005b      	lsls	r3, r3, #1
70009ba4:	4413      	add	r3, r2
70009ba6:	00db      	lsls	r3, r3, #3
70009ba8:	440b      	add	r3, r1
70009baa:	3308      	adds	r3, #8
70009bac:	6818      	ldr	r0, [r3, #0]
70009bae:	687a      	ldr	r2, [r7, #4]
70009bb0:	4613      	mov	r3, r2
70009bb2:	005b      	lsls	r3, r3, #1
70009bb4:	4413      	add	r3, r2
70009bb6:	00db      	lsls	r3, r3, #3
70009bb8:	4a08      	ldr	r2, [pc, #32]	@ (70009bdc <etharp_tmr+0x14c>)
70009bba:	4413      	add	r3, r2
70009bbc:	3304      	adds	r3, #4
70009bbe:	4619      	mov	r1, r3
70009bc0:	f000 fe7c 	bl	7000a8bc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
70009bc4:	687b      	ldr	r3, [r7, #4]
70009bc6:	3301      	adds	r3, #1
70009bc8:	607b      	str	r3, [r7, #4]
70009bca:	687b      	ldr	r3, [r7, #4]
70009bcc:	2b09      	cmp	r3, #9
70009bce:	f77f af65 	ble.w	70009a9c <etharp_tmr+0xc>
      }
    }
  }
}
70009bd2:	bf00      	nop
70009bd4:	bf00      	nop
70009bd6:	3708      	adds	r7, #8
70009bd8:	46bd      	mov	sp, r7
70009bda:	bd80      	pop	{r7, pc}
70009bdc:	24005274 	.word	0x24005274

70009be0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
70009be0:	b580      	push	{r7, lr}
70009be2:	b08a      	sub	sp, #40	@ 0x28
70009be4:	af00      	add	r7, sp, #0
70009be6:	60f8      	str	r0, [r7, #12]
70009be8:	460b      	mov	r3, r1
70009bea:	607a      	str	r2, [r7, #4]
70009bec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
70009bee:	230a      	movs	r3, #10
70009bf0:	84fb      	strh	r3, [r7, #38]	@ 0x26
70009bf2:	230a      	movs	r3, #10
70009bf4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
70009bf6:	230a      	movs	r3, #10
70009bf8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
70009bfa:	2300      	movs	r3, #0
70009bfc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
70009bfe:	230a      	movs	r3, #10
70009c00:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
70009c02:	2300      	movs	r3, #0
70009c04:	83bb      	strh	r3, [r7, #28]
70009c06:	2300      	movs	r3, #0
70009c08:	837b      	strh	r3, [r7, #26]
70009c0a:	2300      	movs	r3, #0
70009c0c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
70009c0e:	2300      	movs	r3, #0
70009c10:	843b      	strh	r3, [r7, #32]
70009c12:	e0ae      	b.n	70009d72 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
70009c14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009c18:	49a6      	ldr	r1, [pc, #664]	@ (70009eb4 <etharp_find_entry+0x2d4>)
70009c1a:	4613      	mov	r3, r2
70009c1c:	005b      	lsls	r3, r3, #1
70009c1e:	4413      	add	r3, r2
70009c20:	00db      	lsls	r3, r3, #3
70009c22:	440b      	add	r3, r1
70009c24:	3314      	adds	r3, #20
70009c26:	781b      	ldrb	r3, [r3, #0]
70009c28:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
70009c2a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
70009c2e:	2b0a      	cmp	r3, #10
70009c30:	d105      	bne.n	70009c3e <etharp_find_entry+0x5e>
70009c32:	7dfb      	ldrb	r3, [r7, #23]
70009c34:	2b00      	cmp	r3, #0
70009c36:	d102      	bne.n	70009c3e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
70009c38:	8c3b      	ldrh	r3, [r7, #32]
70009c3a:	847b      	strh	r3, [r7, #34]	@ 0x22
70009c3c:	e095      	b.n	70009d6a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
70009c3e:	7dfb      	ldrb	r3, [r7, #23]
70009c40:	2b00      	cmp	r3, #0
70009c42:	f000 8092 	beq.w	70009d6a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
70009c46:	7dfb      	ldrb	r3, [r7, #23]
70009c48:	2b01      	cmp	r3, #1
70009c4a:	d009      	beq.n	70009c60 <etharp_find_entry+0x80>
70009c4c:	7dfb      	ldrb	r3, [r7, #23]
70009c4e:	2b01      	cmp	r3, #1
70009c50:	d806      	bhi.n	70009c60 <etharp_find_entry+0x80>
70009c52:	4b99      	ldr	r3, [pc, #612]	@ (70009eb8 <etharp_find_entry+0x2d8>)
70009c54:	f240 1223 	movw	r2, #291	@ 0x123
70009c58:	4998      	ldr	r1, [pc, #608]	@ (70009ebc <etharp_find_entry+0x2dc>)
70009c5a:	4899      	ldr	r0, [pc, #612]	@ (70009ec0 <etharp_find_entry+0x2e0>)
70009c5c:	f00a f860 	bl	70013d20 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
70009c60:	68fb      	ldr	r3, [r7, #12]
70009c62:	2b00      	cmp	r3, #0
70009c64:	d020      	beq.n	70009ca8 <etharp_find_entry+0xc8>
70009c66:	68fb      	ldr	r3, [r7, #12]
70009c68:	6819      	ldr	r1, [r3, #0]
70009c6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009c6e:	4891      	ldr	r0, [pc, #580]	@ (70009eb4 <etharp_find_entry+0x2d4>)
70009c70:	4613      	mov	r3, r2
70009c72:	005b      	lsls	r3, r3, #1
70009c74:	4413      	add	r3, r2
70009c76:	00db      	lsls	r3, r3, #3
70009c78:	4403      	add	r3, r0
70009c7a:	3304      	adds	r3, #4
70009c7c:	681b      	ldr	r3, [r3, #0]
70009c7e:	4299      	cmp	r1, r3
70009c80:	d112      	bne.n	70009ca8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
70009c82:	687b      	ldr	r3, [r7, #4]
70009c84:	2b00      	cmp	r3, #0
70009c86:	d00c      	beq.n	70009ca2 <etharp_find_entry+0xc2>
70009c88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009c8c:	4989      	ldr	r1, [pc, #548]	@ (70009eb4 <etharp_find_entry+0x2d4>)
70009c8e:	4613      	mov	r3, r2
70009c90:	005b      	lsls	r3, r3, #1
70009c92:	4413      	add	r3, r2
70009c94:	00db      	lsls	r3, r3, #3
70009c96:	440b      	add	r3, r1
70009c98:	3308      	adds	r3, #8
70009c9a:	681b      	ldr	r3, [r3, #0]
70009c9c:	687a      	ldr	r2, [r7, #4]
70009c9e:	429a      	cmp	r2, r3
70009ca0:	d102      	bne.n	70009ca8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
70009ca2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
70009ca6:	e100      	b.n	70009eaa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
70009ca8:	7dfb      	ldrb	r3, [r7, #23]
70009caa:	2b01      	cmp	r3, #1
70009cac:	d140      	bne.n	70009d30 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
70009cae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009cb2:	4980      	ldr	r1, [pc, #512]	@ (70009eb4 <etharp_find_entry+0x2d4>)
70009cb4:	4613      	mov	r3, r2
70009cb6:	005b      	lsls	r3, r3, #1
70009cb8:	4413      	add	r3, r2
70009cba:	00db      	lsls	r3, r3, #3
70009cbc:	440b      	add	r3, r1
70009cbe:	681b      	ldr	r3, [r3, #0]
70009cc0:	2b00      	cmp	r3, #0
70009cc2:	d01a      	beq.n	70009cfa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
70009cc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009cc8:	497a      	ldr	r1, [pc, #488]	@ (70009eb4 <etharp_find_entry+0x2d4>)
70009cca:	4613      	mov	r3, r2
70009ccc:	005b      	lsls	r3, r3, #1
70009cce:	4413      	add	r3, r2
70009cd0:	00db      	lsls	r3, r3, #3
70009cd2:	440b      	add	r3, r1
70009cd4:	3312      	adds	r3, #18
70009cd6:	881b      	ldrh	r3, [r3, #0]
70009cd8:	8bba      	ldrh	r2, [r7, #28]
70009cda:	429a      	cmp	r2, r3
70009cdc:	d845      	bhi.n	70009d6a <etharp_find_entry+0x18a>
            old_queue = i;
70009cde:	8c3b      	ldrh	r3, [r7, #32]
70009ce0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
70009ce2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009ce6:	4973      	ldr	r1, [pc, #460]	@ (70009eb4 <etharp_find_entry+0x2d4>)
70009ce8:	4613      	mov	r3, r2
70009cea:	005b      	lsls	r3, r3, #1
70009cec:	4413      	add	r3, r2
70009cee:	00db      	lsls	r3, r3, #3
70009cf0:	440b      	add	r3, r1
70009cf2:	3312      	adds	r3, #18
70009cf4:	881b      	ldrh	r3, [r3, #0]
70009cf6:	83bb      	strh	r3, [r7, #28]
70009cf8:	e037      	b.n	70009d6a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
70009cfa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009cfe:	496d      	ldr	r1, [pc, #436]	@ (70009eb4 <etharp_find_entry+0x2d4>)
70009d00:	4613      	mov	r3, r2
70009d02:	005b      	lsls	r3, r3, #1
70009d04:	4413      	add	r3, r2
70009d06:	00db      	lsls	r3, r3, #3
70009d08:	440b      	add	r3, r1
70009d0a:	3312      	adds	r3, #18
70009d0c:	881b      	ldrh	r3, [r3, #0]
70009d0e:	8b7a      	ldrh	r2, [r7, #26]
70009d10:	429a      	cmp	r2, r3
70009d12:	d82a      	bhi.n	70009d6a <etharp_find_entry+0x18a>
            old_pending = i;
70009d14:	8c3b      	ldrh	r3, [r7, #32]
70009d16:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
70009d18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009d1c:	4965      	ldr	r1, [pc, #404]	@ (70009eb4 <etharp_find_entry+0x2d4>)
70009d1e:	4613      	mov	r3, r2
70009d20:	005b      	lsls	r3, r3, #1
70009d22:	4413      	add	r3, r2
70009d24:	00db      	lsls	r3, r3, #3
70009d26:	440b      	add	r3, r1
70009d28:	3312      	adds	r3, #18
70009d2a:	881b      	ldrh	r3, [r3, #0]
70009d2c:	837b      	strh	r3, [r7, #26]
70009d2e:	e01c      	b.n	70009d6a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
70009d30:	7dfb      	ldrb	r3, [r7, #23]
70009d32:	2b01      	cmp	r3, #1
70009d34:	d919      	bls.n	70009d6a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
70009d36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009d3a:	495e      	ldr	r1, [pc, #376]	@ (70009eb4 <etharp_find_entry+0x2d4>)
70009d3c:	4613      	mov	r3, r2
70009d3e:	005b      	lsls	r3, r3, #1
70009d40:	4413      	add	r3, r2
70009d42:	00db      	lsls	r3, r3, #3
70009d44:	440b      	add	r3, r1
70009d46:	3312      	adds	r3, #18
70009d48:	881b      	ldrh	r3, [r3, #0]
70009d4a:	8b3a      	ldrh	r2, [r7, #24]
70009d4c:	429a      	cmp	r2, r3
70009d4e:	d80c      	bhi.n	70009d6a <etharp_find_entry+0x18a>
            old_stable = i;
70009d50:	8c3b      	ldrh	r3, [r7, #32]
70009d52:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
70009d54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009d58:	4956      	ldr	r1, [pc, #344]	@ (70009eb4 <etharp_find_entry+0x2d4>)
70009d5a:	4613      	mov	r3, r2
70009d5c:	005b      	lsls	r3, r3, #1
70009d5e:	4413      	add	r3, r2
70009d60:	00db      	lsls	r3, r3, #3
70009d62:	440b      	add	r3, r1
70009d64:	3312      	adds	r3, #18
70009d66:	881b      	ldrh	r3, [r3, #0]
70009d68:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
70009d6a:	8c3b      	ldrh	r3, [r7, #32]
70009d6c:	3301      	adds	r3, #1
70009d6e:	b29b      	uxth	r3, r3
70009d70:	843b      	strh	r3, [r7, #32]
70009d72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
70009d76:	2b09      	cmp	r3, #9
70009d78:	f77f af4c 	ble.w	70009c14 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
70009d7c:	7afb      	ldrb	r3, [r7, #11]
70009d7e:	f003 0302 	and.w	r3, r3, #2
70009d82:	2b00      	cmp	r3, #0
70009d84:	d108      	bne.n	70009d98 <etharp_find_entry+0x1b8>
70009d86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
70009d8a:	2b0a      	cmp	r3, #10
70009d8c:	d107      	bne.n	70009d9e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
70009d8e:	7afb      	ldrb	r3, [r7, #11]
70009d90:	f003 0301 	and.w	r3, r3, #1
70009d94:	2b00      	cmp	r3, #0
70009d96:	d102      	bne.n	70009d9e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
70009d98:	f04f 33ff 	mov.w	r3, #4294967295
70009d9c:	e085      	b.n	70009eaa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
70009d9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
70009da2:	2b09      	cmp	r3, #9
70009da4:	dc02      	bgt.n	70009dac <etharp_find_entry+0x1cc>
    i = empty;
70009da6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
70009da8:	843b      	strh	r3, [r7, #32]
70009daa:	e039      	b.n	70009e20 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
70009dac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
70009db0:	2b09      	cmp	r3, #9
70009db2:	dc14      	bgt.n	70009dde <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
70009db4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
70009db6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
70009db8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009dbc:	493d      	ldr	r1, [pc, #244]	@ (70009eb4 <etharp_find_entry+0x2d4>)
70009dbe:	4613      	mov	r3, r2
70009dc0:	005b      	lsls	r3, r3, #1
70009dc2:	4413      	add	r3, r2
70009dc4:	00db      	lsls	r3, r3, #3
70009dc6:	440b      	add	r3, r1
70009dc8:	681b      	ldr	r3, [r3, #0]
70009dca:	2b00      	cmp	r3, #0
70009dcc:	d018      	beq.n	70009e00 <etharp_find_entry+0x220>
70009dce:	4b3a      	ldr	r3, [pc, #232]	@ (70009eb8 <etharp_find_entry+0x2d8>)
70009dd0:	f240 126d 	movw	r2, #365	@ 0x16d
70009dd4:	493b      	ldr	r1, [pc, #236]	@ (70009ec4 <etharp_find_entry+0x2e4>)
70009dd6:	483a      	ldr	r0, [pc, #232]	@ (70009ec0 <etharp_find_entry+0x2e0>)
70009dd8:	f009 ffa2 	bl	70013d20 <iprintf>
70009ddc:	e010      	b.n	70009e00 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
70009dde:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
70009de2:	2b09      	cmp	r3, #9
70009de4:	dc02      	bgt.n	70009dec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
70009de6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
70009de8:	843b      	strh	r3, [r7, #32]
70009dea:	e009      	b.n	70009e00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
70009dec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
70009df0:	2b09      	cmp	r3, #9
70009df2:	dc02      	bgt.n	70009dfa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
70009df4:	8bfb      	ldrh	r3, [r7, #30]
70009df6:	843b      	strh	r3, [r7, #32]
70009df8:	e002      	b.n	70009e00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
70009dfa:	f04f 33ff 	mov.w	r3, #4294967295
70009dfe:	e054      	b.n	70009eaa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
70009e00:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
70009e04:	2b09      	cmp	r3, #9
70009e06:	dd06      	ble.n	70009e16 <etharp_find_entry+0x236>
70009e08:	4b2b      	ldr	r3, [pc, #172]	@ (70009eb8 <etharp_find_entry+0x2d8>)
70009e0a:	f240 127f 	movw	r2, #383	@ 0x17f
70009e0e:	492e      	ldr	r1, [pc, #184]	@ (70009ec8 <etharp_find_entry+0x2e8>)
70009e10:	482b      	ldr	r0, [pc, #172]	@ (70009ec0 <etharp_find_entry+0x2e0>)
70009e12:	f009 ff85 	bl	70013d20 <iprintf>
    etharp_free_entry(i);
70009e16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
70009e1a:	4618      	mov	r0, r3
70009e1c:	f7ff fe06 	bl	70009a2c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
70009e20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
70009e24:	2b09      	cmp	r3, #9
70009e26:	dd06      	ble.n	70009e36 <etharp_find_entry+0x256>
70009e28:	4b23      	ldr	r3, [pc, #140]	@ (70009eb8 <etharp_find_entry+0x2d8>)
70009e2a:	f240 1283 	movw	r2, #387	@ 0x183
70009e2e:	4926      	ldr	r1, [pc, #152]	@ (70009ec8 <etharp_find_entry+0x2e8>)
70009e30:	4823      	ldr	r0, [pc, #140]	@ (70009ec0 <etharp_find_entry+0x2e0>)
70009e32:	f009 ff75 	bl	70013d20 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
70009e36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009e3a:	491e      	ldr	r1, [pc, #120]	@ (70009eb4 <etharp_find_entry+0x2d4>)
70009e3c:	4613      	mov	r3, r2
70009e3e:	005b      	lsls	r3, r3, #1
70009e40:	4413      	add	r3, r2
70009e42:	00db      	lsls	r3, r3, #3
70009e44:	440b      	add	r3, r1
70009e46:	3314      	adds	r3, #20
70009e48:	781b      	ldrb	r3, [r3, #0]
70009e4a:	2b00      	cmp	r3, #0
70009e4c:	d006      	beq.n	70009e5c <etharp_find_entry+0x27c>
70009e4e:	4b1a      	ldr	r3, [pc, #104]	@ (70009eb8 <etharp_find_entry+0x2d8>)
70009e50:	f44f 72c2 	mov.w	r2, #388	@ 0x184
70009e54:	491d      	ldr	r1, [pc, #116]	@ (70009ecc <etharp_find_entry+0x2ec>)
70009e56:	481a      	ldr	r0, [pc, #104]	@ (70009ec0 <etharp_find_entry+0x2e0>)
70009e58:	f009 ff62 	bl	70013d20 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
70009e5c:	68fb      	ldr	r3, [r7, #12]
70009e5e:	2b00      	cmp	r3, #0
70009e60:	d00b      	beq.n	70009e7a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
70009e62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009e66:	68fb      	ldr	r3, [r7, #12]
70009e68:	6819      	ldr	r1, [r3, #0]
70009e6a:	4812      	ldr	r0, [pc, #72]	@ (70009eb4 <etharp_find_entry+0x2d4>)
70009e6c:	4613      	mov	r3, r2
70009e6e:	005b      	lsls	r3, r3, #1
70009e70:	4413      	add	r3, r2
70009e72:	00db      	lsls	r3, r3, #3
70009e74:	4403      	add	r3, r0
70009e76:	3304      	adds	r3, #4
70009e78:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
70009e7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009e7e:	490d      	ldr	r1, [pc, #52]	@ (70009eb4 <etharp_find_entry+0x2d4>)
70009e80:	4613      	mov	r3, r2
70009e82:	005b      	lsls	r3, r3, #1
70009e84:	4413      	add	r3, r2
70009e86:	00db      	lsls	r3, r3, #3
70009e88:	440b      	add	r3, r1
70009e8a:	3312      	adds	r3, #18
70009e8c:	2200      	movs	r2, #0
70009e8e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
70009e90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
70009e94:	4907      	ldr	r1, [pc, #28]	@ (70009eb4 <etharp_find_entry+0x2d4>)
70009e96:	4613      	mov	r3, r2
70009e98:	005b      	lsls	r3, r3, #1
70009e9a:	4413      	add	r3, r2
70009e9c:	00db      	lsls	r3, r3, #3
70009e9e:	440b      	add	r3, r1
70009ea0:	3308      	adds	r3, #8
70009ea2:	687a      	ldr	r2, [r7, #4]
70009ea4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
70009ea6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
70009eaa:	4618      	mov	r0, r3
70009eac:	3728      	adds	r7, #40	@ 0x28
70009eae:	46bd      	mov	sp, r7
70009eb0:	bd80      	pop	{r7, pc}
70009eb2:	bf00      	nop
70009eb4:	24005274 	.word	0x24005274
70009eb8:	70014c94 	.word	0x70014c94
70009ebc:	70014cf8 	.word	0x70014cf8
70009ec0:	70014d38 	.word	0x70014d38
70009ec4:	70014d60 	.word	0x70014d60
70009ec8:	70014d78 	.word	0x70014d78
70009ecc:	70014d8c 	.word	0x70014d8c

70009ed0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
70009ed0:	b580      	push	{r7, lr}
70009ed2:	b088      	sub	sp, #32
70009ed4:	af02      	add	r7, sp, #8
70009ed6:	60f8      	str	r0, [r7, #12]
70009ed8:	60b9      	str	r1, [r7, #8]
70009eda:	607a      	str	r2, [r7, #4]
70009edc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
70009ede:	68fb      	ldr	r3, [r7, #12]
70009ee0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
70009ee4:	2b06      	cmp	r3, #6
70009ee6:	d006      	beq.n	70009ef6 <etharp_update_arp_entry+0x26>
70009ee8:	4b48      	ldr	r3, [pc, #288]	@ (7000a00c <etharp_update_arp_entry+0x13c>)
70009eea:	f240 12a9 	movw	r2, #425	@ 0x1a9
70009eee:	4948      	ldr	r1, [pc, #288]	@ (7000a010 <etharp_update_arp_entry+0x140>)
70009ef0:	4848      	ldr	r0, [pc, #288]	@ (7000a014 <etharp_update_arp_entry+0x144>)
70009ef2:	f009 ff15 	bl	70013d20 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
70009ef6:	68bb      	ldr	r3, [r7, #8]
70009ef8:	2b00      	cmp	r3, #0
70009efa:	d012      	beq.n	70009f22 <etharp_update_arp_entry+0x52>
70009efc:	68bb      	ldr	r3, [r7, #8]
70009efe:	681b      	ldr	r3, [r3, #0]
70009f00:	2b00      	cmp	r3, #0
70009f02:	d00e      	beq.n	70009f22 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
70009f04:	68bb      	ldr	r3, [r7, #8]
70009f06:	681b      	ldr	r3, [r3, #0]
70009f08:	68f9      	ldr	r1, [r7, #12]
70009f0a:	4618      	mov	r0, r3
70009f0c:	f001 faec 	bl	7000b4e8 <ip4_addr_isbroadcast_u32>
70009f10:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
70009f12:	2b00      	cmp	r3, #0
70009f14:	d105      	bne.n	70009f22 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
70009f16:	68bb      	ldr	r3, [r7, #8]
70009f18:	681b      	ldr	r3, [r3, #0]
70009f1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
70009f1e:	2be0      	cmp	r3, #224	@ 0xe0
70009f20:	d102      	bne.n	70009f28 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
70009f22:	f06f 030f 	mvn.w	r3, #15
70009f26:	e06c      	b.n	7000a002 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
70009f28:	78fb      	ldrb	r3, [r7, #3]
70009f2a:	68fa      	ldr	r2, [r7, #12]
70009f2c:	4619      	mov	r1, r3
70009f2e:	68b8      	ldr	r0, [r7, #8]
70009f30:	f7ff fe56 	bl	70009be0 <etharp_find_entry>
70009f34:	4603      	mov	r3, r0
70009f36:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
70009f38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
70009f3c:	2b00      	cmp	r3, #0
70009f3e:	da02      	bge.n	70009f46 <etharp_update_arp_entry+0x76>
    return (err_t)i;
70009f40:	8afb      	ldrh	r3, [r7, #22]
70009f42:	b25b      	sxtb	r3, r3
70009f44:	e05d      	b.n	7000a002 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
70009f46:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
70009f4a:	4933      	ldr	r1, [pc, #204]	@ (7000a018 <etharp_update_arp_entry+0x148>)
70009f4c:	4613      	mov	r3, r2
70009f4e:	005b      	lsls	r3, r3, #1
70009f50:	4413      	add	r3, r2
70009f52:	00db      	lsls	r3, r3, #3
70009f54:	440b      	add	r3, r1
70009f56:	3314      	adds	r3, #20
70009f58:	2202      	movs	r2, #2
70009f5a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
70009f5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
70009f60:	492d      	ldr	r1, [pc, #180]	@ (7000a018 <etharp_update_arp_entry+0x148>)
70009f62:	4613      	mov	r3, r2
70009f64:	005b      	lsls	r3, r3, #1
70009f66:	4413      	add	r3, r2
70009f68:	00db      	lsls	r3, r3, #3
70009f6a:	440b      	add	r3, r1
70009f6c:	3308      	adds	r3, #8
70009f6e:	68fa      	ldr	r2, [r7, #12]
70009f70:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
70009f72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
70009f76:	4613      	mov	r3, r2
70009f78:	005b      	lsls	r3, r3, #1
70009f7a:	4413      	add	r3, r2
70009f7c:	00db      	lsls	r3, r3, #3
70009f7e:	3308      	adds	r3, #8
70009f80:	4a25      	ldr	r2, [pc, #148]	@ (7000a018 <etharp_update_arp_entry+0x148>)
70009f82:	4413      	add	r3, r2
70009f84:	3304      	adds	r3, #4
70009f86:	2206      	movs	r2, #6
70009f88:	6879      	ldr	r1, [r7, #4]
70009f8a:	4618      	mov	r0, r3
70009f8c:	f009 fff9 	bl	70013f82 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
70009f90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
70009f94:	4920      	ldr	r1, [pc, #128]	@ (7000a018 <etharp_update_arp_entry+0x148>)
70009f96:	4613      	mov	r3, r2
70009f98:	005b      	lsls	r3, r3, #1
70009f9a:	4413      	add	r3, r2
70009f9c:	00db      	lsls	r3, r3, #3
70009f9e:	440b      	add	r3, r1
70009fa0:	3312      	adds	r3, #18
70009fa2:	2200      	movs	r2, #0
70009fa4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
70009fa6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
70009faa:	491b      	ldr	r1, [pc, #108]	@ (7000a018 <etharp_update_arp_entry+0x148>)
70009fac:	4613      	mov	r3, r2
70009fae:	005b      	lsls	r3, r3, #1
70009fb0:	4413      	add	r3, r2
70009fb2:	00db      	lsls	r3, r3, #3
70009fb4:	440b      	add	r3, r1
70009fb6:	681b      	ldr	r3, [r3, #0]
70009fb8:	2b00      	cmp	r3, #0
70009fba:	d021      	beq.n	7000a000 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
70009fbc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
70009fc0:	4915      	ldr	r1, [pc, #84]	@ (7000a018 <etharp_update_arp_entry+0x148>)
70009fc2:	4613      	mov	r3, r2
70009fc4:	005b      	lsls	r3, r3, #1
70009fc6:	4413      	add	r3, r2
70009fc8:	00db      	lsls	r3, r3, #3
70009fca:	440b      	add	r3, r1
70009fcc:	681b      	ldr	r3, [r3, #0]
70009fce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
70009fd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
70009fd4:	4910      	ldr	r1, [pc, #64]	@ (7000a018 <etharp_update_arp_entry+0x148>)
70009fd6:	4613      	mov	r3, r2
70009fd8:	005b      	lsls	r3, r3, #1
70009fda:	4413      	add	r3, r2
70009fdc:	00db      	lsls	r3, r3, #3
70009fde:	440b      	add	r3, r1
70009fe0:	2200      	movs	r2, #0
70009fe2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
70009fe4:	68fb      	ldr	r3, [r7, #12]
70009fe6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
70009fea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
70009fee:	9300      	str	r3, [sp, #0]
70009ff0:	687b      	ldr	r3, [r7, #4]
70009ff2:	6939      	ldr	r1, [r7, #16]
70009ff4:	68f8      	ldr	r0, [r7, #12]
70009ff6:	f000 fd01 	bl	7000a9fc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
70009ffa:	6938      	ldr	r0, [r7, #16]
70009ffc:	f003 fc24 	bl	7000d848 <pbuf_free>
  }
  return ERR_OK;
7000a000:	2300      	movs	r3, #0
}
7000a002:	4618      	mov	r0, r3
7000a004:	3718      	adds	r7, #24
7000a006:	46bd      	mov	sp, r7
7000a008:	bd80      	pop	{r7, pc}
7000a00a:	bf00      	nop
7000a00c:	70014c94 	.word	0x70014c94
7000a010:	70014db8 	.word	0x70014db8
7000a014:	70014d38 	.word	0x70014d38
7000a018:	24005274 	.word	0x24005274

7000a01c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
7000a01c:	b580      	push	{r7, lr}
7000a01e:	b084      	sub	sp, #16
7000a020:	af00      	add	r7, sp, #0
7000a022:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
7000a024:	2300      	movs	r3, #0
7000a026:	60fb      	str	r3, [r7, #12]
7000a028:	e01e      	b.n	7000a068 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
7000a02a:	4913      	ldr	r1, [pc, #76]	@ (7000a078 <etharp_cleanup_netif+0x5c>)
7000a02c:	68fa      	ldr	r2, [r7, #12]
7000a02e:	4613      	mov	r3, r2
7000a030:	005b      	lsls	r3, r3, #1
7000a032:	4413      	add	r3, r2
7000a034:	00db      	lsls	r3, r3, #3
7000a036:	440b      	add	r3, r1
7000a038:	3314      	adds	r3, #20
7000a03a:	781b      	ldrb	r3, [r3, #0]
7000a03c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
7000a03e:	7afb      	ldrb	r3, [r7, #11]
7000a040:	2b00      	cmp	r3, #0
7000a042:	d00e      	beq.n	7000a062 <etharp_cleanup_netif+0x46>
7000a044:	490c      	ldr	r1, [pc, #48]	@ (7000a078 <etharp_cleanup_netif+0x5c>)
7000a046:	68fa      	ldr	r2, [r7, #12]
7000a048:	4613      	mov	r3, r2
7000a04a:	005b      	lsls	r3, r3, #1
7000a04c:	4413      	add	r3, r2
7000a04e:	00db      	lsls	r3, r3, #3
7000a050:	440b      	add	r3, r1
7000a052:	3308      	adds	r3, #8
7000a054:	681b      	ldr	r3, [r3, #0]
7000a056:	687a      	ldr	r2, [r7, #4]
7000a058:	429a      	cmp	r2, r3
7000a05a:	d102      	bne.n	7000a062 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
7000a05c:	68f8      	ldr	r0, [r7, #12]
7000a05e:	f7ff fce5 	bl	70009a2c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
7000a062:	68fb      	ldr	r3, [r7, #12]
7000a064:	3301      	adds	r3, #1
7000a066:	60fb      	str	r3, [r7, #12]
7000a068:	68fb      	ldr	r3, [r7, #12]
7000a06a:	2b09      	cmp	r3, #9
7000a06c:	dddd      	ble.n	7000a02a <etharp_cleanup_netif+0xe>
    }
  }
}
7000a06e:	bf00      	nop
7000a070:	bf00      	nop
7000a072:	3710      	adds	r7, #16
7000a074:	46bd      	mov	sp, r7
7000a076:	bd80      	pop	{r7, pc}
7000a078:	24005274 	.word	0x24005274

7000a07c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
7000a07c:	b5b0      	push	{r4, r5, r7, lr}
7000a07e:	b08a      	sub	sp, #40	@ 0x28
7000a080:	af04      	add	r7, sp, #16
7000a082:	6078      	str	r0, [r7, #4]
7000a084:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
7000a086:	683b      	ldr	r3, [r7, #0]
7000a088:	2b00      	cmp	r3, #0
7000a08a:	d06f      	beq.n	7000a16c <etharp_input+0xf0>

  hdr = (struct etharp_hdr *)p->payload;
7000a08c:	687b      	ldr	r3, [r7, #4]
7000a08e:	685b      	ldr	r3, [r3, #4]
7000a090:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
7000a092:	693b      	ldr	r3, [r7, #16]
7000a094:	881b      	ldrh	r3, [r3, #0]
7000a096:	b29b      	uxth	r3, r3
7000a098:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
7000a09c:	d10c      	bne.n	7000a0b8 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
7000a09e:	693b      	ldr	r3, [r7, #16]
7000a0a0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
7000a0a2:	2b06      	cmp	r3, #6
7000a0a4:	d108      	bne.n	7000a0b8 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
7000a0a6:	693b      	ldr	r3, [r7, #16]
7000a0a8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
7000a0aa:	2b04      	cmp	r3, #4
7000a0ac:	d104      	bne.n	7000a0b8 <etharp_input+0x3c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
7000a0ae:	693b      	ldr	r3, [r7, #16]
7000a0b0:	885b      	ldrh	r3, [r3, #2]
7000a0b2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
7000a0b4:	2b08      	cmp	r3, #8
7000a0b6:	d003      	beq.n	7000a0c0 <etharp_input+0x44>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
7000a0b8:	6878      	ldr	r0, [r7, #4]
7000a0ba:	f003 fbc5 	bl	7000d848 <pbuf_free>
    return;
7000a0be:	e055      	b.n	7000a16c <etharp_input+0xf0>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
7000a0c0:	693b      	ldr	r3, [r7, #16]
7000a0c2:	330e      	adds	r3, #14
7000a0c4:	681b      	ldr	r3, [r3, #0]
7000a0c6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
7000a0c8:	693b      	ldr	r3, [r7, #16]
7000a0ca:	3318      	adds	r3, #24
7000a0cc:	681b      	ldr	r3, [r3, #0]
7000a0ce:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
7000a0d0:	683b      	ldr	r3, [r7, #0]
7000a0d2:	3304      	adds	r3, #4
7000a0d4:	681b      	ldr	r3, [r3, #0]
7000a0d6:	2b00      	cmp	r3, #0
7000a0d8:	d102      	bne.n	7000a0e0 <etharp_input+0x64>
    for_us = 0;
7000a0da:	2300      	movs	r3, #0
7000a0dc:	75fb      	strb	r3, [r7, #23]
7000a0de:	e009      	b.n	7000a0f4 <etharp_input+0x78>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
7000a0e0:	68ba      	ldr	r2, [r7, #8]
7000a0e2:	683b      	ldr	r3, [r7, #0]
7000a0e4:	3304      	adds	r3, #4
7000a0e6:	681b      	ldr	r3, [r3, #0]
7000a0e8:	429a      	cmp	r2, r3
7000a0ea:	bf0c      	ite	eq
7000a0ec:	2301      	moveq	r3, #1
7000a0ee:	2300      	movne	r3, #0
7000a0f0:	b2db      	uxtb	r3, r3
7000a0f2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
7000a0f4:	693b      	ldr	r3, [r7, #16]
7000a0f6:	f103 0208 	add.w	r2, r3, #8
7000a0fa:	7dfb      	ldrb	r3, [r7, #23]
7000a0fc:	2b00      	cmp	r3, #0
7000a0fe:	d001      	beq.n	7000a104 <etharp_input+0x88>
7000a100:	2301      	movs	r3, #1
7000a102:	e000      	b.n	7000a106 <etharp_input+0x8a>
7000a104:	2302      	movs	r3, #2
7000a106:	f107 010c 	add.w	r1, r7, #12
7000a10a:	6838      	ldr	r0, [r7, #0]
7000a10c:	f7ff fee0 	bl	70009ed0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
7000a110:	693b      	ldr	r3, [r7, #16]
7000a112:	88db      	ldrh	r3, [r3, #6]
7000a114:	b29b      	uxth	r3, r3
7000a116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
7000a11a:	d003      	beq.n	7000a124 <etharp_input+0xa8>
7000a11c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
7000a120:	d01e      	beq.n	7000a160 <etharp_input+0xe4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
7000a122:	e020      	b.n	7000a166 <etharp_input+0xea>
      if (for_us) {
7000a124:	7dfb      	ldrb	r3, [r7, #23]
7000a126:	2b00      	cmp	r3, #0
7000a128:	d01c      	beq.n	7000a164 <etharp_input+0xe8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
7000a12a:	683b      	ldr	r3, [r7, #0]
7000a12c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
7000a130:	693b      	ldr	r3, [r7, #16]
7000a132:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
7000a136:	683b      	ldr	r3, [r7, #0]
7000a138:	f103 0526 	add.w	r5, r3, #38	@ 0x26
7000a13c:	683b      	ldr	r3, [r7, #0]
7000a13e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
7000a140:	693a      	ldr	r2, [r7, #16]
7000a142:	3208      	adds	r2, #8
        etharp_raw(netif,
7000a144:	2102      	movs	r1, #2
7000a146:	9103      	str	r1, [sp, #12]
7000a148:	f107 010c 	add.w	r1, r7, #12
7000a14c:	9102      	str	r1, [sp, #8]
7000a14e:	9201      	str	r2, [sp, #4]
7000a150:	9300      	str	r3, [sp, #0]
7000a152:	462b      	mov	r3, r5
7000a154:	4622      	mov	r2, r4
7000a156:	4601      	mov	r1, r0
7000a158:	6838      	ldr	r0, [r7, #0]
7000a15a:	f000 fb01 	bl	7000a760 <etharp_raw>
      break;
7000a15e:	e001      	b.n	7000a164 <etharp_input+0xe8>
      break;
7000a160:	bf00      	nop
7000a162:	e000      	b.n	7000a166 <etharp_input+0xea>
      break;
7000a164:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
7000a166:	6878      	ldr	r0, [r7, #4]
7000a168:	f003 fb6e 	bl	7000d848 <pbuf_free>
}
7000a16c:	3718      	adds	r7, #24
7000a16e:	46bd      	mov	sp, r7
7000a170:	bdb0      	pop	{r4, r5, r7, pc}
	...

7000a174 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
7000a174:	b580      	push	{r7, lr}
7000a176:	b086      	sub	sp, #24
7000a178:	af02      	add	r7, sp, #8
7000a17a:	60f8      	str	r0, [r7, #12]
7000a17c:	60b9      	str	r1, [r7, #8]
7000a17e:	4613      	mov	r3, r2
7000a180:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
7000a182:	79fa      	ldrb	r2, [r7, #7]
7000a184:	4944      	ldr	r1, [pc, #272]	@ (7000a298 <etharp_output_to_arp_index+0x124>)
7000a186:	4613      	mov	r3, r2
7000a188:	005b      	lsls	r3, r3, #1
7000a18a:	4413      	add	r3, r2
7000a18c:	00db      	lsls	r3, r3, #3
7000a18e:	440b      	add	r3, r1
7000a190:	3314      	adds	r3, #20
7000a192:	781b      	ldrb	r3, [r3, #0]
7000a194:	2b01      	cmp	r3, #1
7000a196:	d806      	bhi.n	7000a1a6 <etharp_output_to_arp_index+0x32>
7000a198:	4b40      	ldr	r3, [pc, #256]	@ (7000a29c <etharp_output_to_arp_index+0x128>)
7000a19a:	f240 22ee 	movw	r2, #750	@ 0x2ee
7000a19e:	4940      	ldr	r1, [pc, #256]	@ (7000a2a0 <etharp_output_to_arp_index+0x12c>)
7000a1a0:	4840      	ldr	r0, [pc, #256]	@ (7000a2a4 <etharp_output_to_arp_index+0x130>)
7000a1a2:	f009 fdbd 	bl	70013d20 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
7000a1a6:	79fa      	ldrb	r2, [r7, #7]
7000a1a8:	493b      	ldr	r1, [pc, #236]	@ (7000a298 <etharp_output_to_arp_index+0x124>)
7000a1aa:	4613      	mov	r3, r2
7000a1ac:	005b      	lsls	r3, r3, #1
7000a1ae:	4413      	add	r3, r2
7000a1b0:	00db      	lsls	r3, r3, #3
7000a1b2:	440b      	add	r3, r1
7000a1b4:	3314      	adds	r3, #20
7000a1b6:	781b      	ldrb	r3, [r3, #0]
7000a1b8:	2b02      	cmp	r3, #2
7000a1ba:	d153      	bne.n	7000a264 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
7000a1bc:	79fa      	ldrb	r2, [r7, #7]
7000a1be:	4936      	ldr	r1, [pc, #216]	@ (7000a298 <etharp_output_to_arp_index+0x124>)
7000a1c0:	4613      	mov	r3, r2
7000a1c2:	005b      	lsls	r3, r3, #1
7000a1c4:	4413      	add	r3, r2
7000a1c6:	00db      	lsls	r3, r3, #3
7000a1c8:	440b      	add	r3, r1
7000a1ca:	3312      	adds	r3, #18
7000a1cc:	881b      	ldrh	r3, [r3, #0]
7000a1ce:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
7000a1d2:	d919      	bls.n	7000a208 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
7000a1d4:	79fa      	ldrb	r2, [r7, #7]
7000a1d6:	4613      	mov	r3, r2
7000a1d8:	005b      	lsls	r3, r3, #1
7000a1da:	4413      	add	r3, r2
7000a1dc:	00db      	lsls	r3, r3, #3
7000a1de:	4a2e      	ldr	r2, [pc, #184]	@ (7000a298 <etharp_output_to_arp_index+0x124>)
7000a1e0:	4413      	add	r3, r2
7000a1e2:	3304      	adds	r3, #4
7000a1e4:	4619      	mov	r1, r3
7000a1e6:	68f8      	ldr	r0, [r7, #12]
7000a1e8:	f000 fb68 	bl	7000a8bc <etharp_request>
7000a1ec:	4603      	mov	r3, r0
7000a1ee:	2b00      	cmp	r3, #0
7000a1f0:	d138      	bne.n	7000a264 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
7000a1f2:	79fa      	ldrb	r2, [r7, #7]
7000a1f4:	4928      	ldr	r1, [pc, #160]	@ (7000a298 <etharp_output_to_arp_index+0x124>)
7000a1f6:	4613      	mov	r3, r2
7000a1f8:	005b      	lsls	r3, r3, #1
7000a1fa:	4413      	add	r3, r2
7000a1fc:	00db      	lsls	r3, r3, #3
7000a1fe:	440b      	add	r3, r1
7000a200:	3314      	adds	r3, #20
7000a202:	2203      	movs	r2, #3
7000a204:	701a      	strb	r2, [r3, #0]
7000a206:	e02d      	b.n	7000a264 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
7000a208:	79fa      	ldrb	r2, [r7, #7]
7000a20a:	4923      	ldr	r1, [pc, #140]	@ (7000a298 <etharp_output_to_arp_index+0x124>)
7000a20c:	4613      	mov	r3, r2
7000a20e:	005b      	lsls	r3, r3, #1
7000a210:	4413      	add	r3, r2
7000a212:	00db      	lsls	r3, r3, #3
7000a214:	440b      	add	r3, r1
7000a216:	3312      	adds	r3, #18
7000a218:	881b      	ldrh	r3, [r3, #0]
7000a21a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
7000a21e:	d321      	bcc.n	7000a264 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
7000a220:	79fa      	ldrb	r2, [r7, #7]
7000a222:	4613      	mov	r3, r2
7000a224:	005b      	lsls	r3, r3, #1
7000a226:	4413      	add	r3, r2
7000a228:	00db      	lsls	r3, r3, #3
7000a22a:	4a1b      	ldr	r2, [pc, #108]	@ (7000a298 <etharp_output_to_arp_index+0x124>)
7000a22c:	4413      	add	r3, r2
7000a22e:	1d19      	adds	r1, r3, #4
7000a230:	79fa      	ldrb	r2, [r7, #7]
7000a232:	4613      	mov	r3, r2
7000a234:	005b      	lsls	r3, r3, #1
7000a236:	4413      	add	r3, r2
7000a238:	00db      	lsls	r3, r3, #3
7000a23a:	3308      	adds	r3, #8
7000a23c:	4a16      	ldr	r2, [pc, #88]	@ (7000a298 <etharp_output_to_arp_index+0x124>)
7000a23e:	4413      	add	r3, r2
7000a240:	3304      	adds	r3, #4
7000a242:	461a      	mov	r2, r3
7000a244:	68f8      	ldr	r0, [r7, #12]
7000a246:	f000 fb17 	bl	7000a878 <etharp_request_dst>
7000a24a:	4603      	mov	r3, r0
7000a24c:	2b00      	cmp	r3, #0
7000a24e:	d109      	bne.n	7000a264 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
7000a250:	79fa      	ldrb	r2, [r7, #7]
7000a252:	4911      	ldr	r1, [pc, #68]	@ (7000a298 <etharp_output_to_arp_index+0x124>)
7000a254:	4613      	mov	r3, r2
7000a256:	005b      	lsls	r3, r3, #1
7000a258:	4413      	add	r3, r2
7000a25a:	00db      	lsls	r3, r3, #3
7000a25c:	440b      	add	r3, r1
7000a25e:	3314      	adds	r3, #20
7000a260:	2203      	movs	r2, #3
7000a262:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
7000a264:	68fb      	ldr	r3, [r7, #12]
7000a266:	f103 0126 	add.w	r1, r3, #38	@ 0x26
7000a26a:	79fa      	ldrb	r2, [r7, #7]
7000a26c:	4613      	mov	r3, r2
7000a26e:	005b      	lsls	r3, r3, #1
7000a270:	4413      	add	r3, r2
7000a272:	00db      	lsls	r3, r3, #3
7000a274:	3308      	adds	r3, #8
7000a276:	4a08      	ldr	r2, [pc, #32]	@ (7000a298 <etharp_output_to_arp_index+0x124>)
7000a278:	4413      	add	r3, r2
7000a27a:	3304      	adds	r3, #4
7000a27c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
7000a280:	9200      	str	r2, [sp, #0]
7000a282:	460a      	mov	r2, r1
7000a284:	68b9      	ldr	r1, [r7, #8]
7000a286:	68f8      	ldr	r0, [r7, #12]
7000a288:	f000 fbb8 	bl	7000a9fc <ethernet_output>
7000a28c:	4603      	mov	r3, r0
}
7000a28e:	4618      	mov	r0, r3
7000a290:	3710      	adds	r7, #16
7000a292:	46bd      	mov	sp, r7
7000a294:	bd80      	pop	{r7, pc}
7000a296:	bf00      	nop
7000a298:	24005274 	.word	0x24005274
7000a29c:	70014c94 	.word	0x70014c94
7000a2a0:	70014e30 	.word	0x70014e30
7000a2a4:	70014d38 	.word	0x70014d38

7000a2a8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
7000a2a8:	b580      	push	{r7, lr}
7000a2aa:	b08a      	sub	sp, #40	@ 0x28
7000a2ac:	af02      	add	r7, sp, #8
7000a2ae:	60f8      	str	r0, [r7, #12]
7000a2b0:	60b9      	str	r1, [r7, #8]
7000a2b2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
7000a2b4:	687b      	ldr	r3, [r7, #4]
7000a2b6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
7000a2b8:	68fb      	ldr	r3, [r7, #12]
7000a2ba:	2b00      	cmp	r3, #0
7000a2bc:	d106      	bne.n	7000a2cc <etharp_output+0x24>
7000a2be:	4b73      	ldr	r3, [pc, #460]	@ (7000a48c <etharp_output+0x1e4>)
7000a2c0:	f240 321e 	movw	r2, #798	@ 0x31e
7000a2c4:	4972      	ldr	r1, [pc, #456]	@ (7000a490 <etharp_output+0x1e8>)
7000a2c6:	4873      	ldr	r0, [pc, #460]	@ (7000a494 <etharp_output+0x1ec>)
7000a2c8:	f009 fd2a 	bl	70013d20 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
7000a2cc:	68bb      	ldr	r3, [r7, #8]
7000a2ce:	2b00      	cmp	r3, #0
7000a2d0:	d106      	bne.n	7000a2e0 <etharp_output+0x38>
7000a2d2:	4b6e      	ldr	r3, [pc, #440]	@ (7000a48c <etharp_output+0x1e4>)
7000a2d4:	f240 321f 	movw	r2, #799	@ 0x31f
7000a2d8:	496f      	ldr	r1, [pc, #444]	@ (7000a498 <etharp_output+0x1f0>)
7000a2da:	486e      	ldr	r0, [pc, #440]	@ (7000a494 <etharp_output+0x1ec>)
7000a2dc:	f009 fd20 	bl	70013d20 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
7000a2e0:	687b      	ldr	r3, [r7, #4]
7000a2e2:	2b00      	cmp	r3, #0
7000a2e4:	d106      	bne.n	7000a2f4 <etharp_output+0x4c>
7000a2e6:	4b69      	ldr	r3, [pc, #420]	@ (7000a48c <etharp_output+0x1e4>)
7000a2e8:	f44f 7248 	mov.w	r2, #800	@ 0x320
7000a2ec:	496b      	ldr	r1, [pc, #428]	@ (7000a49c <etharp_output+0x1f4>)
7000a2ee:	4869      	ldr	r0, [pc, #420]	@ (7000a494 <etharp_output+0x1ec>)
7000a2f0:	f009 fd16 	bl	70013d20 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
7000a2f4:	687b      	ldr	r3, [r7, #4]
7000a2f6:	681b      	ldr	r3, [r3, #0]
7000a2f8:	68f9      	ldr	r1, [r7, #12]
7000a2fa:	4618      	mov	r0, r3
7000a2fc:	f001 f8f4 	bl	7000b4e8 <ip4_addr_isbroadcast_u32>
7000a300:	4603      	mov	r3, r0
7000a302:	2b00      	cmp	r3, #0
7000a304:	d002      	beq.n	7000a30c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
7000a306:	4b66      	ldr	r3, [pc, #408]	@ (7000a4a0 <etharp_output+0x1f8>)
7000a308:	61fb      	str	r3, [r7, #28]
7000a30a:	e0af      	b.n	7000a46c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
7000a30c:	687b      	ldr	r3, [r7, #4]
7000a30e:	681b      	ldr	r3, [r3, #0]
7000a310:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
7000a314:	2be0      	cmp	r3, #224	@ 0xe0
7000a316:	d118      	bne.n	7000a34a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
7000a318:	2301      	movs	r3, #1
7000a31a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
7000a31c:	2300      	movs	r3, #0
7000a31e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
7000a320:	235e      	movs	r3, #94	@ 0x5e
7000a322:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
7000a324:	687b      	ldr	r3, [r7, #4]
7000a326:	3301      	adds	r3, #1
7000a328:	781b      	ldrb	r3, [r3, #0]
7000a32a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
7000a32e:	b2db      	uxtb	r3, r3
7000a330:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
7000a332:	687b      	ldr	r3, [r7, #4]
7000a334:	3302      	adds	r3, #2
7000a336:	781b      	ldrb	r3, [r3, #0]
7000a338:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
7000a33a:	687b      	ldr	r3, [r7, #4]
7000a33c:	3303      	adds	r3, #3
7000a33e:	781b      	ldrb	r3, [r3, #0]
7000a340:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
7000a342:	f107 0310 	add.w	r3, r7, #16
7000a346:	61fb      	str	r3, [r7, #28]
7000a348:	e090      	b.n	7000a46c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
7000a34a:	687b      	ldr	r3, [r7, #4]
7000a34c:	681a      	ldr	r2, [r3, #0]
7000a34e:	68fb      	ldr	r3, [r7, #12]
7000a350:	3304      	adds	r3, #4
7000a352:	681b      	ldr	r3, [r3, #0]
7000a354:	405a      	eors	r2, r3
7000a356:	68fb      	ldr	r3, [r7, #12]
7000a358:	3308      	adds	r3, #8
7000a35a:	681b      	ldr	r3, [r3, #0]
7000a35c:	4013      	ands	r3, r2
7000a35e:	2b00      	cmp	r3, #0
7000a360:	d012      	beq.n	7000a388 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
7000a362:	687b      	ldr	r3, [r7, #4]
7000a364:	681b      	ldr	r3, [r3, #0]
7000a366:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
7000a368:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
7000a36c:	4293      	cmp	r3, r2
7000a36e:	d00b      	beq.n	7000a388 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
7000a370:	68fb      	ldr	r3, [r7, #12]
7000a372:	330c      	adds	r3, #12
7000a374:	681b      	ldr	r3, [r3, #0]
7000a376:	2b00      	cmp	r3, #0
7000a378:	d003      	beq.n	7000a382 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
7000a37a:	68fb      	ldr	r3, [r7, #12]
7000a37c:	330c      	adds	r3, #12
7000a37e:	61bb      	str	r3, [r7, #24]
7000a380:	e002      	b.n	7000a388 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
7000a382:	f06f 0303 	mvn.w	r3, #3
7000a386:	e07d      	b.n	7000a484 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
7000a388:	4b46      	ldr	r3, [pc, #280]	@ (7000a4a4 <etharp_output+0x1fc>)
7000a38a:	781b      	ldrb	r3, [r3, #0]
7000a38c:	4619      	mov	r1, r3
7000a38e:	4a46      	ldr	r2, [pc, #280]	@ (7000a4a8 <etharp_output+0x200>)
7000a390:	460b      	mov	r3, r1
7000a392:	005b      	lsls	r3, r3, #1
7000a394:	440b      	add	r3, r1
7000a396:	00db      	lsls	r3, r3, #3
7000a398:	4413      	add	r3, r2
7000a39a:	3314      	adds	r3, #20
7000a39c:	781b      	ldrb	r3, [r3, #0]
7000a39e:	2b01      	cmp	r3, #1
7000a3a0:	d925      	bls.n	7000a3ee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
7000a3a2:	4b40      	ldr	r3, [pc, #256]	@ (7000a4a4 <etharp_output+0x1fc>)
7000a3a4:	781b      	ldrb	r3, [r3, #0]
7000a3a6:	4619      	mov	r1, r3
7000a3a8:	4a3f      	ldr	r2, [pc, #252]	@ (7000a4a8 <etharp_output+0x200>)
7000a3aa:	460b      	mov	r3, r1
7000a3ac:	005b      	lsls	r3, r3, #1
7000a3ae:	440b      	add	r3, r1
7000a3b0:	00db      	lsls	r3, r3, #3
7000a3b2:	4413      	add	r3, r2
7000a3b4:	3308      	adds	r3, #8
7000a3b6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
7000a3b8:	68fa      	ldr	r2, [r7, #12]
7000a3ba:	429a      	cmp	r2, r3
7000a3bc:	d117      	bne.n	7000a3ee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
7000a3be:	69bb      	ldr	r3, [r7, #24]
7000a3c0:	681a      	ldr	r2, [r3, #0]
7000a3c2:	4b38      	ldr	r3, [pc, #224]	@ (7000a4a4 <etharp_output+0x1fc>)
7000a3c4:	781b      	ldrb	r3, [r3, #0]
7000a3c6:	4618      	mov	r0, r3
7000a3c8:	4937      	ldr	r1, [pc, #220]	@ (7000a4a8 <etharp_output+0x200>)
7000a3ca:	4603      	mov	r3, r0
7000a3cc:	005b      	lsls	r3, r3, #1
7000a3ce:	4403      	add	r3, r0
7000a3d0:	00db      	lsls	r3, r3, #3
7000a3d2:	440b      	add	r3, r1
7000a3d4:	3304      	adds	r3, #4
7000a3d6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
7000a3d8:	429a      	cmp	r2, r3
7000a3da:	d108      	bne.n	7000a3ee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
7000a3dc:	4b31      	ldr	r3, [pc, #196]	@ (7000a4a4 <etharp_output+0x1fc>)
7000a3de:	781b      	ldrb	r3, [r3, #0]
7000a3e0:	461a      	mov	r2, r3
7000a3e2:	68b9      	ldr	r1, [r7, #8]
7000a3e4:	68f8      	ldr	r0, [r7, #12]
7000a3e6:	f7ff fec5 	bl	7000a174 <etharp_output_to_arp_index>
7000a3ea:	4603      	mov	r3, r0
7000a3ec:	e04a      	b.n	7000a484 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
7000a3ee:	2300      	movs	r3, #0
7000a3f0:	75fb      	strb	r3, [r7, #23]
7000a3f2:	e031      	b.n	7000a458 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
7000a3f4:	7dfa      	ldrb	r2, [r7, #23]
7000a3f6:	492c      	ldr	r1, [pc, #176]	@ (7000a4a8 <etharp_output+0x200>)
7000a3f8:	4613      	mov	r3, r2
7000a3fa:	005b      	lsls	r3, r3, #1
7000a3fc:	4413      	add	r3, r2
7000a3fe:	00db      	lsls	r3, r3, #3
7000a400:	440b      	add	r3, r1
7000a402:	3314      	adds	r3, #20
7000a404:	781b      	ldrb	r3, [r3, #0]
7000a406:	2b01      	cmp	r3, #1
7000a408:	d923      	bls.n	7000a452 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
7000a40a:	7dfa      	ldrb	r2, [r7, #23]
7000a40c:	4926      	ldr	r1, [pc, #152]	@ (7000a4a8 <etharp_output+0x200>)
7000a40e:	4613      	mov	r3, r2
7000a410:	005b      	lsls	r3, r3, #1
7000a412:	4413      	add	r3, r2
7000a414:	00db      	lsls	r3, r3, #3
7000a416:	440b      	add	r3, r1
7000a418:	3308      	adds	r3, #8
7000a41a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
7000a41c:	68fa      	ldr	r2, [r7, #12]
7000a41e:	429a      	cmp	r2, r3
7000a420:	d117      	bne.n	7000a452 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
7000a422:	69bb      	ldr	r3, [r7, #24]
7000a424:	6819      	ldr	r1, [r3, #0]
7000a426:	7dfa      	ldrb	r2, [r7, #23]
7000a428:	481f      	ldr	r0, [pc, #124]	@ (7000a4a8 <etharp_output+0x200>)
7000a42a:	4613      	mov	r3, r2
7000a42c:	005b      	lsls	r3, r3, #1
7000a42e:	4413      	add	r3, r2
7000a430:	00db      	lsls	r3, r3, #3
7000a432:	4403      	add	r3, r0
7000a434:	3304      	adds	r3, #4
7000a436:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
7000a438:	4299      	cmp	r1, r3
7000a43a:	d10a      	bne.n	7000a452 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
7000a43c:	4a19      	ldr	r2, [pc, #100]	@ (7000a4a4 <etharp_output+0x1fc>)
7000a43e:	7dfb      	ldrb	r3, [r7, #23]
7000a440:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
7000a442:	7dfb      	ldrb	r3, [r7, #23]
7000a444:	461a      	mov	r2, r3
7000a446:	68b9      	ldr	r1, [r7, #8]
7000a448:	68f8      	ldr	r0, [r7, #12]
7000a44a:	f7ff fe93 	bl	7000a174 <etharp_output_to_arp_index>
7000a44e:	4603      	mov	r3, r0
7000a450:	e018      	b.n	7000a484 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
7000a452:	7dfb      	ldrb	r3, [r7, #23]
7000a454:	3301      	adds	r3, #1
7000a456:	75fb      	strb	r3, [r7, #23]
7000a458:	7dfb      	ldrb	r3, [r7, #23]
7000a45a:	2b09      	cmp	r3, #9
7000a45c:	d9ca      	bls.n	7000a3f4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
7000a45e:	68ba      	ldr	r2, [r7, #8]
7000a460:	69b9      	ldr	r1, [r7, #24]
7000a462:	68f8      	ldr	r0, [r7, #12]
7000a464:	f000 f822 	bl	7000a4ac <etharp_query>
7000a468:	4603      	mov	r3, r0
7000a46a:	e00b      	b.n	7000a484 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
7000a46c:	68fb      	ldr	r3, [r7, #12]
7000a46e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
7000a472:	f44f 6300 	mov.w	r3, #2048	@ 0x800
7000a476:	9300      	str	r3, [sp, #0]
7000a478:	69fb      	ldr	r3, [r7, #28]
7000a47a:	68b9      	ldr	r1, [r7, #8]
7000a47c:	68f8      	ldr	r0, [r7, #12]
7000a47e:	f000 fabd 	bl	7000a9fc <ethernet_output>
7000a482:	4603      	mov	r3, r0
}
7000a484:	4618      	mov	r0, r3
7000a486:	3720      	adds	r7, #32
7000a488:	46bd      	mov	sp, r7
7000a48a:	bd80      	pop	{r7, pc}
7000a48c:	70014c94 	.word	0x70014c94
7000a490:	70014e10 	.word	0x70014e10
7000a494:	70014d38 	.word	0x70014d38
7000a498:	70014e60 	.word	0x70014e60
7000a49c:	70014e00 	.word	0x70014e00
7000a4a0:	7001725c 	.word	0x7001725c
7000a4a4:	24005364 	.word	0x24005364
7000a4a8:	24005274 	.word	0x24005274

7000a4ac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
7000a4ac:	b580      	push	{r7, lr}
7000a4ae:	b08c      	sub	sp, #48	@ 0x30
7000a4b0:	af02      	add	r7, sp, #8
7000a4b2:	60f8      	str	r0, [r7, #12]
7000a4b4:	60b9      	str	r1, [r7, #8]
7000a4b6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
7000a4b8:	68fb      	ldr	r3, [r7, #12]
7000a4ba:	3326      	adds	r3, #38	@ 0x26
7000a4bc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
7000a4be:	23ff      	movs	r3, #255	@ 0xff
7000a4c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
7000a4c4:	2300      	movs	r3, #0
7000a4c6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
7000a4c8:	68bb      	ldr	r3, [r7, #8]
7000a4ca:	681b      	ldr	r3, [r3, #0]
7000a4cc:	68f9      	ldr	r1, [r7, #12]
7000a4ce:	4618      	mov	r0, r3
7000a4d0:	f001 f80a 	bl	7000b4e8 <ip4_addr_isbroadcast_u32>
7000a4d4:	4603      	mov	r3, r0
7000a4d6:	2b00      	cmp	r3, #0
7000a4d8:	d10c      	bne.n	7000a4f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
7000a4da:	68bb      	ldr	r3, [r7, #8]
7000a4dc:	681b      	ldr	r3, [r3, #0]
7000a4de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
7000a4e2:	2be0      	cmp	r3, #224	@ 0xe0
7000a4e4:	d006      	beq.n	7000a4f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
7000a4e6:	68bb      	ldr	r3, [r7, #8]
7000a4e8:	2b00      	cmp	r3, #0
7000a4ea:	d003      	beq.n	7000a4f4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
7000a4ec:	68bb      	ldr	r3, [r7, #8]
7000a4ee:	681b      	ldr	r3, [r3, #0]
7000a4f0:	2b00      	cmp	r3, #0
7000a4f2:	d102      	bne.n	7000a4fa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
7000a4f4:	f06f 030f 	mvn.w	r3, #15
7000a4f8:	e11d      	b.n	7000a736 <etharp_query+0x28a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
7000a4fa:	68fa      	ldr	r2, [r7, #12]
7000a4fc:	2101      	movs	r1, #1
7000a4fe:	68b8      	ldr	r0, [r7, #8]
7000a500:	f7ff fb6e 	bl	70009be0 <etharp_find_entry>
7000a504:	4603      	mov	r3, r0
7000a506:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
7000a508:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
7000a50c:	2b00      	cmp	r3, #0
7000a50e:	da02      	bge.n	7000a516 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
7000a510:	8a7b      	ldrh	r3, [r7, #18]
7000a512:	b25b      	sxtb	r3, r3
7000a514:	e10f      	b.n	7000a736 <etharp_query+0x28a>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
7000a516:	8a7b      	ldrh	r3, [r7, #18]
7000a518:	2b7e      	cmp	r3, #126	@ 0x7e
7000a51a:	d906      	bls.n	7000a52a <etharp_query+0x7e>
7000a51c:	4b88      	ldr	r3, [pc, #544]	@ (7000a740 <etharp_query+0x294>)
7000a51e:	f240 32c1 	movw	r2, #961	@ 0x3c1
7000a522:	4988      	ldr	r1, [pc, #544]	@ (7000a744 <etharp_query+0x298>)
7000a524:	4888      	ldr	r0, [pc, #544]	@ (7000a748 <etharp_query+0x29c>)
7000a526:	f009 fbfb 	bl	70013d20 <iprintf>
  i = (netif_addr_idx_t)i_err;
7000a52a:	8a7b      	ldrh	r3, [r7, #18]
7000a52c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
7000a52e:	7c7a      	ldrb	r2, [r7, #17]
7000a530:	4986      	ldr	r1, [pc, #536]	@ (7000a74c <etharp_query+0x2a0>)
7000a532:	4613      	mov	r3, r2
7000a534:	005b      	lsls	r3, r3, #1
7000a536:	4413      	add	r3, r2
7000a538:	00db      	lsls	r3, r3, #3
7000a53a:	440b      	add	r3, r1
7000a53c:	3314      	adds	r3, #20
7000a53e:	781b      	ldrb	r3, [r3, #0]
7000a540:	2b00      	cmp	r3, #0
7000a542:	d115      	bne.n	7000a570 <etharp_query+0xc4>
    is_new_entry = 1;
7000a544:	2301      	movs	r3, #1
7000a546:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
7000a548:	7c7a      	ldrb	r2, [r7, #17]
7000a54a:	4980      	ldr	r1, [pc, #512]	@ (7000a74c <etharp_query+0x2a0>)
7000a54c:	4613      	mov	r3, r2
7000a54e:	005b      	lsls	r3, r3, #1
7000a550:	4413      	add	r3, r2
7000a552:	00db      	lsls	r3, r3, #3
7000a554:	440b      	add	r3, r1
7000a556:	3314      	adds	r3, #20
7000a558:	2201      	movs	r2, #1
7000a55a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
7000a55c:	7c7a      	ldrb	r2, [r7, #17]
7000a55e:	497b      	ldr	r1, [pc, #492]	@ (7000a74c <etharp_query+0x2a0>)
7000a560:	4613      	mov	r3, r2
7000a562:	005b      	lsls	r3, r3, #1
7000a564:	4413      	add	r3, r2
7000a566:	00db      	lsls	r3, r3, #3
7000a568:	440b      	add	r3, r1
7000a56a:	3308      	adds	r3, #8
7000a56c:	68fa      	ldr	r2, [r7, #12]
7000a56e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
7000a570:	7c7a      	ldrb	r2, [r7, #17]
7000a572:	4976      	ldr	r1, [pc, #472]	@ (7000a74c <etharp_query+0x2a0>)
7000a574:	4613      	mov	r3, r2
7000a576:	005b      	lsls	r3, r3, #1
7000a578:	4413      	add	r3, r2
7000a57a:	00db      	lsls	r3, r3, #3
7000a57c:	440b      	add	r3, r1
7000a57e:	3314      	adds	r3, #20
7000a580:	781b      	ldrb	r3, [r3, #0]
7000a582:	2b01      	cmp	r3, #1
7000a584:	d011      	beq.n	7000a5aa <etharp_query+0xfe>
7000a586:	7c7a      	ldrb	r2, [r7, #17]
7000a588:	4970      	ldr	r1, [pc, #448]	@ (7000a74c <etharp_query+0x2a0>)
7000a58a:	4613      	mov	r3, r2
7000a58c:	005b      	lsls	r3, r3, #1
7000a58e:	4413      	add	r3, r2
7000a590:	00db      	lsls	r3, r3, #3
7000a592:	440b      	add	r3, r1
7000a594:	3314      	adds	r3, #20
7000a596:	781b      	ldrb	r3, [r3, #0]
7000a598:	2b01      	cmp	r3, #1
7000a59a:	d806      	bhi.n	7000a5aa <etharp_query+0xfe>
7000a59c:	4b68      	ldr	r3, [pc, #416]	@ (7000a740 <etharp_query+0x294>)
7000a59e:	f240 32cd 	movw	r2, #973	@ 0x3cd
7000a5a2:	496b      	ldr	r1, [pc, #428]	@ (7000a750 <etharp_query+0x2a4>)
7000a5a4:	4868      	ldr	r0, [pc, #416]	@ (7000a748 <etharp_query+0x29c>)
7000a5a6:	f009 fbbb 	bl	70013d20 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
7000a5aa:	6a3b      	ldr	r3, [r7, #32]
7000a5ac:	2b00      	cmp	r3, #0
7000a5ae:	d102      	bne.n	7000a5b6 <etharp_query+0x10a>
7000a5b0:	687b      	ldr	r3, [r7, #4]
7000a5b2:	2b00      	cmp	r3, #0
7000a5b4:	d128      	bne.n	7000a608 <etharp_query+0x15c>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
7000a5b6:	68b9      	ldr	r1, [r7, #8]
7000a5b8:	68f8      	ldr	r0, [r7, #12]
7000a5ba:	f000 f97f 	bl	7000a8bc <etharp_request>
7000a5be:	4603      	mov	r3, r0
7000a5c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (result != ERR_OK) {
7000a5c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
7000a5c8:	2b00      	cmp	r3, #0
7000a5ca:	d117      	bne.n	7000a5fc <etharp_query+0x150>
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    } else {
      /* ARP request successfully sent */
      if ((arp_table[i].state == ETHARP_STATE_PENDING) && !is_new_entry) {
7000a5cc:	7c7a      	ldrb	r2, [r7, #17]
7000a5ce:	495f      	ldr	r1, [pc, #380]	@ (7000a74c <etharp_query+0x2a0>)
7000a5d0:	4613      	mov	r3, r2
7000a5d2:	005b      	lsls	r3, r3, #1
7000a5d4:	4413      	add	r3, r2
7000a5d6:	00db      	lsls	r3, r3, #3
7000a5d8:	440b      	add	r3, r1
7000a5da:	3314      	adds	r3, #20
7000a5dc:	781b      	ldrb	r3, [r3, #0]
7000a5de:	2b01      	cmp	r3, #1
7000a5e0:	d10c      	bne.n	7000a5fc <etharp_query+0x150>
7000a5e2:	6a3b      	ldr	r3, [r7, #32]
7000a5e4:	2b00      	cmp	r3, #0
7000a5e6:	d109      	bne.n	7000a5fc <etharp_query+0x150>
        /* A new ARP request has been sent for a pending entry. Reset the ctime to
           not let it expire too fast. */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: reset ctime for entry %"S16_F"\n", (s16_t)i));
        arp_table[i].ctime = 0;
7000a5e8:	7c7a      	ldrb	r2, [r7, #17]
7000a5ea:	4958      	ldr	r1, [pc, #352]	@ (7000a74c <etharp_query+0x2a0>)
7000a5ec:	4613      	mov	r3, r2
7000a5ee:	005b      	lsls	r3, r3, #1
7000a5f0:	4413      	add	r3, r2
7000a5f2:	00db      	lsls	r3, r3, #3
7000a5f4:	440b      	add	r3, r1
7000a5f6:	3312      	adds	r3, #18
7000a5f8:	2200      	movs	r2, #0
7000a5fa:	801a      	strh	r2, [r3, #0]
      }
    }
    if (q == NULL) {
7000a5fc:	687b      	ldr	r3, [r7, #4]
7000a5fe:	2b00      	cmp	r3, #0
7000a600:	d102      	bne.n	7000a608 <etharp_query+0x15c>
      return result;
7000a602:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
7000a606:	e096      	b.n	7000a736 <etharp_query+0x28a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
7000a608:	687b      	ldr	r3, [r7, #4]
7000a60a:	2b00      	cmp	r3, #0
7000a60c:	d106      	bne.n	7000a61c <etharp_query+0x170>
7000a60e:	4b4c      	ldr	r3, [pc, #304]	@ (7000a740 <etharp_query+0x294>)
7000a610:	f240 32e9 	movw	r2, #1001	@ 0x3e9
7000a614:	494f      	ldr	r1, [pc, #316]	@ (7000a754 <etharp_query+0x2a8>)
7000a616:	484c      	ldr	r0, [pc, #304]	@ (7000a748 <etharp_query+0x29c>)
7000a618:	f009 fb82 	bl	70013d20 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
7000a61c:	7c7a      	ldrb	r2, [r7, #17]
7000a61e:	494b      	ldr	r1, [pc, #300]	@ (7000a74c <etharp_query+0x2a0>)
7000a620:	4613      	mov	r3, r2
7000a622:	005b      	lsls	r3, r3, #1
7000a624:	4413      	add	r3, r2
7000a626:	00db      	lsls	r3, r3, #3
7000a628:	440b      	add	r3, r1
7000a62a:	3314      	adds	r3, #20
7000a62c:	781b      	ldrb	r3, [r3, #0]
7000a62e:	2b01      	cmp	r3, #1
7000a630:	d917      	bls.n	7000a662 <etharp_query+0x1b6>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
7000a632:	4a49      	ldr	r2, [pc, #292]	@ (7000a758 <etharp_query+0x2ac>)
7000a634:	7c7b      	ldrb	r3, [r7, #17]
7000a636:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
7000a638:	7c7a      	ldrb	r2, [r7, #17]
7000a63a:	4613      	mov	r3, r2
7000a63c:	005b      	lsls	r3, r3, #1
7000a63e:	4413      	add	r3, r2
7000a640:	00db      	lsls	r3, r3, #3
7000a642:	3308      	adds	r3, #8
7000a644:	4a41      	ldr	r2, [pc, #260]	@ (7000a74c <etharp_query+0x2a0>)
7000a646:	4413      	add	r3, r2
7000a648:	3304      	adds	r3, #4
7000a64a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
7000a64e:	9200      	str	r2, [sp, #0]
7000a650:	697a      	ldr	r2, [r7, #20]
7000a652:	6879      	ldr	r1, [r7, #4]
7000a654:	68f8      	ldr	r0, [r7, #12]
7000a656:	f000 f9d1 	bl	7000a9fc <ethernet_output>
7000a65a:	4603      	mov	r3, r0
7000a65c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
7000a660:	e067      	b.n	7000a732 <etharp_query+0x286>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
7000a662:	7c7a      	ldrb	r2, [r7, #17]
7000a664:	4939      	ldr	r1, [pc, #228]	@ (7000a74c <etharp_query+0x2a0>)
7000a666:	4613      	mov	r3, r2
7000a668:	005b      	lsls	r3, r3, #1
7000a66a:	4413      	add	r3, r2
7000a66c:	00db      	lsls	r3, r3, #3
7000a66e:	440b      	add	r3, r1
7000a670:	3314      	adds	r3, #20
7000a672:	781b      	ldrb	r3, [r3, #0]
7000a674:	2b01      	cmp	r3, #1
7000a676:	d15c      	bne.n	7000a732 <etharp_query+0x286>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
7000a678:	2300      	movs	r3, #0
7000a67a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
7000a67c:	687b      	ldr	r3, [r7, #4]
7000a67e:	61fb      	str	r3, [r7, #28]
    while (p) {
7000a680:	e01c      	b.n	7000a6bc <etharp_query+0x210>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
7000a682:	69fb      	ldr	r3, [r7, #28]
7000a684:	895a      	ldrh	r2, [r3, #10]
7000a686:	69fb      	ldr	r3, [r7, #28]
7000a688:	891b      	ldrh	r3, [r3, #8]
7000a68a:	429a      	cmp	r2, r3
7000a68c:	d10a      	bne.n	7000a6a4 <etharp_query+0x1f8>
7000a68e:	69fb      	ldr	r3, [r7, #28]
7000a690:	681b      	ldr	r3, [r3, #0]
7000a692:	2b00      	cmp	r3, #0
7000a694:	d006      	beq.n	7000a6a4 <etharp_query+0x1f8>
7000a696:	4b2a      	ldr	r3, [pc, #168]	@ (7000a740 <etharp_query+0x294>)
7000a698:	f240 32f9 	movw	r2, #1017	@ 0x3f9
7000a69c:	492f      	ldr	r1, [pc, #188]	@ (7000a75c <etharp_query+0x2b0>)
7000a69e:	482a      	ldr	r0, [pc, #168]	@ (7000a748 <etharp_query+0x29c>)
7000a6a0:	f009 fb3e 	bl	70013d20 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
7000a6a4:	69fb      	ldr	r3, [r7, #28]
7000a6a6:	7b1b      	ldrb	r3, [r3, #12]
7000a6a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
7000a6ac:	2b00      	cmp	r3, #0
7000a6ae:	d002      	beq.n	7000a6b6 <etharp_query+0x20a>
        copy_needed = 1;
7000a6b0:	2301      	movs	r3, #1
7000a6b2:	61bb      	str	r3, [r7, #24]
        break;
7000a6b4:	e005      	b.n	7000a6c2 <etharp_query+0x216>
      }
      p = p->next;
7000a6b6:	69fb      	ldr	r3, [r7, #28]
7000a6b8:	681b      	ldr	r3, [r3, #0]
7000a6ba:	61fb      	str	r3, [r7, #28]
    while (p) {
7000a6bc:	69fb      	ldr	r3, [r7, #28]
7000a6be:	2b00      	cmp	r3, #0
7000a6c0:	d1df      	bne.n	7000a682 <etharp_query+0x1d6>
    }
    if (copy_needed) {
7000a6c2:	69bb      	ldr	r3, [r7, #24]
7000a6c4:	2b00      	cmp	r3, #0
7000a6c6:	d007      	beq.n	7000a6d8 <etharp_query+0x22c>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
7000a6c8:	687a      	ldr	r2, [r7, #4]
7000a6ca:	f44f 7120 	mov.w	r1, #640	@ 0x280
7000a6ce:	200e      	movs	r0, #14
7000a6d0:	f003 fb1e 	bl	7000dd10 <pbuf_clone>
7000a6d4:	61f8      	str	r0, [r7, #28]
7000a6d6:	e004      	b.n	7000a6e2 <etharp_query+0x236>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
7000a6d8:	687b      	ldr	r3, [r7, #4]
7000a6da:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
7000a6dc:	69f8      	ldr	r0, [r7, #28]
7000a6de:	f003 f959 	bl	7000d994 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
7000a6e2:	69fb      	ldr	r3, [r7, #28]
7000a6e4:	2b00      	cmp	r3, #0
7000a6e6:	d021      	beq.n	7000a72c <etharp_query+0x280>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
7000a6e8:	7c7a      	ldrb	r2, [r7, #17]
7000a6ea:	4918      	ldr	r1, [pc, #96]	@ (7000a74c <etharp_query+0x2a0>)
7000a6ec:	4613      	mov	r3, r2
7000a6ee:	005b      	lsls	r3, r3, #1
7000a6f0:	4413      	add	r3, r2
7000a6f2:	00db      	lsls	r3, r3, #3
7000a6f4:	440b      	add	r3, r1
7000a6f6:	681b      	ldr	r3, [r3, #0]
7000a6f8:	2b00      	cmp	r3, #0
7000a6fa:	d00a      	beq.n	7000a712 <etharp_query+0x266>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
7000a6fc:	7c7a      	ldrb	r2, [r7, #17]
7000a6fe:	4913      	ldr	r1, [pc, #76]	@ (7000a74c <etharp_query+0x2a0>)
7000a700:	4613      	mov	r3, r2
7000a702:	005b      	lsls	r3, r3, #1
7000a704:	4413      	add	r3, r2
7000a706:	00db      	lsls	r3, r3, #3
7000a708:	440b      	add	r3, r1
7000a70a:	681b      	ldr	r3, [r3, #0]
7000a70c:	4618      	mov	r0, r3
7000a70e:	f003 f89b 	bl	7000d848 <pbuf_free>
      }
      arp_table[i].q = p;
7000a712:	7c7a      	ldrb	r2, [r7, #17]
7000a714:	490d      	ldr	r1, [pc, #52]	@ (7000a74c <etharp_query+0x2a0>)
7000a716:	4613      	mov	r3, r2
7000a718:	005b      	lsls	r3, r3, #1
7000a71a:	4413      	add	r3, r2
7000a71c:	00db      	lsls	r3, r3, #3
7000a71e:	440b      	add	r3, r1
7000a720:	69fa      	ldr	r2, [r7, #28]
7000a722:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
7000a724:	2300      	movs	r3, #0
7000a726:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
7000a72a:	e002      	b.n	7000a732 <etharp_query+0x286>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
7000a72c:	23ff      	movs	r3, #255	@ 0xff
7000a72e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
7000a732:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
7000a736:	4618      	mov	r0, r3
7000a738:	3728      	adds	r7, #40	@ 0x28
7000a73a:	46bd      	mov	sp, r7
7000a73c:	bd80      	pop	{r7, pc}
7000a73e:	bf00      	nop
7000a740:	70014c94 	.word	0x70014c94
7000a744:	70014e6c 	.word	0x70014e6c
7000a748:	70014d38 	.word	0x70014d38
7000a74c:	24005274 	.word	0x24005274
7000a750:	70014e7c 	.word	0x70014e7c
7000a754:	70014e60 	.word	0x70014e60
7000a758:	24005364 	.word	0x24005364
7000a75c:	70014ea4 	.word	0x70014ea4

7000a760 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
7000a760:	b580      	push	{r7, lr}
7000a762:	b08a      	sub	sp, #40	@ 0x28
7000a764:	af02      	add	r7, sp, #8
7000a766:	60f8      	str	r0, [r7, #12]
7000a768:	60b9      	str	r1, [r7, #8]
7000a76a:	607a      	str	r2, [r7, #4]
7000a76c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
7000a76e:	2300      	movs	r3, #0
7000a770:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
7000a772:	68fb      	ldr	r3, [r7, #12]
7000a774:	2b00      	cmp	r3, #0
7000a776:	d106      	bne.n	7000a786 <etharp_raw+0x26>
7000a778:	4b3a      	ldr	r3, [pc, #232]	@ (7000a864 <etharp_raw+0x104>)
7000a77a:	f240 425f 	movw	r2, #1119	@ 0x45f
7000a77e:	493a      	ldr	r1, [pc, #232]	@ (7000a868 <etharp_raw+0x108>)
7000a780:	483a      	ldr	r0, [pc, #232]	@ (7000a86c <etharp_raw+0x10c>)
7000a782:	f009 facd 	bl	70013d20 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
7000a786:	f44f 7220 	mov.w	r2, #640	@ 0x280
7000a78a:	211c      	movs	r1, #28
7000a78c:	200e      	movs	r0, #14
7000a78e:	f002 fd81 	bl	7000d294 <pbuf_alloc>
7000a792:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
7000a794:	69bb      	ldr	r3, [r7, #24]
7000a796:	2b00      	cmp	r3, #0
7000a798:	d102      	bne.n	7000a7a0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
7000a79a:	f04f 33ff 	mov.w	r3, #4294967295
7000a79e:	e05d      	b.n	7000a85c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
7000a7a0:	69bb      	ldr	r3, [r7, #24]
7000a7a2:	895b      	ldrh	r3, [r3, #10]
7000a7a4:	2b1b      	cmp	r3, #27
7000a7a6:	d806      	bhi.n	7000a7b6 <etharp_raw+0x56>
7000a7a8:	4b2e      	ldr	r3, [pc, #184]	@ (7000a864 <etharp_raw+0x104>)
7000a7aa:	f240 426a 	movw	r2, #1130	@ 0x46a
7000a7ae:	4930      	ldr	r1, [pc, #192]	@ (7000a870 <etharp_raw+0x110>)
7000a7b0:	482e      	ldr	r0, [pc, #184]	@ (7000a86c <etharp_raw+0x10c>)
7000a7b2:	f009 fab5 	bl	70013d20 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
7000a7b6:	69bb      	ldr	r3, [r7, #24]
7000a7b8:	685b      	ldr	r3, [r3, #4]
7000a7ba:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
7000a7bc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
7000a7be:	4618      	mov	r0, r3
7000a7c0:	f7ff f906 	bl	700099d0 <lwip_htons>
7000a7c4:	4603      	mov	r3, r0
7000a7c6:	461a      	mov	r2, r3
7000a7c8:	697b      	ldr	r3, [r7, #20]
7000a7ca:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
7000a7cc:	68fb      	ldr	r3, [r7, #12]
7000a7ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
7000a7d2:	2b06      	cmp	r3, #6
7000a7d4:	d006      	beq.n	7000a7e4 <etharp_raw+0x84>
7000a7d6:	4b23      	ldr	r3, [pc, #140]	@ (7000a864 <etharp_raw+0x104>)
7000a7d8:	f240 4271 	movw	r2, #1137	@ 0x471
7000a7dc:	4925      	ldr	r1, [pc, #148]	@ (7000a874 <etharp_raw+0x114>)
7000a7de:	4823      	ldr	r0, [pc, #140]	@ (7000a86c <etharp_raw+0x10c>)
7000a7e0:	f009 fa9e 	bl	70013d20 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
7000a7e4:	697b      	ldr	r3, [r7, #20]
7000a7e6:	3308      	adds	r3, #8
7000a7e8:	2206      	movs	r2, #6
7000a7ea:	6839      	ldr	r1, [r7, #0]
7000a7ec:	4618      	mov	r0, r3
7000a7ee:	f009 fbc8 	bl	70013f82 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
7000a7f2:	697b      	ldr	r3, [r7, #20]
7000a7f4:	3312      	adds	r3, #18
7000a7f6:	2206      	movs	r2, #6
7000a7f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
7000a7fa:	4618      	mov	r0, r3
7000a7fc:	f009 fbc1 	bl	70013f82 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
7000a800:	697b      	ldr	r3, [r7, #20]
7000a802:	330e      	adds	r3, #14
7000a804:	6aba      	ldr	r2, [r7, #40]	@ 0x28
7000a806:	6812      	ldr	r2, [r2, #0]
7000a808:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
7000a80a:	697b      	ldr	r3, [r7, #20]
7000a80c:	3318      	adds	r3, #24
7000a80e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
7000a810:	6812      	ldr	r2, [r2, #0]
7000a812:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
7000a814:	697b      	ldr	r3, [r7, #20]
7000a816:	2200      	movs	r2, #0
7000a818:	701a      	strb	r2, [r3, #0]
7000a81a:	2200      	movs	r2, #0
7000a81c:	f042 0201 	orr.w	r2, r2, #1
7000a820:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
7000a822:	697b      	ldr	r3, [r7, #20]
7000a824:	2200      	movs	r2, #0
7000a826:	f042 0208 	orr.w	r2, r2, #8
7000a82a:	709a      	strb	r2, [r3, #2]
7000a82c:	2200      	movs	r2, #0
7000a82e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
7000a830:	697b      	ldr	r3, [r7, #20]
7000a832:	2206      	movs	r2, #6
7000a834:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
7000a836:	697b      	ldr	r3, [r7, #20]
7000a838:	2204      	movs	r2, #4
7000a83a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
7000a83c:	f640 0306 	movw	r3, #2054	@ 0x806
7000a840:	9300      	str	r3, [sp, #0]
7000a842:	687b      	ldr	r3, [r7, #4]
7000a844:	68ba      	ldr	r2, [r7, #8]
7000a846:	69b9      	ldr	r1, [r7, #24]
7000a848:	68f8      	ldr	r0, [r7, #12]
7000a84a:	f000 f8d7 	bl	7000a9fc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
7000a84e:	69b8      	ldr	r0, [r7, #24]
7000a850:	f002 fffa 	bl	7000d848 <pbuf_free>
  p = NULL;
7000a854:	2300      	movs	r3, #0
7000a856:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
7000a858:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
7000a85c:	4618      	mov	r0, r3
7000a85e:	3720      	adds	r7, #32
7000a860:	46bd      	mov	sp, r7
7000a862:	bd80      	pop	{r7, pc}
7000a864:	70014c94 	.word	0x70014c94
7000a868:	70014e10 	.word	0x70014e10
7000a86c:	70014d38 	.word	0x70014d38
7000a870:	70014ec0 	.word	0x70014ec0
7000a874:	70014ef4 	.word	0x70014ef4

7000a878 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
7000a878:	b580      	push	{r7, lr}
7000a87a:	b088      	sub	sp, #32
7000a87c:	af04      	add	r7, sp, #16
7000a87e:	60f8      	str	r0, [r7, #12]
7000a880:	60b9      	str	r1, [r7, #8]
7000a882:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
7000a884:	68fb      	ldr	r3, [r7, #12]
7000a886:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
7000a88a:	68fb      	ldr	r3, [r7, #12]
7000a88c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
7000a890:	68fb      	ldr	r3, [r7, #12]
7000a892:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
7000a894:	2201      	movs	r2, #1
7000a896:	9203      	str	r2, [sp, #12]
7000a898:	68ba      	ldr	r2, [r7, #8]
7000a89a:	9202      	str	r2, [sp, #8]
7000a89c:	4a06      	ldr	r2, [pc, #24]	@ (7000a8b8 <etharp_request_dst+0x40>)
7000a89e:	9201      	str	r2, [sp, #4]
7000a8a0:	9300      	str	r3, [sp, #0]
7000a8a2:	4603      	mov	r3, r0
7000a8a4:	687a      	ldr	r2, [r7, #4]
7000a8a6:	68f8      	ldr	r0, [r7, #12]
7000a8a8:	f7ff ff5a 	bl	7000a760 <etharp_raw>
7000a8ac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
7000a8ae:	4618      	mov	r0, r3
7000a8b0:	3710      	adds	r7, #16
7000a8b2:	46bd      	mov	sp, r7
7000a8b4:	bd80      	pop	{r7, pc}
7000a8b6:	bf00      	nop
7000a8b8:	70017264 	.word	0x70017264

7000a8bc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
7000a8bc:	b580      	push	{r7, lr}
7000a8be:	b082      	sub	sp, #8
7000a8c0:	af00      	add	r7, sp, #0
7000a8c2:	6078      	str	r0, [r7, #4]
7000a8c4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
7000a8c6:	4a05      	ldr	r2, [pc, #20]	@ (7000a8dc <etharp_request+0x20>)
7000a8c8:	6839      	ldr	r1, [r7, #0]
7000a8ca:	6878      	ldr	r0, [r7, #4]
7000a8cc:	f7ff ffd4 	bl	7000a878 <etharp_request_dst>
7000a8d0:	4603      	mov	r3, r0
}
7000a8d2:	4618      	mov	r0, r3
7000a8d4:	3708      	adds	r7, #8
7000a8d6:	46bd      	mov	sp, r7
7000a8d8:	bd80      	pop	{r7, pc}
7000a8da:	bf00      	nop
7000a8dc:	7001725c 	.word	0x7001725c

7000a8e0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
7000a8e0:	b580      	push	{r7, lr}
7000a8e2:	b086      	sub	sp, #24
7000a8e4:	af00      	add	r7, sp, #0
7000a8e6:	6078      	str	r0, [r7, #4]
7000a8e8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
7000a8ea:	230e      	movs	r3, #14
7000a8ec:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
7000a8ee:	687b      	ldr	r3, [r7, #4]
7000a8f0:	895b      	ldrh	r3, [r3, #10]
7000a8f2:	2b0e      	cmp	r3, #14
7000a8f4:	d96e      	bls.n	7000a9d4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
7000a8f6:	687b      	ldr	r3, [r7, #4]
7000a8f8:	7bdb      	ldrb	r3, [r3, #15]
7000a8fa:	2b00      	cmp	r3, #0
7000a8fc:	d106      	bne.n	7000a90c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
7000a8fe:	683b      	ldr	r3, [r7, #0]
7000a900:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000a904:	3301      	adds	r3, #1
7000a906:	b2da      	uxtb	r2, r3
7000a908:	687b      	ldr	r3, [r7, #4]
7000a90a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
7000a90c:	687b      	ldr	r3, [r7, #4]
7000a90e:	685b      	ldr	r3, [r3, #4]
7000a910:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
7000a912:	693b      	ldr	r3, [r7, #16]
7000a914:	7b1a      	ldrb	r2, [r3, #12]
7000a916:	7b5b      	ldrb	r3, [r3, #13]
7000a918:	021b      	lsls	r3, r3, #8
7000a91a:	4313      	orrs	r3, r2
7000a91c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
7000a91e:	693b      	ldr	r3, [r7, #16]
7000a920:	781b      	ldrb	r3, [r3, #0]
7000a922:	f003 0301 	and.w	r3, r3, #1
7000a926:	2b00      	cmp	r3, #0
7000a928:	d023      	beq.n	7000a972 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
7000a92a:	693b      	ldr	r3, [r7, #16]
7000a92c:	781b      	ldrb	r3, [r3, #0]
7000a92e:	2b01      	cmp	r3, #1
7000a930:	d10f      	bne.n	7000a952 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
7000a932:	693b      	ldr	r3, [r7, #16]
7000a934:	785b      	ldrb	r3, [r3, #1]
7000a936:	2b00      	cmp	r3, #0
7000a938:	d11b      	bne.n	7000a972 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
7000a93a:	693b      	ldr	r3, [r7, #16]
7000a93c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
7000a93e:	2b5e      	cmp	r3, #94	@ 0x5e
7000a940:	d117      	bne.n	7000a972 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
7000a942:	687b      	ldr	r3, [r7, #4]
7000a944:	7b5b      	ldrb	r3, [r3, #13]
7000a946:	f043 0310 	orr.w	r3, r3, #16
7000a94a:	b2da      	uxtb	r2, r3
7000a94c:	687b      	ldr	r3, [r7, #4]
7000a94e:	735a      	strb	r2, [r3, #13]
7000a950:	e00f      	b.n	7000a972 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
7000a952:	693b      	ldr	r3, [r7, #16]
7000a954:	2206      	movs	r2, #6
7000a956:	4928      	ldr	r1, [pc, #160]	@ (7000a9f8 <ethernet_input+0x118>)
7000a958:	4618      	mov	r0, r3
7000a95a:	f009 fa36 	bl	70013dca <memcmp>
7000a95e:	4603      	mov	r3, r0
7000a960:	2b00      	cmp	r3, #0
7000a962:	d106      	bne.n	7000a972 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
7000a964:	687b      	ldr	r3, [r7, #4]
7000a966:	7b5b      	ldrb	r3, [r3, #13]
7000a968:	f043 0308 	orr.w	r3, r3, #8
7000a96c:	b2da      	uxtb	r2, r3
7000a96e:	687b      	ldr	r3, [r7, #4]
7000a970:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
7000a972:	89fb      	ldrh	r3, [r7, #14]
7000a974:	2b08      	cmp	r3, #8
7000a976:	d003      	beq.n	7000a980 <ethernet_input+0xa0>
7000a978:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
7000a97c:	d014      	beq.n	7000a9a8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
7000a97e:	e032      	b.n	7000a9e6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
7000a980:	683b      	ldr	r3, [r7, #0]
7000a982:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000a986:	f003 0308 	and.w	r3, r3, #8
7000a98a:	2b00      	cmp	r3, #0
7000a98c:	d024      	beq.n	7000a9d8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
7000a98e:	8afb      	ldrh	r3, [r7, #22]
7000a990:	4619      	mov	r1, r3
7000a992:	6878      	ldr	r0, [r7, #4]
7000a994:	f002 fedc 	bl	7000d750 <pbuf_remove_header>
7000a998:	4603      	mov	r3, r0
7000a99a:	2b00      	cmp	r3, #0
7000a99c:	d11e      	bne.n	7000a9dc <ethernet_input+0xfc>
        ip4_input(p, netif);
7000a99e:	6839      	ldr	r1, [r7, #0]
7000a9a0:	6878      	ldr	r0, [r7, #4]
7000a9a2:	f000 fba5 	bl	7000b0f0 <ip4_input>
      break;
7000a9a6:	e013      	b.n	7000a9d0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
7000a9a8:	683b      	ldr	r3, [r7, #0]
7000a9aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000a9ae:	f003 0308 	and.w	r3, r3, #8
7000a9b2:	2b00      	cmp	r3, #0
7000a9b4:	d014      	beq.n	7000a9e0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
7000a9b6:	8afb      	ldrh	r3, [r7, #22]
7000a9b8:	4619      	mov	r1, r3
7000a9ba:	6878      	ldr	r0, [r7, #4]
7000a9bc:	f002 fec8 	bl	7000d750 <pbuf_remove_header>
7000a9c0:	4603      	mov	r3, r0
7000a9c2:	2b00      	cmp	r3, #0
7000a9c4:	d10e      	bne.n	7000a9e4 <ethernet_input+0x104>
        etharp_input(p, netif);
7000a9c6:	6839      	ldr	r1, [r7, #0]
7000a9c8:	6878      	ldr	r0, [r7, #4]
7000a9ca:	f7ff fb57 	bl	7000a07c <etharp_input>
      break;
7000a9ce:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
7000a9d0:	2300      	movs	r3, #0
7000a9d2:	e00c      	b.n	7000a9ee <ethernet_input+0x10e>
    goto free_and_return;
7000a9d4:	bf00      	nop
7000a9d6:	e006      	b.n	7000a9e6 <ethernet_input+0x106>
        goto free_and_return;
7000a9d8:	bf00      	nop
7000a9da:	e004      	b.n	7000a9e6 <ethernet_input+0x106>
        goto free_and_return;
7000a9dc:	bf00      	nop
7000a9de:	e002      	b.n	7000a9e6 <ethernet_input+0x106>
        goto free_and_return;
7000a9e0:	bf00      	nop
7000a9e2:	e000      	b.n	7000a9e6 <ethernet_input+0x106>
        goto free_and_return;
7000a9e4:	bf00      	nop

free_and_return:
  pbuf_free(p);
7000a9e6:	6878      	ldr	r0, [r7, #4]
7000a9e8:	f002 ff2e 	bl	7000d848 <pbuf_free>
  return ERR_OK;
7000a9ec:	2300      	movs	r3, #0
}
7000a9ee:	4618      	mov	r0, r3
7000a9f0:	3718      	adds	r7, #24
7000a9f2:	46bd      	mov	sp, r7
7000a9f4:	bd80      	pop	{r7, pc}
7000a9f6:	bf00      	nop
7000a9f8:	7001725c 	.word	0x7001725c

7000a9fc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
7000a9fc:	b580      	push	{r7, lr}
7000a9fe:	b086      	sub	sp, #24
7000aa00:	af00      	add	r7, sp, #0
7000aa02:	60f8      	str	r0, [r7, #12]
7000aa04:	60b9      	str	r1, [r7, #8]
7000aa06:	607a      	str	r2, [r7, #4]
7000aa08:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
7000aa0a:	8c3b      	ldrh	r3, [r7, #32]
7000aa0c:	4618      	mov	r0, r3
7000aa0e:	f7fe ffdf 	bl	700099d0 <lwip_htons>
7000aa12:	4603      	mov	r3, r0
7000aa14:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
7000aa16:	210e      	movs	r1, #14
7000aa18:	68b8      	ldr	r0, [r7, #8]
7000aa1a:	f002 fe89 	bl	7000d730 <pbuf_add_header>
7000aa1e:	4603      	mov	r3, r0
7000aa20:	2b00      	cmp	r3, #0
7000aa22:	d125      	bne.n	7000aa70 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
7000aa24:	68bb      	ldr	r3, [r7, #8]
7000aa26:	685b      	ldr	r3, [r3, #4]
7000aa28:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
7000aa2a:	693b      	ldr	r3, [r7, #16]
7000aa2c:	8afa      	ldrh	r2, [r7, #22]
7000aa2e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
7000aa30:	693b      	ldr	r3, [r7, #16]
7000aa32:	2206      	movs	r2, #6
7000aa34:	6839      	ldr	r1, [r7, #0]
7000aa36:	4618      	mov	r0, r3
7000aa38:	f009 faa3 	bl	70013f82 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
7000aa3c:	693b      	ldr	r3, [r7, #16]
7000aa3e:	3306      	adds	r3, #6
7000aa40:	2206      	movs	r2, #6
7000aa42:	6879      	ldr	r1, [r7, #4]
7000aa44:	4618      	mov	r0, r3
7000aa46:	f009 fa9c 	bl	70013f82 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
7000aa4a:	68fb      	ldr	r3, [r7, #12]
7000aa4c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
7000aa50:	2b06      	cmp	r3, #6
7000aa52:	d006      	beq.n	7000aa62 <ethernet_output+0x66>
7000aa54:	4b0a      	ldr	r3, [pc, #40]	@ (7000aa80 <ethernet_output+0x84>)
7000aa56:	f44f 7299 	mov.w	r2, #306	@ 0x132
7000aa5a:	490a      	ldr	r1, [pc, #40]	@ (7000aa84 <ethernet_output+0x88>)
7000aa5c:	480a      	ldr	r0, [pc, #40]	@ (7000aa88 <ethernet_output+0x8c>)
7000aa5e:	f009 f95f 	bl	70013d20 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
7000aa62:	68fb      	ldr	r3, [r7, #12]
7000aa64:	699b      	ldr	r3, [r3, #24]
7000aa66:	68b9      	ldr	r1, [r7, #8]
7000aa68:	68f8      	ldr	r0, [r7, #12]
7000aa6a:	4798      	blx	r3
7000aa6c:	4603      	mov	r3, r0
7000aa6e:	e002      	b.n	7000aa76 <ethernet_output+0x7a>
      goto pbuf_header_failed;
7000aa70:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
7000aa72:	f06f 0301 	mvn.w	r3, #1
}
7000aa76:	4618      	mov	r0, r3
7000aa78:	3718      	adds	r7, #24
7000aa7a:	46bd      	mov	sp, r7
7000aa7c:	bd80      	pop	{r7, pc}
7000aa7e:	bf00      	nop
7000aa80:	70014f38 	.word	0x70014f38
7000aa84:	70014f9c 	.word	0x70014f9c
7000aa88:	70014fd0 	.word	0x70014fd0

7000aa8c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
7000aa8c:	b580      	push	{r7, lr}
7000aa8e:	b08e      	sub	sp, #56	@ 0x38
7000aa90:	af04      	add	r7, sp, #16
7000aa92:	6078      	str	r0, [r7, #4]
7000aa94:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
7000aa96:	4b87      	ldr	r3, [pc, #540]	@ (7000acb4 <icmp_input+0x228>)
7000aa98:	689b      	ldr	r3, [r3, #8]
7000aa9a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
7000aa9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000aa9e:	781b      	ldrb	r3, [r3, #0]
7000aaa0:	f003 030f 	and.w	r3, r3, #15
7000aaa4:	b2db      	uxtb	r3, r3
7000aaa6:	009b      	lsls	r3, r3, #2
7000aaa8:	b2db      	uxtb	r3, r3
7000aaaa:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
7000aaac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000aaae:	2b13      	cmp	r3, #19
7000aab0:	f240 80e8 	bls.w	7000ac84 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
7000aab4:	687b      	ldr	r3, [r7, #4]
7000aab6:	895b      	ldrh	r3, [r3, #10]
7000aab8:	2b03      	cmp	r3, #3
7000aaba:	f240 80e5 	bls.w	7000ac88 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
7000aabe:	687b      	ldr	r3, [r7, #4]
7000aac0:	685b      	ldr	r3, [r3, #4]
7000aac2:	781b      	ldrb	r3, [r3, #0]
7000aac4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
7000aac8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
7000aacc:	2b00      	cmp	r3, #0
7000aace:	f000 80d2 	beq.w	7000ac76 <icmp_input+0x1ea>
7000aad2:	2b08      	cmp	r3, #8
7000aad4:	f040 80d2 	bne.w	7000ac7c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
7000aad8:	4b77      	ldr	r3, [pc, #476]	@ (7000acb8 <icmp_input+0x22c>)
7000aada:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
7000aadc:	4b75      	ldr	r3, [pc, #468]	@ (7000acb4 <icmp_input+0x228>)
7000aade:	695b      	ldr	r3, [r3, #20]
7000aae0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
7000aae4:	2be0      	cmp	r3, #224	@ 0xe0
7000aae6:	f000 80d6 	beq.w	7000ac96 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
7000aaea:	4b72      	ldr	r3, [pc, #456]	@ (7000acb4 <icmp_input+0x228>)
7000aaec:	695b      	ldr	r3, [r3, #20]
7000aaee:	4a71      	ldr	r2, [pc, #452]	@ (7000acb4 <icmp_input+0x228>)
7000aaf0:	6812      	ldr	r2, [r2, #0]
7000aaf2:	4611      	mov	r1, r2
7000aaf4:	4618      	mov	r0, r3
7000aaf6:	f000 fcf7 	bl	7000b4e8 <ip4_addr_isbroadcast_u32>
7000aafa:	4603      	mov	r3, r0
7000aafc:	2b00      	cmp	r3, #0
7000aafe:	f040 80cc 	bne.w	7000ac9a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
7000ab02:	687b      	ldr	r3, [r7, #4]
7000ab04:	891b      	ldrh	r3, [r3, #8]
7000ab06:	2b07      	cmp	r3, #7
7000ab08:	f240 80c0 	bls.w	7000ac8c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
7000ab0c:	6878      	ldr	r0, [r7, #4]
7000ab0e:	f000 f9f0 	bl	7000aef2 <inet_chksum_pbuf>
7000ab12:	4603      	mov	r3, r0
7000ab14:	2b00      	cmp	r3, #0
7000ab16:	d003      	beq.n	7000ab20 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
7000ab18:	6878      	ldr	r0, [r7, #4]
7000ab1a:	f002 fe95 	bl	7000d848 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
7000ab1e:	e0c5      	b.n	7000acac <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
7000ab20:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000ab22:	330e      	adds	r3, #14
7000ab24:	4619      	mov	r1, r3
7000ab26:	6878      	ldr	r0, [r7, #4]
7000ab28:	f002 fe02 	bl	7000d730 <pbuf_add_header>
7000ab2c:	4603      	mov	r3, r0
7000ab2e:	2b00      	cmp	r3, #0
7000ab30:	d04b      	beq.n	7000abca <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
7000ab32:	687b      	ldr	r3, [r7, #4]
7000ab34:	891a      	ldrh	r2, [r3, #8]
7000ab36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000ab38:	4413      	add	r3, r2
7000ab3a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
7000ab3c:	687b      	ldr	r3, [r7, #4]
7000ab3e:	891b      	ldrh	r3, [r3, #8]
7000ab40:	8b7a      	ldrh	r2, [r7, #26]
7000ab42:	429a      	cmp	r2, r3
7000ab44:	f0c0 80ab 	bcc.w	7000ac9e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
7000ab48:	8b7b      	ldrh	r3, [r7, #26]
7000ab4a:	f44f 7220 	mov.w	r2, #640	@ 0x280
7000ab4e:	4619      	mov	r1, r3
7000ab50:	200e      	movs	r0, #14
7000ab52:	f002 fb9f 	bl	7000d294 <pbuf_alloc>
7000ab56:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
7000ab58:	697b      	ldr	r3, [r7, #20]
7000ab5a:	2b00      	cmp	r3, #0
7000ab5c:	f000 80a1 	beq.w	7000aca2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
7000ab60:	697b      	ldr	r3, [r7, #20]
7000ab62:	895b      	ldrh	r3, [r3, #10]
7000ab64:	461a      	mov	r2, r3
7000ab66:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000ab68:	3308      	adds	r3, #8
7000ab6a:	429a      	cmp	r2, r3
7000ab6c:	d203      	bcs.n	7000ab76 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
7000ab6e:	6978      	ldr	r0, [r7, #20]
7000ab70:	f002 fe6a 	bl	7000d848 <pbuf_free>
          goto icmperr;
7000ab74:	e096      	b.n	7000aca4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
7000ab76:	697b      	ldr	r3, [r7, #20]
7000ab78:	685b      	ldr	r3, [r3, #4]
7000ab7a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
7000ab7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
7000ab7e:	4618      	mov	r0, r3
7000ab80:	f009 f9ff 	bl	70013f82 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
7000ab84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000ab86:	4619      	mov	r1, r3
7000ab88:	6978      	ldr	r0, [r7, #20]
7000ab8a:	f002 fde1 	bl	7000d750 <pbuf_remove_header>
7000ab8e:	4603      	mov	r3, r0
7000ab90:	2b00      	cmp	r3, #0
7000ab92:	d009      	beq.n	7000aba8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
7000ab94:	4b49      	ldr	r3, [pc, #292]	@ (7000acbc <icmp_input+0x230>)
7000ab96:	22b6      	movs	r2, #182	@ 0xb6
7000ab98:	4949      	ldr	r1, [pc, #292]	@ (7000acc0 <icmp_input+0x234>)
7000ab9a:	484a      	ldr	r0, [pc, #296]	@ (7000acc4 <icmp_input+0x238>)
7000ab9c:	f009 f8c0 	bl	70013d20 <iprintf>
          pbuf_free(r);
7000aba0:	6978      	ldr	r0, [r7, #20]
7000aba2:	f002 fe51 	bl	7000d848 <pbuf_free>
          goto icmperr;
7000aba6:	e07d      	b.n	7000aca4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
7000aba8:	6879      	ldr	r1, [r7, #4]
7000abaa:	6978      	ldr	r0, [r7, #20]
7000abac:	f002 ff66 	bl	7000da7c <pbuf_copy>
7000abb0:	4603      	mov	r3, r0
7000abb2:	2b00      	cmp	r3, #0
7000abb4:	d003      	beq.n	7000abbe <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
7000abb6:	6978      	ldr	r0, [r7, #20]
7000abb8:	f002 fe46 	bl	7000d848 <pbuf_free>
          goto icmperr;
7000abbc:	e072      	b.n	7000aca4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
7000abbe:	6878      	ldr	r0, [r7, #4]
7000abc0:	f002 fe42 	bl	7000d848 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
7000abc4:	697b      	ldr	r3, [r7, #20]
7000abc6:	607b      	str	r3, [r7, #4]
7000abc8:	e00f      	b.n	7000abea <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
7000abca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000abcc:	330e      	adds	r3, #14
7000abce:	4619      	mov	r1, r3
7000abd0:	6878      	ldr	r0, [r7, #4]
7000abd2:	f002 fdbd 	bl	7000d750 <pbuf_remove_header>
7000abd6:	4603      	mov	r3, r0
7000abd8:	2b00      	cmp	r3, #0
7000abda:	d006      	beq.n	7000abea <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
7000abdc:	4b37      	ldr	r3, [pc, #220]	@ (7000acbc <icmp_input+0x230>)
7000abde:	22c7      	movs	r2, #199	@ 0xc7
7000abe0:	4939      	ldr	r1, [pc, #228]	@ (7000acc8 <icmp_input+0x23c>)
7000abe2:	4838      	ldr	r0, [pc, #224]	@ (7000acc4 <icmp_input+0x238>)
7000abe4:	f009 f89c 	bl	70013d20 <iprintf>
          goto icmperr;
7000abe8:	e05c      	b.n	7000aca4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
7000abea:	687b      	ldr	r3, [r7, #4]
7000abec:	685b      	ldr	r3, [r3, #4]
7000abee:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
7000abf0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000abf2:	4619      	mov	r1, r3
7000abf4:	6878      	ldr	r0, [r7, #4]
7000abf6:	f002 fd9b 	bl	7000d730 <pbuf_add_header>
7000abfa:	4603      	mov	r3, r0
7000abfc:	2b00      	cmp	r3, #0
7000abfe:	d13c      	bne.n	7000ac7a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
7000ac00:	687b      	ldr	r3, [r7, #4]
7000ac02:	685b      	ldr	r3, [r3, #4]
7000ac04:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
7000ac06:	69fb      	ldr	r3, [r7, #28]
7000ac08:	681a      	ldr	r2, [r3, #0]
7000ac0a:	68fb      	ldr	r3, [r7, #12]
7000ac0c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
7000ac0e:	4b29      	ldr	r3, [pc, #164]	@ (7000acb4 <icmp_input+0x228>)
7000ac10:	691a      	ldr	r2, [r3, #16]
7000ac12:	68fb      	ldr	r3, [r7, #12]
7000ac14:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
7000ac16:	693b      	ldr	r3, [r7, #16]
7000ac18:	2200      	movs	r2, #0
7000ac1a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
7000ac1c:	693b      	ldr	r3, [r7, #16]
7000ac1e:	885b      	ldrh	r3, [r3, #2]
7000ac20:	b29b      	uxth	r3, r3
7000ac22:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
7000ac26:	4293      	cmp	r3, r2
7000ac28:	d907      	bls.n	7000ac3a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
7000ac2a:	693b      	ldr	r3, [r7, #16]
7000ac2c:	885b      	ldrh	r3, [r3, #2]
7000ac2e:	b29b      	uxth	r3, r3
7000ac30:	3309      	adds	r3, #9
7000ac32:	b29a      	uxth	r2, r3
7000ac34:	693b      	ldr	r3, [r7, #16]
7000ac36:	805a      	strh	r2, [r3, #2]
7000ac38:	e006      	b.n	7000ac48 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
7000ac3a:	693b      	ldr	r3, [r7, #16]
7000ac3c:	885b      	ldrh	r3, [r3, #2]
7000ac3e:	b29b      	uxth	r3, r3
7000ac40:	3308      	adds	r3, #8
7000ac42:	b29a      	uxth	r2, r3
7000ac44:	693b      	ldr	r3, [r7, #16]
7000ac46:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
7000ac48:	68fb      	ldr	r3, [r7, #12]
7000ac4a:	22ff      	movs	r2, #255	@ 0xff
7000ac4c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
7000ac4e:	68fb      	ldr	r3, [r7, #12]
7000ac50:	2200      	movs	r2, #0
7000ac52:	729a      	strb	r2, [r3, #10]
7000ac54:	2200      	movs	r2, #0
7000ac56:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
7000ac58:	683b      	ldr	r3, [r7, #0]
7000ac5a:	9302      	str	r3, [sp, #8]
7000ac5c:	2301      	movs	r3, #1
7000ac5e:	9301      	str	r3, [sp, #4]
7000ac60:	2300      	movs	r3, #0
7000ac62:	9300      	str	r3, [sp, #0]
7000ac64:	23ff      	movs	r3, #255	@ 0xff
7000ac66:	2200      	movs	r2, #0
7000ac68:	69f9      	ldr	r1, [r7, #28]
7000ac6a:	6878      	ldr	r0, [r7, #4]
7000ac6c:	f000 fb64 	bl	7000b338 <ip4_output_if>
7000ac70:	4603      	mov	r3, r0
7000ac72:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
7000ac74:	e001      	b.n	7000ac7a <icmp_input+0x1ee>
      break;
7000ac76:	bf00      	nop
7000ac78:	e000      	b.n	7000ac7c <icmp_input+0x1f0>
      break;
7000ac7a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
7000ac7c:	6878      	ldr	r0, [r7, #4]
7000ac7e:	f002 fde3 	bl	7000d848 <pbuf_free>
  return;
7000ac82:	e013      	b.n	7000acac <icmp_input+0x220>
    goto lenerr;
7000ac84:	bf00      	nop
7000ac86:	e002      	b.n	7000ac8e <icmp_input+0x202>
    goto lenerr;
7000ac88:	bf00      	nop
7000ac8a:	e000      	b.n	7000ac8e <icmp_input+0x202>
        goto lenerr;
7000ac8c:	bf00      	nop
lenerr:
  pbuf_free(p);
7000ac8e:	6878      	ldr	r0, [r7, #4]
7000ac90:	f002 fdda 	bl	7000d848 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
7000ac94:	e00a      	b.n	7000acac <icmp_input+0x220>
        goto icmperr;
7000ac96:	bf00      	nop
7000ac98:	e004      	b.n	7000aca4 <icmp_input+0x218>
        goto icmperr;
7000ac9a:	bf00      	nop
7000ac9c:	e002      	b.n	7000aca4 <icmp_input+0x218>
          goto icmperr;
7000ac9e:	bf00      	nop
7000aca0:	e000      	b.n	7000aca4 <icmp_input+0x218>
          goto icmperr;
7000aca2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
7000aca4:	6878      	ldr	r0, [r7, #4]
7000aca6:	f002 fdcf 	bl	7000d848 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
7000acaa:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
7000acac:	3728      	adds	r7, #40	@ 0x28
7000acae:	46bd      	mov	sp, r7
7000acb0:	bd80      	pop	{r7, pc}
7000acb2:	bf00      	nop
7000acb4:	24005368 	.word	0x24005368
7000acb8:	2400537c 	.word	0x2400537c
7000acbc:	70014ff8 	.word	0x70014ff8
7000acc0:	7001505c 	.word	0x7001505c
7000acc4:	70015094 	.word	0x70015094
7000acc8:	700150bc 	.word	0x700150bc

7000accc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
7000accc:	b580      	push	{r7, lr}
7000acce:	b082      	sub	sp, #8
7000acd0:	af00      	add	r7, sp, #0
7000acd2:	6078      	str	r0, [r7, #4]
7000acd4:	460b      	mov	r3, r1
7000acd6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
7000acd8:	78fb      	ldrb	r3, [r7, #3]
7000acda:	461a      	mov	r2, r3
7000acdc:	2103      	movs	r1, #3
7000acde:	6878      	ldr	r0, [r7, #4]
7000ace0:	f000 f814 	bl	7000ad0c <icmp_send_response>
}
7000ace4:	bf00      	nop
7000ace6:	3708      	adds	r7, #8
7000ace8:	46bd      	mov	sp, r7
7000acea:	bd80      	pop	{r7, pc}

7000acec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
7000acec:	b580      	push	{r7, lr}
7000acee:	b082      	sub	sp, #8
7000acf0:	af00      	add	r7, sp, #0
7000acf2:	6078      	str	r0, [r7, #4]
7000acf4:	460b      	mov	r3, r1
7000acf6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
7000acf8:	78fb      	ldrb	r3, [r7, #3]
7000acfa:	461a      	mov	r2, r3
7000acfc:	210b      	movs	r1, #11
7000acfe:	6878      	ldr	r0, [r7, #4]
7000ad00:	f000 f804 	bl	7000ad0c <icmp_send_response>
}
7000ad04:	bf00      	nop
7000ad06:	3708      	adds	r7, #8
7000ad08:	46bd      	mov	sp, r7
7000ad0a:	bd80      	pop	{r7, pc}

7000ad0c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
7000ad0c:	b580      	push	{r7, lr}
7000ad0e:	b08c      	sub	sp, #48	@ 0x30
7000ad10:	af04      	add	r7, sp, #16
7000ad12:	6078      	str	r0, [r7, #4]
7000ad14:	460b      	mov	r3, r1
7000ad16:	70fb      	strb	r3, [r7, #3]
7000ad18:	4613      	mov	r3, r2
7000ad1a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* Keep IP header + up to 8 bytes */
  response_pkt_len = IP_HLEN + ICMP_DEST_UNREACH_DATASIZE;
7000ad1c:	231c      	movs	r3, #28
7000ad1e:	83fb      	strh	r3, [r7, #30]
  if (p->tot_len < response_pkt_len) {
7000ad20:	687b      	ldr	r3, [r7, #4]
7000ad22:	891b      	ldrh	r3, [r3, #8]
7000ad24:	8bfa      	ldrh	r2, [r7, #30]
7000ad26:	429a      	cmp	r2, r3
7000ad28:	d902      	bls.n	7000ad30 <icmp_send_response+0x24>
    response_pkt_len = p->tot_len;
7000ad2a:	687b      	ldr	r3, [r7, #4]
7000ad2c:	891b      	ldrh	r3, [r3, #8]
7000ad2e:	83fb      	strh	r3, [r7, #30]
  }

  /* ICMP header + part of original packet */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + response_pkt_len, PBUF_RAM);
7000ad30:	8bfb      	ldrh	r3, [r7, #30]
7000ad32:	3308      	adds	r3, #8
7000ad34:	b29b      	uxth	r3, r3
7000ad36:	f44f 7220 	mov.w	r2, #640	@ 0x280
7000ad3a:	4619      	mov	r1, r3
7000ad3c:	2022      	movs	r0, #34	@ 0x22
7000ad3e:	f002 faa9 	bl	7000d294 <pbuf_alloc>
7000ad42:	61b8      	str	r0, [r7, #24]
  if (q == NULL) {
7000ad44:	69bb      	ldr	r3, [r7, #24]
7000ad46:	2b00      	cmp	r3, #0
7000ad48:	d059      	beq.n	7000adfe <icmp_send_response+0xf2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
7000ad4a:	69bb      	ldr	r3, [r7, #24]
7000ad4c:	895b      	ldrh	r3, [r3, #10]
7000ad4e:	461a      	mov	r2, r3
7000ad50:	8bfb      	ldrh	r3, [r7, #30]
7000ad52:	3308      	adds	r3, #8
7000ad54:	429a      	cmp	r2, r3
7000ad56:	d206      	bcs.n	7000ad66 <icmp_send_response+0x5a>
7000ad58:	4b2b      	ldr	r3, [pc, #172]	@ (7000ae08 <icmp_send_response+0xfc>)
7000ad5a:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
7000ad5e:	492b      	ldr	r1, [pc, #172]	@ (7000ae0c <icmp_send_response+0x100>)
7000ad60:	482b      	ldr	r0, [pc, #172]	@ (7000ae10 <icmp_send_response+0x104>)
7000ad62:	f008 ffdd 	bl	70013d20 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + response_pkt_len)));

  iphdr = (struct ip_hdr *)p->payload;
7000ad66:	687b      	ldr	r3, [r7, #4]
7000ad68:	685b      	ldr	r3, [r3, #4]
7000ad6a:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
7000ad6c:	69bb      	ldr	r3, [r7, #24]
7000ad6e:	685b      	ldr	r3, [r3, #4]
7000ad70:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
7000ad72:	693b      	ldr	r3, [r7, #16]
7000ad74:	78fa      	ldrb	r2, [r7, #3]
7000ad76:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
7000ad78:	693b      	ldr	r3, [r7, #16]
7000ad7a:	78ba      	ldrb	r2, [r7, #2]
7000ad7c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
7000ad7e:	693b      	ldr	r3, [r7, #16]
7000ad80:	2200      	movs	r2, #0
7000ad82:	711a      	strb	r2, [r3, #4]
7000ad84:	2200      	movs	r2, #0
7000ad86:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
7000ad88:	693b      	ldr	r3, [r7, #16]
7000ad8a:	2200      	movs	r2, #0
7000ad8c:	719a      	strb	r2, [r3, #6]
7000ad8e:	2200      	movs	r2, #0
7000ad90:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
7000ad92:	69bb      	ldr	r3, [r7, #24]
7000ad94:	685b      	ldr	r3, [r3, #4]
7000ad96:	f103 0008 	add.w	r0, r3, #8
7000ad9a:	687b      	ldr	r3, [r7, #4]
7000ad9c:	685b      	ldr	r3, [r3, #4]
7000ad9e:	8bfa      	ldrh	r2, [r7, #30]
7000ada0:	4619      	mov	r1, r3
7000ada2:	f009 f8ee 	bl	70013f82 <memcpy>
          response_pkt_len);

  ip4_addr_copy(iphdr_src, iphdr->src);
7000ada6:	697b      	ldr	r3, [r7, #20]
7000ada8:	68db      	ldr	r3, [r3, #12]
7000adaa:	60bb      	str	r3, [r7, #8]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
7000adac:	f107 0308 	add.w	r3, r7, #8
7000adb0:	4618      	mov	r0, r3
7000adb2:	f000 f903 	bl	7000afbc <ip4_route>
7000adb6:	60f8      	str	r0, [r7, #12]
#endif
  if (netif != NULL) {
7000adb8:	68fb      	ldr	r3, [r7, #12]
7000adba:	2b00      	cmp	r3, #0
7000adbc:	d01b      	beq.n	7000adf6 <icmp_send_response+0xea>
    /* calculate checksum */
    icmphdr->chksum = 0;
7000adbe:	693b      	ldr	r3, [r7, #16]
7000adc0:	2200      	movs	r2, #0
7000adc2:	709a      	strb	r2, [r3, #2]
7000adc4:	2200      	movs	r2, #0
7000adc6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
7000adc8:	69bb      	ldr	r3, [r7, #24]
7000adca:	895b      	ldrh	r3, [r3, #10]
7000adcc:	4619      	mov	r1, r3
7000adce:	6938      	ldr	r0, [r7, #16]
7000add0:	f000 f87d 	bl	7000aece <inet_chksum>
7000add4:	4603      	mov	r3, r0
7000add6:	461a      	mov	r2, r3
7000add8:	693b      	ldr	r3, [r7, #16]
7000adda:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
7000addc:	f107 0208 	add.w	r2, r7, #8
7000ade0:	68fb      	ldr	r3, [r7, #12]
7000ade2:	9302      	str	r3, [sp, #8]
7000ade4:	2301      	movs	r3, #1
7000ade6:	9301      	str	r3, [sp, #4]
7000ade8:	2300      	movs	r3, #0
7000adea:	9300      	str	r3, [sp, #0]
7000adec:	23ff      	movs	r3, #255	@ 0xff
7000adee:	2100      	movs	r1, #0
7000adf0:	69b8      	ldr	r0, [r7, #24]
7000adf2:	f000 faa1 	bl	7000b338 <ip4_output_if>
  }
  pbuf_free(q);
7000adf6:	69b8      	ldr	r0, [r7, #24]
7000adf8:	f002 fd26 	bl	7000d848 <pbuf_free>
7000adfc:	e000      	b.n	7000ae00 <icmp_send_response+0xf4>
    return;
7000adfe:	bf00      	nop
}
7000ae00:	3720      	adds	r7, #32
7000ae02:	46bd      	mov	sp, r7
7000ae04:	bd80      	pop	{r7, pc}
7000ae06:	bf00      	nop
7000ae08:	70014ff8 	.word	0x70014ff8
7000ae0c:	700150f0 	.word	0x700150f0
7000ae10:	70015094 	.word	0x70015094

7000ae14 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
7000ae14:	b480      	push	{r7}
7000ae16:	b089      	sub	sp, #36	@ 0x24
7000ae18:	af00      	add	r7, sp, #0
7000ae1a:	6078      	str	r0, [r7, #4]
7000ae1c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
7000ae1e:	687b      	ldr	r3, [r7, #4]
7000ae20:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
7000ae22:	2300      	movs	r3, #0
7000ae24:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
7000ae26:	2300      	movs	r3, #0
7000ae28:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
7000ae2a:	69fb      	ldr	r3, [r7, #28]
7000ae2c:	f003 0301 	and.w	r3, r3, #1
7000ae30:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
7000ae32:	693b      	ldr	r3, [r7, #16]
7000ae34:	2b00      	cmp	r3, #0
7000ae36:	d00d      	beq.n	7000ae54 <lwip_standard_chksum+0x40>
7000ae38:	683b      	ldr	r3, [r7, #0]
7000ae3a:	2b00      	cmp	r3, #0
7000ae3c:	dd0a      	ble.n	7000ae54 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
7000ae3e:	69fa      	ldr	r2, [r7, #28]
7000ae40:	1c53      	adds	r3, r2, #1
7000ae42:	61fb      	str	r3, [r7, #28]
7000ae44:	f107 030e 	add.w	r3, r7, #14
7000ae48:	3301      	adds	r3, #1
7000ae4a:	7812      	ldrb	r2, [r2, #0]
7000ae4c:	701a      	strb	r2, [r3, #0]
    len--;
7000ae4e:	683b      	ldr	r3, [r7, #0]
7000ae50:	3b01      	subs	r3, #1
7000ae52:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
7000ae54:	69fb      	ldr	r3, [r7, #28]
7000ae56:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
7000ae58:	e00a      	b.n	7000ae70 <lwip_standard_chksum+0x5c>
    sum += *ps++;
7000ae5a:	69bb      	ldr	r3, [r7, #24]
7000ae5c:	1c9a      	adds	r2, r3, #2
7000ae5e:	61ba      	str	r2, [r7, #24]
7000ae60:	881b      	ldrh	r3, [r3, #0]
7000ae62:	461a      	mov	r2, r3
7000ae64:	697b      	ldr	r3, [r7, #20]
7000ae66:	4413      	add	r3, r2
7000ae68:	617b      	str	r3, [r7, #20]
    len -= 2;
7000ae6a:	683b      	ldr	r3, [r7, #0]
7000ae6c:	3b02      	subs	r3, #2
7000ae6e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
7000ae70:	683b      	ldr	r3, [r7, #0]
7000ae72:	2b01      	cmp	r3, #1
7000ae74:	dcf1      	bgt.n	7000ae5a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
7000ae76:	683b      	ldr	r3, [r7, #0]
7000ae78:	2b00      	cmp	r3, #0
7000ae7a:	dd04      	ble.n	7000ae86 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
7000ae7c:	f107 030e 	add.w	r3, r7, #14
7000ae80:	69ba      	ldr	r2, [r7, #24]
7000ae82:	7812      	ldrb	r2, [r2, #0]
7000ae84:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
7000ae86:	89fb      	ldrh	r3, [r7, #14]
7000ae88:	461a      	mov	r2, r3
7000ae8a:	697b      	ldr	r3, [r7, #20]
7000ae8c:	4413      	add	r3, r2
7000ae8e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
7000ae90:	697b      	ldr	r3, [r7, #20]
7000ae92:	0c1a      	lsrs	r2, r3, #16
7000ae94:	697b      	ldr	r3, [r7, #20]
7000ae96:	b29b      	uxth	r3, r3
7000ae98:	4413      	add	r3, r2
7000ae9a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
7000ae9c:	697b      	ldr	r3, [r7, #20]
7000ae9e:	0c1a      	lsrs	r2, r3, #16
7000aea0:	697b      	ldr	r3, [r7, #20]
7000aea2:	b29b      	uxth	r3, r3
7000aea4:	4413      	add	r3, r2
7000aea6:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
7000aea8:	693b      	ldr	r3, [r7, #16]
7000aeaa:	2b00      	cmp	r3, #0
7000aeac:	d007      	beq.n	7000aebe <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
7000aeae:	697b      	ldr	r3, [r7, #20]
7000aeb0:	021b      	lsls	r3, r3, #8
7000aeb2:	b29a      	uxth	r2, r3
7000aeb4:	697b      	ldr	r3, [r7, #20]
7000aeb6:	0a1b      	lsrs	r3, r3, #8
7000aeb8:	b2db      	uxtb	r3, r3
7000aeba:	4313      	orrs	r3, r2
7000aebc:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
7000aebe:	697b      	ldr	r3, [r7, #20]
7000aec0:	b29b      	uxth	r3, r3
}
7000aec2:	4618      	mov	r0, r3
7000aec4:	3724      	adds	r7, #36	@ 0x24
7000aec6:	46bd      	mov	sp, r7
7000aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
7000aecc:	4770      	bx	lr

7000aece <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
7000aece:	b580      	push	{r7, lr}
7000aed0:	b082      	sub	sp, #8
7000aed2:	af00      	add	r7, sp, #0
7000aed4:	6078      	str	r0, [r7, #4]
7000aed6:	460b      	mov	r3, r1
7000aed8:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
7000aeda:	887b      	ldrh	r3, [r7, #2]
7000aedc:	4619      	mov	r1, r3
7000aede:	6878      	ldr	r0, [r7, #4]
7000aee0:	f7ff ff98 	bl	7000ae14 <lwip_standard_chksum>
7000aee4:	4603      	mov	r3, r0
7000aee6:	43db      	mvns	r3, r3
7000aee8:	b29b      	uxth	r3, r3
}
7000aeea:	4618      	mov	r0, r3
7000aeec:	3708      	adds	r7, #8
7000aeee:	46bd      	mov	sp, r7
7000aef0:	bd80      	pop	{r7, pc}

7000aef2 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
7000aef2:	b580      	push	{r7, lr}
7000aef4:	b086      	sub	sp, #24
7000aef6:	af00      	add	r7, sp, #0
7000aef8:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
7000aefa:	2300      	movs	r3, #0
7000aefc:	60fb      	str	r3, [r7, #12]

  acc = 0;
7000aefe:	2300      	movs	r3, #0
7000af00:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
7000af02:	687b      	ldr	r3, [r7, #4]
7000af04:	613b      	str	r3, [r7, #16]
7000af06:	e02b      	b.n	7000af60 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
7000af08:	693b      	ldr	r3, [r7, #16]
7000af0a:	685a      	ldr	r2, [r3, #4]
7000af0c:	693b      	ldr	r3, [r7, #16]
7000af0e:	895b      	ldrh	r3, [r3, #10]
7000af10:	4619      	mov	r1, r3
7000af12:	4610      	mov	r0, r2
7000af14:	f7ff ff7e 	bl	7000ae14 <lwip_standard_chksum>
7000af18:	4603      	mov	r3, r0
7000af1a:	461a      	mov	r2, r3
7000af1c:	697b      	ldr	r3, [r7, #20]
7000af1e:	4413      	add	r3, r2
7000af20:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
7000af22:	697b      	ldr	r3, [r7, #20]
7000af24:	0c1a      	lsrs	r2, r3, #16
7000af26:	697b      	ldr	r3, [r7, #20]
7000af28:	b29b      	uxth	r3, r3
7000af2a:	4413      	add	r3, r2
7000af2c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
7000af2e:	693b      	ldr	r3, [r7, #16]
7000af30:	895b      	ldrh	r3, [r3, #10]
7000af32:	f003 0301 	and.w	r3, r3, #1
7000af36:	b29b      	uxth	r3, r3
7000af38:	2b00      	cmp	r3, #0
7000af3a:	d00e      	beq.n	7000af5a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
7000af3c:	68fb      	ldr	r3, [r7, #12]
7000af3e:	2b00      	cmp	r3, #0
7000af40:	bf0c      	ite	eq
7000af42:	2301      	moveq	r3, #1
7000af44:	2300      	movne	r3, #0
7000af46:	b2db      	uxtb	r3, r3
7000af48:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
7000af4a:	697b      	ldr	r3, [r7, #20]
7000af4c:	021b      	lsls	r3, r3, #8
7000af4e:	b29a      	uxth	r2, r3
7000af50:	697b      	ldr	r3, [r7, #20]
7000af52:	0a1b      	lsrs	r3, r3, #8
7000af54:	b2db      	uxtb	r3, r3
7000af56:	4313      	orrs	r3, r2
7000af58:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
7000af5a:	693b      	ldr	r3, [r7, #16]
7000af5c:	681b      	ldr	r3, [r3, #0]
7000af5e:	613b      	str	r3, [r7, #16]
7000af60:	693b      	ldr	r3, [r7, #16]
7000af62:	2b00      	cmp	r3, #0
7000af64:	d1d0      	bne.n	7000af08 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
7000af66:	68fb      	ldr	r3, [r7, #12]
7000af68:	2b00      	cmp	r3, #0
7000af6a:	d007      	beq.n	7000af7c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
7000af6c:	697b      	ldr	r3, [r7, #20]
7000af6e:	021b      	lsls	r3, r3, #8
7000af70:	b29a      	uxth	r2, r3
7000af72:	697b      	ldr	r3, [r7, #20]
7000af74:	0a1b      	lsrs	r3, r3, #8
7000af76:	b2db      	uxtb	r3, r3
7000af78:	4313      	orrs	r3, r2
7000af7a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
7000af7c:	697b      	ldr	r3, [r7, #20]
7000af7e:	b29b      	uxth	r3, r3
7000af80:	43db      	mvns	r3, r3
7000af82:	b29b      	uxth	r3, r3
}
7000af84:	4618      	mov	r0, r3
7000af86:	3718      	adds	r7, #24
7000af88:	46bd      	mov	sp, r7
7000af8a:	bd80      	pop	{r7, pc}

7000af8c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
7000af8c:	b580      	push	{r7, lr}
7000af8e:	b082      	sub	sp, #8
7000af90:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
7000af92:	2300      	movs	r3, #0
7000af94:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
7000af96:	f002 ff63 	bl	7000de60 <sys_init>
#endif /* !NO_SYS */
  mem_init();
7000af9a:	f001 f9e1 	bl	7000c360 <mem_init>
  memp_init();
7000af9e:	f001 fd39 	bl	7000ca14 <memp_init>
  pbuf_init();
  netif_init();
7000afa2:	f001 fe2b 	bl	7000cbfc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
7000afa6:	f008 fc01 	bl	700137ac <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
7000afaa:	f002 ffd5 	bl	7000df58 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
7000afae:	f008 fb43 	bl	70013638 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
7000afb2:	bf00      	nop
7000afb4:	3708      	adds	r7, #8
7000afb6:	46bd      	mov	sp, r7
7000afb8:	bd80      	pop	{r7, pc}
	...

7000afbc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
7000afbc:	b480      	push	{r7}
7000afbe:	b085      	sub	sp, #20
7000afc0:	af00      	add	r7, sp, #0
7000afc2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
7000afc4:	4b33      	ldr	r3, [pc, #204]	@ (7000b094 <ip4_route+0xd8>)
7000afc6:	681b      	ldr	r3, [r3, #0]
7000afc8:	60fb      	str	r3, [r7, #12]
7000afca:	e036      	b.n	7000b03a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
7000afcc:	68fb      	ldr	r3, [r7, #12]
7000afce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000afd2:	f003 0301 	and.w	r3, r3, #1
7000afd6:	b2db      	uxtb	r3, r3
7000afd8:	2b00      	cmp	r3, #0
7000afda:	d02b      	beq.n	7000b034 <ip4_route+0x78>
7000afdc:	68fb      	ldr	r3, [r7, #12]
7000afde:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000afe2:	089b      	lsrs	r3, r3, #2
7000afe4:	f003 0301 	and.w	r3, r3, #1
7000afe8:	b2db      	uxtb	r3, r3
7000afea:	2b00      	cmp	r3, #0
7000afec:	d022      	beq.n	7000b034 <ip4_route+0x78>
7000afee:	68fb      	ldr	r3, [r7, #12]
7000aff0:	3304      	adds	r3, #4
7000aff2:	681b      	ldr	r3, [r3, #0]
7000aff4:	2b00      	cmp	r3, #0
7000aff6:	d01d      	beq.n	7000b034 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
7000aff8:	687b      	ldr	r3, [r7, #4]
7000affa:	681a      	ldr	r2, [r3, #0]
7000affc:	68fb      	ldr	r3, [r7, #12]
7000affe:	3304      	adds	r3, #4
7000b000:	681b      	ldr	r3, [r3, #0]
7000b002:	405a      	eors	r2, r3
7000b004:	68fb      	ldr	r3, [r7, #12]
7000b006:	3308      	adds	r3, #8
7000b008:	681b      	ldr	r3, [r3, #0]
7000b00a:	4013      	ands	r3, r2
7000b00c:	2b00      	cmp	r3, #0
7000b00e:	d101      	bne.n	7000b014 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
7000b010:	68fb      	ldr	r3, [r7, #12]
7000b012:	e038      	b.n	7000b086 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
7000b014:	68fb      	ldr	r3, [r7, #12]
7000b016:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000b01a:	f003 0302 	and.w	r3, r3, #2
7000b01e:	2b00      	cmp	r3, #0
7000b020:	d108      	bne.n	7000b034 <ip4_route+0x78>
7000b022:	687b      	ldr	r3, [r7, #4]
7000b024:	681a      	ldr	r2, [r3, #0]
7000b026:	68fb      	ldr	r3, [r7, #12]
7000b028:	330c      	adds	r3, #12
7000b02a:	681b      	ldr	r3, [r3, #0]
7000b02c:	429a      	cmp	r2, r3
7000b02e:	d101      	bne.n	7000b034 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
7000b030:	68fb      	ldr	r3, [r7, #12]
7000b032:	e028      	b.n	7000b086 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
7000b034:	68fb      	ldr	r3, [r7, #12]
7000b036:	681b      	ldr	r3, [r3, #0]
7000b038:	60fb      	str	r3, [r7, #12]
7000b03a:	68fb      	ldr	r3, [r7, #12]
7000b03c:	2b00      	cmp	r3, #0
7000b03e:	d1c5      	bne.n	7000afcc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
7000b040:	4b15      	ldr	r3, [pc, #84]	@ (7000b098 <ip4_route+0xdc>)
7000b042:	681b      	ldr	r3, [r3, #0]
7000b044:	2b00      	cmp	r3, #0
7000b046:	d01a      	beq.n	7000b07e <ip4_route+0xc2>
7000b048:	4b13      	ldr	r3, [pc, #76]	@ (7000b098 <ip4_route+0xdc>)
7000b04a:	681b      	ldr	r3, [r3, #0]
7000b04c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000b050:	f003 0301 	and.w	r3, r3, #1
7000b054:	2b00      	cmp	r3, #0
7000b056:	d012      	beq.n	7000b07e <ip4_route+0xc2>
7000b058:	4b0f      	ldr	r3, [pc, #60]	@ (7000b098 <ip4_route+0xdc>)
7000b05a:	681b      	ldr	r3, [r3, #0]
7000b05c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000b060:	f003 0304 	and.w	r3, r3, #4
7000b064:	2b00      	cmp	r3, #0
7000b066:	d00a      	beq.n	7000b07e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
7000b068:	4b0b      	ldr	r3, [pc, #44]	@ (7000b098 <ip4_route+0xdc>)
7000b06a:	681b      	ldr	r3, [r3, #0]
7000b06c:	3304      	adds	r3, #4
7000b06e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
7000b070:	2b00      	cmp	r3, #0
7000b072:	d004      	beq.n	7000b07e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
7000b074:	687b      	ldr	r3, [r7, #4]
7000b076:	681b      	ldr	r3, [r3, #0]
7000b078:	b2db      	uxtb	r3, r3
7000b07a:	2b7f      	cmp	r3, #127	@ 0x7f
7000b07c:	d101      	bne.n	7000b082 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
7000b07e:	2300      	movs	r3, #0
7000b080:	e001      	b.n	7000b086 <ip4_route+0xca>
  }

  return netif_default;
7000b082:	4b05      	ldr	r3, [pc, #20]	@ (7000b098 <ip4_route+0xdc>)
7000b084:	681b      	ldr	r3, [r3, #0]
}
7000b086:	4618      	mov	r0, r3
7000b088:	3714      	adds	r7, #20
7000b08a:	46bd      	mov	sp, r7
7000b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
7000b090:	4770      	bx	lr
7000b092:	bf00      	nop
7000b094:	24008468 	.word	0x24008468
7000b098:	2400846c 	.word	0x2400846c

7000b09c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
7000b09c:	b580      	push	{r7, lr}
7000b09e:	b082      	sub	sp, #8
7000b0a0:	af00      	add	r7, sp, #0
7000b0a2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
7000b0a4:	687b      	ldr	r3, [r7, #4]
7000b0a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000b0aa:	f003 0301 	and.w	r3, r3, #1
7000b0ae:	b2db      	uxtb	r3, r3
7000b0b0:	2b00      	cmp	r3, #0
7000b0b2:	d016      	beq.n	7000b0e2 <ip4_input_accept+0x46>
7000b0b4:	687b      	ldr	r3, [r7, #4]
7000b0b6:	3304      	adds	r3, #4
7000b0b8:	681b      	ldr	r3, [r3, #0]
7000b0ba:	2b00      	cmp	r3, #0
7000b0bc:	d011      	beq.n	7000b0e2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
7000b0be:	4b0b      	ldr	r3, [pc, #44]	@ (7000b0ec <ip4_input_accept+0x50>)
7000b0c0:	695a      	ldr	r2, [r3, #20]
7000b0c2:	687b      	ldr	r3, [r7, #4]
7000b0c4:	3304      	adds	r3, #4
7000b0c6:	681b      	ldr	r3, [r3, #0]
7000b0c8:	429a      	cmp	r2, r3
7000b0ca:	d008      	beq.n	7000b0de <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
7000b0cc:	4b07      	ldr	r3, [pc, #28]	@ (7000b0ec <ip4_input_accept+0x50>)
7000b0ce:	695b      	ldr	r3, [r3, #20]
7000b0d0:	6879      	ldr	r1, [r7, #4]
7000b0d2:	4618      	mov	r0, r3
7000b0d4:	f000 fa08 	bl	7000b4e8 <ip4_addr_isbroadcast_u32>
7000b0d8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
7000b0da:	2b00      	cmp	r3, #0
7000b0dc:	d001      	beq.n	7000b0e2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
7000b0de:	2301      	movs	r3, #1
7000b0e0:	e000      	b.n	7000b0e4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
7000b0e2:	2300      	movs	r3, #0
}
7000b0e4:	4618      	mov	r0, r3
7000b0e6:	3708      	adds	r7, #8
7000b0e8:	46bd      	mov	sp, r7
7000b0ea:	bd80      	pop	{r7, pc}
7000b0ec:	24005368 	.word	0x24005368

7000b0f0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
7000b0f0:	b580      	push	{r7, lr}
7000b0f2:	b086      	sub	sp, #24
7000b0f4:	af00      	add	r7, sp, #0
7000b0f6:	6078      	str	r0, [r7, #4]
7000b0f8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
7000b0fa:	687b      	ldr	r3, [r7, #4]
7000b0fc:	685b      	ldr	r3, [r3, #4]
7000b0fe:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
7000b100:	697b      	ldr	r3, [r7, #20]
7000b102:	781b      	ldrb	r3, [r3, #0]
7000b104:	091b      	lsrs	r3, r3, #4
7000b106:	b2db      	uxtb	r3, r3
7000b108:	2b04      	cmp	r3, #4
7000b10a:	d004      	beq.n	7000b116 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
7000b10c:	6878      	ldr	r0, [r7, #4]
7000b10e:	f002 fb9b 	bl	7000d848 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
7000b112:	2300      	movs	r3, #0
7000b114:	e107      	b.n	7000b326 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
7000b116:	697b      	ldr	r3, [r7, #20]
7000b118:	781b      	ldrb	r3, [r3, #0]
7000b11a:	f003 030f 	and.w	r3, r3, #15
7000b11e:	b2db      	uxtb	r3, r3
7000b120:	009b      	lsls	r3, r3, #2
7000b122:	b2db      	uxtb	r3, r3
7000b124:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
7000b126:	697b      	ldr	r3, [r7, #20]
7000b128:	885b      	ldrh	r3, [r3, #2]
7000b12a:	b29b      	uxth	r3, r3
7000b12c:	4618      	mov	r0, r3
7000b12e:	f7fe fc4f 	bl	700099d0 <lwip_htons>
7000b132:	4603      	mov	r3, r0
7000b134:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
7000b136:	687b      	ldr	r3, [r7, #4]
7000b138:	891b      	ldrh	r3, [r3, #8]
7000b13a:	89ba      	ldrh	r2, [r7, #12]
7000b13c:	429a      	cmp	r2, r3
7000b13e:	d204      	bcs.n	7000b14a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
7000b140:	89bb      	ldrh	r3, [r7, #12]
7000b142:	4619      	mov	r1, r3
7000b144:	6878      	ldr	r0, [r7, #4]
7000b146:	f002 fa03 	bl	7000d550 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
7000b14a:	687b      	ldr	r3, [r7, #4]
7000b14c:	895b      	ldrh	r3, [r3, #10]
7000b14e:	89fa      	ldrh	r2, [r7, #14]
7000b150:	429a      	cmp	r2, r3
7000b152:	d807      	bhi.n	7000b164 <ip4_input+0x74>
7000b154:	687b      	ldr	r3, [r7, #4]
7000b156:	891b      	ldrh	r3, [r3, #8]
7000b158:	89ba      	ldrh	r2, [r7, #12]
7000b15a:	429a      	cmp	r2, r3
7000b15c:	d802      	bhi.n	7000b164 <ip4_input+0x74>
7000b15e:	89fb      	ldrh	r3, [r7, #14]
7000b160:	2b13      	cmp	r3, #19
7000b162:	d804      	bhi.n	7000b16e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
7000b164:	6878      	ldr	r0, [r7, #4]
7000b166:	f002 fb6f 	bl	7000d848 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
7000b16a:	2300      	movs	r3, #0
7000b16c:	e0db      	b.n	7000b326 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
7000b16e:	697b      	ldr	r3, [r7, #20]
7000b170:	691b      	ldr	r3, [r3, #16]
7000b172:	4a6f      	ldr	r2, [pc, #444]	@ (7000b330 <ip4_input+0x240>)
7000b174:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
7000b176:	697b      	ldr	r3, [r7, #20]
7000b178:	68db      	ldr	r3, [r3, #12]
7000b17a:	4a6d      	ldr	r2, [pc, #436]	@ (7000b330 <ip4_input+0x240>)
7000b17c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
7000b17e:	4b6c      	ldr	r3, [pc, #432]	@ (7000b330 <ip4_input+0x240>)
7000b180:	695b      	ldr	r3, [r3, #20]
7000b182:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
7000b186:	2be0      	cmp	r3, #224	@ 0xe0
7000b188:	d112      	bne.n	7000b1b0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
7000b18a:	683b      	ldr	r3, [r7, #0]
7000b18c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000b190:	f003 0301 	and.w	r3, r3, #1
7000b194:	b2db      	uxtb	r3, r3
7000b196:	2b00      	cmp	r3, #0
7000b198:	d007      	beq.n	7000b1aa <ip4_input+0xba>
7000b19a:	683b      	ldr	r3, [r7, #0]
7000b19c:	3304      	adds	r3, #4
7000b19e:	681b      	ldr	r3, [r3, #0]
7000b1a0:	2b00      	cmp	r3, #0
7000b1a2:	d002      	beq.n	7000b1aa <ip4_input+0xba>
      netif = inp;
7000b1a4:	683b      	ldr	r3, [r7, #0]
7000b1a6:	613b      	str	r3, [r7, #16]
7000b1a8:	e02a      	b.n	7000b200 <ip4_input+0x110>
    } else {
      netif = NULL;
7000b1aa:	2300      	movs	r3, #0
7000b1ac:	613b      	str	r3, [r7, #16]
7000b1ae:	e027      	b.n	7000b200 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
7000b1b0:	6838      	ldr	r0, [r7, #0]
7000b1b2:	f7ff ff73 	bl	7000b09c <ip4_input_accept>
7000b1b6:	4603      	mov	r3, r0
7000b1b8:	2b00      	cmp	r3, #0
7000b1ba:	d002      	beq.n	7000b1c2 <ip4_input+0xd2>
      netif = inp;
7000b1bc:	683b      	ldr	r3, [r7, #0]
7000b1be:	613b      	str	r3, [r7, #16]
7000b1c0:	e01e      	b.n	7000b200 <ip4_input+0x110>
    } else {
      netif = NULL;
7000b1c2:	2300      	movs	r3, #0
7000b1c4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
7000b1c6:	4b5a      	ldr	r3, [pc, #360]	@ (7000b330 <ip4_input+0x240>)
7000b1c8:	695b      	ldr	r3, [r3, #20]
7000b1ca:	b2db      	uxtb	r3, r3
7000b1cc:	2b7f      	cmp	r3, #127	@ 0x7f
7000b1ce:	d017      	beq.n	7000b200 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
7000b1d0:	4b58      	ldr	r3, [pc, #352]	@ (7000b334 <ip4_input+0x244>)
7000b1d2:	681b      	ldr	r3, [r3, #0]
7000b1d4:	613b      	str	r3, [r7, #16]
7000b1d6:	e00e      	b.n	7000b1f6 <ip4_input+0x106>
          if (netif == inp) {
7000b1d8:	693a      	ldr	r2, [r7, #16]
7000b1da:	683b      	ldr	r3, [r7, #0]
7000b1dc:	429a      	cmp	r2, r3
7000b1de:	d006      	beq.n	7000b1ee <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
7000b1e0:	6938      	ldr	r0, [r7, #16]
7000b1e2:	f7ff ff5b 	bl	7000b09c <ip4_input_accept>
7000b1e6:	4603      	mov	r3, r0
7000b1e8:	2b00      	cmp	r3, #0
7000b1ea:	d108      	bne.n	7000b1fe <ip4_input+0x10e>
7000b1ec:	e000      	b.n	7000b1f0 <ip4_input+0x100>
            continue;
7000b1ee:	bf00      	nop
        NETIF_FOREACH(netif) {
7000b1f0:	693b      	ldr	r3, [r7, #16]
7000b1f2:	681b      	ldr	r3, [r3, #0]
7000b1f4:	613b      	str	r3, [r7, #16]
7000b1f6:	693b      	ldr	r3, [r7, #16]
7000b1f8:	2b00      	cmp	r3, #0
7000b1fa:	d1ed      	bne.n	7000b1d8 <ip4_input+0xe8>
7000b1fc:	e000      	b.n	7000b200 <ip4_input+0x110>
            break;
7000b1fe:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
7000b200:	4b4b      	ldr	r3, [pc, #300]	@ (7000b330 <ip4_input+0x240>)
7000b202:	691b      	ldr	r3, [r3, #16]
7000b204:	6839      	ldr	r1, [r7, #0]
7000b206:	4618      	mov	r0, r3
7000b208:	f000 f96e 	bl	7000b4e8 <ip4_addr_isbroadcast_u32>
7000b20c:	4603      	mov	r3, r0
7000b20e:	2b00      	cmp	r3, #0
7000b210:	d105      	bne.n	7000b21e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
7000b212:	4b47      	ldr	r3, [pc, #284]	@ (7000b330 <ip4_input+0x240>)
7000b214:	691b      	ldr	r3, [r3, #16]
7000b216:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
7000b21a:	2be0      	cmp	r3, #224	@ 0xe0
7000b21c:	d104      	bne.n	7000b228 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
7000b21e:	6878      	ldr	r0, [r7, #4]
7000b220:	f002 fb12 	bl	7000d848 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
7000b224:	2300      	movs	r3, #0
7000b226:	e07e      	b.n	7000b326 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
7000b228:	693b      	ldr	r3, [r7, #16]
7000b22a:	2b00      	cmp	r3, #0
7000b22c:	d104      	bne.n	7000b238 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
7000b22e:	6878      	ldr	r0, [r7, #4]
7000b230:	f002 fb0a 	bl	7000d848 <pbuf_free>
    return ERR_OK;
7000b234:	2300      	movs	r3, #0
7000b236:	e076      	b.n	7000b326 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
7000b238:	697b      	ldr	r3, [r7, #20]
7000b23a:	88db      	ldrh	r3, [r3, #6]
7000b23c:	b29b      	uxth	r3, r3
7000b23e:	461a      	mov	r2, r3
7000b240:	f64f 733f 	movw	r3, #65343	@ 0xff3f
7000b244:	4013      	ands	r3, r2
7000b246:	2b00      	cmp	r3, #0
7000b248:	d00b      	beq.n	7000b262 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
7000b24a:	6878      	ldr	r0, [r7, #4]
7000b24c:	f000 fc92 	bl	7000bb74 <ip4_reass>
7000b250:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
7000b252:	687b      	ldr	r3, [r7, #4]
7000b254:	2b00      	cmp	r3, #0
7000b256:	d101      	bne.n	7000b25c <ip4_input+0x16c>
      return ERR_OK;
7000b258:	2300      	movs	r3, #0
7000b25a:	e064      	b.n	7000b326 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
7000b25c:	687b      	ldr	r3, [r7, #4]
7000b25e:	685b      	ldr	r3, [r3, #4]
7000b260:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
7000b262:	4a33      	ldr	r2, [pc, #204]	@ (7000b330 <ip4_input+0x240>)
7000b264:	693b      	ldr	r3, [r7, #16]
7000b266:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
7000b268:	4a31      	ldr	r2, [pc, #196]	@ (7000b330 <ip4_input+0x240>)
7000b26a:	683b      	ldr	r3, [r7, #0]
7000b26c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
7000b26e:	4a30      	ldr	r2, [pc, #192]	@ (7000b330 <ip4_input+0x240>)
7000b270:	697b      	ldr	r3, [r7, #20]
7000b272:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
7000b274:	697b      	ldr	r3, [r7, #20]
7000b276:	781b      	ldrb	r3, [r3, #0]
7000b278:	f003 030f 	and.w	r3, r3, #15
7000b27c:	b2db      	uxtb	r3, r3
7000b27e:	009b      	lsls	r3, r3, #2
7000b280:	b2db      	uxtb	r3, r3
7000b282:	461a      	mov	r2, r3
7000b284:	4b2a      	ldr	r3, [pc, #168]	@ (7000b330 <ip4_input+0x240>)
7000b286:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
7000b288:	89fb      	ldrh	r3, [r7, #14]
7000b28a:	4619      	mov	r1, r3
7000b28c:	6878      	ldr	r0, [r7, #4]
7000b28e:	f002 fa5f 	bl	7000d750 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
7000b292:	697b      	ldr	r3, [r7, #20]
7000b294:	7a5b      	ldrb	r3, [r3, #9]
7000b296:	2b11      	cmp	r3, #17
7000b298:	d006      	beq.n	7000b2a8 <ip4_input+0x1b8>
7000b29a:	2b11      	cmp	r3, #17
7000b29c:	dc13      	bgt.n	7000b2c6 <ip4_input+0x1d6>
7000b29e:	2b01      	cmp	r3, #1
7000b2a0:	d00c      	beq.n	7000b2bc <ip4_input+0x1cc>
7000b2a2:	2b06      	cmp	r3, #6
7000b2a4:	d005      	beq.n	7000b2b2 <ip4_input+0x1c2>
7000b2a6:	e00e      	b.n	7000b2c6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
7000b2a8:	6839      	ldr	r1, [r7, #0]
7000b2aa:	6878      	ldr	r0, [r7, #4]
7000b2ac:	f008 faf4 	bl	70013898 <udp_input>
        break;
7000b2b0:	e026      	b.n	7000b300 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
7000b2b2:	6839      	ldr	r1, [r7, #0]
7000b2b4:	6878      	ldr	r0, [r7, #4]
7000b2b6:	f004 f99f 	bl	7000f5f8 <tcp_input>
        break;
7000b2ba:	e021      	b.n	7000b300 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
7000b2bc:	6839      	ldr	r1, [r7, #0]
7000b2be:	6878      	ldr	r0, [r7, #4]
7000b2c0:	f7ff fbe4 	bl	7000aa8c <icmp_input>
        break;
7000b2c4:	e01c      	b.n	7000b300 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
7000b2c6:	4b1a      	ldr	r3, [pc, #104]	@ (7000b330 <ip4_input+0x240>)
7000b2c8:	695b      	ldr	r3, [r3, #20]
7000b2ca:	6939      	ldr	r1, [r7, #16]
7000b2cc:	4618      	mov	r0, r3
7000b2ce:	f000 f90b 	bl	7000b4e8 <ip4_addr_isbroadcast_u32>
7000b2d2:	4603      	mov	r3, r0
7000b2d4:	2b00      	cmp	r3, #0
7000b2d6:	d10f      	bne.n	7000b2f8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
7000b2d8:	4b15      	ldr	r3, [pc, #84]	@ (7000b330 <ip4_input+0x240>)
7000b2da:	695b      	ldr	r3, [r3, #20]
7000b2dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
7000b2e0:	2be0      	cmp	r3, #224	@ 0xe0
7000b2e2:	d009      	beq.n	7000b2f8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
7000b2e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
7000b2e8:	4619      	mov	r1, r3
7000b2ea:	6878      	ldr	r0, [r7, #4]
7000b2ec:	f002 fa99 	bl	7000d822 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
7000b2f0:	2102      	movs	r1, #2
7000b2f2:	6878      	ldr	r0, [r7, #4]
7000b2f4:	f7ff fcea 	bl	7000accc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
7000b2f8:	6878      	ldr	r0, [r7, #4]
7000b2fa:	f002 faa5 	bl	7000d848 <pbuf_free>
        break;
7000b2fe:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
7000b300:	4b0b      	ldr	r3, [pc, #44]	@ (7000b330 <ip4_input+0x240>)
7000b302:	2200      	movs	r2, #0
7000b304:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
7000b306:	4b0a      	ldr	r3, [pc, #40]	@ (7000b330 <ip4_input+0x240>)
7000b308:	2200      	movs	r2, #0
7000b30a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
7000b30c:	4b08      	ldr	r3, [pc, #32]	@ (7000b330 <ip4_input+0x240>)
7000b30e:	2200      	movs	r2, #0
7000b310:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
7000b312:	4b07      	ldr	r3, [pc, #28]	@ (7000b330 <ip4_input+0x240>)
7000b314:	2200      	movs	r2, #0
7000b316:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
7000b318:	4b05      	ldr	r3, [pc, #20]	@ (7000b330 <ip4_input+0x240>)
7000b31a:	2200      	movs	r2, #0
7000b31c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
7000b31e:	4b04      	ldr	r3, [pc, #16]	@ (7000b330 <ip4_input+0x240>)
7000b320:	2200      	movs	r2, #0
7000b322:	615a      	str	r2, [r3, #20]

  return ERR_OK;
7000b324:	2300      	movs	r3, #0
}
7000b326:	4618      	mov	r0, r3
7000b328:	3718      	adds	r7, #24
7000b32a:	46bd      	mov	sp, r7
7000b32c:	bd80      	pop	{r7, pc}
7000b32e:	bf00      	nop
7000b330:	24005368 	.word	0x24005368
7000b334:	24008468 	.word	0x24008468

7000b338 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
7000b338:	b580      	push	{r7, lr}
7000b33a:	b08a      	sub	sp, #40	@ 0x28
7000b33c:	af04      	add	r7, sp, #16
7000b33e:	60f8      	str	r0, [r7, #12]
7000b340:	60b9      	str	r1, [r7, #8]
7000b342:	607a      	str	r2, [r7, #4]
7000b344:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
7000b346:	68bb      	ldr	r3, [r7, #8]
7000b348:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
7000b34a:	687b      	ldr	r3, [r7, #4]
7000b34c:	2b00      	cmp	r3, #0
7000b34e:	d009      	beq.n	7000b364 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
7000b350:	68bb      	ldr	r3, [r7, #8]
7000b352:	2b00      	cmp	r3, #0
7000b354:	d003      	beq.n	7000b35e <ip4_output_if+0x26>
7000b356:	68bb      	ldr	r3, [r7, #8]
7000b358:	681b      	ldr	r3, [r3, #0]
7000b35a:	2b00      	cmp	r3, #0
7000b35c:	d102      	bne.n	7000b364 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
7000b35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000b360:	3304      	adds	r3, #4
7000b362:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
7000b364:	78fa      	ldrb	r2, [r7, #3]
7000b366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000b368:	9302      	str	r3, [sp, #8]
7000b36a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
7000b36e:	9301      	str	r3, [sp, #4]
7000b370:	f897 3020 	ldrb.w	r3, [r7, #32]
7000b374:	9300      	str	r3, [sp, #0]
7000b376:	4613      	mov	r3, r2
7000b378:	687a      	ldr	r2, [r7, #4]
7000b37a:	6979      	ldr	r1, [r7, #20]
7000b37c:	68f8      	ldr	r0, [r7, #12]
7000b37e:	f000 f805 	bl	7000b38c <ip4_output_if_src>
7000b382:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
7000b384:	4618      	mov	r0, r3
7000b386:	3718      	adds	r7, #24
7000b388:	46bd      	mov	sp, r7
7000b38a:	bd80      	pop	{r7, pc}

7000b38c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
7000b38c:	b580      	push	{r7, lr}
7000b38e:	b088      	sub	sp, #32
7000b390:	af00      	add	r7, sp, #0
7000b392:	60f8      	str	r0, [r7, #12]
7000b394:	60b9      	str	r1, [r7, #8]
7000b396:	607a      	str	r2, [r7, #4]
7000b398:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
7000b39a:	68fb      	ldr	r3, [r7, #12]
7000b39c:	7b9b      	ldrb	r3, [r3, #14]
7000b39e:	2b01      	cmp	r3, #1
7000b3a0:	d006      	beq.n	7000b3b0 <ip4_output_if_src+0x24>
7000b3a2:	4b4b      	ldr	r3, [pc, #300]	@ (7000b4d0 <ip4_output_if_src+0x144>)
7000b3a4:	f44f 7255 	mov.w	r2, #852	@ 0x354
7000b3a8:	494a      	ldr	r1, [pc, #296]	@ (7000b4d4 <ip4_output_if_src+0x148>)
7000b3aa:	484b      	ldr	r0, [pc, #300]	@ (7000b4d8 <ip4_output_if_src+0x14c>)
7000b3ac:	f008 fcb8 	bl	70013d20 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
7000b3b0:	687b      	ldr	r3, [r7, #4]
7000b3b2:	2b00      	cmp	r3, #0
7000b3b4:	d060      	beq.n	7000b478 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
7000b3b6:	2314      	movs	r3, #20
7000b3b8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
7000b3ba:	2114      	movs	r1, #20
7000b3bc:	68f8      	ldr	r0, [r7, #12]
7000b3be:	f002 f9b7 	bl	7000d730 <pbuf_add_header>
7000b3c2:	4603      	mov	r3, r0
7000b3c4:	2b00      	cmp	r3, #0
7000b3c6:	d002      	beq.n	7000b3ce <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
7000b3c8:	f06f 0301 	mvn.w	r3, #1
7000b3cc:	e07c      	b.n	7000b4c8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
7000b3ce:	68fb      	ldr	r3, [r7, #12]
7000b3d0:	685b      	ldr	r3, [r3, #4]
7000b3d2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
7000b3d4:	68fb      	ldr	r3, [r7, #12]
7000b3d6:	895b      	ldrh	r3, [r3, #10]
7000b3d8:	2b13      	cmp	r3, #19
7000b3da:	d806      	bhi.n	7000b3ea <ip4_output_if_src+0x5e>
7000b3dc:	4b3c      	ldr	r3, [pc, #240]	@ (7000b4d0 <ip4_output_if_src+0x144>)
7000b3de:	f44f 7262 	mov.w	r2, #904	@ 0x388
7000b3e2:	493e      	ldr	r1, [pc, #248]	@ (7000b4dc <ip4_output_if_src+0x150>)
7000b3e4:	483c      	ldr	r0, [pc, #240]	@ (7000b4d8 <ip4_output_if_src+0x14c>)
7000b3e6:	f008 fc9b 	bl	70013d20 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
7000b3ea:	69fb      	ldr	r3, [r7, #28]
7000b3ec:	78fa      	ldrb	r2, [r7, #3]
7000b3ee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
7000b3f0:	69fb      	ldr	r3, [r7, #28]
7000b3f2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
7000b3f6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
7000b3f8:	687b      	ldr	r3, [r7, #4]
7000b3fa:	681a      	ldr	r2, [r3, #0]
7000b3fc:	69fb      	ldr	r3, [r7, #28]
7000b3fe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
7000b400:	8b7b      	ldrh	r3, [r7, #26]
7000b402:	089b      	lsrs	r3, r3, #2
7000b404:	b29b      	uxth	r3, r3
7000b406:	b2db      	uxtb	r3, r3
7000b408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
7000b40c:	b2da      	uxtb	r2, r3
7000b40e:	69fb      	ldr	r3, [r7, #28]
7000b410:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
7000b412:	69fb      	ldr	r3, [r7, #28]
7000b414:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
7000b418:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
7000b41a:	68fb      	ldr	r3, [r7, #12]
7000b41c:	891b      	ldrh	r3, [r3, #8]
7000b41e:	4618      	mov	r0, r3
7000b420:	f7fe fad6 	bl	700099d0 <lwip_htons>
7000b424:	4603      	mov	r3, r0
7000b426:	461a      	mov	r2, r3
7000b428:	69fb      	ldr	r3, [r7, #28]
7000b42a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
7000b42c:	69fb      	ldr	r3, [r7, #28]
7000b42e:	2200      	movs	r2, #0
7000b430:	719a      	strb	r2, [r3, #6]
7000b432:	2200      	movs	r2, #0
7000b434:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
7000b436:	4b2a      	ldr	r3, [pc, #168]	@ (7000b4e0 <ip4_output_if_src+0x154>)
7000b438:	881b      	ldrh	r3, [r3, #0]
7000b43a:	4618      	mov	r0, r3
7000b43c:	f7fe fac8 	bl	700099d0 <lwip_htons>
7000b440:	4603      	mov	r3, r0
7000b442:	461a      	mov	r2, r3
7000b444:	69fb      	ldr	r3, [r7, #28]
7000b446:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
7000b448:	4b25      	ldr	r3, [pc, #148]	@ (7000b4e0 <ip4_output_if_src+0x154>)
7000b44a:	881b      	ldrh	r3, [r3, #0]
7000b44c:	3301      	adds	r3, #1
7000b44e:	b29a      	uxth	r2, r3
7000b450:	4b23      	ldr	r3, [pc, #140]	@ (7000b4e0 <ip4_output_if_src+0x154>)
7000b452:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
7000b454:	68bb      	ldr	r3, [r7, #8]
7000b456:	2b00      	cmp	r3, #0
7000b458:	d104      	bne.n	7000b464 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
7000b45a:	4b22      	ldr	r3, [pc, #136]	@ (7000b4e4 <ip4_output_if_src+0x158>)
7000b45c:	681a      	ldr	r2, [r3, #0]
7000b45e:	69fb      	ldr	r3, [r7, #28]
7000b460:	60da      	str	r2, [r3, #12]
7000b462:	e003      	b.n	7000b46c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
7000b464:	68bb      	ldr	r3, [r7, #8]
7000b466:	681a      	ldr	r2, [r3, #0]
7000b468:	69fb      	ldr	r3, [r7, #28]
7000b46a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
7000b46c:	69fb      	ldr	r3, [r7, #28]
7000b46e:	2200      	movs	r2, #0
7000b470:	729a      	strb	r2, [r3, #10]
7000b472:	2200      	movs	r2, #0
7000b474:	72da      	strb	r2, [r3, #11]
7000b476:	e00f      	b.n	7000b498 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
7000b478:	68fb      	ldr	r3, [r7, #12]
7000b47a:	895b      	ldrh	r3, [r3, #10]
7000b47c:	2b13      	cmp	r3, #19
7000b47e:	d802      	bhi.n	7000b486 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
7000b480:	f06f 0301 	mvn.w	r3, #1
7000b484:	e020      	b.n	7000b4c8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
7000b486:	68fb      	ldr	r3, [r7, #12]
7000b488:	685b      	ldr	r3, [r3, #4]
7000b48a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
7000b48c:	69fb      	ldr	r3, [r7, #28]
7000b48e:	691b      	ldr	r3, [r3, #16]
7000b490:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
7000b492:	f107 0314 	add.w	r3, r7, #20
7000b496:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
7000b498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000b49a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
7000b49c:	2b00      	cmp	r3, #0
7000b49e:	d00c      	beq.n	7000b4ba <ip4_output_if_src+0x12e>
7000b4a0:	68fb      	ldr	r3, [r7, #12]
7000b4a2:	891a      	ldrh	r2, [r3, #8]
7000b4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000b4a6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
7000b4a8:	429a      	cmp	r2, r3
7000b4aa:	d906      	bls.n	7000b4ba <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
7000b4ac:	687a      	ldr	r2, [r7, #4]
7000b4ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
7000b4b0:	68f8      	ldr	r0, [r7, #12]
7000b4b2:	f000 fd53 	bl	7000bf5c <ip4_frag>
7000b4b6:	4603      	mov	r3, r0
7000b4b8:	e006      	b.n	7000b4c8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
7000b4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000b4bc:	695b      	ldr	r3, [r3, #20]
7000b4be:	687a      	ldr	r2, [r7, #4]
7000b4c0:	68f9      	ldr	r1, [r7, #12]
7000b4c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
7000b4c4:	4798      	blx	r3
7000b4c6:	4603      	mov	r3, r0
}
7000b4c8:	4618      	mov	r0, r3
7000b4ca:	3720      	adds	r7, #32
7000b4cc:	46bd      	mov	sp, r7
7000b4ce:	bd80      	pop	{r7, pc}
7000b4d0:	7001511c 	.word	0x7001511c
7000b4d4:	70015180 	.word	0x70015180
7000b4d8:	7001518c 	.word	0x7001518c
7000b4dc:	700151b4 	.word	0x700151b4
7000b4e0:	24005380 	.word	0x24005380
7000b4e4:	7001726c 	.word	0x7001726c

7000b4e8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
7000b4e8:	b480      	push	{r7}
7000b4ea:	b085      	sub	sp, #20
7000b4ec:	af00      	add	r7, sp, #0
7000b4ee:	6078      	str	r0, [r7, #4]
7000b4f0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
7000b4f2:	687b      	ldr	r3, [r7, #4]
7000b4f4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
7000b4f6:	687b      	ldr	r3, [r7, #4]
7000b4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
7000b4fc:	d002      	beq.n	7000b504 <ip4_addr_isbroadcast_u32+0x1c>
7000b4fe:	687b      	ldr	r3, [r7, #4]
7000b500:	2b00      	cmp	r3, #0
7000b502:	d101      	bne.n	7000b508 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
7000b504:	2301      	movs	r3, #1
7000b506:	e02a      	b.n	7000b55e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
7000b508:	683b      	ldr	r3, [r7, #0]
7000b50a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000b50e:	f003 0302 	and.w	r3, r3, #2
7000b512:	2b00      	cmp	r3, #0
7000b514:	d101      	bne.n	7000b51a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
7000b516:	2300      	movs	r3, #0
7000b518:	e021      	b.n	7000b55e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
7000b51a:	683b      	ldr	r3, [r7, #0]
7000b51c:	3304      	adds	r3, #4
7000b51e:	681b      	ldr	r3, [r3, #0]
7000b520:	687a      	ldr	r2, [r7, #4]
7000b522:	429a      	cmp	r2, r3
7000b524:	d101      	bne.n	7000b52a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
7000b526:	2300      	movs	r3, #0
7000b528:	e019      	b.n	7000b55e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
7000b52a:	68fa      	ldr	r2, [r7, #12]
7000b52c:	683b      	ldr	r3, [r7, #0]
7000b52e:	3304      	adds	r3, #4
7000b530:	681b      	ldr	r3, [r3, #0]
7000b532:	405a      	eors	r2, r3
7000b534:	683b      	ldr	r3, [r7, #0]
7000b536:	3308      	adds	r3, #8
7000b538:	681b      	ldr	r3, [r3, #0]
7000b53a:	4013      	ands	r3, r2
7000b53c:	2b00      	cmp	r3, #0
7000b53e:	d10d      	bne.n	7000b55c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
7000b540:	683b      	ldr	r3, [r7, #0]
7000b542:	3308      	adds	r3, #8
7000b544:	681b      	ldr	r3, [r3, #0]
7000b546:	43da      	mvns	r2, r3
7000b548:	687b      	ldr	r3, [r7, #4]
7000b54a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
7000b54c:	683b      	ldr	r3, [r7, #0]
7000b54e:	3308      	adds	r3, #8
7000b550:	681b      	ldr	r3, [r3, #0]
7000b552:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
7000b554:	429a      	cmp	r2, r3
7000b556:	d101      	bne.n	7000b55c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
7000b558:	2301      	movs	r3, #1
7000b55a:	e000      	b.n	7000b55e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
7000b55c:	2300      	movs	r3, #0
  }
}
7000b55e:	4618      	mov	r0, r3
7000b560:	3714      	adds	r7, #20
7000b562:	46bd      	mov	sp, r7
7000b564:	f85d 7b04 	ldr.w	r7, [sp], #4
7000b568:	4770      	bx	lr
	...

7000b56c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
7000b56c:	b580      	push	{r7, lr}
7000b56e:	b084      	sub	sp, #16
7000b570:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
7000b572:	2300      	movs	r3, #0
7000b574:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
7000b576:	4b12      	ldr	r3, [pc, #72]	@ (7000b5c0 <ip_reass_tmr+0x54>)
7000b578:	681b      	ldr	r3, [r3, #0]
7000b57a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
7000b57c:	e018      	b.n	7000b5b0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
7000b57e:	68fb      	ldr	r3, [r7, #12]
7000b580:	7fdb      	ldrb	r3, [r3, #31]
7000b582:	2b00      	cmp	r3, #0
7000b584:	d00b      	beq.n	7000b59e <ip_reass_tmr+0x32>
      r->timer--;
7000b586:	68fb      	ldr	r3, [r7, #12]
7000b588:	7fdb      	ldrb	r3, [r3, #31]
7000b58a:	3b01      	subs	r3, #1
7000b58c:	b2da      	uxtb	r2, r3
7000b58e:	68fb      	ldr	r3, [r7, #12]
7000b590:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
7000b592:	68fb      	ldr	r3, [r7, #12]
7000b594:	60bb      	str	r3, [r7, #8]
      r = r->next;
7000b596:	68fb      	ldr	r3, [r7, #12]
7000b598:	681b      	ldr	r3, [r3, #0]
7000b59a:	60fb      	str	r3, [r7, #12]
7000b59c:	e008      	b.n	7000b5b0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
7000b59e:	68fb      	ldr	r3, [r7, #12]
7000b5a0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
7000b5a2:	68fb      	ldr	r3, [r7, #12]
7000b5a4:	681b      	ldr	r3, [r3, #0]
7000b5a6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
7000b5a8:	68b9      	ldr	r1, [r7, #8]
7000b5aa:	6878      	ldr	r0, [r7, #4]
7000b5ac:	f000 f80a 	bl	7000b5c4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
7000b5b0:	68fb      	ldr	r3, [r7, #12]
7000b5b2:	2b00      	cmp	r3, #0
7000b5b4:	d1e3      	bne.n	7000b57e <ip_reass_tmr+0x12>
    }
  }
}
7000b5b6:	bf00      	nop
7000b5b8:	bf00      	nop
7000b5ba:	3710      	adds	r7, #16
7000b5bc:	46bd      	mov	sp, r7
7000b5be:	bd80      	pop	{r7, pc}
7000b5c0:	24005384 	.word	0x24005384

7000b5c4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
7000b5c4:	b580      	push	{r7, lr}
7000b5c6:	b088      	sub	sp, #32
7000b5c8:	af00      	add	r7, sp, #0
7000b5ca:	6078      	str	r0, [r7, #4]
7000b5cc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
7000b5ce:	2300      	movs	r3, #0
7000b5d0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
7000b5d2:	683a      	ldr	r2, [r7, #0]
7000b5d4:	687b      	ldr	r3, [r7, #4]
7000b5d6:	429a      	cmp	r2, r3
7000b5d8:	d105      	bne.n	7000b5e6 <ip_reass_free_complete_datagram+0x22>
7000b5da:	4b45      	ldr	r3, [pc, #276]	@ (7000b6f0 <ip_reass_free_complete_datagram+0x12c>)
7000b5dc:	22ab      	movs	r2, #171	@ 0xab
7000b5de:	4945      	ldr	r1, [pc, #276]	@ (7000b6f4 <ip_reass_free_complete_datagram+0x130>)
7000b5e0:	4845      	ldr	r0, [pc, #276]	@ (7000b6f8 <ip_reass_free_complete_datagram+0x134>)
7000b5e2:	f008 fb9d 	bl	70013d20 <iprintf>
  if (prev != NULL) {
7000b5e6:	683b      	ldr	r3, [r7, #0]
7000b5e8:	2b00      	cmp	r3, #0
7000b5ea:	d00a      	beq.n	7000b602 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
7000b5ec:	683b      	ldr	r3, [r7, #0]
7000b5ee:	681b      	ldr	r3, [r3, #0]
7000b5f0:	687a      	ldr	r2, [r7, #4]
7000b5f2:	429a      	cmp	r2, r3
7000b5f4:	d005      	beq.n	7000b602 <ip_reass_free_complete_datagram+0x3e>
7000b5f6:	4b3e      	ldr	r3, [pc, #248]	@ (7000b6f0 <ip_reass_free_complete_datagram+0x12c>)
7000b5f8:	22ad      	movs	r2, #173	@ 0xad
7000b5fa:	4940      	ldr	r1, [pc, #256]	@ (7000b6fc <ip_reass_free_complete_datagram+0x138>)
7000b5fc:	483e      	ldr	r0, [pc, #248]	@ (7000b6f8 <ip_reass_free_complete_datagram+0x134>)
7000b5fe:	f008 fb8f 	bl	70013d20 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
7000b602:	687b      	ldr	r3, [r7, #4]
7000b604:	685b      	ldr	r3, [r3, #4]
7000b606:	685b      	ldr	r3, [r3, #4]
7000b608:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
7000b60a:	697b      	ldr	r3, [r7, #20]
7000b60c:	889b      	ldrh	r3, [r3, #4]
7000b60e:	b29b      	uxth	r3, r3
7000b610:	2b00      	cmp	r3, #0
7000b612:	d12a      	bne.n	7000b66a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
7000b614:	687b      	ldr	r3, [r7, #4]
7000b616:	685b      	ldr	r3, [r3, #4]
7000b618:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
7000b61a:	697b      	ldr	r3, [r7, #20]
7000b61c:	681a      	ldr	r2, [r3, #0]
7000b61e:	687b      	ldr	r3, [r7, #4]
7000b620:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
7000b622:	69bb      	ldr	r3, [r7, #24]
7000b624:	6858      	ldr	r0, [r3, #4]
7000b626:	687b      	ldr	r3, [r7, #4]
7000b628:	3308      	adds	r3, #8
7000b62a:	2214      	movs	r2, #20
7000b62c:	4619      	mov	r1, r3
7000b62e:	f008 fca8 	bl	70013f82 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
7000b632:	2101      	movs	r1, #1
7000b634:	69b8      	ldr	r0, [r7, #24]
7000b636:	f7ff fb59 	bl	7000acec <icmp_time_exceeded>
    clen = pbuf_clen(p);
7000b63a:	69b8      	ldr	r0, [r7, #24]
7000b63c:	f002 f992 	bl	7000d964 <pbuf_clen>
7000b640:	4603      	mov	r3, r0
7000b642:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
7000b644:	8bfa      	ldrh	r2, [r7, #30]
7000b646:	8a7b      	ldrh	r3, [r7, #18]
7000b648:	4413      	add	r3, r2
7000b64a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
7000b64e:	db05      	blt.n	7000b65c <ip_reass_free_complete_datagram+0x98>
7000b650:	4b27      	ldr	r3, [pc, #156]	@ (7000b6f0 <ip_reass_free_complete_datagram+0x12c>)
7000b652:	22bc      	movs	r2, #188	@ 0xbc
7000b654:	492a      	ldr	r1, [pc, #168]	@ (7000b700 <ip_reass_free_complete_datagram+0x13c>)
7000b656:	4828      	ldr	r0, [pc, #160]	@ (7000b6f8 <ip_reass_free_complete_datagram+0x134>)
7000b658:	f008 fb62 	bl	70013d20 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
7000b65c:	8bfa      	ldrh	r2, [r7, #30]
7000b65e:	8a7b      	ldrh	r3, [r7, #18]
7000b660:	4413      	add	r3, r2
7000b662:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
7000b664:	69b8      	ldr	r0, [r7, #24]
7000b666:	f002 f8ef 	bl	7000d848 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
7000b66a:	687b      	ldr	r3, [r7, #4]
7000b66c:	685b      	ldr	r3, [r3, #4]
7000b66e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
7000b670:	e01f      	b.n	7000b6b2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
7000b672:	69bb      	ldr	r3, [r7, #24]
7000b674:	685b      	ldr	r3, [r3, #4]
7000b676:	617b      	str	r3, [r7, #20]
    pcur = p;
7000b678:	69bb      	ldr	r3, [r7, #24]
7000b67a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
7000b67c:	697b      	ldr	r3, [r7, #20]
7000b67e:	681b      	ldr	r3, [r3, #0]
7000b680:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
7000b682:	68f8      	ldr	r0, [r7, #12]
7000b684:	f002 f96e 	bl	7000d964 <pbuf_clen>
7000b688:	4603      	mov	r3, r0
7000b68a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
7000b68c:	8bfa      	ldrh	r2, [r7, #30]
7000b68e:	8a7b      	ldrh	r3, [r7, #18]
7000b690:	4413      	add	r3, r2
7000b692:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
7000b696:	db05      	blt.n	7000b6a4 <ip_reass_free_complete_datagram+0xe0>
7000b698:	4b15      	ldr	r3, [pc, #84]	@ (7000b6f0 <ip_reass_free_complete_datagram+0x12c>)
7000b69a:	22cc      	movs	r2, #204	@ 0xcc
7000b69c:	4918      	ldr	r1, [pc, #96]	@ (7000b700 <ip_reass_free_complete_datagram+0x13c>)
7000b69e:	4816      	ldr	r0, [pc, #88]	@ (7000b6f8 <ip_reass_free_complete_datagram+0x134>)
7000b6a0:	f008 fb3e 	bl	70013d20 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
7000b6a4:	8bfa      	ldrh	r2, [r7, #30]
7000b6a6:	8a7b      	ldrh	r3, [r7, #18]
7000b6a8:	4413      	add	r3, r2
7000b6aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
7000b6ac:	68f8      	ldr	r0, [r7, #12]
7000b6ae:	f002 f8cb 	bl	7000d848 <pbuf_free>
  while (p != NULL) {
7000b6b2:	69bb      	ldr	r3, [r7, #24]
7000b6b4:	2b00      	cmp	r3, #0
7000b6b6:	d1dc      	bne.n	7000b672 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
7000b6b8:	6839      	ldr	r1, [r7, #0]
7000b6ba:	6878      	ldr	r0, [r7, #4]
7000b6bc:	f000 f8c2 	bl	7000b844 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
7000b6c0:	4b10      	ldr	r3, [pc, #64]	@ (7000b704 <ip_reass_free_complete_datagram+0x140>)
7000b6c2:	881b      	ldrh	r3, [r3, #0]
7000b6c4:	8bfa      	ldrh	r2, [r7, #30]
7000b6c6:	429a      	cmp	r2, r3
7000b6c8:	d905      	bls.n	7000b6d6 <ip_reass_free_complete_datagram+0x112>
7000b6ca:	4b09      	ldr	r3, [pc, #36]	@ (7000b6f0 <ip_reass_free_complete_datagram+0x12c>)
7000b6cc:	22d2      	movs	r2, #210	@ 0xd2
7000b6ce:	490e      	ldr	r1, [pc, #56]	@ (7000b708 <ip_reass_free_complete_datagram+0x144>)
7000b6d0:	4809      	ldr	r0, [pc, #36]	@ (7000b6f8 <ip_reass_free_complete_datagram+0x134>)
7000b6d2:	f008 fb25 	bl	70013d20 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
7000b6d6:	4b0b      	ldr	r3, [pc, #44]	@ (7000b704 <ip_reass_free_complete_datagram+0x140>)
7000b6d8:	881a      	ldrh	r2, [r3, #0]
7000b6da:	8bfb      	ldrh	r3, [r7, #30]
7000b6dc:	1ad3      	subs	r3, r2, r3
7000b6de:	b29a      	uxth	r2, r3
7000b6e0:	4b08      	ldr	r3, [pc, #32]	@ (7000b704 <ip_reass_free_complete_datagram+0x140>)
7000b6e2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
7000b6e4:	8bfb      	ldrh	r3, [r7, #30]
}
7000b6e6:	4618      	mov	r0, r3
7000b6e8:	3720      	adds	r7, #32
7000b6ea:	46bd      	mov	sp, r7
7000b6ec:	bd80      	pop	{r7, pc}
7000b6ee:	bf00      	nop
7000b6f0:	700151e4 	.word	0x700151e4
7000b6f4:	7001524c 	.word	0x7001524c
7000b6f8:	70015258 	.word	0x70015258
7000b6fc:	70015280 	.word	0x70015280
7000b700:	70015294 	.word	0x70015294
7000b704:	24005388 	.word	0x24005388
7000b708:	700152b4 	.word	0x700152b4

7000b70c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
7000b70c:	b580      	push	{r7, lr}
7000b70e:	b08a      	sub	sp, #40	@ 0x28
7000b710:	af00      	add	r7, sp, #0
7000b712:	6078      	str	r0, [r7, #4]
7000b714:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
7000b716:	2300      	movs	r3, #0
7000b718:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
7000b71a:	2300      	movs	r3, #0
7000b71c:	623b      	str	r3, [r7, #32]
    prev = NULL;
7000b71e:	2300      	movs	r3, #0
7000b720:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
7000b722:	2300      	movs	r3, #0
7000b724:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
7000b726:	2300      	movs	r3, #0
7000b728:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
7000b72a:	4b28      	ldr	r3, [pc, #160]	@ (7000b7cc <ip_reass_remove_oldest_datagram+0xc0>)
7000b72c:	681b      	ldr	r3, [r3, #0]
7000b72e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
7000b730:	e030      	b.n	7000b794 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
7000b732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b734:	695a      	ldr	r2, [r3, #20]
7000b736:	687b      	ldr	r3, [r7, #4]
7000b738:	68db      	ldr	r3, [r3, #12]
7000b73a:	429a      	cmp	r2, r3
7000b73c:	d10c      	bne.n	7000b758 <ip_reass_remove_oldest_datagram+0x4c>
7000b73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b740:	699a      	ldr	r2, [r3, #24]
7000b742:	687b      	ldr	r3, [r7, #4]
7000b744:	691b      	ldr	r3, [r3, #16]
7000b746:	429a      	cmp	r2, r3
7000b748:	d106      	bne.n	7000b758 <ip_reass_remove_oldest_datagram+0x4c>
7000b74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b74c:	899a      	ldrh	r2, [r3, #12]
7000b74e:	687b      	ldr	r3, [r7, #4]
7000b750:	889b      	ldrh	r3, [r3, #4]
7000b752:	b29b      	uxth	r3, r3
7000b754:	429a      	cmp	r2, r3
7000b756:	d014      	beq.n	7000b782 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
7000b758:	693b      	ldr	r3, [r7, #16]
7000b75a:	3301      	adds	r3, #1
7000b75c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
7000b75e:	6a3b      	ldr	r3, [r7, #32]
7000b760:	2b00      	cmp	r3, #0
7000b762:	d104      	bne.n	7000b76e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
7000b764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b766:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
7000b768:	69fb      	ldr	r3, [r7, #28]
7000b76a:	61bb      	str	r3, [r7, #24]
7000b76c:	e009      	b.n	7000b782 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
7000b76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b770:	7fda      	ldrb	r2, [r3, #31]
7000b772:	6a3b      	ldr	r3, [r7, #32]
7000b774:	7fdb      	ldrb	r3, [r3, #31]
7000b776:	429a      	cmp	r2, r3
7000b778:	d803      	bhi.n	7000b782 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
7000b77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b77c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
7000b77e:	69fb      	ldr	r3, [r7, #28]
7000b780:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
7000b782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b784:	681b      	ldr	r3, [r3, #0]
7000b786:	2b00      	cmp	r3, #0
7000b788:	d001      	beq.n	7000b78e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
7000b78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b78c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
7000b78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b790:	681b      	ldr	r3, [r3, #0]
7000b792:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
7000b794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b796:	2b00      	cmp	r3, #0
7000b798:	d1cb      	bne.n	7000b732 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
7000b79a:	6a3b      	ldr	r3, [r7, #32]
7000b79c:	2b00      	cmp	r3, #0
7000b79e:	d008      	beq.n	7000b7b2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
7000b7a0:	69b9      	ldr	r1, [r7, #24]
7000b7a2:	6a38      	ldr	r0, [r7, #32]
7000b7a4:	f7ff ff0e 	bl	7000b5c4 <ip_reass_free_complete_datagram>
7000b7a8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
7000b7aa:	697a      	ldr	r2, [r7, #20]
7000b7ac:	68fb      	ldr	r3, [r7, #12]
7000b7ae:	4413      	add	r3, r2
7000b7b0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
7000b7b2:	697a      	ldr	r2, [r7, #20]
7000b7b4:	683b      	ldr	r3, [r7, #0]
7000b7b6:	429a      	cmp	r2, r3
7000b7b8:	da02      	bge.n	7000b7c0 <ip_reass_remove_oldest_datagram+0xb4>
7000b7ba:	693b      	ldr	r3, [r7, #16]
7000b7bc:	2b01      	cmp	r3, #1
7000b7be:	dcac      	bgt.n	7000b71a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
7000b7c0:	697b      	ldr	r3, [r7, #20]
}
7000b7c2:	4618      	mov	r0, r3
7000b7c4:	3728      	adds	r7, #40	@ 0x28
7000b7c6:	46bd      	mov	sp, r7
7000b7c8:	bd80      	pop	{r7, pc}
7000b7ca:	bf00      	nop
7000b7cc:	24005384 	.word	0x24005384

7000b7d0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
7000b7d0:	b580      	push	{r7, lr}
7000b7d2:	b084      	sub	sp, #16
7000b7d4:	af00      	add	r7, sp, #0
7000b7d6:	6078      	str	r0, [r7, #4]
7000b7d8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
7000b7da:	2004      	movs	r0, #4
7000b7dc:	f001 f988 	bl	7000caf0 <memp_malloc>
7000b7e0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
7000b7e2:	68fb      	ldr	r3, [r7, #12]
7000b7e4:	2b00      	cmp	r3, #0
7000b7e6:	d110      	bne.n	7000b80a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
7000b7e8:	6839      	ldr	r1, [r7, #0]
7000b7ea:	6878      	ldr	r0, [r7, #4]
7000b7ec:	f7ff ff8e 	bl	7000b70c <ip_reass_remove_oldest_datagram>
7000b7f0:	4602      	mov	r2, r0
7000b7f2:	683b      	ldr	r3, [r7, #0]
7000b7f4:	4293      	cmp	r3, r2
7000b7f6:	dc03      	bgt.n	7000b800 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
7000b7f8:	2004      	movs	r0, #4
7000b7fa:	f001 f979 	bl	7000caf0 <memp_malloc>
7000b7fe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
7000b800:	68fb      	ldr	r3, [r7, #12]
7000b802:	2b00      	cmp	r3, #0
7000b804:	d101      	bne.n	7000b80a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
7000b806:	2300      	movs	r3, #0
7000b808:	e016      	b.n	7000b838 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
7000b80a:	2220      	movs	r2, #32
7000b80c:	2100      	movs	r1, #0
7000b80e:	68f8      	ldr	r0, [r7, #12]
7000b810:	f008 faeb 	bl	70013dea <memset>
  ipr->timer = IP_REASS_MAXAGE;
7000b814:	68fb      	ldr	r3, [r7, #12]
7000b816:	220f      	movs	r2, #15
7000b818:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
7000b81a:	4b09      	ldr	r3, [pc, #36]	@ (7000b840 <ip_reass_enqueue_new_datagram+0x70>)
7000b81c:	681a      	ldr	r2, [r3, #0]
7000b81e:	68fb      	ldr	r3, [r7, #12]
7000b820:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
7000b822:	4a07      	ldr	r2, [pc, #28]	@ (7000b840 <ip_reass_enqueue_new_datagram+0x70>)
7000b824:	68fb      	ldr	r3, [r7, #12]
7000b826:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
7000b828:	68fb      	ldr	r3, [r7, #12]
7000b82a:	3308      	adds	r3, #8
7000b82c:	2214      	movs	r2, #20
7000b82e:	6879      	ldr	r1, [r7, #4]
7000b830:	4618      	mov	r0, r3
7000b832:	f008 fba6 	bl	70013f82 <memcpy>
  return ipr;
7000b836:	68fb      	ldr	r3, [r7, #12]
}
7000b838:	4618      	mov	r0, r3
7000b83a:	3710      	adds	r7, #16
7000b83c:	46bd      	mov	sp, r7
7000b83e:	bd80      	pop	{r7, pc}
7000b840:	24005384 	.word	0x24005384

7000b844 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
7000b844:	b580      	push	{r7, lr}
7000b846:	b082      	sub	sp, #8
7000b848:	af00      	add	r7, sp, #0
7000b84a:	6078      	str	r0, [r7, #4]
7000b84c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
7000b84e:	4b10      	ldr	r3, [pc, #64]	@ (7000b890 <ip_reass_dequeue_datagram+0x4c>)
7000b850:	681b      	ldr	r3, [r3, #0]
7000b852:	687a      	ldr	r2, [r7, #4]
7000b854:	429a      	cmp	r2, r3
7000b856:	d104      	bne.n	7000b862 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
7000b858:	687b      	ldr	r3, [r7, #4]
7000b85a:	681b      	ldr	r3, [r3, #0]
7000b85c:	4a0c      	ldr	r2, [pc, #48]	@ (7000b890 <ip_reass_dequeue_datagram+0x4c>)
7000b85e:	6013      	str	r3, [r2, #0]
7000b860:	e00d      	b.n	7000b87e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
7000b862:	683b      	ldr	r3, [r7, #0]
7000b864:	2b00      	cmp	r3, #0
7000b866:	d106      	bne.n	7000b876 <ip_reass_dequeue_datagram+0x32>
7000b868:	4b0a      	ldr	r3, [pc, #40]	@ (7000b894 <ip_reass_dequeue_datagram+0x50>)
7000b86a:	f240 1245 	movw	r2, #325	@ 0x145
7000b86e:	490a      	ldr	r1, [pc, #40]	@ (7000b898 <ip_reass_dequeue_datagram+0x54>)
7000b870:	480a      	ldr	r0, [pc, #40]	@ (7000b89c <ip_reass_dequeue_datagram+0x58>)
7000b872:	f008 fa55 	bl	70013d20 <iprintf>
    prev->next = ipr->next;
7000b876:	687b      	ldr	r3, [r7, #4]
7000b878:	681a      	ldr	r2, [r3, #0]
7000b87a:	683b      	ldr	r3, [r7, #0]
7000b87c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
7000b87e:	6879      	ldr	r1, [r7, #4]
7000b880:	2004      	movs	r0, #4
7000b882:	f001 f99f 	bl	7000cbc4 <memp_free>
}
7000b886:	bf00      	nop
7000b888:	3708      	adds	r7, #8
7000b88a:	46bd      	mov	sp, r7
7000b88c:	bd80      	pop	{r7, pc}
7000b88e:	bf00      	nop
7000b890:	24005384 	.word	0x24005384
7000b894:	700151e4 	.word	0x700151e4
7000b898:	700152d8 	.word	0x700152d8
7000b89c:	70015258 	.word	0x70015258

7000b8a0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
7000b8a0:	b580      	push	{r7, lr}
7000b8a2:	b08c      	sub	sp, #48	@ 0x30
7000b8a4:	af00      	add	r7, sp, #0
7000b8a6:	60f8      	str	r0, [r7, #12]
7000b8a8:	60b9      	str	r1, [r7, #8]
7000b8aa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
7000b8ac:	2300      	movs	r3, #0
7000b8ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
7000b8b0:	2301      	movs	r3, #1
7000b8b2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
7000b8b4:	68bb      	ldr	r3, [r7, #8]
7000b8b6:	685b      	ldr	r3, [r3, #4]
7000b8b8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
7000b8ba:	69fb      	ldr	r3, [r7, #28]
7000b8bc:	885b      	ldrh	r3, [r3, #2]
7000b8be:	b29b      	uxth	r3, r3
7000b8c0:	4618      	mov	r0, r3
7000b8c2:	f7fe f885 	bl	700099d0 <lwip_htons>
7000b8c6:	4603      	mov	r3, r0
7000b8c8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
7000b8ca:	69fb      	ldr	r3, [r7, #28]
7000b8cc:	781b      	ldrb	r3, [r3, #0]
7000b8ce:	f003 030f 	and.w	r3, r3, #15
7000b8d2:	b2db      	uxtb	r3, r3
7000b8d4:	009b      	lsls	r3, r3, #2
7000b8d6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
7000b8d8:	7e7b      	ldrb	r3, [r7, #25]
7000b8da:	b29b      	uxth	r3, r3
7000b8dc:	8b7a      	ldrh	r2, [r7, #26]
7000b8de:	429a      	cmp	r2, r3
7000b8e0:	d202      	bcs.n	7000b8e8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
7000b8e2:	f04f 33ff 	mov.w	r3, #4294967295
7000b8e6:	e135      	b.n	7000bb54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
7000b8e8:	7e7b      	ldrb	r3, [r7, #25]
7000b8ea:	b29b      	uxth	r3, r3
7000b8ec:	8b7a      	ldrh	r2, [r7, #26]
7000b8ee:	1ad3      	subs	r3, r2, r3
7000b8f0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
7000b8f2:	69fb      	ldr	r3, [r7, #28]
7000b8f4:	88db      	ldrh	r3, [r3, #6]
7000b8f6:	b29b      	uxth	r3, r3
7000b8f8:	4618      	mov	r0, r3
7000b8fa:	f7fe f869 	bl	700099d0 <lwip_htons>
7000b8fe:	4603      	mov	r3, r0
7000b900:	f3c3 030c 	ubfx	r3, r3, #0, #13
7000b904:	b29b      	uxth	r3, r3
7000b906:	00db      	lsls	r3, r3, #3
7000b908:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
7000b90a:	68bb      	ldr	r3, [r7, #8]
7000b90c:	685b      	ldr	r3, [r3, #4]
7000b90e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
7000b910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b912:	2200      	movs	r2, #0
7000b914:	701a      	strb	r2, [r3, #0]
7000b916:	2200      	movs	r2, #0
7000b918:	705a      	strb	r2, [r3, #1]
7000b91a:	2200      	movs	r2, #0
7000b91c:	709a      	strb	r2, [r3, #2]
7000b91e:	2200      	movs	r2, #0
7000b920:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
7000b922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b924:	8afa      	ldrh	r2, [r7, #22]
7000b926:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
7000b928:	8afa      	ldrh	r2, [r7, #22]
7000b92a:	8b7b      	ldrh	r3, [r7, #26]
7000b92c:	4413      	add	r3, r2
7000b92e:	b29a      	uxth	r2, r3
7000b930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b932:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
7000b934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b936:	88db      	ldrh	r3, [r3, #6]
7000b938:	b29b      	uxth	r3, r3
7000b93a:	8afa      	ldrh	r2, [r7, #22]
7000b93c:	429a      	cmp	r2, r3
7000b93e:	d902      	bls.n	7000b946 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
7000b940:	f04f 33ff 	mov.w	r3, #4294967295
7000b944:	e106      	b.n	7000bb54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
7000b946:	68fb      	ldr	r3, [r7, #12]
7000b948:	685b      	ldr	r3, [r3, #4]
7000b94a:	627b      	str	r3, [r7, #36]	@ 0x24
7000b94c:	e068      	b.n	7000ba20 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
7000b94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000b950:	685b      	ldr	r3, [r3, #4]
7000b952:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
7000b954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b956:	889b      	ldrh	r3, [r3, #4]
7000b958:	b29a      	uxth	r2, r3
7000b95a:	693b      	ldr	r3, [r7, #16]
7000b95c:	889b      	ldrh	r3, [r3, #4]
7000b95e:	b29b      	uxth	r3, r3
7000b960:	429a      	cmp	r2, r3
7000b962:	d235      	bcs.n	7000b9d0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
7000b964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
7000b968:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
7000b96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000b96c:	2b00      	cmp	r3, #0
7000b96e:	d020      	beq.n	7000b9b2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
7000b970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b972:	889b      	ldrh	r3, [r3, #4]
7000b974:	b29a      	uxth	r2, r3
7000b976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000b978:	88db      	ldrh	r3, [r3, #6]
7000b97a:	b29b      	uxth	r3, r3
7000b97c:	429a      	cmp	r2, r3
7000b97e:	d307      	bcc.n	7000b990 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
7000b980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b982:	88db      	ldrh	r3, [r3, #6]
7000b984:	b29a      	uxth	r2, r3
7000b986:	693b      	ldr	r3, [r7, #16]
7000b988:	889b      	ldrh	r3, [r3, #4]
7000b98a:	b29b      	uxth	r3, r3
7000b98c:	429a      	cmp	r2, r3
7000b98e:	d902      	bls.n	7000b996 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
7000b990:	f04f 33ff 	mov.w	r3, #4294967295
7000b994:	e0de      	b.n	7000bb54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
7000b996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000b998:	68ba      	ldr	r2, [r7, #8]
7000b99a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
7000b99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000b99e:	88db      	ldrh	r3, [r3, #6]
7000b9a0:	b29a      	uxth	r2, r3
7000b9a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b9a4:	889b      	ldrh	r3, [r3, #4]
7000b9a6:	b29b      	uxth	r3, r3
7000b9a8:	429a      	cmp	r2, r3
7000b9aa:	d03d      	beq.n	7000ba28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
7000b9ac:	2300      	movs	r3, #0
7000b9ae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
7000b9b0:	e03a      	b.n	7000ba28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
7000b9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b9b4:	88db      	ldrh	r3, [r3, #6]
7000b9b6:	b29a      	uxth	r2, r3
7000b9b8:	693b      	ldr	r3, [r7, #16]
7000b9ba:	889b      	ldrh	r3, [r3, #4]
7000b9bc:	b29b      	uxth	r3, r3
7000b9be:	429a      	cmp	r2, r3
7000b9c0:	d902      	bls.n	7000b9c8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
7000b9c2:	f04f 33ff 	mov.w	r3, #4294967295
7000b9c6:	e0c5      	b.n	7000bb54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
7000b9c8:	68fb      	ldr	r3, [r7, #12]
7000b9ca:	68ba      	ldr	r2, [r7, #8]
7000b9cc:	605a      	str	r2, [r3, #4]
      break;
7000b9ce:	e02b      	b.n	7000ba28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
7000b9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b9d2:	889b      	ldrh	r3, [r3, #4]
7000b9d4:	b29a      	uxth	r2, r3
7000b9d6:	693b      	ldr	r3, [r7, #16]
7000b9d8:	889b      	ldrh	r3, [r3, #4]
7000b9da:	b29b      	uxth	r3, r3
7000b9dc:	429a      	cmp	r2, r3
7000b9de:	d102      	bne.n	7000b9e6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
7000b9e0:	f04f 33ff 	mov.w	r3, #4294967295
7000b9e4:	e0b6      	b.n	7000bb54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
7000b9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000b9e8:	889b      	ldrh	r3, [r3, #4]
7000b9ea:	b29a      	uxth	r2, r3
7000b9ec:	693b      	ldr	r3, [r7, #16]
7000b9ee:	88db      	ldrh	r3, [r3, #6]
7000b9f0:	b29b      	uxth	r3, r3
7000b9f2:	429a      	cmp	r2, r3
7000b9f4:	d202      	bcs.n	7000b9fc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
7000b9f6:	f04f 33ff 	mov.w	r3, #4294967295
7000b9fa:	e0ab      	b.n	7000bb54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
7000b9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000b9fe:	2b00      	cmp	r3, #0
7000ba00:	d009      	beq.n	7000ba16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
7000ba02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000ba04:	88db      	ldrh	r3, [r3, #6]
7000ba06:	b29a      	uxth	r2, r3
7000ba08:	693b      	ldr	r3, [r7, #16]
7000ba0a:	889b      	ldrh	r3, [r3, #4]
7000ba0c:	b29b      	uxth	r3, r3
7000ba0e:	429a      	cmp	r2, r3
7000ba10:	d001      	beq.n	7000ba16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
7000ba12:	2300      	movs	r3, #0
7000ba14:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
7000ba16:	693b      	ldr	r3, [r7, #16]
7000ba18:	681b      	ldr	r3, [r3, #0]
7000ba1a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
7000ba1c:	693b      	ldr	r3, [r7, #16]
7000ba1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
7000ba20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000ba22:	2b00      	cmp	r3, #0
7000ba24:	d193      	bne.n	7000b94e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
7000ba26:	e000      	b.n	7000ba2a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
7000ba28:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
7000ba2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000ba2c:	2b00      	cmp	r3, #0
7000ba2e:	d12d      	bne.n	7000ba8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
7000ba30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000ba32:	2b00      	cmp	r3, #0
7000ba34:	d01c      	beq.n	7000ba70 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
7000ba36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000ba38:	88db      	ldrh	r3, [r3, #6]
7000ba3a:	b29a      	uxth	r2, r3
7000ba3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ba3e:	889b      	ldrh	r3, [r3, #4]
7000ba40:	b29b      	uxth	r3, r3
7000ba42:	429a      	cmp	r2, r3
7000ba44:	d906      	bls.n	7000ba54 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
7000ba46:	4b45      	ldr	r3, [pc, #276]	@ (7000bb5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
7000ba48:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
7000ba4c:	4944      	ldr	r1, [pc, #272]	@ (7000bb60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
7000ba4e:	4845      	ldr	r0, [pc, #276]	@ (7000bb64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
7000ba50:	f008 f966 	bl	70013d20 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
7000ba54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000ba56:	68ba      	ldr	r2, [r7, #8]
7000ba58:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
7000ba5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000ba5c:	88db      	ldrh	r3, [r3, #6]
7000ba5e:	b29a      	uxth	r2, r3
7000ba60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ba62:	889b      	ldrh	r3, [r3, #4]
7000ba64:	b29b      	uxth	r3, r3
7000ba66:	429a      	cmp	r2, r3
7000ba68:	d010      	beq.n	7000ba8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
7000ba6a:	2300      	movs	r3, #0
7000ba6c:	623b      	str	r3, [r7, #32]
7000ba6e:	e00d      	b.n	7000ba8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
7000ba70:	68fb      	ldr	r3, [r7, #12]
7000ba72:	685b      	ldr	r3, [r3, #4]
7000ba74:	2b00      	cmp	r3, #0
7000ba76:	d006      	beq.n	7000ba86 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
7000ba78:	4b38      	ldr	r3, [pc, #224]	@ (7000bb5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
7000ba7a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
7000ba7e:	493a      	ldr	r1, [pc, #232]	@ (7000bb68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
7000ba80:	4838      	ldr	r0, [pc, #224]	@ (7000bb64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
7000ba82:	f008 f94d 	bl	70013d20 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
7000ba86:	68fb      	ldr	r3, [r7, #12]
7000ba88:	68ba      	ldr	r2, [r7, #8]
7000ba8a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
7000ba8c:	687b      	ldr	r3, [r7, #4]
7000ba8e:	2b00      	cmp	r3, #0
7000ba90:	d105      	bne.n	7000ba9e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
7000ba92:	68fb      	ldr	r3, [r7, #12]
7000ba94:	7f9b      	ldrb	r3, [r3, #30]
7000ba96:	f003 0301 	and.w	r3, r3, #1
7000ba9a:	2b00      	cmp	r3, #0
7000ba9c:	d059      	beq.n	7000bb52 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
7000ba9e:	6a3b      	ldr	r3, [r7, #32]
7000baa0:	2b00      	cmp	r3, #0
7000baa2:	d04f      	beq.n	7000bb44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
7000baa4:	68fb      	ldr	r3, [r7, #12]
7000baa6:	685b      	ldr	r3, [r3, #4]
7000baa8:	2b00      	cmp	r3, #0
7000baaa:	d006      	beq.n	7000baba <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
7000baac:	68fb      	ldr	r3, [r7, #12]
7000baae:	685b      	ldr	r3, [r3, #4]
7000bab0:	685b      	ldr	r3, [r3, #4]
7000bab2:	889b      	ldrh	r3, [r3, #4]
7000bab4:	b29b      	uxth	r3, r3
7000bab6:	2b00      	cmp	r3, #0
7000bab8:	d002      	beq.n	7000bac0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
7000baba:	2300      	movs	r3, #0
7000babc:	623b      	str	r3, [r7, #32]
7000babe:	e041      	b.n	7000bb44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
7000bac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000bac2:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
7000bac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000bac6:	681b      	ldr	r3, [r3, #0]
7000bac8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
7000baca:	e012      	b.n	7000baf2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
7000bacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000bace:	685b      	ldr	r3, [r3, #4]
7000bad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
7000bad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bad4:	88db      	ldrh	r3, [r3, #6]
7000bad6:	b29a      	uxth	r2, r3
7000bad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000bada:	889b      	ldrh	r3, [r3, #4]
7000badc:	b29b      	uxth	r3, r3
7000bade:	429a      	cmp	r2, r3
7000bae0:	d002      	beq.n	7000bae8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
7000bae2:	2300      	movs	r3, #0
7000bae4:	623b      	str	r3, [r7, #32]
            break;
7000bae6:	e007      	b.n	7000baf8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
7000bae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000baea:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
7000baec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000baee:	681b      	ldr	r3, [r3, #0]
7000baf0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
7000baf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000baf4:	2b00      	cmp	r3, #0
7000baf6:	d1e9      	bne.n	7000bacc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
7000baf8:	6a3b      	ldr	r3, [r7, #32]
7000bafa:	2b00      	cmp	r3, #0
7000bafc:	d022      	beq.n	7000bb44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
7000bafe:	68fb      	ldr	r3, [r7, #12]
7000bb00:	685b      	ldr	r3, [r3, #4]
7000bb02:	2b00      	cmp	r3, #0
7000bb04:	d106      	bne.n	7000bb14 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
7000bb06:	4b15      	ldr	r3, [pc, #84]	@ (7000bb5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
7000bb08:	f240 12df 	movw	r2, #479	@ 0x1df
7000bb0c:	4917      	ldr	r1, [pc, #92]	@ (7000bb6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
7000bb0e:	4815      	ldr	r0, [pc, #84]	@ (7000bb64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
7000bb10:	f008 f906 	bl	70013d20 <iprintf>
          LWIP_ASSERT("sanity check",
7000bb14:	68fb      	ldr	r3, [r7, #12]
7000bb16:	685b      	ldr	r3, [r3, #4]
7000bb18:	685b      	ldr	r3, [r3, #4]
7000bb1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
7000bb1c:	429a      	cmp	r2, r3
7000bb1e:	d106      	bne.n	7000bb2e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
7000bb20:	4b0e      	ldr	r3, [pc, #56]	@ (7000bb5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
7000bb22:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
7000bb26:	4911      	ldr	r1, [pc, #68]	@ (7000bb6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
7000bb28:	480e      	ldr	r0, [pc, #56]	@ (7000bb64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
7000bb2a:	f008 f8f9 	bl	70013d20 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
7000bb2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000bb30:	681b      	ldr	r3, [r3, #0]
7000bb32:	2b00      	cmp	r3, #0
7000bb34:	d006      	beq.n	7000bb44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
7000bb36:	4b09      	ldr	r3, [pc, #36]	@ (7000bb5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
7000bb38:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
7000bb3c:	490c      	ldr	r1, [pc, #48]	@ (7000bb70 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
7000bb3e:	4809      	ldr	r0, [pc, #36]	@ (7000bb64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
7000bb40:	f008 f8ee 	bl	70013d20 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
7000bb44:	6a3b      	ldr	r3, [r7, #32]
7000bb46:	2b00      	cmp	r3, #0
7000bb48:	bf14      	ite	ne
7000bb4a:	2301      	movne	r3, #1
7000bb4c:	2300      	moveq	r3, #0
7000bb4e:	b2db      	uxtb	r3, r3
7000bb50:	e000      	b.n	7000bb54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
7000bb52:	2300      	movs	r3, #0
}
7000bb54:	4618      	mov	r0, r3
7000bb56:	3730      	adds	r7, #48	@ 0x30
7000bb58:	46bd      	mov	sp, r7
7000bb5a:	bd80      	pop	{r7, pc}
7000bb5c:	700151e4 	.word	0x700151e4
7000bb60:	700152f4 	.word	0x700152f4
7000bb64:	70015258 	.word	0x70015258
7000bb68:	70015314 	.word	0x70015314
7000bb6c:	7001534c 	.word	0x7001534c
7000bb70:	7001535c 	.word	0x7001535c

7000bb74 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
7000bb74:	b580      	push	{r7, lr}
7000bb76:	b08e      	sub	sp, #56	@ 0x38
7000bb78:	af00      	add	r7, sp, #0
7000bb7a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
7000bb7c:	687b      	ldr	r3, [r7, #4]
7000bb7e:	685b      	ldr	r3, [r3, #4]
7000bb80:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
7000bb82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bb84:	781b      	ldrb	r3, [r3, #0]
7000bb86:	f003 030f 	and.w	r3, r3, #15
7000bb8a:	b2db      	uxtb	r3, r3
7000bb8c:	009b      	lsls	r3, r3, #2
7000bb8e:	b2db      	uxtb	r3, r3
7000bb90:	2b14      	cmp	r3, #20
7000bb92:	f040 8171 	bne.w	7000be78 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
7000bb96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bb98:	88db      	ldrh	r3, [r3, #6]
7000bb9a:	b29b      	uxth	r3, r3
7000bb9c:	4618      	mov	r0, r3
7000bb9e:	f7fd ff17 	bl	700099d0 <lwip_htons>
7000bba2:	4603      	mov	r3, r0
7000bba4:	f3c3 030c 	ubfx	r3, r3, #0, #13
7000bba8:	b29b      	uxth	r3, r3
7000bbaa:	00db      	lsls	r3, r3, #3
7000bbac:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
7000bbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bbb0:	885b      	ldrh	r3, [r3, #2]
7000bbb2:	b29b      	uxth	r3, r3
7000bbb4:	4618      	mov	r0, r3
7000bbb6:	f7fd ff0b 	bl	700099d0 <lwip_htons>
7000bbba:	4603      	mov	r3, r0
7000bbbc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
7000bbbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bbc0:	781b      	ldrb	r3, [r3, #0]
7000bbc2:	f003 030f 	and.w	r3, r3, #15
7000bbc6:	b2db      	uxtb	r3, r3
7000bbc8:	009b      	lsls	r3, r3, #2
7000bbca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
7000bbce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
7000bbd2:	b29b      	uxth	r3, r3
7000bbd4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
7000bbd6:	429a      	cmp	r2, r3
7000bbd8:	f0c0 8150 	bcc.w	7000be7c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
7000bbdc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
7000bbe0:	b29b      	uxth	r3, r3
7000bbe2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
7000bbe4:	1ad3      	subs	r3, r2, r3
7000bbe6:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
7000bbe8:	6878      	ldr	r0, [r7, #4]
7000bbea:	f001 febb 	bl	7000d964 <pbuf_clen>
7000bbee:	4603      	mov	r3, r0
7000bbf0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
7000bbf2:	4b8c      	ldr	r3, [pc, #560]	@ (7000be24 <ip4_reass+0x2b0>)
7000bbf4:	881b      	ldrh	r3, [r3, #0]
7000bbf6:	461a      	mov	r2, r3
7000bbf8:	8c3b      	ldrh	r3, [r7, #32]
7000bbfa:	4413      	add	r3, r2
7000bbfc:	2b0a      	cmp	r3, #10
7000bbfe:	dd10      	ble.n	7000bc22 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
7000bc00:	8c3b      	ldrh	r3, [r7, #32]
7000bc02:	4619      	mov	r1, r3
7000bc04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
7000bc06:	f7ff fd81 	bl	7000b70c <ip_reass_remove_oldest_datagram>
7000bc0a:	4603      	mov	r3, r0
7000bc0c:	2b00      	cmp	r3, #0
7000bc0e:	f000 8137 	beq.w	7000be80 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
7000bc12:	4b84      	ldr	r3, [pc, #528]	@ (7000be24 <ip4_reass+0x2b0>)
7000bc14:	881b      	ldrh	r3, [r3, #0]
7000bc16:	461a      	mov	r2, r3
7000bc18:	8c3b      	ldrh	r3, [r7, #32]
7000bc1a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
7000bc1c:	2b0a      	cmp	r3, #10
7000bc1e:	f300 812f 	bgt.w	7000be80 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
7000bc22:	4b81      	ldr	r3, [pc, #516]	@ (7000be28 <ip4_reass+0x2b4>)
7000bc24:	681b      	ldr	r3, [r3, #0]
7000bc26:	633b      	str	r3, [r7, #48]	@ 0x30
7000bc28:	e015      	b.n	7000bc56 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
7000bc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bc2c:	695a      	ldr	r2, [r3, #20]
7000bc2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bc30:	68db      	ldr	r3, [r3, #12]
7000bc32:	429a      	cmp	r2, r3
7000bc34:	d10c      	bne.n	7000bc50 <ip4_reass+0xdc>
7000bc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bc38:	699a      	ldr	r2, [r3, #24]
7000bc3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bc3c:	691b      	ldr	r3, [r3, #16]
7000bc3e:	429a      	cmp	r2, r3
7000bc40:	d106      	bne.n	7000bc50 <ip4_reass+0xdc>
7000bc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bc44:	899a      	ldrh	r2, [r3, #12]
7000bc46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bc48:	889b      	ldrh	r3, [r3, #4]
7000bc4a:	b29b      	uxth	r3, r3
7000bc4c:	429a      	cmp	r2, r3
7000bc4e:	d006      	beq.n	7000bc5e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
7000bc50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bc52:	681b      	ldr	r3, [r3, #0]
7000bc54:	633b      	str	r3, [r7, #48]	@ 0x30
7000bc56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bc58:	2b00      	cmp	r3, #0
7000bc5a:	d1e6      	bne.n	7000bc2a <ip4_reass+0xb6>
7000bc5c:	e000      	b.n	7000bc60 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
7000bc5e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
7000bc60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bc62:	2b00      	cmp	r3, #0
7000bc64:	d109      	bne.n	7000bc7a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
7000bc66:	8c3b      	ldrh	r3, [r7, #32]
7000bc68:	4619      	mov	r1, r3
7000bc6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
7000bc6c:	f7ff fdb0 	bl	7000b7d0 <ip_reass_enqueue_new_datagram>
7000bc70:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
7000bc72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bc74:	2b00      	cmp	r3, #0
7000bc76:	d11c      	bne.n	7000bcb2 <ip4_reass+0x13e>
      goto nullreturn;
7000bc78:	e105      	b.n	7000be86 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
7000bc7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bc7c:	88db      	ldrh	r3, [r3, #6]
7000bc7e:	b29b      	uxth	r3, r3
7000bc80:	4618      	mov	r0, r3
7000bc82:	f7fd fea5 	bl	700099d0 <lwip_htons>
7000bc86:	4603      	mov	r3, r0
7000bc88:	f3c3 030c 	ubfx	r3, r3, #0, #13
7000bc8c:	2b00      	cmp	r3, #0
7000bc8e:	d110      	bne.n	7000bcb2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
7000bc90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bc92:	89db      	ldrh	r3, [r3, #14]
7000bc94:	4618      	mov	r0, r3
7000bc96:	f7fd fe9b 	bl	700099d0 <lwip_htons>
7000bc9a:	4603      	mov	r3, r0
7000bc9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
7000bca0:	2b00      	cmp	r3, #0
7000bca2:	d006      	beq.n	7000bcb2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
7000bca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bca6:	3308      	adds	r3, #8
7000bca8:	2214      	movs	r2, #20
7000bcaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
7000bcac:	4618      	mov	r0, r3
7000bcae:	f008 f968 	bl	70013f82 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
7000bcb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bcb4:	88db      	ldrh	r3, [r3, #6]
7000bcb6:	b29b      	uxth	r3, r3
7000bcb8:	f003 0320 	and.w	r3, r3, #32
7000bcbc:	2b00      	cmp	r3, #0
7000bcbe:	bf0c      	ite	eq
7000bcc0:	2301      	moveq	r3, #1
7000bcc2:	2300      	movne	r3, #0
7000bcc4:	b2db      	uxtb	r3, r3
7000bcc6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
7000bcc8:	69fb      	ldr	r3, [r7, #28]
7000bcca:	2b00      	cmp	r3, #0
7000bccc:	d00e      	beq.n	7000bcec <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
7000bcce:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
7000bcd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
7000bcd2:	4413      	add	r3, r2
7000bcd4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
7000bcd6:	8b7a      	ldrh	r2, [r7, #26]
7000bcd8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
7000bcda:	429a      	cmp	r2, r3
7000bcdc:	f0c0 80a0 	bcc.w	7000be20 <ip4_reass+0x2ac>
7000bce0:	8b7b      	ldrh	r3, [r7, #26]
7000bce2:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
7000bce6:	4293      	cmp	r3, r2
7000bce8:	f200 809a 	bhi.w	7000be20 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
7000bcec:	69fa      	ldr	r2, [r7, #28]
7000bcee:	6879      	ldr	r1, [r7, #4]
7000bcf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
7000bcf2:	f7ff fdd5 	bl	7000b8a0 <ip_reass_chain_frag_into_datagram_and_validate>
7000bcf6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
7000bcf8:	697b      	ldr	r3, [r7, #20]
7000bcfa:	f1b3 3fff 	cmp.w	r3, #4294967295
7000bcfe:	f000 809b 	beq.w	7000be38 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
7000bd02:	4b48      	ldr	r3, [pc, #288]	@ (7000be24 <ip4_reass+0x2b0>)
7000bd04:	881a      	ldrh	r2, [r3, #0]
7000bd06:	8c3b      	ldrh	r3, [r7, #32]
7000bd08:	4413      	add	r3, r2
7000bd0a:	b29a      	uxth	r2, r3
7000bd0c:	4b45      	ldr	r3, [pc, #276]	@ (7000be24 <ip4_reass+0x2b0>)
7000bd0e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
7000bd10:	69fb      	ldr	r3, [r7, #28]
7000bd12:	2b00      	cmp	r3, #0
7000bd14:	d00d      	beq.n	7000bd32 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
7000bd16:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
7000bd18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
7000bd1a:	4413      	add	r3, r2
7000bd1c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
7000bd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bd20:	8a7a      	ldrh	r2, [r7, #18]
7000bd22:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
7000bd24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bd26:	7f9b      	ldrb	r3, [r3, #30]
7000bd28:	f043 0301 	orr.w	r3, r3, #1
7000bd2c:	b2da      	uxtb	r2, r3
7000bd2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bd30:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
7000bd32:	697b      	ldr	r3, [r7, #20]
7000bd34:	2b01      	cmp	r3, #1
7000bd36:	d171      	bne.n	7000be1c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
7000bd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bd3a:	8b9b      	ldrh	r3, [r3, #28]
7000bd3c:	3314      	adds	r3, #20
7000bd3e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
7000bd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bd42:	685b      	ldr	r3, [r3, #4]
7000bd44:	685b      	ldr	r3, [r3, #4]
7000bd46:	681b      	ldr	r3, [r3, #0]
7000bd48:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
7000bd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bd4c:	685b      	ldr	r3, [r3, #4]
7000bd4e:	685b      	ldr	r3, [r3, #4]
7000bd50:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
7000bd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bd54:	3308      	adds	r3, #8
7000bd56:	2214      	movs	r2, #20
7000bd58:	4619      	mov	r1, r3
7000bd5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
7000bd5c:	f008 f911 	bl	70013f82 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
7000bd60:	8a3b      	ldrh	r3, [r7, #16]
7000bd62:	4618      	mov	r0, r3
7000bd64:	f7fd fe34 	bl	700099d0 <lwip_htons>
7000bd68:	4603      	mov	r3, r0
7000bd6a:	461a      	mov	r2, r3
7000bd6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bd6e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
7000bd70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bd72:	2200      	movs	r2, #0
7000bd74:	719a      	strb	r2, [r3, #6]
7000bd76:	2200      	movs	r2, #0
7000bd78:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
7000bd7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000bd7c:	2200      	movs	r2, #0
7000bd7e:	729a      	strb	r2, [r3, #10]
7000bd80:	2200      	movs	r2, #0
7000bd82:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
7000bd84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bd86:	685b      	ldr	r3, [r3, #4]
7000bd88:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
7000bd8a:	e00d      	b.n	7000bda8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
7000bd8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7000bd8e:	685b      	ldr	r3, [r3, #4]
7000bd90:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
7000bd92:	2114      	movs	r1, #20
7000bd94:	6b78      	ldr	r0, [r7, #52]	@ 0x34
7000bd96:	f001 fcdb 	bl	7000d750 <pbuf_remove_header>
      pbuf_cat(p, r);
7000bd9a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
7000bd9c:	6878      	ldr	r0, [r7, #4]
7000bd9e:	f001 fe21 	bl	7000d9e4 <pbuf_cat>
      r = iprh->next_pbuf;
7000bda2:	68fb      	ldr	r3, [r7, #12]
7000bda4:	681b      	ldr	r3, [r3, #0]
7000bda6:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
7000bda8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7000bdaa:	2b00      	cmp	r3, #0
7000bdac:	d1ee      	bne.n	7000bd8c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
7000bdae:	4b1e      	ldr	r3, [pc, #120]	@ (7000be28 <ip4_reass+0x2b4>)
7000bdb0:	681b      	ldr	r3, [r3, #0]
7000bdb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
7000bdb4:	429a      	cmp	r2, r3
7000bdb6:	d102      	bne.n	7000bdbe <ip4_reass+0x24a>
      ipr_prev = NULL;
7000bdb8:	2300      	movs	r3, #0
7000bdba:	62fb      	str	r3, [r7, #44]	@ 0x2c
7000bdbc:	e010      	b.n	7000bde0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
7000bdbe:	4b1a      	ldr	r3, [pc, #104]	@ (7000be28 <ip4_reass+0x2b4>)
7000bdc0:	681b      	ldr	r3, [r3, #0]
7000bdc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
7000bdc4:	e007      	b.n	7000bdd6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
7000bdc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000bdc8:	681b      	ldr	r3, [r3, #0]
7000bdca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
7000bdcc:	429a      	cmp	r2, r3
7000bdce:	d006      	beq.n	7000bdde <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
7000bdd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000bdd2:	681b      	ldr	r3, [r3, #0]
7000bdd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
7000bdd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000bdd8:	2b00      	cmp	r3, #0
7000bdda:	d1f4      	bne.n	7000bdc6 <ip4_reass+0x252>
7000bddc:	e000      	b.n	7000bde0 <ip4_reass+0x26c>
          break;
7000bdde:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
7000bde0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
7000bde2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
7000bde4:	f7ff fd2e 	bl	7000b844 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
7000bde8:	6878      	ldr	r0, [r7, #4]
7000bdea:	f001 fdbb 	bl	7000d964 <pbuf_clen>
7000bdee:	4603      	mov	r3, r0
7000bdf0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
7000bdf2:	4b0c      	ldr	r3, [pc, #48]	@ (7000be24 <ip4_reass+0x2b0>)
7000bdf4:	881b      	ldrh	r3, [r3, #0]
7000bdf6:	8c3a      	ldrh	r2, [r7, #32]
7000bdf8:	429a      	cmp	r2, r3
7000bdfa:	d906      	bls.n	7000be0a <ip4_reass+0x296>
7000bdfc:	4b0b      	ldr	r3, [pc, #44]	@ (7000be2c <ip4_reass+0x2b8>)
7000bdfe:	f240 229b 	movw	r2, #667	@ 0x29b
7000be02:	490b      	ldr	r1, [pc, #44]	@ (7000be30 <ip4_reass+0x2bc>)
7000be04:	480b      	ldr	r0, [pc, #44]	@ (7000be34 <ip4_reass+0x2c0>)
7000be06:	f007 ff8b 	bl	70013d20 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
7000be0a:	4b06      	ldr	r3, [pc, #24]	@ (7000be24 <ip4_reass+0x2b0>)
7000be0c:	881a      	ldrh	r2, [r3, #0]
7000be0e:	8c3b      	ldrh	r3, [r7, #32]
7000be10:	1ad3      	subs	r3, r2, r3
7000be12:	b29a      	uxth	r2, r3
7000be14:	4b03      	ldr	r3, [pc, #12]	@ (7000be24 <ip4_reass+0x2b0>)
7000be16:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
7000be18:	687b      	ldr	r3, [r7, #4]
7000be1a:	e038      	b.n	7000be8e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
7000be1c:	2300      	movs	r3, #0
7000be1e:	e036      	b.n	7000be8e <ip4_reass+0x31a>
      goto nullreturn_ipr;
7000be20:	bf00      	nop
7000be22:	e00a      	b.n	7000be3a <ip4_reass+0x2c6>
7000be24:	24005388 	.word	0x24005388
7000be28:	24005384 	.word	0x24005384
7000be2c:	700151e4 	.word	0x700151e4
7000be30:	70015380 	.word	0x70015380
7000be34:	70015258 	.word	0x70015258
    goto nullreturn_ipr;
7000be38:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
7000be3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000be3c:	2b00      	cmp	r3, #0
7000be3e:	d106      	bne.n	7000be4e <ip4_reass+0x2da>
7000be40:	4b15      	ldr	r3, [pc, #84]	@ (7000be98 <ip4_reass+0x324>)
7000be42:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
7000be46:	4915      	ldr	r1, [pc, #84]	@ (7000be9c <ip4_reass+0x328>)
7000be48:	4815      	ldr	r0, [pc, #84]	@ (7000bea0 <ip4_reass+0x32c>)
7000be4a:	f007 ff69 	bl	70013d20 <iprintf>
  if (ipr->p == NULL) {
7000be4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000be50:	685b      	ldr	r3, [r3, #4]
7000be52:	2b00      	cmp	r3, #0
7000be54:	d116      	bne.n	7000be84 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
7000be56:	4b13      	ldr	r3, [pc, #76]	@ (7000bea4 <ip4_reass+0x330>)
7000be58:	681b      	ldr	r3, [r3, #0]
7000be5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
7000be5c:	429a      	cmp	r2, r3
7000be5e:	d006      	beq.n	7000be6e <ip4_reass+0x2fa>
7000be60:	4b0d      	ldr	r3, [pc, #52]	@ (7000be98 <ip4_reass+0x324>)
7000be62:	f240 22ab 	movw	r2, #683	@ 0x2ab
7000be66:	4910      	ldr	r1, [pc, #64]	@ (7000bea8 <ip4_reass+0x334>)
7000be68:	480d      	ldr	r0, [pc, #52]	@ (7000bea0 <ip4_reass+0x32c>)
7000be6a:	f007 ff59 	bl	70013d20 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
7000be6e:	2100      	movs	r1, #0
7000be70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
7000be72:	f7ff fce7 	bl	7000b844 <ip_reass_dequeue_datagram>
7000be76:	e006      	b.n	7000be86 <ip4_reass+0x312>
    goto nullreturn;
7000be78:	bf00      	nop
7000be7a:	e004      	b.n	7000be86 <ip4_reass+0x312>
    goto nullreturn;
7000be7c:	bf00      	nop
7000be7e:	e002      	b.n	7000be86 <ip4_reass+0x312>
      goto nullreturn;
7000be80:	bf00      	nop
7000be82:	e000      	b.n	7000be86 <ip4_reass+0x312>
  }

nullreturn:
7000be84:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
7000be86:	6878      	ldr	r0, [r7, #4]
7000be88:	f001 fcde 	bl	7000d848 <pbuf_free>
  return NULL;
7000be8c:	2300      	movs	r3, #0
}
7000be8e:	4618      	mov	r0, r3
7000be90:	3738      	adds	r7, #56	@ 0x38
7000be92:	46bd      	mov	sp, r7
7000be94:	bd80      	pop	{r7, pc}
7000be96:	bf00      	nop
7000be98:	700151e4 	.word	0x700151e4
7000be9c:	7001539c 	.word	0x7001539c
7000bea0:	70015258 	.word	0x70015258
7000bea4:	24005384 	.word	0x24005384
7000bea8:	700153a8 	.word	0x700153a8

7000beac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
7000beac:	b580      	push	{r7, lr}
7000beae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
7000beb0:	2005      	movs	r0, #5
7000beb2:	f000 fe1d 	bl	7000caf0 <memp_malloc>
7000beb6:	4603      	mov	r3, r0
}
7000beb8:	4618      	mov	r0, r3
7000beba:	bd80      	pop	{r7, pc}

7000bebc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
7000bebc:	b580      	push	{r7, lr}
7000bebe:	b082      	sub	sp, #8
7000bec0:	af00      	add	r7, sp, #0
7000bec2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
7000bec4:	687b      	ldr	r3, [r7, #4]
7000bec6:	2b00      	cmp	r3, #0
7000bec8:	d106      	bne.n	7000bed8 <ip_frag_free_pbuf_custom_ref+0x1c>
7000beca:	4b07      	ldr	r3, [pc, #28]	@ (7000bee8 <ip_frag_free_pbuf_custom_ref+0x2c>)
7000becc:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
7000bed0:	4906      	ldr	r1, [pc, #24]	@ (7000beec <ip_frag_free_pbuf_custom_ref+0x30>)
7000bed2:	4807      	ldr	r0, [pc, #28]	@ (7000bef0 <ip_frag_free_pbuf_custom_ref+0x34>)
7000bed4:	f007 ff24 	bl	70013d20 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
7000bed8:	6879      	ldr	r1, [r7, #4]
7000beda:	2005      	movs	r0, #5
7000bedc:	f000 fe72 	bl	7000cbc4 <memp_free>
}
7000bee0:	bf00      	nop
7000bee2:	3708      	adds	r7, #8
7000bee4:	46bd      	mov	sp, r7
7000bee6:	bd80      	pop	{r7, pc}
7000bee8:	700151e4 	.word	0x700151e4
7000beec:	700153c8 	.word	0x700153c8
7000bef0:	70015258 	.word	0x70015258

7000bef4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
7000bef4:	b580      	push	{r7, lr}
7000bef6:	b084      	sub	sp, #16
7000bef8:	af00      	add	r7, sp, #0
7000befa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
7000befc:	687b      	ldr	r3, [r7, #4]
7000befe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
7000bf00:	68fb      	ldr	r3, [r7, #12]
7000bf02:	2b00      	cmp	r3, #0
7000bf04:	d106      	bne.n	7000bf14 <ipfrag_free_pbuf_custom+0x20>
7000bf06:	4b11      	ldr	r3, [pc, #68]	@ (7000bf4c <ipfrag_free_pbuf_custom+0x58>)
7000bf08:	f240 22ce 	movw	r2, #718	@ 0x2ce
7000bf0c:	4910      	ldr	r1, [pc, #64]	@ (7000bf50 <ipfrag_free_pbuf_custom+0x5c>)
7000bf0e:	4811      	ldr	r0, [pc, #68]	@ (7000bf54 <ipfrag_free_pbuf_custom+0x60>)
7000bf10:	f007 ff06 	bl	70013d20 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
7000bf14:	68fa      	ldr	r2, [r7, #12]
7000bf16:	687b      	ldr	r3, [r7, #4]
7000bf18:	429a      	cmp	r2, r3
7000bf1a:	d006      	beq.n	7000bf2a <ipfrag_free_pbuf_custom+0x36>
7000bf1c:	4b0b      	ldr	r3, [pc, #44]	@ (7000bf4c <ipfrag_free_pbuf_custom+0x58>)
7000bf1e:	f240 22cf 	movw	r2, #719	@ 0x2cf
7000bf22:	490d      	ldr	r1, [pc, #52]	@ (7000bf58 <ipfrag_free_pbuf_custom+0x64>)
7000bf24:	480b      	ldr	r0, [pc, #44]	@ (7000bf54 <ipfrag_free_pbuf_custom+0x60>)
7000bf26:	f007 fefb 	bl	70013d20 <iprintf>
  if (pcr->original != NULL) {
7000bf2a:	68fb      	ldr	r3, [r7, #12]
7000bf2c:	695b      	ldr	r3, [r3, #20]
7000bf2e:	2b00      	cmp	r3, #0
7000bf30:	d004      	beq.n	7000bf3c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
7000bf32:	68fb      	ldr	r3, [r7, #12]
7000bf34:	695b      	ldr	r3, [r3, #20]
7000bf36:	4618      	mov	r0, r3
7000bf38:	f001 fc86 	bl	7000d848 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
7000bf3c:	68f8      	ldr	r0, [r7, #12]
7000bf3e:	f7ff ffbd 	bl	7000bebc <ip_frag_free_pbuf_custom_ref>
}
7000bf42:	bf00      	nop
7000bf44:	3710      	adds	r7, #16
7000bf46:	46bd      	mov	sp, r7
7000bf48:	bd80      	pop	{r7, pc}
7000bf4a:	bf00      	nop
7000bf4c:	700151e4 	.word	0x700151e4
7000bf50:	700153d4 	.word	0x700153d4
7000bf54:	70015258 	.word	0x70015258
7000bf58:	700153e0 	.word	0x700153e0

7000bf5c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
7000bf5c:	b580      	push	{r7, lr}
7000bf5e:	b094      	sub	sp, #80	@ 0x50
7000bf60:	af02      	add	r7, sp, #8
7000bf62:	60f8      	str	r0, [r7, #12]
7000bf64:	60b9      	str	r1, [r7, #8]
7000bf66:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
7000bf68:	2300      	movs	r3, #0
7000bf6a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
7000bf6e:	68bb      	ldr	r3, [r7, #8]
7000bf70:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
7000bf72:	3b14      	subs	r3, #20
7000bf74:	2b00      	cmp	r3, #0
7000bf76:	da00      	bge.n	7000bf7a <ip4_frag+0x1e>
7000bf78:	3307      	adds	r3, #7
7000bf7a:	10db      	asrs	r3, r3, #3
7000bf7c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
7000bf7e:	2314      	movs	r3, #20
7000bf80:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
7000bf82:	68fb      	ldr	r3, [r7, #12]
7000bf84:	685b      	ldr	r3, [r3, #4]
7000bf86:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
7000bf88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7000bf8a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
7000bf8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bf8e:	781b      	ldrb	r3, [r3, #0]
7000bf90:	f003 030f 	and.w	r3, r3, #15
7000bf94:	b2db      	uxtb	r3, r3
7000bf96:	009b      	lsls	r3, r3, #2
7000bf98:	b2db      	uxtb	r3, r3
7000bf9a:	2b14      	cmp	r3, #20
7000bf9c:	d002      	beq.n	7000bfa4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
7000bf9e:	f06f 0305 	mvn.w	r3, #5
7000bfa2:	e109      	b.n	7000c1b8 <ip4_frag+0x25c>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
7000bfa4:	68fb      	ldr	r3, [r7, #12]
7000bfa6:	895b      	ldrh	r3, [r3, #10]
7000bfa8:	2b13      	cmp	r3, #19
7000bfaa:	d802      	bhi.n	7000bfb2 <ip4_frag+0x56>
7000bfac:	f06f 0305 	mvn.w	r3, #5
7000bfb0:	e102      	b.n	7000c1b8 <ip4_frag+0x25c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
7000bfb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000bfb4:	88db      	ldrh	r3, [r3, #6]
7000bfb6:	b29b      	uxth	r3, r3
7000bfb8:	4618      	mov	r0, r3
7000bfba:	f7fd fd09 	bl	700099d0 <lwip_htons>
7000bfbe:	4603      	mov	r3, r0
7000bfc0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
7000bfc2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
7000bfc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
7000bfc8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
7000bfcc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
7000bfce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
7000bfd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
7000bfd4:	68fb      	ldr	r3, [r7, #12]
7000bfd6:	891b      	ldrh	r3, [r3, #8]
7000bfd8:	3b14      	subs	r3, #20
7000bfda:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
7000bfde:	e0e1      	b.n	7000c1a4 <ip4_frag+0x248>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
7000bfe0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
7000bfe2:	00db      	lsls	r3, r3, #3
7000bfe4:	b29b      	uxth	r3, r3
7000bfe6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
7000bfea:	4293      	cmp	r3, r2
7000bfec:	bf28      	it	cs
7000bfee:	4613      	movcs	r3, r2
7000bff0:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
7000bff2:	f44f 7220 	mov.w	r2, #640	@ 0x280
7000bff6:	2114      	movs	r1, #20
7000bff8:	200e      	movs	r0, #14
7000bffa:	f001 f94b 	bl	7000d294 <pbuf_alloc>
7000bffe:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
7000c000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000c002:	2b00      	cmp	r3, #0
7000c004:	f000 80d5 	beq.w	7000c1b2 <ip4_frag+0x256>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
7000c008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000c00a:	895b      	ldrh	r3, [r3, #10]
7000c00c:	2b13      	cmp	r3, #19
7000c00e:	d806      	bhi.n	7000c01e <ip4_frag+0xc2>
7000c010:	4b6b      	ldr	r3, [pc, #428]	@ (7000c1c0 <ip4_frag+0x264>)
7000c012:	f44f 7249 	mov.w	r2, #804	@ 0x324
7000c016:	496b      	ldr	r1, [pc, #428]	@ (7000c1c4 <ip4_frag+0x268>)
7000c018:	486b      	ldr	r0, [pc, #428]	@ (7000c1c8 <ip4_frag+0x26c>)
7000c01a:	f007 fe81 	bl	70013d20 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
7000c01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000c020:	685b      	ldr	r3, [r3, #4]
7000c022:	2214      	movs	r2, #20
7000c024:	6b79      	ldr	r1, [r7, #52]	@ 0x34
7000c026:	4618      	mov	r0, r3
7000c028:	f007 ffab 	bl	70013f82 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
7000c02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000c02e:	685b      	ldr	r3, [r3, #4]
7000c030:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
7000c032:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
7000c034:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
7000c038:	e064      	b.n	7000c104 <ip4_frag+0x1a8>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
7000c03a:	68fb      	ldr	r3, [r7, #12]
7000c03c:	895a      	ldrh	r2, [r3, #10]
7000c03e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
7000c040:	1ad3      	subs	r3, r2, r3
7000c042:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
7000c044:	68fb      	ldr	r3, [r7, #12]
7000c046:	895b      	ldrh	r3, [r3, #10]
7000c048:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
7000c04a:	429a      	cmp	r2, r3
7000c04c:	d906      	bls.n	7000c05c <ip4_frag+0x100>
7000c04e:	4b5c      	ldr	r3, [pc, #368]	@ (7000c1c0 <ip4_frag+0x264>)
7000c050:	f240 322d 	movw	r2, #813	@ 0x32d
7000c054:	495d      	ldr	r1, [pc, #372]	@ (7000c1cc <ip4_frag+0x270>)
7000c056:	485c      	ldr	r0, [pc, #368]	@ (7000c1c8 <ip4_frag+0x26c>)
7000c058:	f007 fe62 	bl	70013d20 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
7000c05c:	8bfa      	ldrh	r2, [r7, #30]
7000c05e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
7000c062:	4293      	cmp	r3, r2
7000c064:	bf28      	it	cs
7000c066:	4613      	movcs	r3, r2
7000c068:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
7000c06c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
7000c070:	2b00      	cmp	r3, #0
7000c072:	d105      	bne.n	7000c080 <ip4_frag+0x124>
        poff = 0;
7000c074:	2300      	movs	r3, #0
7000c076:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
7000c078:	68fb      	ldr	r3, [r7, #12]
7000c07a:	681b      	ldr	r3, [r3, #0]
7000c07c:	60fb      	str	r3, [r7, #12]
        continue;
7000c07e:	e041      	b.n	7000c104 <ip4_frag+0x1a8>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
7000c080:	f7ff ff14 	bl	7000beac <ip_frag_alloc_pbuf_custom_ref>
7000c084:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
7000c086:	69bb      	ldr	r3, [r7, #24]
7000c088:	2b00      	cmp	r3, #0
7000c08a:	d103      	bne.n	7000c094 <ip4_frag+0x138>
        pbuf_free(rambuf);
7000c08c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
7000c08e:	f001 fbdb 	bl	7000d848 <pbuf_free>
        goto memerr;
7000c092:	e08f      	b.n	7000c1b4 <ip4_frag+0x258>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
7000c094:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
7000c096:	68fb      	ldr	r3, [r7, #12]
7000c098:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
7000c09a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
7000c09c:	4413      	add	r3, r2
7000c09e:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
7000c0a2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
7000c0a6:	9201      	str	r2, [sp, #4]
7000c0a8:	9300      	str	r3, [sp, #0]
7000c0aa:	4603      	mov	r3, r0
7000c0ac:	2241      	movs	r2, #65	@ 0x41
7000c0ae:	2000      	movs	r0, #0
7000c0b0:	f001 fa1a 	bl	7000d4e8 <pbuf_alloced_custom>
7000c0b4:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
7000c0b6:	697b      	ldr	r3, [r7, #20]
7000c0b8:	2b00      	cmp	r3, #0
7000c0ba:	d106      	bne.n	7000c0ca <ip4_frag+0x16e>
        ip_frag_free_pbuf_custom_ref(pcr);
7000c0bc:	69b8      	ldr	r0, [r7, #24]
7000c0be:	f7ff fefd 	bl	7000bebc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
7000c0c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
7000c0c4:	f001 fbc0 	bl	7000d848 <pbuf_free>
        goto memerr;
7000c0c8:	e074      	b.n	7000c1b4 <ip4_frag+0x258>
      }
      pbuf_ref(p);
7000c0ca:	68f8      	ldr	r0, [r7, #12]
7000c0cc:	f001 fc62 	bl	7000d994 <pbuf_ref>
      pcr->original = p;
7000c0d0:	69bb      	ldr	r3, [r7, #24]
7000c0d2:	68fa      	ldr	r2, [r7, #12]
7000c0d4:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
7000c0d6:	69bb      	ldr	r3, [r7, #24]
7000c0d8:	4a3d      	ldr	r2, [pc, #244]	@ (7000c1d0 <ip4_frag+0x274>)
7000c0da:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
7000c0dc:	6979      	ldr	r1, [r7, #20]
7000c0de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
7000c0e0:	f001 fc80 	bl	7000d9e4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
7000c0e4:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
7000c0e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
7000c0ec:	1ad3      	subs	r3, r2, r3
7000c0ee:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
7000c0f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
7000c0f6:	2b00      	cmp	r3, #0
7000c0f8:	d004      	beq.n	7000c104 <ip4_frag+0x1a8>
        poff = 0;
7000c0fa:	2300      	movs	r3, #0
7000c0fc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
7000c0fe:	68fb      	ldr	r3, [r7, #12]
7000c100:	681b      	ldr	r3, [r3, #0]
7000c102:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
7000c104:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
7000c108:	2b00      	cmp	r3, #0
7000c10a:	d196      	bne.n	7000c03a <ip4_frag+0xde>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
7000c10c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
7000c10e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
7000c112:	4413      	add	r3, r2
7000c114:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
7000c116:	68bb      	ldr	r3, [r7, #8]
7000c118:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
7000c11a:	f1a3 0213 	sub.w	r2, r3, #19
7000c11e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
7000c122:	429a      	cmp	r2, r3
7000c124:	bfcc      	ite	gt
7000c126:	2301      	movgt	r3, #1
7000c128:	2300      	movle	r3, #0
7000c12a:	b2db      	uxtb	r3, r3
7000c12c:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
7000c12e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
7000c132:	f3c3 030c 	ubfx	r3, r3, #0, #13
7000c136:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
7000c138:	6a3b      	ldr	r3, [r7, #32]
7000c13a:	2b00      	cmp	r3, #0
7000c13c:	d002      	beq.n	7000c144 <ip4_frag+0x1e8>
7000c13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000c140:	2b00      	cmp	r3, #0
7000c142:	d003      	beq.n	7000c14c <ip4_frag+0x1f0>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
7000c144:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
7000c146:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
7000c14a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
7000c14c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
7000c14e:	4618      	mov	r0, r3
7000c150:	f7fd fc3e 	bl	700099d0 <lwip_htons>
7000c154:	4603      	mov	r3, r0
7000c156:	461a      	mov	r2, r3
7000c158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000c15a:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
7000c15c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
7000c15e:	3314      	adds	r3, #20
7000c160:	b29b      	uxth	r3, r3
7000c162:	4618      	mov	r0, r3
7000c164:	f7fd fc34 	bl	700099d0 <lwip_htons>
7000c168:	4603      	mov	r3, r0
7000c16a:	461a      	mov	r2, r3
7000c16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000c16e:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
7000c170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7000c172:	2200      	movs	r2, #0
7000c174:	729a      	strb	r2, [r3, #10]
7000c176:	2200      	movs	r2, #0
7000c178:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
7000c17a:	68bb      	ldr	r3, [r7, #8]
7000c17c:	695b      	ldr	r3, [r3, #20]
7000c17e:	687a      	ldr	r2, [r7, #4]
7000c180:	6a79      	ldr	r1, [r7, #36]	@ 0x24
7000c182:	68b8      	ldr	r0, [r7, #8]
7000c184:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
7000c186:	6a78      	ldr	r0, [r7, #36]	@ 0x24
7000c188:	f001 fb5e 	bl	7000d848 <pbuf_free>
    left = (u16_t)(left - fragsize);
7000c18c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
7000c190:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
7000c192:	1ad3      	subs	r3, r2, r3
7000c194:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
7000c198:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
7000c19c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
7000c19e:	4413      	add	r3, r2
7000c1a0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
7000c1a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
7000c1a8:	2b00      	cmp	r3, #0
7000c1aa:	f47f af19 	bne.w	7000bfe0 <ip4_frag+0x84>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
7000c1ae:	2300      	movs	r3, #0
7000c1b0:	e002      	b.n	7000c1b8 <ip4_frag+0x25c>
      goto memerr;
7000c1b2:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
7000c1b4:	f04f 33ff 	mov.w	r3, #4294967295
}
7000c1b8:	4618      	mov	r0, r3
7000c1ba:	3748      	adds	r7, #72	@ 0x48
7000c1bc:	46bd      	mov	sp, r7
7000c1be:	bd80      	pop	{r7, pc}
7000c1c0:	700151e4 	.word	0x700151e4
7000c1c4:	700153ec 	.word	0x700153ec
7000c1c8:	70015258 	.word	0x70015258
7000c1cc:	7001540c 	.word	0x7001540c
7000c1d0:	7000bef5 	.word	0x7000bef5

7000c1d4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
7000c1d4:	b480      	push	{r7}
7000c1d6:	b083      	sub	sp, #12
7000c1d8:	af00      	add	r7, sp, #0
7000c1da:	4603      	mov	r3, r0
7000c1dc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
7000c1de:	4b05      	ldr	r3, [pc, #20]	@ (7000c1f4 <ptr_to_mem+0x20>)
7000c1e0:	681a      	ldr	r2, [r3, #0]
7000c1e2:	88fb      	ldrh	r3, [r7, #6]
7000c1e4:	4413      	add	r3, r2
}
7000c1e6:	4618      	mov	r0, r3
7000c1e8:	370c      	adds	r7, #12
7000c1ea:	46bd      	mov	sp, r7
7000c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
7000c1f0:	4770      	bx	lr
7000c1f2:	bf00      	nop
7000c1f4:	2400538c 	.word	0x2400538c

7000c1f8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
7000c1f8:	b480      	push	{r7}
7000c1fa:	b083      	sub	sp, #12
7000c1fc:	af00      	add	r7, sp, #0
7000c1fe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
7000c200:	4b05      	ldr	r3, [pc, #20]	@ (7000c218 <mem_to_ptr+0x20>)
7000c202:	681b      	ldr	r3, [r3, #0]
7000c204:	687a      	ldr	r2, [r7, #4]
7000c206:	1ad3      	subs	r3, r2, r3
7000c208:	b29b      	uxth	r3, r3
}
7000c20a:	4618      	mov	r0, r3
7000c20c:	370c      	adds	r7, #12
7000c20e:	46bd      	mov	sp, r7
7000c210:	f85d 7b04 	ldr.w	r7, [sp], #4
7000c214:	4770      	bx	lr
7000c216:	bf00      	nop
7000c218:	2400538c 	.word	0x2400538c

7000c21c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
7000c21c:	b590      	push	{r4, r7, lr}
7000c21e:	b085      	sub	sp, #20
7000c220:	af00      	add	r7, sp, #0
7000c222:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
7000c224:	4b45      	ldr	r3, [pc, #276]	@ (7000c33c <plug_holes+0x120>)
7000c226:	681b      	ldr	r3, [r3, #0]
7000c228:	687a      	ldr	r2, [r7, #4]
7000c22a:	429a      	cmp	r2, r3
7000c22c:	d206      	bcs.n	7000c23c <plug_holes+0x20>
7000c22e:	4b44      	ldr	r3, [pc, #272]	@ (7000c340 <plug_holes+0x124>)
7000c230:	f240 12df 	movw	r2, #479	@ 0x1df
7000c234:	4943      	ldr	r1, [pc, #268]	@ (7000c344 <plug_holes+0x128>)
7000c236:	4844      	ldr	r0, [pc, #272]	@ (7000c348 <plug_holes+0x12c>)
7000c238:	f007 fd72 	bl	70013d20 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
7000c23c:	4b43      	ldr	r3, [pc, #268]	@ (7000c34c <plug_holes+0x130>)
7000c23e:	681b      	ldr	r3, [r3, #0]
7000c240:	687a      	ldr	r2, [r7, #4]
7000c242:	429a      	cmp	r2, r3
7000c244:	d306      	bcc.n	7000c254 <plug_holes+0x38>
7000c246:	4b3e      	ldr	r3, [pc, #248]	@ (7000c340 <plug_holes+0x124>)
7000c248:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
7000c24c:	4940      	ldr	r1, [pc, #256]	@ (7000c350 <plug_holes+0x134>)
7000c24e:	483e      	ldr	r0, [pc, #248]	@ (7000c348 <plug_holes+0x12c>)
7000c250:	f007 fd66 	bl	70013d20 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
7000c254:	687b      	ldr	r3, [r7, #4]
7000c256:	791b      	ldrb	r3, [r3, #4]
7000c258:	2b00      	cmp	r3, #0
7000c25a:	d006      	beq.n	7000c26a <plug_holes+0x4e>
7000c25c:	4b38      	ldr	r3, [pc, #224]	@ (7000c340 <plug_holes+0x124>)
7000c25e:	f240 12e1 	movw	r2, #481	@ 0x1e1
7000c262:	493c      	ldr	r1, [pc, #240]	@ (7000c354 <plug_holes+0x138>)
7000c264:	4838      	ldr	r0, [pc, #224]	@ (7000c348 <plug_holes+0x12c>)
7000c266:	f007 fd5b 	bl	70013d20 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
7000c26a:	687b      	ldr	r3, [r7, #4]
7000c26c:	881b      	ldrh	r3, [r3, #0]
7000c26e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c272:	d906      	bls.n	7000c282 <plug_holes+0x66>
7000c274:	4b32      	ldr	r3, [pc, #200]	@ (7000c340 <plug_holes+0x124>)
7000c276:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
7000c27a:	4937      	ldr	r1, [pc, #220]	@ (7000c358 <plug_holes+0x13c>)
7000c27c:	4832      	ldr	r0, [pc, #200]	@ (7000c348 <plug_holes+0x12c>)
7000c27e:	f007 fd4f 	bl	70013d20 <iprintf>

  nmem = ptr_to_mem(mem->next);
7000c282:	687b      	ldr	r3, [r7, #4]
7000c284:	881b      	ldrh	r3, [r3, #0]
7000c286:	4618      	mov	r0, r3
7000c288:	f7ff ffa4 	bl	7000c1d4 <ptr_to_mem>
7000c28c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
7000c28e:	687a      	ldr	r2, [r7, #4]
7000c290:	68fb      	ldr	r3, [r7, #12]
7000c292:	429a      	cmp	r2, r3
7000c294:	d024      	beq.n	7000c2e0 <plug_holes+0xc4>
7000c296:	68fb      	ldr	r3, [r7, #12]
7000c298:	791b      	ldrb	r3, [r3, #4]
7000c29a:	2b00      	cmp	r3, #0
7000c29c:	d120      	bne.n	7000c2e0 <plug_holes+0xc4>
7000c29e:	4b2b      	ldr	r3, [pc, #172]	@ (7000c34c <plug_holes+0x130>)
7000c2a0:	681b      	ldr	r3, [r3, #0]
7000c2a2:	68fa      	ldr	r2, [r7, #12]
7000c2a4:	429a      	cmp	r2, r3
7000c2a6:	d01b      	beq.n	7000c2e0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
7000c2a8:	4b2c      	ldr	r3, [pc, #176]	@ (7000c35c <plug_holes+0x140>)
7000c2aa:	681b      	ldr	r3, [r3, #0]
7000c2ac:	68fa      	ldr	r2, [r7, #12]
7000c2ae:	429a      	cmp	r2, r3
7000c2b0:	d102      	bne.n	7000c2b8 <plug_holes+0x9c>
      lfree = mem;
7000c2b2:	4a2a      	ldr	r2, [pc, #168]	@ (7000c35c <plug_holes+0x140>)
7000c2b4:	687b      	ldr	r3, [r7, #4]
7000c2b6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
7000c2b8:	68fb      	ldr	r3, [r7, #12]
7000c2ba:	881a      	ldrh	r2, [r3, #0]
7000c2bc:	687b      	ldr	r3, [r7, #4]
7000c2be:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
7000c2c0:	68fb      	ldr	r3, [r7, #12]
7000c2c2:	881b      	ldrh	r3, [r3, #0]
7000c2c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c2c8:	d00a      	beq.n	7000c2e0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
7000c2ca:	68fb      	ldr	r3, [r7, #12]
7000c2cc:	881b      	ldrh	r3, [r3, #0]
7000c2ce:	4618      	mov	r0, r3
7000c2d0:	f7ff ff80 	bl	7000c1d4 <ptr_to_mem>
7000c2d4:	4604      	mov	r4, r0
7000c2d6:	6878      	ldr	r0, [r7, #4]
7000c2d8:	f7ff ff8e 	bl	7000c1f8 <mem_to_ptr>
7000c2dc:	4603      	mov	r3, r0
7000c2de:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
7000c2e0:	687b      	ldr	r3, [r7, #4]
7000c2e2:	885b      	ldrh	r3, [r3, #2]
7000c2e4:	4618      	mov	r0, r3
7000c2e6:	f7ff ff75 	bl	7000c1d4 <ptr_to_mem>
7000c2ea:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
7000c2ec:	68ba      	ldr	r2, [r7, #8]
7000c2ee:	687b      	ldr	r3, [r7, #4]
7000c2f0:	429a      	cmp	r2, r3
7000c2f2:	d01f      	beq.n	7000c334 <plug_holes+0x118>
7000c2f4:	68bb      	ldr	r3, [r7, #8]
7000c2f6:	791b      	ldrb	r3, [r3, #4]
7000c2f8:	2b00      	cmp	r3, #0
7000c2fa:	d11b      	bne.n	7000c334 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
7000c2fc:	4b17      	ldr	r3, [pc, #92]	@ (7000c35c <plug_holes+0x140>)
7000c2fe:	681b      	ldr	r3, [r3, #0]
7000c300:	687a      	ldr	r2, [r7, #4]
7000c302:	429a      	cmp	r2, r3
7000c304:	d102      	bne.n	7000c30c <plug_holes+0xf0>
      lfree = pmem;
7000c306:	4a15      	ldr	r2, [pc, #84]	@ (7000c35c <plug_holes+0x140>)
7000c308:	68bb      	ldr	r3, [r7, #8]
7000c30a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
7000c30c:	687b      	ldr	r3, [r7, #4]
7000c30e:	881a      	ldrh	r2, [r3, #0]
7000c310:	68bb      	ldr	r3, [r7, #8]
7000c312:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
7000c314:	687b      	ldr	r3, [r7, #4]
7000c316:	881b      	ldrh	r3, [r3, #0]
7000c318:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c31c:	d00a      	beq.n	7000c334 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
7000c31e:	687b      	ldr	r3, [r7, #4]
7000c320:	881b      	ldrh	r3, [r3, #0]
7000c322:	4618      	mov	r0, r3
7000c324:	f7ff ff56 	bl	7000c1d4 <ptr_to_mem>
7000c328:	4604      	mov	r4, r0
7000c32a:	68b8      	ldr	r0, [r7, #8]
7000c32c:	f7ff ff64 	bl	7000c1f8 <mem_to_ptr>
7000c330:	4603      	mov	r3, r0
7000c332:	8063      	strh	r3, [r4, #2]
    }
  }
}
7000c334:	bf00      	nop
7000c336:	3714      	adds	r7, #20
7000c338:	46bd      	mov	sp, r7
7000c33a:	bd90      	pop	{r4, r7, pc}
7000c33c:	2400538c 	.word	0x2400538c
7000c340:	7001541c 	.word	0x7001541c
7000c344:	70015478 	.word	0x70015478
7000c348:	70015490 	.word	0x70015490
7000c34c:	24005390 	.word	0x24005390
7000c350:	700154b8 	.word	0x700154b8
7000c354:	700154d4 	.word	0x700154d4
7000c358:	700154f0 	.word	0x700154f0
7000c35c:	24005398 	.word	0x24005398

7000c360 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
7000c360:	b580      	push	{r7, lr}
7000c362:	b082      	sub	sp, #8
7000c364:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
7000c366:	4b1d      	ldr	r3, [pc, #116]	@ (7000c3dc <mem_init+0x7c>)
7000c368:	4a1d      	ldr	r2, [pc, #116]	@ (7000c3e0 <mem_init+0x80>)
7000c36a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
7000c36c:	4b1b      	ldr	r3, [pc, #108]	@ (7000c3dc <mem_init+0x7c>)
7000c36e:	681b      	ldr	r3, [r3, #0]
7000c370:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
7000c372:	687b      	ldr	r3, [r7, #4]
7000c374:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
7000c378:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
7000c37a:	687b      	ldr	r3, [r7, #4]
7000c37c:	2200      	movs	r2, #0
7000c37e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
7000c380:	687b      	ldr	r3, [r7, #4]
7000c382:	2200      	movs	r2, #0
7000c384:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
7000c386:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
7000c38a:	f7ff ff23 	bl	7000c1d4 <ptr_to_mem>
7000c38e:	4603      	mov	r3, r0
7000c390:	4a14      	ldr	r2, [pc, #80]	@ (7000c3e4 <mem_init+0x84>)
7000c392:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
7000c394:	4b13      	ldr	r3, [pc, #76]	@ (7000c3e4 <mem_init+0x84>)
7000c396:	681b      	ldr	r3, [r3, #0]
7000c398:	2201      	movs	r2, #1
7000c39a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
7000c39c:	4b11      	ldr	r3, [pc, #68]	@ (7000c3e4 <mem_init+0x84>)
7000c39e:	681b      	ldr	r3, [r3, #0]
7000c3a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
7000c3a4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
7000c3a6:	4b0f      	ldr	r3, [pc, #60]	@ (7000c3e4 <mem_init+0x84>)
7000c3a8:	681b      	ldr	r3, [r3, #0]
7000c3aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
7000c3ae:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
7000c3b0:	4b0a      	ldr	r3, [pc, #40]	@ (7000c3dc <mem_init+0x7c>)
7000c3b2:	681b      	ldr	r3, [r3, #0]
7000c3b4:	4a0c      	ldr	r2, [pc, #48]	@ (7000c3e8 <mem_init+0x88>)
7000c3b6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
7000c3b8:	480c      	ldr	r0, [pc, #48]	@ (7000c3ec <mem_init+0x8c>)
7000c3ba:	f001 fd5d 	bl	7000de78 <sys_mutex_new>
7000c3be:	4603      	mov	r3, r0
7000c3c0:	2b00      	cmp	r3, #0
7000c3c2:	d006      	beq.n	7000c3d2 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
7000c3c4:	4b0a      	ldr	r3, [pc, #40]	@ (7000c3f0 <mem_init+0x90>)
7000c3c6:	f240 221f 	movw	r2, #543	@ 0x21f
7000c3ca:	490a      	ldr	r1, [pc, #40]	@ (7000c3f4 <mem_init+0x94>)
7000c3cc:	480a      	ldr	r0, [pc, #40]	@ (7000c3f8 <mem_init+0x98>)
7000c3ce:	f007 fca7 	bl	70013d20 <iprintf>
  }
}
7000c3d2:	bf00      	nop
7000c3d4:	3708      	adds	r7, #8
7000c3d6:	46bd      	mov	sp, r7
7000c3d8:	bd80      	pop	{r7, pc}
7000c3da:	bf00      	nop
7000c3dc:	2400538c 	.word	0x2400538c
7000c3e0:	24040000 	.word	0x24040000
7000c3e4:	24005390 	.word	0x24005390
7000c3e8:	24005398 	.word	0x24005398
7000c3ec:	24005394 	.word	0x24005394
7000c3f0:	7001541c 	.word	0x7001541c
7000c3f4:	7001551c 	.word	0x7001551c
7000c3f8:	70015490 	.word	0x70015490

7000c3fc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
7000c3fc:	b580      	push	{r7, lr}
7000c3fe:	b086      	sub	sp, #24
7000c400:	af00      	add	r7, sp, #0
7000c402:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
7000c404:	6878      	ldr	r0, [r7, #4]
7000c406:	f7ff fef7 	bl	7000c1f8 <mem_to_ptr>
7000c40a:	4603      	mov	r3, r0
7000c40c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
7000c40e:	687b      	ldr	r3, [r7, #4]
7000c410:	881b      	ldrh	r3, [r3, #0]
7000c412:	4618      	mov	r0, r3
7000c414:	f7ff fede 	bl	7000c1d4 <ptr_to_mem>
7000c418:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
7000c41a:	687b      	ldr	r3, [r7, #4]
7000c41c:	885b      	ldrh	r3, [r3, #2]
7000c41e:	4618      	mov	r0, r3
7000c420:	f7ff fed8 	bl	7000c1d4 <ptr_to_mem>
7000c424:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
7000c426:	687b      	ldr	r3, [r7, #4]
7000c428:	881b      	ldrh	r3, [r3, #0]
7000c42a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c42e:	d818      	bhi.n	7000c462 <mem_link_valid+0x66>
7000c430:	687b      	ldr	r3, [r7, #4]
7000c432:	885b      	ldrh	r3, [r3, #2]
7000c434:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c438:	d813      	bhi.n	7000c462 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
7000c43a:	687b      	ldr	r3, [r7, #4]
7000c43c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
7000c43e:	8afa      	ldrh	r2, [r7, #22]
7000c440:	429a      	cmp	r2, r3
7000c442:	d004      	beq.n	7000c44e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
7000c444:	68fb      	ldr	r3, [r7, #12]
7000c446:	881b      	ldrh	r3, [r3, #0]
7000c448:	8afa      	ldrh	r2, [r7, #22]
7000c44a:	429a      	cmp	r2, r3
7000c44c:	d109      	bne.n	7000c462 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
7000c44e:	4b08      	ldr	r3, [pc, #32]	@ (7000c470 <mem_link_valid+0x74>)
7000c450:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
7000c452:	693a      	ldr	r2, [r7, #16]
7000c454:	429a      	cmp	r2, r3
7000c456:	d006      	beq.n	7000c466 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
7000c458:	693b      	ldr	r3, [r7, #16]
7000c45a:	885b      	ldrh	r3, [r3, #2]
7000c45c:	8afa      	ldrh	r2, [r7, #22]
7000c45e:	429a      	cmp	r2, r3
7000c460:	d001      	beq.n	7000c466 <mem_link_valid+0x6a>
    return 0;
7000c462:	2300      	movs	r3, #0
7000c464:	e000      	b.n	7000c468 <mem_link_valid+0x6c>
  }
  return 1;
7000c466:	2301      	movs	r3, #1
}
7000c468:	4618      	mov	r0, r3
7000c46a:	3718      	adds	r7, #24
7000c46c:	46bd      	mov	sp, r7
7000c46e:	bd80      	pop	{r7, pc}
7000c470:	24005390 	.word	0x24005390

7000c474 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
7000c474:	b580      	push	{r7, lr}
7000c476:	b088      	sub	sp, #32
7000c478:	af00      	add	r7, sp, #0
7000c47a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
7000c47c:	687b      	ldr	r3, [r7, #4]
7000c47e:	2b00      	cmp	r3, #0
7000c480:	d070      	beq.n	7000c564 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
7000c482:	687b      	ldr	r3, [r7, #4]
7000c484:	f003 0303 	and.w	r3, r3, #3
7000c488:	2b00      	cmp	r3, #0
7000c48a:	d00d      	beq.n	7000c4a8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
7000c48c:	4b37      	ldr	r3, [pc, #220]	@ (7000c56c <mem_free+0xf8>)
7000c48e:	f240 2273 	movw	r2, #627	@ 0x273
7000c492:	4937      	ldr	r1, [pc, #220]	@ (7000c570 <mem_free+0xfc>)
7000c494:	4837      	ldr	r0, [pc, #220]	@ (7000c574 <mem_free+0x100>)
7000c496:	f007 fc43 	bl	70013d20 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
7000c49a:	f001 fd3f 	bl	7000df1c <sys_arch_protect>
7000c49e:	60f8      	str	r0, [r7, #12]
7000c4a0:	68f8      	ldr	r0, [r7, #12]
7000c4a2:	f001 fd49 	bl	7000df38 <sys_arch_unprotect>
    return;
7000c4a6:	e05e      	b.n	7000c566 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
7000c4a8:	687b      	ldr	r3, [r7, #4]
7000c4aa:	3b08      	subs	r3, #8
7000c4ac:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
7000c4ae:	4b32      	ldr	r3, [pc, #200]	@ (7000c578 <mem_free+0x104>)
7000c4b0:	681b      	ldr	r3, [r3, #0]
7000c4b2:	69fa      	ldr	r2, [r7, #28]
7000c4b4:	429a      	cmp	r2, r3
7000c4b6:	d306      	bcc.n	7000c4c6 <mem_free+0x52>
7000c4b8:	687b      	ldr	r3, [r7, #4]
7000c4ba:	f103 020c 	add.w	r2, r3, #12
7000c4be:	4b2f      	ldr	r3, [pc, #188]	@ (7000c57c <mem_free+0x108>)
7000c4c0:	681b      	ldr	r3, [r3, #0]
7000c4c2:	429a      	cmp	r2, r3
7000c4c4:	d90d      	bls.n	7000c4e2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
7000c4c6:	4b29      	ldr	r3, [pc, #164]	@ (7000c56c <mem_free+0xf8>)
7000c4c8:	f240 227f 	movw	r2, #639	@ 0x27f
7000c4cc:	492c      	ldr	r1, [pc, #176]	@ (7000c580 <mem_free+0x10c>)
7000c4ce:	4829      	ldr	r0, [pc, #164]	@ (7000c574 <mem_free+0x100>)
7000c4d0:	f007 fc26 	bl	70013d20 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
7000c4d4:	f001 fd22 	bl	7000df1c <sys_arch_protect>
7000c4d8:	6138      	str	r0, [r7, #16]
7000c4da:	6938      	ldr	r0, [r7, #16]
7000c4dc:	f001 fd2c 	bl	7000df38 <sys_arch_unprotect>
    return;
7000c4e0:	e041      	b.n	7000c566 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
7000c4e2:	4828      	ldr	r0, [pc, #160]	@ (7000c584 <mem_free+0x110>)
7000c4e4:	f001 fcde 	bl	7000dea4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
7000c4e8:	69fb      	ldr	r3, [r7, #28]
7000c4ea:	791b      	ldrb	r3, [r3, #4]
7000c4ec:	2b00      	cmp	r3, #0
7000c4ee:	d110      	bne.n	7000c512 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
7000c4f0:	4b1e      	ldr	r3, [pc, #120]	@ (7000c56c <mem_free+0xf8>)
7000c4f2:	f44f 7223 	mov.w	r2, #652	@ 0x28c
7000c4f6:	4924      	ldr	r1, [pc, #144]	@ (7000c588 <mem_free+0x114>)
7000c4f8:	481e      	ldr	r0, [pc, #120]	@ (7000c574 <mem_free+0x100>)
7000c4fa:	f007 fc11 	bl	70013d20 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
7000c4fe:	4821      	ldr	r0, [pc, #132]	@ (7000c584 <mem_free+0x110>)
7000c500:	f001 fcdf 	bl	7000dec2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
7000c504:	f001 fd0a 	bl	7000df1c <sys_arch_protect>
7000c508:	6178      	str	r0, [r7, #20]
7000c50a:	6978      	ldr	r0, [r7, #20]
7000c50c:	f001 fd14 	bl	7000df38 <sys_arch_unprotect>
    return;
7000c510:	e029      	b.n	7000c566 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
7000c512:	69f8      	ldr	r0, [r7, #28]
7000c514:	f7ff ff72 	bl	7000c3fc <mem_link_valid>
7000c518:	4603      	mov	r3, r0
7000c51a:	2b00      	cmp	r3, #0
7000c51c:	d110      	bne.n	7000c540 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
7000c51e:	4b13      	ldr	r3, [pc, #76]	@ (7000c56c <mem_free+0xf8>)
7000c520:	f240 2295 	movw	r2, #661	@ 0x295
7000c524:	4919      	ldr	r1, [pc, #100]	@ (7000c58c <mem_free+0x118>)
7000c526:	4813      	ldr	r0, [pc, #76]	@ (7000c574 <mem_free+0x100>)
7000c528:	f007 fbfa 	bl	70013d20 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
7000c52c:	4815      	ldr	r0, [pc, #84]	@ (7000c584 <mem_free+0x110>)
7000c52e:	f001 fcc8 	bl	7000dec2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
7000c532:	f001 fcf3 	bl	7000df1c <sys_arch_protect>
7000c536:	61b8      	str	r0, [r7, #24]
7000c538:	69b8      	ldr	r0, [r7, #24]
7000c53a:	f001 fcfd 	bl	7000df38 <sys_arch_unprotect>
    return;
7000c53e:	e012      	b.n	7000c566 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
7000c540:	69fb      	ldr	r3, [r7, #28]
7000c542:	2200      	movs	r2, #0
7000c544:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
7000c546:	4b12      	ldr	r3, [pc, #72]	@ (7000c590 <mem_free+0x11c>)
7000c548:	681b      	ldr	r3, [r3, #0]
7000c54a:	69fa      	ldr	r2, [r7, #28]
7000c54c:	429a      	cmp	r2, r3
7000c54e:	d202      	bcs.n	7000c556 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
7000c550:	4a0f      	ldr	r2, [pc, #60]	@ (7000c590 <mem_free+0x11c>)
7000c552:	69fb      	ldr	r3, [r7, #28]
7000c554:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
7000c556:	69f8      	ldr	r0, [r7, #28]
7000c558:	f7ff fe60 	bl	7000c21c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
7000c55c:	4809      	ldr	r0, [pc, #36]	@ (7000c584 <mem_free+0x110>)
7000c55e:	f001 fcb0 	bl	7000dec2 <sys_mutex_unlock>
7000c562:	e000      	b.n	7000c566 <mem_free+0xf2>
    return;
7000c564:	bf00      	nop
}
7000c566:	3720      	adds	r7, #32
7000c568:	46bd      	mov	sp, r7
7000c56a:	bd80      	pop	{r7, pc}
7000c56c:	7001541c 	.word	0x7001541c
7000c570:	70015538 	.word	0x70015538
7000c574:	70015490 	.word	0x70015490
7000c578:	2400538c 	.word	0x2400538c
7000c57c:	24005390 	.word	0x24005390
7000c580:	7001555c 	.word	0x7001555c
7000c584:	24005394 	.word	0x24005394
7000c588:	70015578 	.word	0x70015578
7000c58c:	700155a0 	.word	0x700155a0
7000c590:	24005398 	.word	0x24005398

7000c594 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
7000c594:	b580      	push	{r7, lr}
7000c596:	b088      	sub	sp, #32
7000c598:	af00      	add	r7, sp, #0
7000c59a:	6078      	str	r0, [r7, #4]
7000c59c:	460b      	mov	r3, r1
7000c59e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
7000c5a0:	887b      	ldrh	r3, [r7, #2]
7000c5a2:	3303      	adds	r3, #3
7000c5a4:	b29b      	uxth	r3, r3
7000c5a6:	f023 0303 	bic.w	r3, r3, #3
7000c5aa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
7000c5ac:	8bfb      	ldrh	r3, [r7, #30]
7000c5ae:	2b0b      	cmp	r3, #11
7000c5b0:	d801      	bhi.n	7000c5b6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
7000c5b2:	230c      	movs	r3, #12
7000c5b4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
7000c5b6:	8bfb      	ldrh	r3, [r7, #30]
7000c5b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c5bc:	d803      	bhi.n	7000c5c6 <mem_trim+0x32>
7000c5be:	8bfa      	ldrh	r2, [r7, #30]
7000c5c0:	887b      	ldrh	r3, [r7, #2]
7000c5c2:	429a      	cmp	r2, r3
7000c5c4:	d201      	bcs.n	7000c5ca <mem_trim+0x36>
    return NULL;
7000c5c6:	2300      	movs	r3, #0
7000c5c8:	e0d8      	b.n	7000c77c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
7000c5ca:	4b6e      	ldr	r3, [pc, #440]	@ (7000c784 <mem_trim+0x1f0>)
7000c5cc:	681b      	ldr	r3, [r3, #0]
7000c5ce:	687a      	ldr	r2, [r7, #4]
7000c5d0:	429a      	cmp	r2, r3
7000c5d2:	d304      	bcc.n	7000c5de <mem_trim+0x4a>
7000c5d4:	4b6c      	ldr	r3, [pc, #432]	@ (7000c788 <mem_trim+0x1f4>)
7000c5d6:	681b      	ldr	r3, [r3, #0]
7000c5d8:	687a      	ldr	r2, [r7, #4]
7000c5da:	429a      	cmp	r2, r3
7000c5dc:	d306      	bcc.n	7000c5ec <mem_trim+0x58>
7000c5de:	4b6b      	ldr	r3, [pc, #428]	@ (7000c78c <mem_trim+0x1f8>)
7000c5e0:	f240 22d1 	movw	r2, #721	@ 0x2d1
7000c5e4:	496a      	ldr	r1, [pc, #424]	@ (7000c790 <mem_trim+0x1fc>)
7000c5e6:	486b      	ldr	r0, [pc, #428]	@ (7000c794 <mem_trim+0x200>)
7000c5e8:	f007 fb9a 	bl	70013d20 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
7000c5ec:	4b65      	ldr	r3, [pc, #404]	@ (7000c784 <mem_trim+0x1f0>)
7000c5ee:	681b      	ldr	r3, [r3, #0]
7000c5f0:	687a      	ldr	r2, [r7, #4]
7000c5f2:	429a      	cmp	r2, r3
7000c5f4:	d304      	bcc.n	7000c600 <mem_trim+0x6c>
7000c5f6:	4b64      	ldr	r3, [pc, #400]	@ (7000c788 <mem_trim+0x1f4>)
7000c5f8:	681b      	ldr	r3, [r3, #0]
7000c5fa:	687a      	ldr	r2, [r7, #4]
7000c5fc:	429a      	cmp	r2, r3
7000c5fe:	d307      	bcc.n	7000c610 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
7000c600:	f001 fc8c 	bl	7000df1c <sys_arch_protect>
7000c604:	60b8      	str	r0, [r7, #8]
7000c606:	68b8      	ldr	r0, [r7, #8]
7000c608:	f001 fc96 	bl	7000df38 <sys_arch_unprotect>
    return rmem;
7000c60c:	687b      	ldr	r3, [r7, #4]
7000c60e:	e0b5      	b.n	7000c77c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
7000c610:	687b      	ldr	r3, [r7, #4]
7000c612:	3b08      	subs	r3, #8
7000c614:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
7000c616:	69b8      	ldr	r0, [r7, #24]
7000c618:	f7ff fdee 	bl	7000c1f8 <mem_to_ptr>
7000c61c:	4603      	mov	r3, r0
7000c61e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
7000c620:	69bb      	ldr	r3, [r7, #24]
7000c622:	881a      	ldrh	r2, [r3, #0]
7000c624:	8afb      	ldrh	r3, [r7, #22]
7000c626:	1ad3      	subs	r3, r2, r3
7000c628:	b29b      	uxth	r3, r3
7000c62a:	3b08      	subs	r3, #8
7000c62c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
7000c62e:	8bfa      	ldrh	r2, [r7, #30]
7000c630:	8abb      	ldrh	r3, [r7, #20]
7000c632:	429a      	cmp	r2, r3
7000c634:	d906      	bls.n	7000c644 <mem_trim+0xb0>
7000c636:	4b55      	ldr	r3, [pc, #340]	@ (7000c78c <mem_trim+0x1f8>)
7000c638:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
7000c63c:	4956      	ldr	r1, [pc, #344]	@ (7000c798 <mem_trim+0x204>)
7000c63e:	4855      	ldr	r0, [pc, #340]	@ (7000c794 <mem_trim+0x200>)
7000c640:	f007 fb6e 	bl	70013d20 <iprintf>
  if (newsize > size) {
7000c644:	8bfa      	ldrh	r2, [r7, #30]
7000c646:	8abb      	ldrh	r3, [r7, #20]
7000c648:	429a      	cmp	r2, r3
7000c64a:	d901      	bls.n	7000c650 <mem_trim+0xbc>
    /* not supported */
    return NULL;
7000c64c:	2300      	movs	r3, #0
7000c64e:	e095      	b.n	7000c77c <mem_trim+0x1e8>
  }
  if (newsize == size) {
7000c650:	8bfa      	ldrh	r2, [r7, #30]
7000c652:	8abb      	ldrh	r3, [r7, #20]
7000c654:	429a      	cmp	r2, r3
7000c656:	d101      	bne.n	7000c65c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
7000c658:	687b      	ldr	r3, [r7, #4]
7000c65a:	e08f      	b.n	7000c77c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
7000c65c:	484f      	ldr	r0, [pc, #316]	@ (7000c79c <mem_trim+0x208>)
7000c65e:	f001 fc21 	bl	7000dea4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
7000c662:	69bb      	ldr	r3, [r7, #24]
7000c664:	881b      	ldrh	r3, [r3, #0]
7000c666:	4618      	mov	r0, r3
7000c668:	f7ff fdb4 	bl	7000c1d4 <ptr_to_mem>
7000c66c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
7000c66e:	693b      	ldr	r3, [r7, #16]
7000c670:	791b      	ldrb	r3, [r3, #4]
7000c672:	2b00      	cmp	r3, #0
7000c674:	d13f      	bne.n	7000c6f6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
7000c676:	69bb      	ldr	r3, [r7, #24]
7000c678:	881b      	ldrh	r3, [r3, #0]
7000c67a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c67e:	d106      	bne.n	7000c68e <mem_trim+0xfa>
7000c680:	4b42      	ldr	r3, [pc, #264]	@ (7000c78c <mem_trim+0x1f8>)
7000c682:	f240 22f5 	movw	r2, #757	@ 0x2f5
7000c686:	4946      	ldr	r1, [pc, #280]	@ (7000c7a0 <mem_trim+0x20c>)
7000c688:	4842      	ldr	r0, [pc, #264]	@ (7000c794 <mem_trim+0x200>)
7000c68a:	f007 fb49 	bl	70013d20 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
7000c68e:	693b      	ldr	r3, [r7, #16]
7000c690:	881b      	ldrh	r3, [r3, #0]
7000c692:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
7000c694:	8afa      	ldrh	r2, [r7, #22]
7000c696:	8bfb      	ldrh	r3, [r7, #30]
7000c698:	4413      	add	r3, r2
7000c69a:	b29b      	uxth	r3, r3
7000c69c:	3308      	adds	r3, #8
7000c69e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
7000c6a0:	4b40      	ldr	r3, [pc, #256]	@ (7000c7a4 <mem_trim+0x210>)
7000c6a2:	681b      	ldr	r3, [r3, #0]
7000c6a4:	693a      	ldr	r2, [r7, #16]
7000c6a6:	429a      	cmp	r2, r3
7000c6a8:	d106      	bne.n	7000c6b8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
7000c6aa:	89fb      	ldrh	r3, [r7, #14]
7000c6ac:	4618      	mov	r0, r3
7000c6ae:	f7ff fd91 	bl	7000c1d4 <ptr_to_mem>
7000c6b2:	4603      	mov	r3, r0
7000c6b4:	4a3b      	ldr	r2, [pc, #236]	@ (7000c7a4 <mem_trim+0x210>)
7000c6b6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
7000c6b8:	89fb      	ldrh	r3, [r7, #14]
7000c6ba:	4618      	mov	r0, r3
7000c6bc:	f7ff fd8a 	bl	7000c1d4 <ptr_to_mem>
7000c6c0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
7000c6c2:	693b      	ldr	r3, [r7, #16]
7000c6c4:	2200      	movs	r2, #0
7000c6c6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
7000c6c8:	693b      	ldr	r3, [r7, #16]
7000c6ca:	89ba      	ldrh	r2, [r7, #12]
7000c6cc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
7000c6ce:	693b      	ldr	r3, [r7, #16]
7000c6d0:	8afa      	ldrh	r2, [r7, #22]
7000c6d2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
7000c6d4:	69bb      	ldr	r3, [r7, #24]
7000c6d6:	89fa      	ldrh	r2, [r7, #14]
7000c6d8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
7000c6da:	693b      	ldr	r3, [r7, #16]
7000c6dc:	881b      	ldrh	r3, [r3, #0]
7000c6de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c6e2:	d047      	beq.n	7000c774 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
7000c6e4:	693b      	ldr	r3, [r7, #16]
7000c6e6:	881b      	ldrh	r3, [r3, #0]
7000c6e8:	4618      	mov	r0, r3
7000c6ea:	f7ff fd73 	bl	7000c1d4 <ptr_to_mem>
7000c6ee:	4602      	mov	r2, r0
7000c6f0:	89fb      	ldrh	r3, [r7, #14]
7000c6f2:	8053      	strh	r3, [r2, #2]
7000c6f4:	e03e      	b.n	7000c774 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
7000c6f6:	8bfb      	ldrh	r3, [r7, #30]
7000c6f8:	f103 0214 	add.w	r2, r3, #20
7000c6fc:	8abb      	ldrh	r3, [r7, #20]
7000c6fe:	429a      	cmp	r2, r3
7000c700:	d838      	bhi.n	7000c774 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
7000c702:	8afa      	ldrh	r2, [r7, #22]
7000c704:	8bfb      	ldrh	r3, [r7, #30]
7000c706:	4413      	add	r3, r2
7000c708:	b29b      	uxth	r3, r3
7000c70a:	3308      	adds	r3, #8
7000c70c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
7000c70e:	69bb      	ldr	r3, [r7, #24]
7000c710:	881b      	ldrh	r3, [r3, #0]
7000c712:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c716:	d106      	bne.n	7000c726 <mem_trim+0x192>
7000c718:	4b1c      	ldr	r3, [pc, #112]	@ (7000c78c <mem_trim+0x1f8>)
7000c71a:	f240 3216 	movw	r2, #790	@ 0x316
7000c71e:	4920      	ldr	r1, [pc, #128]	@ (7000c7a0 <mem_trim+0x20c>)
7000c720:	481c      	ldr	r0, [pc, #112]	@ (7000c794 <mem_trim+0x200>)
7000c722:	f007 fafd 	bl	70013d20 <iprintf>
    mem2 = ptr_to_mem(ptr2);
7000c726:	89fb      	ldrh	r3, [r7, #14]
7000c728:	4618      	mov	r0, r3
7000c72a:	f7ff fd53 	bl	7000c1d4 <ptr_to_mem>
7000c72e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
7000c730:	4b1c      	ldr	r3, [pc, #112]	@ (7000c7a4 <mem_trim+0x210>)
7000c732:	681b      	ldr	r3, [r3, #0]
7000c734:	693a      	ldr	r2, [r7, #16]
7000c736:	429a      	cmp	r2, r3
7000c738:	d202      	bcs.n	7000c740 <mem_trim+0x1ac>
      lfree = mem2;
7000c73a:	4a1a      	ldr	r2, [pc, #104]	@ (7000c7a4 <mem_trim+0x210>)
7000c73c:	693b      	ldr	r3, [r7, #16]
7000c73e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
7000c740:	693b      	ldr	r3, [r7, #16]
7000c742:	2200      	movs	r2, #0
7000c744:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
7000c746:	69bb      	ldr	r3, [r7, #24]
7000c748:	881a      	ldrh	r2, [r3, #0]
7000c74a:	693b      	ldr	r3, [r7, #16]
7000c74c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
7000c74e:	693b      	ldr	r3, [r7, #16]
7000c750:	8afa      	ldrh	r2, [r7, #22]
7000c752:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
7000c754:	69bb      	ldr	r3, [r7, #24]
7000c756:	89fa      	ldrh	r2, [r7, #14]
7000c758:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
7000c75a:	693b      	ldr	r3, [r7, #16]
7000c75c:	881b      	ldrh	r3, [r3, #0]
7000c75e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c762:	d007      	beq.n	7000c774 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
7000c764:	693b      	ldr	r3, [r7, #16]
7000c766:	881b      	ldrh	r3, [r3, #0]
7000c768:	4618      	mov	r0, r3
7000c76a:	f7ff fd33 	bl	7000c1d4 <ptr_to_mem>
7000c76e:	4602      	mov	r2, r0
7000c770:	89fb      	ldrh	r3, [r7, #14]
7000c772:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
7000c774:	4809      	ldr	r0, [pc, #36]	@ (7000c79c <mem_trim+0x208>)
7000c776:	f001 fba4 	bl	7000dec2 <sys_mutex_unlock>
  return rmem;
7000c77a:	687b      	ldr	r3, [r7, #4]
}
7000c77c:	4618      	mov	r0, r3
7000c77e:	3720      	adds	r7, #32
7000c780:	46bd      	mov	sp, r7
7000c782:	bd80      	pop	{r7, pc}
7000c784:	2400538c 	.word	0x2400538c
7000c788:	24005390 	.word	0x24005390
7000c78c:	7001541c 	.word	0x7001541c
7000c790:	700155d4 	.word	0x700155d4
7000c794:	70015490 	.word	0x70015490
7000c798:	700155ec 	.word	0x700155ec
7000c79c:	24005394 	.word	0x24005394
7000c7a0:	7001560c 	.word	0x7001560c
7000c7a4:	24005398 	.word	0x24005398

7000c7a8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
7000c7a8:	b580      	push	{r7, lr}
7000c7aa:	b088      	sub	sp, #32
7000c7ac:	af00      	add	r7, sp, #0
7000c7ae:	4603      	mov	r3, r0
7000c7b0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
7000c7b2:	88fb      	ldrh	r3, [r7, #6]
7000c7b4:	2b00      	cmp	r3, #0
7000c7b6:	d101      	bne.n	7000c7bc <mem_malloc+0x14>
    return NULL;
7000c7b8:	2300      	movs	r3, #0
7000c7ba:	e0e2      	b.n	7000c982 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
7000c7bc:	88fb      	ldrh	r3, [r7, #6]
7000c7be:	3303      	adds	r3, #3
7000c7c0:	b29b      	uxth	r3, r3
7000c7c2:	f023 0303 	bic.w	r3, r3, #3
7000c7c6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
7000c7c8:	8bbb      	ldrh	r3, [r7, #28]
7000c7ca:	2b0b      	cmp	r3, #11
7000c7cc:	d801      	bhi.n	7000c7d2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
7000c7ce:	230c      	movs	r3, #12
7000c7d0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
7000c7d2:	8bbb      	ldrh	r3, [r7, #28]
7000c7d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c7d8:	d803      	bhi.n	7000c7e2 <mem_malloc+0x3a>
7000c7da:	8bba      	ldrh	r2, [r7, #28]
7000c7dc:	88fb      	ldrh	r3, [r7, #6]
7000c7de:	429a      	cmp	r2, r3
7000c7e0:	d201      	bcs.n	7000c7e6 <mem_malloc+0x3e>
    return NULL;
7000c7e2:	2300      	movs	r3, #0
7000c7e4:	e0cd      	b.n	7000c982 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
7000c7e6:	4869      	ldr	r0, [pc, #420]	@ (7000c98c <mem_malloc+0x1e4>)
7000c7e8:	f001 fb5c 	bl	7000dea4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
7000c7ec:	4b68      	ldr	r3, [pc, #416]	@ (7000c990 <mem_malloc+0x1e8>)
7000c7ee:	681b      	ldr	r3, [r3, #0]
7000c7f0:	4618      	mov	r0, r3
7000c7f2:	f7ff fd01 	bl	7000c1f8 <mem_to_ptr>
7000c7f6:	4603      	mov	r3, r0
7000c7f8:	83fb      	strh	r3, [r7, #30]
7000c7fa:	e0b7      	b.n	7000c96c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
7000c7fc:	8bfb      	ldrh	r3, [r7, #30]
7000c7fe:	4618      	mov	r0, r3
7000c800:	f7ff fce8 	bl	7000c1d4 <ptr_to_mem>
7000c804:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
7000c806:	697b      	ldr	r3, [r7, #20]
7000c808:	791b      	ldrb	r3, [r3, #4]
7000c80a:	2b00      	cmp	r3, #0
7000c80c:	f040 80a7 	bne.w	7000c95e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
7000c810:	697b      	ldr	r3, [r7, #20]
7000c812:	881b      	ldrh	r3, [r3, #0]
7000c814:	461a      	mov	r2, r3
7000c816:	8bfb      	ldrh	r3, [r7, #30]
7000c818:	1ad3      	subs	r3, r2, r3
7000c81a:	f1a3 0208 	sub.w	r2, r3, #8
7000c81e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
7000c820:	429a      	cmp	r2, r3
7000c822:	f0c0 809c 	bcc.w	7000c95e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
7000c826:	697b      	ldr	r3, [r7, #20]
7000c828:	881b      	ldrh	r3, [r3, #0]
7000c82a:	461a      	mov	r2, r3
7000c82c:	8bfb      	ldrh	r3, [r7, #30]
7000c82e:	1ad3      	subs	r3, r2, r3
7000c830:	f1a3 0208 	sub.w	r2, r3, #8
7000c834:	8bbb      	ldrh	r3, [r7, #28]
7000c836:	3314      	adds	r3, #20
7000c838:	429a      	cmp	r2, r3
7000c83a:	d333      	bcc.n	7000c8a4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
7000c83c:	8bfa      	ldrh	r2, [r7, #30]
7000c83e:	8bbb      	ldrh	r3, [r7, #28]
7000c840:	4413      	add	r3, r2
7000c842:	b29b      	uxth	r3, r3
7000c844:	3308      	adds	r3, #8
7000c846:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
7000c848:	8a7b      	ldrh	r3, [r7, #18]
7000c84a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c84e:	d106      	bne.n	7000c85e <mem_malloc+0xb6>
7000c850:	4b50      	ldr	r3, [pc, #320]	@ (7000c994 <mem_malloc+0x1ec>)
7000c852:	f240 3287 	movw	r2, #903	@ 0x387
7000c856:	4950      	ldr	r1, [pc, #320]	@ (7000c998 <mem_malloc+0x1f0>)
7000c858:	4850      	ldr	r0, [pc, #320]	@ (7000c99c <mem_malloc+0x1f4>)
7000c85a:	f007 fa61 	bl	70013d20 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
7000c85e:	8a7b      	ldrh	r3, [r7, #18]
7000c860:	4618      	mov	r0, r3
7000c862:	f7ff fcb7 	bl	7000c1d4 <ptr_to_mem>
7000c866:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
7000c868:	68fb      	ldr	r3, [r7, #12]
7000c86a:	2200      	movs	r2, #0
7000c86c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
7000c86e:	697b      	ldr	r3, [r7, #20]
7000c870:	881a      	ldrh	r2, [r3, #0]
7000c872:	68fb      	ldr	r3, [r7, #12]
7000c874:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
7000c876:	68fb      	ldr	r3, [r7, #12]
7000c878:	8bfa      	ldrh	r2, [r7, #30]
7000c87a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
7000c87c:	697b      	ldr	r3, [r7, #20]
7000c87e:	8a7a      	ldrh	r2, [r7, #18]
7000c880:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
7000c882:	697b      	ldr	r3, [r7, #20]
7000c884:	2201      	movs	r2, #1
7000c886:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
7000c888:	68fb      	ldr	r3, [r7, #12]
7000c88a:	881b      	ldrh	r3, [r3, #0]
7000c88c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000c890:	d00b      	beq.n	7000c8aa <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
7000c892:	68fb      	ldr	r3, [r7, #12]
7000c894:	881b      	ldrh	r3, [r3, #0]
7000c896:	4618      	mov	r0, r3
7000c898:	f7ff fc9c 	bl	7000c1d4 <ptr_to_mem>
7000c89c:	4602      	mov	r2, r0
7000c89e:	8a7b      	ldrh	r3, [r7, #18]
7000c8a0:	8053      	strh	r3, [r2, #2]
7000c8a2:	e002      	b.n	7000c8aa <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
7000c8a4:	697b      	ldr	r3, [r7, #20]
7000c8a6:	2201      	movs	r2, #1
7000c8a8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
7000c8aa:	4b39      	ldr	r3, [pc, #228]	@ (7000c990 <mem_malloc+0x1e8>)
7000c8ac:	681b      	ldr	r3, [r3, #0]
7000c8ae:	697a      	ldr	r2, [r7, #20]
7000c8b0:	429a      	cmp	r2, r3
7000c8b2:	d127      	bne.n	7000c904 <mem_malloc+0x15c>
          struct mem *cur = lfree;
7000c8b4:	4b36      	ldr	r3, [pc, #216]	@ (7000c990 <mem_malloc+0x1e8>)
7000c8b6:	681b      	ldr	r3, [r3, #0]
7000c8b8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
7000c8ba:	e005      	b.n	7000c8c8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
7000c8bc:	69bb      	ldr	r3, [r7, #24]
7000c8be:	881b      	ldrh	r3, [r3, #0]
7000c8c0:	4618      	mov	r0, r3
7000c8c2:	f7ff fc87 	bl	7000c1d4 <ptr_to_mem>
7000c8c6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
7000c8c8:	69bb      	ldr	r3, [r7, #24]
7000c8ca:	791b      	ldrb	r3, [r3, #4]
7000c8cc:	2b00      	cmp	r3, #0
7000c8ce:	d004      	beq.n	7000c8da <mem_malloc+0x132>
7000c8d0:	4b33      	ldr	r3, [pc, #204]	@ (7000c9a0 <mem_malloc+0x1f8>)
7000c8d2:	681b      	ldr	r3, [r3, #0]
7000c8d4:	69ba      	ldr	r2, [r7, #24]
7000c8d6:	429a      	cmp	r2, r3
7000c8d8:	d1f0      	bne.n	7000c8bc <mem_malloc+0x114>
          }
          lfree = cur;
7000c8da:	4a2d      	ldr	r2, [pc, #180]	@ (7000c990 <mem_malloc+0x1e8>)
7000c8dc:	69bb      	ldr	r3, [r7, #24]
7000c8de:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
7000c8e0:	4b2b      	ldr	r3, [pc, #172]	@ (7000c990 <mem_malloc+0x1e8>)
7000c8e2:	681a      	ldr	r2, [r3, #0]
7000c8e4:	4b2e      	ldr	r3, [pc, #184]	@ (7000c9a0 <mem_malloc+0x1f8>)
7000c8e6:	681b      	ldr	r3, [r3, #0]
7000c8e8:	429a      	cmp	r2, r3
7000c8ea:	d00b      	beq.n	7000c904 <mem_malloc+0x15c>
7000c8ec:	4b28      	ldr	r3, [pc, #160]	@ (7000c990 <mem_malloc+0x1e8>)
7000c8ee:	681b      	ldr	r3, [r3, #0]
7000c8f0:	791b      	ldrb	r3, [r3, #4]
7000c8f2:	2b00      	cmp	r3, #0
7000c8f4:	d006      	beq.n	7000c904 <mem_malloc+0x15c>
7000c8f6:	4b27      	ldr	r3, [pc, #156]	@ (7000c994 <mem_malloc+0x1ec>)
7000c8f8:	f240 32b5 	movw	r2, #949	@ 0x3b5
7000c8fc:	4929      	ldr	r1, [pc, #164]	@ (7000c9a4 <mem_malloc+0x1fc>)
7000c8fe:	4827      	ldr	r0, [pc, #156]	@ (7000c99c <mem_malloc+0x1f4>)
7000c900:	f007 fa0e 	bl	70013d20 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
7000c904:	4821      	ldr	r0, [pc, #132]	@ (7000c98c <mem_malloc+0x1e4>)
7000c906:	f001 fadc 	bl	7000dec2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
7000c90a:	8bba      	ldrh	r2, [r7, #28]
7000c90c:	697b      	ldr	r3, [r7, #20]
7000c90e:	4413      	add	r3, r2
7000c910:	3308      	adds	r3, #8
7000c912:	4a23      	ldr	r2, [pc, #140]	@ (7000c9a0 <mem_malloc+0x1f8>)
7000c914:	6812      	ldr	r2, [r2, #0]
7000c916:	4293      	cmp	r3, r2
7000c918:	d906      	bls.n	7000c928 <mem_malloc+0x180>
7000c91a:	4b1e      	ldr	r3, [pc, #120]	@ (7000c994 <mem_malloc+0x1ec>)
7000c91c:	f240 32b9 	movw	r2, #953	@ 0x3b9
7000c920:	4921      	ldr	r1, [pc, #132]	@ (7000c9a8 <mem_malloc+0x200>)
7000c922:	481e      	ldr	r0, [pc, #120]	@ (7000c99c <mem_malloc+0x1f4>)
7000c924:	f007 f9fc 	bl	70013d20 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
7000c928:	697b      	ldr	r3, [r7, #20]
7000c92a:	f003 0303 	and.w	r3, r3, #3
7000c92e:	2b00      	cmp	r3, #0
7000c930:	d006      	beq.n	7000c940 <mem_malloc+0x198>
7000c932:	4b18      	ldr	r3, [pc, #96]	@ (7000c994 <mem_malloc+0x1ec>)
7000c934:	f240 32bb 	movw	r2, #955	@ 0x3bb
7000c938:	491c      	ldr	r1, [pc, #112]	@ (7000c9ac <mem_malloc+0x204>)
7000c93a:	4818      	ldr	r0, [pc, #96]	@ (7000c99c <mem_malloc+0x1f4>)
7000c93c:	f007 f9f0 	bl	70013d20 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
7000c940:	697b      	ldr	r3, [r7, #20]
7000c942:	f003 0303 	and.w	r3, r3, #3
7000c946:	2b00      	cmp	r3, #0
7000c948:	d006      	beq.n	7000c958 <mem_malloc+0x1b0>
7000c94a:	4b12      	ldr	r3, [pc, #72]	@ (7000c994 <mem_malloc+0x1ec>)
7000c94c:	f240 32bd 	movw	r2, #957	@ 0x3bd
7000c950:	4917      	ldr	r1, [pc, #92]	@ (7000c9b0 <mem_malloc+0x208>)
7000c952:	4812      	ldr	r0, [pc, #72]	@ (7000c99c <mem_malloc+0x1f4>)
7000c954:	f007 f9e4 	bl	70013d20 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
7000c958:	697b      	ldr	r3, [r7, #20]
7000c95a:	3308      	adds	r3, #8
7000c95c:	e011      	b.n	7000c982 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
7000c95e:	8bfb      	ldrh	r3, [r7, #30]
7000c960:	4618      	mov	r0, r3
7000c962:	f7ff fc37 	bl	7000c1d4 <ptr_to_mem>
7000c966:	4603      	mov	r3, r0
7000c968:	881b      	ldrh	r3, [r3, #0]
7000c96a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
7000c96c:	8bfa      	ldrh	r2, [r7, #30]
7000c96e:	8bbb      	ldrh	r3, [r7, #28]
7000c970:	f5c3 4380 	rsb	r3, r3, #16384	@ 0x4000
7000c974:	429a      	cmp	r2, r3
7000c976:	f4ff af41 	bcc.w	7000c7fc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
7000c97a:	4804      	ldr	r0, [pc, #16]	@ (7000c98c <mem_malloc+0x1e4>)
7000c97c:	f001 faa1 	bl	7000dec2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
7000c980:	2300      	movs	r3, #0
}
7000c982:	4618      	mov	r0, r3
7000c984:	3720      	adds	r7, #32
7000c986:	46bd      	mov	sp, r7
7000c988:	bd80      	pop	{r7, pc}
7000c98a:	bf00      	nop
7000c98c:	24005394 	.word	0x24005394
7000c990:	24005398 	.word	0x24005398
7000c994:	7001541c 	.word	0x7001541c
7000c998:	7001560c 	.word	0x7001560c
7000c99c:	70015490 	.word	0x70015490
7000c9a0:	24005390 	.word	0x24005390
7000c9a4:	70015620 	.word	0x70015620
7000c9a8:	7001563c 	.word	0x7001563c
7000c9ac:	7001566c 	.word	0x7001566c
7000c9b0:	7001569c 	.word	0x7001569c

7000c9b4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
7000c9b4:	b480      	push	{r7}
7000c9b6:	b085      	sub	sp, #20
7000c9b8:	af00      	add	r7, sp, #0
7000c9ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
7000c9bc:	687b      	ldr	r3, [r7, #4]
7000c9be:	689b      	ldr	r3, [r3, #8]
7000c9c0:	2200      	movs	r2, #0
7000c9c2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
7000c9c4:	687b      	ldr	r3, [r7, #4]
7000c9c6:	685b      	ldr	r3, [r3, #4]
7000c9c8:	3303      	adds	r3, #3
7000c9ca:	f023 0303 	bic.w	r3, r3, #3
7000c9ce:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
7000c9d0:	2300      	movs	r3, #0
7000c9d2:	60fb      	str	r3, [r7, #12]
7000c9d4:	e011      	b.n	7000c9fa <memp_init_pool+0x46>
    memp->next = *desc->tab;
7000c9d6:	687b      	ldr	r3, [r7, #4]
7000c9d8:	689b      	ldr	r3, [r3, #8]
7000c9da:	681a      	ldr	r2, [r3, #0]
7000c9dc:	68bb      	ldr	r3, [r7, #8]
7000c9de:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
7000c9e0:	687b      	ldr	r3, [r7, #4]
7000c9e2:	689b      	ldr	r3, [r3, #8]
7000c9e4:	68ba      	ldr	r2, [r7, #8]
7000c9e6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
7000c9e8:	687b      	ldr	r3, [r7, #4]
7000c9ea:	881b      	ldrh	r3, [r3, #0]
7000c9ec:	461a      	mov	r2, r3
7000c9ee:	68bb      	ldr	r3, [r7, #8]
7000c9f0:	4413      	add	r3, r2
7000c9f2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
7000c9f4:	68fb      	ldr	r3, [r7, #12]
7000c9f6:	3301      	adds	r3, #1
7000c9f8:	60fb      	str	r3, [r7, #12]
7000c9fa:	687b      	ldr	r3, [r7, #4]
7000c9fc:	885b      	ldrh	r3, [r3, #2]
7000c9fe:	461a      	mov	r2, r3
7000ca00:	68fb      	ldr	r3, [r7, #12]
7000ca02:	4293      	cmp	r3, r2
7000ca04:	dbe7      	blt.n	7000c9d6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
7000ca06:	bf00      	nop
7000ca08:	bf00      	nop
7000ca0a:	3714      	adds	r7, #20
7000ca0c:	46bd      	mov	sp, r7
7000ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
7000ca12:	4770      	bx	lr

7000ca14 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
7000ca14:	b580      	push	{r7, lr}
7000ca16:	b082      	sub	sp, #8
7000ca18:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
7000ca1a:	2300      	movs	r3, #0
7000ca1c:	80fb      	strh	r3, [r7, #6]
7000ca1e:	e009      	b.n	7000ca34 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
7000ca20:	88fb      	ldrh	r3, [r7, #6]
7000ca22:	4a08      	ldr	r2, [pc, #32]	@ (7000ca44 <memp_init+0x30>)
7000ca24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
7000ca28:	4618      	mov	r0, r3
7000ca2a:	f7ff ffc3 	bl	7000c9b4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
7000ca2e:	88fb      	ldrh	r3, [r7, #6]
7000ca30:	3301      	adds	r3, #1
7000ca32:	80fb      	strh	r3, [r7, #6]
7000ca34:	88fb      	ldrh	r3, [r7, #6]
7000ca36:	2b0c      	cmp	r3, #12
7000ca38:	d9f2      	bls.n	7000ca20 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
7000ca3a:	bf00      	nop
7000ca3c:	bf00      	nop
7000ca3e:	3708      	adds	r7, #8
7000ca40:	46bd      	mov	sp, r7
7000ca42:	bd80      	pop	{r7, pc}
7000ca44:	7001730c 	.word	0x7001730c

7000ca48 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
7000ca48:	b580      	push	{r7, lr}
7000ca4a:	b084      	sub	sp, #16
7000ca4c:	af00      	add	r7, sp, #0
7000ca4e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
7000ca50:	f001 fa64 	bl	7000df1c <sys_arch_protect>
7000ca54:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
7000ca56:	687b      	ldr	r3, [r7, #4]
7000ca58:	689b      	ldr	r3, [r3, #8]
7000ca5a:	681b      	ldr	r3, [r3, #0]
7000ca5c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
7000ca5e:	68bb      	ldr	r3, [r7, #8]
7000ca60:	2b00      	cmp	r3, #0
7000ca62:	d015      	beq.n	7000ca90 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
7000ca64:	687b      	ldr	r3, [r7, #4]
7000ca66:	689b      	ldr	r3, [r3, #8]
7000ca68:	68ba      	ldr	r2, [r7, #8]
7000ca6a:	6812      	ldr	r2, [r2, #0]
7000ca6c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
7000ca6e:	68bb      	ldr	r3, [r7, #8]
7000ca70:	f003 0303 	and.w	r3, r3, #3
7000ca74:	2b00      	cmp	r3, #0
7000ca76:	d006      	beq.n	7000ca86 <do_memp_malloc_pool+0x3e>
7000ca78:	4b09      	ldr	r3, [pc, #36]	@ (7000caa0 <do_memp_malloc_pool+0x58>)
7000ca7a:	f44f 728c 	mov.w	r2, #280	@ 0x118
7000ca7e:	4909      	ldr	r1, [pc, #36]	@ (7000caa4 <do_memp_malloc_pool+0x5c>)
7000ca80:	4809      	ldr	r0, [pc, #36]	@ (7000caa8 <do_memp_malloc_pool+0x60>)
7000ca82:	f007 f94d 	bl	70013d20 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
7000ca86:	68f8      	ldr	r0, [r7, #12]
7000ca88:	f001 fa56 	bl	7000df38 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
7000ca8c:	68bb      	ldr	r3, [r7, #8]
7000ca8e:	e003      	b.n	7000ca98 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
7000ca90:	68f8      	ldr	r0, [r7, #12]
7000ca92:	f001 fa51 	bl	7000df38 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
7000ca96:	2300      	movs	r3, #0
}
7000ca98:	4618      	mov	r0, r3
7000ca9a:	3710      	adds	r7, #16
7000ca9c:	46bd      	mov	sp, r7
7000ca9e:	bd80      	pop	{r7, pc}
7000caa0:	700156c0 	.word	0x700156c0
7000caa4:	70015720 	.word	0x70015720
7000caa8:	70015744 	.word	0x70015744

7000caac <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
7000caac:	b580      	push	{r7, lr}
7000caae:	b082      	sub	sp, #8
7000cab0:	af00      	add	r7, sp, #0
7000cab2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
7000cab4:	687b      	ldr	r3, [r7, #4]
7000cab6:	2b00      	cmp	r3, #0
7000cab8:	d106      	bne.n	7000cac8 <memp_malloc_pool+0x1c>
7000caba:	4b0a      	ldr	r3, [pc, #40]	@ (7000cae4 <memp_malloc_pool+0x38>)
7000cabc:	f44f 729e 	mov.w	r2, #316	@ 0x13c
7000cac0:	4909      	ldr	r1, [pc, #36]	@ (7000cae8 <memp_malloc_pool+0x3c>)
7000cac2:	480a      	ldr	r0, [pc, #40]	@ (7000caec <memp_malloc_pool+0x40>)
7000cac4:	f007 f92c 	bl	70013d20 <iprintf>
  if (desc == NULL) {
7000cac8:	687b      	ldr	r3, [r7, #4]
7000caca:	2b00      	cmp	r3, #0
7000cacc:	d101      	bne.n	7000cad2 <memp_malloc_pool+0x26>
    return NULL;
7000cace:	2300      	movs	r3, #0
7000cad0:	e003      	b.n	7000cada <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
7000cad2:	6878      	ldr	r0, [r7, #4]
7000cad4:	f7ff ffb8 	bl	7000ca48 <do_memp_malloc_pool>
7000cad8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
7000cada:	4618      	mov	r0, r3
7000cadc:	3708      	adds	r7, #8
7000cade:	46bd      	mov	sp, r7
7000cae0:	bd80      	pop	{r7, pc}
7000cae2:	bf00      	nop
7000cae4:	700156c0 	.word	0x700156c0
7000cae8:	7001576c 	.word	0x7001576c
7000caec:	70015744 	.word	0x70015744

7000caf0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
7000caf0:	b580      	push	{r7, lr}
7000caf2:	b084      	sub	sp, #16
7000caf4:	af00      	add	r7, sp, #0
7000caf6:	4603      	mov	r3, r0
7000caf8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
7000cafa:	79fb      	ldrb	r3, [r7, #7]
7000cafc:	2b0c      	cmp	r3, #12
7000cafe:	d901      	bls.n	7000cb04 <memp_malloc+0x14>
7000cb00:	2300      	movs	r3, #0
7000cb02:	e008      	b.n	7000cb16 <memp_malloc+0x26>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
7000cb04:	79fb      	ldrb	r3, [r7, #7]
7000cb06:	4a06      	ldr	r2, [pc, #24]	@ (7000cb20 <memp_malloc+0x30>)
7000cb08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
7000cb0c:	4618      	mov	r0, r3
7000cb0e:	f7ff ff9b 	bl	7000ca48 <do_memp_malloc_pool>
7000cb12:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
7000cb14:	68fb      	ldr	r3, [r7, #12]
}
7000cb16:	4618      	mov	r0, r3
7000cb18:	3710      	adds	r7, #16
7000cb1a:	46bd      	mov	sp, r7
7000cb1c:	bd80      	pop	{r7, pc}
7000cb1e:	bf00      	nop
7000cb20:	7001730c 	.word	0x7001730c

7000cb24 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
7000cb24:	b580      	push	{r7, lr}
7000cb26:	b084      	sub	sp, #16
7000cb28:	af00      	add	r7, sp, #0
7000cb2a:	6078      	str	r0, [r7, #4]
7000cb2c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
7000cb2e:	683b      	ldr	r3, [r7, #0]
7000cb30:	f003 0303 	and.w	r3, r3, #3
7000cb34:	2b00      	cmp	r3, #0
7000cb36:	d006      	beq.n	7000cb46 <do_memp_free_pool+0x22>
7000cb38:	4b0d      	ldr	r3, [pc, #52]	@ (7000cb70 <do_memp_free_pool+0x4c>)
7000cb3a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
7000cb3e:	490d      	ldr	r1, [pc, #52]	@ (7000cb74 <do_memp_free_pool+0x50>)
7000cb40:	480d      	ldr	r0, [pc, #52]	@ (7000cb78 <do_memp_free_pool+0x54>)
7000cb42:	f007 f8ed 	bl	70013d20 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
7000cb46:	683b      	ldr	r3, [r7, #0]
7000cb48:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
7000cb4a:	f001 f9e7 	bl	7000df1c <sys_arch_protect>
7000cb4e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
7000cb50:	687b      	ldr	r3, [r7, #4]
7000cb52:	689b      	ldr	r3, [r3, #8]
7000cb54:	681a      	ldr	r2, [r3, #0]
7000cb56:	68fb      	ldr	r3, [r7, #12]
7000cb58:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
7000cb5a:	687b      	ldr	r3, [r7, #4]
7000cb5c:	689b      	ldr	r3, [r3, #8]
7000cb5e:	68fa      	ldr	r2, [r7, #12]
7000cb60:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
7000cb62:	68b8      	ldr	r0, [r7, #8]
7000cb64:	f001 f9e8 	bl	7000df38 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
7000cb68:	bf00      	nop
7000cb6a:	3710      	adds	r7, #16
7000cb6c:	46bd      	mov	sp, r7
7000cb6e:	bd80      	pop	{r7, pc}
7000cb70:	700156c0 	.word	0x700156c0
7000cb74:	70015780 	.word	0x70015780
7000cb78:	70015744 	.word	0x70015744

7000cb7c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
7000cb7c:	b580      	push	{r7, lr}
7000cb7e:	b082      	sub	sp, #8
7000cb80:	af00      	add	r7, sp, #0
7000cb82:	6078      	str	r0, [r7, #4]
7000cb84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
7000cb86:	687b      	ldr	r3, [r7, #4]
7000cb88:	2b00      	cmp	r3, #0
7000cb8a:	d106      	bne.n	7000cb9a <memp_free_pool+0x1e>
7000cb8c:	4b0a      	ldr	r3, [pc, #40]	@ (7000cbb8 <memp_free_pool+0x3c>)
7000cb8e:	f240 1295 	movw	r2, #405	@ 0x195
7000cb92:	490a      	ldr	r1, [pc, #40]	@ (7000cbbc <memp_free_pool+0x40>)
7000cb94:	480a      	ldr	r0, [pc, #40]	@ (7000cbc0 <memp_free_pool+0x44>)
7000cb96:	f007 f8c3 	bl	70013d20 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
7000cb9a:	687b      	ldr	r3, [r7, #4]
7000cb9c:	2b00      	cmp	r3, #0
7000cb9e:	d007      	beq.n	7000cbb0 <memp_free_pool+0x34>
7000cba0:	683b      	ldr	r3, [r7, #0]
7000cba2:	2b00      	cmp	r3, #0
7000cba4:	d004      	beq.n	7000cbb0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
7000cba6:	6839      	ldr	r1, [r7, #0]
7000cba8:	6878      	ldr	r0, [r7, #4]
7000cbaa:	f7ff ffbb 	bl	7000cb24 <do_memp_free_pool>
7000cbae:	e000      	b.n	7000cbb2 <memp_free_pool+0x36>
    return;
7000cbb0:	bf00      	nop
}
7000cbb2:	3708      	adds	r7, #8
7000cbb4:	46bd      	mov	sp, r7
7000cbb6:	bd80      	pop	{r7, pc}
7000cbb8:	700156c0 	.word	0x700156c0
7000cbbc:	7001576c 	.word	0x7001576c
7000cbc0:	70015744 	.word	0x70015744

7000cbc4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
7000cbc4:	b580      	push	{r7, lr}
7000cbc6:	b082      	sub	sp, #8
7000cbc8:	af00      	add	r7, sp, #0
7000cbca:	4603      	mov	r3, r0
7000cbcc:	6039      	str	r1, [r7, #0]
7000cbce:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
7000cbd0:	79fb      	ldrb	r3, [r7, #7]
7000cbd2:	2b0c      	cmp	r3, #12
7000cbd4:	d80c      	bhi.n	7000cbf0 <memp_free+0x2c>

  if (mem == NULL) {
7000cbd6:	683b      	ldr	r3, [r7, #0]
7000cbd8:	2b00      	cmp	r3, #0
7000cbda:	d008      	beq.n	7000cbee <memp_free+0x2a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
7000cbdc:	79fb      	ldrb	r3, [r7, #7]
7000cbde:	4a06      	ldr	r2, [pc, #24]	@ (7000cbf8 <memp_free+0x34>)
7000cbe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
7000cbe4:	6839      	ldr	r1, [r7, #0]
7000cbe6:	4618      	mov	r0, r3
7000cbe8:	f7ff ff9c 	bl	7000cb24 <do_memp_free_pool>
7000cbec:	e000      	b.n	7000cbf0 <memp_free+0x2c>
    return;
7000cbee:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
7000cbf0:	3708      	adds	r7, #8
7000cbf2:	46bd      	mov	sp, r7
7000cbf4:	bd80      	pop	{r7, pc}
7000cbf6:	bf00      	nop
7000cbf8:	7001730c 	.word	0x7001730c

7000cbfc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
7000cbfc:	b480      	push	{r7}
7000cbfe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
7000cc00:	bf00      	nop
7000cc02:	46bd      	mov	sp, r7
7000cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
7000cc08:	4770      	bx	lr
	...

7000cc0c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
7000cc0c:	b580      	push	{r7, lr}
7000cc0e:	b086      	sub	sp, #24
7000cc10:	af00      	add	r7, sp, #0
7000cc12:	60f8      	str	r0, [r7, #12]
7000cc14:	60b9      	str	r1, [r7, #8]
7000cc16:	607a      	str	r2, [r7, #4]
7000cc18:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
7000cc1a:	68fb      	ldr	r3, [r7, #12]
7000cc1c:	2b00      	cmp	r3, #0
7000cc1e:	d101      	bne.n	7000cc24 <netif_add+0x18>
7000cc20:	2300      	movs	r3, #0
7000cc22:	e09b      	b.n	7000cd5c <netif_add+0x150>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
7000cc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000cc26:	2b00      	cmp	r3, #0
7000cc28:	d101      	bne.n	7000cc2e <netif_add+0x22>
7000cc2a:	2300      	movs	r3, #0
7000cc2c:	e096      	b.n	7000cd5c <netif_add+0x150>

#if LWIP_IPV4
  if (ipaddr == NULL) {
7000cc2e:	68bb      	ldr	r3, [r7, #8]
7000cc30:	2b00      	cmp	r3, #0
7000cc32:	d101      	bne.n	7000cc38 <netif_add+0x2c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
7000cc34:	4b4b      	ldr	r3, [pc, #300]	@ (7000cd64 <netif_add+0x158>)
7000cc36:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
7000cc38:	687b      	ldr	r3, [r7, #4]
7000cc3a:	2b00      	cmp	r3, #0
7000cc3c:	d101      	bne.n	7000cc42 <netif_add+0x36>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
7000cc3e:	4b49      	ldr	r3, [pc, #292]	@ (7000cd64 <netif_add+0x158>)
7000cc40:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
7000cc42:	683b      	ldr	r3, [r7, #0]
7000cc44:	2b00      	cmp	r3, #0
7000cc46:	d101      	bne.n	7000cc4c <netif_add+0x40>
    gw = ip_2_ip4(IP4_ADDR_ANY);
7000cc48:	4b46      	ldr	r3, [pc, #280]	@ (7000cd64 <netif_add+0x158>)
7000cc4a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
7000cc4c:	68fb      	ldr	r3, [r7, #12]
7000cc4e:	2200      	movs	r2, #0
7000cc50:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
7000cc52:	68fb      	ldr	r3, [r7, #12]
7000cc54:	2200      	movs	r2, #0
7000cc56:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
7000cc58:	68fb      	ldr	r3, [r7, #12]
7000cc5a:	2200      	movs	r2, #0
7000cc5c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
7000cc5e:	68fb      	ldr	r3, [r7, #12]
7000cc60:	4a41      	ldr	r2, [pc, #260]	@ (7000cd68 <netif_add+0x15c>)
7000cc62:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
7000cc64:	68fb      	ldr	r3, [r7, #12]
7000cc66:	2200      	movs	r2, #0
7000cc68:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
7000cc6a:	68fb      	ldr	r3, [r7, #12]
7000cc6c:	2200      	movs	r2, #0
7000cc6e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
7000cc72:	68fb      	ldr	r3, [r7, #12]
7000cc74:	2200      	movs	r2, #0
7000cc76:	61da      	str	r2, [r3, #28]
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */

  /* remember netif specific state information data */
  netif->state = state;
7000cc78:	68fb      	ldr	r3, [r7, #12]
7000cc7a:	6a3a      	ldr	r2, [r7, #32]
7000cc7c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
7000cc7e:	4b3b      	ldr	r3, [pc, #236]	@ (7000cd6c <netif_add+0x160>)
7000cc80:	781a      	ldrb	r2, [r3, #0]
7000cc82:	68fb      	ldr	r3, [r7, #12]
7000cc84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
7000cc88:	68fb      	ldr	r3, [r7, #12]
7000cc8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
7000cc8c:	611a      	str	r2, [r3, #16]
  netif->reschedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
#endif /* ENABLE_LOOPBACK */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
7000cc8e:	683b      	ldr	r3, [r7, #0]
7000cc90:	687a      	ldr	r2, [r7, #4]
7000cc92:	68b9      	ldr	r1, [r7, #8]
7000cc94:	68f8      	ldr	r0, [r7, #12]
7000cc96:	f000 f90f 	bl	7000ceb8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
7000cc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000cc9c:	68f8      	ldr	r0, [r7, #12]
7000cc9e:	4798      	blx	r3
7000cca0:	4603      	mov	r3, r0
7000cca2:	2b00      	cmp	r3, #0
7000cca4:	d001      	beq.n	7000ccaa <netif_add+0x9e>
    return NULL;
7000cca6:	2300      	movs	r3, #0
7000cca8:	e058      	b.n	7000cd5c <netif_add+0x150>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
7000ccaa:	68fb      	ldr	r3, [r7, #12]
7000ccac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000ccb0:	2bff      	cmp	r3, #255	@ 0xff
7000ccb2:	d103      	bne.n	7000ccbc <netif_add+0xb0>
        netif->num = 0;
7000ccb4:	68fb      	ldr	r3, [r7, #12]
7000ccb6:	2200      	movs	r2, #0
7000ccb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
7000ccbc:	2300      	movs	r3, #0
7000ccbe:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
7000ccc0:	4b2b      	ldr	r3, [pc, #172]	@ (7000cd70 <netif_add+0x164>)
7000ccc2:	681b      	ldr	r3, [r3, #0]
7000ccc4:	617b      	str	r3, [r7, #20]
7000ccc6:	e02b      	b.n	7000cd20 <netif_add+0x114>
        LWIP_ASSERT("netif already added", netif2 != netif);
7000ccc8:	697a      	ldr	r2, [r7, #20]
7000ccca:	68fb      	ldr	r3, [r7, #12]
7000cccc:	429a      	cmp	r2, r3
7000ccce:	d106      	bne.n	7000ccde <netif_add+0xd2>
7000ccd0:	4b28      	ldr	r3, [pc, #160]	@ (7000cd74 <netif_add+0x168>)
7000ccd2:	f44f 72c7 	mov.w	r2, #398	@ 0x18e
7000ccd6:	4928      	ldr	r1, [pc, #160]	@ (7000cd78 <netif_add+0x16c>)
7000ccd8:	4828      	ldr	r0, [pc, #160]	@ (7000cd7c <netif_add+0x170>)
7000ccda:	f007 f821 	bl	70013d20 <iprintf>
        num_netifs++;
7000ccde:	693b      	ldr	r3, [r7, #16]
7000cce0:	3301      	adds	r3, #1
7000cce2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
7000cce4:	693b      	ldr	r3, [r7, #16]
7000cce6:	2bff      	cmp	r3, #255	@ 0xff
7000cce8:	dd06      	ble.n	7000ccf8 <netif_add+0xec>
7000ccea:	4b22      	ldr	r3, [pc, #136]	@ (7000cd74 <netif_add+0x168>)
7000ccec:	f44f 72c8 	mov.w	r2, #400	@ 0x190
7000ccf0:	4923      	ldr	r1, [pc, #140]	@ (7000cd80 <netif_add+0x174>)
7000ccf2:	4822      	ldr	r0, [pc, #136]	@ (7000cd7c <netif_add+0x170>)
7000ccf4:	f007 f814 	bl	70013d20 <iprintf>
        if (netif2->num == netif->num) {
7000ccf8:	697b      	ldr	r3, [r7, #20]
7000ccfa:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
7000ccfe:	68fb      	ldr	r3, [r7, #12]
7000cd00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000cd04:	429a      	cmp	r2, r3
7000cd06:	d108      	bne.n	7000cd1a <netif_add+0x10e>
          netif->num++;
7000cd08:	68fb      	ldr	r3, [r7, #12]
7000cd0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000cd0e:	3301      	adds	r3, #1
7000cd10:	b2da      	uxtb	r2, r3
7000cd12:	68fb      	ldr	r3, [r7, #12]
7000cd14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
7000cd18:	e005      	b.n	7000cd26 <netif_add+0x11a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
7000cd1a:	697b      	ldr	r3, [r7, #20]
7000cd1c:	681b      	ldr	r3, [r3, #0]
7000cd1e:	617b      	str	r3, [r7, #20]
7000cd20:	697b      	ldr	r3, [r7, #20]
7000cd22:	2b00      	cmp	r3, #0
7000cd24:	d1d0      	bne.n	7000ccc8 <netif_add+0xbc>
        }
      }
    } while (netif2 != NULL);
7000cd26:	697b      	ldr	r3, [r7, #20]
7000cd28:	2b00      	cmp	r3, #0
7000cd2a:	d1be      	bne.n	7000ccaa <netif_add+0x9e>
  }
  if (netif->num == 254) {
7000cd2c:	68fb      	ldr	r3, [r7, #12]
7000cd2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000cd32:	2bfe      	cmp	r3, #254	@ 0xfe
7000cd34:	d103      	bne.n	7000cd3e <netif_add+0x132>
    netif_num = 0;
7000cd36:	4b0d      	ldr	r3, [pc, #52]	@ (7000cd6c <netif_add+0x160>)
7000cd38:	2200      	movs	r2, #0
7000cd3a:	701a      	strb	r2, [r3, #0]
7000cd3c:	e006      	b.n	7000cd4c <netif_add+0x140>
  } else {
    netif_num = (u8_t)(netif->num + 1);
7000cd3e:	68fb      	ldr	r3, [r7, #12]
7000cd40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000cd44:	3301      	adds	r3, #1
7000cd46:	b2da      	uxtb	r2, r3
7000cd48:	4b08      	ldr	r3, [pc, #32]	@ (7000cd6c <netif_add+0x160>)
7000cd4a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
7000cd4c:	4b08      	ldr	r3, [pc, #32]	@ (7000cd70 <netif_add+0x164>)
7000cd4e:	681a      	ldr	r2, [r3, #0]
7000cd50:	68fb      	ldr	r3, [r7, #12]
7000cd52:	601a      	str	r2, [r3, #0]
  netif_list = netif;
7000cd54:	4a06      	ldr	r2, [pc, #24]	@ (7000cd70 <netif_add+0x164>)
7000cd56:	68fb      	ldr	r3, [r7, #12]
7000cd58:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
7000cd5a:	68fb      	ldr	r3, [r7, #12]
}
7000cd5c:	4618      	mov	r0, r3
7000cd5e:	3718      	adds	r7, #24
7000cd60:	46bd      	mov	sp, r7
7000cd62:	bd80      	pop	{r7, pc}
7000cd64:	7001726c 	.word	0x7001726c
7000cd68:	7000d123 	.word	0x7000d123
7000cd6c:	24008470 	.word	0x24008470
7000cd70:	24008468 	.word	0x24008468
7000cd74:	700157a0 	.word	0x700157a0
7000cd78:	70015860 	.word	0x70015860
7000cd7c:	7001581c 	.word	0x7001581c
7000cd80:	70015874 	.word	0x70015874

7000cd84 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
7000cd84:	b580      	push	{r7, lr}
7000cd86:	b082      	sub	sp, #8
7000cd88:	af00      	add	r7, sp, #0
7000cd8a:	6078      	str	r0, [r7, #4]
7000cd8c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
7000cd8e:	6839      	ldr	r1, [r7, #0]
7000cd90:	6878      	ldr	r0, [r7, #4]
7000cd92:	f002 fbdf 	bl	7000f554 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
7000cd96:	6839      	ldr	r1, [r7, #0]
7000cd98:	6878      	ldr	r0, [r7, #4]
7000cd9a:	f006 fe91 	bl	70013ac0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
7000cd9e:	bf00      	nop
7000cda0:	3708      	adds	r7, #8
7000cda2:	46bd      	mov	sp, r7
7000cda4:	bd80      	pop	{r7, pc}
	...

7000cda8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
7000cda8:	b580      	push	{r7, lr}
7000cdaa:	b086      	sub	sp, #24
7000cdac:	af00      	add	r7, sp, #0
7000cdae:	60f8      	str	r0, [r7, #12]
7000cdb0:	60b9      	str	r1, [r7, #8]
7000cdb2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
7000cdb4:	68bb      	ldr	r3, [r7, #8]
7000cdb6:	2b00      	cmp	r3, #0
7000cdb8:	d106      	bne.n	7000cdc8 <netif_do_set_ipaddr+0x20>
7000cdba:	4b1d      	ldr	r3, [pc, #116]	@ (7000ce30 <netif_do_set_ipaddr+0x88>)
7000cdbc:	f44f 72e7 	mov.w	r2, #462	@ 0x1ce
7000cdc0:	491c      	ldr	r1, [pc, #112]	@ (7000ce34 <netif_do_set_ipaddr+0x8c>)
7000cdc2:	481d      	ldr	r0, [pc, #116]	@ (7000ce38 <netif_do_set_ipaddr+0x90>)
7000cdc4:	f006 ffac 	bl	70013d20 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
7000cdc8:	687b      	ldr	r3, [r7, #4]
7000cdca:	2b00      	cmp	r3, #0
7000cdcc:	d106      	bne.n	7000cddc <netif_do_set_ipaddr+0x34>
7000cdce:	4b18      	ldr	r3, [pc, #96]	@ (7000ce30 <netif_do_set_ipaddr+0x88>)
7000cdd0:	f240 12cf 	movw	r2, #463	@ 0x1cf
7000cdd4:	4917      	ldr	r1, [pc, #92]	@ (7000ce34 <netif_do_set_ipaddr+0x8c>)
7000cdd6:	4818      	ldr	r0, [pc, #96]	@ (7000ce38 <netif_do_set_ipaddr+0x90>)
7000cdd8:	f006 ffa2 	bl	70013d20 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
7000cddc:	68bb      	ldr	r3, [r7, #8]
7000cdde:	681a      	ldr	r2, [r3, #0]
7000cde0:	68fb      	ldr	r3, [r7, #12]
7000cde2:	3304      	adds	r3, #4
7000cde4:	681b      	ldr	r3, [r3, #0]
7000cde6:	429a      	cmp	r2, r3
7000cde8:	d01c      	beq.n	7000ce24 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
7000cdea:	68bb      	ldr	r3, [r7, #8]
7000cdec:	681b      	ldr	r3, [r3, #0]
7000cdee:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
7000cdf0:	68fb      	ldr	r3, [r7, #12]
7000cdf2:	3304      	adds	r3, #4
7000cdf4:	681a      	ldr	r2, [r3, #0]
7000cdf6:	687b      	ldr	r3, [r7, #4]
7000cdf8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
7000cdfa:	f107 0314 	add.w	r3, r7, #20
7000cdfe:	4619      	mov	r1, r3
7000ce00:	6878      	ldr	r0, [r7, #4]
7000ce02:	f7ff ffbf 	bl	7000cd84 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
7000ce06:	68bb      	ldr	r3, [r7, #8]
7000ce08:	2b00      	cmp	r3, #0
7000ce0a:	d002      	beq.n	7000ce12 <netif_do_set_ipaddr+0x6a>
7000ce0c:	68bb      	ldr	r3, [r7, #8]
7000ce0e:	681b      	ldr	r3, [r3, #0]
7000ce10:	e000      	b.n	7000ce14 <netif_do_set_ipaddr+0x6c>
7000ce12:	2300      	movs	r3, #0
7000ce14:	68fa      	ldr	r2, [r7, #12]
7000ce16:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
7000ce18:	2101      	movs	r1, #1
7000ce1a:	68f8      	ldr	r0, [r7, #12]
7000ce1c:	f000 f8c4 	bl	7000cfa8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
7000ce20:	2301      	movs	r3, #1
7000ce22:	e000      	b.n	7000ce26 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
7000ce24:	2300      	movs	r3, #0
}
7000ce26:	4618      	mov	r0, r3
7000ce28:	3718      	adds	r7, #24
7000ce2a:	46bd      	mov	sp, r7
7000ce2c:	bd80      	pop	{r7, pc}
7000ce2e:	bf00      	nop
7000ce30:	700157a0 	.word	0x700157a0
7000ce34:	700158a4 	.word	0x700158a4
7000ce38:	7001581c 	.word	0x7001581c

7000ce3c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
7000ce3c:	b480      	push	{r7}
7000ce3e:	b085      	sub	sp, #20
7000ce40:	af00      	add	r7, sp, #0
7000ce42:	60f8      	str	r0, [r7, #12]
7000ce44:	60b9      	str	r1, [r7, #8]
7000ce46:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
7000ce48:	68bb      	ldr	r3, [r7, #8]
7000ce4a:	681a      	ldr	r2, [r3, #0]
7000ce4c:	68fb      	ldr	r3, [r7, #12]
7000ce4e:	3308      	adds	r3, #8
7000ce50:	681b      	ldr	r3, [r3, #0]
7000ce52:	429a      	cmp	r2, r3
7000ce54:	d00a      	beq.n	7000ce6c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
7000ce56:	68bb      	ldr	r3, [r7, #8]
7000ce58:	2b00      	cmp	r3, #0
7000ce5a:	d002      	beq.n	7000ce62 <netif_do_set_netmask+0x26>
7000ce5c:	68bb      	ldr	r3, [r7, #8]
7000ce5e:	681b      	ldr	r3, [r3, #0]
7000ce60:	e000      	b.n	7000ce64 <netif_do_set_netmask+0x28>
7000ce62:	2300      	movs	r3, #0
7000ce64:	68fa      	ldr	r2, [r7, #12]
7000ce66:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
7000ce68:	2301      	movs	r3, #1
7000ce6a:	e000      	b.n	7000ce6e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
7000ce6c:	2300      	movs	r3, #0
}
7000ce6e:	4618      	mov	r0, r3
7000ce70:	3714      	adds	r7, #20
7000ce72:	46bd      	mov	sp, r7
7000ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
7000ce78:	4770      	bx	lr

7000ce7a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
7000ce7a:	b480      	push	{r7}
7000ce7c:	b085      	sub	sp, #20
7000ce7e:	af00      	add	r7, sp, #0
7000ce80:	60f8      	str	r0, [r7, #12]
7000ce82:	60b9      	str	r1, [r7, #8]
7000ce84:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
7000ce86:	68bb      	ldr	r3, [r7, #8]
7000ce88:	681a      	ldr	r2, [r3, #0]
7000ce8a:	68fb      	ldr	r3, [r7, #12]
7000ce8c:	330c      	adds	r3, #12
7000ce8e:	681b      	ldr	r3, [r3, #0]
7000ce90:	429a      	cmp	r2, r3
7000ce92:	d00a      	beq.n	7000ceaa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
7000ce94:	68bb      	ldr	r3, [r7, #8]
7000ce96:	2b00      	cmp	r3, #0
7000ce98:	d002      	beq.n	7000cea0 <netif_do_set_gw+0x26>
7000ce9a:	68bb      	ldr	r3, [r7, #8]
7000ce9c:	681b      	ldr	r3, [r3, #0]
7000ce9e:	e000      	b.n	7000cea2 <netif_do_set_gw+0x28>
7000cea0:	2300      	movs	r3, #0
7000cea2:	68fa      	ldr	r2, [r7, #12]
7000cea4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
7000cea6:	2301      	movs	r3, #1
7000cea8:	e000      	b.n	7000ceac <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
7000ceaa:	2300      	movs	r3, #0
}
7000ceac:	4618      	mov	r0, r3
7000ceae:	3714      	adds	r7, #20
7000ceb0:	46bd      	mov	sp, r7
7000ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
7000ceb6:	4770      	bx	lr

7000ceb8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
7000ceb8:	b580      	push	{r7, lr}
7000ceba:	b088      	sub	sp, #32
7000cebc:	af00      	add	r7, sp, #0
7000cebe:	60f8      	str	r0, [r7, #12]
7000cec0:	60b9      	str	r1, [r7, #8]
7000cec2:	607a      	str	r2, [r7, #4]
7000cec4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
7000cec6:	2300      	movs	r3, #0
7000cec8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
7000ceca:	2300      	movs	r3, #0
7000cecc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
7000cece:	68bb      	ldr	r3, [r7, #8]
7000ced0:	2b00      	cmp	r3, #0
7000ced2:	d101      	bne.n	7000ced8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
7000ced4:	4b1c      	ldr	r3, [pc, #112]	@ (7000cf48 <netif_set_addr+0x90>)
7000ced6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
7000ced8:	687b      	ldr	r3, [r7, #4]
7000ceda:	2b00      	cmp	r3, #0
7000cedc:	d101      	bne.n	7000cee2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
7000cede:	4b1a      	ldr	r3, [pc, #104]	@ (7000cf48 <netif_set_addr+0x90>)
7000cee0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
7000cee2:	683b      	ldr	r3, [r7, #0]
7000cee4:	2b00      	cmp	r3, #0
7000cee6:	d101      	bne.n	7000ceec <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
7000cee8:	4b17      	ldr	r3, [pc, #92]	@ (7000cf48 <netif_set_addr+0x90>)
7000ceea:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
7000ceec:	68bb      	ldr	r3, [r7, #8]
7000ceee:	2b00      	cmp	r3, #0
7000cef0:	d003      	beq.n	7000cefa <netif_set_addr+0x42>
7000cef2:	68bb      	ldr	r3, [r7, #8]
7000cef4:	681b      	ldr	r3, [r3, #0]
7000cef6:	2b00      	cmp	r3, #0
7000cef8:	d101      	bne.n	7000cefe <netif_set_addr+0x46>
7000cefa:	2301      	movs	r3, #1
7000cefc:	e000      	b.n	7000cf00 <netif_set_addr+0x48>
7000cefe:	2300      	movs	r3, #0
7000cf00:	617b      	str	r3, [r7, #20]
  if (remove) {
7000cf02:	697b      	ldr	r3, [r7, #20]
7000cf04:	2b00      	cmp	r3, #0
7000cf06:	d006      	beq.n	7000cf16 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
7000cf08:	f107 0310 	add.w	r3, r7, #16
7000cf0c:	461a      	mov	r2, r3
7000cf0e:	68b9      	ldr	r1, [r7, #8]
7000cf10:	68f8      	ldr	r0, [r7, #12]
7000cf12:	f7ff ff49 	bl	7000cda8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
7000cf16:	69fa      	ldr	r2, [r7, #28]
7000cf18:	6879      	ldr	r1, [r7, #4]
7000cf1a:	68f8      	ldr	r0, [r7, #12]
7000cf1c:	f7ff ff8e 	bl	7000ce3c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
7000cf20:	69ba      	ldr	r2, [r7, #24]
7000cf22:	6839      	ldr	r1, [r7, #0]
7000cf24:	68f8      	ldr	r0, [r7, #12]
7000cf26:	f7ff ffa8 	bl	7000ce7a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
7000cf2a:	697b      	ldr	r3, [r7, #20]
7000cf2c:	2b00      	cmp	r3, #0
7000cf2e:	d106      	bne.n	7000cf3e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
7000cf30:	f107 0310 	add.w	r3, r7, #16
7000cf34:	461a      	mov	r2, r3
7000cf36:	68b9      	ldr	r1, [r7, #8]
7000cf38:	68f8      	ldr	r0, [r7, #12]
7000cf3a:	f7ff ff35 	bl	7000cda8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
7000cf3e:	bf00      	nop
7000cf40:	3720      	adds	r7, #32
7000cf42:	46bd      	mov	sp, r7
7000cf44:	bd80      	pop	{r7, pc}
7000cf46:	bf00      	nop
7000cf48:	7001726c 	.word	0x7001726c

7000cf4c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
7000cf4c:	b480      	push	{r7}
7000cf4e:	b083      	sub	sp, #12
7000cf50:	af00      	add	r7, sp, #0
7000cf52:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
7000cf54:	4a04      	ldr	r2, [pc, #16]	@ (7000cf68 <netif_set_default+0x1c>)
7000cf56:	687b      	ldr	r3, [r7, #4]
7000cf58:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
7000cf5a:	bf00      	nop
7000cf5c:	370c      	adds	r7, #12
7000cf5e:	46bd      	mov	sp, r7
7000cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
7000cf64:	4770      	bx	lr
7000cf66:	bf00      	nop
7000cf68:	2400846c 	.word	0x2400846c

7000cf6c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
7000cf6c:	b580      	push	{r7, lr}
7000cf6e:	b082      	sub	sp, #8
7000cf70:	af00      	add	r7, sp, #0
7000cf72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
7000cf74:	687b      	ldr	r3, [r7, #4]
7000cf76:	2b00      	cmp	r3, #0
7000cf78:	d013      	beq.n	7000cfa2 <netif_set_up+0x36>

  if (!(netif->flags & NETIF_FLAG_UP)) {
7000cf7a:	687b      	ldr	r3, [r7, #4]
7000cf7c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000cf80:	f003 0301 	and.w	r3, r3, #1
7000cf84:	2b00      	cmp	r3, #0
7000cf86:	d10c      	bne.n	7000cfa2 <netif_set_up+0x36>
    netif_set_flags(netif, NETIF_FLAG_UP);
7000cf88:	687b      	ldr	r3, [r7, #4]
7000cf8a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000cf8e:	f043 0301 	orr.w	r3, r3, #1
7000cf92:	b2da      	uxtb	r2, r3
7000cf94:	687b      	ldr	r3, [r7, #4]
7000cf96:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
7000cf9a:	2103      	movs	r1, #3
7000cf9c:	6878      	ldr	r0, [r7, #4]
7000cf9e:	f000 f803 	bl	7000cfa8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
7000cfa2:	3708      	adds	r7, #8
7000cfa4:	46bd      	mov	sp, r7
7000cfa6:	bd80      	pop	{r7, pc}

7000cfa8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
7000cfa8:	b580      	push	{r7, lr}
7000cfaa:	b082      	sub	sp, #8
7000cfac:	af00      	add	r7, sp, #0
7000cfae:	6078      	str	r0, [r7, #4]
7000cfb0:	460b      	mov	r3, r1
7000cfb2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
7000cfb4:	687b      	ldr	r3, [r7, #4]
7000cfb6:	2b00      	cmp	r3, #0
7000cfb8:	d106      	bne.n	7000cfc8 <netif_issue_reports+0x20>
7000cfba:	4b18      	ldr	r3, [pc, #96]	@ (7000d01c <netif_issue_reports+0x74>)
7000cfbc:	f44f 725c 	mov.w	r2, #880	@ 0x370
7000cfc0:	4917      	ldr	r1, [pc, #92]	@ (7000d020 <netif_issue_reports+0x78>)
7000cfc2:	4818      	ldr	r0, [pc, #96]	@ (7000d024 <netif_issue_reports+0x7c>)
7000cfc4:	f006 feac 	bl	70013d20 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
7000cfc8:	687b      	ldr	r3, [r7, #4]
7000cfca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000cfce:	f003 0304 	and.w	r3, r3, #4
7000cfd2:	2b00      	cmp	r3, #0
7000cfd4:	d01e      	beq.n	7000d014 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
7000cfd6:	687b      	ldr	r3, [r7, #4]
7000cfd8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000cfdc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
7000cfe0:	2b00      	cmp	r3, #0
7000cfe2:	d017      	beq.n	7000d014 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
7000cfe4:	78fb      	ldrb	r3, [r7, #3]
7000cfe6:	f003 0301 	and.w	r3, r3, #1
7000cfea:	2b00      	cmp	r3, #0
7000cfec:	d013      	beq.n	7000d016 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
7000cfee:	687b      	ldr	r3, [r7, #4]
7000cff0:	3304      	adds	r3, #4
7000cff2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
7000cff4:	2b00      	cmp	r3, #0
7000cff6:	d00e      	beq.n	7000d016 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
7000cff8:	687b      	ldr	r3, [r7, #4]
7000cffa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000cffe:	f003 0308 	and.w	r3, r3, #8
7000d002:	2b00      	cmp	r3, #0
7000d004:	d007      	beq.n	7000d016 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
7000d006:	687b      	ldr	r3, [r7, #4]
7000d008:	3304      	adds	r3, #4
7000d00a:	4619      	mov	r1, r3
7000d00c:	6878      	ldr	r0, [r7, #4]
7000d00e:	f7fd fc55 	bl	7000a8bc <etharp_request>
7000d012:	e000      	b.n	7000d016 <netif_issue_reports+0x6e>
    return;
7000d014:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
7000d016:	3708      	adds	r7, #8
7000d018:	46bd      	mov	sp, r7
7000d01a:	bd80      	pop	{r7, pc}
7000d01c:	700157a0 	.word	0x700157a0
7000d020:	700158b4 	.word	0x700158b4
7000d024:	7001581c 	.word	0x7001581c

7000d028 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
7000d028:	b580      	push	{r7, lr}
7000d02a:	b082      	sub	sp, #8
7000d02c:	af00      	add	r7, sp, #0
7000d02e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
7000d030:	687b      	ldr	r3, [r7, #4]
7000d032:	2b00      	cmp	r3, #0
7000d034:	d019      	beq.n	7000d06a <netif_set_down+0x42>

  if (netif->flags & NETIF_FLAG_UP) {
7000d036:	687b      	ldr	r3, [r7, #4]
7000d038:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000d03c:	f003 0301 	and.w	r3, r3, #1
7000d040:	2b00      	cmp	r3, #0
7000d042:	d012      	beq.n	7000d06a <netif_set_down+0x42>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
7000d044:	687b      	ldr	r3, [r7, #4]
7000d046:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000d04a:	f023 0301 	bic.w	r3, r3, #1
7000d04e:	b2da      	uxtb	r2, r3
7000d050:	687b      	ldr	r3, [r7, #4]
7000d052:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
7000d056:	687b      	ldr	r3, [r7, #4]
7000d058:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000d05c:	f003 0308 	and.w	r3, r3, #8
7000d060:	2b00      	cmp	r3, #0
7000d062:	d002      	beq.n	7000d06a <netif_set_down+0x42>
      etharp_cleanup_netif(netif);
7000d064:	6878      	ldr	r0, [r7, #4]
7000d066:	f7fc ffd9 	bl	7000a01c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
7000d06a:	3708      	adds	r7, #8
7000d06c:	46bd      	mov	sp, r7
7000d06e:	bd80      	pop	{r7, pc}

7000d070 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
7000d070:	b580      	push	{r7, lr}
7000d072:	b082      	sub	sp, #8
7000d074:	af00      	add	r7, sp, #0
7000d076:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
7000d078:	687b      	ldr	r3, [r7, #4]
7000d07a:	2b00      	cmp	r3, #0
7000d07c:	d01b      	beq.n	7000d0b6 <netif_set_link_up+0x46>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
7000d07e:	687b      	ldr	r3, [r7, #4]
7000d080:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000d084:	f003 0304 	and.w	r3, r3, #4
7000d088:	2b00      	cmp	r3, #0
7000d08a:	d114      	bne.n	7000d0b6 <netif_set_link_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
7000d08c:	687b      	ldr	r3, [r7, #4]
7000d08e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000d092:	f043 0304 	orr.w	r3, r3, #4
7000d096:	b2da      	uxtb	r2, r3
7000d098:	687b      	ldr	r3, [r7, #4]
7000d09a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
7000d09e:	2103      	movs	r1, #3
7000d0a0:	6878      	ldr	r0, [r7, #4]
7000d0a2:	f7ff ff81 	bl	7000cfa8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
7000d0a6:	687b      	ldr	r3, [r7, #4]
7000d0a8:	69db      	ldr	r3, [r3, #28]
7000d0aa:	2b00      	cmp	r3, #0
7000d0ac:	d003      	beq.n	7000d0b6 <netif_set_link_up+0x46>
7000d0ae:	687b      	ldr	r3, [r7, #4]
7000d0b0:	69db      	ldr	r3, [r3, #28]
7000d0b2:	6878      	ldr	r0, [r7, #4]
7000d0b4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
7000d0b6:	3708      	adds	r7, #8
7000d0b8:	46bd      	mov	sp, r7
7000d0ba:	bd80      	pop	{r7, pc}

7000d0bc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
7000d0bc:	b580      	push	{r7, lr}
7000d0be:	b082      	sub	sp, #8
7000d0c0:	af00      	add	r7, sp, #0
7000d0c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
7000d0c4:	687b      	ldr	r3, [r7, #4]
7000d0c6:	2b00      	cmp	r3, #0
7000d0c8:	d017      	beq.n	7000d0fa <netif_set_link_down+0x3e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
7000d0ca:	687b      	ldr	r3, [r7, #4]
7000d0cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000d0d0:	f003 0304 	and.w	r3, r3, #4
7000d0d4:	2b00      	cmp	r3, #0
7000d0d6:	d010      	beq.n	7000d0fa <netif_set_link_down+0x3e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
7000d0d8:	687b      	ldr	r3, [r7, #4]
7000d0da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
7000d0de:	f023 0304 	bic.w	r3, r3, #4
7000d0e2:	b2da      	uxtb	r2, r3
7000d0e4:	687b      	ldr	r3, [r7, #4]
7000d0e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#if LWIP_IPV6 && LWIP_ND6_ALLOW_RA_UPDATES
    netif->mtu6 = netif->mtu;
#endif

    NETIF_LINK_CALLBACK(netif);
7000d0ea:	687b      	ldr	r3, [r7, #4]
7000d0ec:	69db      	ldr	r3, [r3, #28]
7000d0ee:	2b00      	cmp	r3, #0
7000d0f0:	d003      	beq.n	7000d0fa <netif_set_link_down+0x3e>
7000d0f2:	687b      	ldr	r3, [r7, #4]
7000d0f4:	69db      	ldr	r3, [r3, #28]
7000d0f6:	6878      	ldr	r0, [r7, #4]
7000d0f8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
7000d0fa:	3708      	adds	r7, #8
7000d0fc:	46bd      	mov	sp, r7
7000d0fe:	bd80      	pop	{r7, pc}

7000d100 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
7000d100:	b480      	push	{r7}
7000d102:	b083      	sub	sp, #12
7000d104:	af00      	add	r7, sp, #0
7000d106:	6078      	str	r0, [r7, #4]
7000d108:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
7000d10a:	687b      	ldr	r3, [r7, #4]
7000d10c:	2b00      	cmp	r3, #0
7000d10e:	d002      	beq.n	7000d116 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
7000d110:	687b      	ldr	r3, [r7, #4]
7000d112:	683a      	ldr	r2, [r7, #0]
7000d114:	61da      	str	r2, [r3, #28]
  }
}
7000d116:	bf00      	nop
7000d118:	370c      	adds	r7, #12
7000d11a:	46bd      	mov	sp, r7
7000d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
7000d120:	4770      	bx	lr

7000d122 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
7000d122:	b480      	push	{r7}
7000d124:	b085      	sub	sp, #20
7000d126:	af00      	add	r7, sp, #0
7000d128:	60f8      	str	r0, [r7, #12]
7000d12a:	60b9      	str	r1, [r7, #8]
7000d12c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
7000d12e:	f06f 030b 	mvn.w	r3, #11
}
7000d132:	4618      	mov	r0, r3
7000d134:	3714      	adds	r7, #20
7000d136:	46bd      	mov	sp, r7
7000d138:	f85d 7b04 	ldr.w	r7, [sp], #4
7000d13c:	4770      	bx	lr
	...

7000d140 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
7000d140:	b480      	push	{r7}
7000d142:	b085      	sub	sp, #20
7000d144:	af00      	add	r7, sp, #0
7000d146:	4603      	mov	r3, r0
7000d148:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
7000d14a:	79fb      	ldrb	r3, [r7, #7]
7000d14c:	2b00      	cmp	r3, #0
7000d14e:	d013      	beq.n	7000d178 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
7000d150:	4b0d      	ldr	r3, [pc, #52]	@ (7000d188 <netif_get_by_index+0x48>)
7000d152:	681b      	ldr	r3, [r3, #0]
7000d154:	60fb      	str	r3, [r7, #12]
7000d156:	e00c      	b.n	7000d172 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
7000d158:	68fb      	ldr	r3, [r7, #12]
7000d15a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000d15e:	3301      	adds	r3, #1
7000d160:	b2db      	uxtb	r3, r3
7000d162:	79fa      	ldrb	r2, [r7, #7]
7000d164:	429a      	cmp	r2, r3
7000d166:	d101      	bne.n	7000d16c <netif_get_by_index+0x2c>
        return netif; /* found! */
7000d168:	68fb      	ldr	r3, [r7, #12]
7000d16a:	e006      	b.n	7000d17a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
7000d16c:	68fb      	ldr	r3, [r7, #12]
7000d16e:	681b      	ldr	r3, [r3, #0]
7000d170:	60fb      	str	r3, [r7, #12]
7000d172:	68fb      	ldr	r3, [r7, #12]
7000d174:	2b00      	cmp	r3, #0
7000d176:	d1ef      	bne.n	7000d158 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
7000d178:	2300      	movs	r3, #0
}
7000d17a:	4618      	mov	r0, r3
7000d17c:	3714      	adds	r7, #20
7000d17e:	46bd      	mov	sp, r7
7000d180:	f85d 7b04 	ldr.w	r7, [sp], #4
7000d184:	4770      	bx	lr
7000d186:	bf00      	nop
7000d188:	24008468 	.word	0x24008468

7000d18c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
7000d18c:	b580      	push	{r7, lr}
7000d18e:	b082      	sub	sp, #8
7000d190:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
7000d192:	f000 fec3 	bl	7000df1c <sys_arch_protect>
7000d196:	6038      	str	r0, [r7, #0]
7000d198:	4b0d      	ldr	r3, [pc, #52]	@ (7000d1d0 <pbuf_free_ooseq+0x44>)
7000d19a:	2200      	movs	r2, #0
7000d19c:	701a      	strb	r2, [r3, #0]
7000d19e:	6838      	ldr	r0, [r7, #0]
7000d1a0:	f000 feca 	bl	7000df38 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
7000d1a4:	4b0b      	ldr	r3, [pc, #44]	@ (7000d1d4 <pbuf_free_ooseq+0x48>)
7000d1a6:	681b      	ldr	r3, [r3, #0]
7000d1a8:	607b      	str	r3, [r7, #4]
7000d1aa:	e00a      	b.n	7000d1c2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
7000d1ac:	687b      	ldr	r3, [r7, #4]
7000d1ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000d1b0:	2b00      	cmp	r3, #0
7000d1b2:	d003      	beq.n	7000d1bc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
7000d1b4:	6878      	ldr	r0, [r7, #4]
7000d1b6:	f002 fa0b 	bl	7000f5d0 <tcp_free_ooseq>
      return;
7000d1ba:	e005      	b.n	7000d1c8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
7000d1bc:	687b      	ldr	r3, [r7, #4]
7000d1be:	68db      	ldr	r3, [r3, #12]
7000d1c0:	607b      	str	r3, [r7, #4]
7000d1c2:	687b      	ldr	r3, [r7, #4]
7000d1c4:	2b00      	cmp	r3, #0
7000d1c6:	d1f1      	bne.n	7000d1ac <pbuf_free_ooseq+0x20>
    }
  }
}
7000d1c8:	3708      	adds	r7, #8
7000d1ca:	46bd      	mov	sp, r7
7000d1cc:	bd80      	pop	{r7, pc}
7000d1ce:	bf00      	nop
7000d1d0:	24008471 	.word	0x24008471
7000d1d4:	24008484 	.word	0x24008484

7000d1d8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
7000d1d8:	b580      	push	{r7, lr}
7000d1da:	b082      	sub	sp, #8
7000d1dc:	af00      	add	r7, sp, #0
7000d1de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
7000d1e0:	f7ff ffd4 	bl	7000d18c <pbuf_free_ooseq>
}
7000d1e4:	bf00      	nop
7000d1e6:	3708      	adds	r7, #8
7000d1e8:	46bd      	mov	sp, r7
7000d1ea:	bd80      	pop	{r7, pc}

7000d1ec <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
7000d1ec:	b580      	push	{r7, lr}
7000d1ee:	b082      	sub	sp, #8
7000d1f0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
7000d1f2:	f000 fe93 	bl	7000df1c <sys_arch_protect>
7000d1f6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
7000d1f8:	4b0f      	ldr	r3, [pc, #60]	@ (7000d238 <pbuf_pool_is_empty+0x4c>)
7000d1fa:	781b      	ldrb	r3, [r3, #0]
7000d1fc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
7000d1fe:	4b0e      	ldr	r3, [pc, #56]	@ (7000d238 <pbuf_pool_is_empty+0x4c>)
7000d200:	2201      	movs	r2, #1
7000d202:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
7000d204:	6878      	ldr	r0, [r7, #4]
7000d206:	f000 fe97 	bl	7000df38 <sys_arch_unprotect>

  if (!queued) {
7000d20a:	78fb      	ldrb	r3, [r7, #3]
7000d20c:	2b00      	cmp	r3, #0
7000d20e:	d10f      	bne.n	7000d230 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
7000d210:	2100      	movs	r1, #0
7000d212:	480a      	ldr	r0, [pc, #40]	@ (7000d23c <pbuf_pool_is_empty+0x50>)
7000d214:	f006 f8a2 	bl	7001335c <tcpip_try_callback>
7000d218:	4603      	mov	r3, r0
7000d21a:	2b00      	cmp	r3, #0
7000d21c:	d008      	beq.n	7000d230 <pbuf_pool_is_empty+0x44>
7000d21e:	f000 fe7d 	bl	7000df1c <sys_arch_protect>
7000d222:	6078      	str	r0, [r7, #4]
7000d224:	4b04      	ldr	r3, [pc, #16]	@ (7000d238 <pbuf_pool_is_empty+0x4c>)
7000d226:	2200      	movs	r2, #0
7000d228:	701a      	strb	r2, [r3, #0]
7000d22a:	6878      	ldr	r0, [r7, #4]
7000d22c:	f000 fe84 	bl	7000df38 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
7000d230:	bf00      	nop
7000d232:	3708      	adds	r7, #8
7000d234:	46bd      	mov	sp, r7
7000d236:	bd80      	pop	{r7, pc}
7000d238:	24008471 	.word	0x24008471
7000d23c:	7000d1d9 	.word	0x7000d1d9

7000d240 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
7000d240:	b480      	push	{r7}
7000d242:	b085      	sub	sp, #20
7000d244:	af00      	add	r7, sp, #0
7000d246:	60f8      	str	r0, [r7, #12]
7000d248:	60b9      	str	r1, [r7, #8]
7000d24a:	4611      	mov	r1, r2
7000d24c:	461a      	mov	r2, r3
7000d24e:	460b      	mov	r3, r1
7000d250:	80fb      	strh	r3, [r7, #6]
7000d252:	4613      	mov	r3, r2
7000d254:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
7000d256:	68fb      	ldr	r3, [r7, #12]
7000d258:	2200      	movs	r2, #0
7000d25a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
7000d25c:	68fb      	ldr	r3, [r7, #12]
7000d25e:	68ba      	ldr	r2, [r7, #8]
7000d260:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
7000d262:	68fb      	ldr	r3, [r7, #12]
7000d264:	88fa      	ldrh	r2, [r7, #6]
7000d266:	811a      	strh	r2, [r3, #8]
  p->len = len;
7000d268:	68fb      	ldr	r3, [r7, #12]
7000d26a:	88ba      	ldrh	r2, [r7, #4]
7000d26c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
7000d26e:	8b3b      	ldrh	r3, [r7, #24]
7000d270:	b2da      	uxtb	r2, r3
7000d272:	68fb      	ldr	r3, [r7, #12]
7000d274:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
7000d276:	68fb      	ldr	r3, [r7, #12]
7000d278:	7f3a      	ldrb	r2, [r7, #28]
7000d27a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
7000d27c:	68fb      	ldr	r3, [r7, #12]
7000d27e:	2201      	movs	r2, #1
7000d280:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
7000d282:	68fb      	ldr	r3, [r7, #12]
7000d284:	2200      	movs	r2, #0
7000d286:	73da      	strb	r2, [r3, #15]
}
7000d288:	bf00      	nop
7000d28a:	3714      	adds	r7, #20
7000d28c:	46bd      	mov	sp, r7
7000d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
7000d292:	4770      	bx	lr

7000d294 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
7000d294:	b580      	push	{r7, lr}
7000d296:	b08c      	sub	sp, #48	@ 0x30
7000d298:	af02      	add	r7, sp, #8
7000d29a:	4603      	mov	r3, r0
7000d29c:	71fb      	strb	r3, [r7, #7]
7000d29e:	460b      	mov	r3, r1
7000d2a0:	80bb      	strh	r3, [r7, #4]
7000d2a2:	4613      	mov	r3, r2
7000d2a4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
7000d2a6:	79fb      	ldrb	r3, [r7, #7]
7000d2a8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
7000d2aa:	887b      	ldrh	r3, [r7, #2]
7000d2ac:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
7000d2b0:	d07f      	beq.n	7000d3b2 <pbuf_alloc+0x11e>
7000d2b2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
7000d2b6:	f300 80c8 	bgt.w	7000d44a <pbuf_alloc+0x1b6>
7000d2ba:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
7000d2be:	d010      	beq.n	7000d2e2 <pbuf_alloc+0x4e>
7000d2c0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
7000d2c4:	f300 80c1 	bgt.w	7000d44a <pbuf_alloc+0x1b6>
7000d2c8:	2b01      	cmp	r3, #1
7000d2ca:	d002      	beq.n	7000d2d2 <pbuf_alloc+0x3e>
7000d2cc:	2b41      	cmp	r3, #65	@ 0x41
7000d2ce:	f040 80bc 	bne.w	7000d44a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
7000d2d2:	887a      	ldrh	r2, [r7, #2]
7000d2d4:	88bb      	ldrh	r3, [r7, #4]
7000d2d6:	4619      	mov	r1, r3
7000d2d8:	2000      	movs	r0, #0
7000d2da:	f000 f8d1 	bl	7000d480 <pbuf_alloc_reference>
7000d2de:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
7000d2e0:	e0bd      	b.n	7000d45e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
7000d2e2:	2300      	movs	r3, #0
7000d2e4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
7000d2e6:	2300      	movs	r3, #0
7000d2e8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
7000d2ea:	88bb      	ldrh	r3, [r7, #4]
7000d2ec:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
7000d2ee:	200c      	movs	r0, #12
7000d2f0:	f7ff fbfe 	bl	7000caf0 <memp_malloc>
7000d2f4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
7000d2f6:	693b      	ldr	r3, [r7, #16]
7000d2f8:	2b00      	cmp	r3, #0
7000d2fa:	d109      	bne.n	7000d310 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
7000d2fc:	f7ff ff76 	bl	7000d1ec <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
7000d300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000d302:	2b00      	cmp	r3, #0
7000d304:	d002      	beq.n	7000d30c <pbuf_alloc+0x78>
            pbuf_free(p);
7000d306:	6a78      	ldr	r0, [r7, #36]	@ 0x24
7000d308:	f000 fa9e 	bl	7000d848 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
7000d30c:	2300      	movs	r3, #0
7000d30e:	e0a7      	b.n	7000d460 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
7000d310:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000d312:	3303      	adds	r3, #3
7000d314:	b29b      	uxth	r3, r3
7000d316:	f023 0303 	bic.w	r3, r3, #3
7000d31a:	b29b      	uxth	r3, r3
7000d31c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
7000d320:	b29b      	uxth	r3, r3
7000d322:	8b7a      	ldrh	r2, [r7, #26]
7000d324:	4293      	cmp	r3, r2
7000d326:	bf28      	it	cs
7000d328:	4613      	movcs	r3, r2
7000d32a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
7000d32c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000d32e:	3310      	adds	r3, #16
7000d330:	693a      	ldr	r2, [r7, #16]
7000d332:	4413      	add	r3, r2
7000d334:	3303      	adds	r3, #3
7000d336:	f023 0303 	bic.w	r3, r3, #3
7000d33a:	4618      	mov	r0, r3
7000d33c:	89f9      	ldrh	r1, [r7, #14]
7000d33e:	8b7a      	ldrh	r2, [r7, #26]
7000d340:	2300      	movs	r3, #0
7000d342:	9301      	str	r3, [sp, #4]
7000d344:	887b      	ldrh	r3, [r7, #2]
7000d346:	9300      	str	r3, [sp, #0]
7000d348:	460b      	mov	r3, r1
7000d34a:	4601      	mov	r1, r0
7000d34c:	6938      	ldr	r0, [r7, #16]
7000d34e:	f7ff ff77 	bl	7000d240 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
7000d352:	693b      	ldr	r3, [r7, #16]
7000d354:	685b      	ldr	r3, [r3, #4]
7000d356:	f003 0303 	and.w	r3, r3, #3
7000d35a:	2b00      	cmp	r3, #0
7000d35c:	d006      	beq.n	7000d36c <pbuf_alloc+0xd8>
7000d35e:	4b42      	ldr	r3, [pc, #264]	@ (7000d468 <pbuf_alloc+0x1d4>)
7000d360:	f44f 7280 	mov.w	r2, #256	@ 0x100
7000d364:	4941      	ldr	r1, [pc, #260]	@ (7000d46c <pbuf_alloc+0x1d8>)
7000d366:	4842      	ldr	r0, [pc, #264]	@ (7000d470 <pbuf_alloc+0x1dc>)
7000d368:	f006 fcda 	bl	70013d20 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
7000d36c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000d36e:	3303      	adds	r3, #3
7000d370:	f023 0303 	bic.w	r3, r3, #3
7000d374:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
7000d378:	d106      	bne.n	7000d388 <pbuf_alloc+0xf4>
7000d37a:	4b3b      	ldr	r3, [pc, #236]	@ (7000d468 <pbuf_alloc+0x1d4>)
7000d37c:	f44f 7281 	mov.w	r2, #258	@ 0x102
7000d380:	493c      	ldr	r1, [pc, #240]	@ (7000d474 <pbuf_alloc+0x1e0>)
7000d382:	483b      	ldr	r0, [pc, #236]	@ (7000d470 <pbuf_alloc+0x1dc>)
7000d384:	f006 fccc 	bl	70013d20 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
7000d388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000d38a:	2b00      	cmp	r3, #0
7000d38c:	d102      	bne.n	7000d394 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
7000d38e:	693b      	ldr	r3, [r7, #16]
7000d390:	627b      	str	r3, [r7, #36]	@ 0x24
7000d392:	e002      	b.n	7000d39a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
7000d394:	69fb      	ldr	r3, [r7, #28]
7000d396:	693a      	ldr	r2, [r7, #16]
7000d398:	601a      	str	r2, [r3, #0]
        }
        last = q;
7000d39a:	693b      	ldr	r3, [r7, #16]
7000d39c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
7000d39e:	8b7a      	ldrh	r2, [r7, #26]
7000d3a0:	89fb      	ldrh	r3, [r7, #14]
7000d3a2:	1ad3      	subs	r3, r2, r3
7000d3a4:	837b      	strh	r3, [r7, #26]
        offset = 0;
7000d3a6:	2300      	movs	r3, #0
7000d3a8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
7000d3aa:	8b7b      	ldrh	r3, [r7, #26]
7000d3ac:	2b00      	cmp	r3, #0
7000d3ae:	d19e      	bne.n	7000d2ee <pbuf_alloc+0x5a>
      break;
7000d3b0:	e055      	b.n	7000d45e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
7000d3b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000d3b4:	3303      	adds	r3, #3
7000d3b6:	b29b      	uxth	r3, r3
7000d3b8:	f023 0303 	bic.w	r3, r3, #3
7000d3bc:	b29a      	uxth	r2, r3
7000d3be:	88bb      	ldrh	r3, [r7, #4]
7000d3c0:	3303      	adds	r3, #3
7000d3c2:	b29b      	uxth	r3, r3
7000d3c4:	f023 0303 	bic.w	r3, r3, #3
7000d3c8:	b29b      	uxth	r3, r3
7000d3ca:	4413      	add	r3, r2
7000d3cc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
7000d3ce:	8b3b      	ldrh	r3, [r7, #24]
7000d3d0:	3310      	adds	r3, #16
7000d3d2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
7000d3d4:	8b3a      	ldrh	r2, [r7, #24]
7000d3d6:	88bb      	ldrh	r3, [r7, #4]
7000d3d8:	3303      	adds	r3, #3
7000d3da:	f023 0303 	bic.w	r3, r3, #3
7000d3de:	429a      	cmp	r2, r3
7000d3e0:	d306      	bcc.n	7000d3f0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
7000d3e2:	8afa      	ldrh	r2, [r7, #22]
7000d3e4:	88bb      	ldrh	r3, [r7, #4]
7000d3e6:	3303      	adds	r3, #3
7000d3e8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
7000d3ec:	429a      	cmp	r2, r3
7000d3ee:	d201      	bcs.n	7000d3f4 <pbuf_alloc+0x160>
        return NULL;
7000d3f0:	2300      	movs	r3, #0
7000d3f2:	e035      	b.n	7000d460 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
7000d3f4:	8afb      	ldrh	r3, [r7, #22]
7000d3f6:	4618      	mov	r0, r3
7000d3f8:	f7ff f9d6 	bl	7000c7a8 <mem_malloc>
7000d3fc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
7000d3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000d400:	2b00      	cmp	r3, #0
7000d402:	d101      	bne.n	7000d408 <pbuf_alloc+0x174>
        return NULL;
7000d404:	2300      	movs	r3, #0
7000d406:	e02b      	b.n	7000d460 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
7000d408:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7000d40a:	3310      	adds	r3, #16
7000d40c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
7000d40e:	4413      	add	r3, r2
7000d410:	3303      	adds	r3, #3
7000d412:	f023 0303 	bic.w	r3, r3, #3
7000d416:	4618      	mov	r0, r3
7000d418:	88b9      	ldrh	r1, [r7, #4]
7000d41a:	88ba      	ldrh	r2, [r7, #4]
7000d41c:	2300      	movs	r3, #0
7000d41e:	9301      	str	r3, [sp, #4]
7000d420:	887b      	ldrh	r3, [r7, #2]
7000d422:	9300      	str	r3, [sp, #0]
7000d424:	460b      	mov	r3, r1
7000d426:	4601      	mov	r1, r0
7000d428:	6a78      	ldr	r0, [r7, #36]	@ 0x24
7000d42a:	f7ff ff09 	bl	7000d240 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
7000d42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000d430:	685b      	ldr	r3, [r3, #4]
7000d432:	f003 0303 	and.w	r3, r3, #3
7000d436:	2b00      	cmp	r3, #0
7000d438:	d010      	beq.n	7000d45c <pbuf_alloc+0x1c8>
7000d43a:	4b0b      	ldr	r3, [pc, #44]	@ (7000d468 <pbuf_alloc+0x1d4>)
7000d43c:	f44f 7291 	mov.w	r2, #290	@ 0x122
7000d440:	490d      	ldr	r1, [pc, #52]	@ (7000d478 <pbuf_alloc+0x1e4>)
7000d442:	480b      	ldr	r0, [pc, #44]	@ (7000d470 <pbuf_alloc+0x1dc>)
7000d444:	f006 fc6c 	bl	70013d20 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
7000d448:	e008      	b.n	7000d45c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
7000d44a:	4b07      	ldr	r3, [pc, #28]	@ (7000d468 <pbuf_alloc+0x1d4>)
7000d44c:	f240 1227 	movw	r2, #295	@ 0x127
7000d450:	490a      	ldr	r1, [pc, #40]	@ (7000d47c <pbuf_alloc+0x1e8>)
7000d452:	4807      	ldr	r0, [pc, #28]	@ (7000d470 <pbuf_alloc+0x1dc>)
7000d454:	f006 fc64 	bl	70013d20 <iprintf>
      return NULL;
7000d458:	2300      	movs	r3, #0
7000d45a:	e001      	b.n	7000d460 <pbuf_alloc+0x1cc>
      break;
7000d45c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
7000d45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
7000d460:	4618      	mov	r0, r3
7000d462:	3728      	adds	r7, #40	@ 0x28
7000d464:	46bd      	mov	sp, r7
7000d466:	bd80      	pop	{r7, pc}
7000d468:	700158d8 	.word	0x700158d8
7000d46c:	70015938 	.word	0x70015938
7000d470:	70015968 	.word	0x70015968
7000d474:	70015990 	.word	0x70015990
7000d478:	700159c4 	.word	0x700159c4
7000d47c:	700159f0 	.word	0x700159f0

7000d480 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
7000d480:	b580      	push	{r7, lr}
7000d482:	b086      	sub	sp, #24
7000d484:	af02      	add	r7, sp, #8
7000d486:	6078      	str	r0, [r7, #4]
7000d488:	460b      	mov	r3, r1
7000d48a:	807b      	strh	r3, [r7, #2]
7000d48c:	4613      	mov	r3, r2
7000d48e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
7000d490:	883b      	ldrh	r3, [r7, #0]
7000d492:	2b41      	cmp	r3, #65	@ 0x41
7000d494:	d009      	beq.n	7000d4aa <pbuf_alloc_reference+0x2a>
7000d496:	883b      	ldrh	r3, [r7, #0]
7000d498:	2b01      	cmp	r3, #1
7000d49a:	d006      	beq.n	7000d4aa <pbuf_alloc_reference+0x2a>
7000d49c:	4b0f      	ldr	r3, [pc, #60]	@ (7000d4dc <pbuf_alloc_reference+0x5c>)
7000d49e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
7000d4a2:	490f      	ldr	r1, [pc, #60]	@ (7000d4e0 <pbuf_alloc_reference+0x60>)
7000d4a4:	480f      	ldr	r0, [pc, #60]	@ (7000d4e4 <pbuf_alloc_reference+0x64>)
7000d4a6:	f006 fc3b 	bl	70013d20 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
7000d4aa:	200b      	movs	r0, #11
7000d4ac:	f7ff fb20 	bl	7000caf0 <memp_malloc>
7000d4b0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
7000d4b2:	68fb      	ldr	r3, [r7, #12]
7000d4b4:	2b00      	cmp	r3, #0
7000d4b6:	d101      	bne.n	7000d4bc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
7000d4b8:	2300      	movs	r3, #0
7000d4ba:	e00b      	b.n	7000d4d4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
7000d4bc:	8879      	ldrh	r1, [r7, #2]
7000d4be:	887a      	ldrh	r2, [r7, #2]
7000d4c0:	2300      	movs	r3, #0
7000d4c2:	9301      	str	r3, [sp, #4]
7000d4c4:	883b      	ldrh	r3, [r7, #0]
7000d4c6:	9300      	str	r3, [sp, #0]
7000d4c8:	460b      	mov	r3, r1
7000d4ca:	6879      	ldr	r1, [r7, #4]
7000d4cc:	68f8      	ldr	r0, [r7, #12]
7000d4ce:	f7ff feb7 	bl	7000d240 <pbuf_init_alloced_pbuf>
  return p;
7000d4d2:	68fb      	ldr	r3, [r7, #12]
}
7000d4d4:	4618      	mov	r0, r3
7000d4d6:	3710      	adds	r7, #16
7000d4d8:	46bd      	mov	sp, r7
7000d4da:	bd80      	pop	{r7, pc}
7000d4dc:	700158d8 	.word	0x700158d8
7000d4e0:	70015a0c 	.word	0x70015a0c
7000d4e4:	70015968 	.word	0x70015968

7000d4e8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
7000d4e8:	b580      	push	{r7, lr}
7000d4ea:	b088      	sub	sp, #32
7000d4ec:	af02      	add	r7, sp, #8
7000d4ee:	607b      	str	r3, [r7, #4]
7000d4f0:	4603      	mov	r3, r0
7000d4f2:	73fb      	strb	r3, [r7, #15]
7000d4f4:	460b      	mov	r3, r1
7000d4f6:	81bb      	strh	r3, [r7, #12]
7000d4f8:	4613      	mov	r3, r2
7000d4fa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
7000d4fc:	7bfb      	ldrb	r3, [r7, #15]
7000d4fe:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
7000d500:	8a7b      	ldrh	r3, [r7, #18]
7000d502:	3303      	adds	r3, #3
7000d504:	f023 0203 	bic.w	r2, r3, #3
7000d508:	89bb      	ldrh	r3, [r7, #12]
7000d50a:	441a      	add	r2, r3
7000d50c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
7000d50e:	429a      	cmp	r2, r3
7000d510:	d901      	bls.n	7000d516 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
7000d512:	2300      	movs	r3, #0
7000d514:	e018      	b.n	7000d548 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
7000d516:	6a3b      	ldr	r3, [r7, #32]
7000d518:	2b00      	cmp	r3, #0
7000d51a:	d007      	beq.n	7000d52c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
7000d51c:	8a7b      	ldrh	r3, [r7, #18]
7000d51e:	3303      	adds	r3, #3
7000d520:	f023 0303 	bic.w	r3, r3, #3
7000d524:	6a3a      	ldr	r2, [r7, #32]
7000d526:	4413      	add	r3, r2
7000d528:	617b      	str	r3, [r7, #20]
7000d52a:	e001      	b.n	7000d530 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
7000d52c:	2300      	movs	r3, #0
7000d52e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
7000d530:	6878      	ldr	r0, [r7, #4]
7000d532:	89b9      	ldrh	r1, [r7, #12]
7000d534:	89ba      	ldrh	r2, [r7, #12]
7000d536:	2302      	movs	r3, #2
7000d538:	9301      	str	r3, [sp, #4]
7000d53a:	897b      	ldrh	r3, [r7, #10]
7000d53c:	9300      	str	r3, [sp, #0]
7000d53e:	460b      	mov	r3, r1
7000d540:	6979      	ldr	r1, [r7, #20]
7000d542:	f7ff fe7d 	bl	7000d240 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
7000d546:	687b      	ldr	r3, [r7, #4]
}
7000d548:	4618      	mov	r0, r3
7000d54a:	3718      	adds	r7, #24
7000d54c:	46bd      	mov	sp, r7
7000d54e:	bd80      	pop	{r7, pc}

7000d550 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
7000d550:	b580      	push	{r7, lr}
7000d552:	b084      	sub	sp, #16
7000d554:	af00      	add	r7, sp, #0
7000d556:	6078      	str	r0, [r7, #4]
7000d558:	460b      	mov	r3, r1
7000d55a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
7000d55c:	687b      	ldr	r3, [r7, #4]
7000d55e:	2b00      	cmp	r3, #0
7000d560:	d106      	bne.n	7000d570 <pbuf_realloc+0x20>
7000d562:	4b3a      	ldr	r3, [pc, #232]	@ (7000d64c <pbuf_realloc+0xfc>)
7000d564:	f44f 72cc 	mov.w	r2, #408	@ 0x198
7000d568:	4939      	ldr	r1, [pc, #228]	@ (7000d650 <pbuf_realloc+0x100>)
7000d56a:	483a      	ldr	r0, [pc, #232]	@ (7000d654 <pbuf_realloc+0x104>)
7000d56c:	f006 fbd8 	bl	70013d20 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
7000d570:	687b      	ldr	r3, [r7, #4]
7000d572:	891b      	ldrh	r3, [r3, #8]
7000d574:	887a      	ldrh	r2, [r7, #2]
7000d576:	429a      	cmp	r2, r3
7000d578:	d263      	bcs.n	7000d642 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
7000d57a:	687b      	ldr	r3, [r7, #4]
7000d57c:	891a      	ldrh	r2, [r3, #8]
7000d57e:	887b      	ldrh	r3, [r7, #2]
7000d580:	1ad3      	subs	r3, r2, r3
7000d582:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
7000d584:	887b      	ldrh	r3, [r7, #2]
7000d586:	817b      	strh	r3, [r7, #10]
  q = p;
7000d588:	687b      	ldr	r3, [r7, #4]
7000d58a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
7000d58c:	e018      	b.n	7000d5c0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
7000d58e:	68fb      	ldr	r3, [r7, #12]
7000d590:	895b      	ldrh	r3, [r3, #10]
7000d592:	897a      	ldrh	r2, [r7, #10]
7000d594:	1ad3      	subs	r3, r2, r3
7000d596:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
7000d598:	68fb      	ldr	r3, [r7, #12]
7000d59a:	891a      	ldrh	r2, [r3, #8]
7000d59c:	893b      	ldrh	r3, [r7, #8]
7000d59e:	1ad3      	subs	r3, r2, r3
7000d5a0:	b29a      	uxth	r2, r3
7000d5a2:	68fb      	ldr	r3, [r7, #12]
7000d5a4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
7000d5a6:	68fb      	ldr	r3, [r7, #12]
7000d5a8:	681b      	ldr	r3, [r3, #0]
7000d5aa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
7000d5ac:	68fb      	ldr	r3, [r7, #12]
7000d5ae:	2b00      	cmp	r3, #0
7000d5b0:	d106      	bne.n	7000d5c0 <pbuf_realloc+0x70>
7000d5b2:	4b26      	ldr	r3, [pc, #152]	@ (7000d64c <pbuf_realloc+0xfc>)
7000d5b4:	f240 12af 	movw	r2, #431	@ 0x1af
7000d5b8:	4927      	ldr	r1, [pc, #156]	@ (7000d658 <pbuf_realloc+0x108>)
7000d5ba:	4826      	ldr	r0, [pc, #152]	@ (7000d654 <pbuf_realloc+0x104>)
7000d5bc:	f006 fbb0 	bl	70013d20 <iprintf>
  while (rem_len > q->len) {
7000d5c0:	68fb      	ldr	r3, [r7, #12]
7000d5c2:	895b      	ldrh	r3, [r3, #10]
7000d5c4:	897a      	ldrh	r2, [r7, #10]
7000d5c6:	429a      	cmp	r2, r3
7000d5c8:	d8e1      	bhi.n	7000d58e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
7000d5ca:	68fb      	ldr	r3, [r7, #12]
7000d5cc:	7b1b      	ldrb	r3, [r3, #12]
7000d5ce:	f003 030f 	and.w	r3, r3, #15
7000d5d2:	2b00      	cmp	r3, #0
7000d5d4:	d121      	bne.n	7000d61a <pbuf_realloc+0xca>
7000d5d6:	68fb      	ldr	r3, [r7, #12]
7000d5d8:	895b      	ldrh	r3, [r3, #10]
7000d5da:	897a      	ldrh	r2, [r7, #10]
7000d5dc:	429a      	cmp	r2, r3
7000d5de:	d01c      	beq.n	7000d61a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
7000d5e0:	68fb      	ldr	r3, [r7, #12]
7000d5e2:	7b5b      	ldrb	r3, [r3, #13]
7000d5e4:	f003 0302 	and.w	r3, r3, #2
7000d5e8:	2b00      	cmp	r3, #0
7000d5ea:	d116      	bne.n	7000d61a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
7000d5ec:	68fb      	ldr	r3, [r7, #12]
7000d5ee:	685a      	ldr	r2, [r3, #4]
7000d5f0:	68fb      	ldr	r3, [r7, #12]
7000d5f2:	1ad3      	subs	r3, r2, r3
7000d5f4:	b29a      	uxth	r2, r3
7000d5f6:	897b      	ldrh	r3, [r7, #10]
7000d5f8:	4413      	add	r3, r2
7000d5fa:	b29b      	uxth	r3, r3
7000d5fc:	4619      	mov	r1, r3
7000d5fe:	68f8      	ldr	r0, [r7, #12]
7000d600:	f7fe ffc8 	bl	7000c594 <mem_trim>
7000d604:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
7000d606:	68fb      	ldr	r3, [r7, #12]
7000d608:	2b00      	cmp	r3, #0
7000d60a:	d106      	bne.n	7000d61a <pbuf_realloc+0xca>
7000d60c:	4b0f      	ldr	r3, [pc, #60]	@ (7000d64c <pbuf_realloc+0xfc>)
7000d60e:	f240 12bd 	movw	r2, #445	@ 0x1bd
7000d612:	4912      	ldr	r1, [pc, #72]	@ (7000d65c <pbuf_realloc+0x10c>)
7000d614:	480f      	ldr	r0, [pc, #60]	@ (7000d654 <pbuf_realloc+0x104>)
7000d616:	f006 fb83 	bl	70013d20 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
7000d61a:	68fb      	ldr	r3, [r7, #12]
7000d61c:	897a      	ldrh	r2, [r7, #10]
7000d61e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
7000d620:	68fb      	ldr	r3, [r7, #12]
7000d622:	895a      	ldrh	r2, [r3, #10]
7000d624:	68fb      	ldr	r3, [r7, #12]
7000d626:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
7000d628:	68fb      	ldr	r3, [r7, #12]
7000d62a:	681b      	ldr	r3, [r3, #0]
7000d62c:	2b00      	cmp	r3, #0
7000d62e:	d004      	beq.n	7000d63a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
7000d630:	68fb      	ldr	r3, [r7, #12]
7000d632:	681b      	ldr	r3, [r3, #0]
7000d634:	4618      	mov	r0, r3
7000d636:	f000 f907 	bl	7000d848 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
7000d63a:	68fb      	ldr	r3, [r7, #12]
7000d63c:	2200      	movs	r2, #0
7000d63e:	601a      	str	r2, [r3, #0]
7000d640:	e000      	b.n	7000d644 <pbuf_realloc+0xf4>
    return;
7000d642:	bf00      	nop

}
7000d644:	3710      	adds	r7, #16
7000d646:	46bd      	mov	sp, r7
7000d648:	bd80      	pop	{r7, pc}
7000d64a:	bf00      	nop
7000d64c:	700158d8 	.word	0x700158d8
7000d650:	70015a20 	.word	0x70015a20
7000d654:	70015968 	.word	0x70015968
7000d658:	70015a38 	.word	0x70015a38
7000d65c:	70015a50 	.word	0x70015a50

7000d660 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
7000d660:	b580      	push	{r7, lr}
7000d662:	b086      	sub	sp, #24
7000d664:	af00      	add	r7, sp, #0
7000d666:	60f8      	str	r0, [r7, #12]
7000d668:	60b9      	str	r1, [r7, #8]
7000d66a:	4613      	mov	r3, r2
7000d66c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
7000d66e:	68fb      	ldr	r3, [r7, #12]
7000d670:	2b00      	cmp	r3, #0
7000d672:	d106      	bne.n	7000d682 <pbuf_add_header_impl+0x22>
7000d674:	4b2b      	ldr	r3, [pc, #172]	@ (7000d724 <pbuf_add_header_impl+0xc4>)
7000d676:	f240 12df 	movw	r2, #479	@ 0x1df
7000d67a:	492b      	ldr	r1, [pc, #172]	@ (7000d728 <pbuf_add_header_impl+0xc8>)
7000d67c:	482b      	ldr	r0, [pc, #172]	@ (7000d72c <pbuf_add_header_impl+0xcc>)
7000d67e:	f006 fb4f 	bl	70013d20 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
7000d682:	68fb      	ldr	r3, [r7, #12]
7000d684:	2b00      	cmp	r3, #0
7000d686:	d003      	beq.n	7000d690 <pbuf_add_header_impl+0x30>
7000d688:	68bb      	ldr	r3, [r7, #8]
7000d68a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
7000d68e:	d301      	bcc.n	7000d694 <pbuf_add_header_impl+0x34>
    return 1;
7000d690:	2301      	movs	r3, #1
7000d692:	e043      	b.n	7000d71c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
7000d694:	68bb      	ldr	r3, [r7, #8]
7000d696:	2b00      	cmp	r3, #0
7000d698:	d101      	bne.n	7000d69e <pbuf_add_header_impl+0x3e>
    return 0;
7000d69a:	2300      	movs	r3, #0
7000d69c:	e03e      	b.n	7000d71c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
7000d69e:	68bb      	ldr	r3, [r7, #8]
7000d6a0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
7000d6a2:	68fb      	ldr	r3, [r7, #12]
7000d6a4:	891a      	ldrh	r2, [r3, #8]
7000d6a6:	8a7b      	ldrh	r3, [r7, #18]
7000d6a8:	4413      	add	r3, r2
7000d6aa:	b29b      	uxth	r3, r3
7000d6ac:	8a7a      	ldrh	r2, [r7, #18]
7000d6ae:	429a      	cmp	r2, r3
7000d6b0:	d901      	bls.n	7000d6b6 <pbuf_add_header_impl+0x56>
    return 1;
7000d6b2:	2301      	movs	r3, #1
7000d6b4:	e032      	b.n	7000d71c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
7000d6b6:	68fb      	ldr	r3, [r7, #12]
7000d6b8:	7b1b      	ldrb	r3, [r3, #12]
7000d6ba:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
7000d6bc:	8a3b      	ldrh	r3, [r7, #16]
7000d6be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
7000d6c2:	2b00      	cmp	r3, #0
7000d6c4:	d00c      	beq.n	7000d6e0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
7000d6c6:	68fb      	ldr	r3, [r7, #12]
7000d6c8:	685a      	ldr	r2, [r3, #4]
7000d6ca:	68bb      	ldr	r3, [r7, #8]
7000d6cc:	425b      	negs	r3, r3
7000d6ce:	4413      	add	r3, r2
7000d6d0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
7000d6d2:	68fb      	ldr	r3, [r7, #12]
7000d6d4:	3310      	adds	r3, #16
7000d6d6:	697a      	ldr	r2, [r7, #20]
7000d6d8:	429a      	cmp	r2, r3
7000d6da:	d20d      	bcs.n	7000d6f8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
7000d6dc:	2301      	movs	r3, #1
7000d6de:	e01d      	b.n	7000d71c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
7000d6e0:	79fb      	ldrb	r3, [r7, #7]
7000d6e2:	2b00      	cmp	r3, #0
7000d6e4:	d006      	beq.n	7000d6f4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
7000d6e6:	68fb      	ldr	r3, [r7, #12]
7000d6e8:	685a      	ldr	r2, [r3, #4]
7000d6ea:	68bb      	ldr	r3, [r7, #8]
7000d6ec:	425b      	negs	r3, r3
7000d6ee:	4413      	add	r3, r2
7000d6f0:	617b      	str	r3, [r7, #20]
7000d6f2:	e001      	b.n	7000d6f8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
7000d6f4:	2301      	movs	r3, #1
7000d6f6:	e011      	b.n	7000d71c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
7000d6f8:	68fb      	ldr	r3, [r7, #12]
7000d6fa:	697a      	ldr	r2, [r7, #20]
7000d6fc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
7000d6fe:	68fb      	ldr	r3, [r7, #12]
7000d700:	895a      	ldrh	r2, [r3, #10]
7000d702:	8a7b      	ldrh	r3, [r7, #18]
7000d704:	4413      	add	r3, r2
7000d706:	b29a      	uxth	r2, r3
7000d708:	68fb      	ldr	r3, [r7, #12]
7000d70a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
7000d70c:	68fb      	ldr	r3, [r7, #12]
7000d70e:	891a      	ldrh	r2, [r3, #8]
7000d710:	8a7b      	ldrh	r3, [r7, #18]
7000d712:	4413      	add	r3, r2
7000d714:	b29a      	uxth	r2, r3
7000d716:	68fb      	ldr	r3, [r7, #12]
7000d718:	811a      	strh	r2, [r3, #8]


  return 0;
7000d71a:	2300      	movs	r3, #0
}
7000d71c:	4618      	mov	r0, r3
7000d71e:	3718      	adds	r7, #24
7000d720:	46bd      	mov	sp, r7
7000d722:	bd80      	pop	{r7, pc}
7000d724:	700158d8 	.word	0x700158d8
7000d728:	70015a6c 	.word	0x70015a6c
7000d72c:	70015968 	.word	0x70015968

7000d730 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
7000d730:	b580      	push	{r7, lr}
7000d732:	b082      	sub	sp, #8
7000d734:	af00      	add	r7, sp, #0
7000d736:	6078      	str	r0, [r7, #4]
7000d738:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
7000d73a:	2200      	movs	r2, #0
7000d73c:	6839      	ldr	r1, [r7, #0]
7000d73e:	6878      	ldr	r0, [r7, #4]
7000d740:	f7ff ff8e 	bl	7000d660 <pbuf_add_header_impl>
7000d744:	4603      	mov	r3, r0
}
7000d746:	4618      	mov	r0, r3
7000d748:	3708      	adds	r7, #8
7000d74a:	46bd      	mov	sp, r7
7000d74c:	bd80      	pop	{r7, pc}
	...

7000d750 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
7000d750:	b580      	push	{r7, lr}
7000d752:	b084      	sub	sp, #16
7000d754:	af00      	add	r7, sp, #0
7000d756:	6078      	str	r0, [r7, #4]
7000d758:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
7000d75a:	687b      	ldr	r3, [r7, #4]
7000d75c:	2b00      	cmp	r3, #0
7000d75e:	d106      	bne.n	7000d76e <pbuf_remove_header+0x1e>
7000d760:	4b1c      	ldr	r3, [pc, #112]	@ (7000d7d4 <pbuf_remove_header+0x84>)
7000d762:	f240 224b 	movw	r2, #587	@ 0x24b
7000d766:	491c      	ldr	r1, [pc, #112]	@ (7000d7d8 <pbuf_remove_header+0x88>)
7000d768:	481c      	ldr	r0, [pc, #112]	@ (7000d7dc <pbuf_remove_header+0x8c>)
7000d76a:	f006 fad9 	bl	70013d20 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
7000d76e:	687b      	ldr	r3, [r7, #4]
7000d770:	2b00      	cmp	r3, #0
7000d772:	d003      	beq.n	7000d77c <pbuf_remove_header+0x2c>
7000d774:	683b      	ldr	r3, [r7, #0]
7000d776:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
7000d77a:	d301      	bcc.n	7000d780 <pbuf_remove_header+0x30>
    return 1;
7000d77c:	2301      	movs	r3, #1
7000d77e:	e025      	b.n	7000d7cc <pbuf_remove_header+0x7c>
  }
  if (header_size_decrement == 0) {
7000d780:	683b      	ldr	r3, [r7, #0]
7000d782:	2b00      	cmp	r3, #0
7000d784:	d101      	bne.n	7000d78a <pbuf_remove_header+0x3a>
    return 0;
7000d786:	2300      	movs	r3, #0
7000d788:	e020      	b.n	7000d7cc <pbuf_remove_header+0x7c>
  }

  increment_magnitude = (u16_t)header_size_decrement;
7000d78a:	683b      	ldr	r3, [r7, #0]
7000d78c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
7000d78e:	687b      	ldr	r3, [r7, #4]
7000d790:	895b      	ldrh	r3, [r3, #10]
7000d792:	89fa      	ldrh	r2, [r7, #14]
7000d794:	429a      	cmp	r2, r3
7000d796:	d901      	bls.n	7000d79c <pbuf_remove_header+0x4c>
7000d798:	2301      	movs	r3, #1
7000d79a:	e017      	b.n	7000d7cc <pbuf_remove_header+0x7c>

  /* remember current payload pointer */
  payload = p->payload;
7000d79c:	687b      	ldr	r3, [r7, #4]
7000d79e:	685b      	ldr	r3, [r3, #4]
7000d7a0:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
7000d7a2:	687b      	ldr	r3, [r7, #4]
7000d7a4:	685a      	ldr	r2, [r3, #4]
7000d7a6:	683b      	ldr	r3, [r7, #0]
7000d7a8:	441a      	add	r2, r3
7000d7aa:	687b      	ldr	r3, [r7, #4]
7000d7ac:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
7000d7ae:	687b      	ldr	r3, [r7, #4]
7000d7b0:	895a      	ldrh	r2, [r3, #10]
7000d7b2:	89fb      	ldrh	r3, [r7, #14]
7000d7b4:	1ad3      	subs	r3, r2, r3
7000d7b6:	b29a      	uxth	r2, r3
7000d7b8:	687b      	ldr	r3, [r7, #4]
7000d7ba:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
7000d7bc:	687b      	ldr	r3, [r7, #4]
7000d7be:	891a      	ldrh	r2, [r3, #8]
7000d7c0:	89fb      	ldrh	r3, [r7, #14]
7000d7c2:	1ad3      	subs	r3, r2, r3
7000d7c4:	b29a      	uxth	r2, r3
7000d7c6:	687b      	ldr	r3, [r7, #4]
7000d7c8:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
7000d7ca:	2300      	movs	r3, #0
}
7000d7cc:	4618      	mov	r0, r3
7000d7ce:	3710      	adds	r7, #16
7000d7d0:	46bd      	mov	sp, r7
7000d7d2:	bd80      	pop	{r7, pc}
7000d7d4:	700158d8 	.word	0x700158d8
7000d7d8:	70015a6c 	.word	0x70015a6c
7000d7dc:	70015968 	.word	0x70015968

7000d7e0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
7000d7e0:	b580      	push	{r7, lr}
7000d7e2:	b082      	sub	sp, #8
7000d7e4:	af00      	add	r7, sp, #0
7000d7e6:	6078      	str	r0, [r7, #4]
7000d7e8:	460b      	mov	r3, r1
7000d7ea:	807b      	strh	r3, [r7, #2]
7000d7ec:	4613      	mov	r3, r2
7000d7ee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
7000d7f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
7000d7f4:	2b00      	cmp	r3, #0
7000d7f6:	da08      	bge.n	7000d80a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
7000d7f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
7000d7fc:	425b      	negs	r3, r3
7000d7fe:	4619      	mov	r1, r3
7000d800:	6878      	ldr	r0, [r7, #4]
7000d802:	f7ff ffa5 	bl	7000d750 <pbuf_remove_header>
7000d806:	4603      	mov	r3, r0
7000d808:	e007      	b.n	7000d81a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
7000d80a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
7000d80e:	787a      	ldrb	r2, [r7, #1]
7000d810:	4619      	mov	r1, r3
7000d812:	6878      	ldr	r0, [r7, #4]
7000d814:	f7ff ff24 	bl	7000d660 <pbuf_add_header_impl>
7000d818:	4603      	mov	r3, r0
  }
}
7000d81a:	4618      	mov	r0, r3
7000d81c:	3708      	adds	r7, #8
7000d81e:	46bd      	mov	sp, r7
7000d820:	bd80      	pop	{r7, pc}

7000d822 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
7000d822:	b580      	push	{r7, lr}
7000d824:	b082      	sub	sp, #8
7000d826:	af00      	add	r7, sp, #0
7000d828:	6078      	str	r0, [r7, #4]
7000d82a:	460b      	mov	r3, r1
7000d82c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
7000d82e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
7000d832:	2201      	movs	r2, #1
7000d834:	4619      	mov	r1, r3
7000d836:	6878      	ldr	r0, [r7, #4]
7000d838:	f7ff ffd2 	bl	7000d7e0 <pbuf_header_impl>
7000d83c:	4603      	mov	r3, r0
}
7000d83e:	4618      	mov	r0, r3
7000d840:	3708      	adds	r7, #8
7000d842:	46bd      	mov	sp, r7
7000d844:	bd80      	pop	{r7, pc}
	...

7000d848 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
7000d848:	b580      	push	{r7, lr}
7000d84a:	b088      	sub	sp, #32
7000d84c:	af00      	add	r7, sp, #0
7000d84e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
7000d850:	687b      	ldr	r3, [r7, #4]
7000d852:	2b00      	cmp	r3, #0
7000d854:	d10b      	bne.n	7000d86e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
7000d856:	687b      	ldr	r3, [r7, #4]
7000d858:	2b00      	cmp	r3, #0
7000d85a:	d106      	bne.n	7000d86a <pbuf_free+0x22>
7000d85c:	4b3b      	ldr	r3, [pc, #236]	@ (7000d94c <pbuf_free+0x104>)
7000d85e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
7000d862:	493b      	ldr	r1, [pc, #236]	@ (7000d950 <pbuf_free+0x108>)
7000d864:	483b      	ldr	r0, [pc, #236]	@ (7000d954 <pbuf_free+0x10c>)
7000d866:	f006 fa5b 	bl	70013d20 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
7000d86a:	2300      	movs	r3, #0
7000d86c:	e069      	b.n	7000d942 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
7000d86e:	2300      	movs	r3, #0
7000d870:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
7000d872:	e062      	b.n	7000d93a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
7000d874:	f000 fb52 	bl	7000df1c <sys_arch_protect>
7000d878:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
7000d87a:	687b      	ldr	r3, [r7, #4]
7000d87c:	7b9b      	ldrb	r3, [r3, #14]
7000d87e:	2b00      	cmp	r3, #0
7000d880:	d106      	bne.n	7000d890 <pbuf_free+0x48>
7000d882:	4b32      	ldr	r3, [pc, #200]	@ (7000d94c <pbuf_free+0x104>)
7000d884:	f240 22f1 	movw	r2, #753	@ 0x2f1
7000d888:	4933      	ldr	r1, [pc, #204]	@ (7000d958 <pbuf_free+0x110>)
7000d88a:	4832      	ldr	r0, [pc, #200]	@ (7000d954 <pbuf_free+0x10c>)
7000d88c:	f006 fa48 	bl	70013d20 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
7000d890:	687b      	ldr	r3, [r7, #4]
7000d892:	7b9b      	ldrb	r3, [r3, #14]
7000d894:	3b01      	subs	r3, #1
7000d896:	b2da      	uxtb	r2, r3
7000d898:	687b      	ldr	r3, [r7, #4]
7000d89a:	739a      	strb	r2, [r3, #14]
7000d89c:	687b      	ldr	r3, [r7, #4]
7000d89e:	7b9b      	ldrb	r3, [r3, #14]
7000d8a0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
7000d8a2:	69b8      	ldr	r0, [r7, #24]
7000d8a4:	f000 fb48 	bl	7000df38 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
7000d8a8:	7dfb      	ldrb	r3, [r7, #23]
7000d8aa:	2b00      	cmp	r3, #0
7000d8ac:	d143      	bne.n	7000d936 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
7000d8ae:	687b      	ldr	r3, [r7, #4]
7000d8b0:	681b      	ldr	r3, [r3, #0]
7000d8b2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
7000d8b4:	687b      	ldr	r3, [r7, #4]
7000d8b6:	7b1b      	ldrb	r3, [r3, #12]
7000d8b8:	f003 030f 	and.w	r3, r3, #15
7000d8bc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
7000d8be:	687b      	ldr	r3, [r7, #4]
7000d8c0:	7b5b      	ldrb	r3, [r3, #13]
7000d8c2:	f003 0302 	and.w	r3, r3, #2
7000d8c6:	2b00      	cmp	r3, #0
7000d8c8:	d011      	beq.n	7000d8ee <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
7000d8ca:	687b      	ldr	r3, [r7, #4]
7000d8cc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
7000d8ce:	68bb      	ldr	r3, [r7, #8]
7000d8d0:	691b      	ldr	r3, [r3, #16]
7000d8d2:	2b00      	cmp	r3, #0
7000d8d4:	d106      	bne.n	7000d8e4 <pbuf_free+0x9c>
7000d8d6:	4b1d      	ldr	r3, [pc, #116]	@ (7000d94c <pbuf_free+0x104>)
7000d8d8:	f240 22ff 	movw	r2, #767	@ 0x2ff
7000d8dc:	491f      	ldr	r1, [pc, #124]	@ (7000d95c <pbuf_free+0x114>)
7000d8de:	481d      	ldr	r0, [pc, #116]	@ (7000d954 <pbuf_free+0x10c>)
7000d8e0:	f006 fa1e 	bl	70013d20 <iprintf>
        pc->custom_free_function(p);
7000d8e4:	68bb      	ldr	r3, [r7, #8]
7000d8e6:	691b      	ldr	r3, [r3, #16]
7000d8e8:	6878      	ldr	r0, [r7, #4]
7000d8ea:	4798      	blx	r3
7000d8ec:	e01d      	b.n	7000d92a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
7000d8ee:	7bfb      	ldrb	r3, [r7, #15]
7000d8f0:	2b02      	cmp	r3, #2
7000d8f2:	d104      	bne.n	7000d8fe <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
7000d8f4:	6879      	ldr	r1, [r7, #4]
7000d8f6:	200c      	movs	r0, #12
7000d8f8:	f7ff f964 	bl	7000cbc4 <memp_free>
7000d8fc:	e015      	b.n	7000d92a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
7000d8fe:	7bfb      	ldrb	r3, [r7, #15]
7000d900:	2b01      	cmp	r3, #1
7000d902:	d104      	bne.n	7000d90e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
7000d904:	6879      	ldr	r1, [r7, #4]
7000d906:	200b      	movs	r0, #11
7000d908:	f7ff f95c 	bl	7000cbc4 <memp_free>
7000d90c:	e00d      	b.n	7000d92a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
7000d90e:	7bfb      	ldrb	r3, [r7, #15]
7000d910:	2b00      	cmp	r3, #0
7000d912:	d103      	bne.n	7000d91c <pbuf_free+0xd4>
          mem_free(p);
7000d914:	6878      	ldr	r0, [r7, #4]
7000d916:	f7fe fdad 	bl	7000c474 <mem_free>
7000d91a:	e006      	b.n	7000d92a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
7000d91c:	4b0b      	ldr	r3, [pc, #44]	@ (7000d94c <pbuf_free+0x104>)
7000d91e:	f240 320f 	movw	r2, #783	@ 0x30f
7000d922:	490f      	ldr	r1, [pc, #60]	@ (7000d960 <pbuf_free+0x118>)
7000d924:	480b      	ldr	r0, [pc, #44]	@ (7000d954 <pbuf_free+0x10c>)
7000d926:	f006 f9fb 	bl	70013d20 <iprintf>
        }
      }
      count++;
7000d92a:	7ffb      	ldrb	r3, [r7, #31]
7000d92c:	3301      	adds	r3, #1
7000d92e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
7000d930:	693b      	ldr	r3, [r7, #16]
7000d932:	607b      	str	r3, [r7, #4]
7000d934:	e001      	b.n	7000d93a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
7000d936:	2300      	movs	r3, #0
7000d938:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
7000d93a:	687b      	ldr	r3, [r7, #4]
7000d93c:	2b00      	cmp	r3, #0
7000d93e:	d199      	bne.n	7000d874 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
7000d940:	7ffb      	ldrb	r3, [r7, #31]
}
7000d942:	4618      	mov	r0, r3
7000d944:	3720      	adds	r7, #32
7000d946:	46bd      	mov	sp, r7
7000d948:	bd80      	pop	{r7, pc}
7000d94a:	bf00      	nop
7000d94c:	700158d8 	.word	0x700158d8
7000d950:	70015a6c 	.word	0x70015a6c
7000d954:	70015968 	.word	0x70015968
7000d958:	70015a78 	.word	0x70015a78
7000d95c:	70015a90 	.word	0x70015a90
7000d960:	70015ab4 	.word	0x70015ab4

7000d964 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
7000d964:	b480      	push	{r7}
7000d966:	b085      	sub	sp, #20
7000d968:	af00      	add	r7, sp, #0
7000d96a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
7000d96c:	2300      	movs	r3, #0
7000d96e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
7000d970:	e005      	b.n	7000d97e <pbuf_clen+0x1a>
    ++len;
7000d972:	89fb      	ldrh	r3, [r7, #14]
7000d974:	3301      	adds	r3, #1
7000d976:	81fb      	strh	r3, [r7, #14]
    p = p->next;
7000d978:	687b      	ldr	r3, [r7, #4]
7000d97a:	681b      	ldr	r3, [r3, #0]
7000d97c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
7000d97e:	687b      	ldr	r3, [r7, #4]
7000d980:	2b00      	cmp	r3, #0
7000d982:	d1f6      	bne.n	7000d972 <pbuf_clen+0xe>
  }
  return len;
7000d984:	89fb      	ldrh	r3, [r7, #14]
}
7000d986:	4618      	mov	r0, r3
7000d988:	3714      	adds	r7, #20
7000d98a:	46bd      	mov	sp, r7
7000d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
7000d990:	4770      	bx	lr
	...

7000d994 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
7000d994:	b580      	push	{r7, lr}
7000d996:	b084      	sub	sp, #16
7000d998:	af00      	add	r7, sp, #0
7000d99a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
7000d99c:	687b      	ldr	r3, [r7, #4]
7000d99e:	2b00      	cmp	r3, #0
7000d9a0:	d016      	beq.n	7000d9d0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
7000d9a2:	f000 fabb 	bl	7000df1c <sys_arch_protect>
7000d9a6:	60f8      	str	r0, [r7, #12]
7000d9a8:	687b      	ldr	r3, [r7, #4]
7000d9aa:	7b9b      	ldrb	r3, [r3, #14]
7000d9ac:	3301      	adds	r3, #1
7000d9ae:	b2da      	uxtb	r2, r3
7000d9b0:	687b      	ldr	r3, [r7, #4]
7000d9b2:	739a      	strb	r2, [r3, #14]
7000d9b4:	68f8      	ldr	r0, [r7, #12]
7000d9b6:	f000 fabf 	bl	7000df38 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
7000d9ba:	687b      	ldr	r3, [r7, #4]
7000d9bc:	7b9b      	ldrb	r3, [r3, #14]
7000d9be:	2b00      	cmp	r3, #0
7000d9c0:	d106      	bne.n	7000d9d0 <pbuf_ref+0x3c>
7000d9c2:	4b05      	ldr	r3, [pc, #20]	@ (7000d9d8 <pbuf_ref+0x44>)
7000d9c4:	f240 3242 	movw	r2, #834	@ 0x342
7000d9c8:	4904      	ldr	r1, [pc, #16]	@ (7000d9dc <pbuf_ref+0x48>)
7000d9ca:	4805      	ldr	r0, [pc, #20]	@ (7000d9e0 <pbuf_ref+0x4c>)
7000d9cc:	f006 f9a8 	bl	70013d20 <iprintf>
  }
}
7000d9d0:	bf00      	nop
7000d9d2:	3710      	adds	r7, #16
7000d9d4:	46bd      	mov	sp, r7
7000d9d6:	bd80      	pop	{r7, pc}
7000d9d8:	700158d8 	.word	0x700158d8
7000d9dc:	70015ac8 	.word	0x70015ac8
7000d9e0:	70015968 	.word	0x70015968

7000d9e4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
7000d9e4:	b580      	push	{r7, lr}
7000d9e6:	b084      	sub	sp, #16
7000d9e8:	af00      	add	r7, sp, #0
7000d9ea:	6078      	str	r0, [r7, #4]
7000d9ec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
7000d9ee:	687b      	ldr	r3, [r7, #4]
7000d9f0:	2b00      	cmp	r3, #0
7000d9f2:	d037      	beq.n	7000da64 <pbuf_cat+0x80>
7000d9f4:	683b      	ldr	r3, [r7, #0]
7000d9f6:	2b00      	cmp	r3, #0
7000d9f8:	d034      	beq.n	7000da64 <pbuf_cat+0x80>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
7000d9fa:	687b      	ldr	r3, [r7, #4]
7000d9fc:	60fb      	str	r3, [r7, #12]
7000d9fe:	e00a      	b.n	7000da16 <pbuf_cat+0x32>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
7000da00:	68fb      	ldr	r3, [r7, #12]
7000da02:	891a      	ldrh	r2, [r3, #8]
7000da04:	683b      	ldr	r3, [r7, #0]
7000da06:	891b      	ldrh	r3, [r3, #8]
7000da08:	4413      	add	r3, r2
7000da0a:	b29a      	uxth	r2, r3
7000da0c:	68fb      	ldr	r3, [r7, #12]
7000da0e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
7000da10:	68fb      	ldr	r3, [r7, #12]
7000da12:	681b      	ldr	r3, [r3, #0]
7000da14:	60fb      	str	r3, [r7, #12]
7000da16:	68fb      	ldr	r3, [r7, #12]
7000da18:	681b      	ldr	r3, [r3, #0]
7000da1a:	2b00      	cmp	r3, #0
7000da1c:	d1f0      	bne.n	7000da00 <pbuf_cat+0x1c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
7000da1e:	68fb      	ldr	r3, [r7, #12]
7000da20:	891a      	ldrh	r2, [r3, #8]
7000da22:	68fb      	ldr	r3, [r7, #12]
7000da24:	895b      	ldrh	r3, [r3, #10]
7000da26:	429a      	cmp	r2, r3
7000da28:	d006      	beq.n	7000da38 <pbuf_cat+0x54>
7000da2a:	4b10      	ldr	r3, [pc, #64]	@ (7000da6c <pbuf_cat+0x88>)
7000da2c:	f240 3262 	movw	r2, #866	@ 0x362
7000da30:	490f      	ldr	r1, [pc, #60]	@ (7000da70 <pbuf_cat+0x8c>)
7000da32:	4810      	ldr	r0, [pc, #64]	@ (7000da74 <pbuf_cat+0x90>)
7000da34:	f006 f974 	bl	70013d20 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
7000da38:	68fb      	ldr	r3, [r7, #12]
7000da3a:	681b      	ldr	r3, [r3, #0]
7000da3c:	2b00      	cmp	r3, #0
7000da3e:	d006      	beq.n	7000da4e <pbuf_cat+0x6a>
7000da40:	4b0a      	ldr	r3, [pc, #40]	@ (7000da6c <pbuf_cat+0x88>)
7000da42:	f240 3263 	movw	r2, #867	@ 0x363
7000da46:	490c      	ldr	r1, [pc, #48]	@ (7000da78 <pbuf_cat+0x94>)
7000da48:	480a      	ldr	r0, [pc, #40]	@ (7000da74 <pbuf_cat+0x90>)
7000da4a:	f006 f969 	bl	70013d20 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
7000da4e:	68fb      	ldr	r3, [r7, #12]
7000da50:	891a      	ldrh	r2, [r3, #8]
7000da52:	683b      	ldr	r3, [r7, #0]
7000da54:	891b      	ldrh	r3, [r3, #8]
7000da56:	4413      	add	r3, r2
7000da58:	b29a      	uxth	r2, r3
7000da5a:	68fb      	ldr	r3, [r7, #12]
7000da5c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
7000da5e:	68fb      	ldr	r3, [r7, #12]
7000da60:	683a      	ldr	r2, [r7, #0]
7000da62:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
7000da64:	3710      	adds	r7, #16
7000da66:	46bd      	mov	sp, r7
7000da68:	bd80      	pop	{r7, pc}
7000da6a:	bf00      	nop
7000da6c:	700158d8 	.word	0x700158d8
7000da70:	70015adc 	.word	0x70015adc
7000da74:	70015968 	.word	0x70015968
7000da78:	70015b0c 	.word	0x70015b0c

7000da7c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
7000da7c:	b580      	push	{r7, lr}
7000da7e:	b082      	sub	sp, #8
7000da80:	af00      	add	r7, sp, #0
7000da82:	6078      	str	r0, [r7, #4]
7000da84:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
7000da86:	683b      	ldr	r3, [r7, #0]
7000da88:	2b00      	cmp	r3, #0
7000da8a:	d102      	bne.n	7000da92 <pbuf_copy+0x16>
7000da8c:	f06f 030f 	mvn.w	r3, #15
7000da90:	e007      	b.n	7000daa2 <pbuf_copy+0x26>
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
7000da92:	683b      	ldr	r3, [r7, #0]
7000da94:	891a      	ldrh	r2, [r3, #8]
7000da96:	2300      	movs	r3, #0
7000da98:	6839      	ldr	r1, [r7, #0]
7000da9a:	6878      	ldr	r0, [r7, #4]
7000da9c:	f000 f806 	bl	7000daac <pbuf_copy_partial_pbuf>
7000daa0:	4603      	mov	r3, r0
}
7000daa2:	4618      	mov	r0, r3
7000daa4:	3708      	adds	r7, #8
7000daa6:	46bd      	mov	sp, r7
7000daa8:	bd80      	pop	{r7, pc}
	...

7000daac <pbuf_copy_partial_pbuf>:
 *                 or p_to is not big enough to hold copy_len at offset
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy_partial_pbuf(struct pbuf *p_to, const struct pbuf *p_from, u16_t copy_len, u16_t offset)
{
7000daac:	b580      	push	{r7, lr}
7000daae:	b088      	sub	sp, #32
7000dab0:	af00      	add	r7, sp, #0
7000dab2:	60f8      	str	r0, [r7, #12]
7000dab4:	60b9      	str	r1, [r7, #8]
7000dab6:	4611      	mov	r1, r2
7000dab8:	461a      	mov	r2, r3
7000daba:	460b      	mov	r3, r1
7000dabc:	80fb      	strh	r3, [r7, #6]
7000dabe:	4613      	mov	r3, r2
7000dac0:	80bb      	strh	r3, [r7, #4]
  size_t offset_to = offset, offset_from = 0, len_calc;
7000dac2:	88bb      	ldrh	r3, [r7, #4]
7000dac4:	61fb      	str	r3, [r7, #28]
7000dac6:	2300      	movs	r3, #0
7000dac8:	61bb      	str	r3, [r7, #24]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf(%p, %p, %"U16_F", %"U16_F")\n",
              (const void *)p_to, (const void *)p_from, copy_len, offset));

  /* is the copy_len in range? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
7000daca:	68bb      	ldr	r3, [r7, #8]
7000dacc:	2b00      	cmp	r3, #0
7000dace:	d004      	beq.n	7000dada <pbuf_copy_partial_pbuf+0x2e>
7000dad0:	68bb      	ldr	r3, [r7, #8]
7000dad2:	891b      	ldrh	r3, [r3, #8]
7000dad4:	88fa      	ldrh	r2, [r7, #6]
7000dad6:	429a      	cmp	r2, r3
7000dad8:	d902      	bls.n	7000dae0 <pbuf_copy_partial_pbuf+0x34>
7000dada:	f06f 030f 	mvn.w	r3, #15
7000dade:	e0ae      	b.n	7000dc3e <pbuf_copy_partial_pbuf+0x192>
             (p_from->tot_len >= copy_len)), return ERR_ARG;);
  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
7000dae0:	68fb      	ldr	r3, [r7, #12]
7000dae2:	2b00      	cmp	r3, #0
7000dae4:	d007      	beq.n	7000daf6 <pbuf_copy_partial_pbuf+0x4a>
7000dae6:	68fb      	ldr	r3, [r7, #12]
7000dae8:	891b      	ldrh	r3, [r3, #8]
7000daea:	4619      	mov	r1, r3
7000daec:	88ba      	ldrh	r2, [r7, #4]
7000daee:	88fb      	ldrh	r3, [r7, #6]
7000daf0:	4413      	add	r3, r2
7000daf2:	4299      	cmp	r1, r3
7000daf4:	da02      	bge.n	7000dafc <pbuf_copy_partial_pbuf+0x50>
7000daf6:	f06f 030f 	mvn.w	r3, #15
7000dafa:	e0a0      	b.n	7000dc3e <pbuf_copy_partial_pbuf+0x192>
             (p_to->tot_len >= (offset + copy_len))), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
7000dafc:	68fb      	ldr	r3, [r7, #12]
7000dafe:	895b      	ldrh	r3, [r3, #10]
7000db00:	461a      	mov	r2, r3
7000db02:	69fb      	ldr	r3, [r7, #28]
7000db04:	1ad2      	subs	r2, r2, r3
7000db06:	68bb      	ldr	r3, [r7, #8]
7000db08:	895b      	ldrh	r3, [r3, #10]
7000db0a:	4619      	mov	r1, r3
7000db0c:	69bb      	ldr	r3, [r7, #24]
7000db0e:	1acb      	subs	r3, r1, r3
7000db10:	429a      	cmp	r2, r3
7000db12:	d306      	bcc.n	7000db22 <pbuf_copy_partial_pbuf+0x76>
      /* complete current p_from fits into current p_to */
      len_calc = p_from->len - offset_from;
7000db14:	68bb      	ldr	r3, [r7, #8]
7000db16:	895b      	ldrh	r3, [r3, #10]
7000db18:	461a      	mov	r2, r3
7000db1a:	69bb      	ldr	r3, [r7, #24]
7000db1c:	1ad3      	subs	r3, r2, r3
7000db1e:	617b      	str	r3, [r7, #20]
7000db20:	e005      	b.n	7000db2e <pbuf_copy_partial_pbuf+0x82>
    } else {
      /* current p_from does not fit into current p_to */
      len_calc = p_to->len - offset_to;
7000db22:	68fb      	ldr	r3, [r7, #12]
7000db24:	895b      	ldrh	r3, [r3, #10]
7000db26:	461a      	mov	r2, r3
7000db28:	69fb      	ldr	r3, [r7, #28]
7000db2a:	1ad3      	subs	r3, r2, r3
7000db2c:	617b      	str	r3, [r7, #20]
    }
    len = (u16_t)LWIP_MIN(copy_len, len_calc);
7000db2e:	88fb      	ldrh	r3, [r7, #6]
7000db30:	697a      	ldr	r2, [r7, #20]
7000db32:	429a      	cmp	r2, r3
7000db34:	d802      	bhi.n	7000db3c <pbuf_copy_partial_pbuf+0x90>
7000db36:	697b      	ldr	r3, [r7, #20]
7000db38:	b29b      	uxth	r3, r3
7000db3a:	e000      	b.n	7000db3e <pbuf_copy_partial_pbuf+0x92>
7000db3c:	88fb      	ldrh	r3, [r7, #6]
7000db3e:	827b      	strh	r3, [r7, #18]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
7000db40:	68fb      	ldr	r3, [r7, #12]
7000db42:	685a      	ldr	r2, [r3, #4]
7000db44:	69fb      	ldr	r3, [r7, #28]
7000db46:	18d0      	adds	r0, r2, r3
7000db48:	68bb      	ldr	r3, [r7, #8]
7000db4a:	685a      	ldr	r2, [r3, #4]
7000db4c:	69bb      	ldr	r3, [r7, #24]
7000db4e:	4413      	add	r3, r2
7000db50:	8a7a      	ldrh	r2, [r7, #18]
7000db52:	4619      	mov	r1, r3
7000db54:	f006 fa15 	bl	70013f82 <memcpy>
    offset_to += len;
7000db58:	8a7b      	ldrh	r3, [r7, #18]
7000db5a:	69fa      	ldr	r2, [r7, #28]
7000db5c:	4413      	add	r3, r2
7000db5e:	61fb      	str	r3, [r7, #28]
    offset_from += len;
7000db60:	8a7b      	ldrh	r3, [r7, #18]
7000db62:	69ba      	ldr	r2, [r7, #24]
7000db64:	4413      	add	r3, r2
7000db66:	61bb      	str	r3, [r7, #24]
    copy_len -= len;
7000db68:	88fa      	ldrh	r2, [r7, #6]
7000db6a:	8a7b      	ldrh	r3, [r7, #18]
7000db6c:	1ad3      	subs	r3, r2, r3
7000db6e:	80fb      	strh	r3, [r7, #6]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
7000db70:	68fb      	ldr	r3, [r7, #12]
7000db72:	895b      	ldrh	r3, [r3, #10]
7000db74:	461a      	mov	r2, r3
7000db76:	69fb      	ldr	r3, [r7, #28]
7000db78:	4293      	cmp	r3, r2
7000db7a:	d906      	bls.n	7000db8a <pbuf_copy_partial_pbuf+0xde>
7000db7c:	4b32      	ldr	r3, [pc, #200]	@ (7000dc48 <pbuf_copy_partial_pbuf+0x19c>)
7000db7e:	f240 32fa 	movw	r2, #1018	@ 0x3fa
7000db82:	4932      	ldr	r1, [pc, #200]	@ (7000dc4c <pbuf_copy_partial_pbuf+0x1a0>)
7000db84:	4832      	ldr	r0, [pc, #200]	@ (7000dc50 <pbuf_copy_partial_pbuf+0x1a4>)
7000db86:	f006 f8cb 	bl	70013d20 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
7000db8a:	68bb      	ldr	r3, [r7, #8]
7000db8c:	895b      	ldrh	r3, [r3, #10]
7000db8e:	461a      	mov	r2, r3
7000db90:	69bb      	ldr	r3, [r7, #24]
7000db92:	4293      	cmp	r3, r2
7000db94:	d906      	bls.n	7000dba4 <pbuf_copy_partial_pbuf+0xf8>
7000db96:	4b2c      	ldr	r3, [pc, #176]	@ (7000dc48 <pbuf_copy_partial_pbuf+0x19c>)
7000db98:	f240 32fb 	movw	r2, #1019	@ 0x3fb
7000db9c:	492d      	ldr	r1, [pc, #180]	@ (7000dc54 <pbuf_copy_partial_pbuf+0x1a8>)
7000db9e:	482c      	ldr	r0, [pc, #176]	@ (7000dc50 <pbuf_copy_partial_pbuf+0x1a4>)
7000dba0:	f006 f8be 	bl	70013d20 <iprintf>
    if (offset_from >= p_from->len) {
7000dba4:	68bb      	ldr	r3, [r7, #8]
7000dba6:	895b      	ldrh	r3, [r3, #10]
7000dba8:	461a      	mov	r2, r3
7000dbaa:	69bb      	ldr	r3, [r7, #24]
7000dbac:	4293      	cmp	r3, r2
7000dbae:	d30d      	bcc.n	7000dbcc <pbuf_copy_partial_pbuf+0x120>
      /* on to next p_from (if any) */
      offset_from = 0;
7000dbb0:	2300      	movs	r3, #0
7000dbb2:	61bb      	str	r3, [r7, #24]
      p_from = p_from->next;
7000dbb4:	68bb      	ldr	r3, [r7, #8]
7000dbb6:	681b      	ldr	r3, [r3, #0]
7000dbb8:	60bb      	str	r3, [r7, #8]
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
7000dbba:	68bb      	ldr	r3, [r7, #8]
7000dbbc:	2b00      	cmp	r3, #0
7000dbbe:	d105      	bne.n	7000dbcc <pbuf_copy_partial_pbuf+0x120>
7000dbc0:	88fb      	ldrh	r3, [r7, #6]
7000dbc2:	2b00      	cmp	r3, #0
7000dbc4:	d002      	beq.n	7000dbcc <pbuf_copy_partial_pbuf+0x120>
7000dbc6:	f06f 030f 	mvn.w	r3, #15
7000dbca:	e038      	b.n	7000dc3e <pbuf_copy_partial_pbuf+0x192>
    }
    if (offset_to == p_to->len) {
7000dbcc:	68fb      	ldr	r3, [r7, #12]
7000dbce:	895b      	ldrh	r3, [r3, #10]
7000dbd0:	461a      	mov	r2, r3
7000dbd2:	69fb      	ldr	r3, [r7, #28]
7000dbd4:	4293      	cmp	r3, r2
7000dbd6:	d10d      	bne.n	7000dbf4 <pbuf_copy_partial_pbuf+0x148>
      /* on to next p_to (if any) */
      offset_to = 0;
7000dbd8:	2300      	movs	r3, #0
7000dbda:	61fb      	str	r3, [r7, #28]
      p_to = p_to->next;
7000dbdc:	68fb      	ldr	r3, [r7, #12]
7000dbde:	681b      	ldr	r3, [r3, #0]
7000dbe0:	60fb      	str	r3, [r7, #12]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
7000dbe2:	68fb      	ldr	r3, [r7, #12]
7000dbe4:	2b00      	cmp	r3, #0
7000dbe6:	d105      	bne.n	7000dbf4 <pbuf_copy_partial_pbuf+0x148>
7000dbe8:	88fb      	ldrh	r3, [r7, #6]
7000dbea:	2b00      	cmp	r3, #0
7000dbec:	d002      	beq.n	7000dbf4 <pbuf_copy_partial_pbuf+0x148>
7000dbee:	f06f 030f 	mvn.w	r3, #15
7000dbf2:	e024      	b.n	7000dc3e <pbuf_copy_partial_pbuf+0x192>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
7000dbf4:	68bb      	ldr	r3, [r7, #8]
7000dbf6:	2b00      	cmp	r3, #0
7000dbf8:	d00c      	beq.n	7000dc14 <pbuf_copy_partial_pbuf+0x168>
7000dbfa:	68bb      	ldr	r3, [r7, #8]
7000dbfc:	895a      	ldrh	r2, [r3, #10]
7000dbfe:	68bb      	ldr	r3, [r7, #8]
7000dc00:	891b      	ldrh	r3, [r3, #8]
7000dc02:	429a      	cmp	r2, r3
7000dc04:	d106      	bne.n	7000dc14 <pbuf_copy_partial_pbuf+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
7000dc06:	68bb      	ldr	r3, [r7, #8]
7000dc08:	681b      	ldr	r3, [r3, #0]
7000dc0a:	2b00      	cmp	r3, #0
7000dc0c:	d002      	beq.n	7000dc14 <pbuf_copy_partial_pbuf+0x168>
7000dc0e:	f06f 0305 	mvn.w	r3, #5
7000dc12:	e014      	b.n	7000dc3e <pbuf_copy_partial_pbuf+0x192>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
7000dc14:	68fb      	ldr	r3, [r7, #12]
7000dc16:	2b00      	cmp	r3, #0
7000dc18:	d00c      	beq.n	7000dc34 <pbuf_copy_partial_pbuf+0x188>
7000dc1a:	68fb      	ldr	r3, [r7, #12]
7000dc1c:	895a      	ldrh	r2, [r3, #10]
7000dc1e:	68fb      	ldr	r3, [r7, #12]
7000dc20:	891b      	ldrh	r3, [r3, #8]
7000dc22:	429a      	cmp	r2, r3
7000dc24:	d106      	bne.n	7000dc34 <pbuf_copy_partial_pbuf+0x188>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
7000dc26:	68fb      	ldr	r3, [r7, #12]
7000dc28:	681b      	ldr	r3, [r3, #0]
7000dc2a:	2b00      	cmp	r3, #0
7000dc2c:	d002      	beq.n	7000dc34 <pbuf_copy_partial_pbuf+0x188>
7000dc2e:	f06f 0305 	mvn.w	r3, #5
7000dc32:	e004      	b.n	7000dc3e <pbuf_copy_partial_pbuf+0x192>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (copy_len);
7000dc34:	88fb      	ldrh	r3, [r7, #6]
7000dc36:	2b00      	cmp	r3, #0
7000dc38:	f47f af60 	bne.w	7000dafc <pbuf_copy_partial_pbuf+0x50>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf: copy complete.\n"));
  return ERR_OK;
7000dc3c:	2300      	movs	r3, #0
}
7000dc3e:	4618      	mov	r0, r3
7000dc40:	3720      	adds	r7, #32
7000dc42:	46bd      	mov	sp, r7
7000dc44:	bd80      	pop	{r7, pc}
7000dc46:	bf00      	nop
7000dc48:	700158d8 	.word	0x700158d8
7000dc4c:	70015b58 	.word	0x70015b58
7000dc50:	70015968 	.word	0x70015968
7000dc54:	70015b70 	.word	0x70015b70

7000dc58 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
7000dc58:	b580      	push	{r7, lr}
7000dc5a:	b088      	sub	sp, #32
7000dc5c:	af00      	add	r7, sp, #0
7000dc5e:	60f8      	str	r0, [r7, #12]
7000dc60:	60b9      	str	r1, [r7, #8]
7000dc62:	4611      	mov	r1, r2
7000dc64:	461a      	mov	r2, r3
7000dc66:	460b      	mov	r3, r1
7000dc68:	80fb      	strh	r3, [r7, #6]
7000dc6a:	4613      	mov	r3, r2
7000dc6c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
7000dc6e:	2300      	movs	r3, #0
7000dc70:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
7000dc72:	2300      	movs	r3, #0
7000dc74:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
7000dc76:	68fb      	ldr	r3, [r7, #12]
7000dc78:	2b00      	cmp	r3, #0
7000dc7a:	d101      	bne.n	7000dc80 <pbuf_copy_partial+0x28>
7000dc7c:	2300      	movs	r3, #0
7000dc7e:	e043      	b.n	7000dd08 <pbuf_copy_partial+0xb0>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
7000dc80:	68bb      	ldr	r3, [r7, #8]
7000dc82:	2b00      	cmp	r3, #0
7000dc84:	d101      	bne.n	7000dc8a <pbuf_copy_partial+0x32>
7000dc86:	2300      	movs	r3, #0
7000dc88:	e03e      	b.n	7000dd08 <pbuf_copy_partial+0xb0>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
7000dc8a:	68fb      	ldr	r3, [r7, #12]
7000dc8c:	61fb      	str	r3, [r7, #28]
7000dc8e:	e034      	b.n	7000dcfa <pbuf_copy_partial+0xa2>
    if ((offset != 0) && (offset >= p->len)) {
7000dc90:	88bb      	ldrh	r3, [r7, #4]
7000dc92:	2b00      	cmp	r3, #0
7000dc94:	d00a      	beq.n	7000dcac <pbuf_copy_partial+0x54>
7000dc96:	69fb      	ldr	r3, [r7, #28]
7000dc98:	895b      	ldrh	r3, [r3, #10]
7000dc9a:	88ba      	ldrh	r2, [r7, #4]
7000dc9c:	429a      	cmp	r2, r3
7000dc9e:	d305      	bcc.n	7000dcac <pbuf_copy_partial+0x54>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
7000dca0:	69fb      	ldr	r3, [r7, #28]
7000dca2:	895b      	ldrh	r3, [r3, #10]
7000dca4:	88ba      	ldrh	r2, [r7, #4]
7000dca6:	1ad3      	subs	r3, r2, r3
7000dca8:	80bb      	strh	r3, [r7, #4]
7000dcaa:	e023      	b.n	7000dcf4 <pbuf_copy_partial+0x9c>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
7000dcac:	69fb      	ldr	r3, [r7, #28]
7000dcae:	895a      	ldrh	r2, [r3, #10]
7000dcb0:	88bb      	ldrh	r3, [r7, #4]
7000dcb2:	1ad3      	subs	r3, r2, r3
7000dcb4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
7000dcb6:	8b3a      	ldrh	r2, [r7, #24]
7000dcb8:	88fb      	ldrh	r3, [r7, #6]
7000dcba:	429a      	cmp	r2, r3
7000dcbc:	d901      	bls.n	7000dcc2 <pbuf_copy_partial+0x6a>
        buf_copy_len = len;
7000dcbe:	88fb      	ldrh	r3, [r7, #6]
7000dcc0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
7000dcc2:	8b7b      	ldrh	r3, [r7, #26]
7000dcc4:	68ba      	ldr	r2, [r7, #8]
7000dcc6:	18d0      	adds	r0, r2, r3
7000dcc8:	69fb      	ldr	r3, [r7, #28]
7000dcca:	685a      	ldr	r2, [r3, #4]
7000dccc:	88bb      	ldrh	r3, [r7, #4]
7000dcce:	4413      	add	r3, r2
7000dcd0:	8b3a      	ldrh	r2, [r7, #24]
7000dcd2:	4619      	mov	r1, r3
7000dcd4:	f006 f955 	bl	70013f82 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
7000dcd8:	8afa      	ldrh	r2, [r7, #22]
7000dcda:	8b3b      	ldrh	r3, [r7, #24]
7000dcdc:	4413      	add	r3, r2
7000dcde:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
7000dce0:	8b7a      	ldrh	r2, [r7, #26]
7000dce2:	8b3b      	ldrh	r3, [r7, #24]
7000dce4:	4413      	add	r3, r2
7000dce6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
7000dce8:	88fa      	ldrh	r2, [r7, #6]
7000dcea:	8b3b      	ldrh	r3, [r7, #24]
7000dcec:	1ad3      	subs	r3, r2, r3
7000dcee:	80fb      	strh	r3, [r7, #6]
      offset = 0;
7000dcf0:	2300      	movs	r3, #0
7000dcf2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
7000dcf4:	69fb      	ldr	r3, [r7, #28]
7000dcf6:	681b      	ldr	r3, [r3, #0]
7000dcf8:	61fb      	str	r3, [r7, #28]
7000dcfa:	88fb      	ldrh	r3, [r7, #6]
7000dcfc:	2b00      	cmp	r3, #0
7000dcfe:	d002      	beq.n	7000dd06 <pbuf_copy_partial+0xae>
7000dd00:	69fb      	ldr	r3, [r7, #28]
7000dd02:	2b00      	cmp	r3, #0
7000dd04:	d1c4      	bne.n	7000dc90 <pbuf_copy_partial+0x38>
    }
  }
  return copied_total;
7000dd06:	8afb      	ldrh	r3, [r7, #22]
}
7000dd08:	4618      	mov	r0, r3
7000dd0a:	3720      	adds	r7, #32
7000dd0c:	46bd      	mov	sp, r7
7000dd0e:	bd80      	pop	{r7, pc}

7000dd10 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
7000dd10:	b580      	push	{r7, lr}
7000dd12:	b084      	sub	sp, #16
7000dd14:	af00      	add	r7, sp, #0
7000dd16:	4603      	mov	r3, r0
7000dd18:	603a      	str	r2, [r7, #0]
7000dd1a:	71fb      	strb	r3, [r7, #7]
7000dd1c:	460b      	mov	r3, r1
7000dd1e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
7000dd20:	683b      	ldr	r3, [r7, #0]
7000dd22:	8919      	ldrh	r1, [r3, #8]
7000dd24:	88ba      	ldrh	r2, [r7, #4]
7000dd26:	79fb      	ldrb	r3, [r7, #7]
7000dd28:	4618      	mov	r0, r3
7000dd2a:	f7ff fab3 	bl	7000d294 <pbuf_alloc>
7000dd2e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
7000dd30:	68fb      	ldr	r3, [r7, #12]
7000dd32:	2b00      	cmp	r3, #0
7000dd34:	d101      	bne.n	7000dd3a <pbuf_clone+0x2a>
    return NULL;
7000dd36:	2300      	movs	r3, #0
7000dd38:	e011      	b.n	7000dd5e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
7000dd3a:	6839      	ldr	r1, [r7, #0]
7000dd3c:	68f8      	ldr	r0, [r7, #12]
7000dd3e:	f7ff fe9d 	bl	7000da7c <pbuf_copy>
7000dd42:	4603      	mov	r3, r0
7000dd44:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
7000dd46:	f997 300b 	ldrsb.w	r3, [r7, #11]
7000dd4a:	2b00      	cmp	r3, #0
7000dd4c:	d006      	beq.n	7000dd5c <pbuf_clone+0x4c>
7000dd4e:	4b06      	ldr	r3, [pc, #24]	@ (7000dd68 <pbuf_clone+0x58>)
7000dd50:	f240 5246 	movw	r2, #1350	@ 0x546
7000dd54:	4905      	ldr	r1, [pc, #20]	@ (7000dd6c <pbuf_clone+0x5c>)
7000dd56:	4806      	ldr	r0, [pc, #24]	@ (7000dd70 <pbuf_clone+0x60>)
7000dd58:	f005 ffe2 	bl	70013d20 <iprintf>
  return q;
7000dd5c:	68fb      	ldr	r3, [r7, #12]
}
7000dd5e:	4618      	mov	r0, r3
7000dd60:	3710      	adds	r7, #16
7000dd62:	46bd      	mov	sp, r7
7000dd64:	bd80      	pop	{r7, pc}
7000dd66:	bf00      	nop
7000dd68:	700158d8 	.word	0x700158d8
7000dd6c:	70015bd4 	.word	0x70015bd4
7000dd70:	70015968 	.word	0x70015968

7000dd74 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
7000dd74:	b580      	push	{r7, lr}
7000dd76:	b082      	sub	sp, #8
7000dd78:	af00      	add	r7, sp, #0
7000dd7a:	6078      	str	r0, [r7, #4]
7000dd7c:	6039      	str	r1, [r7, #0]
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
7000dd7e:	683b      	ldr	r3, [r7, #0]
7000dd80:	2200      	movs	r2, #0
7000dd82:	2104      	movs	r1, #4
7000dd84:	4618      	mov	r0, r3
7000dd86:	f7f8 f83f 	bl	70005e08 <osMessageQueueNew>
7000dd8a:	4602      	mov	r2, r0
7000dd8c:	687b      	ldr	r3, [r7, #4]
7000dd8e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
7000dd90:	687b      	ldr	r3, [r7, #4]
7000dd92:	681b      	ldr	r3, [r3, #0]
7000dd94:	2b00      	cmp	r3, #0
7000dd96:	d102      	bne.n	7000dd9e <sys_mbox_new+0x2a>
    return ERR_MEM;
7000dd98:	f04f 33ff 	mov.w	r3, #4294967295
7000dd9c:	e000      	b.n	7000dda0 <sys_mbox_new+0x2c>

  return ERR_OK;
7000dd9e:	2300      	movs	r3, #0
}
7000dda0:	4618      	mov	r0, r3
7000dda2:	3708      	adds	r7, #8
7000dda4:	46bd      	mov	sp, r7
7000dda6:	bd80      	pop	{r7, pc}

7000dda8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
7000dda8:	b580      	push	{r7, lr}
7000ddaa:	b084      	sub	sp, #16
7000ddac:	af00      	add	r7, sp, #0
7000ddae:	6078      	str	r0, [r7, #4]
7000ddb0:	6039      	str	r1, [r7, #0]
  err_t result;
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
7000ddb2:	687b      	ldr	r3, [r7, #4]
7000ddb4:	6818      	ldr	r0, [r3, #0]
7000ddb6:	4639      	mov	r1, r7
7000ddb8:	2300      	movs	r3, #0
7000ddba:	2200      	movs	r2, #0
7000ddbc:	f7f8 f896 	bl	70005eec <osMessageQueuePut>
7000ddc0:	4603      	mov	r3, r0
7000ddc2:	2b00      	cmp	r3, #0
7000ddc4:	d102      	bne.n	7000ddcc <sys_mbox_trypost+0x24>
  {
    result = ERR_OK;
7000ddc6:	2300      	movs	r3, #0
7000ddc8:	73fb      	strb	r3, [r7, #15]
7000ddca:	e001      	b.n	7000ddd0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
7000ddcc:	23ff      	movs	r3, #255	@ 0xff
7000ddce:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
7000ddd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
7000ddd4:	4618      	mov	r0, r3
7000ddd6:	3710      	adds	r7, #16
7000ddd8:	46bd      	mov	sp, r7
7000ddda:	bd80      	pop	{r7, pc}

7000dddc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
7000dddc:	b580      	push	{r7, lr}
7000ddde:	b086      	sub	sp, #24
7000dde0:	af00      	add	r7, sp, #0
7000dde2:	60f8      	str	r0, [r7, #12]
7000dde4:	60b9      	str	r1, [r7, #8]
7000dde6:	607a      	str	r2, [r7, #4]
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
7000dde8:	f7f7 fcfc 	bl	700057e4 <osKernelGetTickCount>
7000ddec:	6178      	str	r0, [r7, #20]

  if(timeout != 0)
7000ddee:	687b      	ldr	r3, [r7, #4]
7000ddf0:	2b00      	cmp	r3, #0
7000ddf2:	d013      	beq.n	7000de1c <sys_arch_mbox_fetch+0x40>
  {
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
7000ddf4:	68fb      	ldr	r3, [r7, #12]
7000ddf6:	6818      	ldr	r0, [r3, #0]
7000ddf8:	687b      	ldr	r3, [r7, #4]
7000ddfa:	2200      	movs	r2, #0
7000ddfc:	68b9      	ldr	r1, [r7, #8]
7000ddfe:	f7f8 f8d3 	bl	70005fa8 <osMessageQueueGet>
7000de02:	6138      	str	r0, [r7, #16]
    if (status == osOK)
7000de04:	693b      	ldr	r3, [r7, #16]
7000de06:	2b00      	cmp	r3, #0
7000de08:	d105      	bne.n	7000de16 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
7000de0a:	f7f7 fceb 	bl	700057e4 <osKernelGetTickCount>
7000de0e:	4602      	mov	r2, r0
7000de10:	697b      	ldr	r3, [r7, #20]
7000de12:	1ad3      	subs	r3, r2, r3
7000de14:	e00f      	b.n	7000de36 <sys_arch_mbox_fetch+0x5a>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
7000de16:	f04f 33ff 	mov.w	r3, #4294967295
7000de1a:	e00c      	b.n	7000de36 <sys_arch_mbox_fetch+0x5a>
    }
  }
  else
  {
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
7000de1c:	68fb      	ldr	r3, [r7, #12]
7000de1e:	6818      	ldr	r0, [r3, #0]
7000de20:	f04f 33ff 	mov.w	r3, #4294967295
7000de24:	2200      	movs	r2, #0
7000de26:	68b9      	ldr	r1, [r7, #8]
7000de28:	f7f8 f8be 	bl	70005fa8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
7000de2c:	f7f7 fcda 	bl	700057e4 <osKernelGetTickCount>
7000de30:	4602      	mov	r2, r0
7000de32:	697b      	ldr	r3, [r7, #20]
7000de34:	1ad3      	subs	r3, r2, r3
  }
}
7000de36:	4618      	mov	r0, r3
7000de38:	3718      	adds	r7, #24
7000de3a:	46bd      	mov	sp, r7
7000de3c:	bd80      	pop	{r7, pc}

7000de3e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
7000de3e:	b480      	push	{r7}
7000de40:	b083      	sub	sp, #12
7000de42:	af00      	add	r7, sp, #0
7000de44:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
7000de46:	687b      	ldr	r3, [r7, #4]
7000de48:	681b      	ldr	r3, [r3, #0]
7000de4a:	2b00      	cmp	r3, #0
7000de4c:	d101      	bne.n	7000de52 <sys_mbox_valid+0x14>
    return 0;
7000de4e:	2300      	movs	r3, #0
7000de50:	e000      	b.n	7000de54 <sys_mbox_valid+0x16>
  else
    return 1;
7000de52:	2301      	movs	r3, #1
}
7000de54:	4618      	mov	r0, r3
7000de56:	370c      	adds	r7, #12
7000de58:	46bd      	mov	sp, r7
7000de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000de5e:	4770      	bx	lr

7000de60 <sys_init>:
/*-----------------------------------------------------------------------------------*/
osMutexId_t lwip_sys_mutex;

// Initialize sys arch
void sys_init(void)
{
7000de60:	b580      	push	{r7, lr}
7000de62:	af00      	add	r7, sp, #0
  lwip_sys_mutex = osMutexNew(NULL);
7000de64:	2000      	movs	r0, #0
7000de66:	f7f7 fda9 	bl	700059bc <osMutexNew>
7000de6a:	4603      	mov	r3, r0
7000de6c:	4a01      	ldr	r2, [pc, #4]	@ (7000de74 <sys_init+0x14>)
7000de6e:	6013      	str	r3, [r2, #0]
}
7000de70:	bf00      	nop
7000de72:	bd80      	pop	{r7, pc}
7000de74:	24008474 	.word	0x24008474

7000de78 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
7000de78:	b580      	push	{r7, lr}
7000de7a:	b082      	sub	sp, #8
7000de7c:	af00      	add	r7, sp, #0
7000de7e:	6078      	str	r0, [r7, #4]

  *mutex = osMutexNew(NULL);
7000de80:	2000      	movs	r0, #0
7000de82:	f7f7 fd9b 	bl	700059bc <osMutexNew>
7000de86:	4602      	mov	r2, r0
7000de88:	687b      	ldr	r3, [r7, #4]
7000de8a:	601a      	str	r2, [r3, #0]

  if(*mutex == NULL)
7000de8c:	687b      	ldr	r3, [r7, #4]
7000de8e:	681b      	ldr	r3, [r3, #0]
7000de90:	2b00      	cmp	r3, #0
7000de92:	d102      	bne.n	7000de9a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
7000de94:	f04f 33ff 	mov.w	r3, #4294967295
7000de98:	e000      	b.n	7000de9c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
7000de9a:	2300      	movs	r3, #0
}
7000de9c:	4618      	mov	r0, r3
7000de9e:	3708      	adds	r7, #8
7000dea0:	46bd      	mov	sp, r7
7000dea2:	bd80      	pop	{r7, pc}

7000dea4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
7000dea4:	b580      	push	{r7, lr}
7000dea6:	b082      	sub	sp, #8
7000dea8:	af00      	add	r7, sp, #0
7000deaa:	6078      	str	r0, [r7, #4]
  osMutexAcquire(*mutex, osWaitForever);
7000deac:	687b      	ldr	r3, [r7, #4]
7000deae:	681b      	ldr	r3, [r3, #0]
7000deb0:	f04f 31ff 	mov.w	r1, #4294967295
7000deb4:	4618      	mov	r0, r3
7000deb6:	f7f7 fe06 	bl	70005ac6 <osMutexAcquire>
}
7000deba:	bf00      	nop
7000debc:	3708      	adds	r7, #8
7000debe:	46bd      	mov	sp, r7
7000dec0:	bd80      	pop	{r7, pc}

7000dec2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
7000dec2:	b580      	push	{r7, lr}
7000dec4:	b082      	sub	sp, #8
7000dec6:	af00      	add	r7, sp, #0
7000dec8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
7000deca:	687b      	ldr	r3, [r7, #4]
7000decc:	681b      	ldr	r3, [r3, #0]
7000dece:	4618      	mov	r0, r3
7000ded0:	f7f7 fe43 	bl	70005b5a <osMutexRelease>
}
7000ded4:	bf00      	nop
7000ded6:	3708      	adds	r7, #8
7000ded8:	46bd      	mov	sp, r7
7000deda:	bd80      	pop	{r7, pc}

7000dedc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
7000dedc:	b580      	push	{r7, lr}
7000dede:	b08e      	sub	sp, #56	@ 0x38
7000dee0:	af00      	add	r7, sp, #0
7000dee2:	60f8      	str	r0, [r7, #12]
7000dee4:	60b9      	str	r1, [r7, #8]
7000dee6:	607a      	str	r2, [r7, #4]
7000dee8:	603b      	str	r3, [r7, #0]
  const osThreadAttr_t attributes = {
7000deea:	f107 0314 	add.w	r3, r7, #20
7000deee:	2224      	movs	r2, #36	@ 0x24
7000def0:	2100      	movs	r1, #0
7000def2:	4618      	mov	r0, r3
7000def4:	f005 ff79 	bl	70013dea <memset>
7000def8:	68fb      	ldr	r3, [r7, #12]
7000defa:	617b      	str	r3, [r7, #20]
7000defc:	683b      	ldr	r3, [r7, #0]
7000defe:	62bb      	str	r3, [r7, #40]	@ 0x28
7000df00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
7000df02:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
7000df04:	f107 0314 	add.w	r3, r7, #20
7000df08:	461a      	mov	r2, r3
7000df0a:	6879      	ldr	r1, [r7, #4]
7000df0c:	68b8      	ldr	r0, [r7, #8]
7000df0e:	f7f7 fc7d 	bl	7000580c <osThreadNew>
7000df12:	4603      	mov	r3, r0
}
7000df14:	4618      	mov	r0, r3
7000df16:	3738      	adds	r7, #56	@ 0x38
7000df18:	46bd      	mov	sp, r7
7000df1a:	bd80      	pop	{r7, pc}

7000df1c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
7000df1c:	b580      	push	{r7, lr}
7000df1e:	af00      	add	r7, sp, #0
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
7000df20:	4b04      	ldr	r3, [pc, #16]	@ (7000df34 <sys_arch_protect+0x18>)
7000df22:	681b      	ldr	r3, [r3, #0]
7000df24:	f04f 31ff 	mov.w	r1, #4294967295
7000df28:	4618      	mov	r0, r3
7000df2a:	f7f7 fdcc 	bl	70005ac6 <osMutexAcquire>

  return (sys_prot_t)1;
7000df2e:	2301      	movs	r3, #1
}
7000df30:	4618      	mov	r0, r3
7000df32:	bd80      	pop	{r7, pc}
7000df34:	24008474 	.word	0x24008474

7000df38 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
7000df38:	b580      	push	{r7, lr}
7000df3a:	b082      	sub	sp, #8
7000df3c:	af00      	add	r7, sp, #0
7000df3e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
7000df40:	4b04      	ldr	r3, [pc, #16]	@ (7000df54 <sys_arch_unprotect+0x1c>)
7000df42:	681b      	ldr	r3, [r3, #0]
7000df44:	4618      	mov	r0, r3
7000df46:	f7f7 fe08 	bl	70005b5a <osMutexRelease>
}
7000df4a:	bf00      	nop
7000df4c:	3708      	adds	r7, #8
7000df4e:	46bd      	mov	sp, r7
7000df50:	bd80      	pop	{r7, pc}
7000df52:	bf00      	nop
7000df54:	24008474 	.word	0x24008474

7000df58 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
7000df58:	b580      	push	{r7, lr}
7000df5a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
7000df5c:	f005 fde0 	bl	70013b20 <rand>
7000df60:	4603      	mov	r3, r0
7000df62:	b29b      	uxth	r3, r3
7000df64:	f3c3 030d 	ubfx	r3, r3, #0, #14
7000df68:	b29b      	uxth	r3, r3
7000df6a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
7000df6e:	b29a      	uxth	r2, r3
7000df70:	4b01      	ldr	r3, [pc, #4]	@ (7000df78 <tcp_init+0x20>)
7000df72:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
7000df74:	bf00      	nop
7000df76:	bd80      	pop	{r7, pc}
7000df78:	24000028 	.word	0x24000028

7000df7c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
7000df7c:	b580      	push	{r7, lr}
7000df7e:	b082      	sub	sp, #8
7000df80:	af00      	add	r7, sp, #0
7000df82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
7000df84:	687b      	ldr	r3, [r7, #4]
7000df86:	7d1b      	ldrb	r3, [r3, #20]
7000df88:	2b01      	cmp	r3, #1
7000df8a:	d105      	bne.n	7000df98 <tcp_free+0x1c>
7000df8c:	4b06      	ldr	r3, [pc, #24]	@ (7000dfa8 <tcp_free+0x2c>)
7000df8e:	22d4      	movs	r2, #212	@ 0xd4
7000df90:	4906      	ldr	r1, [pc, #24]	@ (7000dfac <tcp_free+0x30>)
7000df92:	4807      	ldr	r0, [pc, #28]	@ (7000dfb0 <tcp_free+0x34>)
7000df94:	f005 fec4 	bl	70013d20 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
7000df98:	6879      	ldr	r1, [r7, #4]
7000df9a:	2001      	movs	r0, #1
7000df9c:	f7fe fe12 	bl	7000cbc4 <memp_free>
}
7000dfa0:	bf00      	nop
7000dfa2:	3708      	adds	r7, #8
7000dfa4:	46bd      	mov	sp, r7
7000dfa6:	bd80      	pop	{r7, pc}
7000dfa8:	70015c60 	.word	0x70015c60
7000dfac:	70015cbc 	.word	0x70015cbc
7000dfb0:	70015cd0 	.word	0x70015cd0

7000dfb4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
7000dfb4:	b580      	push	{r7, lr}
7000dfb6:	b082      	sub	sp, #8
7000dfb8:	af00      	add	r7, sp, #0
7000dfba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
7000dfbc:	687b      	ldr	r3, [r7, #4]
7000dfbe:	7d1b      	ldrb	r3, [r3, #20]
7000dfc0:	2b01      	cmp	r3, #1
7000dfc2:	d105      	bne.n	7000dfd0 <tcp_free_listen+0x1c>
7000dfc4:	4b06      	ldr	r3, [pc, #24]	@ (7000dfe0 <tcp_free_listen+0x2c>)
7000dfc6:	22df      	movs	r2, #223	@ 0xdf
7000dfc8:	4906      	ldr	r1, [pc, #24]	@ (7000dfe4 <tcp_free_listen+0x30>)
7000dfca:	4807      	ldr	r0, [pc, #28]	@ (7000dfe8 <tcp_free_listen+0x34>)
7000dfcc:	f005 fea8 	bl	70013d20 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
7000dfd0:	6879      	ldr	r1, [r7, #4]
7000dfd2:	2002      	movs	r0, #2
7000dfd4:	f7fe fdf6 	bl	7000cbc4 <memp_free>
}
7000dfd8:	bf00      	nop
7000dfda:	3708      	adds	r7, #8
7000dfdc:	46bd      	mov	sp, r7
7000dfde:	bd80      	pop	{r7, pc}
7000dfe0:	70015c60 	.word	0x70015c60
7000dfe4:	70015cf8 	.word	0x70015cf8
7000dfe8:	70015cd0 	.word	0x70015cd0

7000dfec <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
7000dfec:	b580      	push	{r7, lr}
7000dfee:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
7000dff0:	f000 fe82 	bl	7000ecf8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
7000dff4:	4b07      	ldr	r3, [pc, #28]	@ (7000e014 <tcp_tmr+0x28>)
7000dff6:	781b      	ldrb	r3, [r3, #0]
7000dff8:	3301      	adds	r3, #1
7000dffa:	b2da      	uxtb	r2, r3
7000dffc:	4b05      	ldr	r3, [pc, #20]	@ (7000e014 <tcp_tmr+0x28>)
7000dffe:	701a      	strb	r2, [r3, #0]
7000e000:	4b04      	ldr	r3, [pc, #16]	@ (7000e014 <tcp_tmr+0x28>)
7000e002:	781b      	ldrb	r3, [r3, #0]
7000e004:	f003 0301 	and.w	r3, r3, #1
7000e008:	2b00      	cmp	r3, #0
7000e00a:	d001      	beq.n	7000e010 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
7000e00c:	f000 fb32 	bl	7000e674 <tcp_slowtmr>
  }
}
7000e010:	bf00      	nop
7000e012:	bd80      	pop	{r7, pc}
7000e014:	2400848d 	.word	0x2400848d

7000e018 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
7000e018:	b580      	push	{r7, lr}
7000e01a:	b084      	sub	sp, #16
7000e01c:	af00      	add	r7, sp, #0
7000e01e:	6078      	str	r0, [r7, #4]
7000e020:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
7000e022:	683b      	ldr	r3, [r7, #0]
7000e024:	2b00      	cmp	r3, #0
7000e026:	d105      	bne.n	7000e034 <tcp_remove_listener+0x1c>
7000e028:	4b0d      	ldr	r3, [pc, #52]	@ (7000e060 <tcp_remove_listener+0x48>)
7000e02a:	22ff      	movs	r2, #255	@ 0xff
7000e02c:	490d      	ldr	r1, [pc, #52]	@ (7000e064 <tcp_remove_listener+0x4c>)
7000e02e:	480e      	ldr	r0, [pc, #56]	@ (7000e068 <tcp_remove_listener+0x50>)
7000e030:	f005 fe76 	bl	70013d20 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
7000e034:	687b      	ldr	r3, [r7, #4]
7000e036:	60fb      	str	r3, [r7, #12]
7000e038:	e00a      	b.n	7000e050 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
7000e03a:	68fb      	ldr	r3, [r7, #12]
7000e03c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
7000e03e:	683a      	ldr	r2, [r7, #0]
7000e040:	429a      	cmp	r2, r3
7000e042:	d102      	bne.n	7000e04a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
7000e044:	68fb      	ldr	r3, [r7, #12]
7000e046:	2200      	movs	r2, #0
7000e048:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
7000e04a:	68fb      	ldr	r3, [r7, #12]
7000e04c:	68db      	ldr	r3, [r3, #12]
7000e04e:	60fb      	str	r3, [r7, #12]
7000e050:	68fb      	ldr	r3, [r7, #12]
7000e052:	2b00      	cmp	r3, #0
7000e054:	d1f1      	bne.n	7000e03a <tcp_remove_listener+0x22>
    }
  }
}
7000e056:	bf00      	nop
7000e058:	bf00      	nop
7000e05a:	3710      	adds	r7, #16
7000e05c:	46bd      	mov	sp, r7
7000e05e:	bd80      	pop	{r7, pc}
7000e060:	70015c60 	.word	0x70015c60
7000e064:	70015d14 	.word	0x70015d14
7000e068:	70015cd0 	.word	0x70015cd0

7000e06c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
7000e06c:	b580      	push	{r7, lr}
7000e06e:	b084      	sub	sp, #16
7000e070:	af00      	add	r7, sp, #0
7000e072:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
7000e074:	687b      	ldr	r3, [r7, #4]
7000e076:	2b00      	cmp	r3, #0
7000e078:	d106      	bne.n	7000e088 <tcp_listen_closed+0x1c>
7000e07a:	4b14      	ldr	r3, [pc, #80]	@ (7000e0cc <tcp_listen_closed+0x60>)
7000e07c:	f240 1211 	movw	r2, #273	@ 0x111
7000e080:	4913      	ldr	r1, [pc, #76]	@ (7000e0d0 <tcp_listen_closed+0x64>)
7000e082:	4814      	ldr	r0, [pc, #80]	@ (7000e0d4 <tcp_listen_closed+0x68>)
7000e084:	f005 fe4c 	bl	70013d20 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
7000e088:	687b      	ldr	r3, [r7, #4]
7000e08a:	7d1b      	ldrb	r3, [r3, #20]
7000e08c:	2b01      	cmp	r3, #1
7000e08e:	d006      	beq.n	7000e09e <tcp_listen_closed+0x32>
7000e090:	4b0e      	ldr	r3, [pc, #56]	@ (7000e0cc <tcp_listen_closed+0x60>)
7000e092:	f44f 7289 	mov.w	r2, #274	@ 0x112
7000e096:	4910      	ldr	r1, [pc, #64]	@ (7000e0d8 <tcp_listen_closed+0x6c>)
7000e098:	480e      	ldr	r0, [pc, #56]	@ (7000e0d4 <tcp_listen_closed+0x68>)
7000e09a:	f005 fe41 	bl	70013d20 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
7000e09e:	2301      	movs	r3, #1
7000e0a0:	60fb      	str	r3, [r7, #12]
7000e0a2:	e00b      	b.n	7000e0bc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
7000e0a4:	4a0d      	ldr	r2, [pc, #52]	@ (7000e0dc <tcp_listen_closed+0x70>)
7000e0a6:	68fb      	ldr	r3, [r7, #12]
7000e0a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
7000e0ac:	681b      	ldr	r3, [r3, #0]
7000e0ae:	6879      	ldr	r1, [r7, #4]
7000e0b0:	4618      	mov	r0, r3
7000e0b2:	f7ff ffb1 	bl	7000e018 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
7000e0b6:	68fb      	ldr	r3, [r7, #12]
7000e0b8:	3301      	adds	r3, #1
7000e0ba:	60fb      	str	r3, [r7, #12]
7000e0bc:	68fb      	ldr	r3, [r7, #12]
7000e0be:	2b03      	cmp	r3, #3
7000e0c0:	d9f0      	bls.n	7000e0a4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
7000e0c2:	bf00      	nop
7000e0c4:	bf00      	nop
7000e0c6:	3710      	adds	r7, #16
7000e0c8:	46bd      	mov	sp, r7
7000e0ca:	bd80      	pop	{r7, pc}
7000e0cc:	70015c60 	.word	0x70015c60
7000e0d0:	70015d3c 	.word	0x70015d3c
7000e0d4:	70015cd0 	.word	0x70015cd0
7000e0d8:	70015d48 	.word	0x70015d48
7000e0dc:	70017358 	.word	0x70017358

7000e0e0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
7000e0e0:	b5b0      	push	{r4, r5, r7, lr}
7000e0e2:	b088      	sub	sp, #32
7000e0e4:	af04      	add	r7, sp, #16
7000e0e6:	6078      	str	r0, [r7, #4]
7000e0e8:	460b      	mov	r3, r1
7000e0ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
7000e0ec:	687b      	ldr	r3, [r7, #4]
7000e0ee:	2b00      	cmp	r3, #0
7000e0f0:	d106      	bne.n	7000e100 <tcp_close_shutdown+0x20>
7000e0f2:	4b63      	ldr	r3, [pc, #396]	@ (7000e280 <tcp_close_shutdown+0x1a0>)
7000e0f4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
7000e0f8:	4962      	ldr	r1, [pc, #392]	@ (7000e284 <tcp_close_shutdown+0x1a4>)
7000e0fa:	4863      	ldr	r0, [pc, #396]	@ (7000e288 <tcp_close_shutdown+0x1a8>)
7000e0fc:	f005 fe10 	bl	70013d20 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
7000e100:	78fb      	ldrb	r3, [r7, #3]
7000e102:	2b00      	cmp	r3, #0
7000e104:	d066      	beq.n	7000e1d4 <tcp_close_shutdown+0xf4>
7000e106:	687b      	ldr	r3, [r7, #4]
7000e108:	7d1b      	ldrb	r3, [r3, #20]
7000e10a:	2b04      	cmp	r3, #4
7000e10c:	d003      	beq.n	7000e116 <tcp_close_shutdown+0x36>
7000e10e:	687b      	ldr	r3, [r7, #4]
7000e110:	7d1b      	ldrb	r3, [r3, #20]
7000e112:	2b07      	cmp	r3, #7
7000e114:	d15e      	bne.n	7000e1d4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
7000e116:	687b      	ldr	r3, [r7, #4]
7000e118:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000e11a:	2b00      	cmp	r3, #0
7000e11c:	d104      	bne.n	7000e128 <tcp_close_shutdown+0x48>
7000e11e:	687b      	ldr	r3, [r7, #4]
7000e120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
7000e122:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
7000e126:	d055      	beq.n	7000e1d4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
7000e128:	687b      	ldr	r3, [r7, #4]
7000e12a:	8b5b      	ldrh	r3, [r3, #26]
7000e12c:	f003 0310 	and.w	r3, r3, #16
7000e130:	2b00      	cmp	r3, #0
7000e132:	d106      	bne.n	7000e142 <tcp_close_shutdown+0x62>
7000e134:	4b52      	ldr	r3, [pc, #328]	@ (7000e280 <tcp_close_shutdown+0x1a0>)
7000e136:	f44f 72b2 	mov.w	r2, #356	@ 0x164
7000e13a:	4954      	ldr	r1, [pc, #336]	@ (7000e28c <tcp_close_shutdown+0x1ac>)
7000e13c:	4852      	ldr	r0, [pc, #328]	@ (7000e288 <tcp_close_shutdown+0x1a8>)
7000e13e:	f005 fdef 	bl	70013d20 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
7000e142:	687b      	ldr	r3, [r7, #4]
7000e144:	6d18      	ldr	r0, [r3, #80]	@ 0x50
7000e146:	687b      	ldr	r3, [r7, #4]
7000e148:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
7000e14a:	687d      	ldr	r5, [r7, #4]
7000e14c:	687b      	ldr	r3, [r7, #4]
7000e14e:	3304      	adds	r3, #4
7000e150:	687a      	ldr	r2, [r7, #4]
7000e152:	8ad2      	ldrh	r2, [r2, #22]
7000e154:	6879      	ldr	r1, [r7, #4]
7000e156:	8b09      	ldrh	r1, [r1, #24]
7000e158:	9102      	str	r1, [sp, #8]
7000e15a:	9201      	str	r2, [sp, #4]
7000e15c:	9300      	str	r3, [sp, #0]
7000e15e:	462b      	mov	r3, r5
7000e160:	4622      	mov	r2, r4
7000e162:	4601      	mov	r1, r0
7000e164:	6878      	ldr	r0, [r7, #4]
7000e166:	f004 fe43 	bl	70012df0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
7000e16a:	6878      	ldr	r0, [r7, #4]
7000e16c:	f001 f88a 	bl	7000f284 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
7000e170:	4b47      	ldr	r3, [pc, #284]	@ (7000e290 <tcp_close_shutdown+0x1b0>)
7000e172:	681b      	ldr	r3, [r3, #0]
7000e174:	687a      	ldr	r2, [r7, #4]
7000e176:	429a      	cmp	r2, r3
7000e178:	d105      	bne.n	7000e186 <tcp_close_shutdown+0xa6>
7000e17a:	4b45      	ldr	r3, [pc, #276]	@ (7000e290 <tcp_close_shutdown+0x1b0>)
7000e17c:	681b      	ldr	r3, [r3, #0]
7000e17e:	68db      	ldr	r3, [r3, #12]
7000e180:	4a43      	ldr	r2, [pc, #268]	@ (7000e290 <tcp_close_shutdown+0x1b0>)
7000e182:	6013      	str	r3, [r2, #0]
7000e184:	e013      	b.n	7000e1ae <tcp_close_shutdown+0xce>
7000e186:	4b42      	ldr	r3, [pc, #264]	@ (7000e290 <tcp_close_shutdown+0x1b0>)
7000e188:	681b      	ldr	r3, [r3, #0]
7000e18a:	60fb      	str	r3, [r7, #12]
7000e18c:	e00c      	b.n	7000e1a8 <tcp_close_shutdown+0xc8>
7000e18e:	68fb      	ldr	r3, [r7, #12]
7000e190:	68db      	ldr	r3, [r3, #12]
7000e192:	687a      	ldr	r2, [r7, #4]
7000e194:	429a      	cmp	r2, r3
7000e196:	d104      	bne.n	7000e1a2 <tcp_close_shutdown+0xc2>
7000e198:	687b      	ldr	r3, [r7, #4]
7000e19a:	68da      	ldr	r2, [r3, #12]
7000e19c:	68fb      	ldr	r3, [r7, #12]
7000e19e:	60da      	str	r2, [r3, #12]
7000e1a0:	e005      	b.n	7000e1ae <tcp_close_shutdown+0xce>
7000e1a2:	68fb      	ldr	r3, [r7, #12]
7000e1a4:	68db      	ldr	r3, [r3, #12]
7000e1a6:	60fb      	str	r3, [r7, #12]
7000e1a8:	68fb      	ldr	r3, [r7, #12]
7000e1aa:	2b00      	cmp	r3, #0
7000e1ac:	d1ef      	bne.n	7000e18e <tcp_close_shutdown+0xae>
7000e1ae:	687b      	ldr	r3, [r7, #4]
7000e1b0:	2200      	movs	r2, #0
7000e1b2:	60da      	str	r2, [r3, #12]
7000e1b4:	4b37      	ldr	r3, [pc, #220]	@ (7000e294 <tcp_close_shutdown+0x1b4>)
7000e1b6:	2201      	movs	r2, #1
7000e1b8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
7000e1ba:	4b37      	ldr	r3, [pc, #220]	@ (7000e298 <tcp_close_shutdown+0x1b8>)
7000e1bc:	681b      	ldr	r3, [r3, #0]
7000e1be:	687a      	ldr	r2, [r7, #4]
7000e1c0:	429a      	cmp	r2, r3
7000e1c2:	d102      	bne.n	7000e1ca <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
7000e1c4:	f003 fd10 	bl	70011be8 <tcp_trigger_input_pcb_close>
7000e1c8:	e002      	b.n	7000e1d0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
7000e1ca:	6878      	ldr	r0, [r7, #4]
7000e1cc:	f7ff fed6 	bl	7000df7c <tcp_free>
      }
      return ERR_OK;
7000e1d0:	2300      	movs	r3, #0
7000e1d2:	e050      	b.n	7000e276 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
7000e1d4:	687b      	ldr	r3, [r7, #4]
7000e1d6:	7d1b      	ldrb	r3, [r3, #20]
7000e1d8:	2b02      	cmp	r3, #2
7000e1da:	d03b      	beq.n	7000e254 <tcp_close_shutdown+0x174>
7000e1dc:	2b02      	cmp	r3, #2
7000e1de:	dc44      	bgt.n	7000e26a <tcp_close_shutdown+0x18a>
7000e1e0:	2b00      	cmp	r3, #0
7000e1e2:	d002      	beq.n	7000e1ea <tcp_close_shutdown+0x10a>
7000e1e4:	2b01      	cmp	r3, #1
7000e1e6:	d02a      	beq.n	7000e23e <tcp_close_shutdown+0x15e>
7000e1e8:	e03f      	b.n	7000e26a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
7000e1ea:	687b      	ldr	r3, [r7, #4]
7000e1ec:	8adb      	ldrh	r3, [r3, #22]
7000e1ee:	2b00      	cmp	r3, #0
7000e1f0:	d021      	beq.n	7000e236 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
7000e1f2:	4b2a      	ldr	r3, [pc, #168]	@ (7000e29c <tcp_close_shutdown+0x1bc>)
7000e1f4:	681b      	ldr	r3, [r3, #0]
7000e1f6:	687a      	ldr	r2, [r7, #4]
7000e1f8:	429a      	cmp	r2, r3
7000e1fa:	d105      	bne.n	7000e208 <tcp_close_shutdown+0x128>
7000e1fc:	4b27      	ldr	r3, [pc, #156]	@ (7000e29c <tcp_close_shutdown+0x1bc>)
7000e1fe:	681b      	ldr	r3, [r3, #0]
7000e200:	68db      	ldr	r3, [r3, #12]
7000e202:	4a26      	ldr	r2, [pc, #152]	@ (7000e29c <tcp_close_shutdown+0x1bc>)
7000e204:	6013      	str	r3, [r2, #0]
7000e206:	e013      	b.n	7000e230 <tcp_close_shutdown+0x150>
7000e208:	4b24      	ldr	r3, [pc, #144]	@ (7000e29c <tcp_close_shutdown+0x1bc>)
7000e20a:	681b      	ldr	r3, [r3, #0]
7000e20c:	60bb      	str	r3, [r7, #8]
7000e20e:	e00c      	b.n	7000e22a <tcp_close_shutdown+0x14a>
7000e210:	68bb      	ldr	r3, [r7, #8]
7000e212:	68db      	ldr	r3, [r3, #12]
7000e214:	687a      	ldr	r2, [r7, #4]
7000e216:	429a      	cmp	r2, r3
7000e218:	d104      	bne.n	7000e224 <tcp_close_shutdown+0x144>
7000e21a:	687b      	ldr	r3, [r7, #4]
7000e21c:	68da      	ldr	r2, [r3, #12]
7000e21e:	68bb      	ldr	r3, [r7, #8]
7000e220:	60da      	str	r2, [r3, #12]
7000e222:	e005      	b.n	7000e230 <tcp_close_shutdown+0x150>
7000e224:	68bb      	ldr	r3, [r7, #8]
7000e226:	68db      	ldr	r3, [r3, #12]
7000e228:	60bb      	str	r3, [r7, #8]
7000e22a:	68bb      	ldr	r3, [r7, #8]
7000e22c:	2b00      	cmp	r3, #0
7000e22e:	d1ef      	bne.n	7000e210 <tcp_close_shutdown+0x130>
7000e230:	687b      	ldr	r3, [r7, #4]
7000e232:	2200      	movs	r2, #0
7000e234:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
7000e236:	6878      	ldr	r0, [r7, #4]
7000e238:	f7ff fea0 	bl	7000df7c <tcp_free>
      break;
7000e23c:	e01a      	b.n	7000e274 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
7000e23e:	6878      	ldr	r0, [r7, #4]
7000e240:	f7ff ff14 	bl	7000e06c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
7000e244:	6879      	ldr	r1, [r7, #4]
7000e246:	4816      	ldr	r0, [pc, #88]	@ (7000e2a0 <tcp_close_shutdown+0x1c0>)
7000e248:	f001 f85e 	bl	7000f308 <tcp_pcb_remove>
      tcp_free_listen(pcb);
7000e24c:	6878      	ldr	r0, [r7, #4]
7000e24e:	f7ff feb1 	bl	7000dfb4 <tcp_free_listen>
      break;
7000e252:	e00f      	b.n	7000e274 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
7000e254:	6879      	ldr	r1, [r7, #4]
7000e256:	480e      	ldr	r0, [pc, #56]	@ (7000e290 <tcp_close_shutdown+0x1b0>)
7000e258:	f001 f856 	bl	7000f308 <tcp_pcb_remove>
7000e25c:	4b0d      	ldr	r3, [pc, #52]	@ (7000e294 <tcp_close_shutdown+0x1b4>)
7000e25e:	2201      	movs	r2, #1
7000e260:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
7000e262:	6878      	ldr	r0, [r7, #4]
7000e264:	f7ff fe8a 	bl	7000df7c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
7000e268:	e004      	b.n	7000e274 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
7000e26a:	6878      	ldr	r0, [r7, #4]
7000e26c:	f000 f81a 	bl	7000e2a4 <tcp_close_shutdown_fin>
7000e270:	4603      	mov	r3, r0
7000e272:	e000      	b.n	7000e276 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
7000e274:	2300      	movs	r3, #0
}
7000e276:	4618      	mov	r0, r3
7000e278:	3710      	adds	r7, #16
7000e27a:	46bd      	mov	sp, r7
7000e27c:	bdb0      	pop	{r4, r5, r7, pc}
7000e27e:	bf00      	nop
7000e280:	70015c60 	.word	0x70015c60
7000e284:	70015d60 	.word	0x70015d60
7000e288:	70015cd0 	.word	0x70015cd0
7000e28c:	70015d80 	.word	0x70015d80
7000e290:	24008484 	.word	0x24008484
7000e294:	2400848c 	.word	0x2400848c
7000e298:	240084c4 	.word	0x240084c4
7000e29c:	2400847c 	.word	0x2400847c
7000e2a0:	24008480 	.word	0x24008480

7000e2a4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
7000e2a4:	b580      	push	{r7, lr}
7000e2a6:	b084      	sub	sp, #16
7000e2a8:	af00      	add	r7, sp, #0
7000e2aa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
7000e2ac:	687b      	ldr	r3, [r7, #4]
7000e2ae:	2b00      	cmp	r3, #0
7000e2b0:	d106      	bne.n	7000e2c0 <tcp_close_shutdown_fin+0x1c>
7000e2b2:	4b2e      	ldr	r3, [pc, #184]	@ (7000e36c <tcp_close_shutdown_fin+0xc8>)
7000e2b4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
7000e2b8:	492d      	ldr	r1, [pc, #180]	@ (7000e370 <tcp_close_shutdown_fin+0xcc>)
7000e2ba:	482e      	ldr	r0, [pc, #184]	@ (7000e374 <tcp_close_shutdown_fin+0xd0>)
7000e2bc:	f005 fd30 	bl	70013d20 <iprintf>

  switch (pcb->state) {
7000e2c0:	687b      	ldr	r3, [r7, #4]
7000e2c2:	7d1b      	ldrb	r3, [r3, #20]
7000e2c4:	2b07      	cmp	r3, #7
7000e2c6:	d020      	beq.n	7000e30a <tcp_close_shutdown_fin+0x66>
7000e2c8:	2b07      	cmp	r3, #7
7000e2ca:	dc2b      	bgt.n	7000e324 <tcp_close_shutdown_fin+0x80>
7000e2cc:	2b03      	cmp	r3, #3
7000e2ce:	d002      	beq.n	7000e2d6 <tcp_close_shutdown_fin+0x32>
7000e2d0:	2b04      	cmp	r3, #4
7000e2d2:	d00d      	beq.n	7000e2f0 <tcp_close_shutdown_fin+0x4c>
7000e2d4:	e026      	b.n	7000e324 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
7000e2d6:	6878      	ldr	r0, [r7, #4]
7000e2d8:	f003 fe98 	bl	7001200c <tcp_send_fin>
7000e2dc:	4603      	mov	r3, r0
7000e2de:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
7000e2e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
7000e2e4:	2b00      	cmp	r3, #0
7000e2e6:	d11f      	bne.n	7000e328 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
7000e2e8:	687b      	ldr	r3, [r7, #4]
7000e2ea:	2205      	movs	r2, #5
7000e2ec:	751a      	strb	r2, [r3, #20]
      }
      break;
7000e2ee:	e01b      	b.n	7000e328 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
7000e2f0:	6878      	ldr	r0, [r7, #4]
7000e2f2:	f003 fe8b 	bl	7001200c <tcp_send_fin>
7000e2f6:	4603      	mov	r3, r0
7000e2f8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
7000e2fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
7000e2fe:	2b00      	cmp	r3, #0
7000e300:	d114      	bne.n	7000e32c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
7000e302:	687b      	ldr	r3, [r7, #4]
7000e304:	2205      	movs	r2, #5
7000e306:	751a      	strb	r2, [r3, #20]
      }
      break;
7000e308:	e010      	b.n	7000e32c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
7000e30a:	6878      	ldr	r0, [r7, #4]
7000e30c:	f003 fe7e 	bl	7001200c <tcp_send_fin>
7000e310:	4603      	mov	r3, r0
7000e312:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
7000e314:	f997 300f 	ldrsb.w	r3, [r7, #15]
7000e318:	2b00      	cmp	r3, #0
7000e31a:	d109      	bne.n	7000e330 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
7000e31c:	687b      	ldr	r3, [r7, #4]
7000e31e:	2209      	movs	r2, #9
7000e320:	751a      	strb	r2, [r3, #20]
      }
      break;
7000e322:	e005      	b.n	7000e330 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
7000e324:	2300      	movs	r3, #0
7000e326:	e01c      	b.n	7000e362 <tcp_close_shutdown_fin+0xbe>
      break;
7000e328:	bf00      	nop
7000e32a:	e002      	b.n	7000e332 <tcp_close_shutdown_fin+0x8e>
      break;
7000e32c:	bf00      	nop
7000e32e:	e000      	b.n	7000e332 <tcp_close_shutdown_fin+0x8e>
      break;
7000e330:	bf00      	nop
  }

  if (err == ERR_OK) {
7000e332:	f997 300f 	ldrsb.w	r3, [r7, #15]
7000e336:	2b00      	cmp	r3, #0
7000e338:	d103      	bne.n	7000e342 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
7000e33a:	6878      	ldr	r0, [r7, #4]
7000e33c:	f003 ffa4 	bl	70012288 <tcp_output>
7000e340:	e00d      	b.n	7000e35e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
7000e342:	f997 300f 	ldrsb.w	r3, [r7, #15]
7000e346:	f1b3 3fff 	cmp.w	r3, #4294967295
7000e34a:	d108      	bne.n	7000e35e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
7000e34c:	687b      	ldr	r3, [r7, #4]
7000e34e:	8b5b      	ldrh	r3, [r3, #26]
7000e350:	f043 0308 	orr.w	r3, r3, #8
7000e354:	b29a      	uxth	r2, r3
7000e356:	687b      	ldr	r3, [r7, #4]
7000e358:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
7000e35a:	2300      	movs	r3, #0
7000e35c:	e001      	b.n	7000e362 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
7000e35e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
7000e362:	4618      	mov	r0, r3
7000e364:	3710      	adds	r7, #16
7000e366:	46bd      	mov	sp, r7
7000e368:	bd80      	pop	{r7, pc}
7000e36a:	bf00      	nop
7000e36c:	70015c60 	.word	0x70015c60
7000e370:	70015d3c 	.word	0x70015d3c
7000e374:	70015cd0 	.word	0x70015cd0

7000e378 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
7000e378:	b580      	push	{r7, lr}
7000e37a:	b082      	sub	sp, #8
7000e37c:	af00      	add	r7, sp, #0
7000e37e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
7000e380:	687b      	ldr	r3, [r7, #4]
7000e382:	2b00      	cmp	r3, #0
7000e384:	d102      	bne.n	7000e38c <tcp_close+0x14>
7000e386:	f06f 030f 	mvn.w	r3, #15
7000e38a:	e00f      	b.n	7000e3ac <tcp_close+0x34>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
7000e38c:	687b      	ldr	r3, [r7, #4]
7000e38e:	7d1b      	ldrb	r3, [r3, #20]
7000e390:	2b01      	cmp	r3, #1
7000e392:	d006      	beq.n	7000e3a2 <tcp_close+0x2a>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
7000e394:	687b      	ldr	r3, [r7, #4]
7000e396:	8b5b      	ldrh	r3, [r3, #26]
7000e398:	f043 0310 	orr.w	r3, r3, #16
7000e39c:	b29a      	uxth	r2, r3
7000e39e:	687b      	ldr	r3, [r7, #4]
7000e3a0:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
7000e3a2:	2101      	movs	r1, #1
7000e3a4:	6878      	ldr	r0, [r7, #4]
7000e3a6:	f7ff fe9b 	bl	7000e0e0 <tcp_close_shutdown>
7000e3aa:	4603      	mov	r3, r0
}
7000e3ac:	4618      	mov	r0, r3
7000e3ae:	3708      	adds	r7, #8
7000e3b0:	46bd      	mov	sp, r7
7000e3b2:	bd80      	pop	{r7, pc}

7000e3b4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
7000e3b4:	b580      	push	{r7, lr}
7000e3b6:	b08e      	sub	sp, #56	@ 0x38
7000e3b8:	af04      	add	r7, sp, #16
7000e3ba:	6078      	str	r0, [r7, #4]
7000e3bc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
7000e3be:	687b      	ldr	r3, [r7, #4]
7000e3c0:	2b00      	cmp	r3, #0
7000e3c2:	f000 809a 	beq.w	7000e4fa <tcp_abandon+0x146>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
7000e3c6:	687b      	ldr	r3, [r7, #4]
7000e3c8:	7d1b      	ldrb	r3, [r3, #20]
7000e3ca:	2b01      	cmp	r3, #1
7000e3cc:	d106      	bne.n	7000e3dc <tcp_abandon+0x28>
7000e3ce:	4b4c      	ldr	r3, [pc, #304]	@ (7000e500 <tcp_abandon+0x14c>)
7000e3d0:	f44f 7210 	mov.w	r2, #576	@ 0x240
7000e3d4:	494b      	ldr	r1, [pc, #300]	@ (7000e504 <tcp_abandon+0x150>)
7000e3d6:	484c      	ldr	r0, [pc, #304]	@ (7000e508 <tcp_abandon+0x154>)
7000e3d8:	f005 fca2 	bl	70013d20 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
7000e3dc:	687b      	ldr	r3, [r7, #4]
7000e3de:	7d1b      	ldrb	r3, [r3, #20]
7000e3e0:	2b0a      	cmp	r3, #10
7000e3e2:	d107      	bne.n	7000e3f4 <tcp_abandon+0x40>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
7000e3e4:	6879      	ldr	r1, [r7, #4]
7000e3e6:	4849      	ldr	r0, [pc, #292]	@ (7000e50c <tcp_abandon+0x158>)
7000e3e8:	f000 ff8e 	bl	7000f308 <tcp_pcb_remove>
    tcp_free(pcb);
7000e3ec:	6878      	ldr	r0, [r7, #4]
7000e3ee:	f7ff fdc5 	bl	7000df7c <tcp_free>
7000e3f2:	e082      	b.n	7000e4fa <tcp_abandon+0x146>
  } else {
    int send_rst = 0;
7000e3f4:	2300      	movs	r3, #0
7000e3f6:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
7000e3f8:	2300      	movs	r3, #0
7000e3fa:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
7000e3fc:	687b      	ldr	r3, [r7, #4]
7000e3fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
7000e400:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
7000e402:	687b      	ldr	r3, [r7, #4]
7000e404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
7000e406:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
7000e408:	687b      	ldr	r3, [r7, #4]
7000e40a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
7000e40e:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
7000e410:	687b      	ldr	r3, [r7, #4]
7000e412:	691b      	ldr	r3, [r3, #16]
7000e414:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
7000e416:	687b      	ldr	r3, [r7, #4]
7000e418:	7d1b      	ldrb	r3, [r3, #20]
7000e41a:	2b00      	cmp	r3, #0
7000e41c:	d126      	bne.n	7000e46c <tcp_abandon+0xb8>
      if (pcb->local_port != 0) {
7000e41e:	687b      	ldr	r3, [r7, #4]
7000e420:	8adb      	ldrh	r3, [r3, #22]
7000e422:	2b00      	cmp	r3, #0
7000e424:	d02e      	beq.n	7000e484 <tcp_abandon+0xd0>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
7000e426:	4b3a      	ldr	r3, [pc, #232]	@ (7000e510 <tcp_abandon+0x15c>)
7000e428:	681b      	ldr	r3, [r3, #0]
7000e42a:	687a      	ldr	r2, [r7, #4]
7000e42c:	429a      	cmp	r2, r3
7000e42e:	d105      	bne.n	7000e43c <tcp_abandon+0x88>
7000e430:	4b37      	ldr	r3, [pc, #220]	@ (7000e510 <tcp_abandon+0x15c>)
7000e432:	681b      	ldr	r3, [r3, #0]
7000e434:	68db      	ldr	r3, [r3, #12]
7000e436:	4a36      	ldr	r2, [pc, #216]	@ (7000e510 <tcp_abandon+0x15c>)
7000e438:	6013      	str	r3, [r2, #0]
7000e43a:	e013      	b.n	7000e464 <tcp_abandon+0xb0>
7000e43c:	4b34      	ldr	r3, [pc, #208]	@ (7000e510 <tcp_abandon+0x15c>)
7000e43e:	681b      	ldr	r3, [r3, #0]
7000e440:	61fb      	str	r3, [r7, #28]
7000e442:	e00c      	b.n	7000e45e <tcp_abandon+0xaa>
7000e444:	69fb      	ldr	r3, [r7, #28]
7000e446:	68db      	ldr	r3, [r3, #12]
7000e448:	687a      	ldr	r2, [r7, #4]
7000e44a:	429a      	cmp	r2, r3
7000e44c:	d104      	bne.n	7000e458 <tcp_abandon+0xa4>
7000e44e:	687b      	ldr	r3, [r7, #4]
7000e450:	68da      	ldr	r2, [r3, #12]
7000e452:	69fb      	ldr	r3, [r7, #28]
7000e454:	60da      	str	r2, [r3, #12]
7000e456:	e005      	b.n	7000e464 <tcp_abandon+0xb0>
7000e458:	69fb      	ldr	r3, [r7, #28]
7000e45a:	68db      	ldr	r3, [r3, #12]
7000e45c:	61fb      	str	r3, [r7, #28]
7000e45e:	69fb      	ldr	r3, [r7, #28]
7000e460:	2b00      	cmp	r3, #0
7000e462:	d1ef      	bne.n	7000e444 <tcp_abandon+0x90>
7000e464:	687b      	ldr	r3, [r7, #4]
7000e466:	2200      	movs	r2, #0
7000e468:	60da      	str	r2, [r3, #12]
7000e46a:	e00b      	b.n	7000e484 <tcp_abandon+0xd0>
      }
    } else {
      send_rst = reset;
7000e46c:	683b      	ldr	r3, [r7, #0]
7000e46e:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
7000e470:	687b      	ldr	r3, [r7, #4]
7000e472:	8adb      	ldrh	r3, [r3, #22]
7000e474:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
7000e476:	6879      	ldr	r1, [r7, #4]
7000e478:	4826      	ldr	r0, [pc, #152]	@ (7000e514 <tcp_abandon+0x160>)
7000e47a:	f000 ff45 	bl	7000f308 <tcp_pcb_remove>
7000e47e:	4b26      	ldr	r3, [pc, #152]	@ (7000e518 <tcp_abandon+0x164>)
7000e480:	2201      	movs	r2, #1
7000e482:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
7000e484:	687b      	ldr	r3, [r7, #4]
7000e486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000e488:	2b00      	cmp	r3, #0
7000e48a:	d004      	beq.n	7000e496 <tcp_abandon+0xe2>
      tcp_segs_free(pcb->unacked);
7000e48c:	687b      	ldr	r3, [r7, #4]
7000e48e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000e490:	4618      	mov	r0, r3
7000e492:	f000 fd04 	bl	7000ee9e <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
7000e496:	687b      	ldr	r3, [r7, #4]
7000e498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7000e49a:	2b00      	cmp	r3, #0
7000e49c:	d004      	beq.n	7000e4a8 <tcp_abandon+0xf4>
      tcp_segs_free(pcb->unsent);
7000e49e:	687b      	ldr	r3, [r7, #4]
7000e4a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7000e4a2:	4618      	mov	r0, r3
7000e4a4:	f000 fcfb 	bl	7000ee9e <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
7000e4a8:	687b      	ldr	r3, [r7, #4]
7000e4aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000e4ac:	2b00      	cmp	r3, #0
7000e4ae:	d004      	beq.n	7000e4ba <tcp_abandon+0x106>
      tcp_segs_free(pcb->ooseq);
7000e4b0:	687b      	ldr	r3, [r7, #4]
7000e4b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000e4b4:	4618      	mov	r0, r3
7000e4b6:	f000 fcf2 	bl	7000ee9e <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
7000e4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000e4bc:	2b00      	cmp	r3, #0
7000e4be:	d00e      	beq.n	7000e4de <tcp_abandon+0x12a>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
7000e4c0:	6879      	ldr	r1, [r7, #4]
7000e4c2:	687b      	ldr	r3, [r7, #4]
7000e4c4:	3304      	adds	r3, #4
7000e4c6:	687a      	ldr	r2, [r7, #4]
7000e4c8:	8b12      	ldrh	r2, [r2, #24]
7000e4ca:	9202      	str	r2, [sp, #8]
7000e4cc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
7000e4ce:	9201      	str	r2, [sp, #4]
7000e4d0:	9300      	str	r3, [sp, #0]
7000e4d2:	460b      	mov	r3, r1
7000e4d4:	697a      	ldr	r2, [r7, #20]
7000e4d6:	69b9      	ldr	r1, [r7, #24]
7000e4d8:	6878      	ldr	r0, [r7, #4]
7000e4da:	f004 fc89 	bl	70012df0 <tcp_rst>
    }
    last_state = pcb->state;
7000e4de:	687b      	ldr	r3, [r7, #4]
7000e4e0:	7d1b      	ldrb	r3, [r3, #20]
7000e4e2:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
7000e4e4:	6878      	ldr	r0, [r7, #4]
7000e4e6:	f7ff fd49 	bl	7000df7c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
7000e4ea:	693b      	ldr	r3, [r7, #16]
7000e4ec:	2b00      	cmp	r3, #0
7000e4ee:	d004      	beq.n	7000e4fa <tcp_abandon+0x146>
7000e4f0:	693b      	ldr	r3, [r7, #16]
7000e4f2:	f06f 010c 	mvn.w	r1, #12
7000e4f6:	68f8      	ldr	r0, [r7, #12]
7000e4f8:	4798      	blx	r3
  }
}
7000e4fa:	3728      	adds	r7, #40	@ 0x28
7000e4fc:	46bd      	mov	sp, r7
7000e4fe:	bd80      	pop	{r7, pc}
7000e500:	70015c60 	.word	0x70015c60
7000e504:	70015d9c 	.word	0x70015d9c
7000e508:	70015cd0 	.word	0x70015cd0
7000e50c:	24008488 	.word	0x24008488
7000e510:	2400847c 	.word	0x2400847c
7000e514:	24008484 	.word	0x24008484
7000e518:	2400848c 	.word	0x2400848c

7000e51c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
7000e51c:	b580      	push	{r7, lr}
7000e51e:	b082      	sub	sp, #8
7000e520:	af00      	add	r7, sp, #0
7000e522:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
7000e524:	2101      	movs	r1, #1
7000e526:	6878      	ldr	r0, [r7, #4]
7000e528:	f7ff ff44 	bl	7000e3b4 <tcp_abandon>
}
7000e52c:	bf00      	nop
7000e52e:	3708      	adds	r7, #8
7000e530:	46bd      	mov	sp, r7
7000e532:	bd80      	pop	{r7, pc}

7000e534 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
7000e534:	b580      	push	{r7, lr}
7000e536:	b084      	sub	sp, #16
7000e538:	af00      	add	r7, sp, #0
7000e53a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
7000e53c:	687b      	ldr	r3, [r7, #4]
7000e53e:	2b00      	cmp	r3, #0
7000e540:	d106      	bne.n	7000e550 <tcp_update_rcv_ann_wnd+0x1c>
7000e542:	4b25      	ldr	r3, [pc, #148]	@ (7000e5d8 <tcp_update_rcv_ann_wnd+0xa4>)
7000e544:	f240 32a7 	movw	r2, #935	@ 0x3a7
7000e548:	4924      	ldr	r1, [pc, #144]	@ (7000e5dc <tcp_update_rcv_ann_wnd+0xa8>)
7000e54a:	4825      	ldr	r0, [pc, #148]	@ (7000e5e0 <tcp_update_rcv_ann_wnd+0xac>)
7000e54c:	f005 fbe8 	bl	70013d20 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
7000e550:	687b      	ldr	r3, [r7, #4]
7000e552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
7000e554:	687a      	ldr	r2, [r7, #4]
7000e556:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
7000e558:	4413      	add	r3, r2
7000e55a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
7000e55c:	687b      	ldr	r3, [r7, #4]
7000e55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000e560:	687a      	ldr	r2, [r7, #4]
7000e562:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
7000e564:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
7000e568:	bf28      	it	cs
7000e56a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
7000e56e:	b292      	uxth	r2, r2
7000e570:	4413      	add	r3, r2
7000e572:	68fa      	ldr	r2, [r7, #12]
7000e574:	1ad3      	subs	r3, r2, r3
7000e576:	2b00      	cmp	r3, #0
7000e578:	db08      	blt.n	7000e58c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
7000e57a:	687b      	ldr	r3, [r7, #4]
7000e57c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
7000e57e:	687b      	ldr	r3, [r7, #4]
7000e580:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
7000e582:	687b      	ldr	r3, [r7, #4]
7000e584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000e586:	68fa      	ldr	r2, [r7, #12]
7000e588:	1ad3      	subs	r3, r2, r3
7000e58a:	e020      	b.n	7000e5ce <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
7000e58c:	687b      	ldr	r3, [r7, #4]
7000e58e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
7000e590:	687b      	ldr	r3, [r7, #4]
7000e592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000e594:	1ad3      	subs	r3, r2, r3
7000e596:	2b00      	cmp	r3, #0
7000e598:	dd03      	ble.n	7000e5a2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
7000e59a:	687b      	ldr	r3, [r7, #4]
7000e59c:	2200      	movs	r2, #0
7000e59e:	855a      	strh	r2, [r3, #42]	@ 0x2a
7000e5a0:	e014      	b.n	7000e5cc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
7000e5a2:	687b      	ldr	r3, [r7, #4]
7000e5a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7000e5a6:	687b      	ldr	r3, [r7, #4]
7000e5a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
7000e5aa:	1ad3      	subs	r3, r2, r3
7000e5ac:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
7000e5ae:	68bb      	ldr	r3, [r7, #8]
7000e5b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
7000e5b4:	d306      	bcc.n	7000e5c4 <tcp_update_rcv_ann_wnd+0x90>
7000e5b6:	4b08      	ldr	r3, [pc, #32]	@ (7000e5d8 <tcp_update_rcv_ann_wnd+0xa4>)
7000e5b8:	f240 32b7 	movw	r2, #951	@ 0x3b7
7000e5bc:	4909      	ldr	r1, [pc, #36]	@ (7000e5e4 <tcp_update_rcv_ann_wnd+0xb0>)
7000e5be:	4808      	ldr	r0, [pc, #32]	@ (7000e5e0 <tcp_update_rcv_ann_wnd+0xac>)
7000e5c0:	f005 fbae 	bl	70013d20 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
7000e5c4:	68bb      	ldr	r3, [r7, #8]
7000e5c6:	b29a      	uxth	r2, r3
7000e5c8:	687b      	ldr	r3, [r7, #4]
7000e5ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
7000e5cc:	2300      	movs	r3, #0
  }
}
7000e5ce:	4618      	mov	r0, r3
7000e5d0:	3710      	adds	r7, #16
7000e5d2:	46bd      	mov	sp, r7
7000e5d4:	bd80      	pop	{r7, pc}
7000e5d6:	bf00      	nop
7000e5d8:	70015c60 	.word	0x70015c60
7000e5dc:	70015df0 	.word	0x70015df0
7000e5e0:	70015cd0 	.word	0x70015cd0
7000e5e4:	70015e14 	.word	0x70015e14

7000e5e8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
7000e5e8:	b580      	push	{r7, lr}
7000e5ea:	b084      	sub	sp, #16
7000e5ec:	af00      	add	r7, sp, #0
7000e5ee:	6078      	str	r0, [r7, #4]
7000e5f0:	460b      	mov	r3, r1
7000e5f2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
7000e5f4:	687b      	ldr	r3, [r7, #4]
7000e5f6:	2b00      	cmp	r3, #0
7000e5f8:	d032      	beq.n	7000e660 <tcp_recved+0x78>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
7000e5fa:	687b      	ldr	r3, [r7, #4]
7000e5fc:	7d1b      	ldrb	r3, [r3, #20]
7000e5fe:	2b01      	cmp	r3, #1
7000e600:	d106      	bne.n	7000e610 <tcp_recved+0x28>
7000e602:	4b19      	ldr	r3, [pc, #100]	@ (7000e668 <tcp_recved+0x80>)
7000e604:	f240 32d3 	movw	r2, #979	@ 0x3d3
7000e608:	4918      	ldr	r1, [pc, #96]	@ (7000e66c <tcp_recved+0x84>)
7000e60a:	4819      	ldr	r0, [pc, #100]	@ (7000e670 <tcp_recved+0x88>)
7000e60c:	f005 fb88 	bl	70013d20 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
7000e610:	687b      	ldr	r3, [r7, #4]
7000e612:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
7000e614:	887b      	ldrh	r3, [r7, #2]
7000e616:	4413      	add	r3, r2
7000e618:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
7000e61a:	89fb      	ldrh	r3, [r7, #14]
7000e61c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
7000e620:	d804      	bhi.n	7000e62c <tcp_recved+0x44>
7000e622:	687b      	ldr	r3, [r7, #4]
7000e624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
7000e626:	89fa      	ldrh	r2, [r7, #14]
7000e628:	429a      	cmp	r2, r3
7000e62a:	d204      	bcs.n	7000e636 <tcp_recved+0x4e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
7000e62c:	687b      	ldr	r3, [r7, #4]
7000e62e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
7000e632:	851a      	strh	r2, [r3, #40]	@ 0x28
7000e634:	e002      	b.n	7000e63c <tcp_recved+0x54>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
7000e636:	687b      	ldr	r3, [r7, #4]
7000e638:	89fa      	ldrh	r2, [r7, #14]
7000e63a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
7000e63c:	6878      	ldr	r0, [r7, #4]
7000e63e:	f7ff ff79 	bl	7000e534 <tcp_update_rcv_ann_wnd>
7000e642:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
7000e644:	68bb      	ldr	r3, [r7, #8]
7000e646:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
7000e64a:	d309      	bcc.n	7000e660 <tcp_recved+0x78>
    tcp_ack_now(pcb);
7000e64c:	687b      	ldr	r3, [r7, #4]
7000e64e:	8b5b      	ldrh	r3, [r3, #26]
7000e650:	f043 0302 	orr.w	r3, r3, #2
7000e654:	b29a      	uxth	r2, r3
7000e656:	687b      	ldr	r3, [r7, #4]
7000e658:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
7000e65a:	6878      	ldr	r0, [r7, #4]
7000e65c:	f003 fe14 	bl	70012288 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
7000e660:	3710      	adds	r7, #16
7000e662:	46bd      	mov	sp, r7
7000e664:	bd80      	pop	{r7, pc}
7000e666:	bf00      	nop
7000e668:	70015c60 	.word	0x70015c60
7000e66c:	70015e30 	.word	0x70015e30
7000e670:	70015cd0 	.word	0x70015cd0

7000e674 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
7000e674:	b5b0      	push	{r4, r5, r7, lr}
7000e676:	b090      	sub	sp, #64	@ 0x40
7000e678:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
7000e67a:	2300      	movs	r3, #0
7000e67c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
7000e680:	4b95      	ldr	r3, [pc, #596]	@ (7000e8d8 <tcp_slowtmr+0x264>)
7000e682:	681b      	ldr	r3, [r3, #0]
7000e684:	3301      	adds	r3, #1
7000e686:	4a94      	ldr	r2, [pc, #592]	@ (7000e8d8 <tcp_slowtmr+0x264>)
7000e688:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
7000e68a:	4b94      	ldr	r3, [pc, #592]	@ (7000e8dc <tcp_slowtmr+0x268>)
7000e68c:	781b      	ldrb	r3, [r3, #0]
7000e68e:	3301      	adds	r3, #1
7000e690:	b2da      	uxtb	r2, r3
7000e692:	4b92      	ldr	r3, [pc, #584]	@ (7000e8dc <tcp_slowtmr+0x268>)
7000e694:	701a      	strb	r2, [r3, #0]
7000e696:	e000      	b.n	7000e69a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
7000e698:	bf00      	nop
  prev = NULL;
7000e69a:	2300      	movs	r3, #0
7000e69c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
7000e69e:	4b90      	ldr	r3, [pc, #576]	@ (7000e8e0 <tcp_slowtmr+0x26c>)
7000e6a0:	681b      	ldr	r3, [r3, #0]
7000e6a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
7000e6a4:	e29d      	b.n	7000ebe2 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
7000e6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e6a8:	7d1b      	ldrb	r3, [r3, #20]
7000e6aa:	2b00      	cmp	r3, #0
7000e6ac:	d106      	bne.n	7000e6bc <tcp_slowtmr+0x48>
7000e6ae:	4b8d      	ldr	r3, [pc, #564]	@ (7000e8e4 <tcp_slowtmr+0x270>)
7000e6b0:	f240 42bf 	movw	r2, #1215	@ 0x4bf
7000e6b4:	498c      	ldr	r1, [pc, #560]	@ (7000e8e8 <tcp_slowtmr+0x274>)
7000e6b6:	488d      	ldr	r0, [pc, #564]	@ (7000e8ec <tcp_slowtmr+0x278>)
7000e6b8:	f005 fb32 	bl	70013d20 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
7000e6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e6be:	7d1b      	ldrb	r3, [r3, #20]
7000e6c0:	2b01      	cmp	r3, #1
7000e6c2:	d106      	bne.n	7000e6d2 <tcp_slowtmr+0x5e>
7000e6c4:	4b87      	ldr	r3, [pc, #540]	@ (7000e8e4 <tcp_slowtmr+0x270>)
7000e6c6:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
7000e6ca:	4989      	ldr	r1, [pc, #548]	@ (7000e8f0 <tcp_slowtmr+0x27c>)
7000e6cc:	4887      	ldr	r0, [pc, #540]	@ (7000e8ec <tcp_slowtmr+0x278>)
7000e6ce:	f005 fb27 	bl	70013d20 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
7000e6d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e6d4:	7d1b      	ldrb	r3, [r3, #20]
7000e6d6:	2b0a      	cmp	r3, #10
7000e6d8:	d106      	bne.n	7000e6e8 <tcp_slowtmr+0x74>
7000e6da:	4b82      	ldr	r3, [pc, #520]	@ (7000e8e4 <tcp_slowtmr+0x270>)
7000e6dc:	f240 42c1 	movw	r2, #1217	@ 0x4c1
7000e6e0:	4984      	ldr	r1, [pc, #528]	@ (7000e8f4 <tcp_slowtmr+0x280>)
7000e6e2:	4882      	ldr	r0, [pc, #520]	@ (7000e8ec <tcp_slowtmr+0x278>)
7000e6e4:	f005 fb1c 	bl	70013d20 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
7000e6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e6ea:	7f9a      	ldrb	r2, [r3, #30]
7000e6ec:	4b7b      	ldr	r3, [pc, #492]	@ (7000e8dc <tcp_slowtmr+0x268>)
7000e6ee:	781b      	ldrb	r3, [r3, #0]
7000e6f0:	429a      	cmp	r2, r3
7000e6f2:	d105      	bne.n	7000e700 <tcp_slowtmr+0x8c>
      prev = pcb;
7000e6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e6f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
7000e6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e6fa:	68db      	ldr	r3, [r3, #12]
7000e6fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
7000e6fe:	e270      	b.n	7000ebe2 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
7000e700:	4b76      	ldr	r3, [pc, #472]	@ (7000e8dc <tcp_slowtmr+0x268>)
7000e702:	781a      	ldrb	r2, [r3, #0]
7000e704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e706:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
7000e708:	2300      	movs	r3, #0
7000e70a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
7000e70e:	2300      	movs	r3, #0
7000e710:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
7000e714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e716:	7d1b      	ldrb	r3, [r3, #20]
7000e718:	2b02      	cmp	r3, #2
7000e71a:	d10a      	bne.n	7000e732 <tcp_slowtmr+0xbe>
7000e71c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e71e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
7000e722:	2b05      	cmp	r3, #5
7000e724:	d905      	bls.n	7000e732 <tcp_slowtmr+0xbe>
      ++pcb_remove;
7000e726:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000e72a:	3301      	adds	r3, #1
7000e72c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
7000e730:	e11e      	b.n	7000e970 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
7000e732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e734:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
7000e738:	2b0b      	cmp	r3, #11
7000e73a:	d905      	bls.n	7000e748 <tcp_slowtmr+0xd4>
      ++pcb_remove;
7000e73c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000e740:	3301      	adds	r3, #1
7000e742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
7000e746:	e113      	b.n	7000e970 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
7000e748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e74a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
7000e74e:	2b00      	cmp	r3, #0
7000e750:	d075      	beq.n	7000e83e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
7000e752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000e756:	2b00      	cmp	r3, #0
7000e758:	d006      	beq.n	7000e768 <tcp_slowtmr+0xf4>
7000e75a:	4b62      	ldr	r3, [pc, #392]	@ (7000e8e4 <tcp_slowtmr+0x270>)
7000e75c:	f240 42d5 	movw	r2, #1237	@ 0x4d5
7000e760:	4965      	ldr	r1, [pc, #404]	@ (7000e8f8 <tcp_slowtmr+0x284>)
7000e762:	4862      	ldr	r0, [pc, #392]	@ (7000e8ec <tcp_slowtmr+0x278>)
7000e764:	f005 fadc 	bl	70013d20 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
7000e768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e76a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7000e76c:	2b00      	cmp	r3, #0
7000e76e:	d106      	bne.n	7000e77e <tcp_slowtmr+0x10a>
7000e770:	4b5c      	ldr	r3, [pc, #368]	@ (7000e8e4 <tcp_slowtmr+0x270>)
7000e772:	f240 42d6 	movw	r2, #1238	@ 0x4d6
7000e776:	4961      	ldr	r1, [pc, #388]	@ (7000e8fc <tcp_slowtmr+0x288>)
7000e778:	485c      	ldr	r0, [pc, #368]	@ (7000e8ec <tcp_slowtmr+0x278>)
7000e77a:	f005 fad1 	bl	70013d20 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
7000e77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e780:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
7000e784:	2b0b      	cmp	r3, #11
7000e786:	d905      	bls.n	7000e794 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
7000e788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000e78c:	3301      	adds	r3, #1
7000e78e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
7000e792:	e0ed      	b.n	7000e970 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
7000e794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e796:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
7000e79a:	3b01      	subs	r3, #1
7000e79c:	4a58      	ldr	r2, [pc, #352]	@ (7000e900 <tcp_slowtmr+0x28c>)
7000e79e:	5cd3      	ldrb	r3, [r2, r3]
7000e7a0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
7000e7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e7a4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
7000e7a8:	7c7a      	ldrb	r2, [r7, #17]
7000e7aa:	429a      	cmp	r2, r3
7000e7ac:	d907      	bls.n	7000e7be <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
7000e7ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e7b0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
7000e7b4:	3301      	adds	r3, #1
7000e7b6:	b2da      	uxtb	r2, r3
7000e7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e7ba:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
7000e7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e7c0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
7000e7c4:	7c7a      	ldrb	r2, [r7, #17]
7000e7c6:	429a      	cmp	r2, r3
7000e7c8:	f200 80d2 	bhi.w	7000e970 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
7000e7cc:	2301      	movs	r3, #1
7000e7ce:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
7000e7d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e7d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
7000e7d6:	2b00      	cmp	r3, #0
7000e7d8:	d108      	bne.n	7000e7ec <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
7000e7da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000e7dc:	f004 fbfc 	bl	70012fd8 <tcp_zero_window_probe>
7000e7e0:	4603      	mov	r3, r0
7000e7e2:	2b00      	cmp	r3, #0
7000e7e4:	d014      	beq.n	7000e810 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
7000e7e6:	2300      	movs	r3, #0
7000e7e8:	623b      	str	r3, [r7, #32]
7000e7ea:	e011      	b.n	7000e810 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
7000e7ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e7ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
7000e7f2:	4619      	mov	r1, r3
7000e7f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000e7f6:	f003 fabf 	bl	70011d78 <tcp_split_unsent_seg>
7000e7fa:	4603      	mov	r3, r0
7000e7fc:	2b00      	cmp	r3, #0
7000e7fe:	d107      	bne.n	7000e810 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
7000e800:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000e802:	f003 fd41 	bl	70012288 <tcp_output>
7000e806:	4603      	mov	r3, r0
7000e808:	2b00      	cmp	r3, #0
7000e80a:	d101      	bne.n	7000e810 <tcp_slowtmr+0x19c>
                  next_slot = 0;
7000e80c:	2300      	movs	r3, #0
7000e80e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
7000e810:	6a3b      	ldr	r3, [r7, #32]
7000e812:	2b00      	cmp	r3, #0
7000e814:	f000 80ac 	beq.w	7000e970 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
7000e818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e81a:	2200      	movs	r2, #0
7000e81c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
7000e820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e822:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
7000e826:	2b06      	cmp	r3, #6
7000e828:	f200 80a2 	bhi.w	7000e970 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
7000e82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e82e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
7000e832:	3301      	adds	r3, #1
7000e834:	b2da      	uxtb	r2, r3
7000e836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e838:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
7000e83c:	e098      	b.n	7000e970 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
7000e83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e840:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
7000e844:	2b00      	cmp	r3, #0
7000e846:	db0f      	blt.n	7000e868 <tcp_slowtmr+0x1f4>
7000e848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e84a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
7000e84e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
7000e852:	4293      	cmp	r3, r2
7000e854:	d008      	beq.n	7000e868 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
7000e856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e858:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
7000e85c:	b29b      	uxth	r3, r3
7000e85e:	3301      	adds	r3, #1
7000e860:	b29b      	uxth	r3, r3
7000e862:	b21a      	sxth	r2, r3
7000e864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e866:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
7000e868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e86a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
7000e86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e870:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
7000e874:	429a      	cmp	r2, r3
7000e876:	db7b      	blt.n	7000e970 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
7000e878:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000e87a:	f003 fff9 	bl	70012870 <tcp_rexmit_rto_prepare>
7000e87e:	4603      	mov	r3, r0
7000e880:	2b00      	cmp	r3, #0
7000e882:	d007      	beq.n	7000e894 <tcp_slowtmr+0x220>
7000e884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000e888:	2b00      	cmp	r3, #0
7000e88a:	d171      	bne.n	7000e970 <tcp_slowtmr+0x2fc>
7000e88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e88e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7000e890:	2b00      	cmp	r3, #0
7000e892:	d06d      	beq.n	7000e970 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
7000e894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e896:	7d1b      	ldrb	r3, [r3, #20]
7000e898:	2b02      	cmp	r3, #2
7000e89a:	d03a      	beq.n	7000e912 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
7000e89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e89e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
7000e8a2:	2b0c      	cmp	r3, #12
7000e8a4:	bf28      	it	cs
7000e8a6:	230c      	movcs	r3, #12
7000e8a8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
7000e8aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e8ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
7000e8b0:	10db      	asrs	r3, r3, #3
7000e8b2:	b21b      	sxth	r3, r3
7000e8b4:	461a      	mov	r2, r3
7000e8b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e8b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
7000e8bc:	4413      	add	r3, r2
7000e8be:	7efa      	ldrb	r2, [r7, #27]
7000e8c0:	4910      	ldr	r1, [pc, #64]	@ (7000e904 <tcp_slowtmr+0x290>)
7000e8c2:	5c8a      	ldrb	r2, [r1, r2]
7000e8c4:	4093      	lsls	r3, r2
7000e8c6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
7000e8c8:	697b      	ldr	r3, [r7, #20]
7000e8ca:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
7000e8ce:	4293      	cmp	r3, r2
7000e8d0:	dc1a      	bgt.n	7000e908 <tcp_slowtmr+0x294>
7000e8d2:	697b      	ldr	r3, [r7, #20]
7000e8d4:	b21a      	sxth	r2, r3
7000e8d6:	e019      	b.n	7000e90c <tcp_slowtmr+0x298>
7000e8d8:	24008478 	.word	0x24008478
7000e8dc:	2400848e 	.word	0x2400848e
7000e8e0:	24008484 	.word	0x24008484
7000e8e4:	70015c60 	.word	0x70015c60
7000e8e8:	70015e58 	.word	0x70015e58
7000e8ec:	70015cd0 	.word	0x70015cd0
7000e8f0:	70015e84 	.word	0x70015e84
7000e8f4:	70015eb0 	.word	0x70015eb0
7000e8f8:	70015ee0 	.word	0x70015ee0
7000e8fc:	70015f14 	.word	0x70015f14
7000e900:	70017350 	.word	0x70017350
7000e904:	70017340 	.word	0x70017340
7000e908:	f647 72ff 	movw	r2, #32767	@ 0x7fff
7000e90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e90e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
7000e912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e914:	2200      	movs	r2, #0
7000e916:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
7000e918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e91a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
7000e91e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e920:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
7000e924:	4293      	cmp	r3, r2
7000e926:	bf28      	it	cs
7000e928:	4613      	movcs	r3, r2
7000e92a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
7000e92c:	8a7b      	ldrh	r3, [r7, #18]
7000e92e:	085b      	lsrs	r3, r3, #1
7000e930:	b29a      	uxth	r2, r3
7000e932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e934:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
7000e938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e93a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
7000e93e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e940:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
7000e942:	005b      	lsls	r3, r3, #1
7000e944:	b29b      	uxth	r3, r3
7000e946:	429a      	cmp	r2, r3
7000e948:	d206      	bcs.n	7000e958 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
7000e94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e94c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
7000e94e:	005b      	lsls	r3, r3, #1
7000e950:	b29a      	uxth	r2, r3
7000e952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e954:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
7000e958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e95a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
7000e95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e95e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
7000e962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e964:	2200      	movs	r2, #0
7000e966:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
7000e96a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000e96c:	f003 fff0 	bl	70012950 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
7000e970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e972:	7d1b      	ldrb	r3, [r3, #20]
7000e974:	2b06      	cmp	r3, #6
7000e976:	d111      	bne.n	7000e99c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
7000e978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e97a:	8b5b      	ldrh	r3, [r3, #26]
7000e97c:	f003 0310 	and.w	r3, r3, #16
7000e980:	2b00      	cmp	r3, #0
7000e982:	d00b      	beq.n	7000e99c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
7000e984:	4b9c      	ldr	r3, [pc, #624]	@ (7000ebf8 <tcp_slowtmr+0x584>)
7000e986:	681a      	ldr	r2, [r3, #0]
7000e988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e98a:	6a1b      	ldr	r3, [r3, #32]
7000e98c:	1ad3      	subs	r3, r2, r3
7000e98e:	2b28      	cmp	r3, #40	@ 0x28
7000e990:	d904      	bls.n	7000e99c <tcp_slowtmr+0x328>
          ++pcb_remove;
7000e992:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000e996:	3301      	adds	r3, #1
7000e998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
7000e99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e99e:	7a5b      	ldrb	r3, [r3, #9]
7000e9a0:	f003 0308 	and.w	r3, r3, #8
7000e9a4:	2b00      	cmp	r3, #0
7000e9a6:	d04a      	beq.n	7000ea3e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
7000e9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e9aa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
7000e9ac:	2b04      	cmp	r3, #4
7000e9ae:	d003      	beq.n	7000e9b8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
7000e9b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e9b2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
7000e9b4:	2b07      	cmp	r3, #7
7000e9b6:	d142      	bne.n	7000ea3e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
7000e9b8:	4b8f      	ldr	r3, [pc, #572]	@ (7000ebf8 <tcp_slowtmr+0x584>)
7000e9ba:	681a      	ldr	r2, [r3, #0]
7000e9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e9be:	6a1b      	ldr	r3, [r3, #32]
7000e9c0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
7000e9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e9c4:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
7000e9c8:	4b8c      	ldr	r3, [pc, #560]	@ (7000ebfc <tcp_slowtmr+0x588>)
7000e9ca:	440b      	add	r3, r1
7000e9cc:	498c      	ldr	r1, [pc, #560]	@ (7000ec00 <tcp_slowtmr+0x58c>)
7000e9ce:	fba1 1303 	umull	r1, r3, r1, r3
7000e9d2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
7000e9d4:	429a      	cmp	r2, r3
7000e9d6:	d90a      	bls.n	7000e9ee <tcp_slowtmr+0x37a>
        ++pcb_remove;
7000e9d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000e9dc:	3301      	adds	r3, #1
7000e9de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
7000e9e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
7000e9e6:	3301      	adds	r3, #1
7000e9e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
7000e9ec:	e027      	b.n	7000ea3e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
7000e9ee:	4b82      	ldr	r3, [pc, #520]	@ (7000ebf8 <tcp_slowtmr+0x584>)
7000e9f0:	681a      	ldr	r2, [r3, #0]
7000e9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e9f4:	6a1b      	ldr	r3, [r3, #32]
7000e9f6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
7000e9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000e9fa:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
7000e9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ea00:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
7000ea04:	4618      	mov	r0, r3
7000ea06:	4b7f      	ldr	r3, [pc, #508]	@ (7000ec04 <tcp_slowtmr+0x590>)
7000ea08:	fb00 f303 	mul.w	r3, r0, r3
7000ea0c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
7000ea0e:	497c      	ldr	r1, [pc, #496]	@ (7000ec00 <tcp_slowtmr+0x58c>)
7000ea10:	fba1 1303 	umull	r1, r3, r1, r3
7000ea14:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
7000ea16:	429a      	cmp	r2, r3
7000ea18:	d911      	bls.n	7000ea3e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
7000ea1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000ea1c:	f004 fa9c 	bl	70012f58 <tcp_keepalive>
7000ea20:	4603      	mov	r3, r0
7000ea22:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
7000ea26:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
7000ea2a:	2b00      	cmp	r3, #0
7000ea2c:	d107      	bne.n	7000ea3e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
7000ea2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ea30:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
7000ea34:	3301      	adds	r3, #1
7000ea36:	b2da      	uxtb	r2, r3
7000ea38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ea3a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
7000ea3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ea40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000ea42:	2b00      	cmp	r3, #0
7000ea44:	d011      	beq.n	7000ea6a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
7000ea46:	4b6c      	ldr	r3, [pc, #432]	@ (7000ebf8 <tcp_slowtmr+0x584>)
7000ea48:	681a      	ldr	r2, [r3, #0]
7000ea4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ea4c:	6a1b      	ldr	r3, [r3, #32]
7000ea4e:	1ad2      	subs	r2, r2, r3
7000ea50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ea52:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
7000ea56:	4619      	mov	r1, r3
7000ea58:	460b      	mov	r3, r1
7000ea5a:	005b      	lsls	r3, r3, #1
7000ea5c:	440b      	add	r3, r1
7000ea5e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
7000ea60:	429a      	cmp	r2, r3
7000ea62:	d302      	bcc.n	7000ea6a <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
7000ea64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000ea66:	f000 fdb3 	bl	7000f5d0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
7000ea6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ea6c:	7d1b      	ldrb	r3, [r3, #20]
7000ea6e:	2b03      	cmp	r3, #3
7000ea70:	d10b      	bne.n	7000ea8a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
7000ea72:	4b61      	ldr	r3, [pc, #388]	@ (7000ebf8 <tcp_slowtmr+0x584>)
7000ea74:	681a      	ldr	r2, [r3, #0]
7000ea76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ea78:	6a1b      	ldr	r3, [r3, #32]
7000ea7a:	1ad3      	subs	r3, r2, r3
7000ea7c:	2b28      	cmp	r3, #40	@ 0x28
7000ea7e:	d904      	bls.n	7000ea8a <tcp_slowtmr+0x416>
        ++pcb_remove;
7000ea80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000ea84:	3301      	adds	r3, #1
7000ea86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
7000ea8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ea8c:	7d1b      	ldrb	r3, [r3, #20]
7000ea8e:	2b09      	cmp	r3, #9
7000ea90:	d10b      	bne.n	7000eaaa <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
7000ea92:	4b59      	ldr	r3, [pc, #356]	@ (7000ebf8 <tcp_slowtmr+0x584>)
7000ea94:	681a      	ldr	r2, [r3, #0]
7000ea96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ea98:	6a1b      	ldr	r3, [r3, #32]
7000ea9a:	1ad3      	subs	r3, r2, r3
7000ea9c:	2bf0      	cmp	r3, #240	@ 0xf0
7000ea9e:	d904      	bls.n	7000eaaa <tcp_slowtmr+0x436>
        ++pcb_remove;
7000eaa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000eaa4:	3301      	adds	r3, #1
7000eaa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
7000eaaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000eaae:	2b00      	cmp	r3, #0
7000eab0:	d060      	beq.n	7000eb74 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
7000eab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
7000eab8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
7000eaba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000eabc:	f000 fbe2 	bl	7000f284 <tcp_pcb_purge>
      if (prev != NULL) {
7000eac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000eac2:	2b00      	cmp	r3, #0
7000eac4:	d010      	beq.n	7000eae8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
7000eac6:	4b50      	ldr	r3, [pc, #320]	@ (7000ec08 <tcp_slowtmr+0x594>)
7000eac8:	681b      	ldr	r3, [r3, #0]
7000eaca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
7000eacc:	429a      	cmp	r2, r3
7000eace:	d106      	bne.n	7000eade <tcp_slowtmr+0x46a>
7000ead0:	4b4e      	ldr	r3, [pc, #312]	@ (7000ec0c <tcp_slowtmr+0x598>)
7000ead2:	f240 526e 	movw	r2, #1390	@ 0x56e
7000ead6:	494e      	ldr	r1, [pc, #312]	@ (7000ec10 <tcp_slowtmr+0x59c>)
7000ead8:	484e      	ldr	r0, [pc, #312]	@ (7000ec14 <tcp_slowtmr+0x5a0>)
7000eada:	f005 f921 	bl	70013d20 <iprintf>
        prev->next = pcb->next;
7000eade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eae0:	68da      	ldr	r2, [r3, #12]
7000eae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000eae4:	60da      	str	r2, [r3, #12]
7000eae6:	e00f      	b.n	7000eb08 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
7000eae8:	4b47      	ldr	r3, [pc, #284]	@ (7000ec08 <tcp_slowtmr+0x594>)
7000eaea:	681b      	ldr	r3, [r3, #0]
7000eaec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
7000eaee:	429a      	cmp	r2, r3
7000eaf0:	d006      	beq.n	7000eb00 <tcp_slowtmr+0x48c>
7000eaf2:	4b46      	ldr	r3, [pc, #280]	@ (7000ec0c <tcp_slowtmr+0x598>)
7000eaf4:	f240 5272 	movw	r2, #1394	@ 0x572
7000eaf8:	4947      	ldr	r1, [pc, #284]	@ (7000ec18 <tcp_slowtmr+0x5a4>)
7000eafa:	4846      	ldr	r0, [pc, #280]	@ (7000ec14 <tcp_slowtmr+0x5a0>)
7000eafc:	f005 f910 	bl	70013d20 <iprintf>
        tcp_active_pcbs = pcb->next;
7000eb00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eb02:	68db      	ldr	r3, [r3, #12]
7000eb04:	4a40      	ldr	r2, [pc, #256]	@ (7000ec08 <tcp_slowtmr+0x594>)
7000eb06:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
7000eb08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
7000eb0c:	2b00      	cmp	r3, #0
7000eb0e:	d013      	beq.n	7000eb38 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
7000eb10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eb12:	6d18      	ldr	r0, [r3, #80]	@ 0x50
7000eb14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eb16:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
7000eb18:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
7000eb1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eb1c:	3304      	adds	r3, #4
7000eb1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
7000eb20:	8ad2      	ldrh	r2, [r2, #22]
7000eb22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
7000eb24:	8b09      	ldrh	r1, [r1, #24]
7000eb26:	9102      	str	r1, [sp, #8]
7000eb28:	9201      	str	r2, [sp, #4]
7000eb2a:	9300      	str	r3, [sp, #0]
7000eb2c:	462b      	mov	r3, r5
7000eb2e:	4622      	mov	r2, r4
7000eb30:	4601      	mov	r1, r0
7000eb32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000eb34:	f004 f95c 	bl	70012df0 <tcp_rst>
      err_arg = pcb->callback_arg;
7000eb38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eb3a:	691b      	ldr	r3, [r3, #16]
7000eb3c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
7000eb3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eb40:	7d1b      	ldrb	r3, [r3, #20]
7000eb42:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
7000eb44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eb46:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
7000eb48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eb4a:	68db      	ldr	r3, [r3, #12]
7000eb4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
7000eb4e:	6838      	ldr	r0, [r7, #0]
7000eb50:	f7ff fa14 	bl	7000df7c <tcp_free>
      tcp_active_pcbs_changed = 0;
7000eb54:	4b31      	ldr	r3, [pc, #196]	@ (7000ec1c <tcp_slowtmr+0x5a8>)
7000eb56:	2200      	movs	r2, #0
7000eb58:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
7000eb5a:	68fb      	ldr	r3, [r7, #12]
7000eb5c:	2b00      	cmp	r3, #0
7000eb5e:	d004      	beq.n	7000eb6a <tcp_slowtmr+0x4f6>
7000eb60:	68fb      	ldr	r3, [r7, #12]
7000eb62:	f06f 010c 	mvn.w	r1, #12
7000eb66:	68b8      	ldr	r0, [r7, #8]
7000eb68:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
7000eb6a:	4b2c      	ldr	r3, [pc, #176]	@ (7000ec1c <tcp_slowtmr+0x5a8>)
7000eb6c:	781b      	ldrb	r3, [r3, #0]
7000eb6e:	2b00      	cmp	r3, #0
7000eb70:	d037      	beq.n	7000ebe2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
7000eb72:	e592      	b.n	7000e69a <tcp_slowtmr+0x26>
      prev = pcb;
7000eb74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eb76:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
7000eb78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eb7a:	68db      	ldr	r3, [r3, #12]
7000eb7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
7000eb7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000eb80:	7f1b      	ldrb	r3, [r3, #28]
7000eb82:	3301      	adds	r3, #1
7000eb84:	b2da      	uxtb	r2, r3
7000eb86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000eb88:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
7000eb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000eb8c:	7f1a      	ldrb	r2, [r3, #28]
7000eb8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000eb90:	7f5b      	ldrb	r3, [r3, #29]
7000eb92:	429a      	cmp	r2, r3
7000eb94:	d325      	bcc.n	7000ebe2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
7000eb96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000eb98:	2200      	movs	r2, #0
7000eb9a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
7000eb9c:	4b1f      	ldr	r3, [pc, #124]	@ (7000ec1c <tcp_slowtmr+0x5a8>)
7000eb9e:	2200      	movs	r2, #0
7000eba0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
7000eba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000eba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
7000eba8:	2b00      	cmp	r3, #0
7000ebaa:	d00b      	beq.n	7000ebc4 <tcp_slowtmr+0x550>
7000ebac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000ebae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
7000ebb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
7000ebb4:	6912      	ldr	r2, [r2, #16]
7000ebb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
7000ebb8:	4610      	mov	r0, r2
7000ebba:	4798      	blx	r3
7000ebbc:	4603      	mov	r3, r0
7000ebbe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
7000ebc2:	e002      	b.n	7000ebca <tcp_slowtmr+0x556>
7000ebc4:	2300      	movs	r3, #0
7000ebc6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
7000ebca:	4b14      	ldr	r3, [pc, #80]	@ (7000ec1c <tcp_slowtmr+0x5a8>)
7000ebcc:	781b      	ldrb	r3, [r3, #0]
7000ebce:	2b00      	cmp	r3, #0
7000ebd0:	f47f ad62 	bne.w	7000e698 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
7000ebd4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
7000ebd8:	2b00      	cmp	r3, #0
7000ebda:	d102      	bne.n	7000ebe2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
7000ebdc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
7000ebde:	f003 fb53 	bl	70012288 <tcp_output>
  while (pcb != NULL) {
7000ebe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ebe4:	2b00      	cmp	r3, #0
7000ebe6:	f47f ad5e 	bne.w	7000e6a6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
7000ebea:	2300      	movs	r3, #0
7000ebec:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
7000ebee:	4b0c      	ldr	r3, [pc, #48]	@ (7000ec20 <tcp_slowtmr+0x5ac>)
7000ebf0:	681b      	ldr	r3, [r3, #0]
7000ebf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
7000ebf4:	e069      	b.n	7000ecca <tcp_slowtmr+0x656>
7000ebf6:	bf00      	nop
7000ebf8:	24008478 	.word	0x24008478
7000ebfc:	000a4cb8 	.word	0x000a4cb8
7000ec00:	10624dd3 	.word	0x10624dd3
7000ec04:	000124f8 	.word	0x000124f8
7000ec08:	24008484 	.word	0x24008484
7000ec0c:	70015c60 	.word	0x70015c60
7000ec10:	70015f4c 	.word	0x70015f4c
7000ec14:	70015cd0 	.word	0x70015cd0
7000ec18:	70015f78 	.word	0x70015f78
7000ec1c:	2400848c 	.word	0x2400848c
7000ec20:	24008488 	.word	0x24008488
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
7000ec24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ec26:	7d1b      	ldrb	r3, [r3, #20]
7000ec28:	2b0a      	cmp	r3, #10
7000ec2a:	d006      	beq.n	7000ec3a <tcp_slowtmr+0x5c6>
7000ec2c:	4b2b      	ldr	r3, [pc, #172]	@ (7000ecdc <tcp_slowtmr+0x668>)
7000ec2e:	f240 52a2 	movw	r2, #1442	@ 0x5a2
7000ec32:	492b      	ldr	r1, [pc, #172]	@ (7000ece0 <tcp_slowtmr+0x66c>)
7000ec34:	482b      	ldr	r0, [pc, #172]	@ (7000ece4 <tcp_slowtmr+0x670>)
7000ec36:	f005 f873 	bl	70013d20 <iprintf>
    pcb_remove = 0;
7000ec3a:	2300      	movs	r3, #0
7000ec3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
7000ec40:	4b29      	ldr	r3, [pc, #164]	@ (7000ece8 <tcp_slowtmr+0x674>)
7000ec42:	681a      	ldr	r2, [r3, #0]
7000ec44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ec46:	6a1b      	ldr	r3, [r3, #32]
7000ec48:	1ad3      	subs	r3, r2, r3
7000ec4a:	2bf0      	cmp	r3, #240	@ 0xf0
7000ec4c:	d904      	bls.n	7000ec58 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
7000ec4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000ec52:	3301      	adds	r3, #1
7000ec54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
7000ec58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
7000ec5c:	2b00      	cmp	r3, #0
7000ec5e:	d02f      	beq.n	7000ecc0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
7000ec60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
7000ec62:	f000 fb0f 	bl	7000f284 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
7000ec66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000ec68:	2b00      	cmp	r3, #0
7000ec6a:	d010      	beq.n	7000ec8e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
7000ec6c:	4b1f      	ldr	r3, [pc, #124]	@ (7000ecec <tcp_slowtmr+0x678>)
7000ec6e:	681b      	ldr	r3, [r3, #0]
7000ec70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
7000ec72:	429a      	cmp	r2, r3
7000ec74:	d106      	bne.n	7000ec84 <tcp_slowtmr+0x610>
7000ec76:	4b19      	ldr	r3, [pc, #100]	@ (7000ecdc <tcp_slowtmr+0x668>)
7000ec78:	f44f 62b6 	mov.w	r2, #1456	@ 0x5b0
7000ec7c:	491c      	ldr	r1, [pc, #112]	@ (7000ecf0 <tcp_slowtmr+0x67c>)
7000ec7e:	4819      	ldr	r0, [pc, #100]	@ (7000ece4 <tcp_slowtmr+0x670>)
7000ec80:	f005 f84e 	bl	70013d20 <iprintf>
        prev->next = pcb->next;
7000ec84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ec86:	68da      	ldr	r2, [r3, #12]
7000ec88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000ec8a:	60da      	str	r2, [r3, #12]
7000ec8c:	e00f      	b.n	7000ecae <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
7000ec8e:	4b17      	ldr	r3, [pc, #92]	@ (7000ecec <tcp_slowtmr+0x678>)
7000ec90:	681b      	ldr	r3, [r3, #0]
7000ec92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
7000ec94:	429a      	cmp	r2, r3
7000ec96:	d006      	beq.n	7000eca6 <tcp_slowtmr+0x632>
7000ec98:	4b10      	ldr	r3, [pc, #64]	@ (7000ecdc <tcp_slowtmr+0x668>)
7000ec9a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
7000ec9e:	4915      	ldr	r1, [pc, #84]	@ (7000ecf4 <tcp_slowtmr+0x680>)
7000eca0:	4810      	ldr	r0, [pc, #64]	@ (7000ece4 <tcp_slowtmr+0x670>)
7000eca2:	f005 f83d 	bl	70013d20 <iprintf>
        tcp_tw_pcbs = pcb->next;
7000eca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eca8:	68db      	ldr	r3, [r3, #12]
7000ecaa:	4a10      	ldr	r2, [pc, #64]	@ (7000ecec <tcp_slowtmr+0x678>)
7000ecac:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
7000ecae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ecb0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
7000ecb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ecb4:	68db      	ldr	r3, [r3, #12]
7000ecb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
7000ecb8:	69f8      	ldr	r0, [r7, #28]
7000ecba:	f7ff f95f 	bl	7000df7c <tcp_free>
7000ecbe:	e004      	b.n	7000ecca <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
7000ecc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ecc2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
7000ecc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000ecc6:	68db      	ldr	r3, [r3, #12]
7000ecc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
7000ecca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000eccc:	2b00      	cmp	r3, #0
7000ecce:	d1a9      	bne.n	7000ec24 <tcp_slowtmr+0x5b0>
    }
  }
}
7000ecd0:	bf00      	nop
7000ecd2:	bf00      	nop
7000ecd4:	3730      	adds	r7, #48	@ 0x30
7000ecd6:	46bd      	mov	sp, r7
7000ecd8:	bdb0      	pop	{r4, r5, r7, pc}
7000ecda:	bf00      	nop
7000ecdc:	70015c60 	.word	0x70015c60
7000ece0:	70015fa4 	.word	0x70015fa4
7000ece4:	70015cd0 	.word	0x70015cd0
7000ece8:	24008478 	.word	0x24008478
7000ecec:	24008488 	.word	0x24008488
7000ecf0:	70015fd4 	.word	0x70015fd4
7000ecf4:	70015ffc 	.word	0x70015ffc

7000ecf8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
7000ecf8:	b580      	push	{r7, lr}
7000ecfa:	b082      	sub	sp, #8
7000ecfc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
7000ecfe:	4b2d      	ldr	r3, [pc, #180]	@ (7000edb4 <tcp_fasttmr+0xbc>)
7000ed00:	781b      	ldrb	r3, [r3, #0]
7000ed02:	3301      	adds	r3, #1
7000ed04:	b2da      	uxtb	r2, r3
7000ed06:	4b2b      	ldr	r3, [pc, #172]	@ (7000edb4 <tcp_fasttmr+0xbc>)
7000ed08:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
7000ed0a:	4b2b      	ldr	r3, [pc, #172]	@ (7000edb8 <tcp_fasttmr+0xc0>)
7000ed0c:	681b      	ldr	r3, [r3, #0]
7000ed0e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
7000ed10:	e048      	b.n	7000eda4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
7000ed12:	687b      	ldr	r3, [r7, #4]
7000ed14:	7f9a      	ldrb	r2, [r3, #30]
7000ed16:	4b27      	ldr	r3, [pc, #156]	@ (7000edb4 <tcp_fasttmr+0xbc>)
7000ed18:	781b      	ldrb	r3, [r3, #0]
7000ed1a:	429a      	cmp	r2, r3
7000ed1c:	d03f      	beq.n	7000ed9e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
7000ed1e:	4b25      	ldr	r3, [pc, #148]	@ (7000edb4 <tcp_fasttmr+0xbc>)
7000ed20:	781a      	ldrb	r2, [r3, #0]
7000ed22:	687b      	ldr	r3, [r7, #4]
7000ed24:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
7000ed26:	687b      	ldr	r3, [r7, #4]
7000ed28:	8b5b      	ldrh	r3, [r3, #26]
7000ed2a:	f003 0301 	and.w	r3, r3, #1
7000ed2e:	2b00      	cmp	r3, #0
7000ed30:	d010      	beq.n	7000ed54 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
7000ed32:	687b      	ldr	r3, [r7, #4]
7000ed34:	8b5b      	ldrh	r3, [r3, #26]
7000ed36:	f043 0302 	orr.w	r3, r3, #2
7000ed3a:	b29a      	uxth	r2, r3
7000ed3c:	687b      	ldr	r3, [r7, #4]
7000ed3e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
7000ed40:	6878      	ldr	r0, [r7, #4]
7000ed42:	f003 faa1 	bl	70012288 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
7000ed46:	687b      	ldr	r3, [r7, #4]
7000ed48:	8b5b      	ldrh	r3, [r3, #26]
7000ed4a:	f023 0303 	bic.w	r3, r3, #3
7000ed4e:	b29a      	uxth	r2, r3
7000ed50:	687b      	ldr	r3, [r7, #4]
7000ed52:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
7000ed54:	687b      	ldr	r3, [r7, #4]
7000ed56:	8b5b      	ldrh	r3, [r3, #26]
7000ed58:	f003 0308 	and.w	r3, r3, #8
7000ed5c:	2b00      	cmp	r3, #0
7000ed5e:	d009      	beq.n	7000ed74 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
7000ed60:	687b      	ldr	r3, [r7, #4]
7000ed62:	8b5b      	ldrh	r3, [r3, #26]
7000ed64:	f023 0308 	bic.w	r3, r3, #8
7000ed68:	b29a      	uxth	r2, r3
7000ed6a:	687b      	ldr	r3, [r7, #4]
7000ed6c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
7000ed6e:	6878      	ldr	r0, [r7, #4]
7000ed70:	f7ff fa98 	bl	7000e2a4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
7000ed74:	687b      	ldr	r3, [r7, #4]
7000ed76:	68db      	ldr	r3, [r3, #12]
7000ed78:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
7000ed7a:	687b      	ldr	r3, [r7, #4]
7000ed7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000ed7e:	2b00      	cmp	r3, #0
7000ed80:	d00a      	beq.n	7000ed98 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
7000ed82:	4b0e      	ldr	r3, [pc, #56]	@ (7000edbc <tcp_fasttmr+0xc4>)
7000ed84:	2200      	movs	r2, #0
7000ed86:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
7000ed88:	6878      	ldr	r0, [r7, #4]
7000ed8a:	f000 f819 	bl	7000edc0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
7000ed8e:	4b0b      	ldr	r3, [pc, #44]	@ (7000edbc <tcp_fasttmr+0xc4>)
7000ed90:	781b      	ldrb	r3, [r3, #0]
7000ed92:	2b00      	cmp	r3, #0
7000ed94:	d000      	beq.n	7000ed98 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
7000ed96:	e7b8      	b.n	7000ed0a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
7000ed98:	683b      	ldr	r3, [r7, #0]
7000ed9a:	607b      	str	r3, [r7, #4]
7000ed9c:	e002      	b.n	7000eda4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
7000ed9e:	687b      	ldr	r3, [r7, #4]
7000eda0:	68db      	ldr	r3, [r3, #12]
7000eda2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
7000eda4:	687b      	ldr	r3, [r7, #4]
7000eda6:	2b00      	cmp	r3, #0
7000eda8:	d1b3      	bne.n	7000ed12 <tcp_fasttmr+0x1a>
    }
  }
}
7000edaa:	bf00      	nop
7000edac:	bf00      	nop
7000edae:	3708      	adds	r7, #8
7000edb0:	46bd      	mov	sp, r7
7000edb2:	bd80      	pop	{r7, pc}
7000edb4:	2400848e 	.word	0x2400848e
7000edb8:	24008484 	.word	0x24008484
7000edbc:	2400848c 	.word	0x2400848c

7000edc0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
7000edc0:	b590      	push	{r4, r7, lr}
7000edc2:	b085      	sub	sp, #20
7000edc4:	af00      	add	r7, sp, #0
7000edc6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
7000edc8:	687b      	ldr	r3, [r7, #4]
7000edca:	2b00      	cmp	r3, #0
7000edcc:	d102      	bne.n	7000edd4 <tcp_process_refused_data+0x14>
7000edce:	f06f 030f 	mvn.w	r3, #15
7000edd2:	e060      	b.n	7000ee96 <tcp_process_refused_data+0xd6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
7000edd4:	687b      	ldr	r3, [r7, #4]
7000edd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000edd8:	7b5b      	ldrb	r3, [r3, #13]
7000edda:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
7000eddc:	687b      	ldr	r3, [r7, #4]
7000edde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000ede0:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
7000ede2:	687b      	ldr	r3, [r7, #4]
7000ede4:	2200      	movs	r2, #0
7000ede6:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
7000ede8:	687b      	ldr	r3, [r7, #4]
7000edea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
7000edee:	2b00      	cmp	r3, #0
7000edf0:	d00b      	beq.n	7000ee0a <tcp_process_refused_data+0x4a>
7000edf2:	687b      	ldr	r3, [r7, #4]
7000edf4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
7000edf8:	687b      	ldr	r3, [r7, #4]
7000edfa:	6918      	ldr	r0, [r3, #16]
7000edfc:	2300      	movs	r3, #0
7000edfe:	68ba      	ldr	r2, [r7, #8]
7000ee00:	6879      	ldr	r1, [r7, #4]
7000ee02:	47a0      	blx	r4
7000ee04:	4603      	mov	r3, r0
7000ee06:	73fb      	strb	r3, [r7, #15]
7000ee08:	e007      	b.n	7000ee1a <tcp_process_refused_data+0x5a>
7000ee0a:	2300      	movs	r3, #0
7000ee0c:	68ba      	ldr	r2, [r7, #8]
7000ee0e:	6879      	ldr	r1, [r7, #4]
7000ee10:	2000      	movs	r0, #0
7000ee12:	f000 f89d 	bl	7000ef50 <tcp_recv_null>
7000ee16:	4603      	mov	r3, r0
7000ee18:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
7000ee1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
7000ee1e:	2b00      	cmp	r3, #0
7000ee20:	d12a      	bne.n	7000ee78 <tcp_process_refused_data+0xb8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
7000ee22:	7bbb      	ldrb	r3, [r7, #14]
7000ee24:	f003 0320 	and.w	r3, r3, #32
7000ee28:	2b00      	cmp	r3, #0
7000ee2a:	d033      	beq.n	7000ee94 <tcp_process_refused_data+0xd4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
7000ee2c:	687b      	ldr	r3, [r7, #4]
7000ee2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
7000ee30:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
7000ee34:	d005      	beq.n	7000ee42 <tcp_process_refused_data+0x82>
          pcb->rcv_wnd++;
7000ee36:	687b      	ldr	r3, [r7, #4]
7000ee38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
7000ee3a:	3301      	adds	r3, #1
7000ee3c:	b29a      	uxth	r2, r3
7000ee3e:	687b      	ldr	r3, [r7, #4]
7000ee40:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
7000ee42:	687b      	ldr	r3, [r7, #4]
7000ee44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
7000ee48:	2b00      	cmp	r3, #0
7000ee4a:	d00b      	beq.n	7000ee64 <tcp_process_refused_data+0xa4>
7000ee4c:	687b      	ldr	r3, [r7, #4]
7000ee4e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
7000ee52:	687b      	ldr	r3, [r7, #4]
7000ee54:	6918      	ldr	r0, [r3, #16]
7000ee56:	2300      	movs	r3, #0
7000ee58:	2200      	movs	r2, #0
7000ee5a:	6879      	ldr	r1, [r7, #4]
7000ee5c:	47a0      	blx	r4
7000ee5e:	4603      	mov	r3, r0
7000ee60:	73fb      	strb	r3, [r7, #15]
7000ee62:	e001      	b.n	7000ee68 <tcp_process_refused_data+0xa8>
7000ee64:	2300      	movs	r3, #0
7000ee66:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
7000ee68:	f997 300f 	ldrsb.w	r3, [r7, #15]
7000ee6c:	f113 0f0d 	cmn.w	r3, #13
7000ee70:	d110      	bne.n	7000ee94 <tcp_process_refused_data+0xd4>
          return ERR_ABRT;
7000ee72:	f06f 030c 	mvn.w	r3, #12
7000ee76:	e00e      	b.n	7000ee96 <tcp_process_refused_data+0xd6>
        }
      }
    } else if (err == ERR_ABRT) {
7000ee78:	f997 300f 	ldrsb.w	r3, [r7, #15]
7000ee7c:	f113 0f0d 	cmn.w	r3, #13
7000ee80:	d102      	bne.n	7000ee88 <tcp_process_refused_data+0xc8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
7000ee82:	f06f 030c 	mvn.w	r3, #12
7000ee86:	e006      	b.n	7000ee96 <tcp_process_refused_data+0xd6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
7000ee88:	687b      	ldr	r3, [r7, #4]
7000ee8a:	68ba      	ldr	r2, [r7, #8]
7000ee8c:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
7000ee8e:	f06f 0304 	mvn.w	r3, #4
7000ee92:	e000      	b.n	7000ee96 <tcp_process_refused_data+0xd6>
    }
  }
  return ERR_OK;
7000ee94:	2300      	movs	r3, #0
}
7000ee96:	4618      	mov	r0, r3
7000ee98:	3714      	adds	r7, #20
7000ee9a:	46bd      	mov	sp, r7
7000ee9c:	bd90      	pop	{r4, r7, pc}

7000ee9e <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
7000ee9e:	b580      	push	{r7, lr}
7000eea0:	b084      	sub	sp, #16
7000eea2:	af00      	add	r7, sp, #0
7000eea4:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
7000eea6:	e007      	b.n	7000eeb8 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
7000eea8:	687b      	ldr	r3, [r7, #4]
7000eeaa:	681b      	ldr	r3, [r3, #0]
7000eeac:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
7000eeae:	6878      	ldr	r0, [r7, #4]
7000eeb0:	f000 f80a 	bl	7000eec8 <tcp_seg_free>
    seg = next;
7000eeb4:	68fb      	ldr	r3, [r7, #12]
7000eeb6:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
7000eeb8:	687b      	ldr	r3, [r7, #4]
7000eeba:	2b00      	cmp	r3, #0
7000eebc:	d1f4      	bne.n	7000eea8 <tcp_segs_free+0xa>
  }
}
7000eebe:	bf00      	nop
7000eec0:	bf00      	nop
7000eec2:	3710      	adds	r7, #16
7000eec4:	46bd      	mov	sp, r7
7000eec6:	bd80      	pop	{r7, pc}

7000eec8 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
7000eec8:	b580      	push	{r7, lr}
7000eeca:	b082      	sub	sp, #8
7000eecc:	af00      	add	r7, sp, #0
7000eece:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
7000eed0:	687b      	ldr	r3, [r7, #4]
7000eed2:	2b00      	cmp	r3, #0
7000eed4:	d00c      	beq.n	7000eef0 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
7000eed6:	687b      	ldr	r3, [r7, #4]
7000eed8:	685b      	ldr	r3, [r3, #4]
7000eeda:	2b00      	cmp	r3, #0
7000eedc:	d004      	beq.n	7000eee8 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
7000eede:	687b      	ldr	r3, [r7, #4]
7000eee0:	685b      	ldr	r3, [r3, #4]
7000eee2:	4618      	mov	r0, r3
7000eee4:	f7fe fcb0 	bl	7000d848 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
7000eee8:	6879      	ldr	r1, [r7, #4]
7000eeea:	2003      	movs	r0, #3
7000eeec:	f7fd fe6a 	bl	7000cbc4 <memp_free>
  }
}
7000eef0:	bf00      	nop
7000eef2:	3708      	adds	r7, #8
7000eef4:	46bd      	mov	sp, r7
7000eef6:	bd80      	pop	{r7, pc}

7000eef8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
7000eef8:	b580      	push	{r7, lr}
7000eefa:	b084      	sub	sp, #16
7000eefc:	af00      	add	r7, sp, #0
7000eefe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
7000ef00:	687b      	ldr	r3, [r7, #4]
7000ef02:	2b00      	cmp	r3, #0
7000ef04:	d106      	bne.n	7000ef14 <tcp_seg_copy+0x1c>
7000ef06:	4b0f      	ldr	r3, [pc, #60]	@ (7000ef44 <tcp_seg_copy+0x4c>)
7000ef08:	f240 6283 	movw	r2, #1667	@ 0x683
7000ef0c:	490e      	ldr	r1, [pc, #56]	@ (7000ef48 <tcp_seg_copy+0x50>)
7000ef0e:	480f      	ldr	r0, [pc, #60]	@ (7000ef4c <tcp_seg_copy+0x54>)
7000ef10:	f004 ff06 	bl	70013d20 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
7000ef14:	2003      	movs	r0, #3
7000ef16:	f7fd fdeb 	bl	7000caf0 <memp_malloc>
7000ef1a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
7000ef1c:	68fb      	ldr	r3, [r7, #12]
7000ef1e:	2b00      	cmp	r3, #0
7000ef20:	d101      	bne.n	7000ef26 <tcp_seg_copy+0x2e>
    return NULL;
7000ef22:	2300      	movs	r3, #0
7000ef24:	e00a      	b.n	7000ef3c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
7000ef26:	2210      	movs	r2, #16
7000ef28:	6879      	ldr	r1, [r7, #4]
7000ef2a:	68f8      	ldr	r0, [r7, #12]
7000ef2c:	f005 f829 	bl	70013f82 <memcpy>
  pbuf_ref(cseg->p);
7000ef30:	68fb      	ldr	r3, [r7, #12]
7000ef32:	685b      	ldr	r3, [r3, #4]
7000ef34:	4618      	mov	r0, r3
7000ef36:	f7fe fd2d 	bl	7000d994 <pbuf_ref>
  return cseg;
7000ef3a:	68fb      	ldr	r3, [r7, #12]
}
7000ef3c:	4618      	mov	r0, r3
7000ef3e:	3710      	adds	r7, #16
7000ef40:	46bd      	mov	sp, r7
7000ef42:	bd80      	pop	{r7, pc}
7000ef44:	70015c60 	.word	0x70015c60
7000ef48:	70016024 	.word	0x70016024
7000ef4c:	70015cd0 	.word	0x70015cd0

7000ef50 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
7000ef50:	b580      	push	{r7, lr}
7000ef52:	b084      	sub	sp, #16
7000ef54:	af00      	add	r7, sp, #0
7000ef56:	60f8      	str	r0, [r7, #12]
7000ef58:	60b9      	str	r1, [r7, #8]
7000ef5a:	607a      	str	r2, [r7, #4]
7000ef5c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
7000ef5e:	68bb      	ldr	r3, [r7, #8]
7000ef60:	2b00      	cmp	r3, #0
7000ef62:	d102      	bne.n	7000ef6a <tcp_recv_null+0x1a>
7000ef64:	f06f 030f 	mvn.w	r3, #15
7000ef68:	e016      	b.n	7000ef98 <tcp_recv_null+0x48>

  if (p != NULL) {
7000ef6a:	687b      	ldr	r3, [r7, #4]
7000ef6c:	2b00      	cmp	r3, #0
7000ef6e:	d009      	beq.n	7000ef84 <tcp_recv_null+0x34>
    tcp_recved(pcb, p->tot_len);
7000ef70:	687b      	ldr	r3, [r7, #4]
7000ef72:	891b      	ldrh	r3, [r3, #8]
7000ef74:	4619      	mov	r1, r3
7000ef76:	68b8      	ldr	r0, [r7, #8]
7000ef78:	f7ff fb36 	bl	7000e5e8 <tcp_recved>
    pbuf_free(p);
7000ef7c:	6878      	ldr	r0, [r7, #4]
7000ef7e:	f7fe fc63 	bl	7000d848 <pbuf_free>
7000ef82:	e008      	b.n	7000ef96 <tcp_recv_null+0x46>
  } else if (err == ERR_OK) {
7000ef84:	f997 3003 	ldrsb.w	r3, [r7, #3]
7000ef88:	2b00      	cmp	r3, #0
7000ef8a:	d104      	bne.n	7000ef96 <tcp_recv_null+0x46>
    return tcp_close(pcb);
7000ef8c:	68b8      	ldr	r0, [r7, #8]
7000ef8e:	f7ff f9f3 	bl	7000e378 <tcp_close>
7000ef92:	4603      	mov	r3, r0
7000ef94:	e000      	b.n	7000ef98 <tcp_recv_null+0x48>
  }
  return ERR_OK;
7000ef96:	2300      	movs	r3, #0
}
7000ef98:	4618      	mov	r0, r3
7000ef9a:	3710      	adds	r7, #16
7000ef9c:	46bd      	mov	sp, r7
7000ef9e:	bd80      	pop	{r7, pc}

7000efa0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
7000efa0:	b580      	push	{r7, lr}
7000efa2:	b086      	sub	sp, #24
7000efa4:	af00      	add	r7, sp, #0
7000efa6:	4603      	mov	r3, r0
7000efa8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
7000efaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
7000efae:	2b00      	cmp	r3, #0
7000efb0:	db01      	blt.n	7000efb6 <tcp_kill_prio+0x16>
7000efb2:	79fb      	ldrb	r3, [r7, #7]
7000efb4:	e000      	b.n	7000efb8 <tcp_kill_prio+0x18>
7000efb6:	237f      	movs	r3, #127	@ 0x7f
7000efb8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
7000efba:	7afb      	ldrb	r3, [r7, #11]
7000efbc:	2b00      	cmp	r3, #0
7000efbe:	d034      	beq.n	7000f02a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
7000efc0:	7afb      	ldrb	r3, [r7, #11]
7000efc2:	3b01      	subs	r3, #1
7000efc4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
7000efc6:	2300      	movs	r3, #0
7000efc8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
7000efca:	2300      	movs	r3, #0
7000efcc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
7000efce:	4b19      	ldr	r3, [pc, #100]	@ (7000f034 <tcp_kill_prio+0x94>)
7000efd0:	681b      	ldr	r3, [r3, #0]
7000efd2:	617b      	str	r3, [r7, #20]
7000efd4:	e01f      	b.n	7000f016 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
7000efd6:	697b      	ldr	r3, [r7, #20]
7000efd8:	7d5b      	ldrb	r3, [r3, #21]
7000efda:	7afa      	ldrb	r2, [r7, #11]
7000efdc:	429a      	cmp	r2, r3
7000efde:	d80c      	bhi.n	7000effa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
7000efe0:	697b      	ldr	r3, [r7, #20]
7000efe2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
7000efe4:	7afa      	ldrb	r2, [r7, #11]
7000efe6:	429a      	cmp	r2, r3
7000efe8:	d112      	bne.n	7000f010 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
7000efea:	4b13      	ldr	r3, [pc, #76]	@ (7000f038 <tcp_kill_prio+0x98>)
7000efec:	681a      	ldr	r2, [r3, #0]
7000efee:	697b      	ldr	r3, [r7, #20]
7000eff0:	6a1b      	ldr	r3, [r3, #32]
7000eff2:	1ad3      	subs	r3, r2, r3
7000eff4:	68fa      	ldr	r2, [r7, #12]
7000eff6:	429a      	cmp	r2, r3
7000eff8:	d80a      	bhi.n	7000f010 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
7000effa:	4b0f      	ldr	r3, [pc, #60]	@ (7000f038 <tcp_kill_prio+0x98>)
7000effc:	681a      	ldr	r2, [r3, #0]
7000effe:	697b      	ldr	r3, [r7, #20]
7000f000:	6a1b      	ldr	r3, [r3, #32]
7000f002:	1ad3      	subs	r3, r2, r3
7000f004:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
7000f006:	697b      	ldr	r3, [r7, #20]
7000f008:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
7000f00a:	697b      	ldr	r3, [r7, #20]
7000f00c:	7d5b      	ldrb	r3, [r3, #21]
7000f00e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
7000f010:	697b      	ldr	r3, [r7, #20]
7000f012:	68db      	ldr	r3, [r3, #12]
7000f014:	617b      	str	r3, [r7, #20]
7000f016:	697b      	ldr	r3, [r7, #20]
7000f018:	2b00      	cmp	r3, #0
7000f01a:	d1dc      	bne.n	7000efd6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
7000f01c:	693b      	ldr	r3, [r7, #16]
7000f01e:	2b00      	cmp	r3, #0
7000f020:	d004      	beq.n	7000f02c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
7000f022:	6938      	ldr	r0, [r7, #16]
7000f024:	f7ff fa7a 	bl	7000e51c <tcp_abort>
7000f028:	e000      	b.n	7000f02c <tcp_kill_prio+0x8c>
    return;
7000f02a:	bf00      	nop
  }
}
7000f02c:	3718      	adds	r7, #24
7000f02e:	46bd      	mov	sp, r7
7000f030:	bd80      	pop	{r7, pc}
7000f032:	bf00      	nop
7000f034:	24008484 	.word	0x24008484
7000f038:	24008478 	.word	0x24008478

7000f03c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
7000f03c:	b580      	push	{r7, lr}
7000f03e:	b086      	sub	sp, #24
7000f040:	af00      	add	r7, sp, #0
7000f042:	4603      	mov	r3, r0
7000f044:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
7000f046:	79fb      	ldrb	r3, [r7, #7]
7000f048:	2b08      	cmp	r3, #8
7000f04a:	d009      	beq.n	7000f060 <tcp_kill_state+0x24>
7000f04c:	79fb      	ldrb	r3, [r7, #7]
7000f04e:	2b09      	cmp	r3, #9
7000f050:	d006      	beq.n	7000f060 <tcp_kill_state+0x24>
7000f052:	4b1a      	ldr	r3, [pc, #104]	@ (7000f0bc <tcp_kill_state+0x80>)
7000f054:	f240 62de 	movw	r2, #1758	@ 0x6de
7000f058:	4919      	ldr	r1, [pc, #100]	@ (7000f0c0 <tcp_kill_state+0x84>)
7000f05a:	481a      	ldr	r0, [pc, #104]	@ (7000f0c4 <tcp_kill_state+0x88>)
7000f05c:	f004 fe60 	bl	70013d20 <iprintf>

  inactivity = 0;
7000f060:	2300      	movs	r3, #0
7000f062:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
7000f064:	2300      	movs	r3, #0
7000f066:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
7000f068:	4b17      	ldr	r3, [pc, #92]	@ (7000f0c8 <tcp_kill_state+0x8c>)
7000f06a:	681b      	ldr	r3, [r3, #0]
7000f06c:	617b      	str	r3, [r7, #20]
7000f06e:	e017      	b.n	7000f0a0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
7000f070:	697b      	ldr	r3, [r7, #20]
7000f072:	7d1b      	ldrb	r3, [r3, #20]
7000f074:	79fa      	ldrb	r2, [r7, #7]
7000f076:	429a      	cmp	r2, r3
7000f078:	d10f      	bne.n	7000f09a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
7000f07a:	4b14      	ldr	r3, [pc, #80]	@ (7000f0cc <tcp_kill_state+0x90>)
7000f07c:	681a      	ldr	r2, [r3, #0]
7000f07e:	697b      	ldr	r3, [r7, #20]
7000f080:	6a1b      	ldr	r3, [r3, #32]
7000f082:	1ad3      	subs	r3, r2, r3
7000f084:	68fa      	ldr	r2, [r7, #12]
7000f086:	429a      	cmp	r2, r3
7000f088:	d807      	bhi.n	7000f09a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
7000f08a:	4b10      	ldr	r3, [pc, #64]	@ (7000f0cc <tcp_kill_state+0x90>)
7000f08c:	681a      	ldr	r2, [r3, #0]
7000f08e:	697b      	ldr	r3, [r7, #20]
7000f090:	6a1b      	ldr	r3, [r3, #32]
7000f092:	1ad3      	subs	r3, r2, r3
7000f094:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
7000f096:	697b      	ldr	r3, [r7, #20]
7000f098:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
7000f09a:	697b      	ldr	r3, [r7, #20]
7000f09c:	68db      	ldr	r3, [r3, #12]
7000f09e:	617b      	str	r3, [r7, #20]
7000f0a0:	697b      	ldr	r3, [r7, #20]
7000f0a2:	2b00      	cmp	r3, #0
7000f0a4:	d1e4      	bne.n	7000f070 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
7000f0a6:	693b      	ldr	r3, [r7, #16]
7000f0a8:	2b00      	cmp	r3, #0
7000f0aa:	d003      	beq.n	7000f0b4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
7000f0ac:	2100      	movs	r1, #0
7000f0ae:	6938      	ldr	r0, [r7, #16]
7000f0b0:	f7ff f980 	bl	7000e3b4 <tcp_abandon>
  }
}
7000f0b4:	bf00      	nop
7000f0b6:	3718      	adds	r7, #24
7000f0b8:	46bd      	mov	sp, r7
7000f0ba:	bd80      	pop	{r7, pc}
7000f0bc:	70015c60 	.word	0x70015c60
7000f0c0:	70016040 	.word	0x70016040
7000f0c4:	70015cd0 	.word	0x70015cd0
7000f0c8:	24008484 	.word	0x24008484
7000f0cc:	24008478 	.word	0x24008478

7000f0d0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
7000f0d0:	b580      	push	{r7, lr}
7000f0d2:	b084      	sub	sp, #16
7000f0d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
7000f0d6:	2300      	movs	r3, #0
7000f0d8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
7000f0da:	2300      	movs	r3, #0
7000f0dc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
7000f0de:	4b12      	ldr	r3, [pc, #72]	@ (7000f128 <tcp_kill_timewait+0x58>)
7000f0e0:	681b      	ldr	r3, [r3, #0]
7000f0e2:	60fb      	str	r3, [r7, #12]
7000f0e4:	e012      	b.n	7000f10c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
7000f0e6:	4b11      	ldr	r3, [pc, #68]	@ (7000f12c <tcp_kill_timewait+0x5c>)
7000f0e8:	681a      	ldr	r2, [r3, #0]
7000f0ea:	68fb      	ldr	r3, [r7, #12]
7000f0ec:	6a1b      	ldr	r3, [r3, #32]
7000f0ee:	1ad3      	subs	r3, r2, r3
7000f0f0:	687a      	ldr	r2, [r7, #4]
7000f0f2:	429a      	cmp	r2, r3
7000f0f4:	d807      	bhi.n	7000f106 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
7000f0f6:	4b0d      	ldr	r3, [pc, #52]	@ (7000f12c <tcp_kill_timewait+0x5c>)
7000f0f8:	681a      	ldr	r2, [r3, #0]
7000f0fa:	68fb      	ldr	r3, [r7, #12]
7000f0fc:	6a1b      	ldr	r3, [r3, #32]
7000f0fe:	1ad3      	subs	r3, r2, r3
7000f100:	607b      	str	r3, [r7, #4]
      inactive = pcb;
7000f102:	68fb      	ldr	r3, [r7, #12]
7000f104:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
7000f106:	68fb      	ldr	r3, [r7, #12]
7000f108:	68db      	ldr	r3, [r3, #12]
7000f10a:	60fb      	str	r3, [r7, #12]
7000f10c:	68fb      	ldr	r3, [r7, #12]
7000f10e:	2b00      	cmp	r3, #0
7000f110:	d1e9      	bne.n	7000f0e6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
7000f112:	68bb      	ldr	r3, [r7, #8]
7000f114:	2b00      	cmp	r3, #0
7000f116:	d002      	beq.n	7000f11e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
7000f118:	68b8      	ldr	r0, [r7, #8]
7000f11a:	f7ff f9ff 	bl	7000e51c <tcp_abort>
  }
}
7000f11e:	bf00      	nop
7000f120:	3710      	adds	r7, #16
7000f122:	46bd      	mov	sp, r7
7000f124:	bd80      	pop	{r7, pc}
7000f126:	bf00      	nop
7000f128:	24008488 	.word	0x24008488
7000f12c:	24008478 	.word	0x24008478

7000f130 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
7000f130:	b580      	push	{r7, lr}
7000f132:	b082      	sub	sp, #8
7000f134:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
7000f136:	4b10      	ldr	r3, [pc, #64]	@ (7000f178 <tcp_handle_closepend+0x48>)
7000f138:	681b      	ldr	r3, [r3, #0]
7000f13a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
7000f13c:	e014      	b.n	7000f168 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
7000f13e:	687b      	ldr	r3, [r7, #4]
7000f140:	68db      	ldr	r3, [r3, #12]
7000f142:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
7000f144:	687b      	ldr	r3, [r7, #4]
7000f146:	8b5b      	ldrh	r3, [r3, #26]
7000f148:	f003 0308 	and.w	r3, r3, #8
7000f14c:	2b00      	cmp	r3, #0
7000f14e:	d009      	beq.n	7000f164 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
7000f150:	687b      	ldr	r3, [r7, #4]
7000f152:	8b5b      	ldrh	r3, [r3, #26]
7000f154:	f023 0308 	bic.w	r3, r3, #8
7000f158:	b29a      	uxth	r2, r3
7000f15a:	687b      	ldr	r3, [r7, #4]
7000f15c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
7000f15e:	6878      	ldr	r0, [r7, #4]
7000f160:	f7ff f8a0 	bl	7000e2a4 <tcp_close_shutdown_fin>
    }
    pcb = next;
7000f164:	683b      	ldr	r3, [r7, #0]
7000f166:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
7000f168:	687b      	ldr	r3, [r7, #4]
7000f16a:	2b00      	cmp	r3, #0
7000f16c:	d1e7      	bne.n	7000f13e <tcp_handle_closepend+0xe>
  }
}
7000f16e:	bf00      	nop
7000f170:	bf00      	nop
7000f172:	3708      	adds	r7, #8
7000f174:	46bd      	mov	sp, r7
7000f176:	bd80      	pop	{r7, pc}
7000f178:	24008484 	.word	0x24008484

7000f17c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
7000f17c:	b580      	push	{r7, lr}
7000f17e:	b084      	sub	sp, #16
7000f180:	af00      	add	r7, sp, #0
7000f182:	4603      	mov	r3, r0
7000f184:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
7000f186:	2001      	movs	r0, #1
7000f188:	f7fd fcb2 	bl	7000caf0 <memp_malloc>
7000f18c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
7000f18e:	68fb      	ldr	r3, [r7, #12]
7000f190:	2b00      	cmp	r3, #0
7000f192:	d126      	bne.n	7000f1e2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
7000f194:	f7ff ffcc 	bl	7000f130 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
7000f198:	f7ff ff9a 	bl	7000f0d0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
7000f19c:	2001      	movs	r0, #1
7000f19e:	f7fd fca7 	bl	7000caf0 <memp_malloc>
7000f1a2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
7000f1a4:	68fb      	ldr	r3, [r7, #12]
7000f1a6:	2b00      	cmp	r3, #0
7000f1a8:	d11b      	bne.n	7000f1e2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
7000f1aa:	2009      	movs	r0, #9
7000f1ac:	f7ff ff46 	bl	7000f03c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
7000f1b0:	2001      	movs	r0, #1
7000f1b2:	f7fd fc9d 	bl	7000caf0 <memp_malloc>
7000f1b6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
7000f1b8:	68fb      	ldr	r3, [r7, #12]
7000f1ba:	2b00      	cmp	r3, #0
7000f1bc:	d111      	bne.n	7000f1e2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
7000f1be:	2008      	movs	r0, #8
7000f1c0:	f7ff ff3c 	bl	7000f03c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
7000f1c4:	2001      	movs	r0, #1
7000f1c6:	f7fd fc93 	bl	7000caf0 <memp_malloc>
7000f1ca:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
7000f1cc:	68fb      	ldr	r3, [r7, #12]
7000f1ce:	2b00      	cmp	r3, #0
7000f1d0:	d107      	bne.n	7000f1e2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
7000f1d2:	79fb      	ldrb	r3, [r7, #7]
7000f1d4:	4618      	mov	r0, r3
7000f1d6:	f7ff fee3 	bl	7000efa0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
7000f1da:	2001      	movs	r0, #1
7000f1dc:	f7fd fc88 	bl	7000caf0 <memp_malloc>
7000f1e0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
7000f1e2:	68fb      	ldr	r3, [r7, #12]
7000f1e4:	2b00      	cmp	r3, #0
7000f1e6:	d03f      	beq.n	7000f268 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
7000f1e8:	229c      	movs	r2, #156	@ 0x9c
7000f1ea:	2100      	movs	r1, #0
7000f1ec:	68f8      	ldr	r0, [r7, #12]
7000f1ee:	f004 fdfc 	bl	70013dea <memset>
    pcb->prio = prio;
7000f1f2:	68fb      	ldr	r3, [r7, #12]
7000f1f4:	79fa      	ldrb	r2, [r7, #7]
7000f1f6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
7000f1f8:	68fb      	ldr	r3, [r7, #12]
7000f1fa:	f44f 6286 	mov.w	r2, #1072	@ 0x430
7000f1fe:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
7000f202:	68fb      	ldr	r3, [r7, #12]
7000f204:	f44f 6206 	mov.w	r2, #2144	@ 0x860
7000f208:	855a      	strh	r2, [r3, #42]	@ 0x2a
7000f20a:	68fb      	ldr	r3, [r7, #12]
7000f20c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
7000f20e:	68fb      	ldr	r3, [r7, #12]
7000f210:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
7000f212:	68fb      	ldr	r3, [r7, #12]
7000f214:	22ff      	movs	r2, #255	@ 0xff
7000f216:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
7000f218:	68fb      	ldr	r3, [r7, #12]
7000f21a:	f44f 7206 	mov.w	r2, #536	@ 0x218
7000f21e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
7000f220:	68fb      	ldr	r3, [r7, #12]
7000f222:	2206      	movs	r2, #6
7000f224:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
7000f228:	68fb      	ldr	r3, [r7, #12]
7000f22a:	2206      	movs	r2, #6
7000f22c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
7000f22e:	68fb      	ldr	r3, [r7, #12]
7000f230:	f64f 72ff 	movw	r2, #65535	@ 0xffff
7000f234:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
7000f236:	68fb      	ldr	r3, [r7, #12]
7000f238:	2201      	movs	r2, #1
7000f23a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
7000f23e:	4b0d      	ldr	r3, [pc, #52]	@ (7000f274 <tcp_alloc+0xf8>)
7000f240:	681a      	ldr	r2, [r3, #0]
7000f242:	68fb      	ldr	r3, [r7, #12]
7000f244:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
7000f246:	4b0c      	ldr	r3, [pc, #48]	@ (7000f278 <tcp_alloc+0xfc>)
7000f248:	781a      	ldrb	r2, [r3, #0]
7000f24a:	68fb      	ldr	r3, [r7, #12]
7000f24c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
7000f24e:	68fb      	ldr	r3, [r7, #12]
7000f250:	f44f 6286 	mov.w	r2, #1072	@ 0x430
7000f254:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
7000f258:	68fb      	ldr	r3, [r7, #12]
7000f25a:	4a08      	ldr	r2, [pc, #32]	@ (7000f27c <tcp_alloc+0x100>)
7000f25c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
7000f260:	68fb      	ldr	r3, [r7, #12]
7000f262:	4a07      	ldr	r2, [pc, #28]	@ (7000f280 <tcp_alloc+0x104>)
7000f264:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
7000f268:	68fb      	ldr	r3, [r7, #12]
}
7000f26a:	4618      	mov	r0, r3
7000f26c:	3710      	adds	r7, #16
7000f26e:	46bd      	mov	sp, r7
7000f270:	bd80      	pop	{r7, pc}
7000f272:	bf00      	nop
7000f274:	24008478 	.word	0x24008478
7000f278:	2400848e 	.word	0x2400848e
7000f27c:	7000ef51 	.word	0x7000ef51
7000f280:	006ddd00 	.word	0x006ddd00

7000f284 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
7000f284:	b580      	push	{r7, lr}
7000f286:	b082      	sub	sp, #8
7000f288:	af00      	add	r7, sp, #0
7000f28a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
7000f28c:	687b      	ldr	r3, [r7, #4]
7000f28e:	2b00      	cmp	r3, #0
7000f290:	d037      	beq.n	7000f302 <tcp_pcb_purge+0x7e>

  if (pcb->state != CLOSED &&
7000f292:	687b      	ldr	r3, [r7, #4]
7000f294:	7d1b      	ldrb	r3, [r3, #20]
7000f296:	2b00      	cmp	r3, #0
7000f298:	d033      	beq.n	7000f302 <tcp_pcb_purge+0x7e>
      pcb->state != TIME_WAIT &&
7000f29a:	687b      	ldr	r3, [r7, #4]
7000f29c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
7000f29e:	2b0a      	cmp	r3, #10
7000f2a0:	d02f      	beq.n	7000f302 <tcp_pcb_purge+0x7e>
      pcb->state != LISTEN) {
7000f2a2:	687b      	ldr	r3, [r7, #4]
7000f2a4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
7000f2a6:	2b01      	cmp	r3, #1
7000f2a8:	d02b      	beq.n	7000f302 <tcp_pcb_purge+0x7e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
7000f2aa:	687b      	ldr	r3, [r7, #4]
7000f2ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000f2ae:	2b00      	cmp	r3, #0
7000f2b0:	d007      	beq.n	7000f2c2 <tcp_pcb_purge+0x3e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
7000f2b2:	687b      	ldr	r3, [r7, #4]
7000f2b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000f2b6:	4618      	mov	r0, r3
7000f2b8:	f7fe fac6 	bl	7000d848 <pbuf_free>
      pcb->refused_data = NULL;
7000f2bc:	687b      	ldr	r3, [r7, #4]
7000f2be:	2200      	movs	r2, #0
7000f2c0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
7000f2c2:	687b      	ldr	r3, [r7, #4]
7000f2c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000f2c6:	2b00      	cmp	r3, #0
7000f2c8:	d002      	beq.n	7000f2d0 <tcp_pcb_purge+0x4c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
7000f2ca:	6878      	ldr	r0, [r7, #4]
7000f2cc:	f000 f980 	bl	7000f5d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
7000f2d0:	687b      	ldr	r3, [r7, #4]
7000f2d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
7000f2d6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
7000f2d8:	687b      	ldr	r3, [r7, #4]
7000f2da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7000f2dc:	4618      	mov	r0, r3
7000f2de:	f7ff fdde 	bl	7000ee9e <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
7000f2e2:	687b      	ldr	r3, [r7, #4]
7000f2e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000f2e6:	4618      	mov	r0, r3
7000f2e8:	f7ff fdd9 	bl	7000ee9e <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
7000f2ec:	687b      	ldr	r3, [r7, #4]
7000f2ee:	2200      	movs	r2, #0
7000f2f0:	66da      	str	r2, [r3, #108]	@ 0x6c
7000f2f2:	687b      	ldr	r3, [r7, #4]
7000f2f4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
7000f2f6:	687b      	ldr	r3, [r7, #4]
7000f2f8:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
7000f2fa:	687b      	ldr	r3, [r7, #4]
7000f2fc:	2200      	movs	r2, #0
7000f2fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
7000f302:	3708      	adds	r7, #8
7000f304:	46bd      	mov	sp, r7
7000f306:	bd80      	pop	{r7, pc}

7000f308 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
7000f308:	b580      	push	{r7, lr}
7000f30a:	b084      	sub	sp, #16
7000f30c:	af00      	add	r7, sp, #0
7000f30e:	6078      	str	r0, [r7, #4]
7000f310:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
7000f312:	683b      	ldr	r3, [r7, #0]
7000f314:	2b00      	cmp	r3, #0
7000f316:	d106      	bne.n	7000f326 <tcp_pcb_remove+0x1e>
7000f318:	4b3e      	ldr	r3, [pc, #248]	@ (7000f414 <tcp_pcb_remove+0x10c>)
7000f31a:	f640 0287 	movw	r2, #2183	@ 0x887
7000f31e:	493e      	ldr	r1, [pc, #248]	@ (7000f418 <tcp_pcb_remove+0x110>)
7000f320:	483e      	ldr	r0, [pc, #248]	@ (7000f41c <tcp_pcb_remove+0x114>)
7000f322:	f004 fcfd 	bl	70013d20 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
7000f326:	687b      	ldr	r3, [r7, #4]
7000f328:	2b00      	cmp	r3, #0
7000f32a:	d106      	bne.n	7000f33a <tcp_pcb_remove+0x32>
7000f32c:	4b39      	ldr	r3, [pc, #228]	@ (7000f414 <tcp_pcb_remove+0x10c>)
7000f32e:	f640 0288 	movw	r2, #2184	@ 0x888
7000f332:	493b      	ldr	r1, [pc, #236]	@ (7000f420 <tcp_pcb_remove+0x118>)
7000f334:	4839      	ldr	r0, [pc, #228]	@ (7000f41c <tcp_pcb_remove+0x114>)
7000f336:	f004 fcf3 	bl	70013d20 <iprintf>

  TCP_RMV(pcblist, pcb);
7000f33a:	687b      	ldr	r3, [r7, #4]
7000f33c:	681b      	ldr	r3, [r3, #0]
7000f33e:	683a      	ldr	r2, [r7, #0]
7000f340:	429a      	cmp	r2, r3
7000f342:	d105      	bne.n	7000f350 <tcp_pcb_remove+0x48>
7000f344:	687b      	ldr	r3, [r7, #4]
7000f346:	681b      	ldr	r3, [r3, #0]
7000f348:	68da      	ldr	r2, [r3, #12]
7000f34a:	687b      	ldr	r3, [r7, #4]
7000f34c:	601a      	str	r2, [r3, #0]
7000f34e:	e013      	b.n	7000f378 <tcp_pcb_remove+0x70>
7000f350:	687b      	ldr	r3, [r7, #4]
7000f352:	681b      	ldr	r3, [r3, #0]
7000f354:	60fb      	str	r3, [r7, #12]
7000f356:	e00c      	b.n	7000f372 <tcp_pcb_remove+0x6a>
7000f358:	68fb      	ldr	r3, [r7, #12]
7000f35a:	68db      	ldr	r3, [r3, #12]
7000f35c:	683a      	ldr	r2, [r7, #0]
7000f35e:	429a      	cmp	r2, r3
7000f360:	d104      	bne.n	7000f36c <tcp_pcb_remove+0x64>
7000f362:	683b      	ldr	r3, [r7, #0]
7000f364:	68da      	ldr	r2, [r3, #12]
7000f366:	68fb      	ldr	r3, [r7, #12]
7000f368:	60da      	str	r2, [r3, #12]
7000f36a:	e005      	b.n	7000f378 <tcp_pcb_remove+0x70>
7000f36c:	68fb      	ldr	r3, [r7, #12]
7000f36e:	68db      	ldr	r3, [r3, #12]
7000f370:	60fb      	str	r3, [r7, #12]
7000f372:	68fb      	ldr	r3, [r7, #12]
7000f374:	2b00      	cmp	r3, #0
7000f376:	d1ef      	bne.n	7000f358 <tcp_pcb_remove+0x50>
7000f378:	683b      	ldr	r3, [r7, #0]
7000f37a:	2200      	movs	r2, #0
7000f37c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
7000f37e:	6838      	ldr	r0, [r7, #0]
7000f380:	f7ff ff80 	bl	7000f284 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
7000f384:	683b      	ldr	r3, [r7, #0]
7000f386:	7d1b      	ldrb	r3, [r3, #20]
7000f388:	2b0a      	cmp	r3, #10
7000f38a:	d013      	beq.n	7000f3b4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
7000f38c:	683b      	ldr	r3, [r7, #0]
7000f38e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
7000f390:	2b01      	cmp	r3, #1
7000f392:	d00f      	beq.n	7000f3b4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
7000f394:	683b      	ldr	r3, [r7, #0]
7000f396:	8b5b      	ldrh	r3, [r3, #26]
7000f398:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
7000f39c:	2b00      	cmp	r3, #0
7000f39e:	d009      	beq.n	7000f3b4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
7000f3a0:	683b      	ldr	r3, [r7, #0]
7000f3a2:	8b5b      	ldrh	r3, [r3, #26]
7000f3a4:	f043 0302 	orr.w	r3, r3, #2
7000f3a8:	b29a      	uxth	r2, r3
7000f3aa:	683b      	ldr	r3, [r7, #0]
7000f3ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
7000f3ae:	6838      	ldr	r0, [r7, #0]
7000f3b0:	f002 ff6a 	bl	70012288 <tcp_output>
  }

  if (pcb->state != LISTEN) {
7000f3b4:	683b      	ldr	r3, [r7, #0]
7000f3b6:	7d1b      	ldrb	r3, [r3, #20]
7000f3b8:	2b01      	cmp	r3, #1
7000f3ba:	d020      	beq.n	7000f3fe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
7000f3bc:	683b      	ldr	r3, [r7, #0]
7000f3be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7000f3c0:	2b00      	cmp	r3, #0
7000f3c2:	d006      	beq.n	7000f3d2 <tcp_pcb_remove+0xca>
7000f3c4:	4b13      	ldr	r3, [pc, #76]	@ (7000f414 <tcp_pcb_remove+0x10c>)
7000f3c6:	f640 0297 	movw	r2, #2199	@ 0x897
7000f3ca:	4916      	ldr	r1, [pc, #88]	@ (7000f424 <tcp_pcb_remove+0x11c>)
7000f3cc:	4813      	ldr	r0, [pc, #76]	@ (7000f41c <tcp_pcb_remove+0x114>)
7000f3ce:	f004 fca7 	bl	70013d20 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
7000f3d2:	683b      	ldr	r3, [r7, #0]
7000f3d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000f3d6:	2b00      	cmp	r3, #0
7000f3d8:	d006      	beq.n	7000f3e8 <tcp_pcb_remove+0xe0>
7000f3da:	4b0e      	ldr	r3, [pc, #56]	@ (7000f414 <tcp_pcb_remove+0x10c>)
7000f3dc:	f640 0298 	movw	r2, #2200	@ 0x898
7000f3e0:	4911      	ldr	r1, [pc, #68]	@ (7000f428 <tcp_pcb_remove+0x120>)
7000f3e2:	480e      	ldr	r0, [pc, #56]	@ (7000f41c <tcp_pcb_remove+0x114>)
7000f3e4:	f004 fc9c 	bl	70013d20 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
7000f3e8:	683b      	ldr	r3, [r7, #0]
7000f3ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000f3ec:	2b00      	cmp	r3, #0
7000f3ee:	d006      	beq.n	7000f3fe <tcp_pcb_remove+0xf6>
7000f3f0:	4b08      	ldr	r3, [pc, #32]	@ (7000f414 <tcp_pcb_remove+0x10c>)
7000f3f2:	f640 029a 	movw	r2, #2202	@ 0x89a
7000f3f6:	490d      	ldr	r1, [pc, #52]	@ (7000f42c <tcp_pcb_remove+0x124>)
7000f3f8:	4808      	ldr	r0, [pc, #32]	@ (7000f41c <tcp_pcb_remove+0x114>)
7000f3fa:	f004 fc91 	bl	70013d20 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
7000f3fe:	683b      	ldr	r3, [r7, #0]
7000f400:	2200      	movs	r2, #0
7000f402:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
7000f404:	683b      	ldr	r3, [r7, #0]
7000f406:	2200      	movs	r2, #0
7000f408:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
7000f40a:	bf00      	nop
7000f40c:	3710      	adds	r7, #16
7000f40e:	46bd      	mov	sp, r7
7000f410:	bd80      	pop	{r7, pc}
7000f412:	bf00      	nop
7000f414:	70015c60 	.word	0x70015c60
7000f418:	700160e8 	.word	0x700160e8
7000f41c:	70015cd0 	.word	0x70015cd0
7000f420:	70016104 	.word	0x70016104
7000f424:	70016124 	.word	0x70016124
7000f428:	7001613c 	.word	0x7001613c
7000f42c:	70016158 	.word	0x70016158

7000f430 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
7000f430:	b580      	push	{r7, lr}
7000f432:	b082      	sub	sp, #8
7000f434:	af00      	add	r7, sp, #0
7000f436:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
7000f438:	687b      	ldr	r3, [r7, #4]
7000f43a:	2b00      	cmp	r3, #0
7000f43c:	d106      	bne.n	7000f44c <tcp_next_iss+0x1c>
7000f43e:	4b0a      	ldr	r3, [pc, #40]	@ (7000f468 <tcp_next_iss+0x38>)
7000f440:	f640 02b3 	movw	r2, #2227	@ 0x8b3
7000f444:	4909      	ldr	r1, [pc, #36]	@ (7000f46c <tcp_next_iss+0x3c>)
7000f446:	480a      	ldr	r0, [pc, #40]	@ (7000f470 <tcp_next_iss+0x40>)
7000f448:	f004 fc6a 	bl	70013d20 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
7000f44c:	4b09      	ldr	r3, [pc, #36]	@ (7000f474 <tcp_next_iss+0x44>)
7000f44e:	681a      	ldr	r2, [r3, #0]
7000f450:	4b09      	ldr	r3, [pc, #36]	@ (7000f478 <tcp_next_iss+0x48>)
7000f452:	681b      	ldr	r3, [r3, #0]
7000f454:	4413      	add	r3, r2
7000f456:	4a07      	ldr	r2, [pc, #28]	@ (7000f474 <tcp_next_iss+0x44>)
7000f458:	6013      	str	r3, [r2, #0]
  return iss;
7000f45a:	4b06      	ldr	r3, [pc, #24]	@ (7000f474 <tcp_next_iss+0x44>)
7000f45c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
7000f45e:	4618      	mov	r0, r3
7000f460:	3708      	adds	r7, #8
7000f462:	46bd      	mov	sp, r7
7000f464:	bd80      	pop	{r7, pc}
7000f466:	bf00      	nop
7000f468:	70015c60 	.word	0x70015c60
7000f46c:	70016170 	.word	0x70016170
7000f470:	70015cd0 	.word	0x70015cd0
7000f474:	2400002c 	.word	0x2400002c
7000f478:	24008478 	.word	0x24008478

7000f47c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
7000f47c:	b580      	push	{r7, lr}
7000f47e:	b086      	sub	sp, #24
7000f480:	af00      	add	r7, sp, #0
7000f482:	4603      	mov	r3, r0
7000f484:	60b9      	str	r1, [r7, #8]
7000f486:	607a      	str	r2, [r7, #4]
7000f488:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
7000f48a:	687b      	ldr	r3, [r7, #4]
7000f48c:	2b00      	cmp	r3, #0
7000f48e:	d106      	bne.n	7000f49e <tcp_eff_send_mss_netif+0x22>
7000f490:	4b14      	ldr	r3, [pc, #80]	@ (7000f4e4 <tcp_eff_send_mss_netif+0x68>)
7000f492:	f640 02c9 	movw	r2, #2249	@ 0x8c9
7000f496:	4914      	ldr	r1, [pc, #80]	@ (7000f4e8 <tcp_eff_send_mss_netif+0x6c>)
7000f498:	4814      	ldr	r0, [pc, #80]	@ (7000f4ec <tcp_eff_send_mss_netif+0x70>)
7000f49a:	f004 fc41 	bl	70013d20 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
7000f49e:	68bb      	ldr	r3, [r7, #8]
7000f4a0:	2b00      	cmp	r3, #0
7000f4a2:	d101      	bne.n	7000f4a8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
7000f4a4:	89fb      	ldrh	r3, [r7, #14]
7000f4a6:	e019      	b.n	7000f4dc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
7000f4a8:	68bb      	ldr	r3, [r7, #8]
7000f4aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
7000f4ac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
7000f4ae:	8afb      	ldrh	r3, [r7, #22]
7000f4b0:	2b00      	cmp	r3, #0
7000f4b2:	d012      	beq.n	7000f4da <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
7000f4b4:	2328      	movs	r3, #40	@ 0x28
7000f4b6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
7000f4b8:	8afa      	ldrh	r2, [r7, #22]
7000f4ba:	8abb      	ldrh	r3, [r7, #20]
7000f4bc:	429a      	cmp	r2, r3
7000f4be:	d904      	bls.n	7000f4ca <tcp_eff_send_mss_netif+0x4e>
7000f4c0:	8afa      	ldrh	r2, [r7, #22]
7000f4c2:	8abb      	ldrh	r3, [r7, #20]
7000f4c4:	1ad3      	subs	r3, r2, r3
7000f4c6:	b29b      	uxth	r3, r3
7000f4c8:	e000      	b.n	7000f4cc <tcp_eff_send_mss_netif+0x50>
7000f4ca:	2300      	movs	r3, #0
7000f4cc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
7000f4ce:	8a7a      	ldrh	r2, [r7, #18]
7000f4d0:	89fb      	ldrh	r3, [r7, #14]
7000f4d2:	4293      	cmp	r3, r2
7000f4d4:	bf28      	it	cs
7000f4d6:	4613      	movcs	r3, r2
7000f4d8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
7000f4da:	89fb      	ldrh	r3, [r7, #14]
}
7000f4dc:	4618      	mov	r0, r3
7000f4de:	3718      	adds	r7, #24
7000f4e0:	46bd      	mov	sp, r7
7000f4e2:	bd80      	pop	{r7, pc}
7000f4e4:	70015c60 	.word	0x70015c60
7000f4e8:	7001618c 	.word	0x7001618c
7000f4ec:	70015cd0 	.word	0x70015cd0

7000f4f0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
7000f4f0:	b580      	push	{r7, lr}
7000f4f2:	b084      	sub	sp, #16
7000f4f4:	af00      	add	r7, sp, #0
7000f4f6:	6078      	str	r0, [r7, #4]
7000f4f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
7000f4fa:	683b      	ldr	r3, [r7, #0]
7000f4fc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
7000f4fe:	687b      	ldr	r3, [r7, #4]
7000f500:	2b00      	cmp	r3, #0
7000f502:	d119      	bne.n	7000f538 <tcp_netif_ip_addr_changed_pcblist+0x48>
7000f504:	4b10      	ldr	r3, [pc, #64]	@ (7000f548 <tcp_netif_ip_addr_changed_pcblist+0x58>)
7000f506:	f640 1204 	movw	r2, #2308	@ 0x904
7000f50a:	4910      	ldr	r1, [pc, #64]	@ (7000f54c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
7000f50c:	4810      	ldr	r0, [pc, #64]	@ (7000f550 <tcp_netif_ip_addr_changed_pcblist+0x60>)
7000f50e:	f004 fc07 	bl	70013d20 <iprintf>

  while (pcb != NULL) {
7000f512:	e011      	b.n	7000f538 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
7000f514:	68fb      	ldr	r3, [r7, #12]
7000f516:	681a      	ldr	r2, [r3, #0]
7000f518:	687b      	ldr	r3, [r7, #4]
7000f51a:	681b      	ldr	r3, [r3, #0]
7000f51c:	429a      	cmp	r2, r3
7000f51e:	d108      	bne.n	7000f532 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
7000f520:	68fb      	ldr	r3, [r7, #12]
7000f522:	68db      	ldr	r3, [r3, #12]
7000f524:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
7000f526:	68f8      	ldr	r0, [r7, #12]
7000f528:	f7fe fff8 	bl	7000e51c <tcp_abort>
      pcb = next;
7000f52c:	68bb      	ldr	r3, [r7, #8]
7000f52e:	60fb      	str	r3, [r7, #12]
7000f530:	e002      	b.n	7000f538 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
7000f532:	68fb      	ldr	r3, [r7, #12]
7000f534:	68db      	ldr	r3, [r3, #12]
7000f536:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
7000f538:	68fb      	ldr	r3, [r7, #12]
7000f53a:	2b00      	cmp	r3, #0
7000f53c:	d1ea      	bne.n	7000f514 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
7000f53e:	bf00      	nop
7000f540:	bf00      	nop
7000f542:	3710      	adds	r7, #16
7000f544:	46bd      	mov	sp, r7
7000f546:	bd80      	pop	{r7, pc}
7000f548:	70015c60 	.word	0x70015c60
7000f54c:	700161b4 	.word	0x700161b4
7000f550:	70015cd0 	.word	0x70015cd0

7000f554 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
7000f554:	b580      	push	{r7, lr}
7000f556:	b084      	sub	sp, #16
7000f558:	af00      	add	r7, sp, #0
7000f55a:	6078      	str	r0, [r7, #4]
7000f55c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
7000f55e:	687b      	ldr	r3, [r7, #4]
7000f560:	2b00      	cmp	r3, #0
7000f562:	d02a      	beq.n	7000f5ba <tcp_netif_ip_addr_changed+0x66>
7000f564:	687b      	ldr	r3, [r7, #4]
7000f566:	681b      	ldr	r3, [r3, #0]
7000f568:	2b00      	cmp	r3, #0
7000f56a:	d026      	beq.n	7000f5ba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
7000f56c:	4b15      	ldr	r3, [pc, #84]	@ (7000f5c4 <tcp_netif_ip_addr_changed+0x70>)
7000f56e:	681b      	ldr	r3, [r3, #0]
7000f570:	4619      	mov	r1, r3
7000f572:	6878      	ldr	r0, [r7, #4]
7000f574:	f7ff ffbc 	bl	7000f4f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
7000f578:	4b13      	ldr	r3, [pc, #76]	@ (7000f5c8 <tcp_netif_ip_addr_changed+0x74>)
7000f57a:	681b      	ldr	r3, [r3, #0]
7000f57c:	4619      	mov	r1, r3
7000f57e:	6878      	ldr	r0, [r7, #4]
7000f580:	f7ff ffb6 	bl	7000f4f0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
7000f584:	683b      	ldr	r3, [r7, #0]
7000f586:	2b00      	cmp	r3, #0
7000f588:	d017      	beq.n	7000f5ba <tcp_netif_ip_addr_changed+0x66>
7000f58a:	683b      	ldr	r3, [r7, #0]
7000f58c:	681b      	ldr	r3, [r3, #0]
7000f58e:	2b00      	cmp	r3, #0
7000f590:	d013      	beq.n	7000f5ba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
7000f592:	4b0e      	ldr	r3, [pc, #56]	@ (7000f5cc <tcp_netif_ip_addr_changed+0x78>)
7000f594:	681b      	ldr	r3, [r3, #0]
7000f596:	60fb      	str	r3, [r7, #12]
7000f598:	e00c      	b.n	7000f5b4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
7000f59a:	68fb      	ldr	r3, [r7, #12]
7000f59c:	681a      	ldr	r2, [r3, #0]
7000f59e:	687b      	ldr	r3, [r7, #4]
7000f5a0:	681b      	ldr	r3, [r3, #0]
7000f5a2:	429a      	cmp	r2, r3
7000f5a4:	d103      	bne.n	7000f5ae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
7000f5a6:	683b      	ldr	r3, [r7, #0]
7000f5a8:	681a      	ldr	r2, [r3, #0]
7000f5aa:	68fb      	ldr	r3, [r7, #12]
7000f5ac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
7000f5ae:	68fb      	ldr	r3, [r7, #12]
7000f5b0:	68db      	ldr	r3, [r3, #12]
7000f5b2:	60fb      	str	r3, [r7, #12]
7000f5b4:	68fb      	ldr	r3, [r7, #12]
7000f5b6:	2b00      	cmp	r3, #0
7000f5b8:	d1ef      	bne.n	7000f59a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
7000f5ba:	bf00      	nop
7000f5bc:	3710      	adds	r7, #16
7000f5be:	46bd      	mov	sp, r7
7000f5c0:	bd80      	pop	{r7, pc}
7000f5c2:	bf00      	nop
7000f5c4:	24008484 	.word	0x24008484
7000f5c8:	2400847c 	.word	0x2400847c
7000f5cc:	24008480 	.word	0x24008480

7000f5d0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
7000f5d0:	b580      	push	{r7, lr}
7000f5d2:	b082      	sub	sp, #8
7000f5d4:	af00      	add	r7, sp, #0
7000f5d6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
7000f5d8:	687b      	ldr	r3, [r7, #4]
7000f5da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000f5dc:	2b00      	cmp	r3, #0
7000f5de:	d007      	beq.n	7000f5f0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
7000f5e0:	687b      	ldr	r3, [r7, #4]
7000f5e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000f5e4:	4618      	mov	r0, r3
7000f5e6:	f7ff fc5a 	bl	7000ee9e <tcp_segs_free>
    pcb->ooseq = NULL;
7000f5ea:	687b      	ldr	r3, [r7, #4]
7000f5ec:	2200      	movs	r2, #0
7000f5ee:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
7000f5f0:	bf00      	nop
7000f5f2:	3708      	adds	r7, #8
7000f5f4:	46bd      	mov	sp, r7
7000f5f6:	bd80      	pop	{r7, pc}

7000f5f8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
7000f5f8:	b590      	push	{r4, r7, lr}
7000f5fa:	b08d      	sub	sp, #52	@ 0x34
7000f5fc:	af04      	add	r7, sp, #16
7000f5fe:	6078      	str	r0, [r7, #4]
7000f600:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
7000f602:	687b      	ldr	r3, [r7, #4]
7000f604:	2b00      	cmp	r3, #0
7000f606:	d105      	bne.n	7000f614 <tcp_input+0x1c>
7000f608:	4b9b      	ldr	r3, [pc, #620]	@ (7000f878 <tcp_input+0x280>)
7000f60a:	2283      	movs	r2, #131	@ 0x83
7000f60c:	499b      	ldr	r1, [pc, #620]	@ (7000f87c <tcp_input+0x284>)
7000f60e:	489c      	ldr	r0, [pc, #624]	@ (7000f880 <tcp_input+0x288>)
7000f610:	f004 fb86 	bl	70013d20 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
7000f614:	687b      	ldr	r3, [r7, #4]
7000f616:	685b      	ldr	r3, [r3, #4]
7000f618:	4a9a      	ldr	r2, [pc, #616]	@ (7000f884 <tcp_input+0x28c>)
7000f61a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
7000f61c:	687b      	ldr	r3, [r7, #4]
7000f61e:	895b      	ldrh	r3, [r3, #10]
7000f620:	2b13      	cmp	r3, #19
7000f622:	f240 83d1 	bls.w	7000fdc8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
7000f626:	4b98      	ldr	r3, [pc, #608]	@ (7000f888 <tcp_input+0x290>)
7000f628:	695b      	ldr	r3, [r3, #20]
7000f62a:	4a97      	ldr	r2, [pc, #604]	@ (7000f888 <tcp_input+0x290>)
7000f62c:	6812      	ldr	r2, [r2, #0]
7000f62e:	4611      	mov	r1, r2
7000f630:	4618      	mov	r0, r3
7000f632:	f7fb ff59 	bl	7000b4e8 <ip4_addr_isbroadcast_u32>
7000f636:	4603      	mov	r3, r0
7000f638:	2b00      	cmp	r3, #0
7000f63a:	f040 83c7 	bne.w	7000fdcc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
7000f63e:	4b92      	ldr	r3, [pc, #584]	@ (7000f888 <tcp_input+0x290>)
7000f640:	695b      	ldr	r3, [r3, #20]
7000f642:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
7000f646:	2be0      	cmp	r3, #224	@ 0xe0
7000f648:	f000 83c0 	beq.w	7000fdcc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
7000f64c:	4b8d      	ldr	r3, [pc, #564]	@ (7000f884 <tcp_input+0x28c>)
7000f64e:	681b      	ldr	r3, [r3, #0]
7000f650:	899b      	ldrh	r3, [r3, #12]
7000f652:	b29b      	uxth	r3, r3
7000f654:	4618      	mov	r0, r3
7000f656:	f7fa f9bb 	bl	700099d0 <lwip_htons>
7000f65a:	4603      	mov	r3, r0
7000f65c:	0b1b      	lsrs	r3, r3, #12
7000f65e:	b29b      	uxth	r3, r3
7000f660:	b2db      	uxtb	r3, r3
7000f662:	009b      	lsls	r3, r3, #2
7000f664:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
7000f666:	7cbb      	ldrb	r3, [r7, #18]
7000f668:	2b13      	cmp	r3, #19
7000f66a:	f240 83b1 	bls.w	7000fdd0 <tcp_input+0x7d8>
7000f66e:	7cbb      	ldrb	r3, [r7, #18]
7000f670:	b29a      	uxth	r2, r3
7000f672:	687b      	ldr	r3, [r7, #4]
7000f674:	891b      	ldrh	r3, [r3, #8]
7000f676:	429a      	cmp	r2, r3
7000f678:	f200 83aa 	bhi.w	7000fdd0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
7000f67c:	7cbb      	ldrb	r3, [r7, #18]
7000f67e:	b29b      	uxth	r3, r3
7000f680:	3b14      	subs	r3, #20
7000f682:	b29a      	uxth	r2, r3
7000f684:	4b81      	ldr	r3, [pc, #516]	@ (7000f88c <tcp_input+0x294>)
7000f686:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
7000f688:	4b81      	ldr	r3, [pc, #516]	@ (7000f890 <tcp_input+0x298>)
7000f68a:	2200      	movs	r2, #0
7000f68c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
7000f68e:	687b      	ldr	r3, [r7, #4]
7000f690:	895a      	ldrh	r2, [r3, #10]
7000f692:	7cbb      	ldrb	r3, [r7, #18]
7000f694:	b29b      	uxth	r3, r3
7000f696:	429a      	cmp	r2, r3
7000f698:	d309      	bcc.n	7000f6ae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
7000f69a:	4b7c      	ldr	r3, [pc, #496]	@ (7000f88c <tcp_input+0x294>)
7000f69c:	881a      	ldrh	r2, [r3, #0]
7000f69e:	4b7d      	ldr	r3, [pc, #500]	@ (7000f894 <tcp_input+0x29c>)
7000f6a0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
7000f6a2:	7cbb      	ldrb	r3, [r7, #18]
7000f6a4:	4619      	mov	r1, r3
7000f6a6:	6878      	ldr	r0, [r7, #4]
7000f6a8:	f7fe f852 	bl	7000d750 <pbuf_remove_header>
7000f6ac:	e04e      	b.n	7000f74c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
7000f6ae:	687b      	ldr	r3, [r7, #4]
7000f6b0:	681b      	ldr	r3, [r3, #0]
7000f6b2:	2b00      	cmp	r3, #0
7000f6b4:	d105      	bne.n	7000f6c2 <tcp_input+0xca>
7000f6b6:	4b70      	ldr	r3, [pc, #448]	@ (7000f878 <tcp_input+0x280>)
7000f6b8:	22c2      	movs	r2, #194	@ 0xc2
7000f6ba:	4977      	ldr	r1, [pc, #476]	@ (7000f898 <tcp_input+0x2a0>)
7000f6bc:	4870      	ldr	r0, [pc, #448]	@ (7000f880 <tcp_input+0x288>)
7000f6be:	f004 fb2f 	bl	70013d20 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
7000f6c2:	2114      	movs	r1, #20
7000f6c4:	6878      	ldr	r0, [r7, #4]
7000f6c6:	f7fe f843 	bl	7000d750 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
7000f6ca:	687b      	ldr	r3, [r7, #4]
7000f6cc:	895a      	ldrh	r2, [r3, #10]
7000f6ce:	4b71      	ldr	r3, [pc, #452]	@ (7000f894 <tcp_input+0x29c>)
7000f6d0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
7000f6d2:	4b6e      	ldr	r3, [pc, #440]	@ (7000f88c <tcp_input+0x294>)
7000f6d4:	881a      	ldrh	r2, [r3, #0]
7000f6d6:	4b6f      	ldr	r3, [pc, #444]	@ (7000f894 <tcp_input+0x29c>)
7000f6d8:	881b      	ldrh	r3, [r3, #0]
7000f6da:	1ad3      	subs	r3, r2, r3
7000f6dc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
7000f6de:	4b6d      	ldr	r3, [pc, #436]	@ (7000f894 <tcp_input+0x29c>)
7000f6e0:	881b      	ldrh	r3, [r3, #0]
7000f6e2:	4619      	mov	r1, r3
7000f6e4:	6878      	ldr	r0, [r7, #4]
7000f6e6:	f7fe f833 	bl	7000d750 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
7000f6ea:	687b      	ldr	r3, [r7, #4]
7000f6ec:	681b      	ldr	r3, [r3, #0]
7000f6ee:	895b      	ldrh	r3, [r3, #10]
7000f6f0:	8a3a      	ldrh	r2, [r7, #16]
7000f6f2:	429a      	cmp	r2, r3
7000f6f4:	f200 836e 	bhi.w	7000fdd4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
7000f6f8:	687b      	ldr	r3, [r7, #4]
7000f6fa:	681b      	ldr	r3, [r3, #0]
7000f6fc:	685b      	ldr	r3, [r3, #4]
7000f6fe:	4a64      	ldr	r2, [pc, #400]	@ (7000f890 <tcp_input+0x298>)
7000f700:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
7000f702:	687b      	ldr	r3, [r7, #4]
7000f704:	681b      	ldr	r3, [r3, #0]
7000f706:	8a3a      	ldrh	r2, [r7, #16]
7000f708:	4611      	mov	r1, r2
7000f70a:	4618      	mov	r0, r3
7000f70c:	f7fe f820 	bl	7000d750 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
7000f710:	687b      	ldr	r3, [r7, #4]
7000f712:	891a      	ldrh	r2, [r3, #8]
7000f714:	8a3b      	ldrh	r3, [r7, #16]
7000f716:	1ad3      	subs	r3, r2, r3
7000f718:	b29a      	uxth	r2, r3
7000f71a:	687b      	ldr	r3, [r7, #4]
7000f71c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
7000f71e:	687b      	ldr	r3, [r7, #4]
7000f720:	895b      	ldrh	r3, [r3, #10]
7000f722:	2b00      	cmp	r3, #0
7000f724:	d005      	beq.n	7000f732 <tcp_input+0x13a>
7000f726:	4b54      	ldr	r3, [pc, #336]	@ (7000f878 <tcp_input+0x280>)
7000f728:	22df      	movs	r2, #223	@ 0xdf
7000f72a:	495c      	ldr	r1, [pc, #368]	@ (7000f89c <tcp_input+0x2a4>)
7000f72c:	4854      	ldr	r0, [pc, #336]	@ (7000f880 <tcp_input+0x288>)
7000f72e:	f004 faf7 	bl	70013d20 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
7000f732:	687b      	ldr	r3, [r7, #4]
7000f734:	891a      	ldrh	r2, [r3, #8]
7000f736:	687b      	ldr	r3, [r7, #4]
7000f738:	681b      	ldr	r3, [r3, #0]
7000f73a:	891b      	ldrh	r3, [r3, #8]
7000f73c:	429a      	cmp	r2, r3
7000f73e:	d005      	beq.n	7000f74c <tcp_input+0x154>
7000f740:	4b4d      	ldr	r3, [pc, #308]	@ (7000f878 <tcp_input+0x280>)
7000f742:	22e0      	movs	r2, #224	@ 0xe0
7000f744:	4956      	ldr	r1, [pc, #344]	@ (7000f8a0 <tcp_input+0x2a8>)
7000f746:	484e      	ldr	r0, [pc, #312]	@ (7000f880 <tcp_input+0x288>)
7000f748:	f004 faea 	bl	70013d20 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
7000f74c:	4b4d      	ldr	r3, [pc, #308]	@ (7000f884 <tcp_input+0x28c>)
7000f74e:	681b      	ldr	r3, [r3, #0]
7000f750:	881b      	ldrh	r3, [r3, #0]
7000f752:	b29b      	uxth	r3, r3
7000f754:	4a4b      	ldr	r2, [pc, #300]	@ (7000f884 <tcp_input+0x28c>)
7000f756:	6814      	ldr	r4, [r2, #0]
7000f758:	4618      	mov	r0, r3
7000f75a:	f7fa f939 	bl	700099d0 <lwip_htons>
7000f75e:	4603      	mov	r3, r0
7000f760:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
7000f762:	4b48      	ldr	r3, [pc, #288]	@ (7000f884 <tcp_input+0x28c>)
7000f764:	681b      	ldr	r3, [r3, #0]
7000f766:	885b      	ldrh	r3, [r3, #2]
7000f768:	b29b      	uxth	r3, r3
7000f76a:	4a46      	ldr	r2, [pc, #280]	@ (7000f884 <tcp_input+0x28c>)
7000f76c:	6814      	ldr	r4, [r2, #0]
7000f76e:	4618      	mov	r0, r3
7000f770:	f7fa f92e 	bl	700099d0 <lwip_htons>
7000f774:	4603      	mov	r3, r0
7000f776:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
7000f778:	4b42      	ldr	r3, [pc, #264]	@ (7000f884 <tcp_input+0x28c>)
7000f77a:	681b      	ldr	r3, [r3, #0]
7000f77c:	685b      	ldr	r3, [r3, #4]
7000f77e:	4a41      	ldr	r2, [pc, #260]	@ (7000f884 <tcp_input+0x28c>)
7000f780:	6814      	ldr	r4, [r2, #0]
7000f782:	4618      	mov	r0, r3
7000f784:	f7fa f939 	bl	700099fa <lwip_htonl>
7000f788:	4603      	mov	r3, r0
7000f78a:	6063      	str	r3, [r4, #4]
7000f78c:	6863      	ldr	r3, [r4, #4]
7000f78e:	4a45      	ldr	r2, [pc, #276]	@ (7000f8a4 <tcp_input+0x2ac>)
7000f790:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
7000f792:	4b3c      	ldr	r3, [pc, #240]	@ (7000f884 <tcp_input+0x28c>)
7000f794:	681b      	ldr	r3, [r3, #0]
7000f796:	689b      	ldr	r3, [r3, #8]
7000f798:	4a3a      	ldr	r2, [pc, #232]	@ (7000f884 <tcp_input+0x28c>)
7000f79a:	6814      	ldr	r4, [r2, #0]
7000f79c:	4618      	mov	r0, r3
7000f79e:	f7fa f92c 	bl	700099fa <lwip_htonl>
7000f7a2:	4603      	mov	r3, r0
7000f7a4:	60a3      	str	r3, [r4, #8]
7000f7a6:	68a3      	ldr	r3, [r4, #8]
7000f7a8:	4a3f      	ldr	r2, [pc, #252]	@ (7000f8a8 <tcp_input+0x2b0>)
7000f7aa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
7000f7ac:	4b35      	ldr	r3, [pc, #212]	@ (7000f884 <tcp_input+0x28c>)
7000f7ae:	681b      	ldr	r3, [r3, #0]
7000f7b0:	89db      	ldrh	r3, [r3, #14]
7000f7b2:	b29b      	uxth	r3, r3
7000f7b4:	4a33      	ldr	r2, [pc, #204]	@ (7000f884 <tcp_input+0x28c>)
7000f7b6:	6814      	ldr	r4, [r2, #0]
7000f7b8:	4618      	mov	r0, r3
7000f7ba:	f7fa f909 	bl	700099d0 <lwip_htons>
7000f7be:	4603      	mov	r3, r0
7000f7c0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
7000f7c2:	4b30      	ldr	r3, [pc, #192]	@ (7000f884 <tcp_input+0x28c>)
7000f7c4:	681b      	ldr	r3, [r3, #0]
7000f7c6:	899b      	ldrh	r3, [r3, #12]
7000f7c8:	b29b      	uxth	r3, r3
7000f7ca:	4618      	mov	r0, r3
7000f7cc:	f7fa f900 	bl	700099d0 <lwip_htons>
7000f7d0:	4603      	mov	r3, r0
7000f7d2:	b2db      	uxtb	r3, r3
7000f7d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
7000f7d8:	b2da      	uxtb	r2, r3
7000f7da:	4b34      	ldr	r3, [pc, #208]	@ (7000f8ac <tcp_input+0x2b4>)
7000f7dc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
7000f7de:	687b      	ldr	r3, [r7, #4]
7000f7e0:	891a      	ldrh	r2, [r3, #8]
7000f7e2:	4b33      	ldr	r3, [pc, #204]	@ (7000f8b0 <tcp_input+0x2b8>)
7000f7e4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
7000f7e6:	4b31      	ldr	r3, [pc, #196]	@ (7000f8ac <tcp_input+0x2b4>)
7000f7e8:	781b      	ldrb	r3, [r3, #0]
7000f7ea:	f003 0303 	and.w	r3, r3, #3
7000f7ee:	2b00      	cmp	r3, #0
7000f7f0:	d00c      	beq.n	7000f80c <tcp_input+0x214>
    tcplen++;
7000f7f2:	4b2f      	ldr	r3, [pc, #188]	@ (7000f8b0 <tcp_input+0x2b8>)
7000f7f4:	881b      	ldrh	r3, [r3, #0]
7000f7f6:	3301      	adds	r3, #1
7000f7f8:	b29a      	uxth	r2, r3
7000f7fa:	4b2d      	ldr	r3, [pc, #180]	@ (7000f8b0 <tcp_input+0x2b8>)
7000f7fc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
7000f7fe:	687b      	ldr	r3, [r7, #4]
7000f800:	891a      	ldrh	r2, [r3, #8]
7000f802:	4b2b      	ldr	r3, [pc, #172]	@ (7000f8b0 <tcp_input+0x2b8>)
7000f804:	881b      	ldrh	r3, [r3, #0]
7000f806:	429a      	cmp	r2, r3
7000f808:	f200 82e6 	bhi.w	7000fdd8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
7000f80c:	2300      	movs	r3, #0
7000f80e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
7000f810:	4b28      	ldr	r3, [pc, #160]	@ (7000f8b4 <tcp_input+0x2bc>)
7000f812:	681b      	ldr	r3, [r3, #0]
7000f814:	61fb      	str	r3, [r7, #28]
7000f816:	e09d      	b.n	7000f954 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
7000f818:	69fb      	ldr	r3, [r7, #28]
7000f81a:	7d1b      	ldrb	r3, [r3, #20]
7000f81c:	2b00      	cmp	r3, #0
7000f81e:	d105      	bne.n	7000f82c <tcp_input+0x234>
7000f820:	4b15      	ldr	r3, [pc, #84]	@ (7000f878 <tcp_input+0x280>)
7000f822:	22fb      	movs	r2, #251	@ 0xfb
7000f824:	4924      	ldr	r1, [pc, #144]	@ (7000f8b8 <tcp_input+0x2c0>)
7000f826:	4816      	ldr	r0, [pc, #88]	@ (7000f880 <tcp_input+0x288>)
7000f828:	f004 fa7a 	bl	70013d20 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
7000f82c:	69fb      	ldr	r3, [r7, #28]
7000f82e:	7d1b      	ldrb	r3, [r3, #20]
7000f830:	2b0a      	cmp	r3, #10
7000f832:	d105      	bne.n	7000f840 <tcp_input+0x248>
7000f834:	4b10      	ldr	r3, [pc, #64]	@ (7000f878 <tcp_input+0x280>)
7000f836:	22fc      	movs	r2, #252	@ 0xfc
7000f838:	4920      	ldr	r1, [pc, #128]	@ (7000f8bc <tcp_input+0x2c4>)
7000f83a:	4811      	ldr	r0, [pc, #68]	@ (7000f880 <tcp_input+0x288>)
7000f83c:	f004 fa70 	bl	70013d20 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
7000f840:	69fb      	ldr	r3, [r7, #28]
7000f842:	7d1b      	ldrb	r3, [r3, #20]
7000f844:	2b01      	cmp	r3, #1
7000f846:	d105      	bne.n	7000f854 <tcp_input+0x25c>
7000f848:	4b0b      	ldr	r3, [pc, #44]	@ (7000f878 <tcp_input+0x280>)
7000f84a:	22fd      	movs	r2, #253	@ 0xfd
7000f84c:	491c      	ldr	r1, [pc, #112]	@ (7000f8c0 <tcp_input+0x2c8>)
7000f84e:	480c      	ldr	r0, [pc, #48]	@ (7000f880 <tcp_input+0x288>)
7000f850:	f004 fa66 	bl	70013d20 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
7000f854:	69fb      	ldr	r3, [r7, #28]
7000f856:	7a1b      	ldrb	r3, [r3, #8]
7000f858:	2b00      	cmp	r3, #0
7000f85a:	d033      	beq.n	7000f8c4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
7000f85c:	69fb      	ldr	r3, [r7, #28]
7000f85e:	7a1a      	ldrb	r2, [r3, #8]
7000f860:	4b09      	ldr	r3, [pc, #36]	@ (7000f888 <tcp_input+0x290>)
7000f862:	685b      	ldr	r3, [r3, #4]
7000f864:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000f868:	3301      	adds	r3, #1
7000f86a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
7000f86c:	429a      	cmp	r2, r3
7000f86e:	d029      	beq.n	7000f8c4 <tcp_input+0x2cc>
      prev = pcb;
7000f870:	69fb      	ldr	r3, [r7, #28]
7000f872:	61bb      	str	r3, [r7, #24]
      continue;
7000f874:	e06b      	b.n	7000f94e <tcp_input+0x356>
7000f876:	bf00      	nop
7000f878:	700161e8 	.word	0x700161e8
7000f87c:	70016248 	.word	0x70016248
7000f880:	70016260 	.word	0x70016260
7000f884:	240084a0 	.word	0x240084a0
7000f888:	24005368 	.word	0x24005368
7000f88c:	240084a4 	.word	0x240084a4
7000f890:	240084a8 	.word	0x240084a8
7000f894:	240084a6 	.word	0x240084a6
7000f898:	70016288 	.word	0x70016288
7000f89c:	70016298 	.word	0x70016298
7000f8a0:	700162a4 	.word	0x700162a4
7000f8a4:	240084b0 	.word	0x240084b0
7000f8a8:	240084b4 	.word	0x240084b4
7000f8ac:	240084bc 	.word	0x240084bc
7000f8b0:	240084ba 	.word	0x240084ba
7000f8b4:	24008484 	.word	0x24008484
7000f8b8:	700162c4 	.word	0x700162c4
7000f8bc:	700162ec 	.word	0x700162ec
7000f8c0:	70016318 	.word	0x70016318
    }

    if (pcb->remote_port == tcphdr->src &&
7000f8c4:	69fb      	ldr	r3, [r7, #28]
7000f8c6:	8b1a      	ldrh	r2, [r3, #24]
7000f8c8:	4b72      	ldr	r3, [pc, #456]	@ (7000fa94 <tcp_input+0x49c>)
7000f8ca:	681b      	ldr	r3, [r3, #0]
7000f8cc:	881b      	ldrh	r3, [r3, #0]
7000f8ce:	b29b      	uxth	r3, r3
7000f8d0:	429a      	cmp	r2, r3
7000f8d2:	d13a      	bne.n	7000f94a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
7000f8d4:	69fb      	ldr	r3, [r7, #28]
7000f8d6:	8ada      	ldrh	r2, [r3, #22]
7000f8d8:	4b6e      	ldr	r3, [pc, #440]	@ (7000fa94 <tcp_input+0x49c>)
7000f8da:	681b      	ldr	r3, [r3, #0]
7000f8dc:	885b      	ldrh	r3, [r3, #2]
7000f8de:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
7000f8e0:	429a      	cmp	r2, r3
7000f8e2:	d132      	bne.n	7000f94a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
7000f8e4:	69fb      	ldr	r3, [r7, #28]
7000f8e6:	685a      	ldr	r2, [r3, #4]
7000f8e8:	4b6b      	ldr	r3, [pc, #428]	@ (7000fa98 <tcp_input+0x4a0>)
7000f8ea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
7000f8ec:	429a      	cmp	r2, r3
7000f8ee:	d12c      	bne.n	7000f94a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
7000f8f0:	69fb      	ldr	r3, [r7, #28]
7000f8f2:	681a      	ldr	r2, [r3, #0]
7000f8f4:	4b68      	ldr	r3, [pc, #416]	@ (7000fa98 <tcp_input+0x4a0>)
7000f8f6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
7000f8f8:	429a      	cmp	r2, r3
7000f8fa:	d126      	bne.n	7000f94a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
7000f8fc:	69fb      	ldr	r3, [r7, #28]
7000f8fe:	68db      	ldr	r3, [r3, #12]
7000f900:	69fa      	ldr	r2, [r7, #28]
7000f902:	429a      	cmp	r2, r3
7000f904:	d106      	bne.n	7000f914 <tcp_input+0x31c>
7000f906:	4b65      	ldr	r3, [pc, #404]	@ (7000fa9c <tcp_input+0x4a4>)
7000f908:	f240 120d 	movw	r2, #269	@ 0x10d
7000f90c:	4964      	ldr	r1, [pc, #400]	@ (7000faa0 <tcp_input+0x4a8>)
7000f90e:	4865      	ldr	r0, [pc, #404]	@ (7000faa4 <tcp_input+0x4ac>)
7000f910:	f004 fa06 	bl	70013d20 <iprintf>
      if (prev != NULL) {
7000f914:	69bb      	ldr	r3, [r7, #24]
7000f916:	2b00      	cmp	r3, #0
7000f918:	d00a      	beq.n	7000f930 <tcp_input+0x338>
        prev->next = pcb->next;
7000f91a:	69fb      	ldr	r3, [r7, #28]
7000f91c:	68da      	ldr	r2, [r3, #12]
7000f91e:	69bb      	ldr	r3, [r7, #24]
7000f920:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
7000f922:	4b61      	ldr	r3, [pc, #388]	@ (7000faa8 <tcp_input+0x4b0>)
7000f924:	681a      	ldr	r2, [r3, #0]
7000f926:	69fb      	ldr	r3, [r7, #28]
7000f928:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
7000f92a:	4a5f      	ldr	r2, [pc, #380]	@ (7000faa8 <tcp_input+0x4b0>)
7000f92c:	69fb      	ldr	r3, [r7, #28]
7000f92e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
7000f930:	69fb      	ldr	r3, [r7, #28]
7000f932:	68db      	ldr	r3, [r3, #12]
7000f934:	69fa      	ldr	r2, [r7, #28]
7000f936:	429a      	cmp	r2, r3
7000f938:	d111      	bne.n	7000f95e <tcp_input+0x366>
7000f93a:	4b58      	ldr	r3, [pc, #352]	@ (7000fa9c <tcp_input+0x4a4>)
7000f93c:	f240 1215 	movw	r2, #277	@ 0x115
7000f940:	495a      	ldr	r1, [pc, #360]	@ (7000faac <tcp_input+0x4b4>)
7000f942:	4858      	ldr	r0, [pc, #352]	@ (7000faa4 <tcp_input+0x4ac>)
7000f944:	f004 f9ec 	bl	70013d20 <iprintf>
      break;
7000f948:	e009      	b.n	7000f95e <tcp_input+0x366>
    }
    prev = pcb;
7000f94a:	69fb      	ldr	r3, [r7, #28]
7000f94c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
7000f94e:	69fb      	ldr	r3, [r7, #28]
7000f950:	68db      	ldr	r3, [r3, #12]
7000f952:	61fb      	str	r3, [r7, #28]
7000f954:	69fb      	ldr	r3, [r7, #28]
7000f956:	2b00      	cmp	r3, #0
7000f958:	f47f af5e 	bne.w	7000f818 <tcp_input+0x220>
7000f95c:	e000      	b.n	7000f960 <tcp_input+0x368>
      break;
7000f95e:	bf00      	nop
  }

  if (pcb == NULL) {
7000f960:	69fb      	ldr	r3, [r7, #28]
7000f962:	2b00      	cmp	r3, #0
7000f964:	f040 80aa 	bne.w	7000fabc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
7000f968:	4b51      	ldr	r3, [pc, #324]	@ (7000fab0 <tcp_input+0x4b8>)
7000f96a:	681b      	ldr	r3, [r3, #0]
7000f96c:	61fb      	str	r3, [r7, #28]
7000f96e:	e03f      	b.n	7000f9f0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
7000f970:	69fb      	ldr	r3, [r7, #28]
7000f972:	7d1b      	ldrb	r3, [r3, #20]
7000f974:	2b0a      	cmp	r3, #10
7000f976:	d006      	beq.n	7000f986 <tcp_input+0x38e>
7000f978:	4b48      	ldr	r3, [pc, #288]	@ (7000fa9c <tcp_input+0x4a4>)
7000f97a:	f240 121f 	movw	r2, #287	@ 0x11f
7000f97e:	494d      	ldr	r1, [pc, #308]	@ (7000fab4 <tcp_input+0x4bc>)
7000f980:	4848      	ldr	r0, [pc, #288]	@ (7000faa4 <tcp_input+0x4ac>)
7000f982:	f004 f9cd 	bl	70013d20 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
7000f986:	69fb      	ldr	r3, [r7, #28]
7000f988:	7a1b      	ldrb	r3, [r3, #8]
7000f98a:	2b00      	cmp	r3, #0
7000f98c:	d009      	beq.n	7000f9a2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
7000f98e:	69fb      	ldr	r3, [r7, #28]
7000f990:	7a1a      	ldrb	r2, [r3, #8]
7000f992:	4b41      	ldr	r3, [pc, #260]	@ (7000fa98 <tcp_input+0x4a0>)
7000f994:	685b      	ldr	r3, [r3, #4]
7000f996:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000f99a:	3301      	adds	r3, #1
7000f99c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
7000f99e:	429a      	cmp	r2, r3
7000f9a0:	d122      	bne.n	7000f9e8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
7000f9a2:	69fb      	ldr	r3, [r7, #28]
7000f9a4:	8b1a      	ldrh	r2, [r3, #24]
7000f9a6:	4b3b      	ldr	r3, [pc, #236]	@ (7000fa94 <tcp_input+0x49c>)
7000f9a8:	681b      	ldr	r3, [r3, #0]
7000f9aa:	881b      	ldrh	r3, [r3, #0]
7000f9ac:	b29b      	uxth	r3, r3
7000f9ae:	429a      	cmp	r2, r3
7000f9b0:	d11b      	bne.n	7000f9ea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
7000f9b2:	69fb      	ldr	r3, [r7, #28]
7000f9b4:	8ada      	ldrh	r2, [r3, #22]
7000f9b6:	4b37      	ldr	r3, [pc, #220]	@ (7000fa94 <tcp_input+0x49c>)
7000f9b8:	681b      	ldr	r3, [r3, #0]
7000f9ba:	885b      	ldrh	r3, [r3, #2]
7000f9bc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
7000f9be:	429a      	cmp	r2, r3
7000f9c0:	d113      	bne.n	7000f9ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
7000f9c2:	69fb      	ldr	r3, [r7, #28]
7000f9c4:	685a      	ldr	r2, [r3, #4]
7000f9c6:	4b34      	ldr	r3, [pc, #208]	@ (7000fa98 <tcp_input+0x4a0>)
7000f9c8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
7000f9ca:	429a      	cmp	r2, r3
7000f9cc:	d10d      	bne.n	7000f9ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
7000f9ce:	69fb      	ldr	r3, [r7, #28]
7000f9d0:	681a      	ldr	r2, [r3, #0]
7000f9d2:	4b31      	ldr	r3, [pc, #196]	@ (7000fa98 <tcp_input+0x4a0>)
7000f9d4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
7000f9d6:	429a      	cmp	r2, r3
7000f9d8:	d107      	bne.n	7000f9ea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
7000f9da:	69f8      	ldr	r0, [r7, #28]
7000f9dc:	f000 fb56 	bl	7001008c <tcp_timewait_input>
        }
        pbuf_free(p);
7000f9e0:	6878      	ldr	r0, [r7, #4]
7000f9e2:	f7fd ff31 	bl	7000d848 <pbuf_free>
        return;
7000f9e6:	e1fd      	b.n	7000fde4 <tcp_input+0x7ec>
        continue;
7000f9e8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
7000f9ea:	69fb      	ldr	r3, [r7, #28]
7000f9ec:	68db      	ldr	r3, [r3, #12]
7000f9ee:	61fb      	str	r3, [r7, #28]
7000f9f0:	69fb      	ldr	r3, [r7, #28]
7000f9f2:	2b00      	cmp	r3, #0
7000f9f4:	d1bc      	bne.n	7000f970 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
7000f9f6:	2300      	movs	r3, #0
7000f9f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
7000f9fa:	4b2f      	ldr	r3, [pc, #188]	@ (7000fab8 <tcp_input+0x4c0>)
7000f9fc:	681b      	ldr	r3, [r3, #0]
7000f9fe:	617b      	str	r3, [r7, #20]
7000fa00:	e02a      	b.n	7000fa58 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
7000fa02:	697b      	ldr	r3, [r7, #20]
7000fa04:	7a1b      	ldrb	r3, [r3, #8]
7000fa06:	2b00      	cmp	r3, #0
7000fa08:	d00c      	beq.n	7000fa24 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
7000fa0a:	697b      	ldr	r3, [r7, #20]
7000fa0c:	7a1a      	ldrb	r2, [r3, #8]
7000fa0e:	4b22      	ldr	r3, [pc, #136]	@ (7000fa98 <tcp_input+0x4a0>)
7000fa10:	685b      	ldr	r3, [r3, #4]
7000fa12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
7000fa16:	3301      	adds	r3, #1
7000fa18:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
7000fa1a:	429a      	cmp	r2, r3
7000fa1c:	d002      	beq.n	7000fa24 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
7000fa1e:	697b      	ldr	r3, [r7, #20]
7000fa20:	61bb      	str	r3, [r7, #24]
        continue;
7000fa22:	e016      	b.n	7000fa52 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
7000fa24:	697b      	ldr	r3, [r7, #20]
7000fa26:	8ada      	ldrh	r2, [r3, #22]
7000fa28:	4b1a      	ldr	r3, [pc, #104]	@ (7000fa94 <tcp_input+0x49c>)
7000fa2a:	681b      	ldr	r3, [r3, #0]
7000fa2c:	885b      	ldrh	r3, [r3, #2]
7000fa2e:	b29b      	uxth	r3, r3
7000fa30:	429a      	cmp	r2, r3
7000fa32:	d10c      	bne.n	7000fa4e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
7000fa34:	697b      	ldr	r3, [r7, #20]
7000fa36:	681a      	ldr	r2, [r3, #0]
7000fa38:	4b17      	ldr	r3, [pc, #92]	@ (7000fa98 <tcp_input+0x4a0>)
7000fa3a:	695b      	ldr	r3, [r3, #20]
7000fa3c:	429a      	cmp	r2, r3
7000fa3e:	d00f      	beq.n	7000fa60 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
7000fa40:	697b      	ldr	r3, [r7, #20]
7000fa42:	2b00      	cmp	r3, #0
7000fa44:	d00d      	beq.n	7000fa62 <tcp_input+0x46a>
7000fa46:	697b      	ldr	r3, [r7, #20]
7000fa48:	681b      	ldr	r3, [r3, #0]
7000fa4a:	2b00      	cmp	r3, #0
7000fa4c:	d009      	beq.n	7000fa62 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
7000fa4e:	697b      	ldr	r3, [r7, #20]
7000fa50:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
7000fa52:	697b      	ldr	r3, [r7, #20]
7000fa54:	68db      	ldr	r3, [r3, #12]
7000fa56:	617b      	str	r3, [r7, #20]
7000fa58:	697b      	ldr	r3, [r7, #20]
7000fa5a:	2b00      	cmp	r3, #0
7000fa5c:	d1d1      	bne.n	7000fa02 <tcp_input+0x40a>
7000fa5e:	e000      	b.n	7000fa62 <tcp_input+0x46a>
            break;
7000fa60:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
7000fa62:	697b      	ldr	r3, [r7, #20]
7000fa64:	2b00      	cmp	r3, #0
7000fa66:	d029      	beq.n	7000fabc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
7000fa68:	69bb      	ldr	r3, [r7, #24]
7000fa6a:	2b00      	cmp	r3, #0
7000fa6c:	d00a      	beq.n	7000fa84 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
7000fa6e:	697b      	ldr	r3, [r7, #20]
7000fa70:	68da      	ldr	r2, [r3, #12]
7000fa72:	69bb      	ldr	r3, [r7, #24]
7000fa74:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
7000fa76:	4b10      	ldr	r3, [pc, #64]	@ (7000fab8 <tcp_input+0x4c0>)
7000fa78:	681a      	ldr	r2, [r3, #0]
7000fa7a:	697b      	ldr	r3, [r7, #20]
7000fa7c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
7000fa7e:	4a0e      	ldr	r2, [pc, #56]	@ (7000fab8 <tcp_input+0x4c0>)
7000fa80:	697b      	ldr	r3, [r7, #20]
7000fa82:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
7000fa84:	6978      	ldr	r0, [r7, #20]
7000fa86:	f000 fa03 	bl	7000fe90 <tcp_listen_input>
      }
      pbuf_free(p);
7000fa8a:	6878      	ldr	r0, [r7, #4]
7000fa8c:	f7fd fedc 	bl	7000d848 <pbuf_free>
      return;
7000fa90:	e1a8      	b.n	7000fde4 <tcp_input+0x7ec>
7000fa92:	bf00      	nop
7000fa94:	240084a0 	.word	0x240084a0
7000fa98:	24005368 	.word	0x24005368
7000fa9c:	700161e8 	.word	0x700161e8
7000faa0:	70016340 	.word	0x70016340
7000faa4:	70016260 	.word	0x70016260
7000faa8:	24008484 	.word	0x24008484
7000faac:	7001636c 	.word	0x7001636c
7000fab0:	24008488 	.word	0x24008488
7000fab4:	70016398 	.word	0x70016398
7000fab8:	24008480 	.word	0x24008480
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
7000fabc:	69fb      	ldr	r3, [r7, #28]
7000fabe:	2b00      	cmp	r3, #0
7000fac0:	f000 8158 	beq.w	7000fd74 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
7000fac4:	4b95      	ldr	r3, [pc, #596]	@ (7000fd1c <tcp_input+0x724>)
7000fac6:	2200      	movs	r2, #0
7000fac8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
7000faca:	687b      	ldr	r3, [r7, #4]
7000facc:	891a      	ldrh	r2, [r3, #8]
7000face:	4b93      	ldr	r3, [pc, #588]	@ (7000fd1c <tcp_input+0x724>)
7000fad0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
7000fad2:	4a92      	ldr	r2, [pc, #584]	@ (7000fd1c <tcp_input+0x724>)
7000fad4:	687b      	ldr	r3, [r7, #4]
7000fad6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
7000fad8:	4b91      	ldr	r3, [pc, #580]	@ (7000fd20 <tcp_input+0x728>)
7000fada:	681b      	ldr	r3, [r3, #0]
7000fadc:	4a8f      	ldr	r2, [pc, #572]	@ (7000fd1c <tcp_input+0x724>)
7000fade:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
7000fae0:	4b90      	ldr	r3, [pc, #576]	@ (7000fd24 <tcp_input+0x72c>)
7000fae2:	2200      	movs	r2, #0
7000fae4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
7000fae6:	4b90      	ldr	r3, [pc, #576]	@ (7000fd28 <tcp_input+0x730>)
7000fae8:	2200      	movs	r2, #0
7000faea:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
7000faec:	4b8f      	ldr	r3, [pc, #572]	@ (7000fd2c <tcp_input+0x734>)
7000faee:	2200      	movs	r2, #0
7000faf0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
7000faf2:	4b8f      	ldr	r3, [pc, #572]	@ (7000fd30 <tcp_input+0x738>)
7000faf4:	781b      	ldrb	r3, [r3, #0]
7000faf6:	f003 0308 	and.w	r3, r3, #8
7000fafa:	2b00      	cmp	r3, #0
7000fafc:	d006      	beq.n	7000fb0c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
7000fafe:	687b      	ldr	r3, [r7, #4]
7000fb00:	7b5b      	ldrb	r3, [r3, #13]
7000fb02:	f043 0301 	orr.w	r3, r3, #1
7000fb06:	b2da      	uxtb	r2, r3
7000fb08:	687b      	ldr	r3, [r7, #4]
7000fb0a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
7000fb0c:	69fb      	ldr	r3, [r7, #28]
7000fb0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000fb10:	2b00      	cmp	r3, #0
7000fb12:	d017      	beq.n	7000fb44 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
7000fb14:	69f8      	ldr	r0, [r7, #28]
7000fb16:	f7ff f953 	bl	7000edc0 <tcp_process_refused_data>
7000fb1a:	4603      	mov	r3, r0
7000fb1c:	f113 0f0d 	cmn.w	r3, #13
7000fb20:	d007      	beq.n	7000fb32 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
7000fb22:	69fb      	ldr	r3, [r7, #28]
7000fb24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
7000fb26:	2b00      	cmp	r3, #0
7000fb28:	d00c      	beq.n	7000fb44 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
7000fb2a:	4b82      	ldr	r3, [pc, #520]	@ (7000fd34 <tcp_input+0x73c>)
7000fb2c:	881b      	ldrh	r3, [r3, #0]
7000fb2e:	2b00      	cmp	r3, #0
7000fb30:	d008      	beq.n	7000fb44 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
7000fb32:	69fb      	ldr	r3, [r7, #28]
7000fb34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
7000fb36:	2b00      	cmp	r3, #0
7000fb38:	f040 80e3 	bne.w	7000fd02 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
7000fb3c:	69f8      	ldr	r0, [r7, #28]
7000fb3e:	f003 f9a9 	bl	70012e94 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
7000fb42:	e0de      	b.n	7000fd02 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
7000fb44:	4a7c      	ldr	r2, [pc, #496]	@ (7000fd38 <tcp_input+0x740>)
7000fb46:	69fb      	ldr	r3, [r7, #28]
7000fb48:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
7000fb4a:	69f8      	ldr	r0, [r7, #28]
7000fb4c:	f000 fb18 	bl	70010180 <tcp_process>
7000fb50:	4603      	mov	r3, r0
7000fb52:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
7000fb54:	f997 3013 	ldrsb.w	r3, [r7, #19]
7000fb58:	f113 0f0d 	cmn.w	r3, #13
7000fb5c:	f000 80d3 	beq.w	7000fd06 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
7000fb60:	4b71      	ldr	r3, [pc, #452]	@ (7000fd28 <tcp_input+0x730>)
7000fb62:	781b      	ldrb	r3, [r3, #0]
7000fb64:	f003 0308 	and.w	r3, r3, #8
7000fb68:	2b00      	cmp	r3, #0
7000fb6a:	d015      	beq.n	7000fb98 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
7000fb6c:	69fb      	ldr	r3, [r7, #28]
7000fb6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
7000fb72:	2b00      	cmp	r3, #0
7000fb74:	d008      	beq.n	7000fb88 <tcp_input+0x590>
7000fb76:	69fb      	ldr	r3, [r7, #28]
7000fb78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
7000fb7c:	69fa      	ldr	r2, [r7, #28]
7000fb7e:	6912      	ldr	r2, [r2, #16]
7000fb80:	f06f 010d 	mvn.w	r1, #13
7000fb84:	4610      	mov	r0, r2
7000fb86:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
7000fb88:	69f9      	ldr	r1, [r7, #28]
7000fb8a:	486c      	ldr	r0, [pc, #432]	@ (7000fd3c <tcp_input+0x744>)
7000fb8c:	f7ff fbbc 	bl	7000f308 <tcp_pcb_remove>
        tcp_free(pcb);
7000fb90:	69f8      	ldr	r0, [r7, #28]
7000fb92:	f7fe f9f3 	bl	7000df7c <tcp_free>
7000fb96:	e0da      	b.n	7000fd4e <tcp_input+0x756>
      } else {
        err = ERR_OK;
7000fb98:	2300      	movs	r3, #0
7000fb9a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
7000fb9c:	4b63      	ldr	r3, [pc, #396]	@ (7000fd2c <tcp_input+0x734>)
7000fb9e:	881b      	ldrh	r3, [r3, #0]
7000fba0:	2b00      	cmp	r3, #0
7000fba2:	d01d      	beq.n	7000fbe0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
7000fba4:	4b61      	ldr	r3, [pc, #388]	@ (7000fd2c <tcp_input+0x734>)
7000fba6:	881b      	ldrh	r3, [r3, #0]
7000fba8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
7000fbaa:	69fb      	ldr	r3, [r7, #28]
7000fbac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
7000fbb0:	2b00      	cmp	r3, #0
7000fbb2:	d00a      	beq.n	7000fbca <tcp_input+0x5d2>
7000fbb4:	69fb      	ldr	r3, [r7, #28]
7000fbb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
7000fbba:	69fa      	ldr	r2, [r7, #28]
7000fbbc:	6910      	ldr	r0, [r2, #16]
7000fbbe:	89fa      	ldrh	r2, [r7, #14]
7000fbc0:	69f9      	ldr	r1, [r7, #28]
7000fbc2:	4798      	blx	r3
7000fbc4:	4603      	mov	r3, r0
7000fbc6:	74fb      	strb	r3, [r7, #19]
7000fbc8:	e001      	b.n	7000fbce <tcp_input+0x5d6>
7000fbca:	2300      	movs	r3, #0
7000fbcc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
7000fbce:	f997 3013 	ldrsb.w	r3, [r7, #19]
7000fbd2:	f113 0f0d 	cmn.w	r3, #13
7000fbd6:	f000 8098 	beq.w	7000fd0a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
7000fbda:	4b54      	ldr	r3, [pc, #336]	@ (7000fd2c <tcp_input+0x734>)
7000fbdc:	2200      	movs	r2, #0
7000fbde:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
7000fbe0:	69f8      	ldr	r0, [r7, #28]
7000fbe2:	f000 f915 	bl	7000fe10 <tcp_input_delayed_close>
7000fbe6:	4603      	mov	r3, r0
7000fbe8:	2b00      	cmp	r3, #0
7000fbea:	f040 8090 	bne.w	7000fd0e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
7000fbee:	4b4d      	ldr	r3, [pc, #308]	@ (7000fd24 <tcp_input+0x72c>)
7000fbf0:	681b      	ldr	r3, [r3, #0]
7000fbf2:	2b00      	cmp	r3, #0
7000fbf4:	d041      	beq.n	7000fc7a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
7000fbf6:	69fb      	ldr	r3, [r7, #28]
7000fbf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000fbfa:	2b00      	cmp	r3, #0
7000fbfc:	d006      	beq.n	7000fc0c <tcp_input+0x614>
7000fbfe:	4b50      	ldr	r3, [pc, #320]	@ (7000fd40 <tcp_input+0x748>)
7000fc00:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
7000fc04:	494f      	ldr	r1, [pc, #316]	@ (7000fd44 <tcp_input+0x74c>)
7000fc06:	4850      	ldr	r0, [pc, #320]	@ (7000fd48 <tcp_input+0x750>)
7000fc08:	f004 f88a 	bl	70013d20 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
7000fc0c:	69fb      	ldr	r3, [r7, #28]
7000fc0e:	8b5b      	ldrh	r3, [r3, #26]
7000fc10:	f003 0310 	and.w	r3, r3, #16
7000fc14:	2b00      	cmp	r3, #0
7000fc16:	d008      	beq.n	7000fc2a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
7000fc18:	4b42      	ldr	r3, [pc, #264]	@ (7000fd24 <tcp_input+0x72c>)
7000fc1a:	681b      	ldr	r3, [r3, #0]
7000fc1c:	4618      	mov	r0, r3
7000fc1e:	f7fd fe13 	bl	7000d848 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
7000fc22:	69f8      	ldr	r0, [r7, #28]
7000fc24:	f7fe fc7a 	bl	7000e51c <tcp_abort>
            goto aborted;
7000fc28:	e091      	b.n	7000fd4e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
7000fc2a:	69fb      	ldr	r3, [r7, #28]
7000fc2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
7000fc30:	2b00      	cmp	r3, #0
7000fc32:	d00c      	beq.n	7000fc4e <tcp_input+0x656>
7000fc34:	69fb      	ldr	r3, [r7, #28]
7000fc36:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
7000fc3a:	69fb      	ldr	r3, [r7, #28]
7000fc3c:	6918      	ldr	r0, [r3, #16]
7000fc3e:	4b39      	ldr	r3, [pc, #228]	@ (7000fd24 <tcp_input+0x72c>)
7000fc40:	681a      	ldr	r2, [r3, #0]
7000fc42:	2300      	movs	r3, #0
7000fc44:	69f9      	ldr	r1, [r7, #28]
7000fc46:	47a0      	blx	r4
7000fc48:	4603      	mov	r3, r0
7000fc4a:	74fb      	strb	r3, [r7, #19]
7000fc4c:	e008      	b.n	7000fc60 <tcp_input+0x668>
7000fc4e:	4b35      	ldr	r3, [pc, #212]	@ (7000fd24 <tcp_input+0x72c>)
7000fc50:	681a      	ldr	r2, [r3, #0]
7000fc52:	2300      	movs	r3, #0
7000fc54:	69f9      	ldr	r1, [r7, #28]
7000fc56:	2000      	movs	r0, #0
7000fc58:	f7ff f97a 	bl	7000ef50 <tcp_recv_null>
7000fc5c:	4603      	mov	r3, r0
7000fc5e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
7000fc60:	f997 3013 	ldrsb.w	r3, [r7, #19]
7000fc64:	f113 0f0d 	cmn.w	r3, #13
7000fc68:	d053      	beq.n	7000fd12 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
7000fc6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
7000fc6e:	2b00      	cmp	r3, #0
7000fc70:	d003      	beq.n	7000fc7a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
7000fc72:	4b2c      	ldr	r3, [pc, #176]	@ (7000fd24 <tcp_input+0x72c>)
7000fc74:	681a      	ldr	r2, [r3, #0]
7000fc76:	69fb      	ldr	r3, [r7, #28]
7000fc78:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
7000fc7a:	4b2b      	ldr	r3, [pc, #172]	@ (7000fd28 <tcp_input+0x730>)
7000fc7c:	781b      	ldrb	r3, [r3, #0]
7000fc7e:	f003 0320 	and.w	r3, r3, #32
7000fc82:	2b00      	cmp	r3, #0
7000fc84:	d030      	beq.n	7000fce8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
7000fc86:	69fb      	ldr	r3, [r7, #28]
7000fc88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000fc8a:	2b00      	cmp	r3, #0
7000fc8c:	d009      	beq.n	7000fca2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
7000fc8e:	69fb      	ldr	r3, [r7, #28]
7000fc90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000fc92:	7b5a      	ldrb	r2, [r3, #13]
7000fc94:	69fb      	ldr	r3, [r7, #28]
7000fc96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
7000fc98:	f042 0220 	orr.w	r2, r2, #32
7000fc9c:	b2d2      	uxtb	r2, r2
7000fc9e:	735a      	strb	r2, [r3, #13]
7000fca0:	e022      	b.n	7000fce8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
7000fca2:	69fb      	ldr	r3, [r7, #28]
7000fca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
7000fca6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
7000fcaa:	d005      	beq.n	7000fcb8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
7000fcac:	69fb      	ldr	r3, [r7, #28]
7000fcae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
7000fcb0:	3301      	adds	r3, #1
7000fcb2:	b29a      	uxth	r2, r3
7000fcb4:	69fb      	ldr	r3, [r7, #28]
7000fcb6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
7000fcb8:	69fb      	ldr	r3, [r7, #28]
7000fcba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
7000fcbe:	2b00      	cmp	r3, #0
7000fcc0:	d00b      	beq.n	7000fcda <tcp_input+0x6e2>
7000fcc2:	69fb      	ldr	r3, [r7, #28]
7000fcc4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
7000fcc8:	69fb      	ldr	r3, [r7, #28]
7000fcca:	6918      	ldr	r0, [r3, #16]
7000fccc:	2300      	movs	r3, #0
7000fcce:	2200      	movs	r2, #0
7000fcd0:	69f9      	ldr	r1, [r7, #28]
7000fcd2:	47a0      	blx	r4
7000fcd4:	4603      	mov	r3, r0
7000fcd6:	74fb      	strb	r3, [r7, #19]
7000fcd8:	e001      	b.n	7000fcde <tcp_input+0x6e6>
7000fcda:	2300      	movs	r3, #0
7000fcdc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
7000fcde:	f997 3013 	ldrsb.w	r3, [r7, #19]
7000fce2:	f113 0f0d 	cmn.w	r3, #13
7000fce6:	d016      	beq.n	7000fd16 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
7000fce8:	4b13      	ldr	r3, [pc, #76]	@ (7000fd38 <tcp_input+0x740>)
7000fcea:	2200      	movs	r2, #0
7000fcec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
7000fcee:	69f8      	ldr	r0, [r7, #28]
7000fcf0:	f000 f88e 	bl	7000fe10 <tcp_input_delayed_close>
7000fcf4:	4603      	mov	r3, r0
7000fcf6:	2b00      	cmp	r3, #0
7000fcf8:	d128      	bne.n	7000fd4c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
7000fcfa:	69f8      	ldr	r0, [r7, #28]
7000fcfc:	f002 fac4 	bl	70012288 <tcp_output>
7000fd00:	e025      	b.n	7000fd4e <tcp_input+0x756>
        goto aborted;
7000fd02:	bf00      	nop
7000fd04:	e023      	b.n	7000fd4e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
7000fd06:	bf00      	nop
7000fd08:	e021      	b.n	7000fd4e <tcp_input+0x756>
              goto aborted;
7000fd0a:	bf00      	nop
7000fd0c:	e01f      	b.n	7000fd4e <tcp_input+0x756>
          goto aborted;
7000fd0e:	bf00      	nop
7000fd10:	e01d      	b.n	7000fd4e <tcp_input+0x756>
            goto aborted;
7000fd12:	bf00      	nop
7000fd14:	e01b      	b.n	7000fd4e <tcp_input+0x756>
              goto aborted;
7000fd16:	bf00      	nop
7000fd18:	e019      	b.n	7000fd4e <tcp_input+0x756>
7000fd1a:	bf00      	nop
7000fd1c:	24008490 	.word	0x24008490
7000fd20:	240084a0 	.word	0x240084a0
7000fd24:	240084c0 	.word	0x240084c0
7000fd28:	240084bd 	.word	0x240084bd
7000fd2c:	240084b8 	.word	0x240084b8
7000fd30:	240084bc 	.word	0x240084bc
7000fd34:	240084ba 	.word	0x240084ba
7000fd38:	240084c4 	.word	0x240084c4
7000fd3c:	24008484 	.word	0x24008484
7000fd40:	700161e8 	.word	0x700161e8
7000fd44:	700163c8 	.word	0x700163c8
7000fd48:	70016260 	.word	0x70016260
          goto aborted;
7000fd4c:	bf00      	nop
    tcp_input_pcb = NULL;
7000fd4e:	4b27      	ldr	r3, [pc, #156]	@ (7000fdec <tcp_input+0x7f4>)
7000fd50:	2200      	movs	r2, #0
7000fd52:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
7000fd54:	4b26      	ldr	r3, [pc, #152]	@ (7000fdf0 <tcp_input+0x7f8>)
7000fd56:	2200      	movs	r2, #0
7000fd58:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
7000fd5a:	4b26      	ldr	r3, [pc, #152]	@ (7000fdf4 <tcp_input+0x7fc>)
7000fd5c:	685b      	ldr	r3, [r3, #4]
7000fd5e:	2b00      	cmp	r3, #0
7000fd60:	d03f      	beq.n	7000fde2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
7000fd62:	4b24      	ldr	r3, [pc, #144]	@ (7000fdf4 <tcp_input+0x7fc>)
7000fd64:	685b      	ldr	r3, [r3, #4]
7000fd66:	4618      	mov	r0, r3
7000fd68:	f7fd fd6e 	bl	7000d848 <pbuf_free>
      inseg.p = NULL;
7000fd6c:	4b21      	ldr	r3, [pc, #132]	@ (7000fdf4 <tcp_input+0x7fc>)
7000fd6e:	2200      	movs	r2, #0
7000fd70:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
7000fd72:	e036      	b.n	7000fde2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
7000fd74:	4b20      	ldr	r3, [pc, #128]	@ (7000fdf8 <tcp_input+0x800>)
7000fd76:	681b      	ldr	r3, [r3, #0]
7000fd78:	899b      	ldrh	r3, [r3, #12]
7000fd7a:	b29b      	uxth	r3, r3
7000fd7c:	4618      	mov	r0, r3
7000fd7e:	f7f9 fe27 	bl	700099d0 <lwip_htons>
7000fd82:	4603      	mov	r3, r0
7000fd84:	b2db      	uxtb	r3, r3
7000fd86:	f003 0304 	and.w	r3, r3, #4
7000fd8a:	2b00      	cmp	r3, #0
7000fd8c:	d118      	bne.n	7000fdc0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
7000fd8e:	4b1b      	ldr	r3, [pc, #108]	@ (7000fdfc <tcp_input+0x804>)
7000fd90:	6819      	ldr	r1, [r3, #0]
7000fd92:	4b1b      	ldr	r3, [pc, #108]	@ (7000fe00 <tcp_input+0x808>)
7000fd94:	881b      	ldrh	r3, [r3, #0]
7000fd96:	461a      	mov	r2, r3
7000fd98:	4b1a      	ldr	r3, [pc, #104]	@ (7000fe04 <tcp_input+0x80c>)
7000fd9a:	681b      	ldr	r3, [r3, #0]
7000fd9c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
7000fd9e:	4b16      	ldr	r3, [pc, #88]	@ (7000fdf8 <tcp_input+0x800>)
7000fda0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
7000fda2:	885b      	ldrh	r3, [r3, #2]
7000fda4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
7000fda6:	4a14      	ldr	r2, [pc, #80]	@ (7000fdf8 <tcp_input+0x800>)
7000fda8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
7000fdaa:	8812      	ldrh	r2, [r2, #0]
7000fdac:	b292      	uxth	r2, r2
7000fdae:	9202      	str	r2, [sp, #8]
7000fdb0:	9301      	str	r3, [sp, #4]
7000fdb2:	4b15      	ldr	r3, [pc, #84]	@ (7000fe08 <tcp_input+0x810>)
7000fdb4:	9300      	str	r3, [sp, #0]
7000fdb6:	4b15      	ldr	r3, [pc, #84]	@ (7000fe0c <tcp_input+0x814>)
7000fdb8:	4602      	mov	r2, r0
7000fdba:	2000      	movs	r0, #0
7000fdbc:	f003 f818 	bl	70012df0 <tcp_rst>
    pbuf_free(p);
7000fdc0:	6878      	ldr	r0, [r7, #4]
7000fdc2:	f7fd fd41 	bl	7000d848 <pbuf_free>
  return;
7000fdc6:	e00c      	b.n	7000fde2 <tcp_input+0x7ea>
    goto dropped;
7000fdc8:	bf00      	nop
7000fdca:	e006      	b.n	7000fdda <tcp_input+0x7e2>
    goto dropped;
7000fdcc:	bf00      	nop
7000fdce:	e004      	b.n	7000fdda <tcp_input+0x7e2>
    goto dropped;
7000fdd0:	bf00      	nop
7000fdd2:	e002      	b.n	7000fdda <tcp_input+0x7e2>
      goto dropped;
7000fdd4:	bf00      	nop
7000fdd6:	e000      	b.n	7000fdda <tcp_input+0x7e2>
      goto dropped;
7000fdd8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
7000fdda:	6878      	ldr	r0, [r7, #4]
7000fddc:	f7fd fd34 	bl	7000d848 <pbuf_free>
7000fde0:	e000      	b.n	7000fde4 <tcp_input+0x7ec>
  return;
7000fde2:	bf00      	nop
}
7000fde4:	3724      	adds	r7, #36	@ 0x24
7000fde6:	46bd      	mov	sp, r7
7000fde8:	bd90      	pop	{r4, r7, pc}
7000fdea:	bf00      	nop
7000fdec:	240084c4 	.word	0x240084c4
7000fdf0:	240084c0 	.word	0x240084c0
7000fdf4:	24008490 	.word	0x24008490
7000fdf8:	240084a0 	.word	0x240084a0
7000fdfc:	240084b4 	.word	0x240084b4
7000fe00:	240084ba 	.word	0x240084ba
7000fe04:	240084b0 	.word	0x240084b0
7000fe08:	24005378 	.word	0x24005378
7000fe0c:	2400537c 	.word	0x2400537c

7000fe10 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
7000fe10:	b580      	push	{r7, lr}
7000fe12:	b082      	sub	sp, #8
7000fe14:	af00      	add	r7, sp, #0
7000fe16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
7000fe18:	687b      	ldr	r3, [r7, #4]
7000fe1a:	2b00      	cmp	r3, #0
7000fe1c:	d106      	bne.n	7000fe2c <tcp_input_delayed_close+0x1c>
7000fe1e:	4b17      	ldr	r3, [pc, #92]	@ (7000fe7c <tcp_input_delayed_close+0x6c>)
7000fe20:	f240 225a 	movw	r2, #602	@ 0x25a
7000fe24:	4916      	ldr	r1, [pc, #88]	@ (7000fe80 <tcp_input_delayed_close+0x70>)
7000fe26:	4817      	ldr	r0, [pc, #92]	@ (7000fe84 <tcp_input_delayed_close+0x74>)
7000fe28:	f003 ff7a 	bl	70013d20 <iprintf>

  if (recv_flags & TF_CLOSED) {
7000fe2c:	4b16      	ldr	r3, [pc, #88]	@ (7000fe88 <tcp_input_delayed_close+0x78>)
7000fe2e:	781b      	ldrb	r3, [r3, #0]
7000fe30:	f003 0310 	and.w	r3, r3, #16
7000fe34:	2b00      	cmp	r3, #0
7000fe36:	d01c      	beq.n	7000fe72 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
7000fe38:	687b      	ldr	r3, [r7, #4]
7000fe3a:	8b5b      	ldrh	r3, [r3, #26]
7000fe3c:	f003 0310 	and.w	r3, r3, #16
7000fe40:	2b00      	cmp	r3, #0
7000fe42:	d10d      	bne.n	7000fe60 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
7000fe44:	687b      	ldr	r3, [r7, #4]
7000fe46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
7000fe4a:	2b00      	cmp	r3, #0
7000fe4c:	d008      	beq.n	7000fe60 <tcp_input_delayed_close+0x50>
7000fe4e:	687b      	ldr	r3, [r7, #4]
7000fe50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
7000fe54:	687a      	ldr	r2, [r7, #4]
7000fe56:	6912      	ldr	r2, [r2, #16]
7000fe58:	f06f 010e 	mvn.w	r1, #14
7000fe5c:	4610      	mov	r0, r2
7000fe5e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
7000fe60:	6879      	ldr	r1, [r7, #4]
7000fe62:	480a      	ldr	r0, [pc, #40]	@ (7000fe8c <tcp_input_delayed_close+0x7c>)
7000fe64:	f7ff fa50 	bl	7000f308 <tcp_pcb_remove>
    tcp_free(pcb);
7000fe68:	6878      	ldr	r0, [r7, #4]
7000fe6a:	f7fe f887 	bl	7000df7c <tcp_free>
    return 1;
7000fe6e:	2301      	movs	r3, #1
7000fe70:	e000      	b.n	7000fe74 <tcp_input_delayed_close+0x64>
  }
  return 0;
7000fe72:	2300      	movs	r3, #0
}
7000fe74:	4618      	mov	r0, r3
7000fe76:	3708      	adds	r7, #8
7000fe78:	46bd      	mov	sp, r7
7000fe7a:	bd80      	pop	{r7, pc}
7000fe7c:	700161e8 	.word	0x700161e8
7000fe80:	700163e4 	.word	0x700163e4
7000fe84:	70016260 	.word	0x70016260
7000fe88:	240084bd 	.word	0x240084bd
7000fe8c:	24008484 	.word	0x24008484

7000fe90 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
7000fe90:	b590      	push	{r4, r7, lr}
7000fe92:	b08b      	sub	sp, #44	@ 0x2c
7000fe94:	af04      	add	r7, sp, #16
7000fe96:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
7000fe98:	4b6f      	ldr	r3, [pc, #444]	@ (70010058 <tcp_listen_input+0x1c8>)
7000fe9a:	781b      	ldrb	r3, [r3, #0]
7000fe9c:	f003 0304 	and.w	r3, r3, #4
7000fea0:	2b00      	cmp	r3, #0
7000fea2:	f040 80d2 	bne.w	7001004a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
7000fea6:	687b      	ldr	r3, [r7, #4]
7000fea8:	2b00      	cmp	r3, #0
7000feaa:	d106      	bne.n	7000feba <tcp_listen_input+0x2a>
7000feac:	4b6b      	ldr	r3, [pc, #428]	@ (7001005c <tcp_listen_input+0x1cc>)
7000feae:	f240 2281 	movw	r2, #641	@ 0x281
7000feb2:	496b      	ldr	r1, [pc, #428]	@ (70010060 <tcp_listen_input+0x1d0>)
7000feb4:	486b      	ldr	r0, [pc, #428]	@ (70010064 <tcp_listen_input+0x1d4>)
7000feb6:	f003 ff33 	bl	70013d20 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
7000feba:	4b67      	ldr	r3, [pc, #412]	@ (70010058 <tcp_listen_input+0x1c8>)
7000febc:	781b      	ldrb	r3, [r3, #0]
7000febe:	f003 0310 	and.w	r3, r3, #16
7000fec2:	2b00      	cmp	r3, #0
7000fec4:	d019      	beq.n	7000fefa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
7000fec6:	4b68      	ldr	r3, [pc, #416]	@ (70010068 <tcp_listen_input+0x1d8>)
7000fec8:	6819      	ldr	r1, [r3, #0]
7000feca:	4b68      	ldr	r3, [pc, #416]	@ (7001006c <tcp_listen_input+0x1dc>)
7000fecc:	881b      	ldrh	r3, [r3, #0]
7000fece:	461a      	mov	r2, r3
7000fed0:	4b67      	ldr	r3, [pc, #412]	@ (70010070 <tcp_listen_input+0x1e0>)
7000fed2:	681b      	ldr	r3, [r3, #0]
7000fed4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
7000fed6:	4b67      	ldr	r3, [pc, #412]	@ (70010074 <tcp_listen_input+0x1e4>)
7000fed8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
7000feda:	885b      	ldrh	r3, [r3, #2]
7000fedc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
7000fede:	4a65      	ldr	r2, [pc, #404]	@ (70010074 <tcp_listen_input+0x1e4>)
7000fee0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
7000fee2:	8812      	ldrh	r2, [r2, #0]
7000fee4:	b292      	uxth	r2, r2
7000fee6:	9202      	str	r2, [sp, #8]
7000fee8:	9301      	str	r3, [sp, #4]
7000feea:	4b63      	ldr	r3, [pc, #396]	@ (70010078 <tcp_listen_input+0x1e8>)
7000feec:	9300      	str	r3, [sp, #0]
7000feee:	4b63      	ldr	r3, [pc, #396]	@ (7001007c <tcp_listen_input+0x1ec>)
7000fef0:	4602      	mov	r2, r0
7000fef2:	6878      	ldr	r0, [r7, #4]
7000fef4:	f002 ff7c 	bl	70012df0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
7000fef8:	e0a9      	b.n	7001004e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
7000fefa:	4b57      	ldr	r3, [pc, #348]	@ (70010058 <tcp_listen_input+0x1c8>)
7000fefc:	781b      	ldrb	r3, [r3, #0]
7000fefe:	f003 0302 	and.w	r3, r3, #2
7000ff02:	2b00      	cmp	r3, #0
7000ff04:	f000 80a3 	beq.w	7001004e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
7000ff08:	687b      	ldr	r3, [r7, #4]
7000ff0a:	7d5b      	ldrb	r3, [r3, #21]
7000ff0c:	4618      	mov	r0, r3
7000ff0e:	f7ff f935 	bl	7000f17c <tcp_alloc>
7000ff12:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
7000ff14:	697b      	ldr	r3, [r7, #20]
7000ff16:	2b00      	cmp	r3, #0
7000ff18:	d111      	bne.n	7000ff3e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
7000ff1a:	687b      	ldr	r3, [r7, #4]
7000ff1c:	699b      	ldr	r3, [r3, #24]
7000ff1e:	2b00      	cmp	r3, #0
7000ff20:	d00a      	beq.n	7000ff38 <tcp_listen_input+0xa8>
7000ff22:	687b      	ldr	r3, [r7, #4]
7000ff24:	699b      	ldr	r3, [r3, #24]
7000ff26:	687a      	ldr	r2, [r7, #4]
7000ff28:	6910      	ldr	r0, [r2, #16]
7000ff2a:	f04f 32ff 	mov.w	r2, #4294967295
7000ff2e:	2100      	movs	r1, #0
7000ff30:	4798      	blx	r3
7000ff32:	4603      	mov	r3, r0
7000ff34:	73bb      	strb	r3, [r7, #14]
      return;
7000ff36:	e08b      	b.n	70010050 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
7000ff38:	23f0      	movs	r3, #240	@ 0xf0
7000ff3a:	73bb      	strb	r3, [r7, #14]
      return;
7000ff3c:	e088      	b.n	70010050 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
7000ff3e:	4b50      	ldr	r3, [pc, #320]	@ (70010080 <tcp_listen_input+0x1f0>)
7000ff40:	695a      	ldr	r2, [r3, #20]
7000ff42:	697b      	ldr	r3, [r7, #20]
7000ff44:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
7000ff46:	4b4e      	ldr	r3, [pc, #312]	@ (70010080 <tcp_listen_input+0x1f0>)
7000ff48:	691a      	ldr	r2, [r3, #16]
7000ff4a:	697b      	ldr	r3, [r7, #20]
7000ff4c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
7000ff4e:	687b      	ldr	r3, [r7, #4]
7000ff50:	8ada      	ldrh	r2, [r3, #22]
7000ff52:	697b      	ldr	r3, [r7, #20]
7000ff54:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
7000ff56:	4b47      	ldr	r3, [pc, #284]	@ (70010074 <tcp_listen_input+0x1e4>)
7000ff58:	681b      	ldr	r3, [r3, #0]
7000ff5a:	881b      	ldrh	r3, [r3, #0]
7000ff5c:	b29a      	uxth	r2, r3
7000ff5e:	697b      	ldr	r3, [r7, #20]
7000ff60:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
7000ff62:	697b      	ldr	r3, [r7, #20]
7000ff64:	2203      	movs	r2, #3
7000ff66:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
7000ff68:	4b41      	ldr	r3, [pc, #260]	@ (70010070 <tcp_listen_input+0x1e0>)
7000ff6a:	681b      	ldr	r3, [r3, #0]
7000ff6c:	1c5a      	adds	r2, r3, #1
7000ff6e:	697b      	ldr	r3, [r7, #20]
7000ff70:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
7000ff72:	697b      	ldr	r3, [r7, #20]
7000ff74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
7000ff76:	697b      	ldr	r3, [r7, #20]
7000ff78:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
7000ff7a:	6978      	ldr	r0, [r7, #20]
7000ff7c:	f7ff fa58 	bl	7000f430 <tcp_next_iss>
7000ff80:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
7000ff82:	697b      	ldr	r3, [r7, #20]
7000ff84:	693a      	ldr	r2, [r7, #16]
7000ff86:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
7000ff88:	697b      	ldr	r3, [r7, #20]
7000ff8a:	693a      	ldr	r2, [r7, #16]
7000ff8c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
7000ff8e:	697b      	ldr	r3, [r7, #20]
7000ff90:	693a      	ldr	r2, [r7, #16]
7000ff92:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
7000ff94:	697b      	ldr	r3, [r7, #20]
7000ff96:	693a      	ldr	r2, [r7, #16]
7000ff98:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
7000ff9a:	4b35      	ldr	r3, [pc, #212]	@ (70010070 <tcp_listen_input+0x1e0>)
7000ff9c:	681b      	ldr	r3, [r3, #0]
7000ff9e:	1e5a      	subs	r2, r3, #1
7000ffa0:	697b      	ldr	r3, [r7, #20]
7000ffa2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
7000ffa4:	687b      	ldr	r3, [r7, #4]
7000ffa6:	691a      	ldr	r2, [r3, #16]
7000ffa8:	697b      	ldr	r3, [r7, #20]
7000ffaa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
7000ffac:	697b      	ldr	r3, [r7, #20]
7000ffae:	687a      	ldr	r2, [r7, #4]
7000ffb0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
7000ffb2:	687b      	ldr	r3, [r7, #4]
7000ffb4:	7a5b      	ldrb	r3, [r3, #9]
7000ffb6:	f003 030c 	and.w	r3, r3, #12
7000ffba:	b2da      	uxtb	r2, r3
7000ffbc:	697b      	ldr	r3, [r7, #20]
7000ffbe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
7000ffc0:	687b      	ldr	r3, [r7, #4]
7000ffc2:	7a1a      	ldrb	r2, [r3, #8]
7000ffc4:	697b      	ldr	r3, [r7, #20]
7000ffc6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
7000ffc8:	4b2e      	ldr	r3, [pc, #184]	@ (70010084 <tcp_listen_input+0x1f4>)
7000ffca:	681a      	ldr	r2, [r3, #0]
7000ffcc:	697b      	ldr	r3, [r7, #20]
7000ffce:	60da      	str	r2, [r3, #12]
7000ffd0:	4a2c      	ldr	r2, [pc, #176]	@ (70010084 <tcp_listen_input+0x1f4>)
7000ffd2:	697b      	ldr	r3, [r7, #20]
7000ffd4:	6013      	str	r3, [r2, #0]
7000ffd6:	f003 fa6f 	bl	700134b8 <tcp_timer_needed>
7000ffda:	4b2b      	ldr	r3, [pc, #172]	@ (70010088 <tcp_listen_input+0x1f8>)
7000ffdc:	2201      	movs	r2, #1
7000ffde:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
7000ffe0:	6978      	ldr	r0, [r7, #20]
7000ffe2:	f001 fd8b 	bl	70011afc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
7000ffe6:	4b23      	ldr	r3, [pc, #140]	@ (70010074 <tcp_listen_input+0x1e4>)
7000ffe8:	681b      	ldr	r3, [r3, #0]
7000ffea:	89db      	ldrh	r3, [r3, #14]
7000ffec:	b29a      	uxth	r2, r3
7000ffee:	697b      	ldr	r3, [r7, #20]
7000fff0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
7000fff4:	697b      	ldr	r3, [r7, #20]
7000fff6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
7000fffa:	697b      	ldr	r3, [r7, #20]
7000fffc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
70010000:	697b      	ldr	r3, [r7, #20]
70010002:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
70010004:	697b      	ldr	r3, [r7, #20]
70010006:	3304      	adds	r3, #4
70010008:	4618      	mov	r0, r3
7001000a:	f7fa ffd7 	bl	7000afbc <ip4_route>
7001000e:	4601      	mov	r1, r0
70010010:	697b      	ldr	r3, [r7, #20]
70010012:	3304      	adds	r3, #4
70010014:	461a      	mov	r2, r3
70010016:	4620      	mov	r0, r4
70010018:	f7ff fa30 	bl	7000f47c <tcp_eff_send_mss_netif>
7001001c:	4603      	mov	r3, r0
7001001e:	461a      	mov	r2, r3
70010020:	697b      	ldr	r3, [r7, #20]
70010022:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
70010024:	2112      	movs	r1, #18
70010026:	6978      	ldr	r0, [r7, #20]
70010028:	f002 f840 	bl	700120ac <tcp_enqueue_flags>
7001002c:	4603      	mov	r3, r0
7001002e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
70010030:	f997 300f 	ldrsb.w	r3, [r7, #15]
70010034:	2b00      	cmp	r3, #0
70010036:	d004      	beq.n	70010042 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
70010038:	2100      	movs	r1, #0
7001003a:	6978      	ldr	r0, [r7, #20]
7001003c:	f7fe f9ba 	bl	7000e3b4 <tcp_abandon>
      return;
70010040:	e006      	b.n	70010050 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
70010042:	6978      	ldr	r0, [r7, #20]
70010044:	f002 f920 	bl	70012288 <tcp_output>
  return;
70010048:	e001      	b.n	7001004e <tcp_listen_input+0x1be>
    return;
7001004a:	bf00      	nop
7001004c:	e000      	b.n	70010050 <tcp_listen_input+0x1c0>
  return;
7001004e:	bf00      	nop
}
70010050:	371c      	adds	r7, #28
70010052:	46bd      	mov	sp, r7
70010054:	bd90      	pop	{r4, r7, pc}
70010056:	bf00      	nop
70010058:	240084bc 	.word	0x240084bc
7001005c:	700161e8 	.word	0x700161e8
70010060:	7001640c 	.word	0x7001640c
70010064:	70016260 	.word	0x70016260
70010068:	240084b4 	.word	0x240084b4
7001006c:	240084ba 	.word	0x240084ba
70010070:	240084b0 	.word	0x240084b0
70010074:	240084a0 	.word	0x240084a0
70010078:	24005378 	.word	0x24005378
7001007c:	2400537c 	.word	0x2400537c
70010080:	24005368 	.word	0x24005368
70010084:	24008484 	.word	0x24008484
70010088:	2400848c 	.word	0x2400848c

7001008c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
7001008c:	b580      	push	{r7, lr}
7001008e:	b086      	sub	sp, #24
70010090:	af04      	add	r7, sp, #16
70010092:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
70010094:	4b2f      	ldr	r3, [pc, #188]	@ (70010154 <tcp_timewait_input+0xc8>)
70010096:	781b      	ldrb	r3, [r3, #0]
70010098:	f003 0304 	and.w	r3, r3, #4
7001009c:	2b00      	cmp	r3, #0
7001009e:	d153      	bne.n	70010148 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
700100a0:	687b      	ldr	r3, [r7, #4]
700100a2:	2b00      	cmp	r3, #0
700100a4:	d106      	bne.n	700100b4 <tcp_timewait_input+0x28>
700100a6:	4b2c      	ldr	r3, [pc, #176]	@ (70010158 <tcp_timewait_input+0xcc>)
700100a8:	f240 22ee 	movw	r2, #750	@ 0x2ee
700100ac:	492b      	ldr	r1, [pc, #172]	@ (7001015c <tcp_timewait_input+0xd0>)
700100ae:	482c      	ldr	r0, [pc, #176]	@ (70010160 <tcp_timewait_input+0xd4>)
700100b0:	f003 fe36 	bl	70013d20 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
700100b4:	4b27      	ldr	r3, [pc, #156]	@ (70010154 <tcp_timewait_input+0xc8>)
700100b6:	781b      	ldrb	r3, [r3, #0]
700100b8:	f003 0302 	and.w	r3, r3, #2
700100bc:	2b00      	cmp	r3, #0
700100be:	d02a      	beq.n	70010116 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
700100c0:	4b28      	ldr	r3, [pc, #160]	@ (70010164 <tcp_timewait_input+0xd8>)
700100c2:	681a      	ldr	r2, [r3, #0]
700100c4:	687b      	ldr	r3, [r7, #4]
700100c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700100c8:	1ad3      	subs	r3, r2, r3
700100ca:	2b00      	cmp	r3, #0
700100cc:	db2d      	blt.n	7001012a <tcp_timewait_input+0x9e>
700100ce:	4b25      	ldr	r3, [pc, #148]	@ (70010164 <tcp_timewait_input+0xd8>)
700100d0:	681a      	ldr	r2, [r3, #0]
700100d2:	687b      	ldr	r3, [r7, #4]
700100d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700100d6:	6879      	ldr	r1, [r7, #4]
700100d8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
700100da:	440b      	add	r3, r1
700100dc:	1ad3      	subs	r3, r2, r3
700100de:	2b00      	cmp	r3, #0
700100e0:	dc23      	bgt.n	7001012a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
700100e2:	4b21      	ldr	r3, [pc, #132]	@ (70010168 <tcp_timewait_input+0xdc>)
700100e4:	6819      	ldr	r1, [r3, #0]
700100e6:	4b21      	ldr	r3, [pc, #132]	@ (7001016c <tcp_timewait_input+0xe0>)
700100e8:	881b      	ldrh	r3, [r3, #0]
700100ea:	461a      	mov	r2, r3
700100ec:	4b1d      	ldr	r3, [pc, #116]	@ (70010164 <tcp_timewait_input+0xd8>)
700100ee:	681b      	ldr	r3, [r3, #0]
700100f0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
700100f2:	4b1f      	ldr	r3, [pc, #124]	@ (70010170 <tcp_timewait_input+0xe4>)
700100f4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
700100f6:	885b      	ldrh	r3, [r3, #2]
700100f8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
700100fa:	4a1d      	ldr	r2, [pc, #116]	@ (70010170 <tcp_timewait_input+0xe4>)
700100fc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
700100fe:	8812      	ldrh	r2, [r2, #0]
70010100:	b292      	uxth	r2, r2
70010102:	9202      	str	r2, [sp, #8]
70010104:	9301      	str	r3, [sp, #4]
70010106:	4b1b      	ldr	r3, [pc, #108]	@ (70010174 <tcp_timewait_input+0xe8>)
70010108:	9300      	str	r3, [sp, #0]
7001010a:	4b1b      	ldr	r3, [pc, #108]	@ (70010178 <tcp_timewait_input+0xec>)
7001010c:	4602      	mov	r2, r0
7001010e:	6878      	ldr	r0, [r7, #4]
70010110:	f002 fe6e 	bl	70012df0 <tcp_rst>
      return;
70010114:	e01b      	b.n	7001014e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
70010116:	4b0f      	ldr	r3, [pc, #60]	@ (70010154 <tcp_timewait_input+0xc8>)
70010118:	781b      	ldrb	r3, [r3, #0]
7001011a:	f003 0301 	and.w	r3, r3, #1
7001011e:	2b00      	cmp	r3, #0
70010120:	d003      	beq.n	7001012a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
70010122:	4b16      	ldr	r3, [pc, #88]	@ (7001017c <tcp_timewait_input+0xf0>)
70010124:	681a      	ldr	r2, [r3, #0]
70010126:	687b      	ldr	r3, [r7, #4]
70010128:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
7001012a:	4b10      	ldr	r3, [pc, #64]	@ (7001016c <tcp_timewait_input+0xe0>)
7001012c:	881b      	ldrh	r3, [r3, #0]
7001012e:	2b00      	cmp	r3, #0
70010130:	d00c      	beq.n	7001014c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
70010132:	687b      	ldr	r3, [r7, #4]
70010134:	8b5b      	ldrh	r3, [r3, #26]
70010136:	f043 0302 	orr.w	r3, r3, #2
7001013a:	b29a      	uxth	r2, r3
7001013c:	687b      	ldr	r3, [r7, #4]
7001013e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
70010140:	6878      	ldr	r0, [r7, #4]
70010142:	f002 f8a1 	bl	70012288 <tcp_output>
  }
  return;
70010146:	e001      	b.n	7001014c <tcp_timewait_input+0xc0>
    return;
70010148:	bf00      	nop
7001014a:	e000      	b.n	7001014e <tcp_timewait_input+0xc2>
  return;
7001014c:	bf00      	nop
}
7001014e:	3708      	adds	r7, #8
70010150:	46bd      	mov	sp, r7
70010152:	bd80      	pop	{r7, pc}
70010154:	240084bc 	.word	0x240084bc
70010158:	700161e8 	.word	0x700161e8
7001015c:	7001642c 	.word	0x7001642c
70010160:	70016260 	.word	0x70016260
70010164:	240084b0 	.word	0x240084b0
70010168:	240084b4 	.word	0x240084b4
7001016c:	240084ba 	.word	0x240084ba
70010170:	240084a0 	.word	0x240084a0
70010174:	24005378 	.word	0x24005378
70010178:	2400537c 	.word	0x2400537c
7001017c:	24008478 	.word	0x24008478

70010180 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
70010180:	b590      	push	{r4, r7, lr}
70010182:	b08d      	sub	sp, #52	@ 0x34
70010184:	af04      	add	r7, sp, #16
70010186:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
70010188:	2300      	movs	r3, #0
7001018a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
7001018c:	2300      	movs	r3, #0
7001018e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
70010190:	687b      	ldr	r3, [r7, #4]
70010192:	2b00      	cmp	r3, #0
70010194:	d106      	bne.n	700101a4 <tcp_process+0x24>
70010196:	4b9d      	ldr	r3, [pc, #628]	@ (7001040c <tcp_process+0x28c>)
70010198:	f44f 7247 	mov.w	r2, #796	@ 0x31c
7001019c:	499c      	ldr	r1, [pc, #624]	@ (70010410 <tcp_process+0x290>)
7001019e:	489d      	ldr	r0, [pc, #628]	@ (70010414 <tcp_process+0x294>)
700101a0:	f003 fdbe 	bl	70013d20 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
700101a4:	4b9c      	ldr	r3, [pc, #624]	@ (70010418 <tcp_process+0x298>)
700101a6:	781b      	ldrb	r3, [r3, #0]
700101a8:	f003 0304 	and.w	r3, r3, #4
700101ac:	2b00      	cmp	r3, #0
700101ae:	d04e      	beq.n	7001024e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
700101b0:	687b      	ldr	r3, [r7, #4]
700101b2:	7d1b      	ldrb	r3, [r3, #20]
700101b4:	2b02      	cmp	r3, #2
700101b6:	d108      	bne.n	700101ca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
700101b8:	687b      	ldr	r3, [r7, #4]
700101ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
700101bc:	4b97      	ldr	r3, [pc, #604]	@ (7001041c <tcp_process+0x29c>)
700101be:	681b      	ldr	r3, [r3, #0]
700101c0:	429a      	cmp	r2, r3
700101c2:	d123      	bne.n	7001020c <tcp_process+0x8c>
        acceptable = 1;
700101c4:	2301      	movs	r3, #1
700101c6:	76fb      	strb	r3, [r7, #27]
700101c8:	e020      	b.n	7001020c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
700101ca:	687b      	ldr	r3, [r7, #4]
700101cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
700101ce:	4b94      	ldr	r3, [pc, #592]	@ (70010420 <tcp_process+0x2a0>)
700101d0:	681b      	ldr	r3, [r3, #0]
700101d2:	429a      	cmp	r2, r3
700101d4:	d102      	bne.n	700101dc <tcp_process+0x5c>
        acceptable = 1;
700101d6:	2301      	movs	r3, #1
700101d8:	76fb      	strb	r3, [r7, #27]
700101da:	e017      	b.n	7001020c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
700101dc:	4b90      	ldr	r3, [pc, #576]	@ (70010420 <tcp_process+0x2a0>)
700101de:	681a      	ldr	r2, [r3, #0]
700101e0:	687b      	ldr	r3, [r7, #4]
700101e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700101e4:	1ad3      	subs	r3, r2, r3
700101e6:	2b00      	cmp	r3, #0
700101e8:	db10      	blt.n	7001020c <tcp_process+0x8c>
700101ea:	4b8d      	ldr	r3, [pc, #564]	@ (70010420 <tcp_process+0x2a0>)
700101ec:	681a      	ldr	r2, [r3, #0]
700101ee:	687b      	ldr	r3, [r7, #4]
700101f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700101f2:	6879      	ldr	r1, [r7, #4]
700101f4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
700101f6:	440b      	add	r3, r1
700101f8:	1ad3      	subs	r3, r2, r3
700101fa:	2b00      	cmp	r3, #0
700101fc:	dc06      	bgt.n	7001020c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
700101fe:	687b      	ldr	r3, [r7, #4]
70010200:	8b5b      	ldrh	r3, [r3, #26]
70010202:	f043 0302 	orr.w	r3, r3, #2
70010206:	b29a      	uxth	r2, r3
70010208:	687b      	ldr	r3, [r7, #4]
7001020a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
7001020c:	7efb      	ldrb	r3, [r7, #27]
7001020e:	2b00      	cmp	r3, #0
70010210:	d01b      	beq.n	7001024a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
70010212:	687b      	ldr	r3, [r7, #4]
70010214:	7d1b      	ldrb	r3, [r3, #20]
70010216:	2b00      	cmp	r3, #0
70010218:	d106      	bne.n	70010228 <tcp_process+0xa8>
7001021a:	4b7c      	ldr	r3, [pc, #496]	@ (7001040c <tcp_process+0x28c>)
7001021c:	f44f 724e 	mov.w	r2, #824	@ 0x338
70010220:	4980      	ldr	r1, [pc, #512]	@ (70010424 <tcp_process+0x2a4>)
70010222:	487c      	ldr	r0, [pc, #496]	@ (70010414 <tcp_process+0x294>)
70010224:	f003 fd7c 	bl	70013d20 <iprintf>
      recv_flags |= TF_RESET;
70010228:	4b7f      	ldr	r3, [pc, #508]	@ (70010428 <tcp_process+0x2a8>)
7001022a:	781b      	ldrb	r3, [r3, #0]
7001022c:	f043 0308 	orr.w	r3, r3, #8
70010230:	b2da      	uxtb	r2, r3
70010232:	4b7d      	ldr	r3, [pc, #500]	@ (70010428 <tcp_process+0x2a8>)
70010234:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
70010236:	687b      	ldr	r3, [r7, #4]
70010238:	8b5b      	ldrh	r3, [r3, #26]
7001023a:	f023 0301 	bic.w	r3, r3, #1
7001023e:	b29a      	uxth	r2, r3
70010240:	687b      	ldr	r3, [r7, #4]
70010242:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
70010244:	f06f 030d 	mvn.w	r3, #13
70010248:	e37a      	b.n	70010940 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
7001024a:	2300      	movs	r3, #0
7001024c:	e378      	b.n	70010940 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
7001024e:	4b72      	ldr	r3, [pc, #456]	@ (70010418 <tcp_process+0x298>)
70010250:	781b      	ldrb	r3, [r3, #0]
70010252:	f003 0302 	and.w	r3, r3, #2
70010256:	2b00      	cmp	r3, #0
70010258:	d010      	beq.n	7001027c <tcp_process+0xfc>
7001025a:	687b      	ldr	r3, [r7, #4]
7001025c:	7d1b      	ldrb	r3, [r3, #20]
7001025e:	2b02      	cmp	r3, #2
70010260:	d00c      	beq.n	7001027c <tcp_process+0xfc>
70010262:	687b      	ldr	r3, [r7, #4]
70010264:	7d1b      	ldrb	r3, [r3, #20]
70010266:	2b03      	cmp	r3, #3
70010268:	d008      	beq.n	7001027c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
7001026a:	687b      	ldr	r3, [r7, #4]
7001026c:	8b5b      	ldrh	r3, [r3, #26]
7001026e:	f043 0302 	orr.w	r3, r3, #2
70010272:	b29a      	uxth	r2, r3
70010274:	687b      	ldr	r3, [r7, #4]
70010276:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
70010278:	2300      	movs	r3, #0
7001027a:	e361      	b.n	70010940 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
7001027c:	687b      	ldr	r3, [r7, #4]
7001027e:	8b5b      	ldrh	r3, [r3, #26]
70010280:	f003 0310 	and.w	r3, r3, #16
70010284:	2b00      	cmp	r3, #0
70010286:	d103      	bne.n	70010290 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
70010288:	4b68      	ldr	r3, [pc, #416]	@ (7001042c <tcp_process+0x2ac>)
7001028a:	681a      	ldr	r2, [r3, #0]
7001028c:	687b      	ldr	r3, [r7, #4]
7001028e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
70010290:	687b      	ldr	r3, [r7, #4]
70010292:	2200      	movs	r2, #0
70010294:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
70010298:	687b      	ldr	r3, [r7, #4]
7001029a:	2200      	movs	r2, #0
7001029c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
700102a0:	6878      	ldr	r0, [r7, #4]
700102a2:	f001 fc2b 	bl	70011afc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
700102a6:	687b      	ldr	r3, [r7, #4]
700102a8:	7d1b      	ldrb	r3, [r3, #20]
700102aa:	3b02      	subs	r3, #2
700102ac:	2b07      	cmp	r3, #7
700102ae:	f200 8337 	bhi.w	70010920 <tcp_process+0x7a0>
700102b2:	a201      	add	r2, pc, #4	@ (adr r2, 700102b8 <tcp_process+0x138>)
700102b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
700102b8:	700102d9 	.word	0x700102d9
700102bc:	70010509 	.word	0x70010509
700102c0:	70010681 	.word	0x70010681
700102c4:	700106ab 	.word	0x700106ab
700102c8:	700107cf 	.word	0x700107cf
700102cc:	70010681 	.word	0x70010681
700102d0:	7001085b 	.word	0x7001085b
700102d4:	700108eb 	.word	0x700108eb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %s %"U32_F"\n",
                                    ackno, pcb->snd_nxt, pcb->unacked ? "" : " empty:",
                                    pcb->unacked ? lwip_ntohl(pcb->unacked->tcphdr->seqno) : 0));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
700102d8:	4b4f      	ldr	r3, [pc, #316]	@ (70010418 <tcp_process+0x298>)
700102da:	781b      	ldrb	r3, [r3, #0]
700102dc:	f003 0310 	and.w	r3, r3, #16
700102e0:	2b00      	cmp	r3, #0
700102e2:	f000 80e4 	beq.w	700104ae <tcp_process+0x32e>
700102e6:	4b4c      	ldr	r3, [pc, #304]	@ (70010418 <tcp_process+0x298>)
700102e8:	781b      	ldrb	r3, [r3, #0]
700102ea:	f003 0302 	and.w	r3, r3, #2
700102ee:	2b00      	cmp	r3, #0
700102f0:	f000 80dd 	beq.w	700104ae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
700102f4:	687b      	ldr	r3, [r7, #4]
700102f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
700102f8:	1c5a      	adds	r2, r3, #1
700102fa:	4b48      	ldr	r3, [pc, #288]	@ (7001041c <tcp_process+0x29c>)
700102fc:	681b      	ldr	r3, [r3, #0]
700102fe:	429a      	cmp	r2, r3
70010300:	f040 80d5 	bne.w	700104ae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
70010304:	4b46      	ldr	r3, [pc, #280]	@ (70010420 <tcp_process+0x2a0>)
70010306:	681b      	ldr	r3, [r3, #0]
70010308:	1c5a      	adds	r2, r3, #1
7001030a:	687b      	ldr	r3, [r7, #4]
7001030c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
7001030e:	687b      	ldr	r3, [r7, #4]
70010310:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
70010312:	687b      	ldr	r3, [r7, #4]
70010314:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
70010316:	4b41      	ldr	r3, [pc, #260]	@ (7001041c <tcp_process+0x29c>)
70010318:	681a      	ldr	r2, [r3, #0]
7001031a:	687b      	ldr	r3, [r7, #4]
7001031c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
7001031e:	4b44      	ldr	r3, [pc, #272]	@ (70010430 <tcp_process+0x2b0>)
70010320:	681b      	ldr	r3, [r3, #0]
70010322:	89db      	ldrh	r3, [r3, #14]
70010324:	b29a      	uxth	r2, r3
70010326:	687b      	ldr	r3, [r7, #4]
70010328:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
7001032c:	687b      	ldr	r3, [r7, #4]
7001032e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
70010332:	687b      	ldr	r3, [r7, #4]
70010334:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
70010338:	4b39      	ldr	r3, [pc, #228]	@ (70010420 <tcp_process+0x2a0>)
7001033a:	681b      	ldr	r3, [r3, #0]
7001033c:	1e5a      	subs	r2, r3, #1
7001033e:	687b      	ldr	r3, [r7, #4]
70010340:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
70010342:	687b      	ldr	r3, [r7, #4]
70010344:	2204      	movs	r2, #4
70010346:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
70010348:	687b      	ldr	r3, [r7, #4]
7001034a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
7001034c:	687b      	ldr	r3, [r7, #4]
7001034e:	3304      	adds	r3, #4
70010350:	4618      	mov	r0, r3
70010352:	f7fa fe33 	bl	7000afbc <ip4_route>
70010356:	4601      	mov	r1, r0
70010358:	687b      	ldr	r3, [r7, #4]
7001035a:	3304      	adds	r3, #4
7001035c:	461a      	mov	r2, r3
7001035e:	4620      	mov	r0, r4
70010360:	f7ff f88c 	bl	7000f47c <tcp_eff_send_mss_netif>
70010364:	4603      	mov	r3, r0
70010366:	461a      	mov	r2, r3
70010368:	687b      	ldr	r3, [r7, #4]
7001036a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
7001036c:	687b      	ldr	r3, [r7, #4]
7001036e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70010370:	009a      	lsls	r2, r3, #2
70010372:	687b      	ldr	r3, [r7, #4]
70010374:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70010376:	005b      	lsls	r3, r3, #1
70010378:	f241 111c 	movw	r1, #4380	@ 0x111c
7001037c:	428b      	cmp	r3, r1
7001037e:	bf38      	it	cc
70010380:	460b      	movcc	r3, r1
70010382:	429a      	cmp	r2, r3
70010384:	d204      	bcs.n	70010390 <tcp_process+0x210>
70010386:	687b      	ldr	r3, [r7, #4]
70010388:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
7001038a:	009b      	lsls	r3, r3, #2
7001038c:	b29b      	uxth	r3, r3
7001038e:	e00d      	b.n	700103ac <tcp_process+0x22c>
70010390:	687b      	ldr	r3, [r7, #4]
70010392:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70010394:	005b      	lsls	r3, r3, #1
70010396:	f241 121c 	movw	r2, #4380	@ 0x111c
7001039a:	4293      	cmp	r3, r2
7001039c:	d904      	bls.n	700103a8 <tcp_process+0x228>
7001039e:	687b      	ldr	r3, [r7, #4]
700103a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
700103a2:	005b      	lsls	r3, r3, #1
700103a4:	b29b      	uxth	r3, r3
700103a6:	e001      	b.n	700103ac <tcp_process+0x22c>
700103a8:	f241 131c 	movw	r3, #4380	@ 0x111c
700103ac:	687a      	ldr	r2, [r7, #4]
700103ae:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
700103b2:	687b      	ldr	r3, [r7, #4]
700103b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
700103b8:	2b00      	cmp	r3, #0
700103ba:	d106      	bne.n	700103ca <tcp_process+0x24a>
700103bc:	4b13      	ldr	r3, [pc, #76]	@ (7001040c <tcp_process+0x28c>)
700103be:	f240 326d 	movw	r2, #877	@ 0x36d
700103c2:	491c      	ldr	r1, [pc, #112]	@ (70010434 <tcp_process+0x2b4>)
700103c4:	4813      	ldr	r0, [pc, #76]	@ (70010414 <tcp_process+0x294>)
700103c6:	f003 fcab 	bl	70013d20 <iprintf>
        --pcb->snd_queuelen;
700103ca:	687b      	ldr	r3, [r7, #4]
700103cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
700103d0:	3b01      	subs	r3, #1
700103d2:	b29a      	uxth	r2, r3
700103d4:	687b      	ldr	r3, [r7, #4]
700103d6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
700103da:	687b      	ldr	r3, [r7, #4]
700103dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
700103de:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
700103e0:	69fb      	ldr	r3, [r7, #28]
700103e2:	2b00      	cmp	r3, #0
700103e4:	d12a      	bne.n	7001043c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
700103e6:	687b      	ldr	r3, [r7, #4]
700103e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
700103ea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
700103ec:	69fb      	ldr	r3, [r7, #28]
700103ee:	2b00      	cmp	r3, #0
700103f0:	d106      	bne.n	70010400 <tcp_process+0x280>
700103f2:	4b06      	ldr	r3, [pc, #24]	@ (7001040c <tcp_process+0x28c>)
700103f4:	f240 3275 	movw	r2, #885	@ 0x375
700103f8:	490f      	ldr	r1, [pc, #60]	@ (70010438 <tcp_process+0x2b8>)
700103fa:	4806      	ldr	r0, [pc, #24]	@ (70010414 <tcp_process+0x294>)
700103fc:	f003 fc90 	bl	70013d20 <iprintf>
          pcb->unsent = rseg->next;
70010400:	69fb      	ldr	r3, [r7, #28]
70010402:	681a      	ldr	r2, [r3, #0]
70010404:	687b      	ldr	r3, [r7, #4]
70010406:	66da      	str	r2, [r3, #108]	@ 0x6c
70010408:	e01c      	b.n	70010444 <tcp_process+0x2c4>
7001040a:	bf00      	nop
7001040c:	700161e8 	.word	0x700161e8
70010410:	7001644c 	.word	0x7001644c
70010414:	70016260 	.word	0x70016260
70010418:	240084bc 	.word	0x240084bc
7001041c:	240084b4 	.word	0x240084b4
70010420:	240084b0 	.word	0x240084b0
70010424:	70016468 	.word	0x70016468
70010428:	240084bd 	.word	0x240084bd
7001042c:	24008478 	.word	0x24008478
70010430:	240084a0 	.word	0x240084a0
70010434:	70016488 	.word	0x70016488
70010438:	700164a0 	.word	0x700164a0
        } else {
          pcb->unacked = rseg->next;
7001043c:	69fb      	ldr	r3, [r7, #28]
7001043e:	681a      	ldr	r2, [r3, #0]
70010440:	687b      	ldr	r3, [r7, #4]
70010442:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
70010444:	69f8      	ldr	r0, [r7, #28]
70010446:	f7fe fd3f 	bl	7000eec8 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
7001044a:	687b      	ldr	r3, [r7, #4]
7001044c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7001044e:	2b00      	cmp	r3, #0
70010450:	d104      	bne.n	7001045c <tcp_process+0x2dc>
          pcb->rtime = -1;
70010452:	687b      	ldr	r3, [r7, #4]
70010454:	f64f 72ff 	movw	r2, #65535	@ 0xffff
70010458:	861a      	strh	r2, [r3, #48]	@ 0x30
7001045a:	e006      	b.n	7001046a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
7001045c:	687b      	ldr	r3, [r7, #4]
7001045e:	2200      	movs	r2, #0
70010460:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
70010462:	687b      	ldr	r3, [r7, #4]
70010464:	2200      	movs	r2, #0
70010466:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
7001046a:	687b      	ldr	r3, [r7, #4]
7001046c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
70010470:	2b00      	cmp	r3, #0
70010472:	d00a      	beq.n	7001048a <tcp_process+0x30a>
70010474:	687b      	ldr	r3, [r7, #4]
70010476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
7001047a:	687a      	ldr	r2, [r7, #4]
7001047c:	6910      	ldr	r0, [r2, #16]
7001047e:	2200      	movs	r2, #0
70010480:	6879      	ldr	r1, [r7, #4]
70010482:	4798      	blx	r3
70010484:	4603      	mov	r3, r0
70010486:	76bb      	strb	r3, [r7, #26]
70010488:	e001      	b.n	7001048e <tcp_process+0x30e>
7001048a:	2300      	movs	r3, #0
7001048c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
7001048e:	f997 301a 	ldrsb.w	r3, [r7, #26]
70010492:	f113 0f0d 	cmn.w	r3, #13
70010496:	d102      	bne.n	7001049e <tcp_process+0x31e>
          return ERR_ABRT;
70010498:	f06f 030c 	mvn.w	r3, #12
7001049c:	e250      	b.n	70010940 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
7001049e:	687b      	ldr	r3, [r7, #4]
700104a0:	8b5b      	ldrh	r3, [r3, #26]
700104a2:	f043 0302 	orr.w	r3, r3, #2
700104a6:	b29a      	uxth	r2, r3
700104a8:	687b      	ldr	r3, [r7, #4]
700104aa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
700104ac:	e23a      	b.n	70010924 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
700104ae:	4b98      	ldr	r3, [pc, #608]	@ (70010710 <tcp_process+0x590>)
700104b0:	781b      	ldrb	r3, [r3, #0]
700104b2:	f003 0310 	and.w	r3, r3, #16
700104b6:	2b00      	cmp	r3, #0
700104b8:	f000 8234 	beq.w	70010924 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
700104bc:	4b95      	ldr	r3, [pc, #596]	@ (70010714 <tcp_process+0x594>)
700104be:	6819      	ldr	r1, [r3, #0]
700104c0:	4b95      	ldr	r3, [pc, #596]	@ (70010718 <tcp_process+0x598>)
700104c2:	881b      	ldrh	r3, [r3, #0]
700104c4:	461a      	mov	r2, r3
700104c6:	4b95      	ldr	r3, [pc, #596]	@ (7001071c <tcp_process+0x59c>)
700104c8:	681b      	ldr	r3, [r3, #0]
700104ca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
700104cc:	4b94      	ldr	r3, [pc, #592]	@ (70010720 <tcp_process+0x5a0>)
700104ce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
700104d0:	885b      	ldrh	r3, [r3, #2]
700104d2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
700104d4:	4a92      	ldr	r2, [pc, #584]	@ (70010720 <tcp_process+0x5a0>)
700104d6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
700104d8:	8812      	ldrh	r2, [r2, #0]
700104da:	b292      	uxth	r2, r2
700104dc:	9202      	str	r2, [sp, #8]
700104de:	9301      	str	r3, [sp, #4]
700104e0:	4b90      	ldr	r3, [pc, #576]	@ (70010724 <tcp_process+0x5a4>)
700104e2:	9300      	str	r3, [sp, #0]
700104e4:	4b90      	ldr	r3, [pc, #576]	@ (70010728 <tcp_process+0x5a8>)
700104e6:	4602      	mov	r2, r0
700104e8:	6878      	ldr	r0, [r7, #4]
700104ea:	f002 fc81 	bl	70012df0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
700104ee:	687b      	ldr	r3, [r7, #4]
700104f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
700104f4:	2b05      	cmp	r3, #5
700104f6:	f200 8215 	bhi.w	70010924 <tcp_process+0x7a4>
          pcb->rtime = 0;
700104fa:	687b      	ldr	r3, [r7, #4]
700104fc:	2200      	movs	r2, #0
700104fe:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
70010500:	6878      	ldr	r0, [r7, #4]
70010502:	f002 fa4d 	bl	700129a0 <tcp_rexmit_rto>
      break;
70010506:	e20d      	b.n	70010924 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
70010508:	4b81      	ldr	r3, [pc, #516]	@ (70010710 <tcp_process+0x590>)
7001050a:	781b      	ldrb	r3, [r3, #0]
7001050c:	f003 0310 	and.w	r3, r3, #16
70010510:	2b00      	cmp	r3, #0
70010512:	f000 80a1 	beq.w	70010658 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
70010516:	4b7f      	ldr	r3, [pc, #508]	@ (70010714 <tcp_process+0x594>)
70010518:	681a      	ldr	r2, [r3, #0]
7001051a:	687b      	ldr	r3, [r7, #4]
7001051c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
7001051e:	1ad3      	subs	r3, r2, r3
70010520:	3b01      	subs	r3, #1
70010522:	2b00      	cmp	r3, #0
70010524:	db7e      	blt.n	70010624 <tcp_process+0x4a4>
70010526:	4b7b      	ldr	r3, [pc, #492]	@ (70010714 <tcp_process+0x594>)
70010528:	681a      	ldr	r2, [r3, #0]
7001052a:	687b      	ldr	r3, [r7, #4]
7001052c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
7001052e:	1ad3      	subs	r3, r2, r3
70010530:	2b00      	cmp	r3, #0
70010532:	dc77      	bgt.n	70010624 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
70010534:	687b      	ldr	r3, [r7, #4]
70010536:	2204      	movs	r2, #4
70010538:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
7001053a:	687b      	ldr	r3, [r7, #4]
7001053c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
7001053e:	2b00      	cmp	r3, #0
70010540:	d102      	bne.n	70010548 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
70010542:	23fa      	movs	r3, #250	@ 0xfa
70010544:	76bb      	strb	r3, [r7, #26]
70010546:	e01d      	b.n	70010584 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
70010548:	687b      	ldr	r3, [r7, #4]
7001054a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
7001054c:	699b      	ldr	r3, [r3, #24]
7001054e:	2b00      	cmp	r3, #0
70010550:	d106      	bne.n	70010560 <tcp_process+0x3e0>
70010552:	4b76      	ldr	r3, [pc, #472]	@ (7001072c <tcp_process+0x5ac>)
70010554:	f240 32a9 	movw	r2, #937	@ 0x3a9
70010558:	4975      	ldr	r1, [pc, #468]	@ (70010730 <tcp_process+0x5b0>)
7001055a:	4876      	ldr	r0, [pc, #472]	@ (70010734 <tcp_process+0x5b4>)
7001055c:	f003 fbe0 	bl	70013d20 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
70010560:	687b      	ldr	r3, [r7, #4]
70010562:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
70010564:	699b      	ldr	r3, [r3, #24]
70010566:	2b00      	cmp	r3, #0
70010568:	d00a      	beq.n	70010580 <tcp_process+0x400>
7001056a:	687b      	ldr	r3, [r7, #4]
7001056c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
7001056e:	699b      	ldr	r3, [r3, #24]
70010570:	687a      	ldr	r2, [r7, #4]
70010572:	6910      	ldr	r0, [r2, #16]
70010574:	2200      	movs	r2, #0
70010576:	6879      	ldr	r1, [r7, #4]
70010578:	4798      	blx	r3
7001057a:	4603      	mov	r3, r0
7001057c:	76bb      	strb	r3, [r7, #26]
7001057e:	e001      	b.n	70010584 <tcp_process+0x404>
70010580:	23f0      	movs	r3, #240	@ 0xf0
70010582:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
70010584:	f997 301a 	ldrsb.w	r3, [r7, #26]
70010588:	2b00      	cmp	r3, #0
7001058a:	d00a      	beq.n	700105a2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
7001058c:	f997 301a 	ldrsb.w	r3, [r7, #26]
70010590:	f113 0f0d 	cmn.w	r3, #13
70010594:	d002      	beq.n	7001059c <tcp_process+0x41c>
              tcp_abort(pcb);
70010596:	6878      	ldr	r0, [r7, #4]
70010598:	f7fd ffc0 	bl	7000e51c <tcp_abort>
            }
            return ERR_ABRT;
7001059c:	f06f 030c 	mvn.w	r3, #12
700105a0:	e1ce      	b.n	70010940 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
700105a2:	6878      	ldr	r0, [r7, #4]
700105a4:	f000 fae0 	bl	70010b68 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
700105a8:	4b63      	ldr	r3, [pc, #396]	@ (70010738 <tcp_process+0x5b8>)
700105aa:	881b      	ldrh	r3, [r3, #0]
700105ac:	2b00      	cmp	r3, #0
700105ae:	d005      	beq.n	700105bc <tcp_process+0x43c>
            recv_acked--;
700105b0:	4b61      	ldr	r3, [pc, #388]	@ (70010738 <tcp_process+0x5b8>)
700105b2:	881b      	ldrh	r3, [r3, #0]
700105b4:	3b01      	subs	r3, #1
700105b6:	b29a      	uxth	r2, r3
700105b8:	4b5f      	ldr	r3, [pc, #380]	@ (70010738 <tcp_process+0x5b8>)
700105ba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
700105bc:	687b      	ldr	r3, [r7, #4]
700105be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
700105c0:	009a      	lsls	r2, r3, #2
700105c2:	687b      	ldr	r3, [r7, #4]
700105c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
700105c6:	005b      	lsls	r3, r3, #1
700105c8:	f241 111c 	movw	r1, #4380	@ 0x111c
700105cc:	428b      	cmp	r3, r1
700105ce:	bf38      	it	cc
700105d0:	460b      	movcc	r3, r1
700105d2:	429a      	cmp	r2, r3
700105d4:	d204      	bcs.n	700105e0 <tcp_process+0x460>
700105d6:	687b      	ldr	r3, [r7, #4]
700105d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
700105da:	009b      	lsls	r3, r3, #2
700105dc:	b29b      	uxth	r3, r3
700105de:	e00d      	b.n	700105fc <tcp_process+0x47c>
700105e0:	687b      	ldr	r3, [r7, #4]
700105e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
700105e4:	005b      	lsls	r3, r3, #1
700105e6:	f241 121c 	movw	r2, #4380	@ 0x111c
700105ea:	4293      	cmp	r3, r2
700105ec:	d904      	bls.n	700105f8 <tcp_process+0x478>
700105ee:	687b      	ldr	r3, [r7, #4]
700105f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
700105f2:	005b      	lsls	r3, r3, #1
700105f4:	b29b      	uxth	r3, r3
700105f6:	e001      	b.n	700105fc <tcp_process+0x47c>
700105f8:	f241 131c 	movw	r3, #4380	@ 0x111c
700105fc:	687a      	ldr	r2, [r7, #4]
700105fe:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
70010602:	4b4e      	ldr	r3, [pc, #312]	@ (7001073c <tcp_process+0x5bc>)
70010604:	781b      	ldrb	r3, [r3, #0]
70010606:	f003 0320 	and.w	r3, r3, #32
7001060a:	2b00      	cmp	r3, #0
7001060c:	d037      	beq.n	7001067e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
7001060e:	687b      	ldr	r3, [r7, #4]
70010610:	8b5b      	ldrh	r3, [r3, #26]
70010612:	f043 0302 	orr.w	r3, r3, #2
70010616:	b29a      	uxth	r2, r3
70010618:	687b      	ldr	r3, [r7, #4]
7001061a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
7001061c:	687b      	ldr	r3, [r7, #4]
7001061e:	2207      	movs	r2, #7
70010620:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
70010622:	e02c      	b.n	7001067e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
70010624:	4b3b      	ldr	r3, [pc, #236]	@ (70010714 <tcp_process+0x594>)
70010626:	6819      	ldr	r1, [r3, #0]
70010628:	4b3b      	ldr	r3, [pc, #236]	@ (70010718 <tcp_process+0x598>)
7001062a:	881b      	ldrh	r3, [r3, #0]
7001062c:	461a      	mov	r2, r3
7001062e:	4b3b      	ldr	r3, [pc, #236]	@ (7001071c <tcp_process+0x59c>)
70010630:	681b      	ldr	r3, [r3, #0]
70010632:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
70010634:	4b3a      	ldr	r3, [pc, #232]	@ (70010720 <tcp_process+0x5a0>)
70010636:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
70010638:	885b      	ldrh	r3, [r3, #2]
7001063a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
7001063c:	4a38      	ldr	r2, [pc, #224]	@ (70010720 <tcp_process+0x5a0>)
7001063e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
70010640:	8812      	ldrh	r2, [r2, #0]
70010642:	b292      	uxth	r2, r2
70010644:	9202      	str	r2, [sp, #8]
70010646:	9301      	str	r3, [sp, #4]
70010648:	4b36      	ldr	r3, [pc, #216]	@ (70010724 <tcp_process+0x5a4>)
7001064a:	9300      	str	r3, [sp, #0]
7001064c:	4b36      	ldr	r3, [pc, #216]	@ (70010728 <tcp_process+0x5a8>)
7001064e:	4602      	mov	r2, r0
70010650:	6878      	ldr	r0, [r7, #4]
70010652:	f002 fbcd 	bl	70012df0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
70010656:	e167      	b.n	70010928 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
70010658:	4b2d      	ldr	r3, [pc, #180]	@ (70010710 <tcp_process+0x590>)
7001065a:	781b      	ldrb	r3, [r3, #0]
7001065c:	f003 0302 	and.w	r3, r3, #2
70010660:	2b00      	cmp	r3, #0
70010662:	f000 8161 	beq.w	70010928 <tcp_process+0x7a8>
70010666:	687b      	ldr	r3, [r7, #4]
70010668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
7001066a:	1e5a      	subs	r2, r3, #1
7001066c:	4b2b      	ldr	r3, [pc, #172]	@ (7001071c <tcp_process+0x59c>)
7001066e:	681b      	ldr	r3, [r3, #0]
70010670:	429a      	cmp	r2, r3
70010672:	f040 8159 	bne.w	70010928 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
70010676:	6878      	ldr	r0, [r7, #4]
70010678:	f002 f9b4 	bl	700129e4 <tcp_rexmit>
      break;
7001067c:	e154      	b.n	70010928 <tcp_process+0x7a8>
7001067e:	e153      	b.n	70010928 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
70010680:	6878      	ldr	r0, [r7, #4]
70010682:	f000 fa71 	bl	70010b68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
70010686:	4b2d      	ldr	r3, [pc, #180]	@ (7001073c <tcp_process+0x5bc>)
70010688:	781b      	ldrb	r3, [r3, #0]
7001068a:	f003 0320 	and.w	r3, r3, #32
7001068e:	2b00      	cmp	r3, #0
70010690:	f000 814c 	beq.w	7001092c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
70010694:	687b      	ldr	r3, [r7, #4]
70010696:	8b5b      	ldrh	r3, [r3, #26]
70010698:	f043 0302 	orr.w	r3, r3, #2
7001069c:	b29a      	uxth	r2, r3
7001069e:	687b      	ldr	r3, [r7, #4]
700106a0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
700106a2:	687b      	ldr	r3, [r7, #4]
700106a4:	2207      	movs	r2, #7
700106a6:	751a      	strb	r2, [r3, #20]
      }
      break;
700106a8:	e140      	b.n	7001092c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
700106aa:	6878      	ldr	r0, [r7, #4]
700106ac:	f000 fa5c 	bl	70010b68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
700106b0:	4b22      	ldr	r3, [pc, #136]	@ (7001073c <tcp_process+0x5bc>)
700106b2:	781b      	ldrb	r3, [r3, #0]
700106b4:	f003 0320 	and.w	r3, r3, #32
700106b8:	2b00      	cmp	r3, #0
700106ba:	d071      	beq.n	700107a0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
700106bc:	4b14      	ldr	r3, [pc, #80]	@ (70010710 <tcp_process+0x590>)
700106be:	781b      	ldrb	r3, [r3, #0]
700106c0:	f003 0310 	and.w	r3, r3, #16
700106c4:	2b00      	cmp	r3, #0
700106c6:	d060      	beq.n	7001078a <tcp_process+0x60a>
700106c8:	687b      	ldr	r3, [r7, #4]
700106ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
700106cc:	4b11      	ldr	r3, [pc, #68]	@ (70010714 <tcp_process+0x594>)
700106ce:	681b      	ldr	r3, [r3, #0]
700106d0:	429a      	cmp	r2, r3
700106d2:	d15a      	bne.n	7001078a <tcp_process+0x60a>
            pcb->unsent == NULL) {
700106d4:	687b      	ldr	r3, [r7, #4]
700106d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
700106d8:	2b00      	cmp	r3, #0
700106da:	d156      	bne.n	7001078a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
700106dc:	687b      	ldr	r3, [r7, #4]
700106de:	8b5b      	ldrh	r3, [r3, #26]
700106e0:	f043 0302 	orr.w	r3, r3, #2
700106e4:	b29a      	uxth	r2, r3
700106e6:	687b      	ldr	r3, [r7, #4]
700106e8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
700106ea:	6878      	ldr	r0, [r7, #4]
700106ec:	f7fe fdca 	bl	7000f284 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
700106f0:	4b13      	ldr	r3, [pc, #76]	@ (70010740 <tcp_process+0x5c0>)
700106f2:	681b      	ldr	r3, [r3, #0]
700106f4:	687a      	ldr	r2, [r7, #4]
700106f6:	429a      	cmp	r2, r3
700106f8:	d105      	bne.n	70010706 <tcp_process+0x586>
700106fa:	4b11      	ldr	r3, [pc, #68]	@ (70010740 <tcp_process+0x5c0>)
700106fc:	681b      	ldr	r3, [r3, #0]
700106fe:	68db      	ldr	r3, [r3, #12]
70010700:	4a0f      	ldr	r2, [pc, #60]	@ (70010740 <tcp_process+0x5c0>)
70010702:	6013      	str	r3, [r2, #0]
70010704:	e02e      	b.n	70010764 <tcp_process+0x5e4>
70010706:	4b0e      	ldr	r3, [pc, #56]	@ (70010740 <tcp_process+0x5c0>)
70010708:	681b      	ldr	r3, [r3, #0]
7001070a:	617b      	str	r3, [r7, #20]
7001070c:	e027      	b.n	7001075e <tcp_process+0x5de>
7001070e:	bf00      	nop
70010710:	240084bc 	.word	0x240084bc
70010714:	240084b4 	.word	0x240084b4
70010718:	240084ba 	.word	0x240084ba
7001071c:	240084b0 	.word	0x240084b0
70010720:	240084a0 	.word	0x240084a0
70010724:	24005378 	.word	0x24005378
70010728:	2400537c 	.word	0x2400537c
7001072c:	700161e8 	.word	0x700161e8
70010730:	700164b4 	.word	0x700164b4
70010734:	70016260 	.word	0x70016260
70010738:	240084b8 	.word	0x240084b8
7001073c:	240084bd 	.word	0x240084bd
70010740:	24008484 	.word	0x24008484
70010744:	697b      	ldr	r3, [r7, #20]
70010746:	68db      	ldr	r3, [r3, #12]
70010748:	687a      	ldr	r2, [r7, #4]
7001074a:	429a      	cmp	r2, r3
7001074c:	d104      	bne.n	70010758 <tcp_process+0x5d8>
7001074e:	687b      	ldr	r3, [r7, #4]
70010750:	68da      	ldr	r2, [r3, #12]
70010752:	697b      	ldr	r3, [r7, #20]
70010754:	60da      	str	r2, [r3, #12]
70010756:	e005      	b.n	70010764 <tcp_process+0x5e4>
70010758:	697b      	ldr	r3, [r7, #20]
7001075a:	68db      	ldr	r3, [r3, #12]
7001075c:	617b      	str	r3, [r7, #20]
7001075e:	697b      	ldr	r3, [r7, #20]
70010760:	2b00      	cmp	r3, #0
70010762:	d1ef      	bne.n	70010744 <tcp_process+0x5c4>
70010764:	687b      	ldr	r3, [r7, #4]
70010766:	2200      	movs	r2, #0
70010768:	60da      	str	r2, [r3, #12]
7001076a:	4b77      	ldr	r3, [pc, #476]	@ (70010948 <tcp_process+0x7c8>)
7001076c:	2201      	movs	r2, #1
7001076e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
70010770:	687b      	ldr	r3, [r7, #4]
70010772:	220a      	movs	r2, #10
70010774:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
70010776:	4b75      	ldr	r3, [pc, #468]	@ (7001094c <tcp_process+0x7cc>)
70010778:	681a      	ldr	r2, [r3, #0]
7001077a:	687b      	ldr	r3, [r7, #4]
7001077c:	60da      	str	r2, [r3, #12]
7001077e:	4a73      	ldr	r2, [pc, #460]	@ (7001094c <tcp_process+0x7cc>)
70010780:	687b      	ldr	r3, [r7, #4]
70010782:	6013      	str	r3, [r2, #0]
70010784:	f002 fe98 	bl	700134b8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
70010788:	e0d2      	b.n	70010930 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
7001078a:	687b      	ldr	r3, [r7, #4]
7001078c:	8b5b      	ldrh	r3, [r3, #26]
7001078e:	f043 0302 	orr.w	r3, r3, #2
70010792:	b29a      	uxth	r2, r3
70010794:	687b      	ldr	r3, [r7, #4]
70010796:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
70010798:	687b      	ldr	r3, [r7, #4]
7001079a:	2208      	movs	r2, #8
7001079c:	751a      	strb	r2, [r3, #20]
      break;
7001079e:	e0c7      	b.n	70010930 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
700107a0:	4b6b      	ldr	r3, [pc, #428]	@ (70010950 <tcp_process+0x7d0>)
700107a2:	781b      	ldrb	r3, [r3, #0]
700107a4:	f003 0310 	and.w	r3, r3, #16
700107a8:	2b00      	cmp	r3, #0
700107aa:	f000 80c1 	beq.w	70010930 <tcp_process+0x7b0>
700107ae:	687b      	ldr	r3, [r7, #4]
700107b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
700107b2:	4b68      	ldr	r3, [pc, #416]	@ (70010954 <tcp_process+0x7d4>)
700107b4:	681b      	ldr	r3, [r3, #0]
700107b6:	429a      	cmp	r2, r3
700107b8:	f040 80ba 	bne.w	70010930 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
700107bc:	687b      	ldr	r3, [r7, #4]
700107be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
700107c0:	2b00      	cmp	r3, #0
700107c2:	f040 80b5 	bne.w	70010930 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
700107c6:	687b      	ldr	r3, [r7, #4]
700107c8:	2206      	movs	r2, #6
700107ca:	751a      	strb	r2, [r3, #20]
      break;
700107cc:	e0b0      	b.n	70010930 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
700107ce:	6878      	ldr	r0, [r7, #4]
700107d0:	f000 f9ca 	bl	70010b68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
700107d4:	4b60      	ldr	r3, [pc, #384]	@ (70010958 <tcp_process+0x7d8>)
700107d6:	781b      	ldrb	r3, [r3, #0]
700107d8:	f003 0320 	and.w	r3, r3, #32
700107dc:	2b00      	cmp	r3, #0
700107de:	f000 80a9 	beq.w	70010934 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
700107e2:	687b      	ldr	r3, [r7, #4]
700107e4:	8b5b      	ldrh	r3, [r3, #26]
700107e6:	f043 0302 	orr.w	r3, r3, #2
700107ea:	b29a      	uxth	r2, r3
700107ec:	687b      	ldr	r3, [r7, #4]
700107ee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
700107f0:	6878      	ldr	r0, [r7, #4]
700107f2:	f7fe fd47 	bl	7000f284 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
700107f6:	4b59      	ldr	r3, [pc, #356]	@ (7001095c <tcp_process+0x7dc>)
700107f8:	681b      	ldr	r3, [r3, #0]
700107fa:	687a      	ldr	r2, [r7, #4]
700107fc:	429a      	cmp	r2, r3
700107fe:	d105      	bne.n	7001080c <tcp_process+0x68c>
70010800:	4b56      	ldr	r3, [pc, #344]	@ (7001095c <tcp_process+0x7dc>)
70010802:	681b      	ldr	r3, [r3, #0]
70010804:	68db      	ldr	r3, [r3, #12]
70010806:	4a55      	ldr	r2, [pc, #340]	@ (7001095c <tcp_process+0x7dc>)
70010808:	6013      	str	r3, [r2, #0]
7001080a:	e013      	b.n	70010834 <tcp_process+0x6b4>
7001080c:	4b53      	ldr	r3, [pc, #332]	@ (7001095c <tcp_process+0x7dc>)
7001080e:	681b      	ldr	r3, [r3, #0]
70010810:	613b      	str	r3, [r7, #16]
70010812:	e00c      	b.n	7001082e <tcp_process+0x6ae>
70010814:	693b      	ldr	r3, [r7, #16]
70010816:	68db      	ldr	r3, [r3, #12]
70010818:	687a      	ldr	r2, [r7, #4]
7001081a:	429a      	cmp	r2, r3
7001081c:	d104      	bne.n	70010828 <tcp_process+0x6a8>
7001081e:	687b      	ldr	r3, [r7, #4]
70010820:	68da      	ldr	r2, [r3, #12]
70010822:	693b      	ldr	r3, [r7, #16]
70010824:	60da      	str	r2, [r3, #12]
70010826:	e005      	b.n	70010834 <tcp_process+0x6b4>
70010828:	693b      	ldr	r3, [r7, #16]
7001082a:	68db      	ldr	r3, [r3, #12]
7001082c:	613b      	str	r3, [r7, #16]
7001082e:	693b      	ldr	r3, [r7, #16]
70010830:	2b00      	cmp	r3, #0
70010832:	d1ef      	bne.n	70010814 <tcp_process+0x694>
70010834:	687b      	ldr	r3, [r7, #4]
70010836:	2200      	movs	r2, #0
70010838:	60da      	str	r2, [r3, #12]
7001083a:	4b43      	ldr	r3, [pc, #268]	@ (70010948 <tcp_process+0x7c8>)
7001083c:	2201      	movs	r2, #1
7001083e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
70010840:	687b      	ldr	r3, [r7, #4]
70010842:	220a      	movs	r2, #10
70010844:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
70010846:	4b41      	ldr	r3, [pc, #260]	@ (7001094c <tcp_process+0x7cc>)
70010848:	681a      	ldr	r2, [r3, #0]
7001084a:	687b      	ldr	r3, [r7, #4]
7001084c:	60da      	str	r2, [r3, #12]
7001084e:	4a3f      	ldr	r2, [pc, #252]	@ (7001094c <tcp_process+0x7cc>)
70010850:	687b      	ldr	r3, [r7, #4]
70010852:	6013      	str	r3, [r2, #0]
70010854:	f002 fe30 	bl	700134b8 <tcp_timer_needed>
      }
      break;
70010858:	e06c      	b.n	70010934 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
7001085a:	6878      	ldr	r0, [r7, #4]
7001085c:	f000 f984 	bl	70010b68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
70010860:	4b3b      	ldr	r3, [pc, #236]	@ (70010950 <tcp_process+0x7d0>)
70010862:	781b      	ldrb	r3, [r3, #0]
70010864:	f003 0310 	and.w	r3, r3, #16
70010868:	2b00      	cmp	r3, #0
7001086a:	d065      	beq.n	70010938 <tcp_process+0x7b8>
7001086c:	687b      	ldr	r3, [r7, #4]
7001086e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
70010870:	4b38      	ldr	r3, [pc, #224]	@ (70010954 <tcp_process+0x7d4>)
70010872:	681b      	ldr	r3, [r3, #0]
70010874:	429a      	cmp	r2, r3
70010876:	d15f      	bne.n	70010938 <tcp_process+0x7b8>
70010878:	687b      	ldr	r3, [r7, #4]
7001087a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7001087c:	2b00      	cmp	r3, #0
7001087e:	d15b      	bne.n	70010938 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
70010880:	6878      	ldr	r0, [r7, #4]
70010882:	f7fe fcff 	bl	7000f284 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
70010886:	4b35      	ldr	r3, [pc, #212]	@ (7001095c <tcp_process+0x7dc>)
70010888:	681b      	ldr	r3, [r3, #0]
7001088a:	687a      	ldr	r2, [r7, #4]
7001088c:	429a      	cmp	r2, r3
7001088e:	d105      	bne.n	7001089c <tcp_process+0x71c>
70010890:	4b32      	ldr	r3, [pc, #200]	@ (7001095c <tcp_process+0x7dc>)
70010892:	681b      	ldr	r3, [r3, #0]
70010894:	68db      	ldr	r3, [r3, #12]
70010896:	4a31      	ldr	r2, [pc, #196]	@ (7001095c <tcp_process+0x7dc>)
70010898:	6013      	str	r3, [r2, #0]
7001089a:	e013      	b.n	700108c4 <tcp_process+0x744>
7001089c:	4b2f      	ldr	r3, [pc, #188]	@ (7001095c <tcp_process+0x7dc>)
7001089e:	681b      	ldr	r3, [r3, #0]
700108a0:	60fb      	str	r3, [r7, #12]
700108a2:	e00c      	b.n	700108be <tcp_process+0x73e>
700108a4:	68fb      	ldr	r3, [r7, #12]
700108a6:	68db      	ldr	r3, [r3, #12]
700108a8:	687a      	ldr	r2, [r7, #4]
700108aa:	429a      	cmp	r2, r3
700108ac:	d104      	bne.n	700108b8 <tcp_process+0x738>
700108ae:	687b      	ldr	r3, [r7, #4]
700108b0:	68da      	ldr	r2, [r3, #12]
700108b2:	68fb      	ldr	r3, [r7, #12]
700108b4:	60da      	str	r2, [r3, #12]
700108b6:	e005      	b.n	700108c4 <tcp_process+0x744>
700108b8:	68fb      	ldr	r3, [r7, #12]
700108ba:	68db      	ldr	r3, [r3, #12]
700108bc:	60fb      	str	r3, [r7, #12]
700108be:	68fb      	ldr	r3, [r7, #12]
700108c0:	2b00      	cmp	r3, #0
700108c2:	d1ef      	bne.n	700108a4 <tcp_process+0x724>
700108c4:	687b      	ldr	r3, [r7, #4]
700108c6:	2200      	movs	r2, #0
700108c8:	60da      	str	r2, [r3, #12]
700108ca:	4b1f      	ldr	r3, [pc, #124]	@ (70010948 <tcp_process+0x7c8>)
700108cc:	2201      	movs	r2, #1
700108ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
700108d0:	687b      	ldr	r3, [r7, #4]
700108d2:	220a      	movs	r2, #10
700108d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
700108d6:	4b1d      	ldr	r3, [pc, #116]	@ (7001094c <tcp_process+0x7cc>)
700108d8:	681a      	ldr	r2, [r3, #0]
700108da:	687b      	ldr	r3, [r7, #4]
700108dc:	60da      	str	r2, [r3, #12]
700108de:	4a1b      	ldr	r2, [pc, #108]	@ (7001094c <tcp_process+0x7cc>)
700108e0:	687b      	ldr	r3, [r7, #4]
700108e2:	6013      	str	r3, [r2, #0]
700108e4:	f002 fde8 	bl	700134b8 <tcp_timer_needed>
      }
      break;
700108e8:	e026      	b.n	70010938 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
700108ea:	6878      	ldr	r0, [r7, #4]
700108ec:	f000 f93c 	bl	70010b68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
700108f0:	4b17      	ldr	r3, [pc, #92]	@ (70010950 <tcp_process+0x7d0>)
700108f2:	781b      	ldrb	r3, [r3, #0]
700108f4:	f003 0310 	and.w	r3, r3, #16
700108f8:	2b00      	cmp	r3, #0
700108fa:	d01f      	beq.n	7001093c <tcp_process+0x7bc>
700108fc:	687b      	ldr	r3, [r7, #4]
700108fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
70010900:	4b14      	ldr	r3, [pc, #80]	@ (70010954 <tcp_process+0x7d4>)
70010902:	681b      	ldr	r3, [r3, #0]
70010904:	429a      	cmp	r2, r3
70010906:	d119      	bne.n	7001093c <tcp_process+0x7bc>
70010908:	687b      	ldr	r3, [r7, #4]
7001090a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7001090c:	2b00      	cmp	r3, #0
7001090e:	d115      	bne.n	7001093c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
70010910:	4b11      	ldr	r3, [pc, #68]	@ (70010958 <tcp_process+0x7d8>)
70010912:	781b      	ldrb	r3, [r3, #0]
70010914:	f043 0310 	orr.w	r3, r3, #16
70010918:	b2da      	uxtb	r2, r3
7001091a:	4b0f      	ldr	r3, [pc, #60]	@ (70010958 <tcp_process+0x7d8>)
7001091c:	701a      	strb	r2, [r3, #0]
      }
      break;
7001091e:	e00d      	b.n	7001093c <tcp_process+0x7bc>
    default:
      break;
70010920:	bf00      	nop
70010922:	e00c      	b.n	7001093e <tcp_process+0x7be>
      break;
70010924:	bf00      	nop
70010926:	e00a      	b.n	7001093e <tcp_process+0x7be>
      break;
70010928:	bf00      	nop
7001092a:	e008      	b.n	7001093e <tcp_process+0x7be>
      break;
7001092c:	bf00      	nop
7001092e:	e006      	b.n	7001093e <tcp_process+0x7be>
      break;
70010930:	bf00      	nop
70010932:	e004      	b.n	7001093e <tcp_process+0x7be>
      break;
70010934:	bf00      	nop
70010936:	e002      	b.n	7001093e <tcp_process+0x7be>
      break;
70010938:	bf00      	nop
7001093a:	e000      	b.n	7001093e <tcp_process+0x7be>
      break;
7001093c:	bf00      	nop
  }
  return ERR_OK;
7001093e:	2300      	movs	r3, #0
}
70010940:	4618      	mov	r0, r3
70010942:	3724      	adds	r7, #36	@ 0x24
70010944:	46bd      	mov	sp, r7
70010946:	bd90      	pop	{r4, r7, pc}
70010948:	2400848c 	.word	0x2400848c
7001094c:	24008488 	.word	0x24008488
70010950:	240084bc 	.word	0x240084bc
70010954:	240084b4 	.word	0x240084b4
70010958:	240084bd 	.word	0x240084bd
7001095c:	24008484 	.word	0x24008484

70010960 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
70010960:	b590      	push	{r4, r7, lr}
70010962:	b085      	sub	sp, #20
70010964:	af00      	add	r7, sp, #0
70010966:	6078      	str	r0, [r7, #4]
70010968:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
7001096a:	687b      	ldr	r3, [r7, #4]
7001096c:	2b00      	cmp	r3, #0
7001096e:	d106      	bne.n	7001097e <tcp_oos_insert_segment+0x1e>
70010970:	4b3b      	ldr	r3, [pc, #236]	@ (70010a60 <tcp_oos_insert_segment+0x100>)
70010972:	f44f 6284 	mov.w	r2, #1056	@ 0x420
70010976:	493b      	ldr	r1, [pc, #236]	@ (70010a64 <tcp_oos_insert_segment+0x104>)
70010978:	483b      	ldr	r0, [pc, #236]	@ (70010a68 <tcp_oos_insert_segment+0x108>)
7001097a:	f003 f9d1 	bl	70013d20 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
7001097e:	687b      	ldr	r3, [r7, #4]
70010980:	68db      	ldr	r3, [r3, #12]
70010982:	899b      	ldrh	r3, [r3, #12]
70010984:	b29b      	uxth	r3, r3
70010986:	4618      	mov	r0, r3
70010988:	f7f9 f822 	bl	700099d0 <lwip_htons>
7001098c:	4603      	mov	r3, r0
7001098e:	b2db      	uxtb	r3, r3
70010990:	f003 0301 	and.w	r3, r3, #1
70010994:	2b00      	cmp	r3, #0
70010996:	d028      	beq.n	700109ea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
70010998:	6838      	ldr	r0, [r7, #0]
7001099a:	f7fe fa80 	bl	7000ee9e <tcp_segs_free>
    next = NULL;
7001099e:	2300      	movs	r3, #0
700109a0:	603b      	str	r3, [r7, #0]
700109a2:	e056      	b.n	70010a52 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
700109a4:	683b      	ldr	r3, [r7, #0]
700109a6:	68db      	ldr	r3, [r3, #12]
700109a8:	899b      	ldrh	r3, [r3, #12]
700109aa:	b29b      	uxth	r3, r3
700109ac:	4618      	mov	r0, r3
700109ae:	f7f9 f80f 	bl	700099d0 <lwip_htons>
700109b2:	4603      	mov	r3, r0
700109b4:	b2db      	uxtb	r3, r3
700109b6:	f003 0301 	and.w	r3, r3, #1
700109ba:	2b00      	cmp	r3, #0
700109bc:	d00d      	beq.n	700109da <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
700109be:	687b      	ldr	r3, [r7, #4]
700109c0:	68db      	ldr	r3, [r3, #12]
700109c2:	899b      	ldrh	r3, [r3, #12]
700109c4:	b29c      	uxth	r4, r3
700109c6:	2001      	movs	r0, #1
700109c8:	f7f9 f802 	bl	700099d0 <lwip_htons>
700109cc:	4603      	mov	r3, r0
700109ce:	461a      	mov	r2, r3
700109d0:	687b      	ldr	r3, [r7, #4]
700109d2:	68db      	ldr	r3, [r3, #12]
700109d4:	4322      	orrs	r2, r4
700109d6:	b292      	uxth	r2, r2
700109d8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
700109da:	683b      	ldr	r3, [r7, #0]
700109dc:	60fb      	str	r3, [r7, #12]
      next = next->next;
700109de:	683b      	ldr	r3, [r7, #0]
700109e0:	681b      	ldr	r3, [r3, #0]
700109e2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
700109e4:	68f8      	ldr	r0, [r7, #12]
700109e6:	f7fe fa6f 	bl	7000eec8 <tcp_seg_free>
    while (next &&
700109ea:	683b      	ldr	r3, [r7, #0]
700109ec:	2b00      	cmp	r3, #0
700109ee:	d00e      	beq.n	70010a0e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
700109f0:	687b      	ldr	r3, [r7, #4]
700109f2:	891b      	ldrh	r3, [r3, #8]
700109f4:	461a      	mov	r2, r3
700109f6:	4b1d      	ldr	r3, [pc, #116]	@ (70010a6c <tcp_oos_insert_segment+0x10c>)
700109f8:	681b      	ldr	r3, [r3, #0]
700109fa:	441a      	add	r2, r3
700109fc:	683b      	ldr	r3, [r7, #0]
700109fe:	68db      	ldr	r3, [r3, #12]
70010a00:	685b      	ldr	r3, [r3, #4]
70010a02:	6839      	ldr	r1, [r7, #0]
70010a04:	8909      	ldrh	r1, [r1, #8]
70010a06:	440b      	add	r3, r1
70010a08:	1ad3      	subs	r3, r2, r3
    while (next &&
70010a0a:	2b00      	cmp	r3, #0
70010a0c:	daca      	bge.n	700109a4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
70010a0e:	683b      	ldr	r3, [r7, #0]
70010a10:	2b00      	cmp	r3, #0
70010a12:	d01e      	beq.n	70010a52 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
70010a14:	687b      	ldr	r3, [r7, #4]
70010a16:	891b      	ldrh	r3, [r3, #8]
70010a18:	461a      	mov	r2, r3
70010a1a:	4b14      	ldr	r3, [pc, #80]	@ (70010a6c <tcp_oos_insert_segment+0x10c>)
70010a1c:	681b      	ldr	r3, [r3, #0]
70010a1e:	441a      	add	r2, r3
70010a20:	683b      	ldr	r3, [r7, #0]
70010a22:	68db      	ldr	r3, [r3, #12]
70010a24:	685b      	ldr	r3, [r3, #4]
70010a26:	1ad3      	subs	r3, r2, r3
    if (next &&
70010a28:	2b00      	cmp	r3, #0
70010a2a:	dd12      	ble.n	70010a52 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
70010a2c:	683b      	ldr	r3, [r7, #0]
70010a2e:	68db      	ldr	r3, [r3, #12]
70010a30:	685b      	ldr	r3, [r3, #4]
70010a32:	b29a      	uxth	r2, r3
70010a34:	4b0d      	ldr	r3, [pc, #52]	@ (70010a6c <tcp_oos_insert_segment+0x10c>)
70010a36:	681b      	ldr	r3, [r3, #0]
70010a38:	b29b      	uxth	r3, r3
70010a3a:	1ad3      	subs	r3, r2, r3
70010a3c:	b29a      	uxth	r2, r3
70010a3e:	687b      	ldr	r3, [r7, #4]
70010a40:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
70010a42:	687b      	ldr	r3, [r7, #4]
70010a44:	685a      	ldr	r2, [r3, #4]
70010a46:	687b      	ldr	r3, [r7, #4]
70010a48:	891b      	ldrh	r3, [r3, #8]
70010a4a:	4619      	mov	r1, r3
70010a4c:	4610      	mov	r0, r2
70010a4e:	f7fc fd7f 	bl	7000d550 <pbuf_realloc>
    }
  }
  cseg->next = next;
70010a52:	687b      	ldr	r3, [r7, #4]
70010a54:	683a      	ldr	r2, [r7, #0]
70010a56:	601a      	str	r2, [r3, #0]
}
70010a58:	bf00      	nop
70010a5a:	3714      	adds	r7, #20
70010a5c:	46bd      	mov	sp, r7
70010a5e:	bd90      	pop	{r4, r7, pc}
70010a60:	700161e8 	.word	0x700161e8
70010a64:	700164d4 	.word	0x700164d4
70010a68:	70016260 	.word	0x70016260
70010a6c:	240084b0 	.word	0x240084b0

70010a70 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
70010a70:	b5b0      	push	{r4, r5, r7, lr}
70010a72:	b086      	sub	sp, #24
70010a74:	af00      	add	r7, sp, #0
70010a76:	60f8      	str	r0, [r7, #12]
70010a78:	60b9      	str	r1, [r7, #8]
70010a7a:	607a      	str	r2, [r7, #4]
70010a7c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
70010a7e:	e03e      	b.n	70010afe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
70010a80:	68bb      	ldr	r3, [r7, #8]
70010a82:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
70010a84:	68bb      	ldr	r3, [r7, #8]
70010a86:	681b      	ldr	r3, [r3, #0]
70010a88:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
70010a8a:	697b      	ldr	r3, [r7, #20]
70010a8c:	685b      	ldr	r3, [r3, #4]
70010a8e:	4618      	mov	r0, r3
70010a90:	f7fc ff68 	bl	7000d964 <pbuf_clen>
70010a94:	4603      	mov	r3, r0
70010a96:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
70010a98:	68fb      	ldr	r3, [r7, #12]
70010a9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
70010a9e:	8a7a      	ldrh	r2, [r7, #18]
70010aa0:	429a      	cmp	r2, r3
70010aa2:	d906      	bls.n	70010ab2 <tcp_free_acked_segments+0x42>
70010aa4:	4b2a      	ldr	r3, [pc, #168]	@ (70010b50 <tcp_free_acked_segments+0xe0>)
70010aa6:	f44f 628b 	mov.w	r2, #1112	@ 0x458
70010aaa:	492a      	ldr	r1, [pc, #168]	@ (70010b54 <tcp_free_acked_segments+0xe4>)
70010aac:	482a      	ldr	r0, [pc, #168]	@ (70010b58 <tcp_free_acked_segments+0xe8>)
70010aae:	f003 f937 	bl	70013d20 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
70010ab2:	68fb      	ldr	r3, [r7, #12]
70010ab4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
70010ab8:	8a7b      	ldrh	r3, [r7, #18]
70010aba:	1ad3      	subs	r3, r2, r3
70010abc:	b29a      	uxth	r2, r3
70010abe:	68fb      	ldr	r3, [r7, #12]
70010ac0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
70010ac4:	697b      	ldr	r3, [r7, #20]
70010ac6:	891a      	ldrh	r2, [r3, #8]
70010ac8:	4b24      	ldr	r3, [pc, #144]	@ (70010b5c <tcp_free_acked_segments+0xec>)
70010aca:	881b      	ldrh	r3, [r3, #0]
70010acc:	4413      	add	r3, r2
70010ace:	b29a      	uxth	r2, r3
70010ad0:	4b22      	ldr	r3, [pc, #136]	@ (70010b5c <tcp_free_acked_segments+0xec>)
70010ad2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
70010ad4:	6978      	ldr	r0, [r7, #20]
70010ad6:	f7fe f9f7 	bl	7000eec8 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
70010ada:	68fb      	ldr	r3, [r7, #12]
70010adc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
70010ae0:	2b00      	cmp	r3, #0
70010ae2:	d00c      	beq.n	70010afe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
70010ae4:	68bb      	ldr	r3, [r7, #8]
70010ae6:	2b00      	cmp	r3, #0
70010ae8:	d109      	bne.n	70010afe <tcp_free_acked_segments+0x8e>
70010aea:	683b      	ldr	r3, [r7, #0]
70010aec:	2b00      	cmp	r3, #0
70010aee:	d106      	bne.n	70010afe <tcp_free_acked_segments+0x8e>
70010af0:	4b17      	ldr	r3, [pc, #92]	@ (70010b50 <tcp_free_acked_segments+0xe0>)
70010af2:	f240 4262 	movw	r2, #1122	@ 0x462
70010af6:	491a      	ldr	r1, [pc, #104]	@ (70010b60 <tcp_free_acked_segments+0xf0>)
70010af8:	4817      	ldr	r0, [pc, #92]	@ (70010b58 <tcp_free_acked_segments+0xe8>)
70010afa:	f003 f911 	bl	70013d20 <iprintf>
  while (seg_list != NULL &&
70010afe:	68bb      	ldr	r3, [r7, #8]
70010b00:	2b00      	cmp	r3, #0
70010b02:	d020      	beq.n	70010b46 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
70010b04:	68bb      	ldr	r3, [r7, #8]
70010b06:	68db      	ldr	r3, [r3, #12]
70010b08:	685b      	ldr	r3, [r3, #4]
70010b0a:	4618      	mov	r0, r3
70010b0c:	f7f8 ff75 	bl	700099fa <lwip_htonl>
70010b10:	4604      	mov	r4, r0
70010b12:	68bb      	ldr	r3, [r7, #8]
70010b14:	891b      	ldrh	r3, [r3, #8]
70010b16:	461d      	mov	r5, r3
70010b18:	68bb      	ldr	r3, [r7, #8]
70010b1a:	68db      	ldr	r3, [r3, #12]
70010b1c:	899b      	ldrh	r3, [r3, #12]
70010b1e:	b29b      	uxth	r3, r3
70010b20:	4618      	mov	r0, r3
70010b22:	f7f8 ff55 	bl	700099d0 <lwip_htons>
70010b26:	4603      	mov	r3, r0
70010b28:	b2db      	uxtb	r3, r3
70010b2a:	f003 0303 	and.w	r3, r3, #3
70010b2e:	2b00      	cmp	r3, #0
70010b30:	d001      	beq.n	70010b36 <tcp_free_acked_segments+0xc6>
70010b32:	2301      	movs	r3, #1
70010b34:	e000      	b.n	70010b38 <tcp_free_acked_segments+0xc8>
70010b36:	2300      	movs	r3, #0
70010b38:	442b      	add	r3, r5
70010b3a:	18e2      	adds	r2, r4, r3
70010b3c:	4b09      	ldr	r3, [pc, #36]	@ (70010b64 <tcp_free_acked_segments+0xf4>)
70010b3e:	681b      	ldr	r3, [r3, #0]
70010b40:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
70010b42:	2b00      	cmp	r3, #0
70010b44:	dd9c      	ble.n	70010a80 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
70010b46:	68bb      	ldr	r3, [r7, #8]
}
70010b48:	4618      	mov	r0, r3
70010b4a:	3718      	adds	r7, #24
70010b4c:	46bd      	mov	sp, r7
70010b4e:	bdb0      	pop	{r4, r5, r7, pc}
70010b50:	700161e8 	.word	0x700161e8
70010b54:	700164fc 	.word	0x700164fc
70010b58:	70016260 	.word	0x70016260
70010b5c:	240084b8 	.word	0x240084b8
70010b60:	70016524 	.word	0x70016524
70010b64:	240084b4 	.word	0x240084b4

70010b68 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
70010b68:	b5b0      	push	{r4, r5, r7, lr}
70010b6a:	b094      	sub	sp, #80	@ 0x50
70010b6c:	af00      	add	r7, sp, #0
70010b6e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
70010b70:	2300      	movs	r3, #0
70010b72:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
70010b74:	687b      	ldr	r3, [r7, #4]
70010b76:	2b00      	cmp	r3, #0
70010b78:	d106      	bne.n	70010b88 <tcp_receive+0x20>
70010b7a:	4b91      	ldr	r3, [pc, #580]	@ (70010dc0 <tcp_receive+0x258>)
70010b7c:	f240 427c 	movw	r2, #1148	@ 0x47c
70010b80:	4990      	ldr	r1, [pc, #576]	@ (70010dc4 <tcp_receive+0x25c>)
70010b82:	4891      	ldr	r0, [pc, #580]	@ (70010dc8 <tcp_receive+0x260>)
70010b84:	f003 f8cc 	bl	70013d20 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
70010b88:	687b      	ldr	r3, [r7, #4]
70010b8a:	7d1b      	ldrb	r3, [r3, #20]
70010b8c:	2b03      	cmp	r3, #3
70010b8e:	d806      	bhi.n	70010b9e <tcp_receive+0x36>
70010b90:	4b8b      	ldr	r3, [pc, #556]	@ (70010dc0 <tcp_receive+0x258>)
70010b92:	f240 427d 	movw	r2, #1149	@ 0x47d
70010b96:	498d      	ldr	r1, [pc, #564]	@ (70010dcc <tcp_receive+0x264>)
70010b98:	488b      	ldr	r0, [pc, #556]	@ (70010dc8 <tcp_receive+0x260>)
70010b9a:	f003 f8c1 	bl	70013d20 <iprintf>

  if (flags & TCP_ACK) {
70010b9e:	4b8c      	ldr	r3, [pc, #560]	@ (70010dd0 <tcp_receive+0x268>)
70010ba0:	781b      	ldrb	r3, [r3, #0]
70010ba2:	f003 0310 	and.w	r3, r3, #16
70010ba6:	2b00      	cmp	r3, #0
70010ba8:	f000 8264 	beq.w	70011074 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
70010bac:	687b      	ldr	r3, [r7, #4]
70010bae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
70010bb2:	461a      	mov	r2, r3
70010bb4:	687b      	ldr	r3, [r7, #4]
70010bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
70010bb8:	4413      	add	r3, r2
70010bba:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
70010bbc:	687b      	ldr	r3, [r7, #4]
70010bbe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
70010bc0:	4b84      	ldr	r3, [pc, #528]	@ (70010dd4 <tcp_receive+0x26c>)
70010bc2:	681b      	ldr	r3, [r3, #0]
70010bc4:	1ad3      	subs	r3, r2, r3
70010bc6:	2b00      	cmp	r3, #0
70010bc8:	db1b      	blt.n	70010c02 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
70010bca:	687b      	ldr	r3, [r7, #4]
70010bcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
70010bce:	4b81      	ldr	r3, [pc, #516]	@ (70010dd4 <tcp_receive+0x26c>)
70010bd0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
70010bd2:	429a      	cmp	r2, r3
70010bd4:	d106      	bne.n	70010be4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
70010bd6:	687b      	ldr	r3, [r7, #4]
70010bd8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
70010bda:	4b7f      	ldr	r3, [pc, #508]	@ (70010dd8 <tcp_receive+0x270>)
70010bdc:	681b      	ldr	r3, [r3, #0]
70010bde:	1ad3      	subs	r3, r2, r3
70010be0:	2b00      	cmp	r3, #0
70010be2:	db0e      	blt.n	70010c02 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
70010be4:	687b      	ldr	r3, [r7, #4]
70010be6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
70010be8:	4b7b      	ldr	r3, [pc, #492]	@ (70010dd8 <tcp_receive+0x270>)
70010bea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
70010bec:	429a      	cmp	r2, r3
70010bee:	d125      	bne.n	70010c3c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
70010bf0:	4b7a      	ldr	r3, [pc, #488]	@ (70010ddc <tcp_receive+0x274>)
70010bf2:	681b      	ldr	r3, [r3, #0]
70010bf4:	89db      	ldrh	r3, [r3, #14]
70010bf6:	b29a      	uxth	r2, r3
70010bf8:	687b      	ldr	r3, [r7, #4]
70010bfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
70010bfe:	429a      	cmp	r2, r3
70010c00:	d91c      	bls.n	70010c3c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
70010c02:	4b76      	ldr	r3, [pc, #472]	@ (70010ddc <tcp_receive+0x274>)
70010c04:	681b      	ldr	r3, [r3, #0]
70010c06:	89db      	ldrh	r3, [r3, #14]
70010c08:	b29a      	uxth	r2, r3
70010c0a:	687b      	ldr	r3, [r7, #4]
70010c0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
70010c10:	687b      	ldr	r3, [r7, #4]
70010c12:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
70010c16:	687b      	ldr	r3, [r7, #4]
70010c18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
70010c1c:	429a      	cmp	r2, r3
70010c1e:	d205      	bcs.n	70010c2c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
70010c20:	687b      	ldr	r3, [r7, #4]
70010c22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
70010c26:	687b      	ldr	r3, [r7, #4]
70010c28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
70010c2c:	4b69      	ldr	r3, [pc, #420]	@ (70010dd4 <tcp_receive+0x26c>)
70010c2e:	681a      	ldr	r2, [r3, #0]
70010c30:	687b      	ldr	r3, [r7, #4]
70010c32:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
70010c34:	4b68      	ldr	r3, [pc, #416]	@ (70010dd8 <tcp_receive+0x270>)
70010c36:	681a      	ldr	r2, [r3, #0]
70010c38:	687b      	ldr	r3, [r7, #4]
70010c3a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
70010c3c:	4b66      	ldr	r3, [pc, #408]	@ (70010dd8 <tcp_receive+0x270>)
70010c3e:	681a      	ldr	r2, [r3, #0]
70010c40:	687b      	ldr	r3, [r7, #4]
70010c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70010c44:	1ad3      	subs	r3, r2, r3
70010c46:	2b00      	cmp	r3, #0
70010c48:	dc58      	bgt.n	70010cfc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
70010c4a:	4b65      	ldr	r3, [pc, #404]	@ (70010de0 <tcp_receive+0x278>)
70010c4c:	881b      	ldrh	r3, [r3, #0]
70010c4e:	2b00      	cmp	r3, #0
70010c50:	d14b      	bne.n	70010cea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
70010c52:	687b      	ldr	r3, [r7, #4]
70010c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
70010c56:	687a      	ldr	r2, [r7, #4]
70010c58:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
70010c5c:	4413      	add	r3, r2
70010c5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
70010c60:	429a      	cmp	r2, r3
70010c62:	d142      	bne.n	70010cea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
70010c64:	687b      	ldr	r3, [r7, #4]
70010c66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
70010c6a:	2b00      	cmp	r3, #0
70010c6c:	db3d      	blt.n	70010cea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
70010c6e:	687b      	ldr	r3, [r7, #4]
70010c70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
70010c72:	4b59      	ldr	r3, [pc, #356]	@ (70010dd8 <tcp_receive+0x270>)
70010c74:	681b      	ldr	r3, [r3, #0]
70010c76:	429a      	cmp	r2, r3
70010c78:	d137      	bne.n	70010cea <tcp_receive+0x182>
              found_dupack = 1;
70010c7a:	2301      	movs	r3, #1
70010c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
70010c7e:	687b      	ldr	r3, [r7, #4]
70010c80:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
70010c84:	2bff      	cmp	r3, #255	@ 0xff
70010c86:	d007      	beq.n	70010c98 <tcp_receive+0x130>
                ++pcb->dupacks;
70010c88:	687b      	ldr	r3, [r7, #4]
70010c8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
70010c8e:	3301      	adds	r3, #1
70010c90:	b2da      	uxtb	r2, r3
70010c92:	687b      	ldr	r3, [r7, #4]
70010c94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
70010c98:	687b      	ldr	r3, [r7, #4]
70010c9a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
70010c9e:	2b03      	cmp	r3, #3
70010ca0:	d91b      	bls.n	70010cda <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
70010ca2:	687b      	ldr	r3, [r7, #4]
70010ca4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
70010ca8:	687b      	ldr	r3, [r7, #4]
70010caa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70010cac:	4413      	add	r3, r2
70010cae:	b29a      	uxth	r2, r3
70010cb0:	687b      	ldr	r3, [r7, #4]
70010cb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
70010cb6:	429a      	cmp	r2, r3
70010cb8:	d30a      	bcc.n	70010cd0 <tcp_receive+0x168>
70010cba:	687b      	ldr	r3, [r7, #4]
70010cbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
70010cc0:	687b      	ldr	r3, [r7, #4]
70010cc2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70010cc4:	4413      	add	r3, r2
70010cc6:	b29a      	uxth	r2, r3
70010cc8:	687b      	ldr	r3, [r7, #4]
70010cca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
70010cce:	e004      	b.n	70010cda <tcp_receive+0x172>
70010cd0:	687b      	ldr	r3, [r7, #4]
70010cd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
70010cd6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
70010cda:	687b      	ldr	r3, [r7, #4]
70010cdc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
70010ce0:	2b02      	cmp	r3, #2
70010ce2:	d902      	bls.n	70010cea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
70010ce4:	6878      	ldr	r0, [r7, #4]
70010ce6:	f001 fee9 	bl	70012abc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
70010cea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
70010cec:	2b00      	cmp	r3, #0
70010cee:	f040 8161 	bne.w	70010fb4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
70010cf2:	687b      	ldr	r3, [r7, #4]
70010cf4:	2200      	movs	r2, #0
70010cf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
70010cfa:	e15b      	b.n	70010fb4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
70010cfc:	4b36      	ldr	r3, [pc, #216]	@ (70010dd8 <tcp_receive+0x270>)
70010cfe:	681a      	ldr	r2, [r3, #0]
70010d00:	687b      	ldr	r3, [r7, #4]
70010d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70010d04:	1ad3      	subs	r3, r2, r3
70010d06:	3b01      	subs	r3, #1
70010d08:	2b00      	cmp	r3, #0
70010d0a:	f2c0 814e 	blt.w	70010faa <tcp_receive+0x442>
70010d0e:	4b32      	ldr	r3, [pc, #200]	@ (70010dd8 <tcp_receive+0x270>)
70010d10:	681a      	ldr	r2, [r3, #0]
70010d12:	687b      	ldr	r3, [r7, #4]
70010d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70010d16:	1ad3      	subs	r3, r2, r3
70010d18:	2b00      	cmp	r3, #0
70010d1a:	f300 8146 	bgt.w	70010faa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
70010d1e:	687b      	ldr	r3, [r7, #4]
70010d20:	8b5b      	ldrh	r3, [r3, #26]
70010d22:	f003 0304 	and.w	r3, r3, #4
70010d26:	2b00      	cmp	r3, #0
70010d28:	d010      	beq.n	70010d4c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
70010d2a:	687b      	ldr	r3, [r7, #4]
70010d2c:	8b5b      	ldrh	r3, [r3, #26]
70010d2e:	f023 0304 	bic.w	r3, r3, #4
70010d32:	b29a      	uxth	r2, r3
70010d34:	687b      	ldr	r3, [r7, #4]
70010d36:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
70010d38:	687b      	ldr	r3, [r7, #4]
70010d3a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
70010d3e:	687b      	ldr	r3, [r7, #4]
70010d40:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
70010d44:	687b      	ldr	r3, [r7, #4]
70010d46:	2200      	movs	r2, #0
70010d48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
70010d4c:	687b      	ldr	r3, [r7, #4]
70010d4e:	2200      	movs	r2, #0
70010d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
70010d54:	687b      	ldr	r3, [r7, #4]
70010d56:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
70010d5a:	10db      	asrs	r3, r3, #3
70010d5c:	b21b      	sxth	r3, r3
70010d5e:	b29a      	uxth	r2, r3
70010d60:	687b      	ldr	r3, [r7, #4]
70010d62:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
70010d66:	b29b      	uxth	r3, r3
70010d68:	4413      	add	r3, r2
70010d6a:	b29b      	uxth	r3, r3
70010d6c:	b21a      	sxth	r2, r3
70010d6e:	687b      	ldr	r3, [r7, #4]
70010d70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
70010d74:	4b18      	ldr	r3, [pc, #96]	@ (70010dd8 <tcp_receive+0x270>)
70010d76:	681b      	ldr	r3, [r3, #0]
70010d78:	b29a      	uxth	r2, r3
70010d7a:	687b      	ldr	r3, [r7, #4]
70010d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70010d7e:	b29b      	uxth	r3, r3
70010d80:	1ad3      	subs	r3, r2, r3
70010d82:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
70010d84:	687b      	ldr	r3, [r7, #4]
70010d86:	2200      	movs	r2, #0
70010d88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
70010d8c:	4b12      	ldr	r3, [pc, #72]	@ (70010dd8 <tcp_receive+0x270>)
70010d8e:	681a      	ldr	r2, [r3, #0]
70010d90:	687b      	ldr	r3, [r7, #4]
70010d92:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
70010d94:	687b      	ldr	r3, [r7, #4]
70010d96:	7d1b      	ldrb	r3, [r3, #20]
70010d98:	2b03      	cmp	r3, #3
70010d9a:	f240 8097 	bls.w	70010ecc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
70010d9e:	687b      	ldr	r3, [r7, #4]
70010da0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
70010da4:	687b      	ldr	r3, [r7, #4]
70010da6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
70010daa:	429a      	cmp	r2, r3
70010dac:	d245      	bcs.n	70010e3a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
70010dae:	687b      	ldr	r3, [r7, #4]
70010db0:	8b5b      	ldrh	r3, [r3, #26]
70010db2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
70010db6:	2b00      	cmp	r3, #0
70010db8:	d014      	beq.n	70010de4 <tcp_receive+0x27c>
70010dba:	2301      	movs	r3, #1
70010dbc:	e013      	b.n	70010de6 <tcp_receive+0x27e>
70010dbe:	bf00      	nop
70010dc0:	700161e8 	.word	0x700161e8
70010dc4:	70016544 	.word	0x70016544
70010dc8:	70016260 	.word	0x70016260
70010dcc:	70016560 	.word	0x70016560
70010dd0:	240084bc 	.word	0x240084bc
70010dd4:	240084b0 	.word	0x240084b0
70010dd8:	240084b4 	.word	0x240084b4
70010ddc:	240084a0 	.word	0x240084a0
70010de0:	240084ba 	.word	0x240084ba
70010de4:	2302      	movs	r3, #2
70010de6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
70010dea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
70010dee:	b29a      	uxth	r2, r3
70010df0:	687b      	ldr	r3, [r7, #4]
70010df2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70010df4:	fb12 f303 	smulbb	r3, r2, r3
70010df8:	b29b      	uxth	r3, r3
70010dfa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
70010dfc:	4293      	cmp	r3, r2
70010dfe:	bf28      	it	cs
70010e00:	4613      	movcs	r3, r2
70010e02:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
70010e04:	687b      	ldr	r3, [r7, #4]
70010e06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
70010e0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
70010e0c:	4413      	add	r3, r2
70010e0e:	b29a      	uxth	r2, r3
70010e10:	687b      	ldr	r3, [r7, #4]
70010e12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
70010e16:	429a      	cmp	r2, r3
70010e18:	d309      	bcc.n	70010e2e <tcp_receive+0x2c6>
70010e1a:	687b      	ldr	r3, [r7, #4]
70010e1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
70010e20:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
70010e22:	4413      	add	r3, r2
70010e24:	b29a      	uxth	r2, r3
70010e26:	687b      	ldr	r3, [r7, #4]
70010e28:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
70010e2c:	e04e      	b.n	70010ecc <tcp_receive+0x364>
70010e2e:	687b      	ldr	r3, [r7, #4]
70010e30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
70010e34:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
70010e38:	e048      	b.n	70010ecc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
70010e3a:	687b      	ldr	r3, [r7, #4]
70010e3c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
70010e40:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
70010e42:	4413      	add	r3, r2
70010e44:	b29a      	uxth	r2, r3
70010e46:	687b      	ldr	r3, [r7, #4]
70010e48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
70010e4c:	429a      	cmp	r2, r3
70010e4e:	d309      	bcc.n	70010e64 <tcp_receive+0x2fc>
70010e50:	687b      	ldr	r3, [r7, #4]
70010e52:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
70010e56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
70010e58:	4413      	add	r3, r2
70010e5a:	b29a      	uxth	r2, r3
70010e5c:	687b      	ldr	r3, [r7, #4]
70010e5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
70010e62:	e004      	b.n	70010e6e <tcp_receive+0x306>
70010e64:	687b      	ldr	r3, [r7, #4]
70010e66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
70010e6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
70010e6e:	687b      	ldr	r3, [r7, #4]
70010e70:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
70010e74:	687b      	ldr	r3, [r7, #4]
70010e76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
70010e7a:	429a      	cmp	r2, r3
70010e7c:	d326      	bcc.n	70010ecc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
70010e7e:	687b      	ldr	r3, [r7, #4]
70010e80:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
70010e84:	687b      	ldr	r3, [r7, #4]
70010e86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
70010e8a:	1ad3      	subs	r3, r2, r3
70010e8c:	b29a      	uxth	r2, r3
70010e8e:	687b      	ldr	r3, [r7, #4]
70010e90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
70010e94:	687b      	ldr	r3, [r7, #4]
70010e96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
70010e9a:	687b      	ldr	r3, [r7, #4]
70010e9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70010e9e:	4413      	add	r3, r2
70010ea0:	b29a      	uxth	r2, r3
70010ea2:	687b      	ldr	r3, [r7, #4]
70010ea4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
70010ea8:	429a      	cmp	r2, r3
70010eaa:	d30a      	bcc.n	70010ec2 <tcp_receive+0x35a>
70010eac:	687b      	ldr	r3, [r7, #4]
70010eae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
70010eb2:	687b      	ldr	r3, [r7, #4]
70010eb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70010eb6:	4413      	add	r3, r2
70010eb8:	b29a      	uxth	r2, r3
70010eba:	687b      	ldr	r3, [r7, #4]
70010ebc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
70010ec0:	e004      	b.n	70010ecc <tcp_receive+0x364>
70010ec2:	687b      	ldr	r3, [r7, #4]
70010ec4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
70010ec8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
70010ecc:	687b      	ldr	r3, [r7, #4]
70010ece:	6f19      	ldr	r1, [r3, #112]	@ 0x70
70010ed0:	687b      	ldr	r3, [r7, #4]
70010ed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70010ed4:	4a98      	ldr	r2, [pc, #608]	@ (70011138 <tcp_receive+0x5d0>)
70010ed6:	6878      	ldr	r0, [r7, #4]
70010ed8:	f7ff fdca 	bl	70010a70 <tcp_free_acked_segments>
70010edc:	4602      	mov	r2, r0
70010ede:	687b      	ldr	r3, [r7, #4]
70010ee0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
70010ee2:	687b      	ldr	r3, [r7, #4]
70010ee4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
70010ee6:	687b      	ldr	r3, [r7, #4]
70010ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70010eea:	4a94      	ldr	r2, [pc, #592]	@ (7001113c <tcp_receive+0x5d4>)
70010eec:	6878      	ldr	r0, [r7, #4]
70010eee:	f7ff fdbf 	bl	70010a70 <tcp_free_acked_segments>
70010ef2:	4602      	mov	r2, r0
70010ef4:	687b      	ldr	r3, [r7, #4]
70010ef6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
70010ef8:	687b      	ldr	r3, [r7, #4]
70010efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70010efc:	2b00      	cmp	r3, #0
70010efe:	d104      	bne.n	70010f0a <tcp_receive+0x3a2>
        pcb->rtime = -1;
70010f00:	687b      	ldr	r3, [r7, #4]
70010f02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
70010f06:	861a      	strh	r2, [r3, #48]	@ 0x30
70010f08:	e002      	b.n	70010f10 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
70010f0a:	687b      	ldr	r3, [r7, #4]
70010f0c:	2200      	movs	r2, #0
70010f0e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
70010f10:	687b      	ldr	r3, [r7, #4]
70010f12:	2200      	movs	r2, #0
70010f14:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
70010f16:	687b      	ldr	r3, [r7, #4]
70010f18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70010f1a:	2b00      	cmp	r3, #0
70010f1c:	d103      	bne.n	70010f26 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
70010f1e:	687b      	ldr	r3, [r7, #4]
70010f20:	2200      	movs	r2, #0
70010f22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
70010f26:	687b      	ldr	r3, [r7, #4]
70010f28:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
70010f2c:	4b84      	ldr	r3, [pc, #528]	@ (70011140 <tcp_receive+0x5d8>)
70010f2e:	881b      	ldrh	r3, [r3, #0]
70010f30:	4413      	add	r3, r2
70010f32:	b29a      	uxth	r2, r3
70010f34:	687b      	ldr	r3, [r7, #4]
70010f36:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
70010f3a:	687b      	ldr	r3, [r7, #4]
70010f3c:	8b5b      	ldrh	r3, [r3, #26]
70010f3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
70010f42:	2b00      	cmp	r3, #0
70010f44:	d035      	beq.n	70010fb2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
70010f46:	687b      	ldr	r3, [r7, #4]
70010f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70010f4a:	2b00      	cmp	r3, #0
70010f4c:	d118      	bne.n	70010f80 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
70010f4e:	687b      	ldr	r3, [r7, #4]
70010f50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70010f52:	2b00      	cmp	r3, #0
70010f54:	d00c      	beq.n	70010f70 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
70010f56:	687b      	ldr	r3, [r7, #4]
70010f58:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
70010f5a:	687b      	ldr	r3, [r7, #4]
70010f5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70010f5e:	68db      	ldr	r3, [r3, #12]
70010f60:	685b      	ldr	r3, [r3, #4]
70010f62:	4618      	mov	r0, r3
70010f64:	f7f8 fd49 	bl	700099fa <lwip_htonl>
70010f68:	4603      	mov	r3, r0
70010f6a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
70010f6c:	2b00      	cmp	r3, #0
70010f6e:	dc20      	bgt.n	70010fb2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
70010f70:	687b      	ldr	r3, [r7, #4]
70010f72:	8b5b      	ldrh	r3, [r3, #26]
70010f74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
70010f78:	b29a      	uxth	r2, r3
70010f7a:	687b      	ldr	r3, [r7, #4]
70010f7c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
70010f7e:	e018      	b.n	70010fb2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
70010f80:	687b      	ldr	r3, [r7, #4]
70010f82:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
70010f84:	687b      	ldr	r3, [r7, #4]
70010f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70010f88:	68db      	ldr	r3, [r3, #12]
70010f8a:	685b      	ldr	r3, [r3, #4]
70010f8c:	4618      	mov	r0, r3
70010f8e:	f7f8 fd34 	bl	700099fa <lwip_htonl>
70010f92:	4603      	mov	r3, r0
70010f94:	1ae3      	subs	r3, r4, r3
70010f96:	2b00      	cmp	r3, #0
70010f98:	dc0b      	bgt.n	70010fb2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
70010f9a:	687b      	ldr	r3, [r7, #4]
70010f9c:	8b5b      	ldrh	r3, [r3, #26]
70010f9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
70010fa2:	b29a      	uxth	r2, r3
70010fa4:	687b      	ldr	r3, [r7, #4]
70010fa6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
70010fa8:	e003      	b.n	70010fb2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
70010faa:	6878      	ldr	r0, [r7, #4]
70010fac:	f001 ff72 	bl	70012e94 <tcp_send_empty_ack>
70010fb0:	e000      	b.n	70010fb4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
70010fb2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
70010fb4:	687b      	ldr	r3, [r7, #4]
70010fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
70010fb8:	2b00      	cmp	r3, #0
70010fba:	d05b      	beq.n	70011074 <tcp_receive+0x50c>
70010fbc:	687b      	ldr	r3, [r7, #4]
70010fbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
70010fc0:	4b60      	ldr	r3, [pc, #384]	@ (70011144 <tcp_receive+0x5dc>)
70010fc2:	681b      	ldr	r3, [r3, #0]
70010fc4:	1ad3      	subs	r3, r2, r3
70010fc6:	2b00      	cmp	r3, #0
70010fc8:	da54      	bge.n	70011074 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
70010fca:	4b5f      	ldr	r3, [pc, #380]	@ (70011148 <tcp_receive+0x5e0>)
70010fcc:	681b      	ldr	r3, [r3, #0]
70010fce:	b29a      	uxth	r2, r3
70010fd0:	687b      	ldr	r3, [r7, #4]
70010fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
70010fd4:	b29b      	uxth	r3, r3
70010fd6:	1ad3      	subs	r3, r2, r3
70010fd8:	b29b      	uxth	r3, r3
70010fda:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
70010fde:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
70010fe2:	687b      	ldr	r3, [r7, #4]
70010fe4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
70010fe8:	10db      	asrs	r3, r3, #3
70010fea:	b21b      	sxth	r3, r3
70010fec:	b29b      	uxth	r3, r3
70010fee:	1ad3      	subs	r3, r2, r3
70010ff0:	b29b      	uxth	r3, r3
70010ff2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
70010ff6:	687b      	ldr	r3, [r7, #4]
70010ff8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
70010ffc:	b29a      	uxth	r2, r3
70010ffe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
70011002:	4413      	add	r3, r2
70011004:	b29b      	uxth	r3, r3
70011006:	b21a      	sxth	r2, r3
70011008:	687b      	ldr	r3, [r7, #4]
7001100a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
7001100c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
70011010:	2b00      	cmp	r3, #0
70011012:	da05      	bge.n	70011020 <tcp_receive+0x4b8>
        m = (s16_t) - m;
70011014:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
70011018:	425b      	negs	r3, r3
7001101a:	b29b      	uxth	r3, r3
7001101c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
70011020:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
70011024:	687b      	ldr	r3, [r7, #4]
70011026:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
7001102a:	109b      	asrs	r3, r3, #2
7001102c:	b21b      	sxth	r3, r3
7001102e:	b29b      	uxth	r3, r3
70011030:	1ad3      	subs	r3, r2, r3
70011032:	b29b      	uxth	r3, r3
70011034:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
70011038:	687b      	ldr	r3, [r7, #4]
7001103a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
7001103e:	b29a      	uxth	r2, r3
70011040:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
70011044:	4413      	add	r3, r2
70011046:	b29b      	uxth	r3, r3
70011048:	b21a      	sxth	r2, r3
7001104a:	687b      	ldr	r3, [r7, #4]
7001104c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
7001104e:	687b      	ldr	r3, [r7, #4]
70011050:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
70011054:	10db      	asrs	r3, r3, #3
70011056:	b21b      	sxth	r3, r3
70011058:	b29a      	uxth	r2, r3
7001105a:	687b      	ldr	r3, [r7, #4]
7001105c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
70011060:	b29b      	uxth	r3, r3
70011062:	4413      	add	r3, r2
70011064:	b29b      	uxth	r3, r3
70011066:	b21a      	sxth	r2, r3
70011068:	687b      	ldr	r3, [r7, #4]
7001106a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
7001106e:	687b      	ldr	r3, [r7, #4]
70011070:	2200      	movs	r2, #0
70011072:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
70011074:	4b35      	ldr	r3, [pc, #212]	@ (7001114c <tcp_receive+0x5e4>)
70011076:	881b      	ldrh	r3, [r3, #0]
70011078:	2b00      	cmp	r3, #0
7001107a:	f000 84df 	beq.w	70011a3c <tcp_receive+0xed4>
7001107e:	687b      	ldr	r3, [r7, #4]
70011080:	7d1b      	ldrb	r3, [r3, #20]
70011082:	2b06      	cmp	r3, #6
70011084:	f200 84da 	bhi.w	70011a3c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
70011088:	687b      	ldr	r3, [r7, #4]
7001108a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
7001108c:	4b30      	ldr	r3, [pc, #192]	@ (70011150 <tcp_receive+0x5e8>)
7001108e:	681b      	ldr	r3, [r3, #0]
70011090:	1ad3      	subs	r3, r2, r3
70011092:	3b01      	subs	r3, #1
70011094:	2b00      	cmp	r3, #0
70011096:	f2c0 808f 	blt.w	700111b8 <tcp_receive+0x650>
7001109a:	687b      	ldr	r3, [r7, #4]
7001109c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
7001109e:	4b2b      	ldr	r3, [pc, #172]	@ (7001114c <tcp_receive+0x5e4>)
700110a0:	881b      	ldrh	r3, [r3, #0]
700110a2:	4619      	mov	r1, r3
700110a4:	4b2a      	ldr	r3, [pc, #168]	@ (70011150 <tcp_receive+0x5e8>)
700110a6:	681b      	ldr	r3, [r3, #0]
700110a8:	440b      	add	r3, r1
700110aa:	1ad3      	subs	r3, r2, r3
700110ac:	3301      	adds	r3, #1
700110ae:	2b00      	cmp	r3, #0
700110b0:	f300 8082 	bgt.w	700111b8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
700110b4:	4b27      	ldr	r3, [pc, #156]	@ (70011154 <tcp_receive+0x5ec>)
700110b6:	685b      	ldr	r3, [r3, #4]
700110b8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
700110ba:	687b      	ldr	r3, [r7, #4]
700110bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
700110be:	4b24      	ldr	r3, [pc, #144]	@ (70011150 <tcp_receive+0x5e8>)
700110c0:	681b      	ldr	r3, [r3, #0]
700110c2:	1ad3      	subs	r3, r2, r3
700110c4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
700110c6:	4b23      	ldr	r3, [pc, #140]	@ (70011154 <tcp_receive+0x5ec>)
700110c8:	685b      	ldr	r3, [r3, #4]
700110ca:	2b00      	cmp	r3, #0
700110cc:	d106      	bne.n	700110dc <tcp_receive+0x574>
700110ce:	4b22      	ldr	r3, [pc, #136]	@ (70011158 <tcp_receive+0x5f0>)
700110d0:	f240 5295 	movw	r2, #1429	@ 0x595
700110d4:	4921      	ldr	r1, [pc, #132]	@ (7001115c <tcp_receive+0x5f4>)
700110d6:	4822      	ldr	r0, [pc, #136]	@ (70011160 <tcp_receive+0x5f8>)
700110d8:	f002 fe22 	bl	70013d20 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
700110dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700110de:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
700110e2:	4293      	cmp	r3, r2
700110e4:	d906      	bls.n	700110f4 <tcp_receive+0x58c>
700110e6:	4b1c      	ldr	r3, [pc, #112]	@ (70011158 <tcp_receive+0x5f0>)
700110e8:	f240 5296 	movw	r2, #1430	@ 0x596
700110ec:	491d      	ldr	r1, [pc, #116]	@ (70011164 <tcp_receive+0x5fc>)
700110ee:	481c      	ldr	r0, [pc, #112]	@ (70011160 <tcp_receive+0x5f8>)
700110f0:	f002 fe16 	bl	70013d20 <iprintf>
      off = (u16_t)off32;
700110f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700110f6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
700110fa:	4b16      	ldr	r3, [pc, #88]	@ (70011154 <tcp_receive+0x5ec>)
700110fc:	685b      	ldr	r3, [r3, #4]
700110fe:	891b      	ldrh	r3, [r3, #8]
70011100:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
70011104:	429a      	cmp	r2, r3
70011106:	d906      	bls.n	70011116 <tcp_receive+0x5ae>
70011108:	4b13      	ldr	r3, [pc, #76]	@ (70011158 <tcp_receive+0x5f0>)
7001110a:	f44f 62b3 	mov.w	r2, #1432	@ 0x598
7001110e:	4916      	ldr	r1, [pc, #88]	@ (70011168 <tcp_receive+0x600>)
70011110:	4813      	ldr	r0, [pc, #76]	@ (70011160 <tcp_receive+0x5f8>)
70011112:	f002 fe05 	bl	70013d20 <iprintf>
      inseg.len -= off;
70011116:	4b0f      	ldr	r3, [pc, #60]	@ (70011154 <tcp_receive+0x5ec>)
70011118:	891a      	ldrh	r2, [r3, #8]
7001111a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
7001111e:	1ad3      	subs	r3, r2, r3
70011120:	b29a      	uxth	r2, r3
70011122:	4b0c      	ldr	r3, [pc, #48]	@ (70011154 <tcp_receive+0x5ec>)
70011124:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
70011126:	4b0b      	ldr	r3, [pc, #44]	@ (70011154 <tcp_receive+0x5ec>)
70011128:	685b      	ldr	r3, [r3, #4]
7001112a:	891a      	ldrh	r2, [r3, #8]
7001112c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
70011130:	1ad3      	subs	r3, r2, r3
70011132:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
70011134:	e02a      	b.n	7001118c <tcp_receive+0x624>
70011136:	bf00      	nop
70011138:	7001657c 	.word	0x7001657c
7001113c:	70016584 	.word	0x70016584
70011140:	240084b8 	.word	0x240084b8
70011144:	240084b4 	.word	0x240084b4
70011148:	24008478 	.word	0x24008478
7001114c:	240084ba 	.word	0x240084ba
70011150:	240084b0 	.word	0x240084b0
70011154:	24008490 	.word	0x24008490
70011158:	700161e8 	.word	0x700161e8
7001115c:	7001658c 	.word	0x7001658c
70011160:	70016260 	.word	0x70016260
70011164:	7001659c 	.word	0x7001659c
70011168:	700165ac 	.word	0x700165ac
        off -= p->len;
7001116c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
7001116e:	895b      	ldrh	r3, [r3, #10]
70011170:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
70011174:	1ad3      	subs	r3, r2, r3
70011176:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
7001117a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
7001117c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
7001117e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
70011180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
70011182:	2200      	movs	r2, #0
70011184:	815a      	strh	r2, [r3, #10]
        p = p->next;
70011186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
70011188:	681b      	ldr	r3, [r3, #0]
7001118a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
7001118c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
7001118e:	895b      	ldrh	r3, [r3, #10]
70011190:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
70011194:	429a      	cmp	r2, r3
70011196:	d8e9      	bhi.n	7001116c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
70011198:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
7001119c:	4619      	mov	r1, r3
7001119e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
700111a0:	f7fc fad6 	bl	7000d750 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
700111a4:	687b      	ldr	r3, [r7, #4]
700111a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700111a8:	4a90      	ldr	r2, [pc, #576]	@ (700113ec <tcp_receive+0x884>)
700111aa:	6013      	str	r3, [r2, #0]
700111ac:	4b90      	ldr	r3, [pc, #576]	@ (700113f0 <tcp_receive+0x888>)
700111ae:	68db      	ldr	r3, [r3, #12]
700111b0:	4a8e      	ldr	r2, [pc, #568]	@ (700113ec <tcp_receive+0x884>)
700111b2:	6812      	ldr	r2, [r2, #0]
700111b4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
700111b6:	e00d      	b.n	700111d4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
700111b8:	4b8c      	ldr	r3, [pc, #560]	@ (700113ec <tcp_receive+0x884>)
700111ba:	681a      	ldr	r2, [r3, #0]
700111bc:	687b      	ldr	r3, [r7, #4]
700111be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700111c0:	1ad3      	subs	r3, r2, r3
700111c2:	2b00      	cmp	r3, #0
700111c4:	da06      	bge.n	700111d4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
700111c6:	687b      	ldr	r3, [r7, #4]
700111c8:	8b5b      	ldrh	r3, [r3, #26]
700111ca:	f043 0302 	orr.w	r3, r3, #2
700111ce:	b29a      	uxth	r2, r3
700111d0:	687b      	ldr	r3, [r7, #4]
700111d2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
700111d4:	4b85      	ldr	r3, [pc, #532]	@ (700113ec <tcp_receive+0x884>)
700111d6:	681a      	ldr	r2, [r3, #0]
700111d8:	687b      	ldr	r3, [r7, #4]
700111da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700111dc:	1ad3      	subs	r3, r2, r3
700111de:	2b00      	cmp	r3, #0
700111e0:	f2c0 8427 	blt.w	70011a32 <tcp_receive+0xeca>
700111e4:	4b81      	ldr	r3, [pc, #516]	@ (700113ec <tcp_receive+0x884>)
700111e6:	681a      	ldr	r2, [r3, #0]
700111e8:	687b      	ldr	r3, [r7, #4]
700111ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700111ec:	6879      	ldr	r1, [r7, #4]
700111ee:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
700111f0:	440b      	add	r3, r1
700111f2:	1ad3      	subs	r3, r2, r3
700111f4:	3301      	adds	r3, #1
700111f6:	2b00      	cmp	r3, #0
700111f8:	f300 841b 	bgt.w	70011a32 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
700111fc:	687b      	ldr	r3, [r7, #4]
700111fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
70011200:	4b7a      	ldr	r3, [pc, #488]	@ (700113ec <tcp_receive+0x884>)
70011202:	681b      	ldr	r3, [r3, #0]
70011204:	429a      	cmp	r2, r3
70011206:	f040 8298 	bne.w	7001173a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
7001120a:	4b79      	ldr	r3, [pc, #484]	@ (700113f0 <tcp_receive+0x888>)
7001120c:	891c      	ldrh	r4, [r3, #8]
7001120e:	4b78      	ldr	r3, [pc, #480]	@ (700113f0 <tcp_receive+0x888>)
70011210:	68db      	ldr	r3, [r3, #12]
70011212:	899b      	ldrh	r3, [r3, #12]
70011214:	b29b      	uxth	r3, r3
70011216:	4618      	mov	r0, r3
70011218:	f7f8 fbda 	bl	700099d0 <lwip_htons>
7001121c:	4603      	mov	r3, r0
7001121e:	b2db      	uxtb	r3, r3
70011220:	f003 0303 	and.w	r3, r3, #3
70011224:	2b00      	cmp	r3, #0
70011226:	d001      	beq.n	7001122c <tcp_receive+0x6c4>
70011228:	2301      	movs	r3, #1
7001122a:	e000      	b.n	7001122e <tcp_receive+0x6c6>
7001122c:	2300      	movs	r3, #0
7001122e:	4423      	add	r3, r4
70011230:	b29a      	uxth	r2, r3
70011232:	4b70      	ldr	r3, [pc, #448]	@ (700113f4 <tcp_receive+0x88c>)
70011234:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
70011236:	687b      	ldr	r3, [r7, #4]
70011238:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
7001123a:	4b6e      	ldr	r3, [pc, #440]	@ (700113f4 <tcp_receive+0x88c>)
7001123c:	881b      	ldrh	r3, [r3, #0]
7001123e:	429a      	cmp	r2, r3
70011240:	d274      	bcs.n	7001132c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
70011242:	4b6b      	ldr	r3, [pc, #428]	@ (700113f0 <tcp_receive+0x888>)
70011244:	68db      	ldr	r3, [r3, #12]
70011246:	899b      	ldrh	r3, [r3, #12]
70011248:	b29b      	uxth	r3, r3
7001124a:	4618      	mov	r0, r3
7001124c:	f7f8 fbc0 	bl	700099d0 <lwip_htons>
70011250:	4603      	mov	r3, r0
70011252:	b2db      	uxtb	r3, r3
70011254:	f003 0301 	and.w	r3, r3, #1
70011258:	2b00      	cmp	r3, #0
7001125a:	d01e      	beq.n	7001129a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
7001125c:	4b64      	ldr	r3, [pc, #400]	@ (700113f0 <tcp_receive+0x888>)
7001125e:	68db      	ldr	r3, [r3, #12]
70011260:	899b      	ldrh	r3, [r3, #12]
70011262:	b29b      	uxth	r3, r3
70011264:	b21b      	sxth	r3, r3
70011266:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
7001126a:	b21c      	sxth	r4, r3
7001126c:	4b60      	ldr	r3, [pc, #384]	@ (700113f0 <tcp_receive+0x888>)
7001126e:	68db      	ldr	r3, [r3, #12]
70011270:	899b      	ldrh	r3, [r3, #12]
70011272:	b29b      	uxth	r3, r3
70011274:	4618      	mov	r0, r3
70011276:	f7f8 fbab 	bl	700099d0 <lwip_htons>
7001127a:	4603      	mov	r3, r0
7001127c:	b2db      	uxtb	r3, r3
7001127e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
70011282:	b29b      	uxth	r3, r3
70011284:	4618      	mov	r0, r3
70011286:	f7f8 fba3 	bl	700099d0 <lwip_htons>
7001128a:	4603      	mov	r3, r0
7001128c:	b21b      	sxth	r3, r3
7001128e:	4323      	orrs	r3, r4
70011290:	b21a      	sxth	r2, r3
70011292:	4b57      	ldr	r3, [pc, #348]	@ (700113f0 <tcp_receive+0x888>)
70011294:	68db      	ldr	r3, [r3, #12]
70011296:	b292      	uxth	r2, r2
70011298:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
7001129a:	687b      	ldr	r3, [r7, #4]
7001129c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
7001129e:	4b54      	ldr	r3, [pc, #336]	@ (700113f0 <tcp_receive+0x888>)
700112a0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
700112a2:	4b53      	ldr	r3, [pc, #332]	@ (700113f0 <tcp_receive+0x888>)
700112a4:	68db      	ldr	r3, [r3, #12]
700112a6:	899b      	ldrh	r3, [r3, #12]
700112a8:	b29b      	uxth	r3, r3
700112aa:	4618      	mov	r0, r3
700112ac:	f7f8 fb90 	bl	700099d0 <lwip_htons>
700112b0:	4603      	mov	r3, r0
700112b2:	b2db      	uxtb	r3, r3
700112b4:	f003 0302 	and.w	r3, r3, #2
700112b8:	2b00      	cmp	r3, #0
700112ba:	d005      	beq.n	700112c8 <tcp_receive+0x760>
            inseg.len -= 1;
700112bc:	4b4c      	ldr	r3, [pc, #304]	@ (700113f0 <tcp_receive+0x888>)
700112be:	891b      	ldrh	r3, [r3, #8]
700112c0:	3b01      	subs	r3, #1
700112c2:	b29a      	uxth	r2, r3
700112c4:	4b4a      	ldr	r3, [pc, #296]	@ (700113f0 <tcp_receive+0x888>)
700112c6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
700112c8:	4b49      	ldr	r3, [pc, #292]	@ (700113f0 <tcp_receive+0x888>)
700112ca:	685b      	ldr	r3, [r3, #4]
700112cc:	4a48      	ldr	r2, [pc, #288]	@ (700113f0 <tcp_receive+0x888>)
700112ce:	8912      	ldrh	r2, [r2, #8]
700112d0:	4611      	mov	r1, r2
700112d2:	4618      	mov	r0, r3
700112d4:	f7fc f93c 	bl	7000d550 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
700112d8:	4b45      	ldr	r3, [pc, #276]	@ (700113f0 <tcp_receive+0x888>)
700112da:	891c      	ldrh	r4, [r3, #8]
700112dc:	4b44      	ldr	r3, [pc, #272]	@ (700113f0 <tcp_receive+0x888>)
700112de:	68db      	ldr	r3, [r3, #12]
700112e0:	899b      	ldrh	r3, [r3, #12]
700112e2:	b29b      	uxth	r3, r3
700112e4:	4618      	mov	r0, r3
700112e6:	f7f8 fb73 	bl	700099d0 <lwip_htons>
700112ea:	4603      	mov	r3, r0
700112ec:	b2db      	uxtb	r3, r3
700112ee:	f003 0303 	and.w	r3, r3, #3
700112f2:	2b00      	cmp	r3, #0
700112f4:	d001      	beq.n	700112fa <tcp_receive+0x792>
700112f6:	2301      	movs	r3, #1
700112f8:	e000      	b.n	700112fc <tcp_receive+0x794>
700112fa:	2300      	movs	r3, #0
700112fc:	4423      	add	r3, r4
700112fe:	b29a      	uxth	r2, r3
70011300:	4b3c      	ldr	r3, [pc, #240]	@ (700113f4 <tcp_receive+0x88c>)
70011302:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
70011304:	4b3b      	ldr	r3, [pc, #236]	@ (700113f4 <tcp_receive+0x88c>)
70011306:	881b      	ldrh	r3, [r3, #0]
70011308:	461a      	mov	r2, r3
7001130a:	4b38      	ldr	r3, [pc, #224]	@ (700113ec <tcp_receive+0x884>)
7001130c:	681b      	ldr	r3, [r3, #0]
7001130e:	441a      	add	r2, r3
70011310:	687b      	ldr	r3, [r7, #4]
70011312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70011314:	6879      	ldr	r1, [r7, #4]
70011316:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
70011318:	440b      	add	r3, r1
7001131a:	429a      	cmp	r2, r3
7001131c:	d006      	beq.n	7001132c <tcp_receive+0x7c4>
7001131e:	4b36      	ldr	r3, [pc, #216]	@ (700113f8 <tcp_receive+0x890>)
70011320:	f240 52cc 	movw	r2, #1484	@ 0x5cc
70011324:	4935      	ldr	r1, [pc, #212]	@ (700113fc <tcp_receive+0x894>)
70011326:	4836      	ldr	r0, [pc, #216]	@ (70011400 <tcp_receive+0x898>)
70011328:	f002 fcfa 	bl	70013d20 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
7001132c:	687b      	ldr	r3, [r7, #4]
7001132e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70011330:	2b00      	cmp	r3, #0
70011332:	f000 80e6 	beq.w	70011502 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
70011336:	4b2e      	ldr	r3, [pc, #184]	@ (700113f0 <tcp_receive+0x888>)
70011338:	68db      	ldr	r3, [r3, #12]
7001133a:	899b      	ldrh	r3, [r3, #12]
7001133c:	b29b      	uxth	r3, r3
7001133e:	4618      	mov	r0, r3
70011340:	f7f8 fb46 	bl	700099d0 <lwip_htons>
70011344:	4603      	mov	r3, r0
70011346:	b2db      	uxtb	r3, r3
70011348:	f003 0301 	and.w	r3, r3, #1
7001134c:	2b00      	cmp	r3, #0
7001134e:	d010      	beq.n	70011372 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
70011350:	e00a      	b.n	70011368 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
70011352:	687b      	ldr	r3, [r7, #4]
70011354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70011356:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
70011358:	687b      	ldr	r3, [r7, #4]
7001135a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7001135c:	681a      	ldr	r2, [r3, #0]
7001135e:	687b      	ldr	r3, [r7, #4]
70011360:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
70011362:	68f8      	ldr	r0, [r7, #12]
70011364:	f7fd fdb0 	bl	7000eec8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
70011368:	687b      	ldr	r3, [r7, #4]
7001136a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7001136c:	2b00      	cmp	r3, #0
7001136e:	d1f0      	bne.n	70011352 <tcp_receive+0x7ea>
70011370:	e0c7      	b.n	70011502 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
70011372:	687b      	ldr	r3, [r7, #4]
70011374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70011376:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
70011378:	e051      	b.n	7001141e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
7001137a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
7001137c:	68db      	ldr	r3, [r3, #12]
7001137e:	899b      	ldrh	r3, [r3, #12]
70011380:	b29b      	uxth	r3, r3
70011382:	4618      	mov	r0, r3
70011384:	f7f8 fb24 	bl	700099d0 <lwip_htons>
70011388:	4603      	mov	r3, r0
7001138a:	b2db      	uxtb	r3, r3
7001138c:	f003 0301 	and.w	r3, r3, #1
70011390:	2b00      	cmp	r3, #0
70011392:	d03c      	beq.n	7001140e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
70011394:	4b16      	ldr	r3, [pc, #88]	@ (700113f0 <tcp_receive+0x888>)
70011396:	68db      	ldr	r3, [r3, #12]
70011398:	899b      	ldrh	r3, [r3, #12]
7001139a:	b29b      	uxth	r3, r3
7001139c:	4618      	mov	r0, r3
7001139e:	f7f8 fb17 	bl	700099d0 <lwip_htons>
700113a2:	4603      	mov	r3, r0
700113a4:	b2db      	uxtb	r3, r3
700113a6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
700113aa:	2b00      	cmp	r3, #0
700113ac:	d12f      	bne.n	7001140e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
700113ae:	4b10      	ldr	r3, [pc, #64]	@ (700113f0 <tcp_receive+0x888>)
700113b0:	68db      	ldr	r3, [r3, #12]
700113b2:	899b      	ldrh	r3, [r3, #12]
700113b4:	b29c      	uxth	r4, r3
700113b6:	2001      	movs	r0, #1
700113b8:	f7f8 fb0a 	bl	700099d0 <lwip_htons>
700113bc:	4603      	mov	r3, r0
700113be:	461a      	mov	r2, r3
700113c0:	4b0b      	ldr	r3, [pc, #44]	@ (700113f0 <tcp_receive+0x888>)
700113c2:	68db      	ldr	r3, [r3, #12]
700113c4:	4322      	orrs	r2, r4
700113c6:	b292      	uxth	r2, r2
700113c8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
700113ca:	4b09      	ldr	r3, [pc, #36]	@ (700113f0 <tcp_receive+0x888>)
700113cc:	891c      	ldrh	r4, [r3, #8]
700113ce:	4b08      	ldr	r3, [pc, #32]	@ (700113f0 <tcp_receive+0x888>)
700113d0:	68db      	ldr	r3, [r3, #12]
700113d2:	899b      	ldrh	r3, [r3, #12]
700113d4:	b29b      	uxth	r3, r3
700113d6:	4618      	mov	r0, r3
700113d8:	f7f8 fafa 	bl	700099d0 <lwip_htons>
700113dc:	4603      	mov	r3, r0
700113de:	b2db      	uxtb	r3, r3
700113e0:	f003 0303 	and.w	r3, r3, #3
700113e4:	2b00      	cmp	r3, #0
700113e6:	d00d      	beq.n	70011404 <tcp_receive+0x89c>
700113e8:	2301      	movs	r3, #1
700113ea:	e00c      	b.n	70011406 <tcp_receive+0x89e>
700113ec:	240084b0 	.word	0x240084b0
700113f0:	24008490 	.word	0x24008490
700113f4:	240084ba 	.word	0x240084ba
700113f8:	700161e8 	.word	0x700161e8
700113fc:	700165bc 	.word	0x700165bc
70011400:	70016260 	.word	0x70016260
70011404:	2300      	movs	r3, #0
70011406:	4423      	add	r3, r4
70011408:	b29a      	uxth	r2, r3
7001140a:	4b98      	ldr	r3, [pc, #608]	@ (7001166c <tcp_receive+0xb04>)
7001140c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
7001140e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70011410:	613b      	str	r3, [r7, #16]
              next = next->next;
70011412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70011414:	681b      	ldr	r3, [r3, #0]
70011416:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
70011418:	6938      	ldr	r0, [r7, #16]
7001141a:	f7fd fd55 	bl	7000eec8 <tcp_seg_free>
            while (next &&
7001141e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70011420:	2b00      	cmp	r3, #0
70011422:	d00e      	beq.n	70011442 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
70011424:	4b91      	ldr	r3, [pc, #580]	@ (7001166c <tcp_receive+0xb04>)
70011426:	881b      	ldrh	r3, [r3, #0]
70011428:	461a      	mov	r2, r3
7001142a:	4b91      	ldr	r3, [pc, #580]	@ (70011670 <tcp_receive+0xb08>)
7001142c:	681b      	ldr	r3, [r3, #0]
7001142e:	441a      	add	r2, r3
70011430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70011432:	68db      	ldr	r3, [r3, #12]
70011434:	685b      	ldr	r3, [r3, #4]
70011436:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
70011438:	8909      	ldrh	r1, [r1, #8]
7001143a:	440b      	add	r3, r1
7001143c:	1ad3      	subs	r3, r2, r3
            while (next &&
7001143e:	2b00      	cmp	r3, #0
70011440:	da9b      	bge.n	7001137a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
70011442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70011444:	2b00      	cmp	r3, #0
70011446:	d059      	beq.n	700114fc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
70011448:	4b88      	ldr	r3, [pc, #544]	@ (7001166c <tcp_receive+0xb04>)
7001144a:	881b      	ldrh	r3, [r3, #0]
7001144c:	461a      	mov	r2, r3
7001144e:	4b88      	ldr	r3, [pc, #544]	@ (70011670 <tcp_receive+0xb08>)
70011450:	681b      	ldr	r3, [r3, #0]
70011452:	441a      	add	r2, r3
70011454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70011456:	68db      	ldr	r3, [r3, #12]
70011458:	685b      	ldr	r3, [r3, #4]
7001145a:	1ad3      	subs	r3, r2, r3
            if (next &&
7001145c:	2b00      	cmp	r3, #0
7001145e:	dd4d      	ble.n	700114fc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
70011460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
70011462:	68db      	ldr	r3, [r3, #12]
70011464:	685b      	ldr	r3, [r3, #4]
70011466:	b29a      	uxth	r2, r3
70011468:	4b81      	ldr	r3, [pc, #516]	@ (70011670 <tcp_receive+0xb08>)
7001146a:	681b      	ldr	r3, [r3, #0]
7001146c:	b29b      	uxth	r3, r3
7001146e:	1ad3      	subs	r3, r2, r3
70011470:	b29a      	uxth	r2, r3
70011472:	4b80      	ldr	r3, [pc, #512]	@ (70011674 <tcp_receive+0xb0c>)
70011474:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
70011476:	4b7f      	ldr	r3, [pc, #508]	@ (70011674 <tcp_receive+0xb0c>)
70011478:	68db      	ldr	r3, [r3, #12]
7001147a:	899b      	ldrh	r3, [r3, #12]
7001147c:	b29b      	uxth	r3, r3
7001147e:	4618      	mov	r0, r3
70011480:	f7f8 faa6 	bl	700099d0 <lwip_htons>
70011484:	4603      	mov	r3, r0
70011486:	b2db      	uxtb	r3, r3
70011488:	f003 0302 	and.w	r3, r3, #2
7001148c:	2b00      	cmp	r3, #0
7001148e:	d005      	beq.n	7001149c <tcp_receive+0x934>
                inseg.len -= 1;
70011490:	4b78      	ldr	r3, [pc, #480]	@ (70011674 <tcp_receive+0xb0c>)
70011492:	891b      	ldrh	r3, [r3, #8]
70011494:	3b01      	subs	r3, #1
70011496:	b29a      	uxth	r2, r3
70011498:	4b76      	ldr	r3, [pc, #472]	@ (70011674 <tcp_receive+0xb0c>)
7001149a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
7001149c:	4b75      	ldr	r3, [pc, #468]	@ (70011674 <tcp_receive+0xb0c>)
7001149e:	685b      	ldr	r3, [r3, #4]
700114a0:	4a74      	ldr	r2, [pc, #464]	@ (70011674 <tcp_receive+0xb0c>)
700114a2:	8912      	ldrh	r2, [r2, #8]
700114a4:	4611      	mov	r1, r2
700114a6:	4618      	mov	r0, r3
700114a8:	f7fc f852 	bl	7000d550 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
700114ac:	4b71      	ldr	r3, [pc, #452]	@ (70011674 <tcp_receive+0xb0c>)
700114ae:	891c      	ldrh	r4, [r3, #8]
700114b0:	4b70      	ldr	r3, [pc, #448]	@ (70011674 <tcp_receive+0xb0c>)
700114b2:	68db      	ldr	r3, [r3, #12]
700114b4:	899b      	ldrh	r3, [r3, #12]
700114b6:	b29b      	uxth	r3, r3
700114b8:	4618      	mov	r0, r3
700114ba:	f7f8 fa89 	bl	700099d0 <lwip_htons>
700114be:	4603      	mov	r3, r0
700114c0:	b2db      	uxtb	r3, r3
700114c2:	f003 0303 	and.w	r3, r3, #3
700114c6:	2b00      	cmp	r3, #0
700114c8:	d001      	beq.n	700114ce <tcp_receive+0x966>
700114ca:	2301      	movs	r3, #1
700114cc:	e000      	b.n	700114d0 <tcp_receive+0x968>
700114ce:	2300      	movs	r3, #0
700114d0:	4423      	add	r3, r4
700114d2:	b29a      	uxth	r2, r3
700114d4:	4b65      	ldr	r3, [pc, #404]	@ (7001166c <tcp_receive+0xb04>)
700114d6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
700114d8:	4b64      	ldr	r3, [pc, #400]	@ (7001166c <tcp_receive+0xb04>)
700114da:	881b      	ldrh	r3, [r3, #0]
700114dc:	461a      	mov	r2, r3
700114de:	4b64      	ldr	r3, [pc, #400]	@ (70011670 <tcp_receive+0xb08>)
700114e0:	681b      	ldr	r3, [r3, #0]
700114e2:	441a      	add	r2, r3
700114e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
700114e6:	68db      	ldr	r3, [r3, #12]
700114e8:	685b      	ldr	r3, [r3, #4]
700114ea:	429a      	cmp	r2, r3
700114ec:	d006      	beq.n	700114fc <tcp_receive+0x994>
700114ee:	4b62      	ldr	r3, [pc, #392]	@ (70011678 <tcp_receive+0xb10>)
700114f0:	f240 52fd 	movw	r2, #1533	@ 0x5fd
700114f4:	4961      	ldr	r1, [pc, #388]	@ (7001167c <tcp_receive+0xb14>)
700114f6:	4862      	ldr	r0, [pc, #392]	@ (70011680 <tcp_receive+0xb18>)
700114f8:	f002 fc12 	bl	70013d20 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
700114fc:	687b      	ldr	r3, [r7, #4]
700114fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
70011500:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
70011502:	4b5a      	ldr	r3, [pc, #360]	@ (7001166c <tcp_receive+0xb04>)
70011504:	881b      	ldrh	r3, [r3, #0]
70011506:	461a      	mov	r2, r3
70011508:	4b59      	ldr	r3, [pc, #356]	@ (70011670 <tcp_receive+0xb08>)
7001150a:	681b      	ldr	r3, [r3, #0]
7001150c:	441a      	add	r2, r3
7001150e:	687b      	ldr	r3, [r7, #4]
70011510:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
70011512:	687b      	ldr	r3, [r7, #4]
70011514:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
70011516:	4b55      	ldr	r3, [pc, #340]	@ (7001166c <tcp_receive+0xb04>)
70011518:	881b      	ldrh	r3, [r3, #0]
7001151a:	429a      	cmp	r2, r3
7001151c:	d206      	bcs.n	7001152c <tcp_receive+0x9c4>
7001151e:	4b56      	ldr	r3, [pc, #344]	@ (70011678 <tcp_receive+0xb10>)
70011520:	f44f 62c1 	mov.w	r2, #1544	@ 0x608
70011524:	4957      	ldr	r1, [pc, #348]	@ (70011684 <tcp_receive+0xb1c>)
70011526:	4856      	ldr	r0, [pc, #344]	@ (70011680 <tcp_receive+0xb18>)
70011528:	f002 fbfa 	bl	70013d20 <iprintf>
        pcb->rcv_wnd -= tcplen;
7001152c:	687b      	ldr	r3, [r7, #4]
7001152e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
70011530:	4b4e      	ldr	r3, [pc, #312]	@ (7001166c <tcp_receive+0xb04>)
70011532:	881b      	ldrh	r3, [r3, #0]
70011534:	1ad3      	subs	r3, r2, r3
70011536:	b29a      	uxth	r2, r3
70011538:	687b      	ldr	r3, [r7, #4]
7001153a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
7001153c:	6878      	ldr	r0, [r7, #4]
7001153e:	f7fc fff9 	bl	7000e534 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
70011542:	4b4c      	ldr	r3, [pc, #304]	@ (70011674 <tcp_receive+0xb0c>)
70011544:	685b      	ldr	r3, [r3, #4]
70011546:	891b      	ldrh	r3, [r3, #8]
70011548:	2b00      	cmp	r3, #0
7001154a:	d006      	beq.n	7001155a <tcp_receive+0x9f2>
          recv_data = inseg.p;
7001154c:	4b49      	ldr	r3, [pc, #292]	@ (70011674 <tcp_receive+0xb0c>)
7001154e:	685b      	ldr	r3, [r3, #4]
70011550:	4a4d      	ldr	r2, [pc, #308]	@ (70011688 <tcp_receive+0xb20>)
70011552:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
70011554:	4b47      	ldr	r3, [pc, #284]	@ (70011674 <tcp_receive+0xb0c>)
70011556:	2200      	movs	r2, #0
70011558:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
7001155a:	4b46      	ldr	r3, [pc, #280]	@ (70011674 <tcp_receive+0xb0c>)
7001155c:	68db      	ldr	r3, [r3, #12]
7001155e:	899b      	ldrh	r3, [r3, #12]
70011560:	b29b      	uxth	r3, r3
70011562:	4618      	mov	r0, r3
70011564:	f7f8 fa34 	bl	700099d0 <lwip_htons>
70011568:	4603      	mov	r3, r0
7001156a:	b2db      	uxtb	r3, r3
7001156c:	f003 0301 	and.w	r3, r3, #1
70011570:	2b00      	cmp	r3, #0
70011572:	f000 80b8 	beq.w	700116e6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
70011576:	4b45      	ldr	r3, [pc, #276]	@ (7001168c <tcp_receive+0xb24>)
70011578:	781b      	ldrb	r3, [r3, #0]
7001157a:	f043 0320 	orr.w	r3, r3, #32
7001157e:	b2da      	uxtb	r2, r3
70011580:	4b42      	ldr	r3, [pc, #264]	@ (7001168c <tcp_receive+0xb24>)
70011582:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
70011584:	e0af      	b.n	700116e6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
70011586:	687b      	ldr	r3, [r7, #4]
70011588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7001158a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
7001158c:	687b      	ldr	r3, [r7, #4]
7001158e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70011590:	68db      	ldr	r3, [r3, #12]
70011592:	685b      	ldr	r3, [r3, #4]
70011594:	4a36      	ldr	r2, [pc, #216]	@ (70011670 <tcp_receive+0xb08>)
70011596:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
70011598:	68bb      	ldr	r3, [r7, #8]
7001159a:	891b      	ldrh	r3, [r3, #8]
7001159c:	461c      	mov	r4, r3
7001159e:	68bb      	ldr	r3, [r7, #8]
700115a0:	68db      	ldr	r3, [r3, #12]
700115a2:	899b      	ldrh	r3, [r3, #12]
700115a4:	b29b      	uxth	r3, r3
700115a6:	4618      	mov	r0, r3
700115a8:	f7f8 fa12 	bl	700099d0 <lwip_htons>
700115ac:	4603      	mov	r3, r0
700115ae:	b2db      	uxtb	r3, r3
700115b0:	f003 0303 	and.w	r3, r3, #3
700115b4:	2b00      	cmp	r3, #0
700115b6:	d001      	beq.n	700115bc <tcp_receive+0xa54>
700115b8:	2301      	movs	r3, #1
700115ba:	e000      	b.n	700115be <tcp_receive+0xa56>
700115bc:	2300      	movs	r3, #0
700115be:	191a      	adds	r2, r3, r4
700115c0:	687b      	ldr	r3, [r7, #4]
700115c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700115c4:	441a      	add	r2, r3
700115c6:	687b      	ldr	r3, [r7, #4]
700115c8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
700115ca:	687b      	ldr	r3, [r7, #4]
700115cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
700115ce:	461c      	mov	r4, r3
700115d0:	68bb      	ldr	r3, [r7, #8]
700115d2:	891b      	ldrh	r3, [r3, #8]
700115d4:	461d      	mov	r5, r3
700115d6:	68bb      	ldr	r3, [r7, #8]
700115d8:	68db      	ldr	r3, [r3, #12]
700115da:	899b      	ldrh	r3, [r3, #12]
700115dc:	b29b      	uxth	r3, r3
700115de:	4618      	mov	r0, r3
700115e0:	f7f8 f9f6 	bl	700099d0 <lwip_htons>
700115e4:	4603      	mov	r3, r0
700115e6:	b2db      	uxtb	r3, r3
700115e8:	f003 0303 	and.w	r3, r3, #3
700115ec:	2b00      	cmp	r3, #0
700115ee:	d001      	beq.n	700115f4 <tcp_receive+0xa8c>
700115f0:	2301      	movs	r3, #1
700115f2:	e000      	b.n	700115f6 <tcp_receive+0xa8e>
700115f4:	2300      	movs	r3, #0
700115f6:	442b      	add	r3, r5
700115f8:	429c      	cmp	r4, r3
700115fa:	d206      	bcs.n	7001160a <tcp_receive+0xaa2>
700115fc:	4b1e      	ldr	r3, [pc, #120]	@ (70011678 <tcp_receive+0xb10>)
700115fe:	f240 622c 	movw	r2, #1580	@ 0x62c
70011602:	4923      	ldr	r1, [pc, #140]	@ (70011690 <tcp_receive+0xb28>)
70011604:	481e      	ldr	r0, [pc, #120]	@ (70011680 <tcp_receive+0xb18>)
70011606:	f002 fb8b 	bl	70013d20 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
7001160a:	68bb      	ldr	r3, [r7, #8]
7001160c:	891b      	ldrh	r3, [r3, #8]
7001160e:	461c      	mov	r4, r3
70011610:	68bb      	ldr	r3, [r7, #8]
70011612:	68db      	ldr	r3, [r3, #12]
70011614:	899b      	ldrh	r3, [r3, #12]
70011616:	b29b      	uxth	r3, r3
70011618:	4618      	mov	r0, r3
7001161a:	f7f8 f9d9 	bl	700099d0 <lwip_htons>
7001161e:	4603      	mov	r3, r0
70011620:	b2db      	uxtb	r3, r3
70011622:	f003 0303 	and.w	r3, r3, #3
70011626:	2b00      	cmp	r3, #0
70011628:	d001      	beq.n	7001162e <tcp_receive+0xac6>
7001162a:	2301      	movs	r3, #1
7001162c:	e000      	b.n	70011630 <tcp_receive+0xac8>
7001162e:	2300      	movs	r3, #0
70011630:	1919      	adds	r1, r3, r4
70011632:	687b      	ldr	r3, [r7, #4]
70011634:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
70011636:	b28b      	uxth	r3, r1
70011638:	1ad3      	subs	r3, r2, r3
7001163a:	b29a      	uxth	r2, r3
7001163c:	687b      	ldr	r3, [r7, #4]
7001163e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
70011640:	6878      	ldr	r0, [r7, #4]
70011642:	f7fc ff77 	bl	7000e534 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
70011646:	68bb      	ldr	r3, [r7, #8]
70011648:	685b      	ldr	r3, [r3, #4]
7001164a:	891b      	ldrh	r3, [r3, #8]
7001164c:	2b00      	cmp	r3, #0
7001164e:	d028      	beq.n	700116a2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
70011650:	4b0d      	ldr	r3, [pc, #52]	@ (70011688 <tcp_receive+0xb20>)
70011652:	681b      	ldr	r3, [r3, #0]
70011654:	2b00      	cmp	r3, #0
70011656:	d01d      	beq.n	70011694 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
70011658:	4b0b      	ldr	r3, [pc, #44]	@ (70011688 <tcp_receive+0xb20>)
7001165a:	681a      	ldr	r2, [r3, #0]
7001165c:	68bb      	ldr	r3, [r7, #8]
7001165e:	685b      	ldr	r3, [r3, #4]
70011660:	4619      	mov	r1, r3
70011662:	4610      	mov	r0, r2
70011664:	f7fc f9be 	bl	7000d9e4 <pbuf_cat>
70011668:	e018      	b.n	7001169c <tcp_receive+0xb34>
7001166a:	bf00      	nop
7001166c:	240084ba 	.word	0x240084ba
70011670:	240084b0 	.word	0x240084b0
70011674:	24008490 	.word	0x24008490
70011678:	700161e8 	.word	0x700161e8
7001167c:	700165f4 	.word	0x700165f4
70011680:	70016260 	.word	0x70016260
70011684:	70016630 	.word	0x70016630
70011688:	240084c0 	.word	0x240084c0
7001168c:	240084bd 	.word	0x240084bd
70011690:	70016650 	.word	0x70016650
            } else {
              recv_data = cseg->p;
70011694:	68bb      	ldr	r3, [r7, #8]
70011696:	685b      	ldr	r3, [r3, #4]
70011698:	4a70      	ldr	r2, [pc, #448]	@ (7001185c <tcp_receive+0xcf4>)
7001169a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
7001169c:	68bb      	ldr	r3, [r7, #8]
7001169e:	2200      	movs	r2, #0
700116a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
700116a2:	68bb      	ldr	r3, [r7, #8]
700116a4:	68db      	ldr	r3, [r3, #12]
700116a6:	899b      	ldrh	r3, [r3, #12]
700116a8:	b29b      	uxth	r3, r3
700116aa:	4618      	mov	r0, r3
700116ac:	f7f8 f990 	bl	700099d0 <lwip_htons>
700116b0:	4603      	mov	r3, r0
700116b2:	b2db      	uxtb	r3, r3
700116b4:	f003 0301 	and.w	r3, r3, #1
700116b8:	2b00      	cmp	r3, #0
700116ba:	d00d      	beq.n	700116d8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
700116bc:	4b68      	ldr	r3, [pc, #416]	@ (70011860 <tcp_receive+0xcf8>)
700116be:	781b      	ldrb	r3, [r3, #0]
700116c0:	f043 0320 	orr.w	r3, r3, #32
700116c4:	b2da      	uxtb	r2, r3
700116c6:	4b66      	ldr	r3, [pc, #408]	@ (70011860 <tcp_receive+0xcf8>)
700116c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
700116ca:	687b      	ldr	r3, [r7, #4]
700116cc:	7d1b      	ldrb	r3, [r3, #20]
700116ce:	2b04      	cmp	r3, #4
700116d0:	d102      	bne.n	700116d8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
700116d2:	687b      	ldr	r3, [r7, #4]
700116d4:	2207      	movs	r2, #7
700116d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
700116d8:	68bb      	ldr	r3, [r7, #8]
700116da:	681a      	ldr	r2, [r3, #0]
700116dc:	687b      	ldr	r3, [r7, #4]
700116de:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
700116e0:	68b8      	ldr	r0, [r7, #8]
700116e2:	f7fd fbf1 	bl	7000eec8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
700116e6:	687b      	ldr	r3, [r7, #4]
700116e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
700116ea:	2b00      	cmp	r3, #0
700116ec:	d008      	beq.n	70011700 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
700116ee:	687b      	ldr	r3, [r7, #4]
700116f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
700116f2:	68db      	ldr	r3, [r3, #12]
700116f4:	685a      	ldr	r2, [r3, #4]
700116f6:	687b      	ldr	r3, [r7, #4]
700116f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
700116fa:	429a      	cmp	r2, r3
700116fc:	f43f af43 	beq.w	70011586 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
70011700:	687b      	ldr	r3, [r7, #4]
70011702:	8b5b      	ldrh	r3, [r3, #26]
70011704:	f003 0301 	and.w	r3, r3, #1
70011708:	2b00      	cmp	r3, #0
7001170a:	d00e      	beq.n	7001172a <tcp_receive+0xbc2>
7001170c:	687b      	ldr	r3, [r7, #4]
7001170e:	8b5b      	ldrh	r3, [r3, #26]
70011710:	f023 0301 	bic.w	r3, r3, #1
70011714:	b29a      	uxth	r2, r3
70011716:	687b      	ldr	r3, [r7, #4]
70011718:	835a      	strh	r2, [r3, #26]
7001171a:	687b      	ldr	r3, [r7, #4]
7001171c:	8b5b      	ldrh	r3, [r3, #26]
7001171e:	f043 0302 	orr.w	r3, r3, #2
70011722:	b29a      	uxth	r2, r3
70011724:	687b      	ldr	r3, [r7, #4]
70011726:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
70011728:	e187      	b.n	70011a3a <tcp_receive+0xed2>
        tcp_ack(pcb);
7001172a:	687b      	ldr	r3, [r7, #4]
7001172c:	8b5b      	ldrh	r3, [r3, #26]
7001172e:	f043 0301 	orr.w	r3, r3, #1
70011732:	b29a      	uxth	r2, r3
70011734:	687b      	ldr	r3, [r7, #4]
70011736:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
70011738:	e17f      	b.n	70011a3a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
7001173a:	687b      	ldr	r3, [r7, #4]
7001173c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7001173e:	2b00      	cmp	r3, #0
70011740:	d106      	bne.n	70011750 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
70011742:	4848      	ldr	r0, [pc, #288]	@ (70011864 <tcp_receive+0xcfc>)
70011744:	f7fd fbd8 	bl	7000eef8 <tcp_seg_copy>
70011748:	4602      	mov	r2, r0
7001174a:	687b      	ldr	r3, [r7, #4]
7001174c:	675a      	str	r2, [r3, #116]	@ 0x74
7001174e:	e16c      	b.n	70011a2a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
70011750:	2300      	movs	r3, #0
70011752:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
70011754:	687b      	ldr	r3, [r7, #4]
70011756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70011758:	63bb      	str	r3, [r7, #56]	@ 0x38
7001175a:	e156      	b.n	70011a0a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
7001175c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7001175e:	68db      	ldr	r3, [r3, #12]
70011760:	685a      	ldr	r2, [r3, #4]
70011762:	4b41      	ldr	r3, [pc, #260]	@ (70011868 <tcp_receive+0xd00>)
70011764:	681b      	ldr	r3, [r3, #0]
70011766:	429a      	cmp	r2, r3
70011768:	d11d      	bne.n	700117a6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
7001176a:	4b3e      	ldr	r3, [pc, #248]	@ (70011864 <tcp_receive+0xcfc>)
7001176c:	891a      	ldrh	r2, [r3, #8]
7001176e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70011770:	891b      	ldrh	r3, [r3, #8]
70011772:	429a      	cmp	r2, r3
70011774:	f240 814e 	bls.w	70011a14 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
70011778:	483a      	ldr	r0, [pc, #232]	@ (70011864 <tcp_receive+0xcfc>)
7001177a:	f7fd fbbd 	bl	7000eef8 <tcp_seg_copy>
7001177e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
70011780:	697b      	ldr	r3, [r7, #20]
70011782:	2b00      	cmp	r3, #0
70011784:	f000 8148 	beq.w	70011a18 <tcp_receive+0xeb0>
                  if (prev != NULL) {
70011788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7001178a:	2b00      	cmp	r3, #0
7001178c:	d003      	beq.n	70011796 <tcp_receive+0xc2e>
                    prev->next = cseg;
7001178e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70011790:	697a      	ldr	r2, [r7, #20]
70011792:	601a      	str	r2, [r3, #0]
70011794:	e002      	b.n	7001179c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
70011796:	687b      	ldr	r3, [r7, #4]
70011798:	697a      	ldr	r2, [r7, #20]
7001179a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
7001179c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
7001179e:	6978      	ldr	r0, [r7, #20]
700117a0:	f7ff f8de 	bl	70010960 <tcp_oos_insert_segment>
                }
                break;
700117a4:	e138      	b.n	70011a18 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
700117a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
700117a8:	2b00      	cmp	r3, #0
700117aa:	d117      	bne.n	700117dc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
700117ac:	4b2e      	ldr	r3, [pc, #184]	@ (70011868 <tcp_receive+0xd00>)
700117ae:	681a      	ldr	r2, [r3, #0]
700117b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700117b2:	68db      	ldr	r3, [r3, #12]
700117b4:	685b      	ldr	r3, [r3, #4]
700117b6:	1ad3      	subs	r3, r2, r3
700117b8:	2b00      	cmp	r3, #0
700117ba:	da57      	bge.n	7001186c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
700117bc:	4829      	ldr	r0, [pc, #164]	@ (70011864 <tcp_receive+0xcfc>)
700117be:	f7fd fb9b 	bl	7000eef8 <tcp_seg_copy>
700117c2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
700117c4:	69bb      	ldr	r3, [r7, #24]
700117c6:	2b00      	cmp	r3, #0
700117c8:	f000 8128 	beq.w	70011a1c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
700117cc:	687b      	ldr	r3, [r7, #4]
700117ce:	69ba      	ldr	r2, [r7, #24]
700117d0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
700117d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
700117d4:	69b8      	ldr	r0, [r7, #24]
700117d6:	f7ff f8c3 	bl	70010960 <tcp_oos_insert_segment>
                  }
                  break;
700117da:	e11f      	b.n	70011a1c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
700117dc:	4b22      	ldr	r3, [pc, #136]	@ (70011868 <tcp_receive+0xd00>)
700117de:	681a      	ldr	r2, [r3, #0]
700117e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
700117e2:	68db      	ldr	r3, [r3, #12]
700117e4:	685b      	ldr	r3, [r3, #4]
700117e6:	1ad3      	subs	r3, r2, r3
700117e8:	3b01      	subs	r3, #1
700117ea:	2b00      	cmp	r3, #0
700117ec:	db3e      	blt.n	7001186c <tcp_receive+0xd04>
700117ee:	4b1e      	ldr	r3, [pc, #120]	@ (70011868 <tcp_receive+0xd00>)
700117f0:	681a      	ldr	r2, [r3, #0]
700117f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700117f4:	68db      	ldr	r3, [r3, #12]
700117f6:	685b      	ldr	r3, [r3, #4]
700117f8:	1ad3      	subs	r3, r2, r3
700117fa:	3301      	adds	r3, #1
700117fc:	2b00      	cmp	r3, #0
700117fe:	dc35      	bgt.n	7001186c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
70011800:	4818      	ldr	r0, [pc, #96]	@ (70011864 <tcp_receive+0xcfc>)
70011802:	f7fd fb79 	bl	7000eef8 <tcp_seg_copy>
70011806:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
70011808:	69fb      	ldr	r3, [r7, #28]
7001180a:	2b00      	cmp	r3, #0
7001180c:	f000 8108 	beq.w	70011a20 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
70011810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70011812:	68db      	ldr	r3, [r3, #12]
70011814:	685b      	ldr	r3, [r3, #4]
70011816:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
70011818:	8912      	ldrh	r2, [r2, #8]
7001181a:	441a      	add	r2, r3
7001181c:	4b12      	ldr	r3, [pc, #72]	@ (70011868 <tcp_receive+0xd00>)
7001181e:	681b      	ldr	r3, [r3, #0]
70011820:	1ad3      	subs	r3, r2, r3
70011822:	2b00      	cmp	r3, #0
70011824:	dd12      	ble.n	7001184c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
70011826:	4b10      	ldr	r3, [pc, #64]	@ (70011868 <tcp_receive+0xd00>)
70011828:	681b      	ldr	r3, [r3, #0]
7001182a:	b29a      	uxth	r2, r3
7001182c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7001182e:	68db      	ldr	r3, [r3, #12]
70011830:	685b      	ldr	r3, [r3, #4]
70011832:	b29b      	uxth	r3, r3
70011834:	1ad3      	subs	r3, r2, r3
70011836:	b29a      	uxth	r2, r3
70011838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7001183a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
7001183c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7001183e:	685a      	ldr	r2, [r3, #4]
70011840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
70011842:	891b      	ldrh	r3, [r3, #8]
70011844:	4619      	mov	r1, r3
70011846:	4610      	mov	r0, r2
70011848:	f7fb fe82 	bl	7000d550 <pbuf_realloc>
                    }
                    prev->next = cseg;
7001184c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7001184e:	69fa      	ldr	r2, [r7, #28]
70011850:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
70011852:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
70011854:	69f8      	ldr	r0, [r7, #28]
70011856:	f7ff f883 	bl	70010960 <tcp_oos_insert_segment>
                  }
                  break;
7001185a:	e0e1      	b.n	70011a20 <tcp_receive+0xeb8>
7001185c:	240084c0 	.word	0x240084c0
70011860:	240084bd 	.word	0x240084bd
70011864:	24008490 	.word	0x24008490
70011868:	240084b0 	.word	0x240084b0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
7001186c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7001186e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
70011870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70011872:	681b      	ldr	r3, [r3, #0]
70011874:	2b00      	cmp	r3, #0
70011876:	f040 80c5 	bne.w	70011a04 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
7001187a:	4b7f      	ldr	r3, [pc, #508]	@ (70011a78 <tcp_receive+0xf10>)
7001187c:	681a      	ldr	r2, [r3, #0]
7001187e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70011880:	68db      	ldr	r3, [r3, #12]
70011882:	685b      	ldr	r3, [r3, #4]
70011884:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
70011886:	2b00      	cmp	r3, #0
70011888:	f340 80bc 	ble.w	70011a04 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
7001188c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7001188e:	68db      	ldr	r3, [r3, #12]
70011890:	899b      	ldrh	r3, [r3, #12]
70011892:	b29b      	uxth	r3, r3
70011894:	4618      	mov	r0, r3
70011896:	f7f8 f89b 	bl	700099d0 <lwip_htons>
7001189a:	4603      	mov	r3, r0
7001189c:	b2db      	uxtb	r3, r3
7001189e:	f003 0301 	and.w	r3, r3, #1
700118a2:	2b00      	cmp	r3, #0
700118a4:	f040 80be 	bne.w	70011a24 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
700118a8:	4874      	ldr	r0, [pc, #464]	@ (70011a7c <tcp_receive+0xf14>)
700118aa:	f7fd fb25 	bl	7000eef8 <tcp_seg_copy>
700118ae:	4602      	mov	r2, r0
700118b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700118b2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
700118b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700118b6:	681b      	ldr	r3, [r3, #0]
700118b8:	2b00      	cmp	r3, #0
700118ba:	f000 80b5 	beq.w	70011a28 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
700118be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700118c0:	68db      	ldr	r3, [r3, #12]
700118c2:	685b      	ldr	r3, [r3, #4]
700118c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
700118c6:	8912      	ldrh	r2, [r2, #8]
700118c8:	441a      	add	r2, r3
700118ca:	4b6b      	ldr	r3, [pc, #428]	@ (70011a78 <tcp_receive+0xf10>)
700118cc:	681b      	ldr	r3, [r3, #0]
700118ce:	1ad3      	subs	r3, r2, r3
700118d0:	2b00      	cmp	r3, #0
700118d2:	dd12      	ble.n	700118fa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
700118d4:	4b68      	ldr	r3, [pc, #416]	@ (70011a78 <tcp_receive+0xf10>)
700118d6:	681b      	ldr	r3, [r3, #0]
700118d8:	b29a      	uxth	r2, r3
700118da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700118dc:	68db      	ldr	r3, [r3, #12]
700118de:	685b      	ldr	r3, [r3, #4]
700118e0:	b29b      	uxth	r3, r3
700118e2:	1ad3      	subs	r3, r2, r3
700118e4:	b29a      	uxth	r2, r3
700118e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700118e8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
700118ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700118ec:	685a      	ldr	r2, [r3, #4]
700118ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700118f0:	891b      	ldrh	r3, [r3, #8]
700118f2:	4619      	mov	r1, r3
700118f4:	4610      	mov	r0, r2
700118f6:	f7fb fe2b 	bl	7000d550 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
700118fa:	4b61      	ldr	r3, [pc, #388]	@ (70011a80 <tcp_receive+0xf18>)
700118fc:	881b      	ldrh	r3, [r3, #0]
700118fe:	461a      	mov	r2, r3
70011900:	4b5d      	ldr	r3, [pc, #372]	@ (70011a78 <tcp_receive+0xf10>)
70011902:	681b      	ldr	r3, [r3, #0]
70011904:	441a      	add	r2, r3
70011906:	687b      	ldr	r3, [r7, #4]
70011908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
7001190a:	6879      	ldr	r1, [r7, #4]
7001190c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
7001190e:	440b      	add	r3, r1
70011910:	1ad3      	subs	r3, r2, r3
70011912:	2b00      	cmp	r3, #0
70011914:	f340 8088 	ble.w	70011a28 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
70011918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7001191a:	681b      	ldr	r3, [r3, #0]
7001191c:	68db      	ldr	r3, [r3, #12]
7001191e:	899b      	ldrh	r3, [r3, #12]
70011920:	b29b      	uxth	r3, r3
70011922:	4618      	mov	r0, r3
70011924:	f7f8 f854 	bl	700099d0 <lwip_htons>
70011928:	4603      	mov	r3, r0
7001192a:	b2db      	uxtb	r3, r3
7001192c:	f003 0301 	and.w	r3, r3, #1
70011930:	2b00      	cmp	r3, #0
70011932:	d021      	beq.n	70011978 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
70011934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70011936:	681b      	ldr	r3, [r3, #0]
70011938:	68db      	ldr	r3, [r3, #12]
7001193a:	899b      	ldrh	r3, [r3, #12]
7001193c:	b29b      	uxth	r3, r3
7001193e:	b21b      	sxth	r3, r3
70011940:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
70011944:	b21c      	sxth	r4, r3
70011946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70011948:	681b      	ldr	r3, [r3, #0]
7001194a:	68db      	ldr	r3, [r3, #12]
7001194c:	899b      	ldrh	r3, [r3, #12]
7001194e:	b29b      	uxth	r3, r3
70011950:	4618      	mov	r0, r3
70011952:	f7f8 f83d 	bl	700099d0 <lwip_htons>
70011956:	4603      	mov	r3, r0
70011958:	b2db      	uxtb	r3, r3
7001195a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
7001195e:	b29b      	uxth	r3, r3
70011960:	4618      	mov	r0, r3
70011962:	f7f8 f835 	bl	700099d0 <lwip_htons>
70011966:	4603      	mov	r3, r0
70011968:	b21b      	sxth	r3, r3
7001196a:	4323      	orrs	r3, r4
7001196c:	b21a      	sxth	r2, r3
7001196e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70011970:	681b      	ldr	r3, [r3, #0]
70011972:	68db      	ldr	r3, [r3, #12]
70011974:	b292      	uxth	r2, r2
70011976:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
70011978:	687b      	ldr	r3, [r7, #4]
7001197a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
7001197c:	b29a      	uxth	r2, r3
7001197e:	687b      	ldr	r3, [r7, #4]
70011980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
70011982:	4413      	add	r3, r2
70011984:	b299      	uxth	r1, r3
70011986:	4b3c      	ldr	r3, [pc, #240]	@ (70011a78 <tcp_receive+0xf10>)
70011988:	681b      	ldr	r3, [r3, #0]
7001198a:	b29a      	uxth	r2, r3
7001198c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7001198e:	681b      	ldr	r3, [r3, #0]
70011990:	1a8a      	subs	r2, r1, r2
70011992:	b292      	uxth	r2, r2
70011994:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
70011996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70011998:	681b      	ldr	r3, [r3, #0]
7001199a:	685a      	ldr	r2, [r3, #4]
7001199c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7001199e:	681b      	ldr	r3, [r3, #0]
700119a0:	891b      	ldrh	r3, [r3, #8]
700119a2:	4619      	mov	r1, r3
700119a4:	4610      	mov	r0, r2
700119a6:	f7fb fdd3 	bl	7000d550 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
700119aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700119ac:	681b      	ldr	r3, [r3, #0]
700119ae:	891c      	ldrh	r4, [r3, #8]
700119b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
700119b2:	681b      	ldr	r3, [r3, #0]
700119b4:	68db      	ldr	r3, [r3, #12]
700119b6:	899b      	ldrh	r3, [r3, #12]
700119b8:	b29b      	uxth	r3, r3
700119ba:	4618      	mov	r0, r3
700119bc:	f7f8 f808 	bl	700099d0 <lwip_htons>
700119c0:	4603      	mov	r3, r0
700119c2:	b2db      	uxtb	r3, r3
700119c4:	f003 0303 	and.w	r3, r3, #3
700119c8:	2b00      	cmp	r3, #0
700119ca:	d001      	beq.n	700119d0 <tcp_receive+0xe68>
700119cc:	2301      	movs	r3, #1
700119ce:	e000      	b.n	700119d2 <tcp_receive+0xe6a>
700119d0:	2300      	movs	r3, #0
700119d2:	4423      	add	r3, r4
700119d4:	b29a      	uxth	r2, r3
700119d6:	4b2a      	ldr	r3, [pc, #168]	@ (70011a80 <tcp_receive+0xf18>)
700119d8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
700119da:	4b29      	ldr	r3, [pc, #164]	@ (70011a80 <tcp_receive+0xf18>)
700119dc:	881b      	ldrh	r3, [r3, #0]
700119de:	461a      	mov	r2, r3
700119e0:	4b25      	ldr	r3, [pc, #148]	@ (70011a78 <tcp_receive+0xf10>)
700119e2:	681b      	ldr	r3, [r3, #0]
700119e4:	441a      	add	r2, r3
700119e6:	687b      	ldr	r3, [r7, #4]
700119e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700119ea:	6879      	ldr	r1, [r7, #4]
700119ec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
700119ee:	440b      	add	r3, r1
700119f0:	429a      	cmp	r2, r3
700119f2:	d019      	beq.n	70011a28 <tcp_receive+0xec0>
700119f4:	4b23      	ldr	r3, [pc, #140]	@ (70011a84 <tcp_receive+0xf1c>)
700119f6:	f240 62f9 	movw	r2, #1785	@ 0x6f9
700119fa:	4923      	ldr	r1, [pc, #140]	@ (70011a88 <tcp_receive+0xf20>)
700119fc:	4823      	ldr	r0, [pc, #140]	@ (70011a8c <tcp_receive+0xf24>)
700119fe:	f002 f98f 	bl	70013d20 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
70011a02:	e011      	b.n	70011a28 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
70011a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70011a06:	681b      	ldr	r3, [r3, #0]
70011a08:	63bb      	str	r3, [r7, #56]	@ 0x38
70011a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
70011a0c:	2b00      	cmp	r3, #0
70011a0e:	f47f aea5 	bne.w	7001175c <tcp_receive+0xbf4>
70011a12:	e00a      	b.n	70011a2a <tcp_receive+0xec2>
                break;
70011a14:	bf00      	nop
70011a16:	e008      	b.n	70011a2a <tcp_receive+0xec2>
                break;
70011a18:	bf00      	nop
70011a1a:	e006      	b.n	70011a2a <tcp_receive+0xec2>
                  break;
70011a1c:	bf00      	nop
70011a1e:	e004      	b.n	70011a2a <tcp_receive+0xec2>
                  break;
70011a20:	bf00      	nop
70011a22:	e002      	b.n	70011a2a <tcp_receive+0xec2>
                  break;
70011a24:	bf00      	nop
70011a26:	e000      	b.n	70011a2a <tcp_receive+0xec2>
                break;
70011a28:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
70011a2a:	6878      	ldr	r0, [r7, #4]
70011a2c:	f001 fa32 	bl	70012e94 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
70011a30:	e003      	b.n	70011a3a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
70011a32:	6878      	ldr	r0, [r7, #4]
70011a34:	f001 fa2e 	bl	70012e94 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
70011a38:	e01a      	b.n	70011a70 <tcp_receive+0xf08>
70011a3a:	e019      	b.n	70011a70 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
70011a3c:	4b0e      	ldr	r3, [pc, #56]	@ (70011a78 <tcp_receive+0xf10>)
70011a3e:	681a      	ldr	r2, [r3, #0]
70011a40:	687b      	ldr	r3, [r7, #4]
70011a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70011a44:	1ad3      	subs	r3, r2, r3
70011a46:	2b00      	cmp	r3, #0
70011a48:	db0a      	blt.n	70011a60 <tcp_receive+0xef8>
70011a4a:	4b0b      	ldr	r3, [pc, #44]	@ (70011a78 <tcp_receive+0xf10>)
70011a4c:	681a      	ldr	r2, [r3, #0]
70011a4e:	687b      	ldr	r3, [r7, #4]
70011a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70011a52:	6879      	ldr	r1, [r7, #4]
70011a54:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
70011a56:	440b      	add	r3, r1
70011a58:	1ad3      	subs	r3, r2, r3
70011a5a:	3301      	adds	r3, #1
70011a5c:	2b00      	cmp	r3, #0
70011a5e:	dd07      	ble.n	70011a70 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
70011a60:	687b      	ldr	r3, [r7, #4]
70011a62:	8b5b      	ldrh	r3, [r3, #26]
70011a64:	f043 0302 	orr.w	r3, r3, #2
70011a68:	b29a      	uxth	r2, r3
70011a6a:	687b      	ldr	r3, [r7, #4]
70011a6c:	835a      	strh	r2, [r3, #26]
    }
  }
}
70011a6e:	e7ff      	b.n	70011a70 <tcp_receive+0xf08>
70011a70:	bf00      	nop
70011a72:	3750      	adds	r7, #80	@ 0x50
70011a74:	46bd      	mov	sp, r7
70011a76:	bdb0      	pop	{r4, r5, r7, pc}
70011a78:	240084b0 	.word	0x240084b0
70011a7c:	24008490 	.word	0x24008490
70011a80:	240084ba 	.word	0x240084ba
70011a84:	700161e8 	.word	0x700161e8
70011a88:	700165bc 	.word	0x700165bc
70011a8c:	70016260 	.word	0x70016260

70011a90 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
70011a90:	b480      	push	{r7}
70011a92:	b083      	sub	sp, #12
70011a94:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
70011a96:	4b15      	ldr	r3, [pc, #84]	@ (70011aec <tcp_get_next_optbyte+0x5c>)
70011a98:	881b      	ldrh	r3, [r3, #0]
70011a9a:	1c5a      	adds	r2, r3, #1
70011a9c:	b291      	uxth	r1, r2
70011a9e:	4a13      	ldr	r2, [pc, #76]	@ (70011aec <tcp_get_next_optbyte+0x5c>)
70011aa0:	8011      	strh	r1, [r2, #0]
70011aa2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
70011aa4:	4b12      	ldr	r3, [pc, #72]	@ (70011af0 <tcp_get_next_optbyte+0x60>)
70011aa6:	681b      	ldr	r3, [r3, #0]
70011aa8:	2b00      	cmp	r3, #0
70011aaa:	d004      	beq.n	70011ab6 <tcp_get_next_optbyte+0x26>
70011aac:	4b11      	ldr	r3, [pc, #68]	@ (70011af4 <tcp_get_next_optbyte+0x64>)
70011aae:	881b      	ldrh	r3, [r3, #0]
70011ab0:	88fa      	ldrh	r2, [r7, #6]
70011ab2:	429a      	cmp	r2, r3
70011ab4:	d208      	bcs.n	70011ac8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
70011ab6:	4b10      	ldr	r3, [pc, #64]	@ (70011af8 <tcp_get_next_optbyte+0x68>)
70011ab8:	681b      	ldr	r3, [r3, #0]
70011aba:	3314      	adds	r3, #20
70011abc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
70011abe:	88fb      	ldrh	r3, [r7, #6]
70011ac0:	683a      	ldr	r2, [r7, #0]
70011ac2:	4413      	add	r3, r2
70011ac4:	781b      	ldrb	r3, [r3, #0]
70011ac6:	e00b      	b.n	70011ae0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
70011ac8:	88fb      	ldrh	r3, [r7, #6]
70011aca:	b2da      	uxtb	r2, r3
70011acc:	4b09      	ldr	r3, [pc, #36]	@ (70011af4 <tcp_get_next_optbyte+0x64>)
70011ace:	881b      	ldrh	r3, [r3, #0]
70011ad0:	b2db      	uxtb	r3, r3
70011ad2:	1ad3      	subs	r3, r2, r3
70011ad4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
70011ad6:	4b06      	ldr	r3, [pc, #24]	@ (70011af0 <tcp_get_next_optbyte+0x60>)
70011ad8:	681a      	ldr	r2, [r3, #0]
70011ada:	797b      	ldrb	r3, [r7, #5]
70011adc:	4413      	add	r3, r2
70011ade:	781b      	ldrb	r3, [r3, #0]
  }
}
70011ae0:	4618      	mov	r0, r3
70011ae2:	370c      	adds	r7, #12
70011ae4:	46bd      	mov	sp, r7
70011ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
70011aea:	4770      	bx	lr
70011aec:	240084ac 	.word	0x240084ac
70011af0:	240084a8 	.word	0x240084a8
70011af4:	240084a6 	.word	0x240084a6
70011af8:	240084a0 	.word	0x240084a0

70011afc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
70011afc:	b580      	push	{r7, lr}
70011afe:	b084      	sub	sp, #16
70011b00:	af00      	add	r7, sp, #0
70011b02:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
70011b04:	687b      	ldr	r3, [r7, #4]
70011b06:	2b00      	cmp	r3, #0
70011b08:	d106      	bne.n	70011b18 <tcp_parseopt+0x1c>
70011b0a:	4b32      	ldr	r3, [pc, #200]	@ (70011bd4 <tcp_parseopt+0xd8>)
70011b0c:	f240 727e 	movw	r2, #1918	@ 0x77e
70011b10:	4931      	ldr	r1, [pc, #196]	@ (70011bd8 <tcp_parseopt+0xdc>)
70011b12:	4832      	ldr	r0, [pc, #200]	@ (70011bdc <tcp_parseopt+0xe0>)
70011b14:	f002 f904 	bl	70013d20 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
70011b18:	4b31      	ldr	r3, [pc, #196]	@ (70011be0 <tcp_parseopt+0xe4>)
70011b1a:	881b      	ldrh	r3, [r3, #0]
70011b1c:	2b00      	cmp	r3, #0
70011b1e:	d056      	beq.n	70011bce <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
70011b20:	4b30      	ldr	r3, [pc, #192]	@ (70011be4 <tcp_parseopt+0xe8>)
70011b22:	2200      	movs	r2, #0
70011b24:	801a      	strh	r2, [r3, #0]
70011b26:	e046      	b.n	70011bb6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
70011b28:	f7ff ffb2 	bl	70011a90 <tcp_get_next_optbyte>
70011b2c:	4603      	mov	r3, r0
70011b2e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
70011b30:	7bfb      	ldrb	r3, [r7, #15]
70011b32:	2b02      	cmp	r3, #2
70011b34:	d006      	beq.n	70011b44 <tcp_parseopt+0x48>
70011b36:	2b02      	cmp	r3, #2
70011b38:	dc2a      	bgt.n	70011b90 <tcp_parseopt+0x94>
70011b3a:	2b00      	cmp	r3, #0
70011b3c:	d042      	beq.n	70011bc4 <tcp_parseopt+0xc8>
70011b3e:	2b01      	cmp	r3, #1
70011b40:	d038      	beq.n	70011bb4 <tcp_parseopt+0xb8>
70011b42:	e025      	b.n	70011b90 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
70011b44:	f7ff ffa4 	bl	70011a90 <tcp_get_next_optbyte>
70011b48:	4603      	mov	r3, r0
70011b4a:	2b04      	cmp	r3, #4
70011b4c:	d13c      	bne.n	70011bc8 <tcp_parseopt+0xcc>
70011b4e:	4b25      	ldr	r3, [pc, #148]	@ (70011be4 <tcp_parseopt+0xe8>)
70011b50:	881b      	ldrh	r3, [r3, #0]
70011b52:	3301      	adds	r3, #1
70011b54:	4a22      	ldr	r2, [pc, #136]	@ (70011be0 <tcp_parseopt+0xe4>)
70011b56:	8812      	ldrh	r2, [r2, #0]
70011b58:	4293      	cmp	r3, r2
70011b5a:	da35      	bge.n	70011bc8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
70011b5c:	f7ff ff98 	bl	70011a90 <tcp_get_next_optbyte>
70011b60:	4603      	mov	r3, r0
70011b62:	021b      	lsls	r3, r3, #8
70011b64:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
70011b66:	f7ff ff93 	bl	70011a90 <tcp_get_next_optbyte>
70011b6a:	4603      	mov	r3, r0
70011b6c:	461a      	mov	r2, r3
70011b6e:	89bb      	ldrh	r3, [r7, #12]
70011b70:	4313      	orrs	r3, r2
70011b72:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
70011b74:	89bb      	ldrh	r3, [r7, #12]
70011b76:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
70011b7a:	d804      	bhi.n	70011b86 <tcp_parseopt+0x8a>
70011b7c:	89bb      	ldrh	r3, [r7, #12]
70011b7e:	2b00      	cmp	r3, #0
70011b80:	d001      	beq.n	70011b86 <tcp_parseopt+0x8a>
70011b82:	89ba      	ldrh	r2, [r7, #12]
70011b84:	e001      	b.n	70011b8a <tcp_parseopt+0x8e>
70011b86:	f44f 7206 	mov.w	r2, #536	@ 0x218
70011b8a:	687b      	ldr	r3, [r7, #4]
70011b8c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
70011b8e:	e012      	b.n	70011bb6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
70011b90:	f7ff ff7e 	bl	70011a90 <tcp_get_next_optbyte>
70011b94:	4603      	mov	r3, r0
70011b96:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
70011b98:	7afb      	ldrb	r3, [r7, #11]
70011b9a:	2b01      	cmp	r3, #1
70011b9c:	d916      	bls.n	70011bcc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
70011b9e:	7afb      	ldrb	r3, [r7, #11]
70011ba0:	b29a      	uxth	r2, r3
70011ba2:	4b10      	ldr	r3, [pc, #64]	@ (70011be4 <tcp_parseopt+0xe8>)
70011ba4:	881b      	ldrh	r3, [r3, #0]
70011ba6:	4413      	add	r3, r2
70011ba8:	b29b      	uxth	r3, r3
70011baa:	3b02      	subs	r3, #2
70011bac:	b29a      	uxth	r2, r3
70011bae:	4b0d      	ldr	r3, [pc, #52]	@ (70011be4 <tcp_parseopt+0xe8>)
70011bb0:	801a      	strh	r2, [r3, #0]
70011bb2:	e000      	b.n	70011bb6 <tcp_parseopt+0xba>
          break;
70011bb4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
70011bb6:	4b0b      	ldr	r3, [pc, #44]	@ (70011be4 <tcp_parseopt+0xe8>)
70011bb8:	881a      	ldrh	r2, [r3, #0]
70011bba:	4b09      	ldr	r3, [pc, #36]	@ (70011be0 <tcp_parseopt+0xe4>)
70011bbc:	881b      	ldrh	r3, [r3, #0]
70011bbe:	429a      	cmp	r2, r3
70011bc0:	d3b2      	bcc.n	70011b28 <tcp_parseopt+0x2c>
70011bc2:	e004      	b.n	70011bce <tcp_parseopt+0xd2>
          return;
70011bc4:	bf00      	nop
70011bc6:	e002      	b.n	70011bce <tcp_parseopt+0xd2>
            return;
70011bc8:	bf00      	nop
70011bca:	e000      	b.n	70011bce <tcp_parseopt+0xd2>
            return;
70011bcc:	bf00      	nop
      }
    }
  }
}
70011bce:	3710      	adds	r7, #16
70011bd0:	46bd      	mov	sp, r7
70011bd2:	bd80      	pop	{r7, pc}
70011bd4:	700161e8 	.word	0x700161e8
70011bd8:	70016678 	.word	0x70016678
70011bdc:	70016260 	.word	0x70016260
70011be0:	240084a4 	.word	0x240084a4
70011be4:	240084ac 	.word	0x240084ac

70011be8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
70011be8:	b480      	push	{r7}
70011bea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
70011bec:	4b05      	ldr	r3, [pc, #20]	@ (70011c04 <tcp_trigger_input_pcb_close+0x1c>)
70011bee:	781b      	ldrb	r3, [r3, #0]
70011bf0:	f043 0310 	orr.w	r3, r3, #16
70011bf4:	b2da      	uxtb	r2, r3
70011bf6:	4b03      	ldr	r3, [pc, #12]	@ (70011c04 <tcp_trigger_input_pcb_close+0x1c>)
70011bf8:	701a      	strb	r2, [r3, #0]
}
70011bfa:	bf00      	nop
70011bfc:	46bd      	mov	sp, r7
70011bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
70011c02:	4770      	bx	lr
70011c04:	240084bd 	.word	0x240084bd

70011c08 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
70011c08:	b580      	push	{r7, lr}
70011c0a:	b084      	sub	sp, #16
70011c0c:	af00      	add	r7, sp, #0
70011c0e:	60f8      	str	r0, [r7, #12]
70011c10:	60b9      	str	r1, [r7, #8]
70011c12:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
70011c14:	68fb      	ldr	r3, [r7, #12]
70011c16:	2b00      	cmp	r3, #0
70011c18:	d00a      	beq.n	70011c30 <tcp_route+0x28>
70011c1a:	68fb      	ldr	r3, [r7, #12]
70011c1c:	7a1b      	ldrb	r3, [r3, #8]
70011c1e:	2b00      	cmp	r3, #0
70011c20:	d006      	beq.n	70011c30 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
70011c22:	68fb      	ldr	r3, [r7, #12]
70011c24:	7a1b      	ldrb	r3, [r3, #8]
70011c26:	4618      	mov	r0, r3
70011c28:	f7fb fa8a 	bl	7000d140 <netif_get_by_index>
70011c2c:	4603      	mov	r3, r0
70011c2e:	e003      	b.n	70011c38 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
70011c30:	6878      	ldr	r0, [r7, #4]
70011c32:	f7f9 f9c3 	bl	7000afbc <ip4_route>
70011c36:	4603      	mov	r3, r0
  }
}
70011c38:	4618      	mov	r0, r3
70011c3a:	3710      	adds	r7, #16
70011c3c:	46bd      	mov	sp, r7
70011c3e:	bd80      	pop	{r7, pc}

70011c40 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
70011c40:	b590      	push	{r4, r7, lr}
70011c42:	b087      	sub	sp, #28
70011c44:	af00      	add	r7, sp, #0
70011c46:	60f8      	str	r0, [r7, #12]
70011c48:	60b9      	str	r1, [r7, #8]
70011c4a:	603b      	str	r3, [r7, #0]
70011c4c:	4613      	mov	r3, r2
70011c4e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
70011c50:	68fb      	ldr	r3, [r7, #12]
70011c52:	2b00      	cmp	r3, #0
70011c54:	d105      	bne.n	70011c62 <tcp_create_segment+0x22>
70011c56:	4b43      	ldr	r3, [pc, #268]	@ (70011d64 <tcp_create_segment+0x124>)
70011c58:	22a3      	movs	r2, #163	@ 0xa3
70011c5a:	4943      	ldr	r1, [pc, #268]	@ (70011d68 <tcp_create_segment+0x128>)
70011c5c:	4843      	ldr	r0, [pc, #268]	@ (70011d6c <tcp_create_segment+0x12c>)
70011c5e:	f002 f85f 	bl	70013d20 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
70011c62:	68bb      	ldr	r3, [r7, #8]
70011c64:	2b00      	cmp	r3, #0
70011c66:	d105      	bne.n	70011c74 <tcp_create_segment+0x34>
70011c68:	4b3e      	ldr	r3, [pc, #248]	@ (70011d64 <tcp_create_segment+0x124>)
70011c6a:	22a4      	movs	r2, #164	@ 0xa4
70011c6c:	4940      	ldr	r1, [pc, #256]	@ (70011d70 <tcp_create_segment+0x130>)
70011c6e:	483f      	ldr	r0, [pc, #252]	@ (70011d6c <tcp_create_segment+0x12c>)
70011c70:	f002 f856 	bl	70013d20 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
70011c74:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
70011c78:	009b      	lsls	r3, r3, #2
70011c7a:	b2db      	uxtb	r3, r3
70011c7c:	f003 0304 	and.w	r3, r3, #4
70011c80:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
70011c82:	2003      	movs	r0, #3
70011c84:	f7fa ff34 	bl	7000caf0 <memp_malloc>
70011c88:	6138      	str	r0, [r7, #16]
70011c8a:	693b      	ldr	r3, [r7, #16]
70011c8c:	2b00      	cmp	r3, #0
70011c8e:	d104      	bne.n	70011c9a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
70011c90:	68b8      	ldr	r0, [r7, #8]
70011c92:	f7fb fdd9 	bl	7000d848 <pbuf_free>
    return NULL;
70011c96:	2300      	movs	r3, #0
70011c98:	e060      	b.n	70011d5c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
70011c9a:	693b      	ldr	r3, [r7, #16]
70011c9c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
70011ca0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
70011ca2:	693b      	ldr	r3, [r7, #16]
70011ca4:	2200      	movs	r2, #0
70011ca6:	601a      	str	r2, [r3, #0]
  seg->p = p;
70011ca8:	693b      	ldr	r3, [r7, #16]
70011caa:	68ba      	ldr	r2, [r7, #8]
70011cac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
70011cae:	68bb      	ldr	r3, [r7, #8]
70011cb0:	891a      	ldrh	r2, [r3, #8]
70011cb2:	7dfb      	ldrb	r3, [r7, #23]
70011cb4:	b29b      	uxth	r3, r3
70011cb6:	429a      	cmp	r2, r3
70011cb8:	d205      	bcs.n	70011cc6 <tcp_create_segment+0x86>
70011cba:	4b2a      	ldr	r3, [pc, #168]	@ (70011d64 <tcp_create_segment+0x124>)
70011cbc:	22b0      	movs	r2, #176	@ 0xb0
70011cbe:	492d      	ldr	r1, [pc, #180]	@ (70011d74 <tcp_create_segment+0x134>)
70011cc0:	482a      	ldr	r0, [pc, #168]	@ (70011d6c <tcp_create_segment+0x12c>)
70011cc2:	f002 f82d 	bl	70013d20 <iprintf>
  seg->len = p->tot_len - optlen;
70011cc6:	68bb      	ldr	r3, [r7, #8]
70011cc8:	891a      	ldrh	r2, [r3, #8]
70011cca:	7dfb      	ldrb	r3, [r7, #23]
70011ccc:	b29b      	uxth	r3, r3
70011cce:	1ad3      	subs	r3, r2, r3
70011cd0:	b29a      	uxth	r2, r3
70011cd2:	693b      	ldr	r3, [r7, #16]
70011cd4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
70011cd6:	2114      	movs	r1, #20
70011cd8:	68b8      	ldr	r0, [r7, #8]
70011cda:	f7fb fd29 	bl	7000d730 <pbuf_add_header>
70011cde:	4603      	mov	r3, r0
70011ce0:	2b00      	cmp	r3, #0
70011ce2:	d004      	beq.n	70011cee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
70011ce4:	6938      	ldr	r0, [r7, #16]
70011ce6:	f7fd f8ef 	bl	7000eec8 <tcp_seg_free>
    return NULL;
70011cea:	2300      	movs	r3, #0
70011cec:	e036      	b.n	70011d5c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
70011cee:	693b      	ldr	r3, [r7, #16]
70011cf0:	685b      	ldr	r3, [r3, #4]
70011cf2:	685a      	ldr	r2, [r3, #4]
70011cf4:	693b      	ldr	r3, [r7, #16]
70011cf6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
70011cf8:	68fb      	ldr	r3, [r7, #12]
70011cfa:	8ada      	ldrh	r2, [r3, #22]
70011cfc:	693b      	ldr	r3, [r7, #16]
70011cfe:	68dc      	ldr	r4, [r3, #12]
70011d00:	4610      	mov	r0, r2
70011d02:	f7f7 fe65 	bl	700099d0 <lwip_htons>
70011d06:	4603      	mov	r3, r0
70011d08:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
70011d0a:	68fb      	ldr	r3, [r7, #12]
70011d0c:	8b1a      	ldrh	r2, [r3, #24]
70011d0e:	693b      	ldr	r3, [r7, #16]
70011d10:	68dc      	ldr	r4, [r3, #12]
70011d12:	4610      	mov	r0, r2
70011d14:	f7f7 fe5c 	bl	700099d0 <lwip_htons>
70011d18:	4603      	mov	r3, r0
70011d1a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
70011d1c:	693b      	ldr	r3, [r7, #16]
70011d1e:	68dc      	ldr	r4, [r3, #12]
70011d20:	6838      	ldr	r0, [r7, #0]
70011d22:	f7f7 fe6a 	bl	700099fa <lwip_htonl>
70011d26:	4603      	mov	r3, r0
70011d28:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
70011d2a:	7dfb      	ldrb	r3, [r7, #23]
70011d2c:	089b      	lsrs	r3, r3, #2
70011d2e:	b2db      	uxtb	r3, r3
70011d30:	3305      	adds	r3, #5
70011d32:	b29b      	uxth	r3, r3
70011d34:	031b      	lsls	r3, r3, #12
70011d36:	b29a      	uxth	r2, r3
70011d38:	79fb      	ldrb	r3, [r7, #7]
70011d3a:	b29b      	uxth	r3, r3
70011d3c:	4313      	orrs	r3, r2
70011d3e:	b29a      	uxth	r2, r3
70011d40:	693b      	ldr	r3, [r7, #16]
70011d42:	68dc      	ldr	r4, [r3, #12]
70011d44:	4610      	mov	r0, r2
70011d46:	f7f7 fe43 	bl	700099d0 <lwip_htons>
70011d4a:	4603      	mov	r3, r0
70011d4c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
70011d4e:	693b      	ldr	r3, [r7, #16]
70011d50:	68db      	ldr	r3, [r3, #12]
70011d52:	2200      	movs	r2, #0
70011d54:	749a      	strb	r2, [r3, #18]
70011d56:	2200      	movs	r2, #0
70011d58:	74da      	strb	r2, [r3, #19]
  return seg;
70011d5a:	693b      	ldr	r3, [r7, #16]
}
70011d5c:	4618      	mov	r0, r3
70011d5e:	371c      	adds	r7, #28
70011d60:	46bd      	mov	sp, r7
70011d62:	bd90      	pop	{r4, r7, pc}
70011d64:	70016694 	.word	0x70016694
70011d68:	700166f4 	.word	0x700166f4
70011d6c:	70016714 	.word	0x70016714
70011d70:	7001673c 	.word	0x7001673c
70011d74:	70016760 	.word	0x70016760

70011d78 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
70011d78:	b590      	push	{r4, r7, lr}
70011d7a:	b08b      	sub	sp, #44	@ 0x2c
70011d7c:	af02      	add	r7, sp, #8
70011d7e:	6078      	str	r0, [r7, #4]
70011d80:	460b      	mov	r3, r1
70011d82:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
70011d84:	2300      	movs	r3, #0
70011d86:	61fb      	str	r3, [r7, #28]
70011d88:	2300      	movs	r3, #0
70011d8a:	613b      	str	r3, [r7, #16]
  struct pbuf *p = NULL;
70011d8c:	2300      	movs	r3, #0
70011d8e:	61bb      	str	r3, [r7, #24]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
70011d90:	687b      	ldr	r3, [r7, #4]
70011d92:	2b00      	cmp	r3, #0
70011d94:	d106      	bne.n	70011da4 <tcp_split_unsent_seg+0x2c>
70011d96:	4b96      	ldr	r3, [pc, #600]	@ (70011ff0 <tcp_split_unsent_seg+0x278>)
70011d98:	f240 324b 	movw	r2, #843	@ 0x34b
70011d9c:	4995      	ldr	r1, [pc, #596]	@ (70011ff4 <tcp_split_unsent_seg+0x27c>)
70011d9e:	4896      	ldr	r0, [pc, #600]	@ (70011ff8 <tcp_split_unsent_seg+0x280>)
70011da0:	f001 ffbe 	bl	70013d20 <iprintf>

  useg = pcb->unsent;
70011da4:	687b      	ldr	r3, [r7, #4]
70011da6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70011da8:	613b      	str	r3, [r7, #16]
  if (useg == NULL) {
70011daa:	693b      	ldr	r3, [r7, #16]
70011dac:	2b00      	cmp	r3, #0
70011dae:	d102      	bne.n	70011db6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
70011db0:	f04f 33ff 	mov.w	r3, #4294967295
70011db4:	e117      	b.n	70011fe6 <tcp_split_unsent_seg+0x26e>
  }

  if (split == 0) {
70011db6:	887b      	ldrh	r3, [r7, #2]
70011db8:	2b00      	cmp	r3, #0
70011dba:	d109      	bne.n	70011dd0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
70011dbc:	4b8c      	ldr	r3, [pc, #560]	@ (70011ff0 <tcp_split_unsent_seg+0x278>)
70011dbe:	f240 3253 	movw	r2, #851	@ 0x353
70011dc2:	498e      	ldr	r1, [pc, #568]	@ (70011ffc <tcp_split_unsent_seg+0x284>)
70011dc4:	488c      	ldr	r0, [pc, #560]	@ (70011ff8 <tcp_split_unsent_seg+0x280>)
70011dc6:	f001 ffab 	bl	70013d20 <iprintf>
    return ERR_VAL;
70011dca:	f06f 0305 	mvn.w	r3, #5
70011dce:	e10a      	b.n	70011fe6 <tcp_split_unsent_seg+0x26e>
  }

  if (useg->len <= split) {
70011dd0:	693b      	ldr	r3, [r7, #16]
70011dd2:	891b      	ldrh	r3, [r3, #8]
70011dd4:	887a      	ldrh	r2, [r7, #2]
70011dd6:	429a      	cmp	r2, r3
70011dd8:	d301      	bcc.n	70011dde <tcp_split_unsent_seg+0x66>
    return ERR_OK;
70011dda:	2300      	movs	r3, #0
70011ddc:	e103      	b.n	70011fe6 <tcp_split_unsent_seg+0x26e>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
70011dde:	687b      	ldr	r3, [r7, #4]
70011de0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70011de2:	887a      	ldrh	r2, [r7, #2]
70011de4:	429a      	cmp	r2, r3
70011de6:	d906      	bls.n	70011df6 <tcp_split_unsent_seg+0x7e>
70011de8:	4b81      	ldr	r3, [pc, #516]	@ (70011ff0 <tcp_split_unsent_seg+0x278>)
70011dea:	f240 325b 	movw	r2, #859	@ 0x35b
70011dee:	4984      	ldr	r1, [pc, #528]	@ (70012000 <tcp_split_unsent_seg+0x288>)
70011df0:	4881      	ldr	r0, [pc, #516]	@ (70011ff8 <tcp_split_unsent_seg+0x280>)
70011df2:	f001 ff95 	bl	70013d20 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
70011df6:	693b      	ldr	r3, [r7, #16]
70011df8:	891b      	ldrh	r3, [r3, #8]
70011dfa:	2b00      	cmp	r3, #0
70011dfc:	d106      	bne.n	70011e0c <tcp_split_unsent_seg+0x94>
70011dfe:	4b7c      	ldr	r3, [pc, #496]	@ (70011ff0 <tcp_split_unsent_seg+0x278>)
70011e00:	f44f 7257 	mov.w	r2, #860	@ 0x35c
70011e04:	497f      	ldr	r1, [pc, #508]	@ (70012004 <tcp_split_unsent_seg+0x28c>)
70011e06:	487c      	ldr	r0, [pc, #496]	@ (70011ff8 <tcp_split_unsent_seg+0x280>)
70011e08:	f001 ff8a 	bl	70013d20 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
70011e0c:	693b      	ldr	r3, [r7, #16]
70011e0e:	7a9b      	ldrb	r3, [r3, #10]
70011e10:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
70011e12:	7bfb      	ldrb	r3, [r7, #15]
70011e14:	009b      	lsls	r3, r3, #2
70011e16:	b2db      	uxtb	r3, r3
70011e18:	f003 0304 	and.w	r3, r3, #4
70011e1c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
70011e1e:	693b      	ldr	r3, [r7, #16]
70011e20:	891a      	ldrh	r2, [r3, #8]
70011e22:	887b      	ldrh	r3, [r7, #2]
70011e24:	1ad3      	subs	r3, r2, r3
70011e26:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
70011e28:	7bbb      	ldrb	r3, [r7, #14]
70011e2a:	b29a      	uxth	r2, r3
70011e2c:	89bb      	ldrh	r3, [r7, #12]
70011e2e:	4413      	add	r3, r2
70011e30:	b29b      	uxth	r3, r3
70011e32:	f44f 7220 	mov.w	r2, #640	@ 0x280
70011e36:	4619      	mov	r1, r3
70011e38:	2036      	movs	r0, #54	@ 0x36
70011e3a:	f7fb fa2b 	bl	7000d294 <pbuf_alloc>
70011e3e:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
70011e40:	69bb      	ldr	r3, [r7, #24]
70011e42:	2b00      	cmp	r3, #0
70011e44:	f000 80ba 	beq.w	70011fbc <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
70011e48:	693b      	ldr	r3, [r7, #16]
70011e4a:	685b      	ldr	r3, [r3, #4]
70011e4c:	891a      	ldrh	r2, [r3, #8]
70011e4e:	693b      	ldr	r3, [r7, #16]
70011e50:	891b      	ldrh	r3, [r3, #8]
70011e52:	1ad3      	subs	r3, r2, r3
70011e54:	b29a      	uxth	r2, r3
70011e56:	887b      	ldrh	r3, [r7, #2]
70011e58:	4413      	add	r3, r2
70011e5a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
70011e5c:	693b      	ldr	r3, [r7, #16]
70011e5e:	6858      	ldr	r0, [r3, #4]
70011e60:	69bb      	ldr	r3, [r7, #24]
70011e62:	685a      	ldr	r2, [r3, #4]
70011e64:	7bbb      	ldrb	r3, [r7, #14]
70011e66:	18d1      	adds	r1, r2, r3
70011e68:	897b      	ldrh	r3, [r7, #10]
70011e6a:	89ba      	ldrh	r2, [r7, #12]
70011e6c:	f7fb fef4 	bl	7000dc58 <pbuf_copy_partial>
70011e70:	4603      	mov	r3, r0
70011e72:	461a      	mov	r2, r3
70011e74:	89bb      	ldrh	r3, [r7, #12]
70011e76:	4293      	cmp	r3, r2
70011e78:	f040 80a2 	bne.w	70011fc0 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
70011e7c:	693b      	ldr	r3, [r7, #16]
70011e7e:	68db      	ldr	r3, [r3, #12]
70011e80:	899b      	ldrh	r3, [r3, #12]
70011e82:	b29b      	uxth	r3, r3
70011e84:	4618      	mov	r0, r3
70011e86:	f7f7 fda3 	bl	700099d0 <lwip_htons>
70011e8a:	4603      	mov	r3, r0
70011e8c:	b2db      	uxtb	r3, r3
70011e8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
70011e92:	75fb      	strb	r3, [r7, #23]
  remainder_flags = 0; /* ACK added in tcp_output() */
70011e94:	2300      	movs	r3, #0
70011e96:	75bb      	strb	r3, [r7, #22]

  if (split_flags & TCP_PSH) {
70011e98:	7dfb      	ldrb	r3, [r7, #23]
70011e9a:	f003 0308 	and.w	r3, r3, #8
70011e9e:	2b00      	cmp	r3, #0
70011ea0:	d007      	beq.n	70011eb2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
70011ea2:	7dfb      	ldrb	r3, [r7, #23]
70011ea4:	f023 0308 	bic.w	r3, r3, #8
70011ea8:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_PSH;
70011eaa:	7dbb      	ldrb	r3, [r7, #22]
70011eac:	f043 0308 	orr.w	r3, r3, #8
70011eb0:	75bb      	strb	r3, [r7, #22]
  }
  if (split_flags & TCP_FIN) {
70011eb2:	7dfb      	ldrb	r3, [r7, #23]
70011eb4:	f003 0301 	and.w	r3, r3, #1
70011eb8:	2b00      	cmp	r3, #0
70011eba:	d007      	beq.n	70011ecc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
70011ebc:	7dfb      	ldrb	r3, [r7, #23]
70011ebe:	f023 0301 	bic.w	r3, r3, #1
70011ec2:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_FIN;
70011ec4:	7dbb      	ldrb	r3, [r7, #22]
70011ec6:	f043 0301 	orr.w	r3, r3, #1
70011eca:	75bb      	strb	r3, [r7, #22]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
70011ecc:	693b      	ldr	r3, [r7, #16]
70011ece:	68db      	ldr	r3, [r3, #12]
70011ed0:	685b      	ldr	r3, [r3, #4]
70011ed2:	4618      	mov	r0, r3
70011ed4:	f7f7 fd91 	bl	700099fa <lwip_htonl>
70011ed8:	4602      	mov	r2, r0
70011eda:	887b      	ldrh	r3, [r7, #2]
70011edc:	18d1      	adds	r1, r2, r3
70011ede:	7dba      	ldrb	r2, [r7, #22]
70011ee0:	7bfb      	ldrb	r3, [r7, #15]
70011ee2:	9300      	str	r3, [sp, #0]
70011ee4:	460b      	mov	r3, r1
70011ee6:	69b9      	ldr	r1, [r7, #24]
70011ee8:	6878      	ldr	r0, [r7, #4]
70011eea:	f7ff fea9 	bl	70011c40 <tcp_create_segment>
70011eee:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
70011ef0:	69fb      	ldr	r3, [r7, #28]
70011ef2:	2b00      	cmp	r3, #0
70011ef4:	d102      	bne.n	70011efc <tcp_split_unsent_seg+0x184>
    p = NULL; /* Freed by tcp_create_segment */
70011ef6:	2300      	movs	r3, #0
70011ef8:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
70011efa:	e062      	b.n	70011fc2 <tcp_split_unsent_seg+0x24a>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
70011efc:	693b      	ldr	r3, [r7, #16]
70011efe:	685b      	ldr	r3, [r3, #4]
70011f00:	4618      	mov	r0, r3
70011f02:	f7fb fd2f 	bl	7000d964 <pbuf_clen>
70011f06:	4603      	mov	r3, r0
70011f08:	461a      	mov	r2, r3
70011f0a:	687b      	ldr	r3, [r7, #4]
70011f0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
70011f10:	1a9b      	subs	r3, r3, r2
70011f12:	b29a      	uxth	r2, r3
70011f14:	687b      	ldr	r3, [r7, #4]
70011f16:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
70011f1a:	693b      	ldr	r3, [r7, #16]
70011f1c:	6858      	ldr	r0, [r3, #4]
70011f1e:	693b      	ldr	r3, [r7, #16]
70011f20:	685b      	ldr	r3, [r3, #4]
70011f22:	891a      	ldrh	r2, [r3, #8]
70011f24:	89bb      	ldrh	r3, [r7, #12]
70011f26:	1ad3      	subs	r3, r2, r3
70011f28:	b29b      	uxth	r3, r3
70011f2a:	4619      	mov	r1, r3
70011f2c:	f7fb fb10 	bl	7000d550 <pbuf_realloc>
  useg->len -= remainder;
70011f30:	693b      	ldr	r3, [r7, #16]
70011f32:	891a      	ldrh	r2, [r3, #8]
70011f34:	89bb      	ldrh	r3, [r7, #12]
70011f36:	1ad3      	subs	r3, r2, r3
70011f38:	b29a      	uxth	r2, r3
70011f3a:	693b      	ldr	r3, [r7, #16]
70011f3c:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
70011f3e:	693b      	ldr	r3, [r7, #16]
70011f40:	68db      	ldr	r3, [r3, #12]
70011f42:	899b      	ldrh	r3, [r3, #12]
70011f44:	b29c      	uxth	r4, r3
70011f46:	7dfb      	ldrb	r3, [r7, #23]
70011f48:	b29b      	uxth	r3, r3
70011f4a:	4618      	mov	r0, r3
70011f4c:	f7f7 fd40 	bl	700099d0 <lwip_htons>
70011f50:	4603      	mov	r3, r0
70011f52:	461a      	mov	r2, r3
70011f54:	693b      	ldr	r3, [r7, #16]
70011f56:	68db      	ldr	r3, [r3, #12]
70011f58:	4322      	orrs	r2, r4
70011f5a:	b292      	uxth	r2, r2
70011f5c:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
70011f5e:	693b      	ldr	r3, [r7, #16]
70011f60:	685b      	ldr	r3, [r3, #4]
70011f62:	4618      	mov	r0, r3
70011f64:	f7fb fcfe 	bl	7000d964 <pbuf_clen>
70011f68:	4603      	mov	r3, r0
70011f6a:	461a      	mov	r2, r3
70011f6c:	687b      	ldr	r3, [r7, #4]
70011f6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
70011f72:	4413      	add	r3, r2
70011f74:	b29a      	uxth	r2, r3
70011f76:	687b      	ldr	r3, [r7, #4]
70011f78:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
70011f7c:	69fb      	ldr	r3, [r7, #28]
70011f7e:	685b      	ldr	r3, [r3, #4]
70011f80:	4618      	mov	r0, r3
70011f82:	f7fb fcef 	bl	7000d964 <pbuf_clen>
70011f86:	4603      	mov	r3, r0
70011f88:	461a      	mov	r2, r3
70011f8a:	687b      	ldr	r3, [r7, #4]
70011f8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
70011f90:	4413      	add	r3, r2
70011f92:	b29a      	uxth	r2, r3
70011f94:	687b      	ldr	r3, [r7, #4]
70011f96:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
70011f9a:	693b      	ldr	r3, [r7, #16]
70011f9c:	681a      	ldr	r2, [r3, #0]
70011f9e:	69fb      	ldr	r3, [r7, #28]
70011fa0:	601a      	str	r2, [r3, #0]
  useg->next = seg;
70011fa2:	693b      	ldr	r3, [r7, #16]
70011fa4:	69fa      	ldr	r2, [r7, #28]
70011fa6:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
70011fa8:	69fb      	ldr	r3, [r7, #28]
70011faa:	681b      	ldr	r3, [r3, #0]
70011fac:	2b00      	cmp	r3, #0
70011fae:	d103      	bne.n	70011fb8 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
70011fb0:	687b      	ldr	r3, [r7, #4]
70011fb2:	2200      	movs	r2, #0
70011fb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
70011fb8:	2300      	movs	r3, #0
70011fba:	e014      	b.n	70011fe6 <tcp_split_unsent_seg+0x26e>
    goto memerr;
70011fbc:	bf00      	nop
70011fbe:	e000      	b.n	70011fc2 <tcp_split_unsent_seg+0x24a>
    goto memerr;
70011fc0:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
70011fc2:	69fb      	ldr	r3, [r7, #28]
70011fc4:	2b00      	cmp	r3, #0
70011fc6:	d006      	beq.n	70011fd6 <tcp_split_unsent_seg+0x25e>
70011fc8:	4b09      	ldr	r3, [pc, #36]	@ (70011ff0 <tcp_split_unsent_seg+0x278>)
70011fca:	f240 32d9 	movw	r2, #985	@ 0x3d9
70011fce:	490e      	ldr	r1, [pc, #56]	@ (70012008 <tcp_split_unsent_seg+0x290>)
70011fd0:	4809      	ldr	r0, [pc, #36]	@ (70011ff8 <tcp_split_unsent_seg+0x280>)
70011fd2:	f001 fea5 	bl	70013d20 <iprintf>
  if (p != NULL) {
70011fd6:	69bb      	ldr	r3, [r7, #24]
70011fd8:	2b00      	cmp	r3, #0
70011fda:	d002      	beq.n	70011fe2 <tcp_split_unsent_seg+0x26a>
    pbuf_free(p);
70011fdc:	69b8      	ldr	r0, [r7, #24]
70011fde:	f7fb fc33 	bl	7000d848 <pbuf_free>
  }

  return ERR_MEM;
70011fe2:	f04f 33ff 	mov.w	r3, #4294967295
}
70011fe6:	4618      	mov	r0, r3
70011fe8:	3724      	adds	r7, #36	@ 0x24
70011fea:	46bd      	mov	sp, r7
70011fec:	bd90      	pop	{r4, r7, pc}
70011fee:	bf00      	nop
70011ff0:	70016694 	.word	0x70016694
70011ff4:	70016a08 	.word	0x70016a08
70011ff8:	70016714 	.word	0x70016714
70011ffc:	70016a2c 	.word	0x70016a2c
70012000:	70016a50 	.word	0x70016a50
70012004:	70016a60 	.word	0x70016a60
70012008:	70016a70 	.word	0x70016a70

7001200c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
7001200c:	b590      	push	{r4, r7, lr}
7001200e:	b085      	sub	sp, #20
70012010:	af00      	add	r7, sp, #0
70012012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
70012014:	687b      	ldr	r3, [r7, #4]
70012016:	2b00      	cmp	r3, #0
70012018:	d106      	bne.n	70012028 <tcp_send_fin+0x1c>
7001201a:	4b21      	ldr	r3, [pc, #132]	@ (700120a0 <tcp_send_fin+0x94>)
7001201c:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
70012020:	4920      	ldr	r1, [pc, #128]	@ (700120a4 <tcp_send_fin+0x98>)
70012022:	4821      	ldr	r0, [pc, #132]	@ (700120a8 <tcp_send_fin+0x9c>)
70012024:	f001 fe7c 	bl	70013d20 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
70012028:	687b      	ldr	r3, [r7, #4]
7001202a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7001202c:	2b00      	cmp	r3, #0
7001202e:	d02e      	beq.n	7001208e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
70012030:	687b      	ldr	r3, [r7, #4]
70012032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70012034:	60fb      	str	r3, [r7, #12]
70012036:	e002      	b.n	7001203e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
70012038:	68fb      	ldr	r3, [r7, #12]
7001203a:	681b      	ldr	r3, [r3, #0]
7001203c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
7001203e:	68fb      	ldr	r3, [r7, #12]
70012040:	681b      	ldr	r3, [r3, #0]
70012042:	2b00      	cmp	r3, #0
70012044:	d1f8      	bne.n	70012038 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
70012046:	68fb      	ldr	r3, [r7, #12]
70012048:	68db      	ldr	r3, [r3, #12]
7001204a:	899b      	ldrh	r3, [r3, #12]
7001204c:	b29b      	uxth	r3, r3
7001204e:	4618      	mov	r0, r3
70012050:	f7f7 fcbe 	bl	700099d0 <lwip_htons>
70012054:	4603      	mov	r3, r0
70012056:	b2db      	uxtb	r3, r3
70012058:	f003 0307 	and.w	r3, r3, #7
7001205c:	2b00      	cmp	r3, #0
7001205e:	d116      	bne.n	7001208e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
70012060:	68fb      	ldr	r3, [r7, #12]
70012062:	68db      	ldr	r3, [r3, #12]
70012064:	899b      	ldrh	r3, [r3, #12]
70012066:	b29c      	uxth	r4, r3
70012068:	2001      	movs	r0, #1
7001206a:	f7f7 fcb1 	bl	700099d0 <lwip_htons>
7001206e:	4603      	mov	r3, r0
70012070:	461a      	mov	r2, r3
70012072:	68fb      	ldr	r3, [r7, #12]
70012074:	68db      	ldr	r3, [r3, #12]
70012076:	4322      	orrs	r2, r4
70012078:	b292      	uxth	r2, r2
7001207a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
7001207c:	687b      	ldr	r3, [r7, #4]
7001207e:	8b5b      	ldrh	r3, [r3, #26]
70012080:	f043 0320 	orr.w	r3, r3, #32
70012084:	b29a      	uxth	r2, r3
70012086:	687b      	ldr	r3, [r7, #4]
70012088:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
7001208a:	2300      	movs	r3, #0
7001208c:	e004      	b.n	70012098 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
7001208e:	2101      	movs	r1, #1
70012090:	6878      	ldr	r0, [r7, #4]
70012092:	f000 f80b 	bl	700120ac <tcp_enqueue_flags>
70012096:	4603      	mov	r3, r0
}
70012098:	4618      	mov	r0, r3
7001209a:	3714      	adds	r7, #20
7001209c:	46bd      	mov	sp, r7
7001209e:	bd90      	pop	{r4, r7, pc}
700120a0:	70016694 	.word	0x70016694
700120a4:	70016a7c 	.word	0x70016a7c
700120a8:	70016714 	.word	0x70016714

700120ac <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
700120ac:	b580      	push	{r7, lr}
700120ae:	b08a      	sub	sp, #40	@ 0x28
700120b0:	af02      	add	r7, sp, #8
700120b2:	6078      	str	r0, [r7, #4]
700120b4:	460b      	mov	r3, r1
700120b6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
700120b8:	2300      	movs	r3, #0
700120ba:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
700120bc:	2300      	movs	r3, #0
700120be:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
700120c0:	78fb      	ldrb	r3, [r7, #3]
700120c2:	f003 0303 	and.w	r3, r3, #3
700120c6:	2b00      	cmp	r3, #0
700120c8:	d106      	bne.n	700120d8 <tcp_enqueue_flags+0x2c>
700120ca:	4b67      	ldr	r3, [pc, #412]	@ (70012268 <tcp_enqueue_flags+0x1bc>)
700120cc:	f240 4212 	movw	r2, #1042	@ 0x412
700120d0:	4966      	ldr	r1, [pc, #408]	@ (7001226c <tcp_enqueue_flags+0x1c0>)
700120d2:	4867      	ldr	r0, [pc, #412]	@ (70012270 <tcp_enqueue_flags+0x1c4>)
700120d4:	f001 fe24 	bl	70013d20 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
700120d8:	687b      	ldr	r3, [r7, #4]
700120da:	2b00      	cmp	r3, #0
700120dc:	d106      	bne.n	700120ec <tcp_enqueue_flags+0x40>
700120de:	4b62      	ldr	r3, [pc, #392]	@ (70012268 <tcp_enqueue_flags+0x1bc>)
700120e0:	f240 4214 	movw	r2, #1044	@ 0x414
700120e4:	4963      	ldr	r1, [pc, #396]	@ (70012274 <tcp_enqueue_flags+0x1c8>)
700120e6:	4862      	ldr	r0, [pc, #392]	@ (70012270 <tcp_enqueue_flags+0x1c4>)
700120e8:	f001 fe1a 	bl	70013d20 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
700120ec:	78fb      	ldrb	r3, [r7, #3]
700120ee:	f003 0302 	and.w	r3, r3, #2
700120f2:	2b00      	cmp	r3, #0
700120f4:	d001      	beq.n	700120fa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
700120f6:	2301      	movs	r3, #1
700120f8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
700120fa:	7ffb      	ldrb	r3, [r7, #31]
700120fc:	009b      	lsls	r3, r3, #2
700120fe:	b2db      	uxtb	r3, r3
70012100:	f003 0304 	and.w	r3, r3, #4
70012104:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
70012106:	7dfb      	ldrb	r3, [r7, #23]
70012108:	b29b      	uxth	r3, r3
7001210a:	f44f 7220 	mov.w	r2, #640	@ 0x280
7001210e:	4619      	mov	r1, r3
70012110:	2036      	movs	r0, #54	@ 0x36
70012112:	f7fb f8bf 	bl	7000d294 <pbuf_alloc>
70012116:	6138      	str	r0, [r7, #16]
70012118:	693b      	ldr	r3, [r7, #16]
7001211a:	2b00      	cmp	r3, #0
7001211c:	d109      	bne.n	70012132 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
7001211e:	687b      	ldr	r3, [r7, #4]
70012120:	8b5b      	ldrh	r3, [r3, #26]
70012122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
70012126:	b29a      	uxth	r2, r3
70012128:	687b      	ldr	r3, [r7, #4]
7001212a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
7001212c:	f04f 33ff 	mov.w	r3, #4294967295
70012130:	e095      	b.n	7001225e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
70012132:	693b      	ldr	r3, [r7, #16]
70012134:	895a      	ldrh	r2, [r3, #10]
70012136:	7dfb      	ldrb	r3, [r7, #23]
70012138:	b29b      	uxth	r3, r3
7001213a:	429a      	cmp	r2, r3
7001213c:	d206      	bcs.n	7001214c <tcp_enqueue_flags+0xa0>
7001213e:	4b4a      	ldr	r3, [pc, #296]	@ (70012268 <tcp_enqueue_flags+0x1bc>)
70012140:	f240 423a 	movw	r2, #1082	@ 0x43a
70012144:	494c      	ldr	r1, [pc, #304]	@ (70012278 <tcp_enqueue_flags+0x1cc>)
70012146:	484a      	ldr	r0, [pc, #296]	@ (70012270 <tcp_enqueue_flags+0x1c4>)
70012148:	f001 fdea 	bl	70013d20 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
7001214c:	687b      	ldr	r3, [r7, #4]
7001214e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
70012150:	78fa      	ldrb	r2, [r7, #3]
70012152:	7ffb      	ldrb	r3, [r7, #31]
70012154:	9300      	str	r3, [sp, #0]
70012156:	460b      	mov	r3, r1
70012158:	6939      	ldr	r1, [r7, #16]
7001215a:	6878      	ldr	r0, [r7, #4]
7001215c:	f7ff fd70 	bl	70011c40 <tcp_create_segment>
70012160:	60f8      	str	r0, [r7, #12]
70012162:	68fb      	ldr	r3, [r7, #12]
70012164:	2b00      	cmp	r3, #0
70012166:	d109      	bne.n	7001217c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
70012168:	687b      	ldr	r3, [r7, #4]
7001216a:	8b5b      	ldrh	r3, [r3, #26]
7001216c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
70012170:	b29a      	uxth	r2, r3
70012172:	687b      	ldr	r3, [r7, #4]
70012174:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
70012176:	f04f 33ff 	mov.w	r3, #4294967295
7001217a:	e070      	b.n	7001225e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
7001217c:	68fb      	ldr	r3, [r7, #12]
7001217e:	68db      	ldr	r3, [r3, #12]
70012180:	f003 0303 	and.w	r3, r3, #3
70012184:	2b00      	cmp	r3, #0
70012186:	d006      	beq.n	70012196 <tcp_enqueue_flags+0xea>
70012188:	4b37      	ldr	r3, [pc, #220]	@ (70012268 <tcp_enqueue_flags+0x1bc>)
7001218a:	f240 4243 	movw	r2, #1091	@ 0x443
7001218e:	493b      	ldr	r1, [pc, #236]	@ (7001227c <tcp_enqueue_flags+0x1d0>)
70012190:	4837      	ldr	r0, [pc, #220]	@ (70012270 <tcp_enqueue_flags+0x1c4>)
70012192:	f001 fdc5 	bl	70013d20 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
70012196:	68fb      	ldr	r3, [r7, #12]
70012198:	891b      	ldrh	r3, [r3, #8]
7001219a:	2b00      	cmp	r3, #0
7001219c:	d006      	beq.n	700121ac <tcp_enqueue_flags+0x100>
7001219e:	4b32      	ldr	r3, [pc, #200]	@ (70012268 <tcp_enqueue_flags+0x1bc>)
700121a0:	f240 4244 	movw	r2, #1092	@ 0x444
700121a4:	4936      	ldr	r1, [pc, #216]	@ (70012280 <tcp_enqueue_flags+0x1d4>)
700121a6:	4832      	ldr	r0, [pc, #200]	@ (70012270 <tcp_enqueue_flags+0x1c4>)
700121a8:	f001 fdba 	bl	70013d20 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
700121ac:	687b      	ldr	r3, [r7, #4]
700121ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
700121b0:	2b00      	cmp	r3, #0
700121b2:	d103      	bne.n	700121bc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
700121b4:	687b      	ldr	r3, [r7, #4]
700121b6:	68fa      	ldr	r2, [r7, #12]
700121b8:	66da      	str	r2, [r3, #108]	@ 0x6c
700121ba:	e00d      	b.n	700121d8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
700121bc:	687b      	ldr	r3, [r7, #4]
700121be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
700121c0:	61bb      	str	r3, [r7, #24]
700121c2:	e002      	b.n	700121ca <tcp_enqueue_flags+0x11e>
700121c4:	69bb      	ldr	r3, [r7, #24]
700121c6:	681b      	ldr	r3, [r3, #0]
700121c8:	61bb      	str	r3, [r7, #24]
700121ca:	69bb      	ldr	r3, [r7, #24]
700121cc:	681b      	ldr	r3, [r3, #0]
700121ce:	2b00      	cmp	r3, #0
700121d0:	d1f8      	bne.n	700121c4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
700121d2:	69bb      	ldr	r3, [r7, #24]
700121d4:	68fa      	ldr	r2, [r7, #12]
700121d6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
700121d8:	687b      	ldr	r3, [r7, #4]
700121da:	2200      	movs	r2, #0
700121dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
700121e0:	78fb      	ldrb	r3, [r7, #3]
700121e2:	f003 0302 	and.w	r3, r3, #2
700121e6:	2b00      	cmp	r3, #0
700121e8:	d104      	bne.n	700121f4 <tcp_enqueue_flags+0x148>
700121ea:	78fb      	ldrb	r3, [r7, #3]
700121ec:	f003 0301 	and.w	r3, r3, #1
700121f0:	2b00      	cmp	r3, #0
700121f2:	d004      	beq.n	700121fe <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
700121f4:	687b      	ldr	r3, [r7, #4]
700121f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
700121f8:	1c5a      	adds	r2, r3, #1
700121fa:	687b      	ldr	r3, [r7, #4]
700121fc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
700121fe:	78fb      	ldrb	r3, [r7, #3]
70012200:	f003 0301 	and.w	r3, r3, #1
70012204:	2b00      	cmp	r3, #0
70012206:	d006      	beq.n	70012216 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
70012208:	687b      	ldr	r3, [r7, #4]
7001220a:	8b5b      	ldrh	r3, [r3, #26]
7001220c:	f043 0320 	orr.w	r3, r3, #32
70012210:	b29a      	uxth	r2, r3
70012212:	687b      	ldr	r3, [r7, #4]
70012214:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
70012216:	68fb      	ldr	r3, [r7, #12]
70012218:	685b      	ldr	r3, [r3, #4]
7001221a:	4618      	mov	r0, r3
7001221c:	f7fb fba2 	bl	7000d964 <pbuf_clen>
70012220:	4603      	mov	r3, r0
70012222:	461a      	mov	r2, r3
70012224:	687b      	ldr	r3, [r7, #4]
70012226:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
7001222a:	4413      	add	r3, r2
7001222c:	b29a      	uxth	r2, r3
7001222e:	687b      	ldr	r3, [r7, #4]
70012230:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
70012234:	687b      	ldr	r3, [r7, #4]
70012236:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
7001223a:	2b00      	cmp	r3, #0
7001223c:	d00e      	beq.n	7001225c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
7001223e:	687b      	ldr	r3, [r7, #4]
70012240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70012242:	2b00      	cmp	r3, #0
70012244:	d10a      	bne.n	7001225c <tcp_enqueue_flags+0x1b0>
70012246:	687b      	ldr	r3, [r7, #4]
70012248:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7001224a:	2b00      	cmp	r3, #0
7001224c:	d106      	bne.n	7001225c <tcp_enqueue_flags+0x1b0>
7001224e:	4b06      	ldr	r3, [pc, #24]	@ (70012268 <tcp_enqueue_flags+0x1bc>)
70012250:	f240 4266 	movw	r2, #1126	@ 0x466
70012254:	490b      	ldr	r1, [pc, #44]	@ (70012284 <tcp_enqueue_flags+0x1d8>)
70012256:	4806      	ldr	r0, [pc, #24]	@ (70012270 <tcp_enqueue_flags+0x1c4>)
70012258:	f001 fd62 	bl	70013d20 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
7001225c:	2300      	movs	r3, #0
}
7001225e:	4618      	mov	r0, r3
70012260:	3720      	adds	r7, #32
70012262:	46bd      	mov	sp, r7
70012264:	bd80      	pop	{r7, pc}
70012266:	bf00      	nop
70012268:	70016694 	.word	0x70016694
7001226c:	70016a98 	.word	0x70016a98
70012270:	70016714 	.word	0x70016714
70012274:	70016af0 	.word	0x70016af0
70012278:	70016b10 	.word	0x70016b10
7001227c:	70016b4c 	.word	0x70016b4c
70012280:	70016b64 	.word	0x70016b64
70012284:	70016b90 	.word	0x70016b90

70012288 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
70012288:	b5b0      	push	{r4, r5, r7, lr}
7001228a:	b08a      	sub	sp, #40	@ 0x28
7001228c:	af00      	add	r7, sp, #0
7001228e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
70012290:	687b      	ldr	r3, [r7, #4]
70012292:	2b00      	cmp	r3, #0
70012294:	d106      	bne.n	700122a4 <tcp_output+0x1c>
70012296:	4b8a      	ldr	r3, [pc, #552]	@ (700124c0 <tcp_output+0x238>)
70012298:	f240 42e2 	movw	r2, #1250	@ 0x4e2
7001229c:	4989      	ldr	r1, [pc, #548]	@ (700124c4 <tcp_output+0x23c>)
7001229e:	488a      	ldr	r0, [pc, #552]	@ (700124c8 <tcp_output+0x240>)
700122a0:	f001 fd3e 	bl	70013d20 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
700122a4:	687b      	ldr	r3, [r7, #4]
700122a6:	7d1b      	ldrb	r3, [r3, #20]
700122a8:	2b01      	cmp	r3, #1
700122aa:	d106      	bne.n	700122ba <tcp_output+0x32>
700122ac:	4b84      	ldr	r3, [pc, #528]	@ (700124c0 <tcp_output+0x238>)
700122ae:	f240 42e4 	movw	r2, #1252	@ 0x4e4
700122b2:	4986      	ldr	r1, [pc, #536]	@ (700124cc <tcp_output+0x244>)
700122b4:	4884      	ldr	r0, [pc, #528]	@ (700124c8 <tcp_output+0x240>)
700122b6:	f001 fd33 	bl	70013d20 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
700122ba:	4b85      	ldr	r3, [pc, #532]	@ (700124d0 <tcp_output+0x248>)
700122bc:	681b      	ldr	r3, [r3, #0]
700122be:	687a      	ldr	r2, [r7, #4]
700122c0:	429a      	cmp	r2, r3
700122c2:	d101      	bne.n	700122c8 <tcp_output+0x40>
    return ERR_OK;
700122c4:	2300      	movs	r3, #0
700122c6:	e1ce      	b.n	70012666 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
700122c8:	687b      	ldr	r3, [r7, #4]
700122ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
700122ce:	687b      	ldr	r3, [r7, #4]
700122d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
700122d4:	4293      	cmp	r3, r2
700122d6:	bf28      	it	cs
700122d8:	4613      	movcs	r3, r2
700122da:	b29b      	uxth	r3, r3
700122dc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
700122de:	687b      	ldr	r3, [r7, #4]
700122e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
700122e2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
700122e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700122e6:	2b00      	cmp	r3, #0
700122e8:	d10b      	bne.n	70012302 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
700122ea:	687b      	ldr	r3, [r7, #4]
700122ec:	8b5b      	ldrh	r3, [r3, #26]
700122ee:	f003 0302 	and.w	r3, r3, #2
700122f2:	2b00      	cmp	r3, #0
700122f4:	f000 81aa 	beq.w	7001264c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
700122f8:	6878      	ldr	r0, [r7, #4]
700122fa:	f000 fdcb 	bl	70012e94 <tcp_send_empty_ack>
700122fe:	4603      	mov	r3, r0
70012300:	e1b1      	b.n	70012666 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
70012302:	6879      	ldr	r1, [r7, #4]
70012304:	687b      	ldr	r3, [r7, #4]
70012306:	3304      	adds	r3, #4
70012308:	461a      	mov	r2, r3
7001230a:	6878      	ldr	r0, [r7, #4]
7001230c:	f7ff fc7c 	bl	70011c08 <tcp_route>
70012310:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
70012312:	697b      	ldr	r3, [r7, #20]
70012314:	2b00      	cmp	r3, #0
70012316:	d102      	bne.n	7001231e <tcp_output+0x96>
    return ERR_RTE;
70012318:	f06f 0303 	mvn.w	r3, #3
7001231c:	e1a3      	b.n	70012666 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
7001231e:	687b      	ldr	r3, [r7, #4]
70012320:	2b00      	cmp	r3, #0
70012322:	d003      	beq.n	7001232c <tcp_output+0xa4>
70012324:	687b      	ldr	r3, [r7, #4]
70012326:	681b      	ldr	r3, [r3, #0]
70012328:	2b00      	cmp	r3, #0
7001232a:	d111      	bne.n	70012350 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
7001232c:	697b      	ldr	r3, [r7, #20]
7001232e:	2b00      	cmp	r3, #0
70012330:	d002      	beq.n	70012338 <tcp_output+0xb0>
70012332:	697b      	ldr	r3, [r7, #20]
70012334:	3304      	adds	r3, #4
70012336:	e000      	b.n	7001233a <tcp_output+0xb2>
70012338:	2300      	movs	r3, #0
7001233a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
7001233c:	693b      	ldr	r3, [r7, #16]
7001233e:	2b00      	cmp	r3, #0
70012340:	d102      	bne.n	70012348 <tcp_output+0xc0>
      return ERR_RTE;
70012342:	f06f 0303 	mvn.w	r3, #3
70012346:	e18e      	b.n	70012666 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
70012348:	693b      	ldr	r3, [r7, #16]
7001234a:	681a      	ldr	r2, [r3, #0]
7001234c:	687b      	ldr	r3, [r7, #4]
7001234e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
70012350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70012352:	68db      	ldr	r3, [r3, #12]
70012354:	685b      	ldr	r3, [r3, #4]
70012356:	4618      	mov	r0, r3
70012358:	f7f7 fb4f 	bl	700099fa <lwip_htonl>
7001235c:	4602      	mov	r2, r0
7001235e:	687b      	ldr	r3, [r7, #4]
70012360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70012362:	1ad3      	subs	r3, r2, r3
70012364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70012366:	8912      	ldrh	r2, [r2, #8]
70012368:	4413      	add	r3, r2
7001236a:	69ba      	ldr	r2, [r7, #24]
7001236c:	429a      	cmp	r2, r3
7001236e:	d227      	bcs.n	700123c0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
70012370:	687b      	ldr	r3, [r7, #4]
70012372:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
70012376:	461a      	mov	r2, r3
70012378:	69bb      	ldr	r3, [r7, #24]
7001237a:	4293      	cmp	r3, r2
7001237c:	d114      	bne.n	700123a8 <tcp_output+0x120>
7001237e:	687b      	ldr	r3, [r7, #4]
70012380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70012382:	2b00      	cmp	r3, #0
70012384:	d110      	bne.n	700123a8 <tcp_output+0x120>
70012386:	687b      	ldr	r3, [r7, #4]
70012388:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
7001238c:	2b00      	cmp	r3, #0
7001238e:	d10b      	bne.n	700123a8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
70012390:	687b      	ldr	r3, [r7, #4]
70012392:	2200      	movs	r2, #0
70012394:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
70012398:	687b      	ldr	r3, [r7, #4]
7001239a:	2201      	movs	r2, #1
7001239c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
700123a0:	687b      	ldr	r3, [r7, #4]
700123a2:	2200      	movs	r2, #0
700123a4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
700123a8:	687b      	ldr	r3, [r7, #4]
700123aa:	8b5b      	ldrh	r3, [r3, #26]
700123ac:	f003 0302 	and.w	r3, r3, #2
700123b0:	2b00      	cmp	r3, #0
700123b2:	f000 814d 	beq.w	70012650 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
700123b6:	6878      	ldr	r0, [r7, #4]
700123b8:	f000 fd6c 	bl	70012e94 <tcp_send_empty_ack>
700123bc:	4603      	mov	r3, r0
700123be:	e152      	b.n	70012666 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
700123c0:	687b      	ldr	r3, [r7, #4]
700123c2:	2200      	movs	r2, #0
700123c4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
700123c8:	687b      	ldr	r3, [r7, #4]
700123ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
700123cc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
700123ce:	6a3b      	ldr	r3, [r7, #32]
700123d0:	2b00      	cmp	r3, #0
700123d2:	f000 811c 	beq.w	7001260e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
700123d6:	e002      	b.n	700123de <tcp_output+0x156>
700123d8:	6a3b      	ldr	r3, [r7, #32]
700123da:	681b      	ldr	r3, [r3, #0]
700123dc:	623b      	str	r3, [r7, #32]
700123de:	6a3b      	ldr	r3, [r7, #32]
700123e0:	681b      	ldr	r3, [r3, #0]
700123e2:	2b00      	cmp	r3, #0
700123e4:	d1f8      	bne.n	700123d8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
700123e6:	e112      	b.n	7001260e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
700123e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700123ea:	68db      	ldr	r3, [r3, #12]
700123ec:	899b      	ldrh	r3, [r3, #12]
700123ee:	b29b      	uxth	r3, r3
700123f0:	4618      	mov	r0, r3
700123f2:	f7f7 faed 	bl	700099d0 <lwip_htons>
700123f6:	4603      	mov	r3, r0
700123f8:	b2db      	uxtb	r3, r3
700123fa:	f003 0304 	and.w	r3, r3, #4
700123fe:	2b00      	cmp	r3, #0
70012400:	d006      	beq.n	70012410 <tcp_output+0x188>
70012402:	4b2f      	ldr	r3, [pc, #188]	@ (700124c0 <tcp_output+0x238>)
70012404:	f240 5237 	movw	r2, #1335	@ 0x537
70012408:	4932      	ldr	r1, [pc, #200]	@ (700124d4 <tcp_output+0x24c>)
7001240a:	482f      	ldr	r0, [pc, #188]	@ (700124c8 <tcp_output+0x240>)
7001240c:	f001 fc88 	bl	70013d20 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
70012410:	687b      	ldr	r3, [r7, #4]
70012412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70012414:	2b00      	cmp	r3, #0
70012416:	d01f      	beq.n	70012458 <tcp_output+0x1d0>
70012418:	687b      	ldr	r3, [r7, #4]
7001241a:	8b5b      	ldrh	r3, [r3, #26]
7001241c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
70012420:	2b00      	cmp	r3, #0
70012422:	d119      	bne.n	70012458 <tcp_output+0x1d0>
70012424:	687b      	ldr	r3, [r7, #4]
70012426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70012428:	2b00      	cmp	r3, #0
7001242a:	d00b      	beq.n	70012444 <tcp_output+0x1bc>
7001242c:	687b      	ldr	r3, [r7, #4]
7001242e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70012430:	681b      	ldr	r3, [r3, #0]
70012432:	2b00      	cmp	r3, #0
70012434:	d110      	bne.n	70012458 <tcp_output+0x1d0>
70012436:	687b      	ldr	r3, [r7, #4]
70012438:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7001243a:	891a      	ldrh	r2, [r3, #8]
7001243c:	687b      	ldr	r3, [r7, #4]
7001243e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70012440:	429a      	cmp	r2, r3
70012442:	d209      	bcs.n	70012458 <tcp_output+0x1d0>
70012444:	687b      	ldr	r3, [r7, #4]
70012446:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
7001244a:	2b00      	cmp	r3, #0
7001244c:	d004      	beq.n	70012458 <tcp_output+0x1d0>
7001244e:	687b      	ldr	r3, [r7, #4]
70012450:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
70012454:	2b08      	cmp	r3, #8
70012456:	d901      	bls.n	7001245c <tcp_output+0x1d4>
70012458:	2301      	movs	r3, #1
7001245a:	e000      	b.n	7001245e <tcp_output+0x1d6>
7001245c:	2300      	movs	r3, #0
7001245e:	2b00      	cmp	r3, #0
70012460:	d106      	bne.n	70012470 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
70012462:	687b      	ldr	r3, [r7, #4]
70012464:	8b5b      	ldrh	r3, [r3, #26]
70012466:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
7001246a:	2b00      	cmp	r3, #0
7001246c:	f000 80e4 	beq.w	70012638 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
70012470:	687b      	ldr	r3, [r7, #4]
70012472:	7d1b      	ldrb	r3, [r3, #20]
70012474:	2b02      	cmp	r3, #2
70012476:	d00d      	beq.n	70012494 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
70012478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7001247a:	68db      	ldr	r3, [r3, #12]
7001247c:	899b      	ldrh	r3, [r3, #12]
7001247e:	b29c      	uxth	r4, r3
70012480:	2010      	movs	r0, #16
70012482:	f7f7 faa5 	bl	700099d0 <lwip_htons>
70012486:	4603      	mov	r3, r0
70012488:	461a      	mov	r2, r3
7001248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7001248c:	68db      	ldr	r3, [r3, #12]
7001248e:	4322      	orrs	r2, r4
70012490:	b292      	uxth	r2, r2
70012492:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
70012494:	697a      	ldr	r2, [r7, #20]
70012496:	6879      	ldr	r1, [r7, #4]
70012498:	6a78      	ldr	r0, [r7, #36]	@ 0x24
7001249a:	f000 f909 	bl	700126b0 <tcp_output_segment>
7001249e:	4603      	mov	r3, r0
700124a0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
700124a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
700124a6:	2b00      	cmp	r3, #0
700124a8:	d016      	beq.n	700124d8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
700124aa:	687b      	ldr	r3, [r7, #4]
700124ac:	8b5b      	ldrh	r3, [r3, #26]
700124ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
700124b2:	b29a      	uxth	r2, r3
700124b4:	687b      	ldr	r3, [r7, #4]
700124b6:	835a      	strh	r2, [r3, #26]
      return err;
700124b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
700124bc:	e0d3      	b.n	70012666 <tcp_output+0x3de>
700124be:	bf00      	nop
700124c0:	70016694 	.word	0x70016694
700124c4:	70016bb8 	.word	0x70016bb8
700124c8:	70016714 	.word	0x70016714
700124cc:	70016bd0 	.word	0x70016bd0
700124d0:	240084c4 	.word	0x240084c4
700124d4:	70016bf8 	.word	0x70016bf8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
700124d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700124da:	681a      	ldr	r2, [r3, #0]
700124dc:	687b      	ldr	r3, [r7, #4]
700124de:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
700124e0:	687b      	ldr	r3, [r7, #4]
700124e2:	7d1b      	ldrb	r3, [r3, #20]
700124e4:	2b02      	cmp	r3, #2
700124e6:	d006      	beq.n	700124f6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
700124e8:	687b      	ldr	r3, [r7, #4]
700124ea:	8b5b      	ldrh	r3, [r3, #26]
700124ec:	f023 0303 	bic.w	r3, r3, #3
700124f0:	b29a      	uxth	r2, r3
700124f2:	687b      	ldr	r3, [r7, #4]
700124f4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
700124f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700124f8:	68db      	ldr	r3, [r3, #12]
700124fa:	685b      	ldr	r3, [r3, #4]
700124fc:	4618      	mov	r0, r3
700124fe:	f7f7 fa7c 	bl	700099fa <lwip_htonl>
70012502:	4604      	mov	r4, r0
70012504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70012506:	891b      	ldrh	r3, [r3, #8]
70012508:	461d      	mov	r5, r3
7001250a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7001250c:	68db      	ldr	r3, [r3, #12]
7001250e:	899b      	ldrh	r3, [r3, #12]
70012510:	b29b      	uxth	r3, r3
70012512:	4618      	mov	r0, r3
70012514:	f7f7 fa5c 	bl	700099d0 <lwip_htons>
70012518:	4603      	mov	r3, r0
7001251a:	b2db      	uxtb	r3, r3
7001251c:	f003 0303 	and.w	r3, r3, #3
70012520:	2b00      	cmp	r3, #0
70012522:	d001      	beq.n	70012528 <tcp_output+0x2a0>
70012524:	2301      	movs	r3, #1
70012526:	e000      	b.n	7001252a <tcp_output+0x2a2>
70012528:	2300      	movs	r3, #0
7001252a:	442b      	add	r3, r5
7001252c:	4423      	add	r3, r4
7001252e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
70012530:	687b      	ldr	r3, [r7, #4]
70012532:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
70012534:	68bb      	ldr	r3, [r7, #8]
70012536:	1ad3      	subs	r3, r2, r3
70012538:	2b00      	cmp	r3, #0
7001253a:	da02      	bge.n	70012542 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
7001253c:	687b      	ldr	r3, [r7, #4]
7001253e:	68ba      	ldr	r2, [r7, #8]
70012540:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
70012542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70012544:	891b      	ldrh	r3, [r3, #8]
70012546:	461c      	mov	r4, r3
70012548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7001254a:	68db      	ldr	r3, [r3, #12]
7001254c:	899b      	ldrh	r3, [r3, #12]
7001254e:	b29b      	uxth	r3, r3
70012550:	4618      	mov	r0, r3
70012552:	f7f7 fa3d 	bl	700099d0 <lwip_htons>
70012556:	4603      	mov	r3, r0
70012558:	b2db      	uxtb	r3, r3
7001255a:	f003 0303 	and.w	r3, r3, #3
7001255e:	2b00      	cmp	r3, #0
70012560:	d001      	beq.n	70012566 <tcp_output+0x2de>
70012562:	2301      	movs	r3, #1
70012564:	e000      	b.n	70012568 <tcp_output+0x2e0>
70012566:	2300      	movs	r3, #0
70012568:	4423      	add	r3, r4
7001256a:	2b00      	cmp	r3, #0
7001256c:	d049      	beq.n	70012602 <tcp_output+0x37a>
      seg->next = NULL;
7001256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70012570:	2200      	movs	r2, #0
70012572:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
70012574:	687b      	ldr	r3, [r7, #4]
70012576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70012578:	2b00      	cmp	r3, #0
7001257a:	d105      	bne.n	70012588 <tcp_output+0x300>
        pcb->unacked = seg;
7001257c:	687b      	ldr	r3, [r7, #4]
7001257e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70012580:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
70012582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70012584:	623b      	str	r3, [r7, #32]
70012586:	e03f      	b.n	70012608 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
70012588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7001258a:	68db      	ldr	r3, [r3, #12]
7001258c:	685b      	ldr	r3, [r3, #4]
7001258e:	4618      	mov	r0, r3
70012590:	f7f7 fa33 	bl	700099fa <lwip_htonl>
70012594:	4604      	mov	r4, r0
70012596:	6a3b      	ldr	r3, [r7, #32]
70012598:	68db      	ldr	r3, [r3, #12]
7001259a:	685b      	ldr	r3, [r3, #4]
7001259c:	4618      	mov	r0, r3
7001259e:	f7f7 fa2c 	bl	700099fa <lwip_htonl>
700125a2:	4603      	mov	r3, r0
700125a4:	1ae3      	subs	r3, r4, r3
700125a6:	2b00      	cmp	r3, #0
700125a8:	da24      	bge.n	700125f4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
700125aa:	687b      	ldr	r3, [r7, #4]
700125ac:	3370      	adds	r3, #112	@ 0x70
700125ae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
700125b0:	e002      	b.n	700125b8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
700125b2:	69fb      	ldr	r3, [r7, #28]
700125b4:	681b      	ldr	r3, [r3, #0]
700125b6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
700125b8:	69fb      	ldr	r3, [r7, #28]
700125ba:	681b      	ldr	r3, [r3, #0]
700125bc:	2b00      	cmp	r3, #0
700125be:	d011      	beq.n	700125e4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
700125c0:	69fb      	ldr	r3, [r7, #28]
700125c2:	681b      	ldr	r3, [r3, #0]
700125c4:	68db      	ldr	r3, [r3, #12]
700125c6:	685b      	ldr	r3, [r3, #4]
700125c8:	4618      	mov	r0, r3
700125ca:	f7f7 fa16 	bl	700099fa <lwip_htonl>
700125ce:	4604      	mov	r4, r0
700125d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700125d2:	68db      	ldr	r3, [r3, #12]
700125d4:	685b      	ldr	r3, [r3, #4]
700125d6:	4618      	mov	r0, r3
700125d8:	f7f7 fa0f 	bl	700099fa <lwip_htonl>
700125dc:	4603      	mov	r3, r0
700125de:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
700125e0:	2b00      	cmp	r3, #0
700125e2:	dbe6      	blt.n	700125b2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
700125e4:	69fb      	ldr	r3, [r7, #28]
700125e6:	681a      	ldr	r2, [r3, #0]
700125e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700125ea:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
700125ec:	69fb      	ldr	r3, [r7, #28]
700125ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
700125f0:	601a      	str	r2, [r3, #0]
700125f2:	e009      	b.n	70012608 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
700125f4:	6a3b      	ldr	r3, [r7, #32]
700125f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
700125f8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
700125fa:	6a3b      	ldr	r3, [r7, #32]
700125fc:	681b      	ldr	r3, [r3, #0]
700125fe:	623b      	str	r3, [r7, #32]
70012600:	e002      	b.n	70012608 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
70012602:	6a78      	ldr	r0, [r7, #36]	@ 0x24
70012604:	f7fc fc60 	bl	7000eec8 <tcp_seg_free>
    }
    seg = pcb->unsent;
70012608:	687b      	ldr	r3, [r7, #4]
7001260a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7001260c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
7001260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70012610:	2b00      	cmp	r3, #0
70012612:	d012      	beq.n	7001263a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
70012614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70012616:	68db      	ldr	r3, [r3, #12]
70012618:	685b      	ldr	r3, [r3, #4]
7001261a:	4618      	mov	r0, r3
7001261c:	f7f7 f9ed 	bl	700099fa <lwip_htonl>
70012620:	4602      	mov	r2, r0
70012622:	687b      	ldr	r3, [r7, #4]
70012624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70012626:	1ad3      	subs	r3, r2, r3
70012628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
7001262a:	8912      	ldrh	r2, [r2, #8]
7001262c:	4413      	add	r3, r2
  while (seg != NULL &&
7001262e:	69ba      	ldr	r2, [r7, #24]
70012630:	429a      	cmp	r2, r3
70012632:	f4bf aed9 	bcs.w	700123e8 <tcp_output+0x160>
70012636:	e000      	b.n	7001263a <tcp_output+0x3b2>
      break;
70012638:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
7001263a:	687b      	ldr	r3, [r7, #4]
7001263c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7001263e:	2b00      	cmp	r3, #0
70012640:	d108      	bne.n	70012654 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
70012642:	687b      	ldr	r3, [r7, #4]
70012644:	2200      	movs	r2, #0
70012646:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
7001264a:	e004      	b.n	70012656 <tcp_output+0x3ce>
    goto output_done;
7001264c:	bf00      	nop
7001264e:	e002      	b.n	70012656 <tcp_output+0x3ce>
    goto output_done;
70012650:	bf00      	nop
70012652:	e000      	b.n	70012656 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
70012654:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
70012656:	687b      	ldr	r3, [r7, #4]
70012658:	8b5b      	ldrh	r3, [r3, #26]
7001265a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
7001265e:	b29a      	uxth	r2, r3
70012660:	687b      	ldr	r3, [r7, #4]
70012662:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
70012664:	2300      	movs	r3, #0
}
70012666:	4618      	mov	r0, r3
70012668:	3728      	adds	r7, #40	@ 0x28
7001266a:	46bd      	mov	sp, r7
7001266c:	bdb0      	pop	{r4, r5, r7, pc}
7001266e:	bf00      	nop

70012670 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
70012670:	b580      	push	{r7, lr}
70012672:	b082      	sub	sp, #8
70012674:	af00      	add	r7, sp, #0
70012676:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
70012678:	687b      	ldr	r3, [r7, #4]
7001267a:	2b00      	cmp	r3, #0
7001267c:	d106      	bne.n	7001268c <tcp_output_segment_busy+0x1c>
7001267e:	4b09      	ldr	r3, [pc, #36]	@ (700126a4 <tcp_output_segment_busy+0x34>)
70012680:	f240 529b 	movw	r2, #1435	@ 0x59b
70012684:	4908      	ldr	r1, [pc, #32]	@ (700126a8 <tcp_output_segment_busy+0x38>)
70012686:	4809      	ldr	r0, [pc, #36]	@ (700126ac <tcp_output_segment_busy+0x3c>)
70012688:	f001 fb4a 	bl	70013d20 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
7001268c:	687b      	ldr	r3, [r7, #4]
7001268e:	685b      	ldr	r3, [r3, #4]
70012690:	7b9b      	ldrb	r3, [r3, #14]
70012692:	2b01      	cmp	r3, #1
70012694:	d001      	beq.n	7001269a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
70012696:	2301      	movs	r3, #1
70012698:	e000      	b.n	7001269c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
7001269a:	2300      	movs	r3, #0
}
7001269c:	4618      	mov	r0, r3
7001269e:	3708      	adds	r7, #8
700126a0:	46bd      	mov	sp, r7
700126a2:	bd80      	pop	{r7, pc}
700126a4:	70016694 	.word	0x70016694
700126a8:	70016c10 	.word	0x70016c10
700126ac:	70016714 	.word	0x70016714

700126b0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
700126b0:	b5b0      	push	{r4, r5, r7, lr}
700126b2:	b08c      	sub	sp, #48	@ 0x30
700126b4:	af04      	add	r7, sp, #16
700126b6:	60f8      	str	r0, [r7, #12]
700126b8:	60b9      	str	r1, [r7, #8]
700126ba:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
700126bc:	68fb      	ldr	r3, [r7, #12]
700126be:	2b00      	cmp	r3, #0
700126c0:	d106      	bne.n	700126d0 <tcp_output_segment+0x20>
700126c2:	4b64      	ldr	r3, [pc, #400]	@ (70012854 <tcp_output_segment+0x1a4>)
700126c4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
700126c8:	4963      	ldr	r1, [pc, #396]	@ (70012858 <tcp_output_segment+0x1a8>)
700126ca:	4864      	ldr	r0, [pc, #400]	@ (7001285c <tcp_output_segment+0x1ac>)
700126cc:	f001 fb28 	bl	70013d20 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
700126d0:	68bb      	ldr	r3, [r7, #8]
700126d2:	2b00      	cmp	r3, #0
700126d4:	d106      	bne.n	700126e4 <tcp_output_segment+0x34>
700126d6:	4b5f      	ldr	r3, [pc, #380]	@ (70012854 <tcp_output_segment+0x1a4>)
700126d8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
700126dc:	4960      	ldr	r1, [pc, #384]	@ (70012860 <tcp_output_segment+0x1b0>)
700126de:	485f      	ldr	r0, [pc, #380]	@ (7001285c <tcp_output_segment+0x1ac>)
700126e0:	f001 fb1e 	bl	70013d20 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
700126e4:	687b      	ldr	r3, [r7, #4]
700126e6:	2b00      	cmp	r3, #0
700126e8:	d106      	bne.n	700126f8 <tcp_output_segment+0x48>
700126ea:	4b5a      	ldr	r3, [pc, #360]	@ (70012854 <tcp_output_segment+0x1a4>)
700126ec:	f240 52bb 	movw	r2, #1467	@ 0x5bb
700126f0:	495c      	ldr	r1, [pc, #368]	@ (70012864 <tcp_output_segment+0x1b4>)
700126f2:	485a      	ldr	r0, [pc, #360]	@ (7001285c <tcp_output_segment+0x1ac>)
700126f4:	f001 fb14 	bl	70013d20 <iprintf>

  if (tcp_output_segment_busy(seg)) {
700126f8:	68f8      	ldr	r0, [r7, #12]
700126fa:	f7ff ffb9 	bl	70012670 <tcp_output_segment_busy>
700126fe:	4603      	mov	r3, r0
70012700:	2b00      	cmp	r3, #0
70012702:	d001      	beq.n	70012708 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
70012704:	2300      	movs	r3, #0
70012706:	e0a1      	b.n	7001284c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
70012708:	68bb      	ldr	r3, [r7, #8]
7001270a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
7001270c:	68fb      	ldr	r3, [r7, #12]
7001270e:	68dc      	ldr	r4, [r3, #12]
70012710:	4610      	mov	r0, r2
70012712:	f7f7 f972 	bl	700099fa <lwip_htonl>
70012716:	4603      	mov	r3, r0
70012718:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
7001271a:	68bb      	ldr	r3, [r7, #8]
7001271c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
7001271e:	68fb      	ldr	r3, [r7, #12]
70012720:	68dc      	ldr	r4, [r3, #12]
70012722:	4610      	mov	r0, r2
70012724:	f7f7 f954 	bl	700099d0 <lwip_htons>
70012728:	4603      	mov	r3, r0
7001272a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
7001272c:	68bb      	ldr	r3, [r7, #8]
7001272e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70012730:	68ba      	ldr	r2, [r7, #8]
70012732:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
70012734:	441a      	add	r2, r3
70012736:	68bb      	ldr	r3, [r7, #8]
70012738:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
7001273a:	68fb      	ldr	r3, [r7, #12]
7001273c:	68db      	ldr	r3, [r3, #12]
7001273e:	3314      	adds	r3, #20
70012740:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
70012742:	68fb      	ldr	r3, [r7, #12]
70012744:	7a9b      	ldrb	r3, [r3, #10]
70012746:	f003 0301 	and.w	r3, r3, #1
7001274a:	2b00      	cmp	r3, #0
7001274c:	d015      	beq.n	7001277a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
7001274e:	68bb      	ldr	r3, [r7, #8]
70012750:	3304      	adds	r3, #4
70012752:	461a      	mov	r2, r3
70012754:	6879      	ldr	r1, [r7, #4]
70012756:	f44f 7006 	mov.w	r0, #536	@ 0x218
7001275a:	f7fc fe8f 	bl	7000f47c <tcp_eff_send_mss_netif>
7001275e:	4603      	mov	r3, r0
70012760:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
70012762:	8b7b      	ldrh	r3, [r7, #26]
70012764:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
70012768:	4618      	mov	r0, r3
7001276a:	f7f7 f946 	bl	700099fa <lwip_htonl>
7001276e:	4602      	mov	r2, r0
70012770:	69fb      	ldr	r3, [r7, #28]
70012772:	601a      	str	r2, [r3, #0]
    opts += 1;
70012774:	69fb      	ldr	r3, [r7, #28]
70012776:	3304      	adds	r3, #4
70012778:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
7001277a:	68bb      	ldr	r3, [r7, #8]
7001277c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
70012780:	2b00      	cmp	r3, #0
70012782:	da02      	bge.n	7001278a <tcp_output_segment+0xda>
    pcb->rtime = 0;
70012784:	68bb      	ldr	r3, [r7, #8]
70012786:	2200      	movs	r2, #0
70012788:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
7001278a:	68bb      	ldr	r3, [r7, #8]
7001278c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
7001278e:	2b00      	cmp	r3, #0
70012790:	d10c      	bne.n	700127ac <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
70012792:	4b35      	ldr	r3, [pc, #212]	@ (70012868 <tcp_output_segment+0x1b8>)
70012794:	681a      	ldr	r2, [r3, #0]
70012796:	68bb      	ldr	r3, [r7, #8]
70012798:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
7001279a:	68fb      	ldr	r3, [r7, #12]
7001279c:	68db      	ldr	r3, [r3, #12]
7001279e:	685b      	ldr	r3, [r3, #4]
700127a0:	4618      	mov	r0, r3
700127a2:	f7f7 f92a 	bl	700099fa <lwip_htonl>
700127a6:	4602      	mov	r2, r0
700127a8:	68bb      	ldr	r3, [r7, #8]
700127aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
700127ac:	68fb      	ldr	r3, [r7, #12]
700127ae:	68da      	ldr	r2, [r3, #12]
700127b0:	68fb      	ldr	r3, [r7, #12]
700127b2:	685b      	ldr	r3, [r3, #4]
700127b4:	685b      	ldr	r3, [r3, #4]
700127b6:	1ad3      	subs	r3, r2, r3
700127b8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
700127ba:	68fb      	ldr	r3, [r7, #12]
700127bc:	685b      	ldr	r3, [r3, #4]
700127be:	8959      	ldrh	r1, [r3, #10]
700127c0:	68fb      	ldr	r3, [r7, #12]
700127c2:	685b      	ldr	r3, [r3, #4]
700127c4:	8b3a      	ldrh	r2, [r7, #24]
700127c6:	1a8a      	subs	r2, r1, r2
700127c8:	b292      	uxth	r2, r2
700127ca:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
700127cc:	68fb      	ldr	r3, [r7, #12]
700127ce:	685b      	ldr	r3, [r3, #4]
700127d0:	8919      	ldrh	r1, [r3, #8]
700127d2:	68fb      	ldr	r3, [r7, #12]
700127d4:	685b      	ldr	r3, [r3, #4]
700127d6:	8b3a      	ldrh	r2, [r7, #24]
700127d8:	1a8a      	subs	r2, r1, r2
700127da:	b292      	uxth	r2, r2
700127dc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
700127de:	68fb      	ldr	r3, [r7, #12]
700127e0:	685b      	ldr	r3, [r3, #4]
700127e2:	68fa      	ldr	r2, [r7, #12]
700127e4:	68d2      	ldr	r2, [r2, #12]
700127e6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
700127e8:	68fb      	ldr	r3, [r7, #12]
700127ea:	68db      	ldr	r3, [r3, #12]
700127ec:	2200      	movs	r2, #0
700127ee:	741a      	strb	r2, [r3, #16]
700127f0:	2200      	movs	r2, #0
700127f2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
700127f4:	68fb      	ldr	r3, [r7, #12]
700127f6:	68da      	ldr	r2, [r3, #12]
700127f8:	68fb      	ldr	r3, [r7, #12]
700127fa:	7a9b      	ldrb	r3, [r3, #10]
700127fc:	f003 0301 	and.w	r3, r3, #1
70012800:	2b00      	cmp	r3, #0
70012802:	d001      	beq.n	70012808 <tcp_output_segment+0x158>
70012804:	2318      	movs	r3, #24
70012806:	e000      	b.n	7001280a <tcp_output_segment+0x15a>
70012808:	2314      	movs	r3, #20
7001280a:	4413      	add	r3, r2
7001280c:	69fa      	ldr	r2, [r7, #28]
7001280e:	429a      	cmp	r2, r3
70012810:	d006      	beq.n	70012820 <tcp_output_segment+0x170>
70012812:	4b10      	ldr	r3, [pc, #64]	@ (70012854 <tcp_output_segment+0x1a4>)
70012814:	f240 621d 	movw	r2, #1565	@ 0x61d
70012818:	4914      	ldr	r1, [pc, #80]	@ (7001286c <tcp_output_segment+0x1bc>)
7001281a:	4810      	ldr	r0, [pc, #64]	@ (7001285c <tcp_output_segment+0x1ac>)
7001281c:	f001 fa80 	bl	70013d20 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
70012820:	68fb      	ldr	r3, [r7, #12]
70012822:	6858      	ldr	r0, [r3, #4]
70012824:	68b9      	ldr	r1, [r7, #8]
70012826:	68bb      	ldr	r3, [r7, #8]
70012828:	1d1c      	adds	r4, r3, #4
7001282a:	68bb      	ldr	r3, [r7, #8]
7001282c:	7add      	ldrb	r5, [r3, #11]
7001282e:	68bb      	ldr	r3, [r7, #8]
70012830:	7a9b      	ldrb	r3, [r3, #10]
70012832:	687a      	ldr	r2, [r7, #4]
70012834:	9202      	str	r2, [sp, #8]
70012836:	2206      	movs	r2, #6
70012838:	9201      	str	r2, [sp, #4]
7001283a:	9300      	str	r3, [sp, #0]
7001283c:	462b      	mov	r3, r5
7001283e:	4622      	mov	r2, r4
70012840:	f7f8 fd7a 	bl	7000b338 <ip4_output_if>
70012844:	4603      	mov	r3, r0
70012846:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
70012848:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
7001284c:	4618      	mov	r0, r3
7001284e:	3720      	adds	r7, #32
70012850:	46bd      	mov	sp, r7
70012852:	bdb0      	pop	{r4, r5, r7, pc}
70012854:	70016694 	.word	0x70016694
70012858:	70016c38 	.word	0x70016c38
7001285c:	70016714 	.word	0x70016714
70012860:	70016c58 	.word	0x70016c58
70012864:	70016c78 	.word	0x70016c78
70012868:	24008478 	.word	0x24008478
7001286c:	70016c9c 	.word	0x70016c9c

70012870 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
70012870:	b5b0      	push	{r4, r5, r7, lr}
70012872:	b084      	sub	sp, #16
70012874:	af00      	add	r7, sp, #0
70012876:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
70012878:	687b      	ldr	r3, [r7, #4]
7001287a:	2b00      	cmp	r3, #0
7001287c:	d106      	bne.n	7001288c <tcp_rexmit_rto_prepare+0x1c>
7001287e:	4b31      	ldr	r3, [pc, #196]	@ (70012944 <tcp_rexmit_rto_prepare+0xd4>)
70012880:	f240 6264 	movw	r2, #1636	@ 0x664
70012884:	4930      	ldr	r1, [pc, #192]	@ (70012948 <tcp_rexmit_rto_prepare+0xd8>)
70012886:	4831      	ldr	r0, [pc, #196]	@ (7001294c <tcp_rexmit_rto_prepare+0xdc>)
70012888:	f001 fa4a 	bl	70013d20 <iprintf>

  if (pcb->unacked == NULL) {
7001288c:	687b      	ldr	r3, [r7, #4]
7001288e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70012890:	2b00      	cmp	r3, #0
70012892:	d102      	bne.n	7001289a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
70012894:	f06f 0305 	mvn.w	r3, #5
70012898:	e050      	b.n	7001293c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
7001289a:	687b      	ldr	r3, [r7, #4]
7001289c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7001289e:	60fb      	str	r3, [r7, #12]
700128a0:	e00b      	b.n	700128ba <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
700128a2:	68f8      	ldr	r0, [r7, #12]
700128a4:	f7ff fee4 	bl	70012670 <tcp_output_segment_busy>
700128a8:	4603      	mov	r3, r0
700128aa:	2b00      	cmp	r3, #0
700128ac:	d002      	beq.n	700128b4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
700128ae:	f06f 0305 	mvn.w	r3, #5
700128b2:	e043      	b.n	7001293c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
700128b4:	68fb      	ldr	r3, [r7, #12]
700128b6:	681b      	ldr	r3, [r3, #0]
700128b8:	60fb      	str	r3, [r7, #12]
700128ba:	68fb      	ldr	r3, [r7, #12]
700128bc:	681b      	ldr	r3, [r3, #0]
700128be:	2b00      	cmp	r3, #0
700128c0:	d1ef      	bne.n	700128a2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
700128c2:	68f8      	ldr	r0, [r7, #12]
700128c4:	f7ff fed4 	bl	70012670 <tcp_output_segment_busy>
700128c8:	4603      	mov	r3, r0
700128ca:	2b00      	cmp	r3, #0
700128cc:	d002      	beq.n	700128d4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
700128ce:	f06f 0305 	mvn.w	r3, #5
700128d2:	e033      	b.n	7001293c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
700128d4:	687b      	ldr	r3, [r7, #4]
700128d6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
700128d8:	68fb      	ldr	r3, [r7, #12]
700128da:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
700128dc:	687b      	ldr	r3, [r7, #4]
700128de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
700128e0:	687b      	ldr	r3, [r7, #4]
700128e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
700128e4:	687b      	ldr	r3, [r7, #4]
700128e6:	2200      	movs	r2, #0
700128e8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
700128ea:	687b      	ldr	r3, [r7, #4]
700128ec:	8b5b      	ldrh	r3, [r3, #26]
700128ee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
700128f2:	b29a      	uxth	r2, r3
700128f4:	687b      	ldr	r3, [r7, #4]
700128f6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
700128f8:	68fb      	ldr	r3, [r7, #12]
700128fa:	68db      	ldr	r3, [r3, #12]
700128fc:	685b      	ldr	r3, [r3, #4]
700128fe:	4618      	mov	r0, r3
70012900:	f7f7 f87b 	bl	700099fa <lwip_htonl>
70012904:	4604      	mov	r4, r0
70012906:	68fb      	ldr	r3, [r7, #12]
70012908:	891b      	ldrh	r3, [r3, #8]
7001290a:	461d      	mov	r5, r3
7001290c:	68fb      	ldr	r3, [r7, #12]
7001290e:	68db      	ldr	r3, [r3, #12]
70012910:	899b      	ldrh	r3, [r3, #12]
70012912:	b29b      	uxth	r3, r3
70012914:	4618      	mov	r0, r3
70012916:	f7f7 f85b 	bl	700099d0 <lwip_htons>
7001291a:	4603      	mov	r3, r0
7001291c:	b2db      	uxtb	r3, r3
7001291e:	f003 0303 	and.w	r3, r3, #3
70012922:	2b00      	cmp	r3, #0
70012924:	d001      	beq.n	7001292a <tcp_rexmit_rto_prepare+0xba>
70012926:	2301      	movs	r3, #1
70012928:	e000      	b.n	7001292c <tcp_rexmit_rto_prepare+0xbc>
7001292a:	2300      	movs	r3, #0
7001292c:	442b      	add	r3, r5
7001292e:	18e2      	adds	r2, r4, r3
70012930:	687b      	ldr	r3, [r7, #4]
70012932:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
70012934:	687b      	ldr	r3, [r7, #4]
70012936:	2200      	movs	r2, #0
70012938:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
7001293a:	2300      	movs	r3, #0
}
7001293c:	4618      	mov	r0, r3
7001293e:	3710      	adds	r7, #16
70012940:	46bd      	mov	sp, r7
70012942:	bdb0      	pop	{r4, r5, r7, pc}
70012944:	70016694 	.word	0x70016694
70012948:	70016cb0 	.word	0x70016cb0
7001294c:	70016714 	.word	0x70016714

70012950 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
70012950:	b580      	push	{r7, lr}
70012952:	b082      	sub	sp, #8
70012954:	af00      	add	r7, sp, #0
70012956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
70012958:	687b      	ldr	r3, [r7, #4]
7001295a:	2b00      	cmp	r3, #0
7001295c:	d106      	bne.n	7001296c <tcp_rexmit_rto_commit+0x1c>
7001295e:	4b0d      	ldr	r3, [pc, #52]	@ (70012994 <tcp_rexmit_rto_commit+0x44>)
70012960:	f240 6299 	movw	r2, #1689	@ 0x699
70012964:	490c      	ldr	r1, [pc, #48]	@ (70012998 <tcp_rexmit_rto_commit+0x48>)
70012966:	480d      	ldr	r0, [pc, #52]	@ (7001299c <tcp_rexmit_rto_commit+0x4c>)
70012968:	f001 f9da 	bl	70013d20 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
7001296c:	687b      	ldr	r3, [r7, #4]
7001296e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
70012972:	2bff      	cmp	r3, #255	@ 0xff
70012974:	d007      	beq.n	70012986 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
70012976:	687b      	ldr	r3, [r7, #4]
70012978:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
7001297c:	3301      	adds	r3, #1
7001297e:	b2da      	uxtb	r2, r3
70012980:	687b      	ldr	r3, [r7, #4]
70012982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
70012986:	6878      	ldr	r0, [r7, #4]
70012988:	f7ff fc7e 	bl	70012288 <tcp_output>
}
7001298c:	bf00      	nop
7001298e:	3708      	adds	r7, #8
70012990:	46bd      	mov	sp, r7
70012992:	bd80      	pop	{r7, pc}
70012994:	70016694 	.word	0x70016694
70012998:	70016cd4 	.word	0x70016cd4
7001299c:	70016714 	.word	0x70016714

700129a0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
700129a0:	b580      	push	{r7, lr}
700129a2:	b082      	sub	sp, #8
700129a4:	af00      	add	r7, sp, #0
700129a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
700129a8:	687b      	ldr	r3, [r7, #4]
700129aa:	2b00      	cmp	r3, #0
700129ac:	d106      	bne.n	700129bc <tcp_rexmit_rto+0x1c>
700129ae:	4b0a      	ldr	r3, [pc, #40]	@ (700129d8 <tcp_rexmit_rto+0x38>)
700129b0:	f240 62ae 	movw	r2, #1710	@ 0x6ae
700129b4:	4909      	ldr	r1, [pc, #36]	@ (700129dc <tcp_rexmit_rto+0x3c>)
700129b6:	480a      	ldr	r0, [pc, #40]	@ (700129e0 <tcp_rexmit_rto+0x40>)
700129b8:	f001 f9b2 	bl	70013d20 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
700129bc:	6878      	ldr	r0, [r7, #4]
700129be:	f7ff ff57 	bl	70012870 <tcp_rexmit_rto_prepare>
700129c2:	4603      	mov	r3, r0
700129c4:	2b00      	cmp	r3, #0
700129c6:	d102      	bne.n	700129ce <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
700129c8:	6878      	ldr	r0, [r7, #4]
700129ca:	f7ff ffc1 	bl	70012950 <tcp_rexmit_rto_commit>
  }
}
700129ce:	bf00      	nop
700129d0:	3708      	adds	r7, #8
700129d2:	46bd      	mov	sp, r7
700129d4:	bd80      	pop	{r7, pc}
700129d6:	bf00      	nop
700129d8:	70016694 	.word	0x70016694
700129dc:	70016cf8 	.word	0x70016cf8
700129e0:	70016714 	.word	0x70016714

700129e4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
700129e4:	b590      	push	{r4, r7, lr}
700129e6:	b085      	sub	sp, #20
700129e8:	af00      	add	r7, sp, #0
700129ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
700129ec:	687b      	ldr	r3, [r7, #4]
700129ee:	2b00      	cmp	r3, #0
700129f0:	d106      	bne.n	70012a00 <tcp_rexmit+0x1c>
700129f2:	4b2f      	ldr	r3, [pc, #188]	@ (70012ab0 <tcp_rexmit+0xcc>)
700129f4:	f240 62c2 	movw	r2, #1730	@ 0x6c2
700129f8:	492e      	ldr	r1, [pc, #184]	@ (70012ab4 <tcp_rexmit+0xd0>)
700129fa:	482f      	ldr	r0, [pc, #188]	@ (70012ab8 <tcp_rexmit+0xd4>)
700129fc:	f001 f990 	bl	70013d20 <iprintf>

  if (pcb->unacked == NULL) {
70012a00:	687b      	ldr	r3, [r7, #4]
70012a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70012a04:	2b00      	cmp	r3, #0
70012a06:	d102      	bne.n	70012a0e <tcp_rexmit+0x2a>
    return ERR_VAL;
70012a08:	f06f 0305 	mvn.w	r3, #5
70012a0c:	e04c      	b.n	70012aa8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
70012a0e:	687b      	ldr	r3, [r7, #4]
70012a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70012a12:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
70012a14:	68b8      	ldr	r0, [r7, #8]
70012a16:	f7ff fe2b 	bl	70012670 <tcp_output_segment_busy>
70012a1a:	4603      	mov	r3, r0
70012a1c:	2b00      	cmp	r3, #0
70012a1e:	d002      	beq.n	70012a26 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
70012a20:	f06f 0305 	mvn.w	r3, #5
70012a24:	e040      	b.n	70012aa8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
70012a26:	68bb      	ldr	r3, [r7, #8]
70012a28:	681a      	ldr	r2, [r3, #0]
70012a2a:	687b      	ldr	r3, [r7, #4]
70012a2c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
70012a2e:	687b      	ldr	r3, [r7, #4]
70012a30:	336c      	adds	r3, #108	@ 0x6c
70012a32:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
70012a34:	e002      	b.n	70012a3c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
70012a36:	68fb      	ldr	r3, [r7, #12]
70012a38:	681b      	ldr	r3, [r3, #0]
70012a3a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
70012a3c:	68fb      	ldr	r3, [r7, #12]
70012a3e:	681b      	ldr	r3, [r3, #0]
70012a40:	2b00      	cmp	r3, #0
70012a42:	d011      	beq.n	70012a68 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
70012a44:	68fb      	ldr	r3, [r7, #12]
70012a46:	681b      	ldr	r3, [r3, #0]
70012a48:	68db      	ldr	r3, [r3, #12]
70012a4a:	685b      	ldr	r3, [r3, #4]
70012a4c:	4618      	mov	r0, r3
70012a4e:	f7f6 ffd4 	bl	700099fa <lwip_htonl>
70012a52:	4604      	mov	r4, r0
70012a54:	68bb      	ldr	r3, [r7, #8]
70012a56:	68db      	ldr	r3, [r3, #12]
70012a58:	685b      	ldr	r3, [r3, #4]
70012a5a:	4618      	mov	r0, r3
70012a5c:	f7f6 ffcd 	bl	700099fa <lwip_htonl>
70012a60:	4603      	mov	r3, r0
70012a62:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
70012a64:	2b00      	cmp	r3, #0
70012a66:	dbe6      	blt.n	70012a36 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
70012a68:	68fb      	ldr	r3, [r7, #12]
70012a6a:	681a      	ldr	r2, [r3, #0]
70012a6c:	68bb      	ldr	r3, [r7, #8]
70012a6e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
70012a70:	68fb      	ldr	r3, [r7, #12]
70012a72:	68ba      	ldr	r2, [r7, #8]
70012a74:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
70012a76:	68bb      	ldr	r3, [r7, #8]
70012a78:	681b      	ldr	r3, [r3, #0]
70012a7a:	2b00      	cmp	r3, #0
70012a7c:	d103      	bne.n	70012a86 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
70012a7e:	687b      	ldr	r3, [r7, #4]
70012a80:	2200      	movs	r2, #0
70012a82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
70012a86:	687b      	ldr	r3, [r7, #4]
70012a88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
70012a8c:	2bff      	cmp	r3, #255	@ 0xff
70012a8e:	d007      	beq.n	70012aa0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
70012a90:	687b      	ldr	r3, [r7, #4]
70012a92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
70012a96:	3301      	adds	r3, #1
70012a98:	b2da      	uxtb	r2, r3
70012a9a:	687b      	ldr	r3, [r7, #4]
70012a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
70012aa0:	687b      	ldr	r3, [r7, #4]
70012aa2:	2200      	movs	r2, #0
70012aa4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
70012aa6:	2300      	movs	r3, #0
}
70012aa8:	4618      	mov	r0, r3
70012aaa:	3714      	adds	r7, #20
70012aac:	46bd      	mov	sp, r7
70012aae:	bd90      	pop	{r4, r7, pc}
70012ab0:	70016694 	.word	0x70016694
70012ab4:	70016d14 	.word	0x70016d14
70012ab8:	70016714 	.word	0x70016714

70012abc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
70012abc:	b580      	push	{r7, lr}
70012abe:	b082      	sub	sp, #8
70012ac0:	af00      	add	r7, sp, #0
70012ac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
70012ac4:	687b      	ldr	r3, [r7, #4]
70012ac6:	2b00      	cmp	r3, #0
70012ac8:	d106      	bne.n	70012ad8 <tcp_rexmit_fast+0x1c>
70012aca:	4b2a      	ldr	r3, [pc, #168]	@ (70012b74 <tcp_rexmit_fast+0xb8>)
70012acc:	f240 62fa 	movw	r2, #1786	@ 0x6fa
70012ad0:	4929      	ldr	r1, [pc, #164]	@ (70012b78 <tcp_rexmit_fast+0xbc>)
70012ad2:	482a      	ldr	r0, [pc, #168]	@ (70012b7c <tcp_rexmit_fast+0xc0>)
70012ad4:	f001 f924 	bl	70013d20 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
70012ad8:	687b      	ldr	r3, [r7, #4]
70012ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70012adc:	2b00      	cmp	r3, #0
70012ade:	d045      	beq.n	70012b6c <tcp_rexmit_fast+0xb0>
70012ae0:	687b      	ldr	r3, [r7, #4]
70012ae2:	8b5b      	ldrh	r3, [r3, #26]
70012ae4:	f003 0304 	and.w	r3, r3, #4
70012ae8:	2b00      	cmp	r3, #0
70012aea:	d13f      	bne.n	70012b6c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
70012aec:	6878      	ldr	r0, [r7, #4]
70012aee:	f7ff ff79 	bl	700129e4 <tcp_rexmit>
70012af2:	4603      	mov	r3, r0
70012af4:	2b00      	cmp	r3, #0
70012af6:	d139      	bne.n	70012b6c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
70012af8:	687b      	ldr	r3, [r7, #4]
70012afa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
70012afe:	687b      	ldr	r3, [r7, #4]
70012b00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
70012b04:	4293      	cmp	r3, r2
70012b06:	bf28      	it	cs
70012b08:	4613      	movcs	r3, r2
70012b0a:	b29b      	uxth	r3, r3
70012b0c:	2b00      	cmp	r3, #0
70012b0e:	da00      	bge.n	70012b12 <tcp_rexmit_fast+0x56>
70012b10:	3301      	adds	r3, #1
70012b12:	105b      	asrs	r3, r3, #1
70012b14:	b29a      	uxth	r2, r3
70012b16:	687b      	ldr	r3, [r7, #4]
70012b18:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
70012b1c:	687b      	ldr	r3, [r7, #4]
70012b1e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
70012b22:	461a      	mov	r2, r3
70012b24:	687b      	ldr	r3, [r7, #4]
70012b26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70012b28:	005b      	lsls	r3, r3, #1
70012b2a:	429a      	cmp	r2, r3
70012b2c:	d206      	bcs.n	70012b3c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
70012b2e:	687b      	ldr	r3, [r7, #4]
70012b30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70012b32:	005b      	lsls	r3, r3, #1
70012b34:	b29a      	uxth	r2, r3
70012b36:	687b      	ldr	r3, [r7, #4]
70012b38:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
70012b3c:	687b      	ldr	r3, [r7, #4]
70012b3e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
70012b42:	687b      	ldr	r3, [r7, #4]
70012b44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
70012b46:	4619      	mov	r1, r3
70012b48:	0049      	lsls	r1, r1, #1
70012b4a:	440b      	add	r3, r1
70012b4c:	b29b      	uxth	r3, r3
70012b4e:	4413      	add	r3, r2
70012b50:	b29a      	uxth	r2, r3
70012b52:	687b      	ldr	r3, [r7, #4]
70012b54:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
70012b58:	687b      	ldr	r3, [r7, #4]
70012b5a:	8b5b      	ldrh	r3, [r3, #26]
70012b5c:	f043 0304 	orr.w	r3, r3, #4
70012b60:	b29a      	uxth	r2, r3
70012b62:	687b      	ldr	r3, [r7, #4]
70012b64:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
70012b66:	687b      	ldr	r3, [r7, #4]
70012b68:	2200      	movs	r2, #0
70012b6a:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
70012b6c:	bf00      	nop
70012b6e:	3708      	adds	r7, #8
70012b70:	46bd      	mov	sp, r7
70012b72:	bd80      	pop	{r7, pc}
70012b74:	70016694 	.word	0x70016694
70012b78:	70016d2c 	.word	0x70016d2c
70012b7c:	70016714 	.word	0x70016714

70012b80 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
70012b80:	b580      	push	{r7, lr}
70012b82:	b086      	sub	sp, #24
70012b84:	af00      	add	r7, sp, #0
70012b86:	60f8      	str	r0, [r7, #12]
70012b88:	607b      	str	r3, [r7, #4]
70012b8a:	460b      	mov	r3, r1
70012b8c:	817b      	strh	r3, [r7, #10]
70012b8e:	4613      	mov	r3, r2
70012b90:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
70012b92:	897a      	ldrh	r2, [r7, #10]
70012b94:	893b      	ldrh	r3, [r7, #8]
70012b96:	4413      	add	r3, r2
70012b98:	b29b      	uxth	r3, r3
70012b9a:	3314      	adds	r3, #20
70012b9c:	b29b      	uxth	r3, r3
70012b9e:	f44f 7220 	mov.w	r2, #640	@ 0x280
70012ba2:	4619      	mov	r1, r3
70012ba4:	2022      	movs	r0, #34	@ 0x22
70012ba6:	f7fa fb75 	bl	7000d294 <pbuf_alloc>
70012baa:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
70012bac:	697b      	ldr	r3, [r7, #20]
70012bae:	2b00      	cmp	r3, #0
70012bb0:	d04d      	beq.n	70012c4e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
70012bb2:	897b      	ldrh	r3, [r7, #10]
70012bb4:	3313      	adds	r3, #19
70012bb6:	697a      	ldr	r2, [r7, #20]
70012bb8:	8952      	ldrh	r2, [r2, #10]
70012bba:	4293      	cmp	r3, r2
70012bbc:	db06      	blt.n	70012bcc <tcp_output_alloc_header_common+0x4c>
70012bbe:	4b26      	ldr	r3, [pc, #152]	@ (70012c58 <tcp_output_alloc_header_common+0xd8>)
70012bc0:	f240 7224 	movw	r2, #1828	@ 0x724
70012bc4:	4925      	ldr	r1, [pc, #148]	@ (70012c5c <tcp_output_alloc_header_common+0xdc>)
70012bc6:	4826      	ldr	r0, [pc, #152]	@ (70012c60 <tcp_output_alloc_header_common+0xe0>)
70012bc8:	f001 f8aa 	bl	70013d20 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
70012bcc:	697b      	ldr	r3, [r7, #20]
70012bce:	685b      	ldr	r3, [r3, #4]
70012bd0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
70012bd2:	8c3b      	ldrh	r3, [r7, #32]
70012bd4:	4618      	mov	r0, r3
70012bd6:	f7f6 fefb 	bl	700099d0 <lwip_htons>
70012bda:	4603      	mov	r3, r0
70012bdc:	461a      	mov	r2, r3
70012bde:	693b      	ldr	r3, [r7, #16]
70012be0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
70012be2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
70012be4:	4618      	mov	r0, r3
70012be6:	f7f6 fef3 	bl	700099d0 <lwip_htons>
70012bea:	4603      	mov	r3, r0
70012bec:	461a      	mov	r2, r3
70012bee:	693b      	ldr	r3, [r7, #16]
70012bf0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
70012bf2:	693b      	ldr	r3, [r7, #16]
70012bf4:	687a      	ldr	r2, [r7, #4]
70012bf6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
70012bf8:	68f8      	ldr	r0, [r7, #12]
70012bfa:	f7f6 fefe 	bl	700099fa <lwip_htonl>
70012bfe:	4602      	mov	r2, r0
70012c00:	693b      	ldr	r3, [r7, #16]
70012c02:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
70012c04:	897b      	ldrh	r3, [r7, #10]
70012c06:	089b      	lsrs	r3, r3, #2
70012c08:	b29b      	uxth	r3, r3
70012c0a:	3305      	adds	r3, #5
70012c0c:	b29b      	uxth	r3, r3
70012c0e:	031b      	lsls	r3, r3, #12
70012c10:	b29a      	uxth	r2, r3
70012c12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
70012c16:	b29b      	uxth	r3, r3
70012c18:	4313      	orrs	r3, r2
70012c1a:	b29b      	uxth	r3, r3
70012c1c:	4618      	mov	r0, r3
70012c1e:	f7f6 fed7 	bl	700099d0 <lwip_htons>
70012c22:	4603      	mov	r3, r0
70012c24:	461a      	mov	r2, r3
70012c26:	693b      	ldr	r3, [r7, #16]
70012c28:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
70012c2a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
70012c2c:	4618      	mov	r0, r3
70012c2e:	f7f6 fecf 	bl	700099d0 <lwip_htons>
70012c32:	4603      	mov	r3, r0
70012c34:	461a      	mov	r2, r3
70012c36:	693b      	ldr	r3, [r7, #16]
70012c38:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
70012c3a:	693b      	ldr	r3, [r7, #16]
70012c3c:	2200      	movs	r2, #0
70012c3e:	741a      	strb	r2, [r3, #16]
70012c40:	2200      	movs	r2, #0
70012c42:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
70012c44:	693b      	ldr	r3, [r7, #16]
70012c46:	2200      	movs	r2, #0
70012c48:	749a      	strb	r2, [r3, #18]
70012c4a:	2200      	movs	r2, #0
70012c4c:	74da      	strb	r2, [r3, #19]
  }
  return p;
70012c4e:	697b      	ldr	r3, [r7, #20]
}
70012c50:	4618      	mov	r0, r3
70012c52:	3718      	adds	r7, #24
70012c54:	46bd      	mov	sp, r7
70012c56:	bd80      	pop	{r7, pc}
70012c58:	70016694 	.word	0x70016694
70012c5c:	70016d4c 	.word	0x70016d4c
70012c60:	70016714 	.word	0x70016714

70012c64 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
70012c64:	b5b0      	push	{r4, r5, r7, lr}
70012c66:	b08a      	sub	sp, #40	@ 0x28
70012c68:	af04      	add	r7, sp, #16
70012c6a:	60f8      	str	r0, [r7, #12]
70012c6c:	607b      	str	r3, [r7, #4]
70012c6e:	460b      	mov	r3, r1
70012c70:	817b      	strh	r3, [r7, #10]
70012c72:	4613      	mov	r3, r2
70012c74:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
70012c76:	68fb      	ldr	r3, [r7, #12]
70012c78:	2b00      	cmp	r3, #0
70012c7a:	d106      	bne.n	70012c8a <tcp_output_alloc_header+0x26>
70012c7c:	4b15      	ldr	r3, [pc, #84]	@ (70012cd4 <tcp_output_alloc_header+0x70>)
70012c7e:	f240 7243 	movw	r2, #1859	@ 0x743
70012c82:	4915      	ldr	r1, [pc, #84]	@ (70012cd8 <tcp_output_alloc_header+0x74>)
70012c84:	4815      	ldr	r0, [pc, #84]	@ (70012cdc <tcp_output_alloc_header+0x78>)
70012c86:	f001 f84b 	bl	70013d20 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
70012c8a:	68fb      	ldr	r3, [r7, #12]
70012c8c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
70012c8e:	68fb      	ldr	r3, [r7, #12]
70012c90:	8adb      	ldrh	r3, [r3, #22]
70012c92:	68fa      	ldr	r2, [r7, #12]
70012c94:	8b12      	ldrh	r2, [r2, #24]
70012c96:	68f9      	ldr	r1, [r7, #12]
70012c98:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
70012c9a:	893d      	ldrh	r5, [r7, #8]
70012c9c:	897c      	ldrh	r4, [r7, #10]
70012c9e:	9103      	str	r1, [sp, #12]
70012ca0:	2110      	movs	r1, #16
70012ca2:	9102      	str	r1, [sp, #8]
70012ca4:	9201      	str	r2, [sp, #4]
70012ca6:	9300      	str	r3, [sp, #0]
70012ca8:	687b      	ldr	r3, [r7, #4]
70012caa:	462a      	mov	r2, r5
70012cac:	4621      	mov	r1, r4
70012cae:	f7ff ff67 	bl	70012b80 <tcp_output_alloc_header_common>
70012cb2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
70012cb4:	697b      	ldr	r3, [r7, #20]
70012cb6:	2b00      	cmp	r3, #0
70012cb8:	d006      	beq.n	70012cc8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
70012cba:	68fb      	ldr	r3, [r7, #12]
70012cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70012cbe:	68fa      	ldr	r2, [r7, #12]
70012cc0:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
70012cc2:	441a      	add	r2, r3
70012cc4:	68fb      	ldr	r3, [r7, #12]
70012cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
70012cc8:	697b      	ldr	r3, [r7, #20]
}
70012cca:	4618      	mov	r0, r3
70012ccc:	3718      	adds	r7, #24
70012cce:	46bd      	mov	sp, r7
70012cd0:	bdb0      	pop	{r4, r5, r7, pc}
70012cd2:	bf00      	nop
70012cd4:	70016694 	.word	0x70016694
70012cd8:	70016d7c 	.word	0x70016d7c
70012cdc:	70016714 	.word	0x70016714

70012ce0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
70012ce0:	b580      	push	{r7, lr}
70012ce2:	b088      	sub	sp, #32
70012ce4:	af00      	add	r7, sp, #0
70012ce6:	60f8      	str	r0, [r7, #12]
70012ce8:	60b9      	str	r1, [r7, #8]
70012cea:	4611      	mov	r1, r2
70012cec:	461a      	mov	r2, r3
70012cee:	460b      	mov	r3, r1
70012cf0:	71fb      	strb	r3, [r7, #7]
70012cf2:	4613      	mov	r3, r2
70012cf4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
70012cf6:	2300      	movs	r3, #0
70012cf8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
70012cfa:	68bb      	ldr	r3, [r7, #8]
70012cfc:	2b00      	cmp	r3, #0
70012cfe:	d106      	bne.n	70012d0e <tcp_output_fill_options+0x2e>
70012d00:	4b12      	ldr	r3, [pc, #72]	@ (70012d4c <tcp_output_fill_options+0x6c>)
70012d02:	f240 7257 	movw	r2, #1879	@ 0x757
70012d06:	4912      	ldr	r1, [pc, #72]	@ (70012d50 <tcp_output_fill_options+0x70>)
70012d08:	4812      	ldr	r0, [pc, #72]	@ (70012d54 <tcp_output_fill_options+0x74>)
70012d0a:	f001 f809 	bl	70013d20 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
70012d0e:	68bb      	ldr	r3, [r7, #8]
70012d10:	685b      	ldr	r3, [r3, #4]
70012d12:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
70012d14:	69bb      	ldr	r3, [r7, #24]
70012d16:	3314      	adds	r3, #20
70012d18:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
70012d1a:	8bfb      	ldrh	r3, [r7, #30]
70012d1c:	009b      	lsls	r3, r3, #2
70012d1e:	461a      	mov	r2, r3
70012d20:	79fb      	ldrb	r3, [r7, #7]
70012d22:	009b      	lsls	r3, r3, #2
70012d24:	f003 0304 	and.w	r3, r3, #4
70012d28:	4413      	add	r3, r2
70012d2a:	3314      	adds	r3, #20
70012d2c:	69ba      	ldr	r2, [r7, #24]
70012d2e:	4413      	add	r3, r2
70012d30:	697a      	ldr	r2, [r7, #20]
70012d32:	429a      	cmp	r2, r3
70012d34:	d006      	beq.n	70012d44 <tcp_output_fill_options+0x64>
70012d36:	4b05      	ldr	r3, [pc, #20]	@ (70012d4c <tcp_output_fill_options+0x6c>)
70012d38:	f240 7276 	movw	r2, #1910	@ 0x776
70012d3c:	4906      	ldr	r1, [pc, #24]	@ (70012d58 <tcp_output_fill_options+0x78>)
70012d3e:	4805      	ldr	r0, [pc, #20]	@ (70012d54 <tcp_output_fill_options+0x74>)
70012d40:	f000 ffee 	bl	70013d20 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
70012d44:	bf00      	nop
70012d46:	3720      	adds	r7, #32
70012d48:	46bd      	mov	sp, r7
70012d4a:	bd80      	pop	{r7, pc}
70012d4c:	70016694 	.word	0x70016694
70012d50:	70016da4 	.word	0x70016da4
70012d54:	70016714 	.word	0x70016714
70012d58:	70016c9c 	.word	0x70016c9c

70012d5c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
70012d5c:	b580      	push	{r7, lr}
70012d5e:	b08a      	sub	sp, #40	@ 0x28
70012d60:	af04      	add	r7, sp, #16
70012d62:	60f8      	str	r0, [r7, #12]
70012d64:	60b9      	str	r1, [r7, #8]
70012d66:	607a      	str	r2, [r7, #4]
70012d68:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
70012d6a:	68bb      	ldr	r3, [r7, #8]
70012d6c:	2b00      	cmp	r3, #0
70012d6e:	d106      	bne.n	70012d7e <tcp_output_control_segment+0x22>
70012d70:	4b1c      	ldr	r3, [pc, #112]	@ (70012de4 <tcp_output_control_segment+0x88>)
70012d72:	f44f 62f1 	mov.w	r2, #1928	@ 0x788
70012d76:	491c      	ldr	r1, [pc, #112]	@ (70012de8 <tcp_output_control_segment+0x8c>)
70012d78:	481c      	ldr	r0, [pc, #112]	@ (70012dec <tcp_output_control_segment+0x90>)
70012d7a:	f000 ffd1 	bl	70013d20 <iprintf>

  netif = tcp_route(pcb, src, dst);
70012d7e:	683a      	ldr	r2, [r7, #0]
70012d80:	6879      	ldr	r1, [r7, #4]
70012d82:	68f8      	ldr	r0, [r7, #12]
70012d84:	f7fe ff40 	bl	70011c08 <tcp_route>
70012d88:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
70012d8a:	693b      	ldr	r3, [r7, #16]
70012d8c:	2b00      	cmp	r3, #0
70012d8e:	d102      	bne.n	70012d96 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
70012d90:	23fc      	movs	r3, #252	@ 0xfc
70012d92:	75fb      	strb	r3, [r7, #23]
70012d94:	e01c      	b.n	70012dd0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
70012d96:	68fb      	ldr	r3, [r7, #12]
70012d98:	2b00      	cmp	r3, #0
70012d9a:	d006      	beq.n	70012daa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
70012d9c:	68fb      	ldr	r3, [r7, #12]
70012d9e:	7adb      	ldrb	r3, [r3, #11]
70012da0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
70012da2:	68fb      	ldr	r3, [r7, #12]
70012da4:	7a9b      	ldrb	r3, [r3, #10]
70012da6:	757b      	strb	r3, [r7, #21]
70012da8:	e003      	b.n	70012db2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
70012daa:	23ff      	movs	r3, #255	@ 0xff
70012dac:	75bb      	strb	r3, [r7, #22]
      tos = 0;
70012dae:	2300      	movs	r3, #0
70012db0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
70012db2:	7dba      	ldrb	r2, [r7, #22]
70012db4:	693b      	ldr	r3, [r7, #16]
70012db6:	9302      	str	r3, [sp, #8]
70012db8:	2306      	movs	r3, #6
70012dba:	9301      	str	r3, [sp, #4]
70012dbc:	7d7b      	ldrb	r3, [r7, #21]
70012dbe:	9300      	str	r3, [sp, #0]
70012dc0:	4613      	mov	r3, r2
70012dc2:	683a      	ldr	r2, [r7, #0]
70012dc4:	6879      	ldr	r1, [r7, #4]
70012dc6:	68b8      	ldr	r0, [r7, #8]
70012dc8:	f7f8 fab6 	bl	7000b338 <ip4_output_if>
70012dcc:	4603      	mov	r3, r0
70012dce:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
70012dd0:	68b8      	ldr	r0, [r7, #8]
70012dd2:	f7fa fd39 	bl	7000d848 <pbuf_free>
  return err;
70012dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
70012dda:	4618      	mov	r0, r3
70012ddc:	3718      	adds	r7, #24
70012dde:	46bd      	mov	sp, r7
70012de0:	bd80      	pop	{r7, pc}
70012de2:	bf00      	nop
70012de4:	70016694 	.word	0x70016694
70012de8:	70016dcc 	.word	0x70016dcc
70012dec:	70016714 	.word	0x70016714

70012df0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
70012df0:	b590      	push	{r4, r7, lr}
70012df2:	b08b      	sub	sp, #44	@ 0x2c
70012df4:	af04      	add	r7, sp, #16
70012df6:	60f8      	str	r0, [r7, #12]
70012df8:	60b9      	str	r1, [r7, #8]
70012dfa:	607a      	str	r2, [r7, #4]
70012dfc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
70012dfe:	683b      	ldr	r3, [r7, #0]
70012e00:	2b00      	cmp	r3, #0
70012e02:	d106      	bne.n	70012e12 <tcp_rst+0x22>
70012e04:	4b1f      	ldr	r3, [pc, #124]	@ (70012e84 <tcp_rst+0x94>)
70012e06:	f240 72c5 	movw	r2, #1989	@ 0x7c5
70012e0a:	491f      	ldr	r1, [pc, #124]	@ (70012e88 <tcp_rst+0x98>)
70012e0c:	481f      	ldr	r0, [pc, #124]	@ (70012e8c <tcp_rst+0x9c>)
70012e0e:	f000 ff87 	bl	70013d20 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
70012e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70012e14:	2b00      	cmp	r3, #0
70012e16:	d106      	bne.n	70012e26 <tcp_rst+0x36>
70012e18:	4b1a      	ldr	r3, [pc, #104]	@ (70012e84 <tcp_rst+0x94>)
70012e1a:	f240 72c6 	movw	r2, #1990	@ 0x7c6
70012e1e:	491c      	ldr	r1, [pc, #112]	@ (70012e90 <tcp_rst+0xa0>)
70012e20:	481a      	ldr	r0, [pc, #104]	@ (70012e8c <tcp_rst+0x9c>)
70012e22:	f000 ff7d 	bl	70013d20 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
70012e26:	2300      	movs	r3, #0
70012e28:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
70012e2a:	f246 0308 	movw	r3, #24584	@ 0x6008
70012e2e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
70012e30:	7dfb      	ldrb	r3, [r7, #23]
70012e32:	b29c      	uxth	r4, r3
70012e34:	68b8      	ldr	r0, [r7, #8]
70012e36:	f7f6 fde0 	bl	700099fa <lwip_htonl>
70012e3a:	4602      	mov	r2, r0
70012e3c:	8abb      	ldrh	r3, [r7, #20]
70012e3e:	9303      	str	r3, [sp, #12]
70012e40:	2314      	movs	r3, #20
70012e42:	9302      	str	r3, [sp, #8]
70012e44:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
70012e46:	9301      	str	r3, [sp, #4]
70012e48:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
70012e4a:	9300      	str	r3, [sp, #0]
70012e4c:	4613      	mov	r3, r2
70012e4e:	2200      	movs	r2, #0
70012e50:	4621      	mov	r1, r4
70012e52:	6878      	ldr	r0, [r7, #4]
70012e54:	f7ff fe94 	bl	70012b80 <tcp_output_alloc_header_common>
70012e58:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
70012e5a:	693b      	ldr	r3, [r7, #16]
70012e5c:	2b00      	cmp	r3, #0
70012e5e:	d00c      	beq.n	70012e7a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, 0);
70012e60:	2300      	movs	r3, #0
70012e62:	2200      	movs	r2, #0
70012e64:	6939      	ldr	r1, [r7, #16]
70012e66:	68f8      	ldr	r0, [r7, #12]
70012e68:	f7ff ff3a 	bl	70012ce0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
70012e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70012e6e:	683a      	ldr	r2, [r7, #0]
70012e70:	6939      	ldr	r1, [r7, #16]
70012e72:	68f8      	ldr	r0, [r7, #12]
70012e74:	f7ff ff72 	bl	70012d5c <tcp_output_control_segment>
70012e78:	e000      	b.n	70012e7c <tcp_rst+0x8c>
    return;
70012e7a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
70012e7c:	371c      	adds	r7, #28
70012e7e:	46bd      	mov	sp, r7
70012e80:	bd90      	pop	{r4, r7, pc}
70012e82:	bf00      	nop
70012e84:	70016694 	.word	0x70016694
70012e88:	70016df8 	.word	0x70016df8
70012e8c:	70016714 	.word	0x70016714
70012e90:	70016e14 	.word	0x70016e14

70012e94 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
70012e94:	b590      	push	{r4, r7, lr}
70012e96:	b087      	sub	sp, #28
70012e98:	af00      	add	r7, sp, #0
70012e9a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
70012e9c:	2300      	movs	r3, #0
70012e9e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
70012ea0:	2300      	movs	r3, #0
70012ea2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
70012ea4:	687b      	ldr	r3, [r7, #4]
70012ea6:	2b00      	cmp	r3, #0
70012ea8:	d106      	bne.n	70012eb8 <tcp_send_empty_ack+0x24>
70012eaa:	4b28      	ldr	r3, [pc, #160]	@ (70012f4c <tcp_send_empty_ack+0xb8>)
70012eac:	f240 72eb 	movw	r2, #2027	@ 0x7eb
70012eb0:	4927      	ldr	r1, [pc, #156]	@ (70012f50 <tcp_send_empty_ack+0xbc>)
70012eb2:	4828      	ldr	r0, [pc, #160]	@ (70012f54 <tcp_send_empty_ack+0xc0>)
70012eb4:	f000 ff34 	bl	70013d20 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
70012eb8:	7dfb      	ldrb	r3, [r7, #23]
70012eba:	009b      	lsls	r3, r3, #2
70012ebc:	b2db      	uxtb	r3, r3
70012ebe:	f003 0304 	and.w	r3, r3, #4
70012ec2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
70012ec4:	7d7b      	ldrb	r3, [r7, #21]
70012ec6:	b29c      	uxth	r4, r3
70012ec8:	687b      	ldr	r3, [r7, #4]
70012eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70012ecc:	4618      	mov	r0, r3
70012ece:	f7f6 fd94 	bl	700099fa <lwip_htonl>
70012ed2:	4603      	mov	r3, r0
70012ed4:	2200      	movs	r2, #0
70012ed6:	4621      	mov	r1, r4
70012ed8:	6878      	ldr	r0, [r7, #4]
70012eda:	f7ff fec3 	bl	70012c64 <tcp_output_alloc_header>
70012ede:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
70012ee0:	693b      	ldr	r3, [r7, #16]
70012ee2:	2b00      	cmp	r3, #0
70012ee4:	d109      	bne.n	70012efa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
70012ee6:	687b      	ldr	r3, [r7, #4]
70012ee8:	8b5b      	ldrh	r3, [r3, #26]
70012eea:	f043 0303 	orr.w	r3, r3, #3
70012eee:	b29a      	uxth	r2, r3
70012ef0:	687b      	ldr	r3, [r7, #4]
70012ef2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
70012ef4:	f06f 0301 	mvn.w	r3, #1
70012ef8:	e023      	b.n	70012f42 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
70012efa:	7dbb      	ldrb	r3, [r7, #22]
70012efc:	7dfa      	ldrb	r2, [r7, #23]
70012efe:	6939      	ldr	r1, [r7, #16]
70012f00:	6878      	ldr	r0, [r7, #4]
70012f02:	f7ff feed 	bl	70012ce0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
70012f06:	687a      	ldr	r2, [r7, #4]
70012f08:	687b      	ldr	r3, [r7, #4]
70012f0a:	3304      	adds	r3, #4
70012f0c:	6939      	ldr	r1, [r7, #16]
70012f0e:	6878      	ldr	r0, [r7, #4]
70012f10:	f7ff ff24 	bl	70012d5c <tcp_output_control_segment>
70012f14:	4603      	mov	r3, r0
70012f16:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
70012f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
70012f1c:	2b00      	cmp	r3, #0
70012f1e:	d007      	beq.n	70012f30 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
70012f20:	687b      	ldr	r3, [r7, #4]
70012f22:	8b5b      	ldrh	r3, [r3, #26]
70012f24:	f043 0303 	orr.w	r3, r3, #3
70012f28:	b29a      	uxth	r2, r3
70012f2a:	687b      	ldr	r3, [r7, #4]
70012f2c:	835a      	strh	r2, [r3, #26]
70012f2e:	e006      	b.n	70012f3e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
70012f30:	687b      	ldr	r3, [r7, #4]
70012f32:	8b5b      	ldrh	r3, [r3, #26]
70012f34:	f023 0303 	bic.w	r3, r3, #3
70012f38:	b29a      	uxth	r2, r3
70012f3a:	687b      	ldr	r3, [r7, #4]
70012f3c:	835a      	strh	r2, [r3, #26]
  }

  return err;
70012f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
70012f42:	4618      	mov	r0, r3
70012f44:	371c      	adds	r7, #28
70012f46:	46bd      	mov	sp, r7
70012f48:	bd90      	pop	{r4, r7, pc}
70012f4a:	bf00      	nop
70012f4c:	70016694 	.word	0x70016694
70012f50:	70016e30 	.word	0x70016e30
70012f54:	70016714 	.word	0x70016714

70012f58 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
70012f58:	b590      	push	{r4, r7, lr}
70012f5a:	b087      	sub	sp, #28
70012f5c:	af00      	add	r7, sp, #0
70012f5e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
70012f60:	2300      	movs	r3, #0
70012f62:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
70012f64:	687b      	ldr	r3, [r7, #4]
70012f66:	2b00      	cmp	r3, #0
70012f68:	d106      	bne.n	70012f78 <tcp_keepalive+0x20>
70012f6a:	4b18      	ldr	r3, [pc, #96]	@ (70012fcc <tcp_keepalive+0x74>)
70012f6c:	f640 0225 	movw	r2, #2085	@ 0x825
70012f70:	4917      	ldr	r1, [pc, #92]	@ (70012fd0 <tcp_keepalive+0x78>)
70012f72:	4818      	ldr	r0, [pc, #96]	@ (70012fd4 <tcp_keepalive+0x7c>)
70012f74:	f000 fed4 	bl	70013d20 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
70012f78:	7dfb      	ldrb	r3, [r7, #23]
70012f7a:	b29c      	uxth	r4, r3
70012f7c:	687b      	ldr	r3, [r7, #4]
70012f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70012f80:	3b01      	subs	r3, #1
70012f82:	4618      	mov	r0, r3
70012f84:	f7f6 fd39 	bl	700099fa <lwip_htonl>
70012f88:	4603      	mov	r3, r0
70012f8a:	2200      	movs	r2, #0
70012f8c:	4621      	mov	r1, r4
70012f8e:	6878      	ldr	r0, [r7, #4]
70012f90:	f7ff fe68 	bl	70012c64 <tcp_output_alloc_header>
70012f94:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
70012f96:	693b      	ldr	r3, [r7, #16]
70012f98:	2b00      	cmp	r3, #0
70012f9a:	d102      	bne.n	70012fa2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
70012f9c:	f04f 33ff 	mov.w	r3, #4294967295
70012fa0:	e010      	b.n	70012fc4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
70012fa2:	2300      	movs	r3, #0
70012fa4:	2200      	movs	r2, #0
70012fa6:	6939      	ldr	r1, [r7, #16]
70012fa8:	6878      	ldr	r0, [r7, #4]
70012faa:	f7ff fe99 	bl	70012ce0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
70012fae:	687a      	ldr	r2, [r7, #4]
70012fb0:	687b      	ldr	r3, [r7, #4]
70012fb2:	3304      	adds	r3, #4
70012fb4:	6939      	ldr	r1, [r7, #16]
70012fb6:	6878      	ldr	r0, [r7, #4]
70012fb8:	f7ff fed0 	bl	70012d5c <tcp_output_control_segment>
70012fbc:	4603      	mov	r3, r0
70012fbe:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
70012fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
70012fc4:	4618      	mov	r0, r3
70012fc6:	371c      	adds	r7, #28
70012fc8:	46bd      	mov	sp, r7
70012fca:	bd90      	pop	{r4, r7, pc}
70012fcc:	70016694 	.word	0x70016694
70012fd0:	70016e50 	.word	0x70016e50
70012fd4:	70016714 	.word	0x70016714

70012fd8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
70012fd8:	b590      	push	{r4, r7, lr}
70012fda:	b08b      	sub	sp, #44	@ 0x2c
70012fdc:	af00      	add	r7, sp, #0
70012fde:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
70012fe0:	2300      	movs	r3, #0
70012fe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
70012fe6:	687b      	ldr	r3, [r7, #4]
70012fe8:	2b00      	cmp	r3, #0
70012fea:	d106      	bne.n	70012ffa <tcp_zero_window_probe+0x22>
70012fec:	4b4c      	ldr	r3, [pc, #304]	@ (70013120 <tcp_zero_window_probe+0x148>)
70012fee:	f44f 6205 	mov.w	r2, #2128	@ 0x850
70012ff2:	494c      	ldr	r1, [pc, #304]	@ (70013124 <tcp_zero_window_probe+0x14c>)
70012ff4:	484c      	ldr	r0, [pc, #304]	@ (70013128 <tcp_zero_window_probe+0x150>)
70012ff6:	f000 fe93 	bl	70013d20 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
70012ffa:	687b      	ldr	r3, [r7, #4]
70012ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70012ffe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
70013000:	6a3b      	ldr	r3, [r7, #32]
70013002:	2b00      	cmp	r3, #0
70013004:	d101      	bne.n	7001300a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
70013006:	2300      	movs	r3, #0
70013008:	e085      	b.n	70013116 <tcp_zero_window_probe+0x13e>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
7001300a:	687b      	ldr	r3, [r7, #4]
7001300c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
70013010:	2bff      	cmp	r3, #255	@ 0xff
70013012:	d007      	beq.n	70013024 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
70013014:	687b      	ldr	r3, [r7, #4]
70013016:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
7001301a:	3301      	adds	r3, #1
7001301c:	b2da      	uxtb	r2, r3
7001301e:	687b      	ldr	r3, [r7, #4]
70013020:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
70013024:	6a3b      	ldr	r3, [r7, #32]
70013026:	68db      	ldr	r3, [r3, #12]
70013028:	899b      	ldrh	r3, [r3, #12]
7001302a:	b29b      	uxth	r3, r3
7001302c:	4618      	mov	r0, r3
7001302e:	f7f6 fccf 	bl	700099d0 <lwip_htons>
70013032:	4603      	mov	r3, r0
70013034:	b2db      	uxtb	r3, r3
70013036:	f003 0301 	and.w	r3, r3, #1
7001303a:	2b00      	cmp	r3, #0
7001303c:	d005      	beq.n	7001304a <tcp_zero_window_probe+0x72>
7001303e:	6a3b      	ldr	r3, [r7, #32]
70013040:	891b      	ldrh	r3, [r3, #8]
70013042:	2b00      	cmp	r3, #0
70013044:	d101      	bne.n	7001304a <tcp_zero_window_probe+0x72>
70013046:	2301      	movs	r3, #1
70013048:	e000      	b.n	7001304c <tcp_zero_window_probe+0x74>
7001304a:	2300      	movs	r3, #0
7001304c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
7001304e:	7ffb      	ldrb	r3, [r7, #31]
70013050:	2b00      	cmp	r3, #0
70013052:	bf0c      	ite	eq
70013054:	2301      	moveq	r3, #1
70013056:	2300      	movne	r3, #0
70013058:	b2db      	uxtb	r3, r3
7001305a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
7001305c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
70013060:	b299      	uxth	r1, r3
70013062:	6a3b      	ldr	r3, [r7, #32]
70013064:	68db      	ldr	r3, [r3, #12]
70013066:	685b      	ldr	r3, [r3, #4]
70013068:	8bba      	ldrh	r2, [r7, #28]
7001306a:	6878      	ldr	r0, [r7, #4]
7001306c:	f7ff fdfa 	bl	70012c64 <tcp_output_alloc_header>
70013070:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
70013072:	69bb      	ldr	r3, [r7, #24]
70013074:	2b00      	cmp	r3, #0
70013076:	d102      	bne.n	7001307e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
70013078:	f04f 33ff 	mov.w	r3, #4294967295
7001307c:	e04b      	b.n	70013116 <tcp_zero_window_probe+0x13e>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
7001307e:	69bb      	ldr	r3, [r7, #24]
70013080:	685b      	ldr	r3, [r3, #4]
70013082:	617b      	str	r3, [r7, #20]

  if (is_fin) {
70013084:	7ffb      	ldrb	r3, [r7, #31]
70013086:	2b00      	cmp	r3, #0
70013088:	d011      	beq.n	700130ae <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
7001308a:	697b      	ldr	r3, [r7, #20]
7001308c:	899b      	ldrh	r3, [r3, #12]
7001308e:	b29b      	uxth	r3, r3
70013090:	b21b      	sxth	r3, r3
70013092:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
70013096:	b21c      	sxth	r4, r3
70013098:	2011      	movs	r0, #17
7001309a:	f7f6 fc99 	bl	700099d0 <lwip_htons>
7001309e:	4603      	mov	r3, r0
700130a0:	b21b      	sxth	r3, r3
700130a2:	4323      	orrs	r3, r4
700130a4:	b21b      	sxth	r3, r3
700130a6:	b29a      	uxth	r2, r3
700130a8:	697b      	ldr	r3, [r7, #20]
700130aa:	819a      	strh	r2, [r3, #12]
700130ac:	e010      	b.n	700130d0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
700130ae:	69bb      	ldr	r3, [r7, #24]
700130b0:	685b      	ldr	r3, [r3, #4]
700130b2:	3314      	adds	r3, #20
700130b4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
700130b6:	6a3b      	ldr	r3, [r7, #32]
700130b8:	6858      	ldr	r0, [r3, #4]
700130ba:	6a3b      	ldr	r3, [r7, #32]
700130bc:	685b      	ldr	r3, [r3, #4]
700130be:	891a      	ldrh	r2, [r3, #8]
700130c0:	6a3b      	ldr	r3, [r7, #32]
700130c2:	891b      	ldrh	r3, [r3, #8]
700130c4:	1ad3      	subs	r3, r2, r3
700130c6:	b29b      	uxth	r3, r3
700130c8:	2201      	movs	r2, #1
700130ca:	6939      	ldr	r1, [r7, #16]
700130cc:	f7fa fdc4 	bl	7000dc58 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
700130d0:	6a3b      	ldr	r3, [r7, #32]
700130d2:	68db      	ldr	r3, [r3, #12]
700130d4:	685b      	ldr	r3, [r3, #4]
700130d6:	4618      	mov	r0, r3
700130d8:	f7f6 fc8f 	bl	700099fa <lwip_htonl>
700130dc:	4603      	mov	r3, r0
700130de:	3301      	adds	r3, #1
700130e0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
700130e2:	687b      	ldr	r3, [r7, #4]
700130e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
700130e6:	68fb      	ldr	r3, [r7, #12]
700130e8:	1ad3      	subs	r3, r2, r3
700130ea:	2b00      	cmp	r3, #0
700130ec:	da02      	bge.n	700130f4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
700130ee:	687b      	ldr	r3, [r7, #4]
700130f0:	68fa      	ldr	r2, [r7, #12]
700130f2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, 0);
700130f4:	2300      	movs	r3, #0
700130f6:	2200      	movs	r2, #0
700130f8:	69b9      	ldr	r1, [r7, #24]
700130fa:	6878      	ldr	r0, [r7, #4]
700130fc:	f7ff fdf0 	bl	70012ce0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
70013100:	687a      	ldr	r2, [r7, #4]
70013102:	687b      	ldr	r3, [r7, #4]
70013104:	3304      	adds	r3, #4
70013106:	69b9      	ldr	r1, [r7, #24]
70013108:	6878      	ldr	r0, [r7, #4]
7001310a:	f7ff fe27 	bl	70012d5c <tcp_output_control_segment>
7001310e:	4603      	mov	r3, r0
70013110:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
70013112:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
70013116:	4618      	mov	r0, r3
70013118:	372c      	adds	r7, #44	@ 0x2c
7001311a:	46bd      	mov	sp, r7
7001311c:	bd90      	pop	{r4, r7, pc}
7001311e:	bf00      	nop
70013120:	70016694 	.word	0x70016694
70013124:	70016e6c 	.word	0x70016e6c
70013128:	70016714 	.word	0x70016714

7001312c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
7001312c:	b580      	push	{r7, lr}
7001312e:	b084      	sub	sp, #16
70013130:	af00      	add	r7, sp, #0
70013132:	6078      	str	r0, [r7, #4]
70013134:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
70013136:	f000 fb01 	bl	7001373c <sys_timeouts_sleeptime>
7001313a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
7001313c:	68fb      	ldr	r3, [r7, #12]
7001313e:	f1b3 3fff 	cmp.w	r3, #4294967295
70013142:	d10b      	bne.n	7001315c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
70013144:	4813      	ldr	r0, [pc, #76]	@ (70013194 <tcpip_timeouts_mbox_fetch+0x68>)
70013146:	f7fa febc 	bl	7000dec2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
7001314a:	2200      	movs	r2, #0
7001314c:	6839      	ldr	r1, [r7, #0]
7001314e:	6878      	ldr	r0, [r7, #4]
70013150:	f7fa fe44 	bl	7000dddc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
70013154:	480f      	ldr	r0, [pc, #60]	@ (70013194 <tcpip_timeouts_mbox_fetch+0x68>)
70013156:	f7fa fea5 	bl	7000dea4 <sys_mutex_lock>
    return;
7001315a:	e018      	b.n	7001318e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
7001315c:	68fb      	ldr	r3, [r7, #12]
7001315e:	2b00      	cmp	r3, #0
70013160:	d102      	bne.n	70013168 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
70013162:	f000 fab1 	bl	700136c8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
70013166:	e7e6      	b.n	70013136 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
70013168:	480a      	ldr	r0, [pc, #40]	@ (70013194 <tcpip_timeouts_mbox_fetch+0x68>)
7001316a:	f7fa feaa 	bl	7000dec2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
7001316e:	68fa      	ldr	r2, [r7, #12]
70013170:	6839      	ldr	r1, [r7, #0]
70013172:	6878      	ldr	r0, [r7, #4]
70013174:	f7fa fe32 	bl	7000dddc <sys_arch_mbox_fetch>
70013178:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
7001317a:	4806      	ldr	r0, [pc, #24]	@ (70013194 <tcpip_timeouts_mbox_fetch+0x68>)
7001317c:	f7fa fe92 	bl	7000dea4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
70013180:	68bb      	ldr	r3, [r7, #8]
70013182:	f1b3 3fff 	cmp.w	r3, #4294967295
70013186:	d102      	bne.n	7001318e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
70013188:	f000 fa9e 	bl	700136c8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
7001318c:	e7d3      	b.n	70013136 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
7001318e:	3710      	adds	r7, #16
70013190:	46bd      	mov	sp, r7
70013192:	bd80      	pop	{r7, pc}
70013194:	240084d4 	.word	0x240084d4

70013198 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
70013198:	b580      	push	{r7, lr}
7001319a:	b084      	sub	sp, #16
7001319c:	af00      	add	r7, sp, #0
7001319e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
700131a0:	4810      	ldr	r0, [pc, #64]	@ (700131e4 <tcpip_thread+0x4c>)
700131a2:	f7fa fe7f 	bl	7000dea4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
700131a6:	4b10      	ldr	r3, [pc, #64]	@ (700131e8 <tcpip_thread+0x50>)
700131a8:	681b      	ldr	r3, [r3, #0]
700131aa:	2b00      	cmp	r3, #0
700131ac:	d005      	beq.n	700131ba <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
700131ae:	4b0e      	ldr	r3, [pc, #56]	@ (700131e8 <tcpip_thread+0x50>)
700131b0:	681b      	ldr	r3, [r3, #0]
700131b2:	4a0e      	ldr	r2, [pc, #56]	@ (700131ec <tcpip_thread+0x54>)
700131b4:	6812      	ldr	r2, [r2, #0]
700131b6:	4610      	mov	r0, r2
700131b8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
700131ba:	f107 030c 	add.w	r3, r7, #12
700131be:	4619      	mov	r1, r3
700131c0:	480b      	ldr	r0, [pc, #44]	@ (700131f0 <tcpip_thread+0x58>)
700131c2:	f7ff ffb3 	bl	7001312c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
700131c6:	68fb      	ldr	r3, [r7, #12]
700131c8:	2b00      	cmp	r3, #0
700131ca:	d106      	bne.n	700131da <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
700131cc:	4b09      	ldr	r3, [pc, #36]	@ (700131f4 <tcpip_thread+0x5c>)
700131ce:	2291      	movs	r2, #145	@ 0x91
700131d0:	4909      	ldr	r1, [pc, #36]	@ (700131f8 <tcpip_thread+0x60>)
700131d2:	480a      	ldr	r0, [pc, #40]	@ (700131fc <tcpip_thread+0x64>)
700131d4:	f000 fda4 	bl	70013d20 <iprintf>
      continue;
700131d8:	e003      	b.n	700131e2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
700131da:	68fb      	ldr	r3, [r7, #12]
700131dc:	4618      	mov	r0, r3
700131de:	f000 f80f 	bl	70013200 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
700131e2:	e7ea      	b.n	700131ba <tcpip_thread+0x22>
700131e4:	240084d4 	.word	0x240084d4
700131e8:	240084c8 	.word	0x240084c8
700131ec:	240084cc 	.word	0x240084cc
700131f0:	240084d0 	.word	0x240084d0
700131f4:	70016e90 	.word	0x70016e90
700131f8:	70016ef0 	.word	0x70016ef0
700131fc:	70016f10 	.word	0x70016f10

70013200 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
70013200:	b580      	push	{r7, lr}
70013202:	b082      	sub	sp, #8
70013204:	af00      	add	r7, sp, #0
70013206:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
70013208:	687b      	ldr	r3, [r7, #4]
7001320a:	781b      	ldrb	r3, [r3, #0]
7001320c:	2b02      	cmp	r3, #2
7001320e:	d026      	beq.n	7001325e <tcpip_thread_handle_msg+0x5e>
70013210:	2b02      	cmp	r3, #2
70013212:	dc2b      	bgt.n	7001326c <tcpip_thread_handle_msg+0x6c>
70013214:	2b00      	cmp	r3, #0
70013216:	d002      	beq.n	7001321e <tcpip_thread_handle_msg+0x1e>
70013218:	2b01      	cmp	r3, #1
7001321a:	d015      	beq.n	70013248 <tcpip_thread_handle_msg+0x48>
7001321c:	e026      	b.n	7001326c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
7001321e:	687b      	ldr	r3, [r7, #4]
70013220:	68db      	ldr	r3, [r3, #12]
70013222:	687a      	ldr	r2, [r7, #4]
70013224:	6850      	ldr	r0, [r2, #4]
70013226:	687a      	ldr	r2, [r7, #4]
70013228:	6892      	ldr	r2, [r2, #8]
7001322a:	4611      	mov	r1, r2
7001322c:	4798      	blx	r3
7001322e:	4603      	mov	r3, r0
70013230:	2b00      	cmp	r3, #0
70013232:	d004      	beq.n	7001323e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
70013234:	687b      	ldr	r3, [r7, #4]
70013236:	685b      	ldr	r3, [r3, #4]
70013238:	4618      	mov	r0, r3
7001323a:	f7fa fb05 	bl	7000d848 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
7001323e:	6879      	ldr	r1, [r7, #4]
70013240:	2009      	movs	r0, #9
70013242:	f7f9 fcbf 	bl	7000cbc4 <memp_free>
      break;
70013246:	e018      	b.n	7001327a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
70013248:	687b      	ldr	r3, [r7, #4]
7001324a:	685b      	ldr	r3, [r3, #4]
7001324c:	687a      	ldr	r2, [r7, #4]
7001324e:	6892      	ldr	r2, [r2, #8]
70013250:	4610      	mov	r0, r2
70013252:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
70013254:	6879      	ldr	r1, [r7, #4]
70013256:	2008      	movs	r0, #8
70013258:	f7f9 fcb4 	bl	7000cbc4 <memp_free>
      break;
7001325c:	e00d      	b.n	7001327a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
7001325e:	687b      	ldr	r3, [r7, #4]
70013260:	685b      	ldr	r3, [r3, #4]
70013262:	687a      	ldr	r2, [r7, #4]
70013264:	6892      	ldr	r2, [r2, #8]
70013266:	4610      	mov	r0, r2
70013268:	4798      	blx	r3
      break;
7001326a:	e006      	b.n	7001327a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
7001326c:	4b05      	ldr	r3, [pc, #20]	@ (70013284 <tcpip_thread_handle_msg+0x84>)
7001326e:	22cf      	movs	r2, #207	@ 0xcf
70013270:	4905      	ldr	r1, [pc, #20]	@ (70013288 <tcpip_thread_handle_msg+0x88>)
70013272:	4806      	ldr	r0, [pc, #24]	@ (7001328c <tcpip_thread_handle_msg+0x8c>)
70013274:	f000 fd54 	bl	70013d20 <iprintf>
      break;
70013278:	bf00      	nop
  }
}
7001327a:	bf00      	nop
7001327c:	3708      	adds	r7, #8
7001327e:	46bd      	mov	sp, r7
70013280:	bd80      	pop	{r7, pc}
70013282:	bf00      	nop
70013284:	70016e90 	.word	0x70016e90
70013288:	70016ef0 	.word	0x70016ef0
7001328c:	70016f10 	.word	0x70016f10

70013290 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
70013290:	b580      	push	{r7, lr}
70013292:	b086      	sub	sp, #24
70013294:	af00      	add	r7, sp, #0
70013296:	60f8      	str	r0, [r7, #12]
70013298:	60b9      	str	r1, [r7, #8]
7001329a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
7001329c:	481a      	ldr	r0, [pc, #104]	@ (70013308 <tcpip_inpkt+0x78>)
7001329e:	f7fa fdce 	bl	7000de3e <sys_mbox_valid>
700132a2:	4603      	mov	r3, r0
700132a4:	2b00      	cmp	r3, #0
700132a6:	d105      	bne.n	700132b4 <tcpip_inpkt+0x24>
700132a8:	4b18      	ldr	r3, [pc, #96]	@ (7001330c <tcpip_inpkt+0x7c>)
700132aa:	22fc      	movs	r2, #252	@ 0xfc
700132ac:	4918      	ldr	r1, [pc, #96]	@ (70013310 <tcpip_inpkt+0x80>)
700132ae:	4819      	ldr	r0, [pc, #100]	@ (70013314 <tcpip_inpkt+0x84>)
700132b0:	f000 fd36 	bl	70013d20 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
700132b4:	2009      	movs	r0, #9
700132b6:	f7f9 fc1b 	bl	7000caf0 <memp_malloc>
700132ba:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
700132bc:	697b      	ldr	r3, [r7, #20]
700132be:	2b00      	cmp	r3, #0
700132c0:	d102      	bne.n	700132c8 <tcpip_inpkt+0x38>
    return ERR_MEM;
700132c2:	f04f 33ff 	mov.w	r3, #4294967295
700132c6:	e01a      	b.n	700132fe <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
700132c8:	697b      	ldr	r3, [r7, #20]
700132ca:	2200      	movs	r2, #0
700132cc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
700132ce:	697b      	ldr	r3, [r7, #20]
700132d0:	68fa      	ldr	r2, [r7, #12]
700132d2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
700132d4:	697b      	ldr	r3, [r7, #20]
700132d6:	68ba      	ldr	r2, [r7, #8]
700132d8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
700132da:	697b      	ldr	r3, [r7, #20]
700132dc:	687a      	ldr	r2, [r7, #4]
700132de:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
700132e0:	6979      	ldr	r1, [r7, #20]
700132e2:	4809      	ldr	r0, [pc, #36]	@ (70013308 <tcpip_inpkt+0x78>)
700132e4:	f7fa fd60 	bl	7000dda8 <sys_mbox_trypost>
700132e8:	4603      	mov	r3, r0
700132ea:	2b00      	cmp	r3, #0
700132ec:	d006      	beq.n	700132fc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
700132ee:	6979      	ldr	r1, [r7, #20]
700132f0:	2009      	movs	r0, #9
700132f2:	f7f9 fc67 	bl	7000cbc4 <memp_free>
    return ERR_MEM;
700132f6:	f04f 33ff 	mov.w	r3, #4294967295
700132fa:	e000      	b.n	700132fe <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
700132fc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
700132fe:	4618      	mov	r0, r3
70013300:	3718      	adds	r7, #24
70013302:	46bd      	mov	sp, r7
70013304:	bd80      	pop	{r7, pc}
70013306:	bf00      	nop
70013308:	240084d0 	.word	0x240084d0
7001330c:	70016e90 	.word	0x70016e90
70013310:	70016f38 	.word	0x70016f38
70013314:	70016f10 	.word	0x70016f10

70013318 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
70013318:	b580      	push	{r7, lr}
7001331a:	b082      	sub	sp, #8
7001331c:	af00      	add	r7, sp, #0
7001331e:	6078      	str	r0, [r7, #4]
70013320:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
70013322:	683b      	ldr	r3, [r7, #0]
70013324:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
70013328:	f003 0318 	and.w	r3, r3, #24
7001332c:	2b00      	cmp	r3, #0
7001332e:	d006      	beq.n	7001333e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
70013330:	4a08      	ldr	r2, [pc, #32]	@ (70013354 <tcpip_input+0x3c>)
70013332:	6839      	ldr	r1, [r7, #0]
70013334:	6878      	ldr	r0, [r7, #4]
70013336:	f7ff ffab 	bl	70013290 <tcpip_inpkt>
7001333a:	4603      	mov	r3, r0
7001333c:	e005      	b.n	7001334a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
7001333e:	4a06      	ldr	r2, [pc, #24]	@ (70013358 <tcpip_input+0x40>)
70013340:	6839      	ldr	r1, [r7, #0]
70013342:	6878      	ldr	r0, [r7, #4]
70013344:	f7ff ffa4 	bl	70013290 <tcpip_inpkt>
70013348:	4603      	mov	r3, r0
}
7001334a:	4618      	mov	r0, r3
7001334c:	3708      	adds	r7, #8
7001334e:	46bd      	mov	sp, r7
70013350:	bd80      	pop	{r7, pc}
70013352:	bf00      	nop
70013354:	7000a8e1 	.word	0x7000a8e1
70013358:	7000b0f1 	.word	0x7000b0f1

7001335c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
7001335c:	b580      	push	{r7, lr}
7001335e:	b084      	sub	sp, #16
70013360:	af00      	add	r7, sp, #0
70013362:	6078      	str	r0, [r7, #4]
70013364:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
70013366:	4819      	ldr	r0, [pc, #100]	@ (700133cc <tcpip_try_callback+0x70>)
70013368:	f7fa fd69 	bl	7000de3e <sys_mbox_valid>
7001336c:	4603      	mov	r3, r0
7001336e:	2b00      	cmp	r3, #0
70013370:	d106      	bne.n	70013380 <tcpip_try_callback+0x24>
70013372:	4b17      	ldr	r3, [pc, #92]	@ (700133d0 <tcpip_try_callback+0x74>)
70013374:	f240 125d 	movw	r2, #349	@ 0x15d
70013378:	4916      	ldr	r1, [pc, #88]	@ (700133d4 <tcpip_try_callback+0x78>)
7001337a:	4817      	ldr	r0, [pc, #92]	@ (700133d8 <tcpip_try_callback+0x7c>)
7001337c:	f000 fcd0 	bl	70013d20 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
70013380:	2008      	movs	r0, #8
70013382:	f7f9 fbb5 	bl	7000caf0 <memp_malloc>
70013386:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
70013388:	68fb      	ldr	r3, [r7, #12]
7001338a:	2b00      	cmp	r3, #0
7001338c:	d102      	bne.n	70013394 <tcpip_try_callback+0x38>
    return ERR_MEM;
7001338e:	f04f 33ff 	mov.w	r3, #4294967295
70013392:	e017      	b.n	700133c4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
70013394:	68fb      	ldr	r3, [r7, #12]
70013396:	2201      	movs	r2, #1
70013398:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
7001339a:	68fb      	ldr	r3, [r7, #12]
7001339c:	687a      	ldr	r2, [r7, #4]
7001339e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
700133a0:	68fb      	ldr	r3, [r7, #12]
700133a2:	683a      	ldr	r2, [r7, #0]
700133a4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
700133a6:	68f9      	ldr	r1, [r7, #12]
700133a8:	4808      	ldr	r0, [pc, #32]	@ (700133cc <tcpip_try_callback+0x70>)
700133aa:	f7fa fcfd 	bl	7000dda8 <sys_mbox_trypost>
700133ae:	4603      	mov	r3, r0
700133b0:	2b00      	cmp	r3, #0
700133b2:	d006      	beq.n	700133c2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
700133b4:	68f9      	ldr	r1, [r7, #12]
700133b6:	2008      	movs	r0, #8
700133b8:	f7f9 fc04 	bl	7000cbc4 <memp_free>
    return ERR_MEM;
700133bc:	f04f 33ff 	mov.w	r3, #4294967295
700133c0:	e000      	b.n	700133c4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
700133c2:	2300      	movs	r3, #0
}
700133c4:	4618      	mov	r0, r3
700133c6:	3710      	adds	r7, #16
700133c8:	46bd      	mov	sp, r7
700133ca:	bd80      	pop	{r7, pc}
700133cc:	240084d0 	.word	0x240084d0
700133d0:	70016e90 	.word	0x70016e90
700133d4:	70016f38 	.word	0x70016f38
700133d8:	70016f10 	.word	0x70016f10

700133dc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
700133dc:	b580      	push	{r7, lr}
700133de:	b084      	sub	sp, #16
700133e0:	af02      	add	r7, sp, #8
700133e2:	6078      	str	r0, [r7, #4]
700133e4:	6039      	str	r1, [r7, #0]
  lwip_init();
700133e6:	f7f7 fdd1 	bl	7000af8c <lwip_init>

  tcpip_init_done = initfunc;
700133ea:	4a17      	ldr	r2, [pc, #92]	@ (70013448 <tcpip_init+0x6c>)
700133ec:	687b      	ldr	r3, [r7, #4]
700133ee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
700133f0:	4a16      	ldr	r2, [pc, #88]	@ (7001344c <tcpip_init+0x70>)
700133f2:	683b      	ldr	r3, [r7, #0]
700133f4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
700133f6:	2106      	movs	r1, #6
700133f8:	4815      	ldr	r0, [pc, #84]	@ (70013450 <tcpip_init+0x74>)
700133fa:	f7fa fcbb 	bl	7000dd74 <sys_mbox_new>
700133fe:	4603      	mov	r3, r0
70013400:	2b00      	cmp	r3, #0
70013402:	d006      	beq.n	70013412 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
70013404:	4b13      	ldr	r3, [pc, #76]	@ (70013454 <tcpip_init+0x78>)
70013406:	f240 2261 	movw	r2, #609	@ 0x261
7001340a:	4913      	ldr	r1, [pc, #76]	@ (70013458 <tcpip_init+0x7c>)
7001340c:	4813      	ldr	r0, [pc, #76]	@ (7001345c <tcpip_init+0x80>)
7001340e:	f000 fc87 	bl	70013d20 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
70013412:	4813      	ldr	r0, [pc, #76]	@ (70013460 <tcpip_init+0x84>)
70013414:	f7fa fd30 	bl	7000de78 <sys_mutex_new>
70013418:	4603      	mov	r3, r0
7001341a:	2b00      	cmp	r3, #0
7001341c:	d006      	beq.n	7001342c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
7001341e:	4b0d      	ldr	r3, [pc, #52]	@ (70013454 <tcpip_init+0x78>)
70013420:	f240 2265 	movw	r2, #613	@ 0x265
70013424:	490f      	ldr	r1, [pc, #60]	@ (70013464 <tcpip_init+0x88>)
70013426:	480d      	ldr	r0, [pc, #52]	@ (7001345c <tcpip_init+0x80>)
70013428:	f000 fc7a 	bl	70013d20 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
7001342c:	2318      	movs	r3, #24
7001342e:	9300      	str	r3, [sp, #0]
70013430:	f44f 6380 	mov.w	r3, #1024	@ 0x400
70013434:	2200      	movs	r2, #0
70013436:	490c      	ldr	r1, [pc, #48]	@ (70013468 <tcpip_init+0x8c>)
70013438:	480c      	ldr	r0, [pc, #48]	@ (7001346c <tcpip_init+0x90>)
7001343a:	f7fa fd4f 	bl	7000dedc <sys_thread_new>
}
7001343e:	bf00      	nop
70013440:	3708      	adds	r7, #8
70013442:	46bd      	mov	sp, r7
70013444:	bd80      	pop	{r7, pc}
70013446:	bf00      	nop
70013448:	240084c8 	.word	0x240084c8
7001344c:	240084cc 	.word	0x240084cc
70013450:	240084d0 	.word	0x240084d0
70013454:	70016e90 	.word	0x70016e90
70013458:	70016f48 	.word	0x70016f48
7001345c:	70016f10 	.word	0x70016f10
70013460:	240084d4 	.word	0x240084d4
70013464:	70016f6c 	.word	0x70016f6c
70013468:	70013199 	.word	0x70013199
7001346c:	70016f90 	.word	0x70016f90

70013470 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
70013470:	b580      	push	{r7, lr}
70013472:	b082      	sub	sp, #8
70013474:	af00      	add	r7, sp, #0
70013476:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
70013478:	f7fa fdb8 	bl	7000dfec <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
7001347c:	4b0a      	ldr	r3, [pc, #40]	@ (700134a8 <tcpip_tcp_timer+0x38>)
7001347e:	681b      	ldr	r3, [r3, #0]
70013480:	2b00      	cmp	r3, #0
70013482:	d103      	bne.n	7001348c <tcpip_tcp_timer+0x1c>
70013484:	4b09      	ldr	r3, [pc, #36]	@ (700134ac <tcpip_tcp_timer+0x3c>)
70013486:	681b      	ldr	r3, [r3, #0]
70013488:	2b00      	cmp	r3, #0
7001348a:	d005      	beq.n	70013498 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
7001348c:	2200      	movs	r2, #0
7001348e:	4908      	ldr	r1, [pc, #32]	@ (700134b0 <tcpip_tcp_timer+0x40>)
70013490:	20fa      	movs	r0, #250	@ 0xfa
70013492:	f000 f8f3 	bl	7001367c <sys_timeout>
70013496:	e003      	b.n	700134a0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
70013498:	4b06      	ldr	r3, [pc, #24]	@ (700134b4 <tcpip_tcp_timer+0x44>)
7001349a:	2200      	movs	r2, #0
7001349c:	601a      	str	r2, [r3, #0]
  }
}
7001349e:	bf00      	nop
700134a0:	bf00      	nop
700134a2:	3708      	adds	r7, #8
700134a4:	46bd      	mov	sp, r7
700134a6:	bd80      	pop	{r7, pc}
700134a8:	24008484 	.word	0x24008484
700134ac:	24008488 	.word	0x24008488
700134b0:	70013471 	.word	0x70013471
700134b4:	240084e0 	.word	0x240084e0

700134b8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
700134b8:	b580      	push	{r7, lr}
700134ba:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
700134bc:	4b0a      	ldr	r3, [pc, #40]	@ (700134e8 <tcp_timer_needed+0x30>)
700134be:	681b      	ldr	r3, [r3, #0]
700134c0:	2b00      	cmp	r3, #0
700134c2:	d10f      	bne.n	700134e4 <tcp_timer_needed+0x2c>
700134c4:	4b09      	ldr	r3, [pc, #36]	@ (700134ec <tcp_timer_needed+0x34>)
700134c6:	681b      	ldr	r3, [r3, #0]
700134c8:	2b00      	cmp	r3, #0
700134ca:	d103      	bne.n	700134d4 <tcp_timer_needed+0x1c>
700134cc:	4b08      	ldr	r3, [pc, #32]	@ (700134f0 <tcp_timer_needed+0x38>)
700134ce:	681b      	ldr	r3, [r3, #0]
700134d0:	2b00      	cmp	r3, #0
700134d2:	d007      	beq.n	700134e4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
700134d4:	4b04      	ldr	r3, [pc, #16]	@ (700134e8 <tcp_timer_needed+0x30>)
700134d6:	2201      	movs	r2, #1
700134d8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
700134da:	2200      	movs	r2, #0
700134dc:	4905      	ldr	r1, [pc, #20]	@ (700134f4 <tcp_timer_needed+0x3c>)
700134de:	20fa      	movs	r0, #250	@ 0xfa
700134e0:	f000 f8cc 	bl	7001367c <sys_timeout>
  }
}
700134e4:	bf00      	nop
700134e6:	bd80      	pop	{r7, pc}
700134e8:	240084e0 	.word	0x240084e0
700134ec:	24008484 	.word	0x24008484
700134f0:	24008488 	.word	0x24008488
700134f4:	70013471 	.word	0x70013471

700134f8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
700134f8:	b580      	push	{r7, lr}
700134fa:	b086      	sub	sp, #24
700134fc:	af00      	add	r7, sp, #0
700134fe:	60f8      	str	r0, [r7, #12]
70013500:	60b9      	str	r1, [r7, #8]
70013502:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
70013504:	200a      	movs	r0, #10
70013506:	f7f9 faf3 	bl	7000caf0 <memp_malloc>
7001350a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
7001350c:	693b      	ldr	r3, [r7, #16]
7001350e:	2b00      	cmp	r3, #0
70013510:	d109      	bne.n	70013526 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
70013512:	693b      	ldr	r3, [r7, #16]
70013514:	2b00      	cmp	r3, #0
70013516:	d151      	bne.n	700135bc <sys_timeout_abs+0xc4>
70013518:	4b2a      	ldr	r3, [pc, #168]	@ (700135c4 <sys_timeout_abs+0xcc>)
7001351a:	22be      	movs	r2, #190	@ 0xbe
7001351c:	492a      	ldr	r1, [pc, #168]	@ (700135c8 <sys_timeout_abs+0xd0>)
7001351e:	482b      	ldr	r0, [pc, #172]	@ (700135cc <sys_timeout_abs+0xd4>)
70013520:	f000 fbfe 	bl	70013d20 <iprintf>
    return;
70013524:	e04a      	b.n	700135bc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
70013526:	693b      	ldr	r3, [r7, #16]
70013528:	2200      	movs	r2, #0
7001352a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
7001352c:	693b      	ldr	r3, [r7, #16]
7001352e:	68ba      	ldr	r2, [r7, #8]
70013530:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
70013532:	693b      	ldr	r3, [r7, #16]
70013534:	687a      	ldr	r2, [r7, #4]
70013536:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
70013538:	693b      	ldr	r3, [r7, #16]
7001353a:	68fa      	ldr	r2, [r7, #12]
7001353c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
7001353e:	4b24      	ldr	r3, [pc, #144]	@ (700135d0 <sys_timeout_abs+0xd8>)
70013540:	681b      	ldr	r3, [r3, #0]
70013542:	2b00      	cmp	r3, #0
70013544:	d103      	bne.n	7001354e <sys_timeout_abs+0x56>
    next_timeout = timeout;
70013546:	4a22      	ldr	r2, [pc, #136]	@ (700135d0 <sys_timeout_abs+0xd8>)
70013548:	693b      	ldr	r3, [r7, #16]
7001354a:	6013      	str	r3, [r2, #0]
    return;
7001354c:	e037      	b.n	700135be <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
7001354e:	693b      	ldr	r3, [r7, #16]
70013550:	685a      	ldr	r2, [r3, #4]
70013552:	4b1f      	ldr	r3, [pc, #124]	@ (700135d0 <sys_timeout_abs+0xd8>)
70013554:	681b      	ldr	r3, [r3, #0]
70013556:	685b      	ldr	r3, [r3, #4]
70013558:	1ad3      	subs	r3, r2, r3
7001355a:	0fdb      	lsrs	r3, r3, #31
7001355c:	f003 0301 	and.w	r3, r3, #1
70013560:	b2db      	uxtb	r3, r3
70013562:	2b00      	cmp	r3, #0
70013564:	d007      	beq.n	70013576 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
70013566:	4b1a      	ldr	r3, [pc, #104]	@ (700135d0 <sys_timeout_abs+0xd8>)
70013568:	681a      	ldr	r2, [r3, #0]
7001356a:	693b      	ldr	r3, [r7, #16]
7001356c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
7001356e:	4a18      	ldr	r2, [pc, #96]	@ (700135d0 <sys_timeout_abs+0xd8>)
70013570:	693b      	ldr	r3, [r7, #16]
70013572:	6013      	str	r3, [r2, #0]
70013574:	e023      	b.n	700135be <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
70013576:	4b16      	ldr	r3, [pc, #88]	@ (700135d0 <sys_timeout_abs+0xd8>)
70013578:	681b      	ldr	r3, [r3, #0]
7001357a:	617b      	str	r3, [r7, #20]
7001357c:	e01a      	b.n	700135b4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
7001357e:	697b      	ldr	r3, [r7, #20]
70013580:	681b      	ldr	r3, [r3, #0]
70013582:	2b00      	cmp	r3, #0
70013584:	d00b      	beq.n	7001359e <sys_timeout_abs+0xa6>
70013586:	693b      	ldr	r3, [r7, #16]
70013588:	685a      	ldr	r2, [r3, #4]
7001358a:	697b      	ldr	r3, [r7, #20]
7001358c:	681b      	ldr	r3, [r3, #0]
7001358e:	685b      	ldr	r3, [r3, #4]
70013590:	1ad3      	subs	r3, r2, r3
70013592:	0fdb      	lsrs	r3, r3, #31
70013594:	f003 0301 	and.w	r3, r3, #1
70013598:	b2db      	uxtb	r3, r3
7001359a:	2b00      	cmp	r3, #0
7001359c:	d007      	beq.n	700135ae <sys_timeout_abs+0xb6>
        timeout->next = t->next;
7001359e:	697b      	ldr	r3, [r7, #20]
700135a0:	681a      	ldr	r2, [r3, #0]
700135a2:	693b      	ldr	r3, [r7, #16]
700135a4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
700135a6:	697b      	ldr	r3, [r7, #20]
700135a8:	693a      	ldr	r2, [r7, #16]
700135aa:	601a      	str	r2, [r3, #0]
        break;
700135ac:	e007      	b.n	700135be <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
700135ae:	697b      	ldr	r3, [r7, #20]
700135b0:	681b      	ldr	r3, [r3, #0]
700135b2:	617b      	str	r3, [r7, #20]
700135b4:	697b      	ldr	r3, [r7, #20]
700135b6:	2b00      	cmp	r3, #0
700135b8:	d1e1      	bne.n	7001357e <sys_timeout_abs+0x86>
700135ba:	e000      	b.n	700135be <sys_timeout_abs+0xc6>
    return;
700135bc:	bf00      	nop
      }
    }
  }
}
700135be:	3718      	adds	r7, #24
700135c0:	46bd      	mov	sp, r7
700135c2:	bd80      	pop	{r7, pc}
700135c4:	70016fa0 	.word	0x70016fa0
700135c8:	70017004 	.word	0x70017004
700135cc:	70017044 	.word	0x70017044
700135d0:	240084d8 	.word	0x240084d8

700135d4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
700135d4:	b580      	push	{r7, lr}
700135d6:	b086      	sub	sp, #24
700135d8:	af00      	add	r7, sp, #0
700135da:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
700135dc:	687b      	ldr	r3, [r7, #4]
700135de:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
700135e0:	697b      	ldr	r3, [r7, #20]
700135e2:	685b      	ldr	r3, [r3, #4]
700135e4:	4798      	blx	r3

  now = sys_now();
700135e6:	f7f1 fdeb 	bl	700051c0 <sys_now>
700135ea:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
700135ec:	697b      	ldr	r3, [r7, #20]
700135ee:	681a      	ldr	r2, [r3, #0]
700135f0:	4b0f      	ldr	r3, [pc, #60]	@ (70013630 <lwip_cyclic_timer+0x5c>)
700135f2:	681b      	ldr	r3, [r3, #0]
700135f4:	4413      	add	r3, r2
700135f6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
700135f8:	68fa      	ldr	r2, [r7, #12]
700135fa:	693b      	ldr	r3, [r7, #16]
700135fc:	1ad3      	subs	r3, r2, r3
700135fe:	0fdb      	lsrs	r3, r3, #31
70013600:	f003 0301 	and.w	r3, r3, #1
70013604:	b2db      	uxtb	r3, r3
70013606:	2b00      	cmp	r3, #0
70013608:	d009      	beq.n	7001361e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
7001360a:	697b      	ldr	r3, [r7, #20]
7001360c:	681a      	ldr	r2, [r3, #0]
7001360e:	693b      	ldr	r3, [r7, #16]
70013610:	4413      	add	r3, r2
70013612:	687a      	ldr	r2, [r7, #4]
70013614:	4907      	ldr	r1, [pc, #28]	@ (70013634 <lwip_cyclic_timer+0x60>)
70013616:	4618      	mov	r0, r3
70013618:	f7ff ff6e 	bl	700134f8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
7001361c:	e004      	b.n	70013628 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
7001361e:	687a      	ldr	r2, [r7, #4]
70013620:	4904      	ldr	r1, [pc, #16]	@ (70013634 <lwip_cyclic_timer+0x60>)
70013622:	68f8      	ldr	r0, [r7, #12]
70013624:	f7ff ff68 	bl	700134f8 <sys_timeout_abs>
}
70013628:	bf00      	nop
7001362a:	3718      	adds	r7, #24
7001362c:	46bd      	mov	sp, r7
7001362e:	bd80      	pop	{r7, pc}
70013630:	240084dc 	.word	0x240084dc
70013634:	700135d5 	.word	0x700135d5

70013638 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
70013638:	b580      	push	{r7, lr}
7001363a:	b082      	sub	sp, #8
7001363c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
7001363e:	2301      	movs	r3, #1
70013640:	607b      	str	r3, [r7, #4]
70013642:	e00e      	b.n	70013662 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
70013644:	4a0b      	ldr	r2, [pc, #44]	@ (70013674 <sys_timeouts_init+0x3c>)
70013646:	687b      	ldr	r3, [r7, #4]
70013648:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
7001364c:	687b      	ldr	r3, [r7, #4]
7001364e:	00db      	lsls	r3, r3, #3
70013650:	4a08      	ldr	r2, [pc, #32]	@ (70013674 <sys_timeouts_init+0x3c>)
70013652:	4413      	add	r3, r2
70013654:	461a      	mov	r2, r3
70013656:	4908      	ldr	r1, [pc, #32]	@ (70013678 <sys_timeouts_init+0x40>)
70013658:	f000 f810 	bl	7001367c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
7001365c:	687b      	ldr	r3, [r7, #4]
7001365e:	3301      	adds	r3, #1
70013660:	607b      	str	r3, [r7, #4]
70013662:	687b      	ldr	r3, [r7, #4]
70013664:	2b02      	cmp	r3, #2
70013666:	d9ed      	bls.n	70013644 <sys_timeouts_init+0xc>
  }
}
70013668:	bf00      	nop
7001366a:	bf00      	nop
7001366c:	3708      	adds	r7, #8
7001366e:	46bd      	mov	sp, r7
70013670:	bd80      	pop	{r7, pc}
70013672:	bf00      	nop
70013674:	70017368 	.word	0x70017368
70013678:	700135d5 	.word	0x700135d5

7001367c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
7001367c:	b580      	push	{r7, lr}
7001367e:	b086      	sub	sp, #24
70013680:	af00      	add	r7, sp, #0
70013682:	60f8      	str	r0, [r7, #12]
70013684:	60b9      	str	r1, [r7, #8]
70013686:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
70013688:	68fb      	ldr	r3, [r7, #12]
7001368a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
7001368e:	d306      	bcc.n	7001369e <sys_timeout+0x22>
70013690:	4b0a      	ldr	r3, [pc, #40]	@ (700136bc <sys_timeout+0x40>)
70013692:	f240 1229 	movw	r2, #297	@ 0x129
70013696:	490a      	ldr	r1, [pc, #40]	@ (700136c0 <sys_timeout+0x44>)
70013698:	480a      	ldr	r0, [pc, #40]	@ (700136c4 <sys_timeout+0x48>)
7001369a:	f000 fb41 	bl	70013d20 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
7001369e:	f7f1 fd8f 	bl	700051c0 <sys_now>
700136a2:	4602      	mov	r2, r0
700136a4:	68fb      	ldr	r3, [r7, #12]
700136a6:	4413      	add	r3, r2
700136a8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
700136aa:	687a      	ldr	r2, [r7, #4]
700136ac:	68b9      	ldr	r1, [r7, #8]
700136ae:	6978      	ldr	r0, [r7, #20]
700136b0:	f7ff ff22 	bl	700134f8 <sys_timeout_abs>
#endif
}
700136b4:	bf00      	nop
700136b6:	3718      	adds	r7, #24
700136b8:	46bd      	mov	sp, r7
700136ba:	bd80      	pop	{r7, pc}
700136bc:	70016fa0 	.word	0x70016fa0
700136c0:	7001706c 	.word	0x7001706c
700136c4:	70017044 	.word	0x70017044

700136c8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
700136c8:	b580      	push	{r7, lr}
700136ca:	b084      	sub	sp, #16
700136cc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
700136ce:	f7f1 fd77 	bl	700051c0 <sys_now>
700136d2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
700136d4:	4b17      	ldr	r3, [pc, #92]	@ (70013734 <sys_check_timeouts+0x6c>)
700136d6:	681b      	ldr	r3, [r3, #0]
700136d8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
700136da:	68bb      	ldr	r3, [r7, #8]
700136dc:	2b00      	cmp	r3, #0
700136de:	d022      	beq.n	70013726 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
700136e0:	68bb      	ldr	r3, [r7, #8]
700136e2:	685b      	ldr	r3, [r3, #4]
700136e4:	68fa      	ldr	r2, [r7, #12]
700136e6:	1ad3      	subs	r3, r2, r3
700136e8:	0fdb      	lsrs	r3, r3, #31
700136ea:	f003 0301 	and.w	r3, r3, #1
700136ee:	b2db      	uxtb	r3, r3
700136f0:	2b00      	cmp	r3, #0
700136f2:	d11a      	bne.n	7001372a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
700136f4:	68bb      	ldr	r3, [r7, #8]
700136f6:	681b      	ldr	r3, [r3, #0]
700136f8:	4a0e      	ldr	r2, [pc, #56]	@ (70013734 <sys_check_timeouts+0x6c>)
700136fa:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
700136fc:	68bb      	ldr	r3, [r7, #8]
700136fe:	689b      	ldr	r3, [r3, #8]
70013700:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
70013702:	68bb      	ldr	r3, [r7, #8]
70013704:	68db      	ldr	r3, [r3, #12]
70013706:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
70013708:	68bb      	ldr	r3, [r7, #8]
7001370a:	685b      	ldr	r3, [r3, #4]
7001370c:	4a0a      	ldr	r2, [pc, #40]	@ (70013738 <sys_check_timeouts+0x70>)
7001370e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
70013710:	68b9      	ldr	r1, [r7, #8]
70013712:	200a      	movs	r0, #10
70013714:	f7f9 fa56 	bl	7000cbc4 <memp_free>
    if (handler != NULL) {
70013718:	687b      	ldr	r3, [r7, #4]
7001371a:	2b00      	cmp	r3, #0
7001371c:	d0da      	beq.n	700136d4 <sys_check_timeouts+0xc>
      handler(arg);
7001371e:	687b      	ldr	r3, [r7, #4]
70013720:	6838      	ldr	r0, [r7, #0]
70013722:	4798      	blx	r3
  do {
70013724:	e7d6      	b.n	700136d4 <sys_check_timeouts+0xc>
      return;
70013726:	bf00      	nop
70013728:	e000      	b.n	7001372c <sys_check_timeouts+0x64>
      return;
7001372a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
7001372c:	3710      	adds	r7, #16
7001372e:	46bd      	mov	sp, r7
70013730:	bd80      	pop	{r7, pc}
70013732:	bf00      	nop
70013734:	240084d8 	.word	0x240084d8
70013738:	240084dc 	.word	0x240084dc

7001373c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
7001373c:	b580      	push	{r7, lr}
7001373e:	b082      	sub	sp, #8
70013740:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
70013742:	4b16      	ldr	r3, [pc, #88]	@ (7001379c <sys_timeouts_sleeptime+0x60>)
70013744:	681b      	ldr	r3, [r3, #0]
70013746:	2b00      	cmp	r3, #0
70013748:	d102      	bne.n	70013750 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
7001374a:	f04f 33ff 	mov.w	r3, #4294967295
7001374e:	e020      	b.n	70013792 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
70013750:	f7f1 fd36 	bl	700051c0 <sys_now>
70013754:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
70013756:	4b11      	ldr	r3, [pc, #68]	@ (7001379c <sys_timeouts_sleeptime+0x60>)
70013758:	681b      	ldr	r3, [r3, #0]
7001375a:	685a      	ldr	r2, [r3, #4]
7001375c:	687b      	ldr	r3, [r7, #4]
7001375e:	1ad3      	subs	r3, r2, r3
70013760:	0fdb      	lsrs	r3, r3, #31
70013762:	f003 0301 	and.w	r3, r3, #1
70013766:	b2db      	uxtb	r3, r3
70013768:	2b00      	cmp	r3, #0
7001376a:	d001      	beq.n	70013770 <sys_timeouts_sleeptime+0x34>
    return 0;
7001376c:	2300      	movs	r3, #0
7001376e:	e010      	b.n	70013792 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
70013770:	4b0a      	ldr	r3, [pc, #40]	@ (7001379c <sys_timeouts_sleeptime+0x60>)
70013772:	681b      	ldr	r3, [r3, #0]
70013774:	685a      	ldr	r2, [r3, #4]
70013776:	687b      	ldr	r3, [r7, #4]
70013778:	1ad3      	subs	r3, r2, r3
7001377a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
7001377c:	683b      	ldr	r3, [r7, #0]
7001377e:	2b00      	cmp	r3, #0
70013780:	da06      	bge.n	70013790 <sys_timeouts_sleeptime+0x54>
70013782:	4b07      	ldr	r3, [pc, #28]	@ (700137a0 <sys_timeouts_sleeptime+0x64>)
70013784:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
70013788:	4906      	ldr	r1, [pc, #24]	@ (700137a4 <sys_timeouts_sleeptime+0x68>)
7001378a:	4807      	ldr	r0, [pc, #28]	@ (700137a8 <sys_timeouts_sleeptime+0x6c>)
7001378c:	f000 fac8 	bl	70013d20 <iprintf>
    return ret;
70013790:	683b      	ldr	r3, [r7, #0]
  }
}
70013792:	4618      	mov	r0, r3
70013794:	3708      	adds	r7, #8
70013796:	46bd      	mov	sp, r7
70013798:	bd80      	pop	{r7, pc}
7001379a:	bf00      	nop
7001379c:	240084d8 	.word	0x240084d8
700137a0:	70016fa0 	.word	0x70016fa0
700137a4:	700170a4 	.word	0x700170a4
700137a8:	70017044 	.word	0x70017044

700137ac <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
700137ac:	b580      	push	{r7, lr}
700137ae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
700137b0:	f000 f9b6 	bl	70013b20 <rand>
700137b4:	4603      	mov	r3, r0
700137b6:	b29b      	uxth	r3, r3
700137b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
700137bc:	b29b      	uxth	r3, r3
700137be:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
700137c2:	b29a      	uxth	r2, r3
700137c4:	4b01      	ldr	r3, [pc, #4]	@ (700137cc <udp_init+0x20>)
700137c6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
700137c8:	bf00      	nop
700137ca:	bd80      	pop	{r7, pc}
700137cc:	24000030 	.word	0x24000030

700137d0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
700137d0:	b580      	push	{r7, lr}
700137d2:	b084      	sub	sp, #16
700137d4:	af00      	add	r7, sp, #0
700137d6:	60f8      	str	r0, [r7, #12]
700137d8:	60b9      	str	r1, [r7, #8]
700137da:	4613      	mov	r3, r2
700137dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
700137de:	68fb      	ldr	r3, [r7, #12]
700137e0:	2b00      	cmp	r3, #0
700137e2:	d105      	bne.n	700137f0 <udp_input_local_match+0x20>
700137e4:	4b27      	ldr	r3, [pc, #156]	@ (70013884 <udp_input_local_match+0xb4>)
700137e6:	2287      	movs	r2, #135	@ 0x87
700137e8:	4927      	ldr	r1, [pc, #156]	@ (70013888 <udp_input_local_match+0xb8>)
700137ea:	4828      	ldr	r0, [pc, #160]	@ (7001388c <udp_input_local_match+0xbc>)
700137ec:	f000 fa98 	bl	70013d20 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
700137f0:	68bb      	ldr	r3, [r7, #8]
700137f2:	2b00      	cmp	r3, #0
700137f4:	d105      	bne.n	70013802 <udp_input_local_match+0x32>
700137f6:	4b23      	ldr	r3, [pc, #140]	@ (70013884 <udp_input_local_match+0xb4>)
700137f8:	2288      	movs	r2, #136	@ 0x88
700137fa:	4925      	ldr	r1, [pc, #148]	@ (70013890 <udp_input_local_match+0xc0>)
700137fc:	4823      	ldr	r0, [pc, #140]	@ (7001388c <udp_input_local_match+0xbc>)
700137fe:	f000 fa8f 	bl	70013d20 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
70013802:	68fb      	ldr	r3, [r7, #12]
70013804:	7a1b      	ldrb	r3, [r3, #8]
70013806:	2b00      	cmp	r3, #0
70013808:	d00b      	beq.n	70013822 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
7001380a:	68fb      	ldr	r3, [r7, #12]
7001380c:	7a1a      	ldrb	r2, [r3, #8]
7001380e:	4b21      	ldr	r3, [pc, #132]	@ (70013894 <udp_input_local_match+0xc4>)
70013810:	685b      	ldr	r3, [r3, #4]
70013812:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
70013816:	3301      	adds	r3, #1
70013818:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
7001381a:	429a      	cmp	r2, r3
7001381c:	d001      	beq.n	70013822 <udp_input_local_match+0x52>
    return 0;
7001381e:	2300      	movs	r3, #0
70013820:	e02b      	b.n	7001387a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
70013822:	79fb      	ldrb	r3, [r7, #7]
70013824:	2b00      	cmp	r3, #0
70013826:	d018      	beq.n	7001385a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
70013828:	68fb      	ldr	r3, [r7, #12]
7001382a:	2b00      	cmp	r3, #0
7001382c:	d013      	beq.n	70013856 <udp_input_local_match+0x86>
7001382e:	68fb      	ldr	r3, [r7, #12]
70013830:	681b      	ldr	r3, [r3, #0]
70013832:	2b00      	cmp	r3, #0
70013834:	d00f      	beq.n	70013856 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
70013836:	4b17      	ldr	r3, [pc, #92]	@ (70013894 <udp_input_local_match+0xc4>)
70013838:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
7001383a:	f1b3 3fff 	cmp.w	r3, #4294967295
7001383e:	d00a      	beq.n	70013856 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
70013840:	68fb      	ldr	r3, [r7, #12]
70013842:	681a      	ldr	r2, [r3, #0]
70013844:	4b13      	ldr	r3, [pc, #76]	@ (70013894 <udp_input_local_match+0xc4>)
70013846:	695b      	ldr	r3, [r3, #20]
70013848:	405a      	eors	r2, r3
7001384a:	68bb      	ldr	r3, [r7, #8]
7001384c:	3308      	adds	r3, #8
7001384e:	681b      	ldr	r3, [r3, #0]
70013850:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
70013852:	2b00      	cmp	r3, #0
70013854:	d110      	bne.n	70013878 <udp_input_local_match+0xa8>
          return 1;
70013856:	2301      	movs	r3, #1
70013858:	e00f      	b.n	7001387a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
7001385a:	68fb      	ldr	r3, [r7, #12]
7001385c:	2b00      	cmp	r3, #0
7001385e:	d009      	beq.n	70013874 <udp_input_local_match+0xa4>
70013860:	68fb      	ldr	r3, [r7, #12]
70013862:	681b      	ldr	r3, [r3, #0]
70013864:	2b00      	cmp	r3, #0
70013866:	d005      	beq.n	70013874 <udp_input_local_match+0xa4>
70013868:	68fb      	ldr	r3, [r7, #12]
7001386a:	681a      	ldr	r2, [r3, #0]
7001386c:	4b09      	ldr	r3, [pc, #36]	@ (70013894 <udp_input_local_match+0xc4>)
7001386e:	695b      	ldr	r3, [r3, #20]
70013870:	429a      	cmp	r2, r3
70013872:	d101      	bne.n	70013878 <udp_input_local_match+0xa8>
        return 1;
70013874:	2301      	movs	r3, #1
70013876:	e000      	b.n	7001387a <udp_input_local_match+0xaa>
      }
  }

  return 0;
70013878:	2300      	movs	r3, #0
}
7001387a:	4618      	mov	r0, r3
7001387c:	3710      	adds	r7, #16
7001387e:	46bd      	mov	sp, r7
70013880:	bd80      	pop	{r7, pc}
70013882:	bf00      	nop
70013884:	700170b8 	.word	0x700170b8
70013888:	70017114 	.word	0x70017114
7001388c:	70017138 	.word	0x70017138
70013890:	70017160 	.word	0x70017160
70013894:	24005368 	.word	0x24005368

70013898 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
70013898:	b590      	push	{r4, r7, lr}
7001389a:	b08d      	sub	sp, #52	@ 0x34
7001389c:	af02      	add	r7, sp, #8
7001389e:	6078      	str	r0, [r7, #4]
700138a0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
700138a2:	2300      	movs	r3, #0
700138a4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
700138a6:	687b      	ldr	r3, [r7, #4]
700138a8:	2b00      	cmp	r3, #0
700138aa:	d105      	bne.n	700138b8 <udp_input+0x20>
700138ac:	4b7c      	ldr	r3, [pc, #496]	@ (70013aa0 <udp_input+0x208>)
700138ae:	22cf      	movs	r2, #207	@ 0xcf
700138b0:	497c      	ldr	r1, [pc, #496]	@ (70013aa4 <udp_input+0x20c>)
700138b2:	487d      	ldr	r0, [pc, #500]	@ (70013aa8 <udp_input+0x210>)
700138b4:	f000 fa34 	bl	70013d20 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
700138b8:	683b      	ldr	r3, [r7, #0]
700138ba:	2b00      	cmp	r3, #0
700138bc:	d105      	bne.n	700138ca <udp_input+0x32>
700138be:	4b78      	ldr	r3, [pc, #480]	@ (70013aa0 <udp_input+0x208>)
700138c0:	22d0      	movs	r2, #208	@ 0xd0
700138c2:	497a      	ldr	r1, [pc, #488]	@ (70013aac <udp_input+0x214>)
700138c4:	4878      	ldr	r0, [pc, #480]	@ (70013aa8 <udp_input+0x210>)
700138c6:	f000 fa2b 	bl	70013d20 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
700138ca:	687b      	ldr	r3, [r7, #4]
700138cc:	895b      	ldrh	r3, [r3, #10]
700138ce:	2b07      	cmp	r3, #7
700138d0:	d803      	bhi.n	700138da <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
700138d2:	6878      	ldr	r0, [r7, #4]
700138d4:	f7f9 ffb8 	bl	7000d848 <pbuf_free>
    goto end;
700138d8:	e0de      	b.n	70013a98 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
700138da:	687b      	ldr	r3, [r7, #4]
700138dc:	685b      	ldr	r3, [r3, #4]
700138de:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
700138e0:	4b73      	ldr	r3, [pc, #460]	@ (70013ab0 <udp_input+0x218>)
700138e2:	695b      	ldr	r3, [r3, #20]
700138e4:	4a72      	ldr	r2, [pc, #456]	@ (70013ab0 <udp_input+0x218>)
700138e6:	6812      	ldr	r2, [r2, #0]
700138e8:	4611      	mov	r1, r2
700138ea:	4618      	mov	r0, r3
700138ec:	f7f7 fdfc 	bl	7000b4e8 <ip4_addr_isbroadcast_u32>
700138f0:	4603      	mov	r3, r0
700138f2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
700138f4:	697b      	ldr	r3, [r7, #20]
700138f6:	881b      	ldrh	r3, [r3, #0]
700138f8:	b29b      	uxth	r3, r3
700138fa:	4618      	mov	r0, r3
700138fc:	f7f6 f868 	bl	700099d0 <lwip_htons>
70013900:	4603      	mov	r3, r0
70013902:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
70013904:	697b      	ldr	r3, [r7, #20]
70013906:	885b      	ldrh	r3, [r3, #2]
70013908:	b29b      	uxth	r3, r3
7001390a:	4618      	mov	r0, r3
7001390c:	f7f6 f860 	bl	700099d0 <lwip_htons>
70013910:	4603      	mov	r3, r0
70013912:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
70013914:	2300      	movs	r3, #0
70013916:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
70013918:	2300      	movs	r3, #0
7001391a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
7001391c:	2300      	movs	r3, #0
7001391e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
70013920:	4b64      	ldr	r3, [pc, #400]	@ (70013ab4 <udp_input+0x21c>)
70013922:	681b      	ldr	r3, [r3, #0]
70013924:	627b      	str	r3, [r7, #36]	@ 0x24
70013926:	e054      	b.n	700139d2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
70013928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7001392a:	8a5b      	ldrh	r3, [r3, #18]
7001392c:	89fa      	ldrh	r2, [r7, #14]
7001392e:	429a      	cmp	r2, r3
70013930:	d14a      	bne.n	700139c8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
70013932:	7cfb      	ldrb	r3, [r7, #19]
70013934:	461a      	mov	r2, r3
70013936:	6839      	ldr	r1, [r7, #0]
70013938:	6a78      	ldr	r0, [r7, #36]	@ 0x24
7001393a:	f7ff ff49 	bl	700137d0 <udp_input_local_match>
7001393e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
70013940:	2b00      	cmp	r3, #0
70013942:	d041      	beq.n	700139c8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
70013944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70013946:	7c1b      	ldrb	r3, [r3, #16]
70013948:	f003 0304 	and.w	r3, r3, #4
7001394c:	2b00      	cmp	r3, #0
7001394e:	d11d      	bne.n	7001398c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
70013950:	69fb      	ldr	r3, [r7, #28]
70013952:	2b00      	cmp	r3, #0
70013954:	d102      	bne.n	7001395c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
70013956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70013958:	61fb      	str	r3, [r7, #28]
7001395a:	e017      	b.n	7001398c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
7001395c:	7cfb      	ldrb	r3, [r7, #19]
7001395e:	2b00      	cmp	r3, #0
70013960:	d014      	beq.n	7001398c <udp_input+0xf4>
70013962:	4b53      	ldr	r3, [pc, #332]	@ (70013ab0 <udp_input+0x218>)
70013964:	695b      	ldr	r3, [r3, #20]
70013966:	f1b3 3fff 	cmp.w	r3, #4294967295
7001396a:	d10f      	bne.n	7001398c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
7001396c:	69fb      	ldr	r3, [r7, #28]
7001396e:	681a      	ldr	r2, [r3, #0]
70013970:	683b      	ldr	r3, [r7, #0]
70013972:	3304      	adds	r3, #4
70013974:	681b      	ldr	r3, [r3, #0]
70013976:	429a      	cmp	r2, r3
70013978:	d008      	beq.n	7001398c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
7001397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7001397c:	681a      	ldr	r2, [r3, #0]
7001397e:	683b      	ldr	r3, [r7, #0]
70013980:	3304      	adds	r3, #4
70013982:	681b      	ldr	r3, [r3, #0]
70013984:	429a      	cmp	r2, r3
70013986:	d101      	bne.n	7001398c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
70013988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7001398a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
7001398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7001398e:	8a9b      	ldrh	r3, [r3, #20]
70013990:	8a3a      	ldrh	r2, [r7, #16]
70013992:	429a      	cmp	r2, r3
70013994:	d118      	bne.n	700139c8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
70013996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70013998:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
7001399a:	2b00      	cmp	r3, #0
7001399c:	d005      	beq.n	700139aa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
7001399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700139a0:	685a      	ldr	r2, [r3, #4]
700139a2:	4b43      	ldr	r3, [pc, #268]	@ (70013ab0 <udp_input+0x218>)
700139a4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
700139a6:	429a      	cmp	r2, r3
700139a8:	d10e      	bne.n	700139c8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
700139aa:	6a3b      	ldr	r3, [r7, #32]
700139ac:	2b00      	cmp	r3, #0
700139ae:	d014      	beq.n	700139da <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
700139b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700139b2:	68da      	ldr	r2, [r3, #12]
700139b4:	6a3b      	ldr	r3, [r7, #32]
700139b6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
700139b8:	4b3e      	ldr	r3, [pc, #248]	@ (70013ab4 <udp_input+0x21c>)
700139ba:	681a      	ldr	r2, [r3, #0]
700139bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700139be:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
700139c0:	4a3c      	ldr	r2, [pc, #240]	@ (70013ab4 <udp_input+0x21c>)
700139c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700139c4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
700139c6:	e008      	b.n	700139da <udp_input+0x142>
      }
    }

    prev = pcb;
700139c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700139ca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
700139cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700139ce:	68db      	ldr	r3, [r3, #12]
700139d0:	627b      	str	r3, [r7, #36]	@ 0x24
700139d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700139d4:	2b00      	cmp	r3, #0
700139d6:	d1a7      	bne.n	70013928 <udp_input+0x90>
700139d8:	e000      	b.n	700139dc <udp_input+0x144>
        break;
700139da:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
700139dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700139de:	2b00      	cmp	r3, #0
700139e0:	d101      	bne.n	700139e6 <udp_input+0x14e>
    pcb = uncon_pcb;
700139e2:	69fb      	ldr	r3, [r7, #28]
700139e4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
700139e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700139e8:	2b00      	cmp	r3, #0
700139ea:	d002      	beq.n	700139f2 <udp_input+0x15a>
    for_us = 1;
700139ec:	2301      	movs	r3, #1
700139ee:	76fb      	strb	r3, [r7, #27]
700139f0:	e00a      	b.n	70013a08 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
700139f2:	683b      	ldr	r3, [r7, #0]
700139f4:	3304      	adds	r3, #4
700139f6:	681a      	ldr	r2, [r3, #0]
700139f8:	4b2d      	ldr	r3, [pc, #180]	@ (70013ab0 <udp_input+0x218>)
700139fa:	695b      	ldr	r3, [r3, #20]
700139fc:	429a      	cmp	r2, r3
700139fe:	bf0c      	ite	eq
70013a00:	2301      	moveq	r3, #1
70013a02:	2300      	movne	r3, #0
70013a04:	b2db      	uxtb	r3, r3
70013a06:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
70013a08:	7efb      	ldrb	r3, [r7, #27]
70013a0a:	2b00      	cmp	r3, #0
70013a0c:	d041      	beq.n	70013a92 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
70013a0e:	2108      	movs	r1, #8
70013a10:	6878      	ldr	r0, [r7, #4]
70013a12:	f7f9 fe9d 	bl	7000d750 <pbuf_remove_header>
70013a16:	4603      	mov	r3, r0
70013a18:	2b00      	cmp	r3, #0
70013a1a:	d00a      	beq.n	70013a32 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
70013a1c:	4b20      	ldr	r3, [pc, #128]	@ (70013aa0 <udp_input+0x208>)
70013a1e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
70013a22:	4925      	ldr	r1, [pc, #148]	@ (70013ab8 <udp_input+0x220>)
70013a24:	4820      	ldr	r0, [pc, #128]	@ (70013aa8 <udp_input+0x210>)
70013a26:	f000 f97b 	bl	70013d20 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
70013a2a:	6878      	ldr	r0, [r7, #4]
70013a2c:	f7f9 ff0c 	bl	7000d848 <pbuf_free>
      goto end;
70013a30:	e032      	b.n	70013a98 <udp_input+0x200>
    }

    if (pcb != NULL) {
70013a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70013a34:	2b00      	cmp	r3, #0
70013a36:	d012      	beq.n	70013a5e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
70013a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70013a3a:	699b      	ldr	r3, [r3, #24]
70013a3c:	2b00      	cmp	r3, #0
70013a3e:	d00a      	beq.n	70013a56 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
70013a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70013a42:	699c      	ldr	r4, [r3, #24]
70013a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70013a46:	69d8      	ldr	r0, [r3, #28]
70013a48:	8a3b      	ldrh	r3, [r7, #16]
70013a4a:	9300      	str	r3, [sp, #0]
70013a4c:	4b1b      	ldr	r3, [pc, #108]	@ (70013abc <udp_input+0x224>)
70013a4e:	687a      	ldr	r2, [r7, #4]
70013a50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
70013a52:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
70013a54:	e021      	b.n	70013a9a <udp_input+0x202>
        pbuf_free(p);
70013a56:	6878      	ldr	r0, [r7, #4]
70013a58:	f7f9 fef6 	bl	7000d848 <pbuf_free>
        goto end;
70013a5c:	e01c      	b.n	70013a98 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
70013a5e:	7cfb      	ldrb	r3, [r7, #19]
70013a60:	2b00      	cmp	r3, #0
70013a62:	d112      	bne.n	70013a8a <udp_input+0x1f2>
70013a64:	4b12      	ldr	r3, [pc, #72]	@ (70013ab0 <udp_input+0x218>)
70013a66:	695b      	ldr	r3, [r3, #20]
70013a68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
70013a6c:	2be0      	cmp	r3, #224	@ 0xe0
70013a6e:	d00c      	beq.n	70013a8a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
70013a70:	4b0f      	ldr	r3, [pc, #60]	@ (70013ab0 <udp_input+0x218>)
70013a72:	899b      	ldrh	r3, [r3, #12]
70013a74:	3308      	adds	r3, #8
70013a76:	b29b      	uxth	r3, r3
70013a78:	b21b      	sxth	r3, r3
70013a7a:	4619      	mov	r1, r3
70013a7c:	6878      	ldr	r0, [r7, #4]
70013a7e:	f7f9 fed0 	bl	7000d822 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
70013a82:	2103      	movs	r1, #3
70013a84:	6878      	ldr	r0, [r7, #4]
70013a86:	f7f7 f921 	bl	7000accc <icmp_dest_unreach>
      pbuf_free(p);
70013a8a:	6878      	ldr	r0, [r7, #4]
70013a8c:	f7f9 fedc 	bl	7000d848 <pbuf_free>
  return;
70013a90:	e003      	b.n	70013a9a <udp_input+0x202>
    pbuf_free(p);
70013a92:	6878      	ldr	r0, [r7, #4]
70013a94:	f7f9 fed8 	bl	7000d848 <pbuf_free>
  return;
70013a98:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
70013a9a:	372c      	adds	r7, #44	@ 0x2c
70013a9c:	46bd      	mov	sp, r7
70013a9e:	bd90      	pop	{r4, r7, pc}
70013aa0:	700170b8 	.word	0x700170b8
70013aa4:	70017188 	.word	0x70017188
70013aa8:	70017138 	.word	0x70017138
70013aac:	700171a0 	.word	0x700171a0
70013ab0:	24005368 	.word	0x24005368
70013ab4:	240084e4 	.word	0x240084e4
70013ab8:	700171bc 	.word	0x700171bc
70013abc:	24005378 	.word	0x24005378

70013ac0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
70013ac0:	b480      	push	{r7}
70013ac2:	b085      	sub	sp, #20
70013ac4:	af00      	add	r7, sp, #0
70013ac6:	6078      	str	r0, [r7, #4]
70013ac8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
70013aca:	687b      	ldr	r3, [r7, #4]
70013acc:	2b00      	cmp	r3, #0
70013ace:	d01e      	beq.n	70013b0e <udp_netif_ip_addr_changed+0x4e>
70013ad0:	687b      	ldr	r3, [r7, #4]
70013ad2:	681b      	ldr	r3, [r3, #0]
70013ad4:	2b00      	cmp	r3, #0
70013ad6:	d01a      	beq.n	70013b0e <udp_netif_ip_addr_changed+0x4e>
70013ad8:	683b      	ldr	r3, [r7, #0]
70013ada:	2b00      	cmp	r3, #0
70013adc:	d017      	beq.n	70013b0e <udp_netif_ip_addr_changed+0x4e>
70013ade:	683b      	ldr	r3, [r7, #0]
70013ae0:	681b      	ldr	r3, [r3, #0]
70013ae2:	2b00      	cmp	r3, #0
70013ae4:	d013      	beq.n	70013b0e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
70013ae6:	4b0d      	ldr	r3, [pc, #52]	@ (70013b1c <udp_netif_ip_addr_changed+0x5c>)
70013ae8:	681b      	ldr	r3, [r3, #0]
70013aea:	60fb      	str	r3, [r7, #12]
70013aec:	e00c      	b.n	70013b08 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
70013aee:	68fb      	ldr	r3, [r7, #12]
70013af0:	681a      	ldr	r2, [r3, #0]
70013af2:	687b      	ldr	r3, [r7, #4]
70013af4:	681b      	ldr	r3, [r3, #0]
70013af6:	429a      	cmp	r2, r3
70013af8:	d103      	bne.n	70013b02 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
70013afa:	683b      	ldr	r3, [r7, #0]
70013afc:	681a      	ldr	r2, [r3, #0]
70013afe:	68fb      	ldr	r3, [r7, #12]
70013b00:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
70013b02:	68fb      	ldr	r3, [r7, #12]
70013b04:	68db      	ldr	r3, [r3, #12]
70013b06:	60fb      	str	r3, [r7, #12]
70013b08:	68fb      	ldr	r3, [r7, #12]
70013b0a:	2b00      	cmp	r3, #0
70013b0c:	d1ef      	bne.n	70013aee <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
70013b0e:	bf00      	nop
70013b10:	3714      	adds	r7, #20
70013b12:	46bd      	mov	sp, r7
70013b14:	f85d 7b04 	ldr.w	r7, [sp], #4
70013b18:	4770      	bx	lr
70013b1a:	bf00      	nop
70013b1c:	240084e4 	.word	0x240084e4

70013b20 <rand>:
70013b20:	4b16      	ldr	r3, [pc, #88]	@ (70013b7c <rand+0x5c>)
70013b22:	b510      	push	{r4, lr}
70013b24:	681c      	ldr	r4, [r3, #0]
70013b26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
70013b28:	b9b3      	cbnz	r3, 70013b58 <rand+0x38>
70013b2a:	2018      	movs	r0, #24
70013b2c:	f000 faa0 	bl	70014070 <malloc>
70013b30:	4602      	mov	r2, r0
70013b32:	6320      	str	r0, [r4, #48]	@ 0x30
70013b34:	b920      	cbnz	r0, 70013b40 <rand+0x20>
70013b36:	4b12      	ldr	r3, [pc, #72]	@ (70013b80 <rand+0x60>)
70013b38:	4812      	ldr	r0, [pc, #72]	@ (70013b84 <rand+0x64>)
70013b3a:	2152      	movs	r1, #82	@ 0x52
70013b3c:	f000 fa30 	bl	70013fa0 <__assert_func>
70013b40:	4911      	ldr	r1, [pc, #68]	@ (70013b88 <rand+0x68>)
70013b42:	4b12      	ldr	r3, [pc, #72]	@ (70013b8c <rand+0x6c>)
70013b44:	e9c0 1300 	strd	r1, r3, [r0]
70013b48:	4b11      	ldr	r3, [pc, #68]	@ (70013b90 <rand+0x70>)
70013b4a:	6083      	str	r3, [r0, #8]
70013b4c:	230b      	movs	r3, #11
70013b4e:	8183      	strh	r3, [r0, #12]
70013b50:	2100      	movs	r1, #0
70013b52:	2001      	movs	r0, #1
70013b54:	e9c2 0104 	strd	r0, r1, [r2, #16]
70013b58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
70013b5a:	480e      	ldr	r0, [pc, #56]	@ (70013b94 <rand+0x74>)
70013b5c:	690b      	ldr	r3, [r1, #16]
70013b5e:	694c      	ldr	r4, [r1, #20]
70013b60:	4a0d      	ldr	r2, [pc, #52]	@ (70013b98 <rand+0x78>)
70013b62:	4358      	muls	r0, r3
70013b64:	fb02 0004 	mla	r0, r2, r4, r0
70013b68:	fba3 3202 	umull	r3, r2, r3, r2
70013b6c:	3301      	adds	r3, #1
70013b6e:	eb40 0002 	adc.w	r0, r0, r2
70013b72:	e9c1 3004 	strd	r3, r0, [r1, #16]
70013b76:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
70013b7a:	bd10      	pop	{r4, pc}
70013b7c:	24000040 	.word	0x24000040
70013b80:	70017380 	.word	0x70017380
70013b84:	70017397 	.word	0x70017397
70013b88:	abcd330e 	.word	0xabcd330e
70013b8c:	e66d1234 	.word	0xe66d1234
70013b90:	0005deec 	.word	0x0005deec
70013b94:	5851f42d 	.word	0x5851f42d
70013b98:	4c957f2d 	.word	0x4c957f2d

70013b9c <std>:
70013b9c:	2300      	movs	r3, #0
70013b9e:	b510      	push	{r4, lr}
70013ba0:	4604      	mov	r4, r0
70013ba2:	e9c0 3300 	strd	r3, r3, [r0]
70013ba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
70013baa:	6083      	str	r3, [r0, #8]
70013bac:	8181      	strh	r1, [r0, #12]
70013bae:	6643      	str	r3, [r0, #100]	@ 0x64
70013bb0:	81c2      	strh	r2, [r0, #14]
70013bb2:	6183      	str	r3, [r0, #24]
70013bb4:	4619      	mov	r1, r3
70013bb6:	2208      	movs	r2, #8
70013bb8:	305c      	adds	r0, #92	@ 0x5c
70013bba:	f000 f916 	bl	70013dea <memset>
70013bbe:	4b0d      	ldr	r3, [pc, #52]	@ (70013bf4 <std+0x58>)
70013bc0:	6263      	str	r3, [r4, #36]	@ 0x24
70013bc2:	4b0d      	ldr	r3, [pc, #52]	@ (70013bf8 <std+0x5c>)
70013bc4:	62a3      	str	r3, [r4, #40]	@ 0x28
70013bc6:	4b0d      	ldr	r3, [pc, #52]	@ (70013bfc <std+0x60>)
70013bc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
70013bca:	4b0d      	ldr	r3, [pc, #52]	@ (70013c00 <std+0x64>)
70013bcc:	6323      	str	r3, [r4, #48]	@ 0x30
70013bce:	4b0d      	ldr	r3, [pc, #52]	@ (70013c04 <std+0x68>)
70013bd0:	6224      	str	r4, [r4, #32]
70013bd2:	429c      	cmp	r4, r3
70013bd4:	d006      	beq.n	70013be4 <std+0x48>
70013bd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
70013bda:	4294      	cmp	r4, r2
70013bdc:	d002      	beq.n	70013be4 <std+0x48>
70013bde:	33d0      	adds	r3, #208	@ 0xd0
70013be0:	429c      	cmp	r4, r3
70013be2:	d105      	bne.n	70013bf0 <std+0x54>
70013be4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
70013be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
70013bec:	f000 b9c6 	b.w	70013f7c <__retarget_lock_init_recursive>
70013bf0:	bd10      	pop	{r4, pc}
70013bf2:	bf00      	nop
70013bf4:	70013d45 	.word	0x70013d45
70013bf8:	70013d67 	.word	0x70013d67
70013bfc:	70013d9f 	.word	0x70013d9f
70013c00:	70013dc3 	.word	0x70013dc3
70013c04:	240084e8 	.word	0x240084e8

70013c08 <stdio_exit_handler>:
70013c08:	4a02      	ldr	r2, [pc, #8]	@ (70013c14 <stdio_exit_handler+0xc>)
70013c0a:	4903      	ldr	r1, [pc, #12]	@ (70013c18 <stdio_exit_handler+0x10>)
70013c0c:	4803      	ldr	r0, [pc, #12]	@ (70013c1c <stdio_exit_handler+0x14>)
70013c0e:	f000 b869 	b.w	70013ce4 <_fwalk_sglue>
70013c12:	bf00      	nop
70013c14:	24000034 	.word	0x24000034
70013c18:	70014885 	.word	0x70014885
70013c1c:	24000044 	.word	0x24000044

70013c20 <cleanup_stdio>:
70013c20:	6841      	ldr	r1, [r0, #4]
70013c22:	4b0c      	ldr	r3, [pc, #48]	@ (70013c54 <cleanup_stdio+0x34>)
70013c24:	4299      	cmp	r1, r3
70013c26:	b510      	push	{r4, lr}
70013c28:	4604      	mov	r4, r0
70013c2a:	d001      	beq.n	70013c30 <cleanup_stdio+0x10>
70013c2c:	f000 fe2a 	bl	70014884 <_fflush_r>
70013c30:	68a1      	ldr	r1, [r4, #8]
70013c32:	4b09      	ldr	r3, [pc, #36]	@ (70013c58 <cleanup_stdio+0x38>)
70013c34:	4299      	cmp	r1, r3
70013c36:	d002      	beq.n	70013c3e <cleanup_stdio+0x1e>
70013c38:	4620      	mov	r0, r4
70013c3a:	f000 fe23 	bl	70014884 <_fflush_r>
70013c3e:	68e1      	ldr	r1, [r4, #12]
70013c40:	4b06      	ldr	r3, [pc, #24]	@ (70013c5c <cleanup_stdio+0x3c>)
70013c42:	4299      	cmp	r1, r3
70013c44:	d004      	beq.n	70013c50 <cleanup_stdio+0x30>
70013c46:	4620      	mov	r0, r4
70013c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
70013c4c:	f000 be1a 	b.w	70014884 <_fflush_r>
70013c50:	bd10      	pop	{r4, pc}
70013c52:	bf00      	nop
70013c54:	240084e8 	.word	0x240084e8
70013c58:	24008550 	.word	0x24008550
70013c5c:	240085b8 	.word	0x240085b8

70013c60 <global_stdio_init.part.0>:
70013c60:	b510      	push	{r4, lr}
70013c62:	4b0b      	ldr	r3, [pc, #44]	@ (70013c90 <global_stdio_init.part.0+0x30>)
70013c64:	4c0b      	ldr	r4, [pc, #44]	@ (70013c94 <global_stdio_init.part.0+0x34>)
70013c66:	4a0c      	ldr	r2, [pc, #48]	@ (70013c98 <global_stdio_init.part.0+0x38>)
70013c68:	601a      	str	r2, [r3, #0]
70013c6a:	4620      	mov	r0, r4
70013c6c:	2200      	movs	r2, #0
70013c6e:	2104      	movs	r1, #4
70013c70:	f7ff ff94 	bl	70013b9c <std>
70013c74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
70013c78:	2201      	movs	r2, #1
70013c7a:	2109      	movs	r1, #9
70013c7c:	f7ff ff8e 	bl	70013b9c <std>
70013c80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
70013c84:	2202      	movs	r2, #2
70013c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
70013c8a:	2112      	movs	r1, #18
70013c8c:	f7ff bf86 	b.w	70013b9c <std>
70013c90:	24008620 	.word	0x24008620
70013c94:	240084e8 	.word	0x240084e8
70013c98:	70013c09 	.word	0x70013c09

70013c9c <__sfp_lock_acquire>:
70013c9c:	4801      	ldr	r0, [pc, #4]	@ (70013ca4 <__sfp_lock_acquire+0x8>)
70013c9e:	f000 b96e 	b.w	70013f7e <__retarget_lock_acquire_recursive>
70013ca2:	bf00      	nop
70013ca4:	24008629 	.word	0x24008629

70013ca8 <__sfp_lock_release>:
70013ca8:	4801      	ldr	r0, [pc, #4]	@ (70013cb0 <__sfp_lock_release+0x8>)
70013caa:	f000 b969 	b.w	70013f80 <__retarget_lock_release_recursive>
70013cae:	bf00      	nop
70013cb0:	24008629 	.word	0x24008629

70013cb4 <__sinit>:
70013cb4:	b510      	push	{r4, lr}
70013cb6:	4604      	mov	r4, r0
70013cb8:	f7ff fff0 	bl	70013c9c <__sfp_lock_acquire>
70013cbc:	6a23      	ldr	r3, [r4, #32]
70013cbe:	b11b      	cbz	r3, 70013cc8 <__sinit+0x14>
70013cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
70013cc4:	f7ff bff0 	b.w	70013ca8 <__sfp_lock_release>
70013cc8:	4b04      	ldr	r3, [pc, #16]	@ (70013cdc <__sinit+0x28>)
70013cca:	6223      	str	r3, [r4, #32]
70013ccc:	4b04      	ldr	r3, [pc, #16]	@ (70013ce0 <__sinit+0x2c>)
70013cce:	681b      	ldr	r3, [r3, #0]
70013cd0:	2b00      	cmp	r3, #0
70013cd2:	d1f5      	bne.n	70013cc0 <__sinit+0xc>
70013cd4:	f7ff ffc4 	bl	70013c60 <global_stdio_init.part.0>
70013cd8:	e7f2      	b.n	70013cc0 <__sinit+0xc>
70013cda:	bf00      	nop
70013cdc:	70013c21 	.word	0x70013c21
70013ce0:	24008620 	.word	0x24008620

70013ce4 <_fwalk_sglue>:
70013ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
70013ce8:	4607      	mov	r7, r0
70013cea:	4688      	mov	r8, r1
70013cec:	4614      	mov	r4, r2
70013cee:	2600      	movs	r6, #0
70013cf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
70013cf4:	f1b9 0901 	subs.w	r9, r9, #1
70013cf8:	d505      	bpl.n	70013d06 <_fwalk_sglue+0x22>
70013cfa:	6824      	ldr	r4, [r4, #0]
70013cfc:	2c00      	cmp	r4, #0
70013cfe:	d1f7      	bne.n	70013cf0 <_fwalk_sglue+0xc>
70013d00:	4630      	mov	r0, r6
70013d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
70013d06:	89ab      	ldrh	r3, [r5, #12]
70013d08:	2b01      	cmp	r3, #1
70013d0a:	d907      	bls.n	70013d1c <_fwalk_sglue+0x38>
70013d0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
70013d10:	3301      	adds	r3, #1
70013d12:	d003      	beq.n	70013d1c <_fwalk_sglue+0x38>
70013d14:	4629      	mov	r1, r5
70013d16:	4638      	mov	r0, r7
70013d18:	47c0      	blx	r8
70013d1a:	4306      	orrs	r6, r0
70013d1c:	3568      	adds	r5, #104	@ 0x68
70013d1e:	e7e9      	b.n	70013cf4 <_fwalk_sglue+0x10>

70013d20 <iprintf>:
70013d20:	b40f      	push	{r0, r1, r2, r3}
70013d22:	b507      	push	{r0, r1, r2, lr}
70013d24:	4906      	ldr	r1, [pc, #24]	@ (70013d40 <iprintf+0x20>)
70013d26:	ab04      	add	r3, sp, #16
70013d28:	6808      	ldr	r0, [r1, #0]
70013d2a:	f853 2b04 	ldr.w	r2, [r3], #4
70013d2e:	6881      	ldr	r1, [r0, #8]
70013d30:	9301      	str	r3, [sp, #4]
70013d32:	f000 fa7d 	bl	70014230 <_vfiprintf_r>
70013d36:	b003      	add	sp, #12
70013d38:	f85d eb04 	ldr.w	lr, [sp], #4
70013d3c:	b004      	add	sp, #16
70013d3e:	4770      	bx	lr
70013d40:	24000040 	.word	0x24000040

70013d44 <__sread>:
70013d44:	b510      	push	{r4, lr}
70013d46:	460c      	mov	r4, r1
70013d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
70013d4c:	f000 f8ce 	bl	70013eec <_read_r>
70013d50:	2800      	cmp	r0, #0
70013d52:	bfab      	itete	ge
70013d54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
70013d56:	89a3      	ldrhlt	r3, [r4, #12]
70013d58:	181b      	addge	r3, r3, r0
70013d5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
70013d5e:	bfac      	ite	ge
70013d60:	6563      	strge	r3, [r4, #84]	@ 0x54
70013d62:	81a3      	strhlt	r3, [r4, #12]
70013d64:	bd10      	pop	{r4, pc}

70013d66 <__swrite>:
70013d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
70013d6a:	461f      	mov	r7, r3
70013d6c:	898b      	ldrh	r3, [r1, #12]
70013d6e:	05db      	lsls	r3, r3, #23
70013d70:	4605      	mov	r5, r0
70013d72:	460c      	mov	r4, r1
70013d74:	4616      	mov	r6, r2
70013d76:	d505      	bpl.n	70013d84 <__swrite+0x1e>
70013d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
70013d7c:	2302      	movs	r3, #2
70013d7e:	2200      	movs	r2, #0
70013d80:	f000 f8a2 	bl	70013ec8 <_lseek_r>
70013d84:	89a3      	ldrh	r3, [r4, #12]
70013d86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
70013d8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
70013d8e:	81a3      	strh	r3, [r4, #12]
70013d90:	4632      	mov	r2, r6
70013d92:	463b      	mov	r3, r7
70013d94:	4628      	mov	r0, r5
70013d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
70013d9a:	f000 b8b9 	b.w	70013f10 <_write_r>

70013d9e <__sseek>:
70013d9e:	b510      	push	{r4, lr}
70013da0:	460c      	mov	r4, r1
70013da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
70013da6:	f000 f88f 	bl	70013ec8 <_lseek_r>
70013daa:	1c43      	adds	r3, r0, #1
70013dac:	89a3      	ldrh	r3, [r4, #12]
70013dae:	bf15      	itete	ne
70013db0:	6560      	strne	r0, [r4, #84]	@ 0x54
70013db2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
70013db6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
70013dba:	81a3      	strheq	r3, [r4, #12]
70013dbc:	bf18      	it	ne
70013dbe:	81a3      	strhne	r3, [r4, #12]
70013dc0:	bd10      	pop	{r4, pc}

70013dc2 <__sclose>:
70013dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
70013dc6:	f000 b819 	b.w	70013dfc <_close_r>

70013dca <memcmp>:
70013dca:	b510      	push	{r4, lr}
70013dcc:	3901      	subs	r1, #1
70013dce:	4402      	add	r2, r0
70013dd0:	4290      	cmp	r0, r2
70013dd2:	d101      	bne.n	70013dd8 <memcmp+0xe>
70013dd4:	2000      	movs	r0, #0
70013dd6:	e005      	b.n	70013de4 <memcmp+0x1a>
70013dd8:	7803      	ldrb	r3, [r0, #0]
70013dda:	f811 4f01 	ldrb.w	r4, [r1, #1]!
70013dde:	42a3      	cmp	r3, r4
70013de0:	d001      	beq.n	70013de6 <memcmp+0x1c>
70013de2:	1b18      	subs	r0, r3, r4
70013de4:	bd10      	pop	{r4, pc}
70013de6:	3001      	adds	r0, #1
70013de8:	e7f2      	b.n	70013dd0 <memcmp+0x6>

70013dea <memset>:
70013dea:	4402      	add	r2, r0
70013dec:	4603      	mov	r3, r0
70013dee:	4293      	cmp	r3, r2
70013df0:	d100      	bne.n	70013df4 <memset+0xa>
70013df2:	4770      	bx	lr
70013df4:	f803 1b01 	strb.w	r1, [r3], #1
70013df8:	e7f9      	b.n	70013dee <memset+0x4>
	...

70013dfc <_close_r>:
70013dfc:	b538      	push	{r3, r4, r5, lr}
70013dfe:	4d06      	ldr	r5, [pc, #24]	@ (70013e18 <_close_r+0x1c>)
70013e00:	2300      	movs	r3, #0
70013e02:	4604      	mov	r4, r0
70013e04:	4608      	mov	r0, r1
70013e06:	602b      	str	r3, [r5, #0]
70013e08:	f7ec fdba 	bl	70000980 <_close>
70013e0c:	1c43      	adds	r3, r0, #1
70013e0e:	d102      	bne.n	70013e16 <_close_r+0x1a>
70013e10:	682b      	ldr	r3, [r5, #0]
70013e12:	b103      	cbz	r3, 70013e16 <_close_r+0x1a>
70013e14:	6023      	str	r3, [r4, #0]
70013e16:	bd38      	pop	{r3, r4, r5, pc}
70013e18:	24008624 	.word	0x24008624

70013e1c <_reclaim_reent>:
70013e1c:	4b29      	ldr	r3, [pc, #164]	@ (70013ec4 <_reclaim_reent+0xa8>)
70013e1e:	681b      	ldr	r3, [r3, #0]
70013e20:	4283      	cmp	r3, r0
70013e22:	b570      	push	{r4, r5, r6, lr}
70013e24:	4604      	mov	r4, r0
70013e26:	d04b      	beq.n	70013ec0 <_reclaim_reent+0xa4>
70013e28:	69c3      	ldr	r3, [r0, #28]
70013e2a:	b1ab      	cbz	r3, 70013e58 <_reclaim_reent+0x3c>
70013e2c:	68db      	ldr	r3, [r3, #12]
70013e2e:	b16b      	cbz	r3, 70013e4c <_reclaim_reent+0x30>
70013e30:	2500      	movs	r5, #0
70013e32:	69e3      	ldr	r3, [r4, #28]
70013e34:	68db      	ldr	r3, [r3, #12]
70013e36:	5959      	ldr	r1, [r3, r5]
70013e38:	2900      	cmp	r1, #0
70013e3a:	d13b      	bne.n	70013eb4 <_reclaim_reent+0x98>
70013e3c:	3504      	adds	r5, #4
70013e3e:	2d80      	cmp	r5, #128	@ 0x80
70013e40:	d1f7      	bne.n	70013e32 <_reclaim_reent+0x16>
70013e42:	69e3      	ldr	r3, [r4, #28]
70013e44:	4620      	mov	r0, r4
70013e46:	68d9      	ldr	r1, [r3, #12]
70013e48:	f000 f8c8 	bl	70013fdc <_free_r>
70013e4c:	69e3      	ldr	r3, [r4, #28]
70013e4e:	6819      	ldr	r1, [r3, #0]
70013e50:	b111      	cbz	r1, 70013e58 <_reclaim_reent+0x3c>
70013e52:	4620      	mov	r0, r4
70013e54:	f000 f8c2 	bl	70013fdc <_free_r>
70013e58:	6961      	ldr	r1, [r4, #20]
70013e5a:	b111      	cbz	r1, 70013e62 <_reclaim_reent+0x46>
70013e5c:	4620      	mov	r0, r4
70013e5e:	f000 f8bd 	bl	70013fdc <_free_r>
70013e62:	69e1      	ldr	r1, [r4, #28]
70013e64:	b111      	cbz	r1, 70013e6c <_reclaim_reent+0x50>
70013e66:	4620      	mov	r0, r4
70013e68:	f000 f8b8 	bl	70013fdc <_free_r>
70013e6c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
70013e6e:	b111      	cbz	r1, 70013e76 <_reclaim_reent+0x5a>
70013e70:	4620      	mov	r0, r4
70013e72:	f000 f8b3 	bl	70013fdc <_free_r>
70013e76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
70013e78:	b111      	cbz	r1, 70013e80 <_reclaim_reent+0x64>
70013e7a:	4620      	mov	r0, r4
70013e7c:	f000 f8ae 	bl	70013fdc <_free_r>
70013e80:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
70013e82:	b111      	cbz	r1, 70013e8a <_reclaim_reent+0x6e>
70013e84:	4620      	mov	r0, r4
70013e86:	f000 f8a9 	bl	70013fdc <_free_r>
70013e8a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
70013e8c:	b111      	cbz	r1, 70013e94 <_reclaim_reent+0x78>
70013e8e:	4620      	mov	r0, r4
70013e90:	f000 f8a4 	bl	70013fdc <_free_r>
70013e94:	6c61      	ldr	r1, [r4, #68]	@ 0x44
70013e96:	b111      	cbz	r1, 70013e9e <_reclaim_reent+0x82>
70013e98:	4620      	mov	r0, r4
70013e9a:	f000 f89f 	bl	70013fdc <_free_r>
70013e9e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
70013ea0:	b111      	cbz	r1, 70013ea8 <_reclaim_reent+0x8c>
70013ea2:	4620      	mov	r0, r4
70013ea4:	f000 f89a 	bl	70013fdc <_free_r>
70013ea8:	6a23      	ldr	r3, [r4, #32]
70013eaa:	b14b      	cbz	r3, 70013ec0 <_reclaim_reent+0xa4>
70013eac:	4620      	mov	r0, r4
70013eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
70013eb2:	4718      	bx	r3
70013eb4:	680e      	ldr	r6, [r1, #0]
70013eb6:	4620      	mov	r0, r4
70013eb8:	f000 f890 	bl	70013fdc <_free_r>
70013ebc:	4631      	mov	r1, r6
70013ebe:	e7bb      	b.n	70013e38 <_reclaim_reent+0x1c>
70013ec0:	bd70      	pop	{r4, r5, r6, pc}
70013ec2:	bf00      	nop
70013ec4:	24000040 	.word	0x24000040

70013ec8 <_lseek_r>:
70013ec8:	b538      	push	{r3, r4, r5, lr}
70013eca:	4d07      	ldr	r5, [pc, #28]	@ (70013ee8 <_lseek_r+0x20>)
70013ecc:	4604      	mov	r4, r0
70013ece:	4608      	mov	r0, r1
70013ed0:	4611      	mov	r1, r2
70013ed2:	2200      	movs	r2, #0
70013ed4:	602a      	str	r2, [r5, #0]
70013ed6:	461a      	mov	r2, r3
70013ed8:	f7ec fd79 	bl	700009ce <_lseek>
70013edc:	1c43      	adds	r3, r0, #1
70013ede:	d102      	bne.n	70013ee6 <_lseek_r+0x1e>
70013ee0:	682b      	ldr	r3, [r5, #0]
70013ee2:	b103      	cbz	r3, 70013ee6 <_lseek_r+0x1e>
70013ee4:	6023      	str	r3, [r4, #0]
70013ee6:	bd38      	pop	{r3, r4, r5, pc}
70013ee8:	24008624 	.word	0x24008624

70013eec <_read_r>:
70013eec:	b538      	push	{r3, r4, r5, lr}
70013eee:	4d07      	ldr	r5, [pc, #28]	@ (70013f0c <_read_r+0x20>)
70013ef0:	4604      	mov	r4, r0
70013ef2:	4608      	mov	r0, r1
70013ef4:	4611      	mov	r1, r2
70013ef6:	2200      	movs	r2, #0
70013ef8:	602a      	str	r2, [r5, #0]
70013efa:	461a      	mov	r2, r3
70013efc:	f7ec fd07 	bl	7000090e <_read>
70013f00:	1c43      	adds	r3, r0, #1
70013f02:	d102      	bne.n	70013f0a <_read_r+0x1e>
70013f04:	682b      	ldr	r3, [r5, #0]
70013f06:	b103      	cbz	r3, 70013f0a <_read_r+0x1e>
70013f08:	6023      	str	r3, [r4, #0]
70013f0a:	bd38      	pop	{r3, r4, r5, pc}
70013f0c:	24008624 	.word	0x24008624

70013f10 <_write_r>:
70013f10:	b538      	push	{r3, r4, r5, lr}
70013f12:	4d07      	ldr	r5, [pc, #28]	@ (70013f30 <_write_r+0x20>)
70013f14:	4604      	mov	r4, r0
70013f16:	4608      	mov	r0, r1
70013f18:	4611      	mov	r1, r2
70013f1a:	2200      	movs	r2, #0
70013f1c:	602a      	str	r2, [r5, #0]
70013f1e:	461a      	mov	r2, r3
70013f20:	f7ec fd12 	bl	70000948 <_write>
70013f24:	1c43      	adds	r3, r0, #1
70013f26:	d102      	bne.n	70013f2e <_write_r+0x1e>
70013f28:	682b      	ldr	r3, [r5, #0]
70013f2a:	b103      	cbz	r3, 70013f2e <_write_r+0x1e>
70013f2c:	6023      	str	r3, [r4, #0]
70013f2e:	bd38      	pop	{r3, r4, r5, pc}
70013f30:	24008624 	.word	0x24008624

70013f34 <__libc_init_array>:
70013f34:	b570      	push	{r4, r5, r6, lr}
70013f36:	4d0d      	ldr	r5, [pc, #52]	@ (70013f6c <__libc_init_array+0x38>)
70013f38:	4c0d      	ldr	r4, [pc, #52]	@ (70013f70 <__libc_init_array+0x3c>)
70013f3a:	1b64      	subs	r4, r4, r5
70013f3c:	10a4      	asrs	r4, r4, #2
70013f3e:	2600      	movs	r6, #0
70013f40:	42a6      	cmp	r6, r4
70013f42:	d109      	bne.n	70013f58 <__libc_init_array+0x24>
70013f44:	4d0b      	ldr	r5, [pc, #44]	@ (70013f74 <__libc_init_array+0x40>)
70013f46:	4c0c      	ldr	r4, [pc, #48]	@ (70013f78 <__libc_init_array+0x44>)
70013f48:	f000 fe4a 	bl	70014be0 <_init>
70013f4c:	1b64      	subs	r4, r4, r5
70013f4e:	10a4      	asrs	r4, r4, #2
70013f50:	2600      	movs	r6, #0
70013f52:	42a6      	cmp	r6, r4
70013f54:	d105      	bne.n	70013f62 <__libc_init_array+0x2e>
70013f56:	bd70      	pop	{r4, r5, r6, pc}
70013f58:	f855 3b04 	ldr.w	r3, [r5], #4
70013f5c:	4798      	blx	r3
70013f5e:	3601      	adds	r6, #1
70013f60:	e7ee      	b.n	70013f40 <__libc_init_array+0xc>
70013f62:	f855 3b04 	ldr.w	r3, [r5], #4
70013f66:	4798      	blx	r3
70013f68:	3601      	adds	r6, #1
70013f6a:	e7f2      	b.n	70013f52 <__libc_init_array+0x1e>
70013f6c:	70017468 	.word	0x70017468
70013f70:	70017468 	.word	0x70017468
70013f74:	70017468 	.word	0x70017468
70013f78:	7001746c 	.word	0x7001746c

70013f7c <__retarget_lock_init_recursive>:
70013f7c:	4770      	bx	lr

70013f7e <__retarget_lock_acquire_recursive>:
70013f7e:	4770      	bx	lr

70013f80 <__retarget_lock_release_recursive>:
70013f80:	4770      	bx	lr

70013f82 <memcpy>:
70013f82:	440a      	add	r2, r1
70013f84:	4291      	cmp	r1, r2
70013f86:	f100 33ff 	add.w	r3, r0, #4294967295
70013f8a:	d100      	bne.n	70013f8e <memcpy+0xc>
70013f8c:	4770      	bx	lr
70013f8e:	b510      	push	{r4, lr}
70013f90:	f811 4b01 	ldrb.w	r4, [r1], #1
70013f94:	f803 4f01 	strb.w	r4, [r3, #1]!
70013f98:	4291      	cmp	r1, r2
70013f9a:	d1f9      	bne.n	70013f90 <memcpy+0xe>
70013f9c:	bd10      	pop	{r4, pc}
	...

70013fa0 <__assert_func>:
70013fa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
70013fa2:	4614      	mov	r4, r2
70013fa4:	461a      	mov	r2, r3
70013fa6:	4b09      	ldr	r3, [pc, #36]	@ (70013fcc <__assert_func+0x2c>)
70013fa8:	681b      	ldr	r3, [r3, #0]
70013faa:	4605      	mov	r5, r0
70013fac:	68d8      	ldr	r0, [r3, #12]
70013fae:	b954      	cbnz	r4, 70013fc6 <__assert_func+0x26>
70013fb0:	4b07      	ldr	r3, [pc, #28]	@ (70013fd0 <__assert_func+0x30>)
70013fb2:	461c      	mov	r4, r3
70013fb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
70013fb8:	9100      	str	r1, [sp, #0]
70013fba:	462b      	mov	r3, r5
70013fbc:	4905      	ldr	r1, [pc, #20]	@ (70013fd4 <__assert_func+0x34>)
70013fbe:	f000 fc89 	bl	700148d4 <fiprintf>
70013fc2:	f000 fd3d 	bl	70014a40 <abort>
70013fc6:	4b04      	ldr	r3, [pc, #16]	@ (70013fd8 <__assert_func+0x38>)
70013fc8:	e7f4      	b.n	70013fb4 <__assert_func+0x14>
70013fca:	bf00      	nop
70013fcc:	24000040 	.word	0x24000040
70013fd0:	7001742a 	.word	0x7001742a
70013fd4:	700173fc 	.word	0x700173fc
70013fd8:	700173ef 	.word	0x700173ef

70013fdc <_free_r>:
70013fdc:	b538      	push	{r3, r4, r5, lr}
70013fde:	4605      	mov	r5, r0
70013fe0:	2900      	cmp	r1, #0
70013fe2:	d041      	beq.n	70014068 <_free_r+0x8c>
70013fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
70013fe8:	1f0c      	subs	r4, r1, #4
70013fea:	2b00      	cmp	r3, #0
70013fec:	bfb8      	it	lt
70013fee:	18e4      	addlt	r4, r4, r3
70013ff0:	f000 f8e8 	bl	700141c4 <__malloc_lock>
70013ff4:	4a1d      	ldr	r2, [pc, #116]	@ (7001406c <_free_r+0x90>)
70013ff6:	6813      	ldr	r3, [r2, #0]
70013ff8:	b933      	cbnz	r3, 70014008 <_free_r+0x2c>
70013ffa:	6063      	str	r3, [r4, #4]
70013ffc:	6014      	str	r4, [r2, #0]
70013ffe:	4628      	mov	r0, r5
70014000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
70014004:	f000 b8e4 	b.w	700141d0 <__malloc_unlock>
70014008:	42a3      	cmp	r3, r4
7001400a:	d908      	bls.n	7001401e <_free_r+0x42>
7001400c:	6820      	ldr	r0, [r4, #0]
7001400e:	1821      	adds	r1, r4, r0
70014010:	428b      	cmp	r3, r1
70014012:	bf01      	itttt	eq
70014014:	6819      	ldreq	r1, [r3, #0]
70014016:	685b      	ldreq	r3, [r3, #4]
70014018:	1809      	addeq	r1, r1, r0
7001401a:	6021      	streq	r1, [r4, #0]
7001401c:	e7ed      	b.n	70013ffa <_free_r+0x1e>
7001401e:	461a      	mov	r2, r3
70014020:	685b      	ldr	r3, [r3, #4]
70014022:	b10b      	cbz	r3, 70014028 <_free_r+0x4c>
70014024:	42a3      	cmp	r3, r4
70014026:	d9fa      	bls.n	7001401e <_free_r+0x42>
70014028:	6811      	ldr	r1, [r2, #0]
7001402a:	1850      	adds	r0, r2, r1
7001402c:	42a0      	cmp	r0, r4
7001402e:	d10b      	bne.n	70014048 <_free_r+0x6c>
70014030:	6820      	ldr	r0, [r4, #0]
70014032:	4401      	add	r1, r0
70014034:	1850      	adds	r0, r2, r1
70014036:	4283      	cmp	r3, r0
70014038:	6011      	str	r1, [r2, #0]
7001403a:	d1e0      	bne.n	70013ffe <_free_r+0x22>
7001403c:	6818      	ldr	r0, [r3, #0]
7001403e:	685b      	ldr	r3, [r3, #4]
70014040:	6053      	str	r3, [r2, #4]
70014042:	4408      	add	r0, r1
70014044:	6010      	str	r0, [r2, #0]
70014046:	e7da      	b.n	70013ffe <_free_r+0x22>
70014048:	d902      	bls.n	70014050 <_free_r+0x74>
7001404a:	230c      	movs	r3, #12
7001404c:	602b      	str	r3, [r5, #0]
7001404e:	e7d6      	b.n	70013ffe <_free_r+0x22>
70014050:	6820      	ldr	r0, [r4, #0]
70014052:	1821      	adds	r1, r4, r0
70014054:	428b      	cmp	r3, r1
70014056:	bf04      	itt	eq
70014058:	6819      	ldreq	r1, [r3, #0]
7001405a:	685b      	ldreq	r3, [r3, #4]
7001405c:	6063      	str	r3, [r4, #4]
7001405e:	bf04      	itt	eq
70014060:	1809      	addeq	r1, r1, r0
70014062:	6021      	streq	r1, [r4, #0]
70014064:	6054      	str	r4, [r2, #4]
70014066:	e7ca      	b.n	70013ffe <_free_r+0x22>
70014068:	bd38      	pop	{r3, r4, r5, pc}
7001406a:	bf00      	nop
7001406c:	24008630 	.word	0x24008630

70014070 <malloc>:
70014070:	4b02      	ldr	r3, [pc, #8]	@ (7001407c <malloc+0xc>)
70014072:	4601      	mov	r1, r0
70014074:	6818      	ldr	r0, [r3, #0]
70014076:	f000 b825 	b.w	700140c4 <_malloc_r>
7001407a:	bf00      	nop
7001407c:	24000040 	.word	0x24000040

70014080 <sbrk_aligned>:
70014080:	b570      	push	{r4, r5, r6, lr}
70014082:	4e0f      	ldr	r6, [pc, #60]	@ (700140c0 <sbrk_aligned+0x40>)
70014084:	460c      	mov	r4, r1
70014086:	6831      	ldr	r1, [r6, #0]
70014088:	4605      	mov	r5, r0
7001408a:	b911      	cbnz	r1, 70014092 <sbrk_aligned+0x12>
7001408c:	f000 fcc8 	bl	70014a20 <_sbrk_r>
70014090:	6030      	str	r0, [r6, #0]
70014092:	4621      	mov	r1, r4
70014094:	4628      	mov	r0, r5
70014096:	f000 fcc3 	bl	70014a20 <_sbrk_r>
7001409a:	1c43      	adds	r3, r0, #1
7001409c:	d103      	bne.n	700140a6 <sbrk_aligned+0x26>
7001409e:	f04f 34ff 	mov.w	r4, #4294967295
700140a2:	4620      	mov	r0, r4
700140a4:	bd70      	pop	{r4, r5, r6, pc}
700140a6:	1cc4      	adds	r4, r0, #3
700140a8:	f024 0403 	bic.w	r4, r4, #3
700140ac:	42a0      	cmp	r0, r4
700140ae:	d0f8      	beq.n	700140a2 <sbrk_aligned+0x22>
700140b0:	1a21      	subs	r1, r4, r0
700140b2:	4628      	mov	r0, r5
700140b4:	f000 fcb4 	bl	70014a20 <_sbrk_r>
700140b8:	3001      	adds	r0, #1
700140ba:	d1f2      	bne.n	700140a2 <sbrk_aligned+0x22>
700140bc:	e7ef      	b.n	7001409e <sbrk_aligned+0x1e>
700140be:	bf00      	nop
700140c0:	2400862c 	.word	0x2400862c

700140c4 <_malloc_r>:
700140c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
700140c8:	1ccd      	adds	r5, r1, #3
700140ca:	f025 0503 	bic.w	r5, r5, #3
700140ce:	3508      	adds	r5, #8
700140d0:	2d0c      	cmp	r5, #12
700140d2:	bf38      	it	cc
700140d4:	250c      	movcc	r5, #12
700140d6:	2d00      	cmp	r5, #0
700140d8:	4606      	mov	r6, r0
700140da:	db01      	blt.n	700140e0 <_malloc_r+0x1c>
700140dc:	42a9      	cmp	r1, r5
700140de:	d904      	bls.n	700140ea <_malloc_r+0x26>
700140e0:	230c      	movs	r3, #12
700140e2:	6033      	str	r3, [r6, #0]
700140e4:	2000      	movs	r0, #0
700140e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
700140ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 700141c0 <_malloc_r+0xfc>
700140ee:	f000 f869 	bl	700141c4 <__malloc_lock>
700140f2:	f8d8 3000 	ldr.w	r3, [r8]
700140f6:	461c      	mov	r4, r3
700140f8:	bb44      	cbnz	r4, 7001414c <_malloc_r+0x88>
700140fa:	4629      	mov	r1, r5
700140fc:	4630      	mov	r0, r6
700140fe:	f7ff ffbf 	bl	70014080 <sbrk_aligned>
70014102:	1c43      	adds	r3, r0, #1
70014104:	4604      	mov	r4, r0
70014106:	d158      	bne.n	700141ba <_malloc_r+0xf6>
70014108:	f8d8 4000 	ldr.w	r4, [r8]
7001410c:	4627      	mov	r7, r4
7001410e:	2f00      	cmp	r7, #0
70014110:	d143      	bne.n	7001419a <_malloc_r+0xd6>
70014112:	2c00      	cmp	r4, #0
70014114:	d04b      	beq.n	700141ae <_malloc_r+0xea>
70014116:	6823      	ldr	r3, [r4, #0]
70014118:	4639      	mov	r1, r7
7001411a:	4630      	mov	r0, r6
7001411c:	eb04 0903 	add.w	r9, r4, r3
70014120:	f000 fc7e 	bl	70014a20 <_sbrk_r>
70014124:	4581      	cmp	r9, r0
70014126:	d142      	bne.n	700141ae <_malloc_r+0xea>
70014128:	6821      	ldr	r1, [r4, #0]
7001412a:	1a6d      	subs	r5, r5, r1
7001412c:	4629      	mov	r1, r5
7001412e:	4630      	mov	r0, r6
70014130:	f7ff ffa6 	bl	70014080 <sbrk_aligned>
70014134:	3001      	adds	r0, #1
70014136:	d03a      	beq.n	700141ae <_malloc_r+0xea>
70014138:	6823      	ldr	r3, [r4, #0]
7001413a:	442b      	add	r3, r5
7001413c:	6023      	str	r3, [r4, #0]
7001413e:	f8d8 3000 	ldr.w	r3, [r8]
70014142:	685a      	ldr	r2, [r3, #4]
70014144:	bb62      	cbnz	r2, 700141a0 <_malloc_r+0xdc>
70014146:	f8c8 7000 	str.w	r7, [r8]
7001414a:	e00f      	b.n	7001416c <_malloc_r+0xa8>
7001414c:	6822      	ldr	r2, [r4, #0]
7001414e:	1b52      	subs	r2, r2, r5
70014150:	d420      	bmi.n	70014194 <_malloc_r+0xd0>
70014152:	2a0b      	cmp	r2, #11
70014154:	d917      	bls.n	70014186 <_malloc_r+0xc2>
70014156:	1961      	adds	r1, r4, r5
70014158:	42a3      	cmp	r3, r4
7001415a:	6025      	str	r5, [r4, #0]
7001415c:	bf18      	it	ne
7001415e:	6059      	strne	r1, [r3, #4]
70014160:	6863      	ldr	r3, [r4, #4]
70014162:	bf08      	it	eq
70014164:	f8c8 1000 	streq.w	r1, [r8]
70014168:	5162      	str	r2, [r4, r5]
7001416a:	604b      	str	r3, [r1, #4]
7001416c:	4630      	mov	r0, r6
7001416e:	f000 f82f 	bl	700141d0 <__malloc_unlock>
70014172:	f104 000b 	add.w	r0, r4, #11
70014176:	1d23      	adds	r3, r4, #4
70014178:	f020 0007 	bic.w	r0, r0, #7
7001417c:	1ac2      	subs	r2, r0, r3
7001417e:	bf1c      	itt	ne
70014180:	1a1b      	subne	r3, r3, r0
70014182:	50a3      	strne	r3, [r4, r2]
70014184:	e7af      	b.n	700140e6 <_malloc_r+0x22>
70014186:	6862      	ldr	r2, [r4, #4]
70014188:	42a3      	cmp	r3, r4
7001418a:	bf0c      	ite	eq
7001418c:	f8c8 2000 	streq.w	r2, [r8]
70014190:	605a      	strne	r2, [r3, #4]
70014192:	e7eb      	b.n	7001416c <_malloc_r+0xa8>
70014194:	4623      	mov	r3, r4
70014196:	6864      	ldr	r4, [r4, #4]
70014198:	e7ae      	b.n	700140f8 <_malloc_r+0x34>
7001419a:	463c      	mov	r4, r7
7001419c:	687f      	ldr	r7, [r7, #4]
7001419e:	e7b6      	b.n	7001410e <_malloc_r+0x4a>
700141a0:	461a      	mov	r2, r3
700141a2:	685b      	ldr	r3, [r3, #4]
700141a4:	42a3      	cmp	r3, r4
700141a6:	d1fb      	bne.n	700141a0 <_malloc_r+0xdc>
700141a8:	2300      	movs	r3, #0
700141aa:	6053      	str	r3, [r2, #4]
700141ac:	e7de      	b.n	7001416c <_malloc_r+0xa8>
700141ae:	230c      	movs	r3, #12
700141b0:	6033      	str	r3, [r6, #0]
700141b2:	4630      	mov	r0, r6
700141b4:	f000 f80c 	bl	700141d0 <__malloc_unlock>
700141b8:	e794      	b.n	700140e4 <_malloc_r+0x20>
700141ba:	6005      	str	r5, [r0, #0]
700141bc:	e7d6      	b.n	7001416c <_malloc_r+0xa8>
700141be:	bf00      	nop
700141c0:	24008630 	.word	0x24008630

700141c4 <__malloc_lock>:
700141c4:	4801      	ldr	r0, [pc, #4]	@ (700141cc <__malloc_lock+0x8>)
700141c6:	f7ff beda 	b.w	70013f7e <__retarget_lock_acquire_recursive>
700141ca:	bf00      	nop
700141cc:	24008628 	.word	0x24008628

700141d0 <__malloc_unlock>:
700141d0:	4801      	ldr	r0, [pc, #4]	@ (700141d8 <__malloc_unlock+0x8>)
700141d2:	f7ff bed5 	b.w	70013f80 <__retarget_lock_release_recursive>
700141d6:	bf00      	nop
700141d8:	24008628 	.word	0x24008628

700141dc <__sfputc_r>:
700141dc:	6893      	ldr	r3, [r2, #8]
700141de:	3b01      	subs	r3, #1
700141e0:	2b00      	cmp	r3, #0
700141e2:	b410      	push	{r4}
700141e4:	6093      	str	r3, [r2, #8]
700141e6:	da08      	bge.n	700141fa <__sfputc_r+0x1e>
700141e8:	6994      	ldr	r4, [r2, #24]
700141ea:	42a3      	cmp	r3, r4
700141ec:	db01      	blt.n	700141f2 <__sfputc_r+0x16>
700141ee:	290a      	cmp	r1, #10
700141f0:	d103      	bne.n	700141fa <__sfputc_r+0x1e>
700141f2:	f85d 4b04 	ldr.w	r4, [sp], #4
700141f6:	f000 bb7f 	b.w	700148f8 <__swbuf_r>
700141fa:	6813      	ldr	r3, [r2, #0]
700141fc:	1c58      	adds	r0, r3, #1
700141fe:	6010      	str	r0, [r2, #0]
70014200:	7019      	strb	r1, [r3, #0]
70014202:	4608      	mov	r0, r1
70014204:	f85d 4b04 	ldr.w	r4, [sp], #4
70014208:	4770      	bx	lr

7001420a <__sfputs_r>:
7001420a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
7001420c:	4606      	mov	r6, r0
7001420e:	460f      	mov	r7, r1
70014210:	4614      	mov	r4, r2
70014212:	18d5      	adds	r5, r2, r3
70014214:	42ac      	cmp	r4, r5
70014216:	d101      	bne.n	7001421c <__sfputs_r+0x12>
70014218:	2000      	movs	r0, #0
7001421a:	e007      	b.n	7001422c <__sfputs_r+0x22>
7001421c:	f814 1b01 	ldrb.w	r1, [r4], #1
70014220:	463a      	mov	r2, r7
70014222:	4630      	mov	r0, r6
70014224:	f7ff ffda 	bl	700141dc <__sfputc_r>
70014228:	1c43      	adds	r3, r0, #1
7001422a:	d1f3      	bne.n	70014214 <__sfputs_r+0xa>
7001422c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

70014230 <_vfiprintf_r>:
70014230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
70014234:	460d      	mov	r5, r1
70014236:	b09d      	sub	sp, #116	@ 0x74
70014238:	4614      	mov	r4, r2
7001423a:	4698      	mov	r8, r3
7001423c:	4606      	mov	r6, r0
7001423e:	b118      	cbz	r0, 70014248 <_vfiprintf_r+0x18>
70014240:	6a03      	ldr	r3, [r0, #32]
70014242:	b90b      	cbnz	r3, 70014248 <_vfiprintf_r+0x18>
70014244:	f7ff fd36 	bl	70013cb4 <__sinit>
70014248:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
7001424a:	07d9      	lsls	r1, r3, #31
7001424c:	d405      	bmi.n	7001425a <_vfiprintf_r+0x2a>
7001424e:	89ab      	ldrh	r3, [r5, #12]
70014250:	059a      	lsls	r2, r3, #22
70014252:	d402      	bmi.n	7001425a <_vfiprintf_r+0x2a>
70014254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
70014256:	f7ff fe92 	bl	70013f7e <__retarget_lock_acquire_recursive>
7001425a:	89ab      	ldrh	r3, [r5, #12]
7001425c:	071b      	lsls	r3, r3, #28
7001425e:	d501      	bpl.n	70014264 <_vfiprintf_r+0x34>
70014260:	692b      	ldr	r3, [r5, #16]
70014262:	b99b      	cbnz	r3, 7001428c <_vfiprintf_r+0x5c>
70014264:	4629      	mov	r1, r5
70014266:	4630      	mov	r0, r6
70014268:	f000 fb84 	bl	70014974 <__swsetup_r>
7001426c:	b170      	cbz	r0, 7001428c <_vfiprintf_r+0x5c>
7001426e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
70014270:	07dc      	lsls	r4, r3, #31
70014272:	d504      	bpl.n	7001427e <_vfiprintf_r+0x4e>
70014274:	f04f 30ff 	mov.w	r0, #4294967295
70014278:	b01d      	add	sp, #116	@ 0x74
7001427a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
7001427e:	89ab      	ldrh	r3, [r5, #12]
70014280:	0598      	lsls	r0, r3, #22
70014282:	d4f7      	bmi.n	70014274 <_vfiprintf_r+0x44>
70014284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
70014286:	f7ff fe7b 	bl	70013f80 <__retarget_lock_release_recursive>
7001428a:	e7f3      	b.n	70014274 <_vfiprintf_r+0x44>
7001428c:	2300      	movs	r3, #0
7001428e:	9309      	str	r3, [sp, #36]	@ 0x24
70014290:	2320      	movs	r3, #32
70014292:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
70014296:	f8cd 800c 	str.w	r8, [sp, #12]
7001429a:	2330      	movs	r3, #48	@ 0x30
7001429c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 7001444c <_vfiprintf_r+0x21c>
700142a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
700142a4:	f04f 0901 	mov.w	r9, #1
700142a8:	4623      	mov	r3, r4
700142aa:	469a      	mov	sl, r3
700142ac:	f813 2b01 	ldrb.w	r2, [r3], #1
700142b0:	b10a      	cbz	r2, 700142b6 <_vfiprintf_r+0x86>
700142b2:	2a25      	cmp	r2, #37	@ 0x25
700142b4:	d1f9      	bne.n	700142aa <_vfiprintf_r+0x7a>
700142b6:	ebba 0b04 	subs.w	fp, sl, r4
700142ba:	d00b      	beq.n	700142d4 <_vfiprintf_r+0xa4>
700142bc:	465b      	mov	r3, fp
700142be:	4622      	mov	r2, r4
700142c0:	4629      	mov	r1, r5
700142c2:	4630      	mov	r0, r6
700142c4:	f7ff ffa1 	bl	7001420a <__sfputs_r>
700142c8:	3001      	adds	r0, #1
700142ca:	f000 80a7 	beq.w	7001441c <_vfiprintf_r+0x1ec>
700142ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
700142d0:	445a      	add	r2, fp
700142d2:	9209      	str	r2, [sp, #36]	@ 0x24
700142d4:	f89a 3000 	ldrb.w	r3, [sl]
700142d8:	2b00      	cmp	r3, #0
700142da:	f000 809f 	beq.w	7001441c <_vfiprintf_r+0x1ec>
700142de:	2300      	movs	r3, #0
700142e0:	f04f 32ff 	mov.w	r2, #4294967295
700142e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
700142e8:	f10a 0a01 	add.w	sl, sl, #1
700142ec:	9304      	str	r3, [sp, #16]
700142ee:	9307      	str	r3, [sp, #28]
700142f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
700142f4:	931a      	str	r3, [sp, #104]	@ 0x68
700142f6:	4654      	mov	r4, sl
700142f8:	2205      	movs	r2, #5
700142fa:	f814 1b01 	ldrb.w	r1, [r4], #1
700142fe:	4853      	ldr	r0, [pc, #332]	@ (7001444c <_vfiprintf_r+0x21c>)
70014300:	f7eb fff6 	bl	700002f0 <memchr>
70014304:	9a04      	ldr	r2, [sp, #16]
70014306:	b9d8      	cbnz	r0, 70014340 <_vfiprintf_r+0x110>
70014308:	06d1      	lsls	r1, r2, #27
7001430a:	bf44      	itt	mi
7001430c:	2320      	movmi	r3, #32
7001430e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
70014312:	0713      	lsls	r3, r2, #28
70014314:	bf44      	itt	mi
70014316:	232b      	movmi	r3, #43	@ 0x2b
70014318:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
7001431c:	f89a 3000 	ldrb.w	r3, [sl]
70014320:	2b2a      	cmp	r3, #42	@ 0x2a
70014322:	d015      	beq.n	70014350 <_vfiprintf_r+0x120>
70014324:	9a07      	ldr	r2, [sp, #28]
70014326:	4654      	mov	r4, sl
70014328:	2000      	movs	r0, #0
7001432a:	f04f 0c0a 	mov.w	ip, #10
7001432e:	4621      	mov	r1, r4
70014330:	f811 3b01 	ldrb.w	r3, [r1], #1
70014334:	3b30      	subs	r3, #48	@ 0x30
70014336:	2b09      	cmp	r3, #9
70014338:	d94b      	bls.n	700143d2 <_vfiprintf_r+0x1a2>
7001433a:	b1b0      	cbz	r0, 7001436a <_vfiprintf_r+0x13a>
7001433c:	9207      	str	r2, [sp, #28]
7001433e:	e014      	b.n	7001436a <_vfiprintf_r+0x13a>
70014340:	eba0 0308 	sub.w	r3, r0, r8
70014344:	fa09 f303 	lsl.w	r3, r9, r3
70014348:	4313      	orrs	r3, r2
7001434a:	9304      	str	r3, [sp, #16]
7001434c:	46a2      	mov	sl, r4
7001434e:	e7d2      	b.n	700142f6 <_vfiprintf_r+0xc6>
70014350:	9b03      	ldr	r3, [sp, #12]
70014352:	1d19      	adds	r1, r3, #4
70014354:	681b      	ldr	r3, [r3, #0]
70014356:	9103      	str	r1, [sp, #12]
70014358:	2b00      	cmp	r3, #0
7001435a:	bfbb      	ittet	lt
7001435c:	425b      	neglt	r3, r3
7001435e:	f042 0202 	orrlt.w	r2, r2, #2
70014362:	9307      	strge	r3, [sp, #28]
70014364:	9307      	strlt	r3, [sp, #28]
70014366:	bfb8      	it	lt
70014368:	9204      	strlt	r2, [sp, #16]
7001436a:	7823      	ldrb	r3, [r4, #0]
7001436c:	2b2e      	cmp	r3, #46	@ 0x2e
7001436e:	d10a      	bne.n	70014386 <_vfiprintf_r+0x156>
70014370:	7863      	ldrb	r3, [r4, #1]
70014372:	2b2a      	cmp	r3, #42	@ 0x2a
70014374:	d132      	bne.n	700143dc <_vfiprintf_r+0x1ac>
70014376:	9b03      	ldr	r3, [sp, #12]
70014378:	1d1a      	adds	r2, r3, #4
7001437a:	681b      	ldr	r3, [r3, #0]
7001437c:	9203      	str	r2, [sp, #12]
7001437e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
70014382:	3402      	adds	r4, #2
70014384:	9305      	str	r3, [sp, #20]
70014386:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 7001445c <_vfiprintf_r+0x22c>
7001438a:	7821      	ldrb	r1, [r4, #0]
7001438c:	2203      	movs	r2, #3
7001438e:	4650      	mov	r0, sl
70014390:	f7eb ffae 	bl	700002f0 <memchr>
70014394:	b138      	cbz	r0, 700143a6 <_vfiprintf_r+0x176>
70014396:	9b04      	ldr	r3, [sp, #16]
70014398:	eba0 000a 	sub.w	r0, r0, sl
7001439c:	2240      	movs	r2, #64	@ 0x40
7001439e:	4082      	lsls	r2, r0
700143a0:	4313      	orrs	r3, r2
700143a2:	3401      	adds	r4, #1
700143a4:	9304      	str	r3, [sp, #16]
700143a6:	f814 1b01 	ldrb.w	r1, [r4], #1
700143aa:	4829      	ldr	r0, [pc, #164]	@ (70014450 <_vfiprintf_r+0x220>)
700143ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
700143b0:	2206      	movs	r2, #6
700143b2:	f7eb ff9d 	bl	700002f0 <memchr>
700143b6:	2800      	cmp	r0, #0
700143b8:	d03f      	beq.n	7001443a <_vfiprintf_r+0x20a>
700143ba:	4b26      	ldr	r3, [pc, #152]	@ (70014454 <_vfiprintf_r+0x224>)
700143bc:	bb1b      	cbnz	r3, 70014406 <_vfiprintf_r+0x1d6>
700143be:	9b03      	ldr	r3, [sp, #12]
700143c0:	3307      	adds	r3, #7
700143c2:	f023 0307 	bic.w	r3, r3, #7
700143c6:	3308      	adds	r3, #8
700143c8:	9303      	str	r3, [sp, #12]
700143ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
700143cc:	443b      	add	r3, r7
700143ce:	9309      	str	r3, [sp, #36]	@ 0x24
700143d0:	e76a      	b.n	700142a8 <_vfiprintf_r+0x78>
700143d2:	fb0c 3202 	mla	r2, ip, r2, r3
700143d6:	460c      	mov	r4, r1
700143d8:	2001      	movs	r0, #1
700143da:	e7a8      	b.n	7001432e <_vfiprintf_r+0xfe>
700143dc:	2300      	movs	r3, #0
700143de:	3401      	adds	r4, #1
700143e0:	9305      	str	r3, [sp, #20]
700143e2:	4619      	mov	r1, r3
700143e4:	f04f 0c0a 	mov.w	ip, #10
700143e8:	4620      	mov	r0, r4
700143ea:	f810 2b01 	ldrb.w	r2, [r0], #1
700143ee:	3a30      	subs	r2, #48	@ 0x30
700143f0:	2a09      	cmp	r2, #9
700143f2:	d903      	bls.n	700143fc <_vfiprintf_r+0x1cc>
700143f4:	2b00      	cmp	r3, #0
700143f6:	d0c6      	beq.n	70014386 <_vfiprintf_r+0x156>
700143f8:	9105      	str	r1, [sp, #20]
700143fa:	e7c4      	b.n	70014386 <_vfiprintf_r+0x156>
700143fc:	fb0c 2101 	mla	r1, ip, r1, r2
70014400:	4604      	mov	r4, r0
70014402:	2301      	movs	r3, #1
70014404:	e7f0      	b.n	700143e8 <_vfiprintf_r+0x1b8>
70014406:	ab03      	add	r3, sp, #12
70014408:	9300      	str	r3, [sp, #0]
7001440a:	462a      	mov	r2, r5
7001440c:	4b12      	ldr	r3, [pc, #72]	@ (70014458 <_vfiprintf_r+0x228>)
7001440e:	a904      	add	r1, sp, #16
70014410:	4630      	mov	r0, r6
70014412:	f3af 8000 	nop.w
70014416:	4607      	mov	r7, r0
70014418:	1c78      	adds	r0, r7, #1
7001441a:	d1d6      	bne.n	700143ca <_vfiprintf_r+0x19a>
7001441c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
7001441e:	07d9      	lsls	r1, r3, #31
70014420:	d405      	bmi.n	7001442e <_vfiprintf_r+0x1fe>
70014422:	89ab      	ldrh	r3, [r5, #12]
70014424:	059a      	lsls	r2, r3, #22
70014426:	d402      	bmi.n	7001442e <_vfiprintf_r+0x1fe>
70014428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
7001442a:	f7ff fda9 	bl	70013f80 <__retarget_lock_release_recursive>
7001442e:	89ab      	ldrh	r3, [r5, #12]
70014430:	065b      	lsls	r3, r3, #25
70014432:	f53f af1f 	bmi.w	70014274 <_vfiprintf_r+0x44>
70014436:	9809      	ldr	r0, [sp, #36]	@ 0x24
70014438:	e71e      	b.n	70014278 <_vfiprintf_r+0x48>
7001443a:	ab03      	add	r3, sp, #12
7001443c:	9300      	str	r3, [sp, #0]
7001443e:	462a      	mov	r2, r5
70014440:	4b05      	ldr	r3, [pc, #20]	@ (70014458 <_vfiprintf_r+0x228>)
70014442:	a904      	add	r1, sp, #16
70014444:	4630      	mov	r0, r6
70014446:	f000 f879 	bl	7001453c <_printf_i>
7001444a:	e7e4      	b.n	70014416 <_vfiprintf_r+0x1e6>
7001444c:	7001742b 	.word	0x7001742b
70014450:	70017435 	.word	0x70017435
70014454:	00000000 	.word	0x00000000
70014458:	7001420b 	.word	0x7001420b
7001445c:	70017431 	.word	0x70017431

70014460 <_printf_common>:
70014460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
70014464:	4616      	mov	r6, r2
70014466:	4698      	mov	r8, r3
70014468:	688a      	ldr	r2, [r1, #8]
7001446a:	690b      	ldr	r3, [r1, #16]
7001446c:	f8dd 9020 	ldr.w	r9, [sp, #32]
70014470:	4293      	cmp	r3, r2
70014472:	bfb8      	it	lt
70014474:	4613      	movlt	r3, r2
70014476:	6033      	str	r3, [r6, #0]
70014478:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
7001447c:	4607      	mov	r7, r0
7001447e:	460c      	mov	r4, r1
70014480:	b10a      	cbz	r2, 70014486 <_printf_common+0x26>
70014482:	3301      	adds	r3, #1
70014484:	6033      	str	r3, [r6, #0]
70014486:	6823      	ldr	r3, [r4, #0]
70014488:	0699      	lsls	r1, r3, #26
7001448a:	bf42      	ittt	mi
7001448c:	6833      	ldrmi	r3, [r6, #0]
7001448e:	3302      	addmi	r3, #2
70014490:	6033      	strmi	r3, [r6, #0]
70014492:	6825      	ldr	r5, [r4, #0]
70014494:	f015 0506 	ands.w	r5, r5, #6
70014498:	d106      	bne.n	700144a8 <_printf_common+0x48>
7001449a:	f104 0a19 	add.w	sl, r4, #25
7001449e:	68e3      	ldr	r3, [r4, #12]
700144a0:	6832      	ldr	r2, [r6, #0]
700144a2:	1a9b      	subs	r3, r3, r2
700144a4:	42ab      	cmp	r3, r5
700144a6:	dc26      	bgt.n	700144f6 <_printf_common+0x96>
700144a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
700144ac:	6822      	ldr	r2, [r4, #0]
700144ae:	3b00      	subs	r3, #0
700144b0:	bf18      	it	ne
700144b2:	2301      	movne	r3, #1
700144b4:	0692      	lsls	r2, r2, #26
700144b6:	d42b      	bmi.n	70014510 <_printf_common+0xb0>
700144b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
700144bc:	4641      	mov	r1, r8
700144be:	4638      	mov	r0, r7
700144c0:	47c8      	blx	r9
700144c2:	3001      	adds	r0, #1
700144c4:	d01e      	beq.n	70014504 <_printf_common+0xa4>
700144c6:	6823      	ldr	r3, [r4, #0]
700144c8:	6922      	ldr	r2, [r4, #16]
700144ca:	f003 0306 	and.w	r3, r3, #6
700144ce:	2b04      	cmp	r3, #4
700144d0:	bf02      	ittt	eq
700144d2:	68e5      	ldreq	r5, [r4, #12]
700144d4:	6833      	ldreq	r3, [r6, #0]
700144d6:	1aed      	subeq	r5, r5, r3
700144d8:	68a3      	ldr	r3, [r4, #8]
700144da:	bf0c      	ite	eq
700144dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
700144e0:	2500      	movne	r5, #0
700144e2:	4293      	cmp	r3, r2
700144e4:	bfc4      	itt	gt
700144e6:	1a9b      	subgt	r3, r3, r2
700144e8:	18ed      	addgt	r5, r5, r3
700144ea:	2600      	movs	r6, #0
700144ec:	341a      	adds	r4, #26
700144ee:	42b5      	cmp	r5, r6
700144f0:	d11a      	bne.n	70014528 <_printf_common+0xc8>
700144f2:	2000      	movs	r0, #0
700144f4:	e008      	b.n	70014508 <_printf_common+0xa8>
700144f6:	2301      	movs	r3, #1
700144f8:	4652      	mov	r2, sl
700144fa:	4641      	mov	r1, r8
700144fc:	4638      	mov	r0, r7
700144fe:	47c8      	blx	r9
70014500:	3001      	adds	r0, #1
70014502:	d103      	bne.n	7001450c <_printf_common+0xac>
70014504:	f04f 30ff 	mov.w	r0, #4294967295
70014508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
7001450c:	3501      	adds	r5, #1
7001450e:	e7c6      	b.n	7001449e <_printf_common+0x3e>
70014510:	18e1      	adds	r1, r4, r3
70014512:	1c5a      	adds	r2, r3, #1
70014514:	2030      	movs	r0, #48	@ 0x30
70014516:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
7001451a:	4422      	add	r2, r4
7001451c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
70014520:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
70014524:	3302      	adds	r3, #2
70014526:	e7c7      	b.n	700144b8 <_printf_common+0x58>
70014528:	2301      	movs	r3, #1
7001452a:	4622      	mov	r2, r4
7001452c:	4641      	mov	r1, r8
7001452e:	4638      	mov	r0, r7
70014530:	47c8      	blx	r9
70014532:	3001      	adds	r0, #1
70014534:	d0e6      	beq.n	70014504 <_printf_common+0xa4>
70014536:	3601      	adds	r6, #1
70014538:	e7d9      	b.n	700144ee <_printf_common+0x8e>
	...

7001453c <_printf_i>:
7001453c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
70014540:	7e0f      	ldrb	r7, [r1, #24]
70014542:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
70014544:	2f78      	cmp	r7, #120	@ 0x78
70014546:	4691      	mov	r9, r2
70014548:	4680      	mov	r8, r0
7001454a:	460c      	mov	r4, r1
7001454c:	469a      	mov	sl, r3
7001454e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
70014552:	d807      	bhi.n	70014564 <_printf_i+0x28>
70014554:	2f62      	cmp	r7, #98	@ 0x62
70014556:	d80a      	bhi.n	7001456e <_printf_i+0x32>
70014558:	2f00      	cmp	r7, #0
7001455a:	f000 80d2 	beq.w	70014702 <_printf_i+0x1c6>
7001455e:	2f58      	cmp	r7, #88	@ 0x58
70014560:	f000 80b9 	beq.w	700146d6 <_printf_i+0x19a>
70014564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
70014568:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
7001456c:	e03a      	b.n	700145e4 <_printf_i+0xa8>
7001456e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
70014572:	2b15      	cmp	r3, #21
70014574:	d8f6      	bhi.n	70014564 <_printf_i+0x28>
70014576:	a101      	add	r1, pc, #4	@ (adr r1, 7001457c <_printf_i+0x40>)
70014578:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
7001457c:	700145d5 	.word	0x700145d5
70014580:	700145e9 	.word	0x700145e9
70014584:	70014565 	.word	0x70014565
70014588:	70014565 	.word	0x70014565
7001458c:	70014565 	.word	0x70014565
70014590:	70014565 	.word	0x70014565
70014594:	700145e9 	.word	0x700145e9
70014598:	70014565 	.word	0x70014565
7001459c:	70014565 	.word	0x70014565
700145a0:	70014565 	.word	0x70014565
700145a4:	70014565 	.word	0x70014565
700145a8:	700146e9 	.word	0x700146e9
700145ac:	70014613 	.word	0x70014613
700145b0:	700146a3 	.word	0x700146a3
700145b4:	70014565 	.word	0x70014565
700145b8:	70014565 	.word	0x70014565
700145bc:	7001470b 	.word	0x7001470b
700145c0:	70014565 	.word	0x70014565
700145c4:	70014613 	.word	0x70014613
700145c8:	70014565 	.word	0x70014565
700145cc:	70014565 	.word	0x70014565
700145d0:	700146ab 	.word	0x700146ab
700145d4:	6833      	ldr	r3, [r6, #0]
700145d6:	1d1a      	adds	r2, r3, #4
700145d8:	681b      	ldr	r3, [r3, #0]
700145da:	6032      	str	r2, [r6, #0]
700145dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
700145e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
700145e4:	2301      	movs	r3, #1
700145e6:	e09d      	b.n	70014724 <_printf_i+0x1e8>
700145e8:	6833      	ldr	r3, [r6, #0]
700145ea:	6820      	ldr	r0, [r4, #0]
700145ec:	1d19      	adds	r1, r3, #4
700145ee:	6031      	str	r1, [r6, #0]
700145f0:	0606      	lsls	r6, r0, #24
700145f2:	d501      	bpl.n	700145f8 <_printf_i+0xbc>
700145f4:	681d      	ldr	r5, [r3, #0]
700145f6:	e003      	b.n	70014600 <_printf_i+0xc4>
700145f8:	0645      	lsls	r5, r0, #25
700145fa:	d5fb      	bpl.n	700145f4 <_printf_i+0xb8>
700145fc:	f9b3 5000 	ldrsh.w	r5, [r3]
70014600:	2d00      	cmp	r5, #0
70014602:	da03      	bge.n	7001460c <_printf_i+0xd0>
70014604:	232d      	movs	r3, #45	@ 0x2d
70014606:	426d      	negs	r5, r5
70014608:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
7001460c:	4859      	ldr	r0, [pc, #356]	@ (70014774 <_printf_i+0x238>)
7001460e:	230a      	movs	r3, #10
70014610:	e011      	b.n	70014636 <_printf_i+0xfa>
70014612:	6821      	ldr	r1, [r4, #0]
70014614:	6833      	ldr	r3, [r6, #0]
70014616:	0608      	lsls	r0, r1, #24
70014618:	f853 5b04 	ldr.w	r5, [r3], #4
7001461c:	d402      	bmi.n	70014624 <_printf_i+0xe8>
7001461e:	0649      	lsls	r1, r1, #25
70014620:	bf48      	it	mi
70014622:	b2ad      	uxthmi	r5, r5
70014624:	2f6f      	cmp	r7, #111	@ 0x6f
70014626:	4853      	ldr	r0, [pc, #332]	@ (70014774 <_printf_i+0x238>)
70014628:	6033      	str	r3, [r6, #0]
7001462a:	bf14      	ite	ne
7001462c:	230a      	movne	r3, #10
7001462e:	2308      	moveq	r3, #8
70014630:	2100      	movs	r1, #0
70014632:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
70014636:	6866      	ldr	r6, [r4, #4]
70014638:	60a6      	str	r6, [r4, #8]
7001463a:	2e00      	cmp	r6, #0
7001463c:	bfa2      	ittt	ge
7001463e:	6821      	ldrge	r1, [r4, #0]
70014640:	f021 0104 	bicge.w	r1, r1, #4
70014644:	6021      	strge	r1, [r4, #0]
70014646:	b90d      	cbnz	r5, 7001464c <_printf_i+0x110>
70014648:	2e00      	cmp	r6, #0
7001464a:	d04b      	beq.n	700146e4 <_printf_i+0x1a8>
7001464c:	4616      	mov	r6, r2
7001464e:	fbb5 f1f3 	udiv	r1, r5, r3
70014652:	fb03 5711 	mls	r7, r3, r1, r5
70014656:	5dc7      	ldrb	r7, [r0, r7]
70014658:	f806 7d01 	strb.w	r7, [r6, #-1]!
7001465c:	462f      	mov	r7, r5
7001465e:	42bb      	cmp	r3, r7
70014660:	460d      	mov	r5, r1
70014662:	d9f4      	bls.n	7001464e <_printf_i+0x112>
70014664:	2b08      	cmp	r3, #8
70014666:	d10b      	bne.n	70014680 <_printf_i+0x144>
70014668:	6823      	ldr	r3, [r4, #0]
7001466a:	07df      	lsls	r7, r3, #31
7001466c:	d508      	bpl.n	70014680 <_printf_i+0x144>
7001466e:	6923      	ldr	r3, [r4, #16]
70014670:	6861      	ldr	r1, [r4, #4]
70014672:	4299      	cmp	r1, r3
70014674:	bfde      	ittt	le
70014676:	2330      	movle	r3, #48	@ 0x30
70014678:	f806 3c01 	strble.w	r3, [r6, #-1]
7001467c:	f106 36ff 	addle.w	r6, r6, #4294967295
70014680:	1b92      	subs	r2, r2, r6
70014682:	6122      	str	r2, [r4, #16]
70014684:	f8cd a000 	str.w	sl, [sp]
70014688:	464b      	mov	r3, r9
7001468a:	aa03      	add	r2, sp, #12
7001468c:	4621      	mov	r1, r4
7001468e:	4640      	mov	r0, r8
70014690:	f7ff fee6 	bl	70014460 <_printf_common>
70014694:	3001      	adds	r0, #1
70014696:	d14a      	bne.n	7001472e <_printf_i+0x1f2>
70014698:	f04f 30ff 	mov.w	r0, #4294967295
7001469c:	b004      	add	sp, #16
7001469e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
700146a2:	6823      	ldr	r3, [r4, #0]
700146a4:	f043 0320 	orr.w	r3, r3, #32
700146a8:	6023      	str	r3, [r4, #0]
700146aa:	4833      	ldr	r0, [pc, #204]	@ (70014778 <_printf_i+0x23c>)
700146ac:	2778      	movs	r7, #120	@ 0x78
700146ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
700146b2:	6823      	ldr	r3, [r4, #0]
700146b4:	6831      	ldr	r1, [r6, #0]
700146b6:	061f      	lsls	r7, r3, #24
700146b8:	f851 5b04 	ldr.w	r5, [r1], #4
700146bc:	d402      	bmi.n	700146c4 <_printf_i+0x188>
700146be:	065f      	lsls	r7, r3, #25
700146c0:	bf48      	it	mi
700146c2:	b2ad      	uxthmi	r5, r5
700146c4:	6031      	str	r1, [r6, #0]
700146c6:	07d9      	lsls	r1, r3, #31
700146c8:	bf44      	itt	mi
700146ca:	f043 0320 	orrmi.w	r3, r3, #32
700146ce:	6023      	strmi	r3, [r4, #0]
700146d0:	b11d      	cbz	r5, 700146da <_printf_i+0x19e>
700146d2:	2310      	movs	r3, #16
700146d4:	e7ac      	b.n	70014630 <_printf_i+0xf4>
700146d6:	4827      	ldr	r0, [pc, #156]	@ (70014774 <_printf_i+0x238>)
700146d8:	e7e9      	b.n	700146ae <_printf_i+0x172>
700146da:	6823      	ldr	r3, [r4, #0]
700146dc:	f023 0320 	bic.w	r3, r3, #32
700146e0:	6023      	str	r3, [r4, #0]
700146e2:	e7f6      	b.n	700146d2 <_printf_i+0x196>
700146e4:	4616      	mov	r6, r2
700146e6:	e7bd      	b.n	70014664 <_printf_i+0x128>
700146e8:	6833      	ldr	r3, [r6, #0]
700146ea:	6825      	ldr	r5, [r4, #0]
700146ec:	6961      	ldr	r1, [r4, #20]
700146ee:	1d18      	adds	r0, r3, #4
700146f0:	6030      	str	r0, [r6, #0]
700146f2:	062e      	lsls	r6, r5, #24
700146f4:	681b      	ldr	r3, [r3, #0]
700146f6:	d501      	bpl.n	700146fc <_printf_i+0x1c0>
700146f8:	6019      	str	r1, [r3, #0]
700146fa:	e002      	b.n	70014702 <_printf_i+0x1c6>
700146fc:	0668      	lsls	r0, r5, #25
700146fe:	d5fb      	bpl.n	700146f8 <_printf_i+0x1bc>
70014700:	8019      	strh	r1, [r3, #0]
70014702:	2300      	movs	r3, #0
70014704:	6123      	str	r3, [r4, #16]
70014706:	4616      	mov	r6, r2
70014708:	e7bc      	b.n	70014684 <_printf_i+0x148>
7001470a:	6833      	ldr	r3, [r6, #0]
7001470c:	1d1a      	adds	r2, r3, #4
7001470e:	6032      	str	r2, [r6, #0]
70014710:	681e      	ldr	r6, [r3, #0]
70014712:	6862      	ldr	r2, [r4, #4]
70014714:	2100      	movs	r1, #0
70014716:	4630      	mov	r0, r6
70014718:	f7eb fdea 	bl	700002f0 <memchr>
7001471c:	b108      	cbz	r0, 70014722 <_printf_i+0x1e6>
7001471e:	1b80      	subs	r0, r0, r6
70014720:	6060      	str	r0, [r4, #4]
70014722:	6863      	ldr	r3, [r4, #4]
70014724:	6123      	str	r3, [r4, #16]
70014726:	2300      	movs	r3, #0
70014728:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
7001472c:	e7aa      	b.n	70014684 <_printf_i+0x148>
7001472e:	6923      	ldr	r3, [r4, #16]
70014730:	4632      	mov	r2, r6
70014732:	4649      	mov	r1, r9
70014734:	4640      	mov	r0, r8
70014736:	47d0      	blx	sl
70014738:	3001      	adds	r0, #1
7001473a:	d0ad      	beq.n	70014698 <_printf_i+0x15c>
7001473c:	6823      	ldr	r3, [r4, #0]
7001473e:	079b      	lsls	r3, r3, #30
70014740:	d413      	bmi.n	7001476a <_printf_i+0x22e>
70014742:	68e0      	ldr	r0, [r4, #12]
70014744:	9b03      	ldr	r3, [sp, #12]
70014746:	4298      	cmp	r0, r3
70014748:	bfb8      	it	lt
7001474a:	4618      	movlt	r0, r3
7001474c:	e7a6      	b.n	7001469c <_printf_i+0x160>
7001474e:	2301      	movs	r3, #1
70014750:	4632      	mov	r2, r6
70014752:	4649      	mov	r1, r9
70014754:	4640      	mov	r0, r8
70014756:	47d0      	blx	sl
70014758:	3001      	adds	r0, #1
7001475a:	d09d      	beq.n	70014698 <_printf_i+0x15c>
7001475c:	3501      	adds	r5, #1
7001475e:	68e3      	ldr	r3, [r4, #12]
70014760:	9903      	ldr	r1, [sp, #12]
70014762:	1a5b      	subs	r3, r3, r1
70014764:	42ab      	cmp	r3, r5
70014766:	dcf2      	bgt.n	7001474e <_printf_i+0x212>
70014768:	e7eb      	b.n	70014742 <_printf_i+0x206>
7001476a:	2500      	movs	r5, #0
7001476c:	f104 0619 	add.w	r6, r4, #25
70014770:	e7f5      	b.n	7001475e <_printf_i+0x222>
70014772:	bf00      	nop
70014774:	7001743c 	.word	0x7001743c
70014778:	7001744d 	.word	0x7001744d

7001477c <__sflush_r>:
7001477c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
70014780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
70014784:	0716      	lsls	r6, r2, #28
70014786:	4605      	mov	r5, r0
70014788:	460c      	mov	r4, r1
7001478a:	d454      	bmi.n	70014836 <__sflush_r+0xba>
7001478c:	684b      	ldr	r3, [r1, #4]
7001478e:	2b00      	cmp	r3, #0
70014790:	dc02      	bgt.n	70014798 <__sflush_r+0x1c>
70014792:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
70014794:	2b00      	cmp	r3, #0
70014796:	dd48      	ble.n	7001482a <__sflush_r+0xae>
70014798:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
7001479a:	2e00      	cmp	r6, #0
7001479c:	d045      	beq.n	7001482a <__sflush_r+0xae>
7001479e:	2300      	movs	r3, #0
700147a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
700147a4:	682f      	ldr	r7, [r5, #0]
700147a6:	6a21      	ldr	r1, [r4, #32]
700147a8:	602b      	str	r3, [r5, #0]
700147aa:	d030      	beq.n	7001480e <__sflush_r+0x92>
700147ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
700147ae:	89a3      	ldrh	r3, [r4, #12]
700147b0:	0759      	lsls	r1, r3, #29
700147b2:	d505      	bpl.n	700147c0 <__sflush_r+0x44>
700147b4:	6863      	ldr	r3, [r4, #4]
700147b6:	1ad2      	subs	r2, r2, r3
700147b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
700147ba:	b10b      	cbz	r3, 700147c0 <__sflush_r+0x44>
700147bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
700147be:	1ad2      	subs	r2, r2, r3
700147c0:	2300      	movs	r3, #0
700147c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
700147c4:	6a21      	ldr	r1, [r4, #32]
700147c6:	4628      	mov	r0, r5
700147c8:	47b0      	blx	r6
700147ca:	1c43      	adds	r3, r0, #1
700147cc:	89a3      	ldrh	r3, [r4, #12]
700147ce:	d106      	bne.n	700147de <__sflush_r+0x62>
700147d0:	6829      	ldr	r1, [r5, #0]
700147d2:	291d      	cmp	r1, #29
700147d4:	d82b      	bhi.n	7001482e <__sflush_r+0xb2>
700147d6:	4a2a      	ldr	r2, [pc, #168]	@ (70014880 <__sflush_r+0x104>)
700147d8:	410a      	asrs	r2, r1
700147da:	07d6      	lsls	r6, r2, #31
700147dc:	d427      	bmi.n	7001482e <__sflush_r+0xb2>
700147de:	2200      	movs	r2, #0
700147e0:	6062      	str	r2, [r4, #4]
700147e2:	04d9      	lsls	r1, r3, #19
700147e4:	6922      	ldr	r2, [r4, #16]
700147e6:	6022      	str	r2, [r4, #0]
700147e8:	d504      	bpl.n	700147f4 <__sflush_r+0x78>
700147ea:	1c42      	adds	r2, r0, #1
700147ec:	d101      	bne.n	700147f2 <__sflush_r+0x76>
700147ee:	682b      	ldr	r3, [r5, #0]
700147f0:	b903      	cbnz	r3, 700147f4 <__sflush_r+0x78>
700147f2:	6560      	str	r0, [r4, #84]	@ 0x54
700147f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
700147f6:	602f      	str	r7, [r5, #0]
700147f8:	b1b9      	cbz	r1, 7001482a <__sflush_r+0xae>
700147fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
700147fe:	4299      	cmp	r1, r3
70014800:	d002      	beq.n	70014808 <__sflush_r+0x8c>
70014802:	4628      	mov	r0, r5
70014804:	f7ff fbea 	bl	70013fdc <_free_r>
70014808:	2300      	movs	r3, #0
7001480a:	6363      	str	r3, [r4, #52]	@ 0x34
7001480c:	e00d      	b.n	7001482a <__sflush_r+0xae>
7001480e:	2301      	movs	r3, #1
70014810:	4628      	mov	r0, r5
70014812:	47b0      	blx	r6
70014814:	4602      	mov	r2, r0
70014816:	1c50      	adds	r0, r2, #1
70014818:	d1c9      	bne.n	700147ae <__sflush_r+0x32>
7001481a:	682b      	ldr	r3, [r5, #0]
7001481c:	2b00      	cmp	r3, #0
7001481e:	d0c6      	beq.n	700147ae <__sflush_r+0x32>
70014820:	2b1d      	cmp	r3, #29
70014822:	d001      	beq.n	70014828 <__sflush_r+0xac>
70014824:	2b16      	cmp	r3, #22
70014826:	d11e      	bne.n	70014866 <__sflush_r+0xea>
70014828:	602f      	str	r7, [r5, #0]
7001482a:	2000      	movs	r0, #0
7001482c:	e022      	b.n	70014874 <__sflush_r+0xf8>
7001482e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
70014832:	b21b      	sxth	r3, r3
70014834:	e01b      	b.n	7001486e <__sflush_r+0xf2>
70014836:	690f      	ldr	r7, [r1, #16]
70014838:	2f00      	cmp	r7, #0
7001483a:	d0f6      	beq.n	7001482a <__sflush_r+0xae>
7001483c:	0793      	lsls	r3, r2, #30
7001483e:	680e      	ldr	r6, [r1, #0]
70014840:	bf08      	it	eq
70014842:	694b      	ldreq	r3, [r1, #20]
70014844:	600f      	str	r7, [r1, #0]
70014846:	bf18      	it	ne
70014848:	2300      	movne	r3, #0
7001484a:	eba6 0807 	sub.w	r8, r6, r7
7001484e:	608b      	str	r3, [r1, #8]
70014850:	f1b8 0f00 	cmp.w	r8, #0
70014854:	dde9      	ble.n	7001482a <__sflush_r+0xae>
70014856:	6a21      	ldr	r1, [r4, #32]
70014858:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
7001485a:	4643      	mov	r3, r8
7001485c:	463a      	mov	r2, r7
7001485e:	4628      	mov	r0, r5
70014860:	47b0      	blx	r6
70014862:	2800      	cmp	r0, #0
70014864:	dc08      	bgt.n	70014878 <__sflush_r+0xfc>
70014866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
7001486a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
7001486e:	81a3      	strh	r3, [r4, #12]
70014870:	f04f 30ff 	mov.w	r0, #4294967295
70014874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
70014878:	4407      	add	r7, r0
7001487a:	eba8 0800 	sub.w	r8, r8, r0
7001487e:	e7e7      	b.n	70014850 <__sflush_r+0xd4>
70014880:	dfbffffe 	.word	0xdfbffffe

70014884 <_fflush_r>:
70014884:	b538      	push	{r3, r4, r5, lr}
70014886:	690b      	ldr	r3, [r1, #16]
70014888:	4605      	mov	r5, r0
7001488a:	460c      	mov	r4, r1
7001488c:	b913      	cbnz	r3, 70014894 <_fflush_r+0x10>
7001488e:	2500      	movs	r5, #0
70014890:	4628      	mov	r0, r5
70014892:	bd38      	pop	{r3, r4, r5, pc}
70014894:	b118      	cbz	r0, 7001489e <_fflush_r+0x1a>
70014896:	6a03      	ldr	r3, [r0, #32]
70014898:	b90b      	cbnz	r3, 7001489e <_fflush_r+0x1a>
7001489a:	f7ff fa0b 	bl	70013cb4 <__sinit>
7001489e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
700148a2:	2b00      	cmp	r3, #0
700148a4:	d0f3      	beq.n	7001488e <_fflush_r+0xa>
700148a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
700148a8:	07d0      	lsls	r0, r2, #31
700148aa:	d404      	bmi.n	700148b6 <_fflush_r+0x32>
700148ac:	0599      	lsls	r1, r3, #22
700148ae:	d402      	bmi.n	700148b6 <_fflush_r+0x32>
700148b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
700148b2:	f7ff fb64 	bl	70013f7e <__retarget_lock_acquire_recursive>
700148b6:	4628      	mov	r0, r5
700148b8:	4621      	mov	r1, r4
700148ba:	f7ff ff5f 	bl	7001477c <__sflush_r>
700148be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
700148c0:	07da      	lsls	r2, r3, #31
700148c2:	4605      	mov	r5, r0
700148c4:	d4e4      	bmi.n	70014890 <_fflush_r+0xc>
700148c6:	89a3      	ldrh	r3, [r4, #12]
700148c8:	059b      	lsls	r3, r3, #22
700148ca:	d4e1      	bmi.n	70014890 <_fflush_r+0xc>
700148cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
700148ce:	f7ff fb57 	bl	70013f80 <__retarget_lock_release_recursive>
700148d2:	e7dd      	b.n	70014890 <_fflush_r+0xc>

700148d4 <fiprintf>:
700148d4:	b40e      	push	{r1, r2, r3}
700148d6:	b503      	push	{r0, r1, lr}
700148d8:	4601      	mov	r1, r0
700148da:	ab03      	add	r3, sp, #12
700148dc:	4805      	ldr	r0, [pc, #20]	@ (700148f4 <fiprintf+0x20>)
700148de:	f853 2b04 	ldr.w	r2, [r3], #4
700148e2:	6800      	ldr	r0, [r0, #0]
700148e4:	9301      	str	r3, [sp, #4]
700148e6:	f7ff fca3 	bl	70014230 <_vfiprintf_r>
700148ea:	b002      	add	sp, #8
700148ec:	f85d eb04 	ldr.w	lr, [sp], #4
700148f0:	b003      	add	sp, #12
700148f2:	4770      	bx	lr
700148f4:	24000040 	.word	0x24000040

700148f8 <__swbuf_r>:
700148f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
700148fa:	460e      	mov	r6, r1
700148fc:	4614      	mov	r4, r2
700148fe:	4605      	mov	r5, r0
70014900:	b118      	cbz	r0, 7001490a <__swbuf_r+0x12>
70014902:	6a03      	ldr	r3, [r0, #32]
70014904:	b90b      	cbnz	r3, 7001490a <__swbuf_r+0x12>
70014906:	f7ff f9d5 	bl	70013cb4 <__sinit>
7001490a:	69a3      	ldr	r3, [r4, #24]
7001490c:	60a3      	str	r3, [r4, #8]
7001490e:	89a3      	ldrh	r3, [r4, #12]
70014910:	071a      	lsls	r2, r3, #28
70014912:	d501      	bpl.n	70014918 <__swbuf_r+0x20>
70014914:	6923      	ldr	r3, [r4, #16]
70014916:	b943      	cbnz	r3, 7001492a <__swbuf_r+0x32>
70014918:	4621      	mov	r1, r4
7001491a:	4628      	mov	r0, r5
7001491c:	f000 f82a 	bl	70014974 <__swsetup_r>
70014920:	b118      	cbz	r0, 7001492a <__swbuf_r+0x32>
70014922:	f04f 37ff 	mov.w	r7, #4294967295
70014926:	4638      	mov	r0, r7
70014928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
7001492a:	6823      	ldr	r3, [r4, #0]
7001492c:	6922      	ldr	r2, [r4, #16]
7001492e:	1a98      	subs	r0, r3, r2
70014930:	6963      	ldr	r3, [r4, #20]
70014932:	b2f6      	uxtb	r6, r6
70014934:	4283      	cmp	r3, r0
70014936:	4637      	mov	r7, r6
70014938:	dc05      	bgt.n	70014946 <__swbuf_r+0x4e>
7001493a:	4621      	mov	r1, r4
7001493c:	4628      	mov	r0, r5
7001493e:	f7ff ffa1 	bl	70014884 <_fflush_r>
70014942:	2800      	cmp	r0, #0
70014944:	d1ed      	bne.n	70014922 <__swbuf_r+0x2a>
70014946:	68a3      	ldr	r3, [r4, #8]
70014948:	3b01      	subs	r3, #1
7001494a:	60a3      	str	r3, [r4, #8]
7001494c:	6823      	ldr	r3, [r4, #0]
7001494e:	1c5a      	adds	r2, r3, #1
70014950:	6022      	str	r2, [r4, #0]
70014952:	701e      	strb	r6, [r3, #0]
70014954:	6962      	ldr	r2, [r4, #20]
70014956:	1c43      	adds	r3, r0, #1
70014958:	429a      	cmp	r2, r3
7001495a:	d004      	beq.n	70014966 <__swbuf_r+0x6e>
7001495c:	89a3      	ldrh	r3, [r4, #12]
7001495e:	07db      	lsls	r3, r3, #31
70014960:	d5e1      	bpl.n	70014926 <__swbuf_r+0x2e>
70014962:	2e0a      	cmp	r6, #10
70014964:	d1df      	bne.n	70014926 <__swbuf_r+0x2e>
70014966:	4621      	mov	r1, r4
70014968:	4628      	mov	r0, r5
7001496a:	f7ff ff8b 	bl	70014884 <_fflush_r>
7001496e:	2800      	cmp	r0, #0
70014970:	d0d9      	beq.n	70014926 <__swbuf_r+0x2e>
70014972:	e7d6      	b.n	70014922 <__swbuf_r+0x2a>

70014974 <__swsetup_r>:
70014974:	b538      	push	{r3, r4, r5, lr}
70014976:	4b29      	ldr	r3, [pc, #164]	@ (70014a1c <__swsetup_r+0xa8>)
70014978:	4605      	mov	r5, r0
7001497a:	6818      	ldr	r0, [r3, #0]
7001497c:	460c      	mov	r4, r1
7001497e:	b118      	cbz	r0, 70014988 <__swsetup_r+0x14>
70014980:	6a03      	ldr	r3, [r0, #32]
70014982:	b90b      	cbnz	r3, 70014988 <__swsetup_r+0x14>
70014984:	f7ff f996 	bl	70013cb4 <__sinit>
70014988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
7001498c:	0719      	lsls	r1, r3, #28
7001498e:	d422      	bmi.n	700149d6 <__swsetup_r+0x62>
70014990:	06da      	lsls	r2, r3, #27
70014992:	d407      	bmi.n	700149a4 <__swsetup_r+0x30>
70014994:	2209      	movs	r2, #9
70014996:	602a      	str	r2, [r5, #0]
70014998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
7001499c:	81a3      	strh	r3, [r4, #12]
7001499e:	f04f 30ff 	mov.w	r0, #4294967295
700149a2:	e033      	b.n	70014a0c <__swsetup_r+0x98>
700149a4:	0758      	lsls	r0, r3, #29
700149a6:	d512      	bpl.n	700149ce <__swsetup_r+0x5a>
700149a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
700149aa:	b141      	cbz	r1, 700149be <__swsetup_r+0x4a>
700149ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
700149b0:	4299      	cmp	r1, r3
700149b2:	d002      	beq.n	700149ba <__swsetup_r+0x46>
700149b4:	4628      	mov	r0, r5
700149b6:	f7ff fb11 	bl	70013fdc <_free_r>
700149ba:	2300      	movs	r3, #0
700149bc:	6363      	str	r3, [r4, #52]	@ 0x34
700149be:	89a3      	ldrh	r3, [r4, #12]
700149c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
700149c4:	81a3      	strh	r3, [r4, #12]
700149c6:	2300      	movs	r3, #0
700149c8:	6063      	str	r3, [r4, #4]
700149ca:	6923      	ldr	r3, [r4, #16]
700149cc:	6023      	str	r3, [r4, #0]
700149ce:	89a3      	ldrh	r3, [r4, #12]
700149d0:	f043 0308 	orr.w	r3, r3, #8
700149d4:	81a3      	strh	r3, [r4, #12]
700149d6:	6923      	ldr	r3, [r4, #16]
700149d8:	b94b      	cbnz	r3, 700149ee <__swsetup_r+0x7a>
700149da:	89a3      	ldrh	r3, [r4, #12]
700149dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
700149e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
700149e4:	d003      	beq.n	700149ee <__swsetup_r+0x7a>
700149e6:	4621      	mov	r1, r4
700149e8:	4628      	mov	r0, r5
700149ea:	f000 f856 	bl	70014a9a <__smakebuf_r>
700149ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
700149f2:	f013 0201 	ands.w	r2, r3, #1
700149f6:	d00a      	beq.n	70014a0e <__swsetup_r+0x9a>
700149f8:	2200      	movs	r2, #0
700149fa:	60a2      	str	r2, [r4, #8]
700149fc:	6962      	ldr	r2, [r4, #20]
700149fe:	4252      	negs	r2, r2
70014a00:	61a2      	str	r2, [r4, #24]
70014a02:	6922      	ldr	r2, [r4, #16]
70014a04:	b942      	cbnz	r2, 70014a18 <__swsetup_r+0xa4>
70014a06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
70014a0a:	d1c5      	bne.n	70014998 <__swsetup_r+0x24>
70014a0c:	bd38      	pop	{r3, r4, r5, pc}
70014a0e:	0799      	lsls	r1, r3, #30
70014a10:	bf58      	it	pl
70014a12:	6962      	ldrpl	r2, [r4, #20]
70014a14:	60a2      	str	r2, [r4, #8]
70014a16:	e7f4      	b.n	70014a02 <__swsetup_r+0x8e>
70014a18:	2000      	movs	r0, #0
70014a1a:	e7f7      	b.n	70014a0c <__swsetup_r+0x98>
70014a1c:	24000040 	.word	0x24000040

70014a20 <_sbrk_r>:
70014a20:	b538      	push	{r3, r4, r5, lr}
70014a22:	4d06      	ldr	r5, [pc, #24]	@ (70014a3c <_sbrk_r+0x1c>)
70014a24:	2300      	movs	r3, #0
70014a26:	4604      	mov	r4, r0
70014a28:	4608      	mov	r0, r1
70014a2a:	602b      	str	r3, [r5, #0]
70014a2c:	f7eb ffdc 	bl	700009e8 <_sbrk>
70014a30:	1c43      	adds	r3, r0, #1
70014a32:	d102      	bne.n	70014a3a <_sbrk_r+0x1a>
70014a34:	682b      	ldr	r3, [r5, #0]
70014a36:	b103      	cbz	r3, 70014a3a <_sbrk_r+0x1a>
70014a38:	6023      	str	r3, [r4, #0]
70014a3a:	bd38      	pop	{r3, r4, r5, pc}
70014a3c:	24008624 	.word	0x24008624

70014a40 <abort>:
70014a40:	b508      	push	{r3, lr}
70014a42:	2006      	movs	r0, #6
70014a44:	f000 f88e 	bl	70014b64 <raise>
70014a48:	2001      	movs	r0, #1
70014a4a:	f7eb ff55 	bl	700008f8 <_exit>

70014a4e <__swhatbuf_r>:
70014a4e:	b570      	push	{r4, r5, r6, lr}
70014a50:	460c      	mov	r4, r1
70014a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
70014a56:	2900      	cmp	r1, #0
70014a58:	b096      	sub	sp, #88	@ 0x58
70014a5a:	4615      	mov	r5, r2
70014a5c:	461e      	mov	r6, r3
70014a5e:	da0d      	bge.n	70014a7c <__swhatbuf_r+0x2e>
70014a60:	89a3      	ldrh	r3, [r4, #12]
70014a62:	f013 0f80 	tst.w	r3, #128	@ 0x80
70014a66:	f04f 0100 	mov.w	r1, #0
70014a6a:	bf14      	ite	ne
70014a6c:	2340      	movne	r3, #64	@ 0x40
70014a6e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
70014a72:	2000      	movs	r0, #0
70014a74:	6031      	str	r1, [r6, #0]
70014a76:	602b      	str	r3, [r5, #0]
70014a78:	b016      	add	sp, #88	@ 0x58
70014a7a:	bd70      	pop	{r4, r5, r6, pc}
70014a7c:	466a      	mov	r2, sp
70014a7e:	f000 f879 	bl	70014b74 <_fstat_r>
70014a82:	2800      	cmp	r0, #0
70014a84:	dbec      	blt.n	70014a60 <__swhatbuf_r+0x12>
70014a86:	9901      	ldr	r1, [sp, #4]
70014a88:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
70014a8c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
70014a90:	4259      	negs	r1, r3
70014a92:	4159      	adcs	r1, r3
70014a94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
70014a98:	e7eb      	b.n	70014a72 <__swhatbuf_r+0x24>

70014a9a <__smakebuf_r>:
70014a9a:	898b      	ldrh	r3, [r1, #12]
70014a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
70014a9e:	079d      	lsls	r5, r3, #30
70014aa0:	4606      	mov	r6, r0
70014aa2:	460c      	mov	r4, r1
70014aa4:	d507      	bpl.n	70014ab6 <__smakebuf_r+0x1c>
70014aa6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
70014aaa:	6023      	str	r3, [r4, #0]
70014aac:	6123      	str	r3, [r4, #16]
70014aae:	2301      	movs	r3, #1
70014ab0:	6163      	str	r3, [r4, #20]
70014ab2:	b003      	add	sp, #12
70014ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
70014ab6:	ab01      	add	r3, sp, #4
70014ab8:	466a      	mov	r2, sp
70014aba:	f7ff ffc8 	bl	70014a4e <__swhatbuf_r>
70014abe:	9f00      	ldr	r7, [sp, #0]
70014ac0:	4605      	mov	r5, r0
70014ac2:	4639      	mov	r1, r7
70014ac4:	4630      	mov	r0, r6
70014ac6:	f7ff fafd 	bl	700140c4 <_malloc_r>
70014aca:	b948      	cbnz	r0, 70014ae0 <__smakebuf_r+0x46>
70014acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
70014ad0:	059a      	lsls	r2, r3, #22
70014ad2:	d4ee      	bmi.n	70014ab2 <__smakebuf_r+0x18>
70014ad4:	f023 0303 	bic.w	r3, r3, #3
70014ad8:	f043 0302 	orr.w	r3, r3, #2
70014adc:	81a3      	strh	r3, [r4, #12]
70014ade:	e7e2      	b.n	70014aa6 <__smakebuf_r+0xc>
70014ae0:	89a3      	ldrh	r3, [r4, #12]
70014ae2:	6020      	str	r0, [r4, #0]
70014ae4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
70014ae8:	81a3      	strh	r3, [r4, #12]
70014aea:	9b01      	ldr	r3, [sp, #4]
70014aec:	e9c4 0704 	strd	r0, r7, [r4, #16]
70014af0:	b15b      	cbz	r3, 70014b0a <__smakebuf_r+0x70>
70014af2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
70014af6:	4630      	mov	r0, r6
70014af8:	f000 f84e 	bl	70014b98 <_isatty_r>
70014afc:	b128      	cbz	r0, 70014b0a <__smakebuf_r+0x70>
70014afe:	89a3      	ldrh	r3, [r4, #12]
70014b00:	f023 0303 	bic.w	r3, r3, #3
70014b04:	f043 0301 	orr.w	r3, r3, #1
70014b08:	81a3      	strh	r3, [r4, #12]
70014b0a:	89a3      	ldrh	r3, [r4, #12]
70014b0c:	431d      	orrs	r5, r3
70014b0e:	81a5      	strh	r5, [r4, #12]
70014b10:	e7cf      	b.n	70014ab2 <__smakebuf_r+0x18>

70014b12 <_raise_r>:
70014b12:	291f      	cmp	r1, #31
70014b14:	b538      	push	{r3, r4, r5, lr}
70014b16:	4605      	mov	r5, r0
70014b18:	460c      	mov	r4, r1
70014b1a:	d904      	bls.n	70014b26 <_raise_r+0x14>
70014b1c:	2316      	movs	r3, #22
70014b1e:	6003      	str	r3, [r0, #0]
70014b20:	f04f 30ff 	mov.w	r0, #4294967295
70014b24:	bd38      	pop	{r3, r4, r5, pc}
70014b26:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
70014b28:	b112      	cbz	r2, 70014b30 <_raise_r+0x1e>
70014b2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
70014b2e:	b94b      	cbnz	r3, 70014b44 <_raise_r+0x32>
70014b30:	4628      	mov	r0, r5
70014b32:	f000 f853 	bl	70014bdc <_getpid_r>
70014b36:	4622      	mov	r2, r4
70014b38:	4601      	mov	r1, r0
70014b3a:	4628      	mov	r0, r5
70014b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
70014b40:	f000 b83a 	b.w	70014bb8 <_kill_r>
70014b44:	2b01      	cmp	r3, #1
70014b46:	d00a      	beq.n	70014b5e <_raise_r+0x4c>
70014b48:	1c59      	adds	r1, r3, #1
70014b4a:	d103      	bne.n	70014b54 <_raise_r+0x42>
70014b4c:	2316      	movs	r3, #22
70014b4e:	6003      	str	r3, [r0, #0]
70014b50:	2001      	movs	r0, #1
70014b52:	e7e7      	b.n	70014b24 <_raise_r+0x12>
70014b54:	2100      	movs	r1, #0
70014b56:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
70014b5a:	4620      	mov	r0, r4
70014b5c:	4798      	blx	r3
70014b5e:	2000      	movs	r0, #0
70014b60:	e7e0      	b.n	70014b24 <_raise_r+0x12>
	...

70014b64 <raise>:
70014b64:	4b02      	ldr	r3, [pc, #8]	@ (70014b70 <raise+0xc>)
70014b66:	4601      	mov	r1, r0
70014b68:	6818      	ldr	r0, [r3, #0]
70014b6a:	f7ff bfd2 	b.w	70014b12 <_raise_r>
70014b6e:	bf00      	nop
70014b70:	24000040 	.word	0x24000040

70014b74 <_fstat_r>:
70014b74:	b538      	push	{r3, r4, r5, lr}
70014b76:	4d07      	ldr	r5, [pc, #28]	@ (70014b94 <_fstat_r+0x20>)
70014b78:	2300      	movs	r3, #0
70014b7a:	4604      	mov	r4, r0
70014b7c:	4608      	mov	r0, r1
70014b7e:	4611      	mov	r1, r2
70014b80:	602b      	str	r3, [r5, #0]
70014b82:	f7eb ff09 	bl	70000998 <_fstat>
70014b86:	1c43      	adds	r3, r0, #1
70014b88:	d102      	bne.n	70014b90 <_fstat_r+0x1c>
70014b8a:	682b      	ldr	r3, [r5, #0]
70014b8c:	b103      	cbz	r3, 70014b90 <_fstat_r+0x1c>
70014b8e:	6023      	str	r3, [r4, #0]
70014b90:	bd38      	pop	{r3, r4, r5, pc}
70014b92:	bf00      	nop
70014b94:	24008624 	.word	0x24008624

70014b98 <_isatty_r>:
70014b98:	b538      	push	{r3, r4, r5, lr}
70014b9a:	4d06      	ldr	r5, [pc, #24]	@ (70014bb4 <_isatty_r+0x1c>)
70014b9c:	2300      	movs	r3, #0
70014b9e:	4604      	mov	r4, r0
70014ba0:	4608      	mov	r0, r1
70014ba2:	602b      	str	r3, [r5, #0]
70014ba4:	f7eb ff08 	bl	700009b8 <_isatty>
70014ba8:	1c43      	adds	r3, r0, #1
70014baa:	d102      	bne.n	70014bb2 <_isatty_r+0x1a>
70014bac:	682b      	ldr	r3, [r5, #0]
70014bae:	b103      	cbz	r3, 70014bb2 <_isatty_r+0x1a>
70014bb0:	6023      	str	r3, [r4, #0]
70014bb2:	bd38      	pop	{r3, r4, r5, pc}
70014bb4:	24008624 	.word	0x24008624

70014bb8 <_kill_r>:
70014bb8:	b538      	push	{r3, r4, r5, lr}
70014bba:	4d07      	ldr	r5, [pc, #28]	@ (70014bd8 <_kill_r+0x20>)
70014bbc:	2300      	movs	r3, #0
70014bbe:	4604      	mov	r4, r0
70014bc0:	4608      	mov	r0, r1
70014bc2:	4611      	mov	r1, r2
70014bc4:	602b      	str	r3, [r5, #0]
70014bc6:	f7eb fe85 	bl	700008d4 <_kill>
70014bca:	1c43      	adds	r3, r0, #1
70014bcc:	d102      	bne.n	70014bd4 <_kill_r+0x1c>
70014bce:	682b      	ldr	r3, [r5, #0]
70014bd0:	b103      	cbz	r3, 70014bd4 <_kill_r+0x1c>
70014bd2:	6023      	str	r3, [r4, #0]
70014bd4:	bd38      	pop	{r3, r4, r5, pc}
70014bd6:	bf00      	nop
70014bd8:	24008624 	.word	0x24008624

70014bdc <_getpid_r>:
70014bdc:	f7eb be72 	b.w	700008c4 <_getpid>

70014be0 <_init>:
70014be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
70014be2:	bf00      	nop
70014be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
70014be6:	bc08      	pop	{r3}
70014be8:	469e      	mov	lr, r3
70014bea:	4770      	bx	lr

70014bec <_fini>:
70014bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
70014bee:	bf00      	nop
70014bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
70014bf2:	bc08      	pop	{r3}
70014bf4:	469e      	mov	lr, r3
70014bf6:	4770      	bx	lr

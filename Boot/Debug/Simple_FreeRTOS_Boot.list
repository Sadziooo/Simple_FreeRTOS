
Simple_FreeRTOS_Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002b0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082c4  080002b0  080002b0  000012b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08008574  08008574  00009574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085c0  080085c0  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000000  080085c0  080085c0  0000a00c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085c0  080085c0  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085c0  080085c0  000095c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085c4  080085c4  000095c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  24000000  080085c8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2400000c  080085d4  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  20000000  0000b000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150ce  00000000  00000000  0000a03a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e5  00000000  00000000  0001f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00021af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0b  00000000  00000000  00022850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030e00  00000000  00000000  0002325b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001333e  00000000  00000000  0005405b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001346e7  00000000  00000000  00067399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019ba80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003614  00000000  00000000  0019bac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0019f0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400000c 	.word	0x2400000c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800855c 	.word	0x0800855c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000010 	.word	0x24000010
 80002ec:	0800855c 	.word	0x0800855c

080002f0 <MX_EXTMEM_MANAGER_Init>:
/**
  * Init External memory manager
  * @retval None
  */
void MX_EXTMEM_MANAGER_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MX_EXTMEM_Init_PreTreatment */

  /* USER CODE END MX_EXTMEM_Init_PreTreatment */
  HAL_RCCEx_EnableClockProtection(RCC_CLOCKPROTECT_XSPI);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f004 fcc3 	bl	8004c80 <HAL_RCCEx_EnableClockProtection>

  /* Initialization of the memory parameters */
  memset(extmem_list_config, 0x0, sizeof(extmem_list_config));
 80002fa:	22ac      	movs	r2, #172	@ 0xac
 80002fc:	2100      	movs	r1, #0
 80002fe:	480b      	ldr	r0, [pc, #44]	@ (800032c <MX_EXTMEM_MANAGER_Init+0x3c>)
 8000300:	f008 f8f2 	bl	80084e8 <memset>

  /* EXTMEMORY_1 */
  extmem_list_config[0].MemType = EXTMEM_NOR_SFDP;
 8000304:	4b09      	ldr	r3, [pc, #36]	@ (800032c <MX_EXTMEM_MANAGER_Init+0x3c>)
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
  extmem_list_config[0].Handle = (void*)&hxspi2;
 800030a:	4b08      	ldr	r3, [pc, #32]	@ (800032c <MX_EXTMEM_MANAGER_Init+0x3c>)
 800030c:	4a08      	ldr	r2, [pc, #32]	@ (8000330 <MX_EXTMEM_MANAGER_Init+0x40>)
 800030e:	605a      	str	r2, [r3, #4]
  extmem_list_config[0].ConfigType = EXTMEM_LINK_CONFIG_8LINES;
 8000310:	4b06      	ldr	r3, [pc, #24]	@ (800032c <MX_EXTMEM_MANAGER_Init+0x3c>)
 8000312:	2203      	movs	r2, #3
 8000314:	721a      	strb	r2, [r3, #8]

  EXTMEM_Init(EXTMEMORY_1, HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_XSPI2));
 8000316:	2004      	movs	r0, #4
 8000318:	f003 f972 	bl	8003600 <HAL_RCCEx_GetPeriphCLKFreq>
 800031c:	4603      	mov	r3, r0
 800031e:	4619      	mov	r1, r3
 8000320:	2000      	movs	r0, #0
 8000322:	f005 fcf5 	bl	8005d10 <EXTMEM_Init>

  /* USER CODE BEGIN MX_EXTMEM_Init_PostTreatment */

  /* USER CODE END MX_EXTMEM_Init_PostTreatment */
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	2400008c 	.word	0x2400008c
 8000330:	24000028 	.word	0x24000028

08000334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800033a:	f000 f971 	bl	8000620 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800033e:	4b3c      	ldr	r3, [pc, #240]	@ (8000430 <main+0xfc>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000346:	2b00      	cmp	r3, #0
 8000348:	d11b      	bne.n	8000382 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800034a:	f3bf 8f4f 	dsb	sy
}
 800034e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000350:	f3bf 8f6f 	isb	sy
}
 8000354:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000356:	4b36      	ldr	r3, [pc, #216]	@ (8000430 <main+0xfc>)
 8000358:	2200      	movs	r2, #0
 800035a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800035e:	f3bf 8f4f 	dsb	sy
}
 8000362:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000364:	f3bf 8f6f 	isb	sy
}
 8000368:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800036a:	4b31      	ldr	r3, [pc, #196]	@ (8000430 <main+0xfc>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4a30      	ldr	r2, [pc, #192]	@ (8000430 <main+0xfc>)
 8000370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000374:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000376:	f3bf 8f4f 	dsb	sy
}
 800037a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800037c:	f3bf 8f6f 	isb	sy
}
 8000380:	e000      	b.n	8000384 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000382:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000384:	4b2a      	ldr	r3, [pc, #168]	@ (8000430 <main+0xfc>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800038c:	2b00      	cmp	r3, #0
 800038e:	d138      	bne.n	8000402 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000390:	4b27      	ldr	r3, [pc, #156]	@ (8000430 <main+0xfc>)
 8000392:	2200      	movs	r2, #0
 8000394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000398:	f3bf 8f4f 	dsb	sy
}
 800039c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800039e:	4b24      	ldr	r3, [pc, #144]	@ (8000430 <main+0xfc>)
 80003a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80003a4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	0b5b      	lsrs	r3, r3, #13
 80003aa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003ae:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	08db      	lsrs	r3, r3, #3
 80003b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80003b8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	015a      	lsls	r2, r3, #5
 80003be:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80003c2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003c8:	4919      	ldr	r1, [pc, #100]	@ (8000430 <main+0xfc>)
 80003ca:	4313      	orrs	r3, r2
 80003cc:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	1e5a      	subs	r2, r3, #1
 80003d4:	607a      	str	r2, [r7, #4]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d1ef      	bne.n	80003ba <main+0x86>
    } while(sets-- != 0U);
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	1e5a      	subs	r2, r3, #1
 80003de:	60ba      	str	r2, [r7, #8]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d1e5      	bne.n	80003b0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80003e4:	f3bf 8f4f 	dsb	sy
}
 80003e8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80003ea:	4b11      	ldr	r3, [pc, #68]	@ (8000430 <main+0xfc>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a10      	ldr	r2, [pc, #64]	@ (8000430 <main+0xfc>)
 80003f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80003f4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003f6:	f3bf 8f4f 	dsb	sy
}
 80003fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003fc:	f3bf 8f6f 	isb	sy
}
 8000400:	e000      	b.n	8000404 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000402:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000404:	f000 fa7d 	bl	8000902 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000408:	f000 f814 	bl	8000434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040c:	f000 f8f0 	bl	80005f0 <MX_GPIO_Init>
  MX_SBS_Init();
 8000410:	f000 f88c 	bl	800052c <MX_SBS_Init>
  MX_XSPI2_Init();
 8000414:	f000 f892 	bl	800053c <MX_XSPI2_Init>
  MX_EXTMEM_MANAGER_Init();
 8000418:	f7ff ff6a 	bl	80002f0 <MX_EXTMEM_MANAGER_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Launch the application */
  if (BOOT_OK != BOOT_Application())
 800041c:	f005 fbb0 	bl	8005b80 <BOOT_Application>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d002      	beq.n	800042c <main+0xf8>
  {
    Error_Handler();
 8000426:	f000 f940 	bl	80006aa <Error_Handler>
  }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800042a:	bf00      	nop
 800042c:	bf00      	nop
 800042e:	e7fd      	b.n	800042c <main+0xf8>
 8000430:	e000ed00 	.word	0xe000ed00

08000434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b0b0      	sub	sp, #192	@ 0xc0
 8000438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800043e:	229c      	movs	r2, #156	@ 0x9c
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f008 f850 	bl	80084e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2220      	movs	r2, #32
 800044c:	2100      	movs	r1, #0
 800044e:	4618      	mov	r0, r3
 8000450:	f008 f84a 	bl	80084e8 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000454:	2001      	movs	r0, #1
 8000456:	f000 ff1d 	bl	8001294 <HAL_PWREx_ControlVoltageScaling>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x30>
  {
    Error_Handler();
 8000460:	f000 f923 	bl	80006aa <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000464:	2302      	movs	r3, #2
 8000466:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000468:	2301      	movs	r3, #1
 800046a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000470:	2340      	movs	r3, #64	@ 0x40
 8000472:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
 8000474:	2302      	movs	r3, #2
 8000476:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
 8000478:	2300      	movs	r3, #0
 800047a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL1.PLLM = 32;
 800047c:	2320      	movs	r3, #32
 800047e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL1.PLLN = 300;
 8000480:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000484:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLP = 1;
 8000486:	2301      	movs	r3, #1
 8000488:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL1.PLLQ = 2;
 800048a:	2302      	movs	r3, #2
 800048c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL1.PLLR = 2;
 800048e:	2302      	movs	r3, #2
 8000490:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL1.PLLS = 2;
 8000492:	2302      	movs	r3, #2
 8000494:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL1.PLLT = 2;
 8000496:	2302      	movs	r3, #2
 8000498:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
 800049e:	2302      	movs	r3, #2
 80004a0:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
 80004a2:	2300      	movs	r3, #0
 80004a4:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLM = 4;
 80004a6:	2304      	movs	r3, #4
 80004a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL2.PLLN = 25;
 80004aa:	2319      	movs	r3, #25
 80004ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL2.PLLP = 2;
 80004ae:	2302      	movs	r3, #2
 80004b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLQ = 2;
 80004b4:	2302      	movs	r3, #2
 80004b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL2.PLLR = 2;
 80004ba:	2302      	movs	r3, #2
 80004bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL2.PLLS = 2;
 80004c0:	2302      	movs	r3, #2
 80004c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL2.PLLT = 2;
 80004c6:	2302      	movs	r3, #2
 80004c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 ff11 	bl	8001304 <HAL_RCC_OscConfig>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80004e8:	f000 f8df 	bl	80006aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ec:	233f      	movs	r3, #63	@ 0x3f
 80004ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK4|RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f0:	2303      	movs	r3, #3
 80004f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004f8:	2308      	movs	r3, #8
 80004fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004fc:	2304      	movs	r3, #4
 80004fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000500:	2340      	movs	r3, #64	@ 0x40
 8000502:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000504:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000508:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV2;
 800050a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800050e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2137      	movs	r1, #55	@ 0x37
 8000514:	4618      	mov	r0, r3
 8000516:	f001 fa2f 	bl	8001978 <HAL_RCC_ClockConfig>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000520:	f000 f8c3 	bl	80006aa <Error_Handler>
  }
}
 8000524:	bf00      	nop
 8000526:	37c0      	adds	r7, #192	@ 0xc0
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <MX_SBS_Init>:
  * @brief SBS Initialization Function
  * @param None
  * @retval None
  */
static void MX_SBS_Init(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END SBS_Init 1 */
  /* USER CODE BEGIN SBS_Init 2 */

  /* USER CODE END SBS_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
	...

0800053c <MX_XSPI2_Init>:
  * @brief XSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_XSPI2_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI2_Init 0 */

  /* USER CODE END XSPI2_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN XSPI2_Init 1 */

  /* USER CODE END XSPI2_Init 1 */
  /* XSPI2 parameter configuration*/
  hxspi2.Instance = XSPI2;
 800054c:	4b26      	ldr	r3, [pc, #152]	@ (80005e8 <MX_XSPI2_Init+0xac>)
 800054e:	4a27      	ldr	r2, [pc, #156]	@ (80005ec <MX_XSPI2_Init+0xb0>)
 8000550:	601a      	str	r2, [r3, #0]
  hxspi2.Init.FifoThresholdByte = 4;
 8000552:	4b25      	ldr	r3, [pc, #148]	@ (80005e8 <MX_XSPI2_Init+0xac>)
 8000554:	2204      	movs	r2, #4
 8000556:	605a      	str	r2, [r3, #4]
  hxspi2.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000558:	4b23      	ldr	r3, [pc, #140]	@ (80005e8 <MX_XSPI2_Init+0xac>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  hxspi2.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 800055e:	4b22      	ldr	r3, [pc, #136]	@ (80005e8 <MX_XSPI2_Init+0xac>)
 8000560:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000564:	60da      	str	r2, [r3, #12]
  hxspi2.Init.MemorySize = HAL_XSPI_SIZE_32GB;
 8000566:	4b20      	ldr	r3, [pc, #128]	@ (80005e8 <MX_XSPI2_Init+0xac>)
 8000568:	221f      	movs	r2, #31
 800056a:	611a      	str	r2, [r3, #16]
  hxspi2.Init.ChipSelectHighTimeCycle = 2;
 800056c:	4b1e      	ldr	r3, [pc, #120]	@ (80005e8 <MX_XSPI2_Init+0xac>)
 800056e:	2202      	movs	r2, #2
 8000570:	615a      	str	r2, [r3, #20]
  hxspi2.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000572:	4b1d      	ldr	r3, [pc, #116]	@ (80005e8 <MX_XSPI2_Init+0xac>)
 8000574:	2200      	movs	r2, #0
 8000576:	619a      	str	r2, [r3, #24]
  hxspi2.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000578:	4b1b      	ldr	r3, [pc, #108]	@ (80005e8 <MX_XSPI2_Init+0xac>)
 800057a:	2200      	movs	r2, #0
 800057c:	61da      	str	r2, [r3, #28]
  hxspi2.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 800057e:	4b1a      	ldr	r3, [pc, #104]	@ (80005e8 <MX_XSPI2_Init+0xac>)
 8000580:	2200      	movs	r2, #0
 8000582:	621a      	str	r2, [r3, #32]
  hxspi2.Init.ClockPrescaler = 3;
 8000584:	4b18      	ldr	r3, [pc, #96]	@ (80005e8 <MX_XSPI2_Init+0xac>)
 8000586:	2203      	movs	r2, #3
 8000588:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi2.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 800058a:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <MX_XSPI2_Init+0xac>)
 800058c:	2200      	movs	r2, #0
 800058e:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi2.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 8000590:	4b15      	ldr	r3, [pc, #84]	@ (80005e8 <MX_XSPI2_Init+0xac>)
 8000592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000596:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi2.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000598:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <MX_XSPI2_Init+0xac>)
 800059a:	2200      	movs	r2, #0
 800059c:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi2.Init.MaxTran = 0;
 800059e:	4b12      	ldr	r3, [pc, #72]	@ (80005e8 <MX_XSPI2_Init+0xac>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi2.Init.Refresh = 0;
 80005a4:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <MX_XSPI2_Init+0xac>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi2.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
 80005aa:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <MX_XSPI2_Init+0xac>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi2) != HAL_OK)
 80005b0:	480d      	ldr	r0, [pc, #52]	@ (80005e8 <MX_XSPI2_Init+0xac>)
 80005b2:	f004 fbc5 	bl	8004d40 <HAL_XSPI_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_XSPI2_Init+0x84>
  {
    Error_Handler();
 80005bc:	f000 f875 	bl	80006aa <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 80005c0:	2310      	movs	r3, #16
 80005c2:	607b      	str	r3, [r7, #4]
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_2;
 80005c4:	2301      	movs	r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
  if (HAL_XSPIM_Config(&hxspi2, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80005ce:	4619      	mov	r1, r3
 80005d0:	4805      	ldr	r0, [pc, #20]	@ (80005e8 <MX_XSPI2_Init+0xac>)
 80005d2:	f004 ffb1 	bl	8005538 <HAL_XSPIM_Config>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_XSPI2_Init+0xa4>
  {
    Error_Handler();
 80005dc:	f000 f865 	bl	80006aa <Error_Handler>
  }
  /* USER CODE BEGIN XSPI2_Init 2 */

  /* USER CODE END XSPI2_Init 2 */

}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	24000028 	.word	0x24000028
 80005ec:	5200a000 	.word	0x5200a000

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPION_CLK_ENABLE();
 80005f6:	4b09      	ldr	r3, [pc, #36]	@ (800061c <MX_GPIO_Init+0x2c>)
 80005f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005fc:	4a07      	ldr	r2, [pc, #28]	@ (800061c <MX_GPIO_Init+0x2c>)
 80005fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000602:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000606:	4b05      	ldr	r3, [pc, #20]	@ (800061c <MX_GPIO_Init+0x2c>)
 8000608:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	58024400 	.word	0x58024400

08000620 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

static void MPU_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000626:	463b      	mov	r3, r7
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000632:	f000 fba7 	bl	8000d84 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000636:	2301      	movs	r3, #1
 8000638:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800063a:	2300      	movs	r3, #0
 800063c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000642:	231f      	movs	r3, #31
 8000644:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000646:	2387      	movs	r3, #135	@ 0x87
 8000648:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800064a:	2300      	movs	r3, #0
 800064c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800064e:	2300      	movs	r3, #0
 8000650:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000652:	2301      	movs	r3, #1
 8000654:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000656:	2300      	movs	r3, #0
 8000658:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800065a:	2300      	movs	r3, #0
 800065c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800065e:	2300      	movs	r3, #0
 8000660:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000662:	463b      	mov	r3, r7
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fbab 	bl	8000dc0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800066a:	2301      	movs	r3, #1
 800066c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x70000000;
 800066e:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8000672:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000674:	231a      	movs	r3, #26
 8000676:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000678:	2300      	movs	r3, #0
 800067a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800067c:	2301      	movs	r3, #1
 800067e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000680:	2303      	movs	r3, #3
 8000682:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000684:	2300      	movs	r3, #0
 8000686:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000688:	2301      	movs	r3, #1
 800068a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800068c:	2301      	movs	r3, #1
 800068e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000690:	2301      	movs	r3, #1
 8000692:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000694:	463b      	mov	r3, r7
 8000696:	4618      	mov	r0, r3
 8000698:	f000 fb92 	bl	8000dc0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800069c:	2004      	movs	r0, #4
 800069e:	f000 fb4f 	bl	8000d40 <HAL_MPU_Enable>

}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ae:	b672      	cpsid	i
}
 80006b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b2:	bf00      	nop
 80006b4:	e7fd      	b.n	80006b2 <Error_Handler+0x8>
	...

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b0a8      	sub	sp, #160	@ 0xa0
 80006bc:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	229c      	movs	r2, #156	@ 0x9c
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f007 ff0f 	bl	80084e8 <memset>

  /* Configure the system Power Supply */

  if (HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY) != HAL_OK)
 80006ca:	2002      	movs	r0, #2
 80006cc:	f000 fd90 	bl	80011f0 <HAL_PWREx_ConfigSupply>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <HAL_MspInit+0x22>
  {
    /* Initialization error */
    Error_Handler();
 80006d6:	f7ff ffe8 	bl	80006aa <Error_Handler>

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SBS_CLK_ENABLE();
 80006da:	4b1a      	ldr	r3, [pc, #104]	@ (8000744 <HAL_MspInit+0x8c>)
 80006dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80006e0:	4a18      	ldr	r2, [pc, #96]	@ (8000744 <HAL_MspInit+0x8c>)
 80006e2:	f043 0302 	orr.w	r3, r3, #2
 80006e6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80006ea:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <HAL_MspInit+0x8c>)
 80006ec:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Enable the XSPIM_P2 interface */
  HAL_PWREx_EnableXSPIM2();
 80006f4:	f000 fdf6 	bl	80012e4 <HAL_PWREx_EnableXSPIM2>

  /* The CSI is used by the compensation cells and must be enabled before enabling the
     compensation cells.
     For more details refer to RM0477 [SBS I/O compensation cell management] chapter.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 80006f8:	2310      	movs	r3, #16
 80006fa:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80006fc:	2380      	movs	r3, #128	@ 0x80
 80006fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fdfe 	bl	8001304 <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <HAL_MspInit+0x5a>
  {
    Error_Handler();
 800070e:	f7ff ffcc 	bl	80006aa <Error_Handler>
  }

  /* Configure the compensation cell */
  HAL_SBS_ConfigCompensationCell(SBS_IO_XSPI2_CELL, SBS_IO_CELL_CODE, 0U, 0U);
 8000712:	2300      	movs	r3, #0
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	2010      	movs	r0, #16
 800071a:	f000 f9c5 	bl	8000aa8 <HAL_SBS_ConfigCompensationCell>

  /* Enable compensation cell */
  HAL_SBS_EnableCompensationCell(SBS_IO_XSPI2_CELL);
 800071e:	2010      	movs	r0, #16
 8000720:	f000 f998 	bl	8000a54 <HAL_SBS_EnableCompensationCell>

  /* wait ready before enabled IO */
  while(HAL_SBS_GetCompensationCellReadyStatus(SBS_IO_XSPI2_CELL_READY) != 1U);
 8000724:	bf00      	nop
 8000726:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800072a:	f000 f9a7 	bl	8000a7c <HAL_SBS_GetCompensationCellReadyStatus>
 800072e:	4603      	mov	r3, r0
 8000730:	2b01      	cmp	r3, #1
 8000732:	d1f8      	bne.n	8000726 <HAL_MspInit+0x6e>

  /* high speed low voltage config */
  HAL_SBS_EnableIOSpeedOptimize(SBS_IO_XSPI2_HSLV);
 8000734:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000738:	f000 fa0a 	bl	8000b50 <HAL_SBS_EnableIOSpeedOptimize>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073c:	bf00      	nop
 800073e:	37a0      	adds	r7, #160	@ 0xa0
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	58024400 	.word	0x58024400

08000748 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b0ac      	sub	sp, #176	@ 0xb0
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000760:	f107 0318 	add.w	r3, r7, #24
 8000764:	2284      	movs	r2, #132	@ 0x84
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f007 febd 	bl	80084e8 <memset>
  if(hxspi->Instance==XSPI2)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a29      	ldr	r2, [pc, #164]	@ (8000818 <HAL_XSPI_MspInit+0xd0>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d14a      	bne.n	800080e <HAL_XSPI_MspInit+0xc6>

  /* USER CODE END XSPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_XSPI2;
 8000778:	2304      	movs	r3, #4
 800077a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_PLL2S;
 800077c:	2340      	movs	r3, #64	@ 0x40
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000780:	f107 0318 	add.w	r3, r7, #24
 8000784:	4618      	mov	r0, r3
 8000786:	f002 f837 	bl	80027f8 <HAL_RCCEx_PeriphCLKConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <HAL_XSPI_MspInit+0x4c>
    {
      Error_Handler();
 8000790:	f7ff ff8b 	bl	80006aa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_XSPIM_CLK_ENABLE();
 8000794:	4b21      	ldr	r3, [pc, #132]	@ (800081c <HAL_XSPI_MspInit+0xd4>)
 8000796:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800079a:	4a20      	ldr	r2, [pc, #128]	@ (800081c <HAL_XSPI_MspInit+0xd4>)
 800079c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007a0:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 80007a4:	4b1d      	ldr	r3, [pc, #116]	@ (800081c <HAL_XSPI_MspInit+0xd4>)
 80007a6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_XSPI2_CLK_ENABLE();
 80007ae:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <HAL_XSPI_MspInit+0xd4>)
 80007b0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80007b4:	4a19      	ldr	r2, [pc, #100]	@ (800081c <HAL_XSPI_MspInit+0xd4>)
 80007b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007ba:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 80007be:	4b17      	ldr	r3, [pc, #92]	@ (800081c <HAL_XSPI_MspInit+0xd4>)
 80007c0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPION_CLK_ENABLE();
 80007c8:	4b14      	ldr	r3, [pc, #80]	@ (800081c <HAL_XSPI_MspInit+0xd4>)
 80007ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007ce:	4a13      	ldr	r2, [pc, #76]	@ (800081c <HAL_XSPI_MspInit+0xd4>)
 80007d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007d4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007d8:	4b10      	ldr	r3, [pc, #64]	@ (800081c <HAL_XSPI_MspInit+0xd4>)
 80007da:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    PN6     ------> XSPIM_P2_CLK
    PN8     ------> XSPIM_P2_IO4
    PN4     ------> XSPIM_P2_IO2
    PN5     ------> XSPIM_P2_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_11
 80007e2:	f640 737f 	movw	r3, #3967	@ 0xf7f
 80007e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_2|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f6:	2303      	movs	r3, #3
 80007f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P2;
 80007fc:	2309      	movs	r3, #9
 80007fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPION, &GPIO_InitStruct);
 8000802:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000806:	4619      	mov	r1, r3
 8000808:	4805      	ldr	r0, [pc, #20]	@ (8000820 <HAL_XSPI_MspInit+0xd8>)
 800080a:	f000 fb9b 	bl	8000f44 <HAL_GPIO_Init>

  /* USER CODE END XSPI2_MspInit 1 */

  }

}
 800080e:	bf00      	nop
 8000810:	37b0      	adds	r7, #176	@ 0xb0
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	5200a000 	.word	0x5200a000
 800081c:	58024400 	.word	0x58024400
 8000820:	58023400 	.word	0x58023400

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <NMI_Handler+0x4>

0800082c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <HardFault_Handler+0x4>

08000834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <MemManage_Handler+0x4>

0800083c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <BusFault_Handler+0x4>

08000844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <UsageFault_Handler+0x4>

0800084c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087a:	f000 f897 	bl	80009ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = INTVECT_START;
 8000888:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <SystemInit+0x24>)
 800088a:	4a08      	ldr	r2, [pc, #32]	@ (80008ac <SystemInit+0x28>)
 800088c:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <SystemInit+0x24>)
 8000890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000894:	4a04      	ldr	r2, [pc, #16]	@ (80008a8 <SystemInit+0x24>)
 8000896:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800089a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000ed00 	.word	0xe000ed00
 80008ac:	08000000 	.word	0x08000000

080008b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008b0:	480d      	ldr	r0, [pc, #52]	@ (80008e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008b4:	f7ff ffe6 	bl	8000884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b8:	480c      	ldr	r0, [pc, #48]	@ (80008ec <LoopForever+0x6>)
  ldr r1, =_edata
 80008ba:	490d      	ldr	r1, [pc, #52]	@ (80008f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008bc:	4a0d      	ldr	r2, [pc, #52]	@ (80008f4 <LoopForever+0xe>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d0:	4c0a      	ldr	r4, [pc, #40]	@ (80008fc <LoopForever+0x16>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008de:	f007 fe0b 	bl	80084f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008e2:	f7ff fd27 	bl	8000334 <main>

080008e6 <LoopForever>:

LoopForever:
  b LoopForever
 80008e6:	e7fe      	b.n	80008e6 <LoopForever>
  ldr   r0, =_estack
 80008e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80008f0:	2400000c 	.word	0x2400000c
  ldr r2, =_sidata
 80008f4:	080085c8 	.word	0x080085c8
  ldr r2, =_sbss
 80008f8:	2400000c 	.word	0x2400000c
  ldr r4, =_ebss
 80008fc:	240002c0 	.word	0x240002c0

08000900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_2_IRQHandler>

08000902 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000908:	2300      	movs	r3, #0
 800090a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800090c:	2003      	movs	r0, #3
 800090e:	f000 f9e5 	bl	8000cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000912:	200f      	movs	r0, #15
 8000914:	f000 f80e 	bl	8000934 <HAL_InitTick>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d002      	beq.n	8000924 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	71fb      	strb	r3, [r7, #7]
 8000922:	e001      	b.n	8000928 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000924:	f7ff fec8 	bl	80006b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000928:	79fb      	ldrb	r3, [r7, #7]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800093c:	2300      	movs	r3, #0
 800093e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000940:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_InitTick+0x6c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d023      	beq.n	8000990 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000948:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <HAL_InitTick+0x70>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <HAL_InitTick+0x6c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000956:	fbb3 f3f1 	udiv	r3, r3, r1
 800095a:	fbb2 f3f3 	udiv	r3, r2, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f9e1 	bl	8000d26 <HAL_SYSTICK_Config>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10f      	bne.n	800098a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b0f      	cmp	r3, #15
 800096e:	d809      	bhi.n	8000984 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000970:	2200      	movs	r2, #0
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f000 f9bb 	bl	8000cf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800097c:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <HAL_InitTick+0x74>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
 8000982:	e007      	b.n	8000994 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000984:	2301      	movs	r3, #1
 8000986:	73fb      	strb	r3, [r7, #15]
 8000988:	e004      	b.n	8000994 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	73fb      	strb	r3, [r7, #15]
 800098e:	e001      	b.n	8000994 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000994:	7bfb      	ldrb	r3, [r7, #15]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	24000008 	.word	0x24000008
 80009a4:	24000000 	.word	0x24000000
 80009a8:	24000004 	.word	0x24000004

080009ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <HAL_IncTick+0x20>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <HAL_IncTick+0x24>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4413      	add	r3, r2
 80009bc:	4a04      	ldr	r2, [pc, #16]	@ (80009d0 <HAL_IncTick+0x24>)
 80009be:	6013      	str	r3, [r2, #0]
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	24000008 	.word	0x24000008
 80009d0:	24000088 	.word	0x24000088

080009d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return uwTick;
 80009d8:	4b03      	ldr	r3, [pc, #12]	@ (80009e8 <HAL_GetTick+0x14>)
 80009da:	681b      	ldr	r3, [r3, #0]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	24000088 	.word	0x24000088

080009ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f4:	f7ff ffee 	bl	80009d4 <HAL_GetTick>
 80009f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to ensure minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a04:	d005      	beq.n	8000a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a06:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <HAL_Delay+0x44>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4413      	add	r3, r2
 8000a10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a12:	bf00      	nop
 8000a14:	f7ff ffde 	bl	80009d4 <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d8f7      	bhi.n	8000a14 <HAL_Delay+0x28>
  {
  }
}
 8000a24:	bf00      	nop
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	24000008 	.word	0x24000008

08000a34 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <HAL_SuspendTick+0x1c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a04      	ldr	r2, [pc, #16]	@ (8000a50 <HAL_SuspendTick+0x1c>)
 8000a3e:	f023 0302 	bic.w	r3, r3, #2
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000e010 	.word	0xe000e010

08000a54 <HAL_SBS_EnableCompensationCell>:
  *            @arg SBS_IO_XSPI1_CELL Compensation cell for the I/O of the XSPI1
  *            @arg SBS_IO_XSPI2_CELL Compensation cell for the I/O of the XSPI2
  * @retval None
  */
void HAL_SBS_EnableCompensationCell(uint32_t Selection)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_COMPENSATION_CELL(Selection));

  SET_BIT(SBS->CCCSR, Selection);
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_SBS_EnableCompensationCell+0x24>)
 8000a5e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000a62:	4905      	ldr	r1, [pc, #20]	@ (8000a78 <HAL_SBS_EnableCompensationCell+0x24>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	58000400 	.word	0x58000400

08000a7c <HAL_SBS_GetCompensationCellReadyStatus>:
  *            @arg SBS_IO_XSPI1_CELL_READY Compensation cell for the I/O of the XSPI1
  *            @arg SBS_IO_XSPI2_CELL_READY Compensation cell for the I/O of the XSPI2
  * @retval Ready status (1 or 0)
  */
uint32_t HAL_SBS_GetCompensationCellReadyStatus(uint32_t Selection)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_COMPENSATION_CELL_READY(Selection));

  return (((SBS->CCCSR & Selection) == 0U) ? 0UL : 1UL);
 8000a84:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <HAL_SBS_GetCompensationCellReadyStatus+0x28>)
 8000a86:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	bf14      	ite	ne
 8000a92:	2301      	movne	r3, #1
 8000a94:	2300      	moveq	r3, #0
 8000a96:	b2db      	uxtb	r3, r3
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	58000400 	.word	0x58000400

08000aa8 <HAL_SBS_ConfigCompensationCell>:
  * @param  PmosValue In case SBS_IO_REGISTER_CODE is selected, it  provides the Pmos value
  *                   to apply in range 0 to 15 else this parameter is not used
  * @retval None
  */
void HAL_SBS_ConfigCompensationCell(uint32_t Selection, uint32_t Code, uint32_t NmosValue, uint32_t PmosValue)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	@ 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SBS_COMPENSATION_CELL(Selection));
  assert_param(IS_SBS_IO_COMPENSATION_CODE(Code));

  if (Code == SBS_IO_REGISTER_CODE)
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d121      	bne.n	8000b00 <HAL_SBS_ConfigCompensationCell+0x58>
  {
    /* Check the parameters */
    assert_param(IS_SBS_IO_COMPENSATION_CELL_NMOS_VALUE(NmosValue));
    assert_param(IS_SBS_IO_COMPENSATION_CELL_PMOS_VALUE(PmosValue));

    offset = ((Selection == SBS_IO_ANALOG_CELL) ? 0U : ((Selection == SBS_IO_XSPI1_CELL) ? 8U : 16U));
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d006      	beq.n	8000ad0 <HAL_SBS_ConfigCompensationCell+0x28>
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d101      	bne.n	8000acc <HAL_SBS_ConfigCompensationCell+0x24>
 8000ac8:	2308      	movs	r3, #8
 8000aca:	e002      	b.n	8000ad2 <HAL_SBS_ConfigCompensationCell+0x2a>
 8000acc:	2310      	movs	r3, #16
 8000ace:	e000      	b.n	8000ad2 <HAL_SBS_ConfigCompensationCell+0x2a>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]

    MODIFY_REG(SBS->CCSWVALR, (0xFFU << offset), ((NmosValue << offset) | (PmosValue << (offset + 4U))));
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b4c <HAL_SBS_ConfigCompensationCell+0xa4>)
 8000ad6:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8000ada:	21ff      	movs	r1, #255	@ 0xff
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	4099      	lsls	r1, r3
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	3304      	adds	r3, #4
 8000af0:	6838      	ldr	r0, [r7, #0]
 8000af2:	fa00 f303 	lsl.w	r3, r0, r3
 8000af6:	430b      	orrs	r3, r1
 8000af8:	4914      	ldr	r1, [pc, #80]	@ (8000b4c <HAL_SBS_ConfigCompensationCell+0xa4>)
 8000afa:	4313      	orrs	r3, r2
 8000afc:	f8c1 3118 	str.w	r3, [r1, #280]	@ 0x118
  }

  MODIFY_REG(SBS->CCCSR, (Selection << 1U), (Code << (POSITION_VAL(Selection) + 1U)));
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <HAL_SBS_ConfigCompensationCell+0xa4>)
 8000b02:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	401a      	ands	r2, r3
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	fa93 f3a3 	rbit	r3, r3
 8000b18:	613b      	str	r3, [r7, #16]
  return result;
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d101      	bne.n	8000b28 <HAL_SBS_ConfigCompensationCell+0x80>
    return 32U;
 8000b24:	2320      	movs	r3, #32
 8000b26:	e003      	b.n	8000b30 <HAL_SBS_ConfigCompensationCell+0x88>
  return __builtin_clz(value);
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	fab3 f383 	clz	r3, r3
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	3301      	adds	r3, #1
 8000b32:	68b9      	ldr	r1, [r7, #8]
 8000b34:	fa01 f303 	lsl.w	r3, r1, r3
 8000b38:	4904      	ldr	r1, [pc, #16]	@ (8000b4c <HAL_SBS_ConfigCompensationCell+0xa4>)
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
}
 8000b40:	bf00      	nop
 8000b42:	3724      	adds	r7, #36	@ 0x24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	58000400 	.word	0x58000400

08000b50 <HAL_SBS_EnableIOSpeedOptimize>:
  *            @arg SBS_IO_XSPI1_HSLV High speed at low voltage for the I/O of the XSPI1
  *            @arg SBS_IO_XSPI2_HSLV High speed at low voltage for the I/O of the XSPI2
  * @retval None
  */
void HAL_SBS_EnableIOSpeedOptimize(uint32_t Selection)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_IOHSLV(Selection));

  SET_BIT(SBS->CCCSR, Selection);
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_SBS_EnableIOSpeedOptimize+0x24>)
 8000b5a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000b5e:	4905      	ldr	r1, [pc, #20]	@ (8000b74 <HAL_SBS_EnableIOSpeedOptimize+0x24>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	58000400 	.word	0x58000400

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	@ (8000bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00
 8000bbc:	05fa0000 	.word	0x05fa0000

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	db0a      	blt.n	8000c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	490c      	ldr	r1, [pc, #48]	@ (8000c28 <__NVIC_SetPriority+0x4c>)
 8000bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bfa:	0112      	lsls	r2, r2, #4
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	440b      	add	r3, r1
 8000c00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c04:	e00a      	b.n	8000c1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4908      	ldr	r1, [pc, #32]	@ (8000c2c <__NVIC_SetPriority+0x50>)
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	3b04      	subs	r3, #4
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	440b      	add	r3, r1
 8000c1a:	761a      	strb	r2, [r3, #24]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	@ 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	f1c3 0307 	rsb	r3, r3, #7
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	bf28      	it	cs
 8000c4e:	2304      	movcs	r3, #4
 8000c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3304      	adds	r3, #4
 8000c56:	2b06      	cmp	r3, #6
 8000c58:	d902      	bls.n	8000c60 <NVIC_EncodePriority+0x30>
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	e000      	b.n	8000c62 <NVIC_EncodePriority+0x32>
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	401a      	ands	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43d9      	mvns	r1, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	4313      	orrs	r3, r2
         );
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3724      	adds	r7, #36	@ 0x24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ca8:	d301      	bcc.n	8000cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00f      	b.n	8000cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cae:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <SysTick_Config+0x40>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f7ff ff8e 	bl	8000bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <SysTick_Config+0x40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <SysTick_Config+0x40>)
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	e000e010 	.word	0xe000e010

08000cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ff47 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d00:	f7ff ff5e 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d04:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	6978      	ldr	r0, [r7, #20]
 8000d0c:	f7ff ff90 	bl	8000c30 <NVIC_EncodePriority>
 8000d10:	4602      	mov	r2, r0
 8000d12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff5f 	bl	8000bdc <__NVIC_SetPriority>
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ffb2 	bl	8000c98 <SysTick_Config>
 8000d34:	4603      	mov	r3, r0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8000d48:	f3bf 8f5f 	dmb	sy
}
 8000d4c:	bf00      	nop
  /* Force any outstanding transfers to complete before enabling MPU */
  __DMB();

  /* Enable the MPU */
  MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
 8000d4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d7c <HAL_MPU_Enable+0x3c>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000d58:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <HAL_MPU_Enable+0x40>)
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d5c:	4a08      	ldr	r2, [pc, #32]	@ (8000d80 <HAL_MPU_Enable+0x40>)
 8000d5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d62:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000d64:	f3bf 8f4f 	dsb	sy
}
 8000d68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d6a:	f3bf 8f6f 	isb	sy
}
 8000d6e:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed90 	.word	0xe000ed90
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8000d88:	f3bf 8f5f 	dmb	sy
}
 8000d8c:	bf00      	nop
  /* Force any outstanding transfers to complete before disabling MPU */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <HAL_MPU_Disable+0x34>)
 8000d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d92:	4a09      	ldr	r2, [pc, #36]	@ (8000db8 <HAL_MPU_Disable+0x34>)
 8000d94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d98:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register */
  MPU->CTRL = 0U;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <HAL_MPU_Disable+0x38>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000da0:	f3bf 8f4f 	dsb	sy
}
 8000da4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000da6:	f3bf 8f6f 	isb	sy
}
 8000daa:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00
 8000dbc:	e000ed90 	.word	0xe000ed90

08000dc0 <HAL_MPU_ConfigRegion>:
  *                  the initialization and configuration information.
  * @note   The region base address must be aligned to the size of the region.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *pMPU_RegionInit)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(pMPU_RegionInit->Number));
  assert_param(IS_MPU_REGION_ENABLE(pMPU_RegionInit->Enable));

  /* Set the Region number */
  MPU->RNR = pMPU_RegionInit->Number;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	785a      	ldrb	r2, [r3, #1]
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e48 <HAL_MPU_ConfigRegion+0x88>)
 8000dce:	609a      	str	r2, [r3, #8]
  assert_param(IS_MPU_SUB_REGION_DISABLE(pMPU_RegionInit->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(pMPU_RegionInit->Size));
  assert_param(IS_MPU_ADDRESS_MULTIPLE_SIZE(pMPU_RegionInit->BaseAddress, pMPU_RegionInit->Size));

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <HAL_MPU_ConfigRegion+0x88>)
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8000e48 <HAL_MPU_ConfigRegion+0x88>)
 8000dd6:	f023 0301 	bic.w	r3, r3, #1
 8000dda:	6113      	str	r3, [r2, #16]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <HAL_MPU_ConfigRegion+0x88>)
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	4a19      	ldr	r2, [pc, #100]	@ (8000e48 <HAL_MPU_ConfigRegion+0x88>)
 8000de2:	f023 0301 	bic.w	r3, r3, #1
 8000de6:	6113      	str	r3, [r2, #16]
  MPU->RBAR = pMPU_RegionInit->BaseAddress;
 8000de8:	4a17      	ldr	r2, [pc, #92]	@ (8000e48 <HAL_MPU_ConfigRegion+0x88>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	7b1b      	ldrb	r3, [r3, #12]
 8000df4:	071a      	lsls	r2, r3, #28
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7adb      	ldrb	r3, [r3, #11]
 8000dfa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8000dfc:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	7a9b      	ldrb	r3, [r3, #10]
 8000e02:	04db      	lsls	r3, r3, #19
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
 8000e04:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	7b5b      	ldrb	r3, [r3, #13]
 8000e0a:	049b      	lsls	r3, r3, #18
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
 8000e0c:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	7b9b      	ldrb	r3, [r3, #14]
 8000e12:	045b      	lsls	r3, r3, #17
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
 8000e14:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7bdb      	ldrb	r3, [r3, #15]
 8000e1a:	041b      	lsls	r3, r3, #16
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
 8000e1c:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7a5b      	ldrb	r3, [r3, #9]
 8000e22:	021b      	lsls	r3, r3, #8
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
 8000e24:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7a1b      	ldrb	r3, [r3, #8]
 8000e2a:	005b      	lsls	r3, r3, #1
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
 8000e2c:	4313      	orrs	r3, r2
              ((uint32_t)pMPU_RegionInit->Enable           << MPU_RASR_ENABLE_Pos);
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	7812      	ldrb	r2, [r2, #0]
 8000e32:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8000e34:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <HAL_MPU_ConfigRegion+0x88>)
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
 8000e36:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8000e38:	6113      	str	r3, [r2, #16]
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed90 	.word	0xe000ed90

08000e4c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8000e54:	f7ff fdbe 	bl	80009d4 <HAL_GetTick>
 8000e58:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d101      	bne.n	8000e64 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e06b      	b.n	8000f3c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d008      	beq.n	8000e82 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2220      	movs	r2, #32
 8000e74:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e05c      	b.n	8000f3c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	695a      	ldr	r2, [r3, #20]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f042 0204 	orr.w	r2, r2, #4
 8000e90:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2205      	movs	r2, #5
 8000e96:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8000e9a:	e020      	b.n	8000ede <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8000e9c:	f7ff fd9a 	bl	80009d4 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b05      	cmp	r3, #5
 8000ea8:	d919      	bls.n	8000ede <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eae:	f043 0210 	orr.w	r2, r3, #16
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2203      	movs	r2, #3
 8000eba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ece:	2201      	movs	r2, #1
 8000ed0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e02e      	b.n	8000f3c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0d7      	beq.n	8000e9c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	695a      	ldr	r2, [r3, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f042 0202 	orr.w	r2, r2, #2
 8000efa:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2204      	movs	r2, #4
 8000f00:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8000f0c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d007      	beq.n	8000f32 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f26:	2201      	movs	r2, #1
 8000f28:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f52:	e139      	b.n	80011c8 <HAL_GPIO_Init+0x284>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	2101      	movs	r1, #1
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	4013      	ands	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 812b 	beq.w	80011c2 <HAL_GPIO_Init+0x27e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d005      	beq.n	8000f84 <HAL_GPIO_Init+0x40>
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d130      	bne.n	8000fe6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fba:	2201      	movs	r2, #1
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	091b      	lsrs	r3, r3, #4
 8000fd0:	f003 0201 	and.w	r2, r3, #1
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d017      	beq.n	8001022 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d123      	bne.n	8001076 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	220f      	movs	r2, #15
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	691a      	ldr	r2, [r3, #16]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	08da      	lsrs	r2, r3, #3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3208      	adds	r2, #8
 8001070:	6939      	ldr	r1, [r7, #16]
 8001072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0203 	and.w	r2, r3, #3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 8085 	beq.w	80011c2 <HAL_GPIO_Init+0x27e>
      {
        temp = SBS->EXTICR[position >> 2u];
 80010b8:	4a4b      	ldr	r2, [pc, #300]	@ (80011e8 <HAL_GPIO_Init+0x2a4>)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	334c      	adds	r3, #76	@ 0x4c
 80010c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	0a9a      	lsrs	r2, r3, #10
 80010e0:	4b42      	ldr	r3, [pc, #264]	@ (80011ec <HAL_GPIO_Init+0x2a8>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	f002 0203 	and.w	r2, r2, #3
 80010ea:	0092      	lsls	r2, r2, #2
 80010ec:	4093      	lsls	r3, r2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        SBS->EXTICR[position >> 2u] = temp;
 80010f4:	493c      	ldr	r1, [pc, #240]	@ (80011e8 <HAL_GPIO_Init+0x2a4>)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	334c      	adds	r3, #76	@ 0x4c
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x1e4>
        {
          temp |= iocurrent;
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001128:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	43db      	mvns	r3, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x212>
        {
          temp |= iocurrent;
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001156:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800115e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001186:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8001190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001194:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	3301      	adds	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa22 f303 	lsr.w	r3, r2, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f47f aebe 	bne.w	8000f54 <HAL_GPIO_Init+0x10>
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	371c      	adds	r7, #28
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	58000400 	.word	0x58000400
 80011ec:	0029ff7f 	.word	0x0029ff7f

080011f0 <HAL_PWREx_ConfigSupply>:
  *        PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO and PWR_SMPS_1V8_SUPPLIES_EXT are used
  *        only for lines that supports SMPS regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Check if supply source was configured */
  if ((PWR->CSR2 & (PWR_CSR2_SDEN | PWR_CSR2_LDOEN | PWR_CSR2_BYPASS)) != (PWR_CSR2_SDEN | PWR_CSR2_LDOEN))
 80011f8:	4b25      	ldr	r3, [pc, #148]	@ (8001290 <HAL_PWREx_ConfigSupply+0xa0>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	2b06      	cmp	r3, #6
 8001202:	d00a      	beq.n	800121a <HAL_PWREx_ConfigSupply+0x2a>
  {
    /* Check supply configuration */
    if ((PWR->CSR2 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001204:	4b22      	ldr	r3, [pc, #136]	@ (8001290 <HAL_PWREx_ConfigSupply+0xa0>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	f003 031f 	and.w	r3, r3, #31
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	429a      	cmp	r2, r3
 8001210:	d001      	beq.n	8001216 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e038      	b.n	8001288 <HAL_PWREx_ConfigSupply+0x98>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e036      	b.n	8001288 <HAL_PWREx_ConfigSupply+0x98>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CSR2, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800121a:	4b1d      	ldr	r3, [pc, #116]	@ (8001290 <HAL_PWREx_ConfigSupply+0xa0>)
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f023 021f 	bic.w	r2, r3, #31
 8001222:	491b      	ldr	r1, [pc, #108]	@ (8001290 <HAL_PWREx_ConfigSupply+0xa0>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4313      	orrs	r3, r2
 8001228:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800122a:	f7ff fbd3 	bl	80009d4 <HAL_GetTick>
 800122e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->SR1 & PWR_SR1_ACTVOSRDY) == 0U)
 8001230:	e009      	b.n	8001246 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001232:	f7ff fbcf 	bl	80009d4 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001240:	d901      	bls.n	8001246 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e020      	b.n	8001288 <HAL_PWREx_ConfigSupply+0x98>
  while ((PWR->SR1 & PWR_SR1_ACTVOSRDY) == 0U)
 8001246:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <HAL_PWREx_ConfigSupply+0xa0>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0ef      	beq.n	8001232 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b1e      	cmp	r3, #30
 8001256:	d002      	beq.n	800125e <HAL_PWREx_ConfigSupply+0x6e>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b1d      	cmp	r3, #29
 800125c:	d113      	bne.n	8001286 <HAL_PWREx_ConfigSupply+0x96>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick();
 800125e:	f7ff fbb9 	bl	80009d4 <HAL_GetTick>
 8001262:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while ((PWR->CSR2 & PWR_CSR2_SDEXTRDY) == 0U)
 8001264:	e009      	b.n	800127a <HAL_PWREx_ConfigSupply+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001266:	f7ff fbb5 	bl	80009d4 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001274:	d901      	bls.n	800127a <HAL_PWREx_ConfigSupply+0x8a>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e006      	b.n	8001288 <HAL_PWREx_ConfigSupply+0x98>
    while ((PWR->CSR2 & PWR_CSR2_SDEXTRDY) == 0U)
 800127a:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <HAL_PWREx_ConfigSupply+0xa0>)
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0ef      	beq.n	8001266 <HAL_PWREx_ConfigSupply+0x76>
      }
    }
  }
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	58024800 	.word	0x58024800

08001294 <HAL_PWREx_ControlVoltageScaling>:
  * @note When exiting from Stop mode or Standby mode, the Run mode voltage
  *       scaling is reset to the default VOS low value.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(VoltageScaling));

  /* Set the voltage range */
  MODIFY_REG(PWR->CSR4, PWR_CSR4_VOS, VoltageScaling);
 800129c:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	f023 0201 	bic.w	r2, r3, #1
 80012a4:	490e      	ldr	r1, [pc, #56]	@ (80012e0 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	614b      	str	r3, [r1, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012ac:	f7ff fb92 	bl	80009d4 <HAL_GetTick>
 80012b0:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->CSR4 & PWR_CSR4_VOSRDY) == 0U)
 80012b2:	e009      	b.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 80012b4:	f7ff fb8e 	bl	80009d4 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012c2:	d901      	bls.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x34>
    {
      return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e006      	b.n	80012d6 <HAL_PWREx_ControlVoltageScaling+0x42>
  while ((PWR->CSR4 & PWR_CSR4_VOSRDY) == 0U)
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0ef      	beq.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x20>
    }
  }

  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	58024800 	.word	0x58024800

080012e4 <HAL_PWREx_EnableXSPIM2>:
  * @note   The XSPIM_P2 supply must be stable prior to setting
            this bit.
  * @retval None.
  */
void HAL_PWREx_EnableXSPIM2(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CSR2, PWR_CSR2_EN_XSPIM2);
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <HAL_PWREx_EnableXSPIM2+0x1c>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <HAL_PWREx_EnableXSPIM2+0x1c>)
 80012ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	58024800 	.word	0x58024800

08001304 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t pllsrc;
  uint32_t pllrdy;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e328      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001316:	4b97      	ldr	r3, [pc, #604]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800131e:	61fb      	str	r3, [r7, #28]
  pllsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001320:	4b94      	ldr	r3, [pc, #592]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 8001322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	61bb      	str	r3, [r7, #24]
  pllrdy = RCC->CR & (RCC_CR_PLL1RDY | RCC_CR_PLL2RDY | RCC_CR_PLL3RDY);
 800132a:	4b92      	ldr	r3, [pc, #584]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 5328 	and.w	r3, r3, #704643072	@ 0x2a000000
 8001332:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 809c 	beq.w	800147a <HAL_RCC_OscConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	2b10      	cmp	r3, #16
 8001346:	d005      	beq.n	8001354 <HAL_RCC_OscConfig+0x50>
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d009      	beq.n	8001362 <HAL_RCC_OscConfig+0x5e>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSE)))
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d106      	bne.n	8001362 <HAL_RCC_OscConfig+0x5e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	f040 808e 	bne.w	800147a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e302      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800136a:	d106      	bne.n	800137a <HAL_RCC_OscConfig+0x76>
 800136c:	4b81      	ldr	r3, [pc, #516]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a80      	ldr	r2, [pc, #512]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 8001372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	e058      	b.n	800142c <HAL_RCC_OscConfig+0x128>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d112      	bne.n	80013a8 <HAL_RCC_OscConfig+0xa4>
 8001382:	4b7c      	ldr	r3, [pc, #496]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a7b      	ldr	r2, [pc, #492]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 8001388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b79      	ldr	r3, [pc, #484]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a78      	ldr	r2, [pc, #480]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 8001394:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4b76      	ldr	r3, [pc, #472]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a75      	ldr	r2, [pc, #468]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 80013a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e041      	b.n	800142c <HAL_RCC_OscConfig+0x128>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013b0:	d112      	bne.n	80013d8 <HAL_RCC_OscConfig+0xd4>
 80013b2:	4b70      	ldr	r3, [pc, #448]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a6f      	ldr	r2, [pc, #444]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 80013b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b6d      	ldr	r3, [pc, #436]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a6c      	ldr	r2, [pc, #432]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 80013c4:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a69      	ldr	r2, [pc, #420]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e029      	b.n	800142c <HAL_RCC_OscConfig+0x128>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 80013e0:	d112      	bne.n	8001408 <HAL_RCC_OscConfig+0x104>
 80013e2:	4b64      	ldr	r3, [pc, #400]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a63      	ldr	r2, [pc, #396]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 80013e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b61      	ldr	r3, [pc, #388]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a60      	ldr	r2, [pc, #384]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 80013f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a5d      	ldr	r2, [pc, #372]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 8001400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e011      	b.n	800142c <HAL_RCC_OscConfig+0x128>
 8001408:	4b5a      	ldr	r3, [pc, #360]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a59      	ldr	r2, [pc, #356]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 800140e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	4b57      	ldr	r3, [pc, #348]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a56      	ldr	r2, [pc, #344]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 800141a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b54      	ldr	r3, [pc, #336]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a53      	ldr	r2, [pc, #332]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 8001426:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800142a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff fad2 	bl	80009d4 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d019      	beq.n	800146e <HAL_RCC_OscConfig+0x16a>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800143c:	f7ff faca 	bl	80009d4 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	@ 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e28c      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800144e:	4b49      	ldr	r3, [pc, #292]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x138>
 800145a:	e00e      	b.n	800147a <HAL_RCC_OscConfig+0x176>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800145c:	f7ff faba 	bl	80009d4 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	@ 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x16a>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e27c      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800146e:	4b41      	ldr	r3, [pc, #260]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x158>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 809e 	beq.w	80015c4 <HAL_RCC_OscConfig+0x2c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_RCC_OscConfig+0x196>
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d047      	beq.n	8001524 <HAL_RCC_OscConfig+0x220>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSI)))
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d144      	bne.n	8001524 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e260      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
      }
      /* Otherwise, calibration is allowed, divider update also unless used for any enabled PLL */
      else
      {
        /* HSI must not be used as reference clock for any enabled PLL clock source */
        tmpreg1 = (RCC->CR & RCC_CR_HSIDIV);
 80014a6:	4b33      	ldr	r3, [pc, #204]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0318 	and.w	r3, r3, #24
 80014ae:	60fb      	str	r3, [r7, #12]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d109      	bne.n	80014ca <HAL_RCC_OscConfig+0x1c6>
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d006      	beq.n	80014ca <HAL_RCC_OscConfig+0x1c6>
            (tmpreg1 != RCC_OscInitStruct->HSIDiv))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d001      	beq.n	80014ca <HAL_RCC_OscConfig+0x1c6>
        {
          return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e24e      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
        }

        assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

        /* Set the Internal High Speed oscillator new divider */
        __HAL_RCC_HSI_CONFIG(RCC_HSI_ON | RCC_OscInitStruct->HSIDiv);
 80014ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 0219 	bic.w	r2, r3, #25
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	4a26      	ldr	r2, [pc, #152]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6013      	str	r3, [r2, #0]

        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d109      	bne.n	80014fa <HAL_RCC_OscConfig+0x1f6>
        {
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80014e6:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	08db      	lsrs	r3, r3, #3
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	4a21      	ldr	r2, [pc, #132]	@ (8001578 <HAL_RCC_OscConfig+0x274>)
 80014f2:	fa22 f303 	lsr.w	r3, r2, r3
 80014f6:	4a21      	ldr	r2, [pc, #132]	@ (800157c <HAL_RCC_OscConfig+0x278>)
 80014f8:	6013      	str	r3, [r2, #0]
        }
        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014fa:	4b21      	ldr	r3, [pc, #132]	@ (8001580 <HAL_RCC_OscConfig+0x27c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fa18 	bl	8000934 <HAL_InitTick>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x20a>
        {
          return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e22c      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
        }
      }
      /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
      __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150e:	4b19      	ldr	r3, [pc, #100]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	061b      	lsls	r3, r3, #24
 800151c:	4915      	ldr	r1, [pc, #84]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 800151e:	4313      	orrs	r3, r2
 8001520:	604b      	str	r3, [r1, #4]
 8001522:	e04f      	b.n	80015c4 <HAL_RCC_OscConfig+0x2c0>
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d032      	beq.n	8001592 <HAL_RCC_OscConfig+0x28e>
      {
        /* Enable the Internal High Speed oscillator */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState | RCC_OscInitStruct->HSIDiv);
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f023 0219 	bic.w	r2, r3, #25
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68d9      	ldr	r1, [r3, #12]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	430b      	orrs	r3, r1
 800153e:	490d      	ldr	r1, [pc, #52]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 8001540:	4313      	orrs	r3, r2
 8001542:	600b      	str	r3, [r1, #0]

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001544:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	061b      	lsls	r3, r3, #24
 8001552:	4908      	ldr	r1, [pc, #32]	@ (8001574 <HAL_RCC_OscConfig+0x270>)
 8001554:	4313      	orrs	r3, r2
 8001556:	604b      	str	r3, [r1, #4]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fa3c 	bl	80009d4 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800155e:	e011      	b.n	8001584 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001560:	f7ff fa38 	bl	80009d4 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b01      	cmp	r3, #1
 800156c:	d90a      	bls.n	8001584 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e1fa      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
 8001572:	bf00      	nop
 8001574:	58024400 	.word	0x58024400
 8001578:	03d09000 	.word	0x03d09000
 800157c:	24000000 	.word	0x24000000
 8001580:	24000004 	.word	0x24000004
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001584:	4b95      	ldr	r3, [pc, #596]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0e7      	beq.n	8001560 <HAL_RCC_OscConfig+0x25c>
 8001590:	e018      	b.n	80015c4 <HAL_RCC_OscConfig+0x2c0>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001592:	4b92      	ldr	r3, [pc, #584]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a91      	ldr	r2, [pc, #580]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 8001598:	f023 0301 	bic.w	r3, r3, #1
 800159c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159e:	f7ff fa19 	bl	80009d4 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80015a6:	f7ff fa15 	bl	80009d4 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e1d7      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b8:	4b88      	ldr	r3, [pc, #544]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f0      	bne.n	80015a6 <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d045      	beq.n	800165c <HAL_RCC_OscConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));

    /* When the CSI is used as system clock it will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d005      	beq.n	80015e2 <HAL_RCC_OscConfig+0x2de>
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <HAL_RCC_OscConfig+0x2ea>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_CSI)))
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d105      	bne.n	80015ee <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if (RCC_OscInitStruct->CSIState == RCC_CSI_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d138      	bne.n	800165c <HAL_RCC_OscConfig+0x358>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e1bc      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d019      	beq.n	800162a <HAL_RCC_OscConfig+0x326>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80015f6:	4b79      	ldr	r3, [pc, #484]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a78      	ldr	r2, [pc, #480]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 80015fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001602:	f7ff f9e7 	bl	80009d4 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x318>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800160a:	f7ff f9e3 	bl	80009d4 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b01      	cmp	r3, #1
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e1a5      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800161c:	4b6f      	ldr	r3, [pc, #444]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x306>
 8001628:	e018      	b.n	800165c <HAL_RCC_OscConfig+0x358>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800162a:	4b6c      	ldr	r3, [pc, #432]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6b      	ldr	r2, [pc, #428]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 8001630:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff f9cd 	bl	80009d4 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x34c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800163e:	f7ff f9c9 	bl	80009d4 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b01      	cmp	r3, #1
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e18b      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001650:	4b62      	ldr	r3, [pc, #392]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f0      	bne.n	800163e <HAL_RCC_OscConfig+0x33a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b00      	cmp	r3, #0
 8001666:	d036      	beq.n	80016d6 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d019      	beq.n	80016a4 <HAL_RCC_OscConfig+0x3a0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001670:	4b5a      	ldr	r3, [pc, #360]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 8001672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001674:	4a59      	ldr	r2, [pc, #356]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167c:	f7ff f9aa 	bl	80009d4 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x392>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001684:	f7ff f9a6 	bl	80009d4 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b01      	cmp	r3, #1
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x392>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e168      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001696:	4b51      	ldr	r3, [pc, #324]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 8001698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x380>
 80016a2:	e018      	b.n	80016d6 <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a4:	4b4d      	ldr	r3, [pc, #308]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 80016a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016a8:	4a4c      	ldr	r2, [pc, #304]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff f990 	bl	80009d4 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x3c6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80016b8:	f7ff f98c 	bl	80009d4 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e14e      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016ca:	4b44      	ldr	r3, [pc, #272]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 80016cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0320 	and.w	r3, r3, #32
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d036      	beq.n	8001750 <HAL_RCC_OscConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d019      	beq.n	800171e <HAL_RCC_OscConfig+0x41a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016ea:	4b3c      	ldr	r3, [pc, #240]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a3b      	ldr	r2, [pc, #236]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 80016f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016f6:	f7ff f96d 	bl	80009d4 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x40c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80016fe:	f7ff f969 	bl	80009d4 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b01      	cmp	r3, #1
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x40c>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e12b      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001710:	4b32      	ldr	r3, [pc, #200]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f0      	beq.n	80016fe <HAL_RCC_OscConfig+0x3fa>
 800171c:	e018      	b.n	8001750 <HAL_RCC_OscConfig+0x44c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800171e:	4b2f      	ldr	r3, [pc, #188]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a2e      	ldr	r2, [pc, #184]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 8001724:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001728:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800172a:	f7ff f953 	bl	80009d4 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x440>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001732:	f7ff f94f 	bl	80009d4 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b01      	cmp	r3, #1
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x440>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e111      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001744:	4b25      	ldr	r3, [pc, #148]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f0      	bne.n	8001732 <HAL_RCC_OscConfig+0x42e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 809b 	beq.w	8001894 <HAL_RCC_OscConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800175e:	4b20      	ldr	r3, [pc, #128]	@ (80017e0 <HAL_RCC_OscConfig+0x4dc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a1f      	ldr	r2, [pc, #124]	@ (80017e0 <HAL_RCC_OscConfig+0x4dc>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001768:	6013      	str	r3, [r2, #0]

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d106      	bne.n	8001780 <HAL_RCC_OscConfig+0x47c>
 8001772:	4b1a      	ldr	r3, [pc, #104]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001776:	4a19      	ldr	r2, [pc, #100]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6713      	str	r3, [r2, #112]	@ 0x70
 800177e:	e05a      	b.n	8001836 <HAL_RCC_OscConfig+0x532>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d112      	bne.n	80017ae <HAL_RCC_OscConfig+0x4aa>
 8001788:	4b14      	ldr	r3, [pc, #80]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800178c:	4a13      	ldr	r2, [pc, #76]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	6713      	str	r3, [r2, #112]	@ 0x70
 8001794:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001798:	4a10      	ldr	r2, [pc, #64]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 800179a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800179e:	6713      	str	r3, [r2, #112]	@ 0x70
 80017a0:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 80017a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a4:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 80017a6:	f023 0304 	bic.w	r3, r3, #4
 80017aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ac:	e043      	b.n	8001836 <HAL_RCC_OscConfig+0x532>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b05      	cmp	r3, #5
 80017b4:	d116      	bne.n	80017e4 <HAL_RCC_OscConfig+0x4e0>
 80017b6:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ba:	4a08      	ldr	r2, [pc, #32]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 80017c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c6:	4a05      	ldr	r2, [pc, #20]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 80017c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ce:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 80017d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d2:	4a02      	ldr	r2, [pc, #8]	@ (80017dc <HAL_RCC_OscConfig+0x4d8>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017da:	e02c      	b.n	8001836 <HAL_RCC_OscConfig+0x532>
 80017dc:	58024400 	.word	0x58024400
 80017e0:	58024800 	.word	0x58024800
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b85      	cmp	r3, #133	@ 0x85
 80017ea:	d112      	bne.n	8001812 <HAL_RCC_OscConfig+0x50e>
 80017ec:	4b60      	ldr	r3, [pc, #384]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 80017ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f0:	4a5f      	ldr	r2, [pc, #380]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017f8:	4b5d      	ldr	r3, [pc, #372]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 80017fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017fc:	4a5c      	ldr	r2, [pc, #368]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 80017fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001802:	6713      	str	r3, [r2, #112]	@ 0x70
 8001804:	4b5a      	ldr	r3, [pc, #360]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 8001806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001808:	4a59      	ldr	r2, [pc, #356]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001810:	e011      	b.n	8001836 <HAL_RCC_OscConfig+0x532>
 8001812:	4b57      	ldr	r3, [pc, #348]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001816:	4a56      	ldr	r2, [pc, #344]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	6713      	str	r3, [r2, #112]	@ 0x70
 800181e:	4b54      	ldr	r3, [pc, #336]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001822:	4a53      	ldr	r2, [pc, #332]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 8001824:	f023 0304 	bic.w	r3, r3, #4
 8001828:	6713      	str	r3, [r2, #112]	@ 0x70
 800182a:	4b51      	ldr	r3, [pc, #324]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800182e:	4a50      	ldr	r2, [pc, #320]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 8001830:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001834:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d015      	beq.n	800186a <HAL_RCC_OscConfig+0x566>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183e:	f7ff f8c9 	bl	80009d4 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001844:	e00a      	b.n	800185c <HAL_RCC_OscConfig+0x558>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f7ff f8c5 	bl	80009d4 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001854:	4293      	cmp	r3, r2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x558>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e085      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800185c:	4b44      	ldr	r3, [pc, #272]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 800185e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0ee      	beq.n	8001846 <HAL_RCC_OscConfig+0x542>
 8001868:	e014      	b.n	8001894 <HAL_RCC_OscConfig+0x590>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186a:	f7ff f8b3 	bl	80009d4 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001870:	e00a      	b.n	8001888 <HAL_RCC_OscConfig+0x584>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7ff f8af 	bl	80009d4 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001880:	4293      	cmp	r3, r2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x584>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e06f      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001888:	4b39      	ldr	r3, [pc, #228]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1ee      	bne.n	8001872 <HAL_RCC_OscConfig+0x56e>

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if (RCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001898:	2b00      	cmp	r3, #0
 800189a:	d042      	beq.n	8001922 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	2b18      	cmp	r3, #24
 80018a0:	d131      	bne.n	8001906 <HAL_RCC_OscConfig+0x602>
    {
      /* No PLL off possible */
      if (RCC_OscInitStruct->PLL1.PLLState == RCC_PLL_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_OscConfig+0x5aa>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e05c      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> RCC_PLL1FRACR_FRACN_Pos);
 80018ae:	4b30      	ldr	r3, [pc, #192]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 80018b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018b2:	08db      	lsrs	r3, r3, #3
 80018b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80018b8:	60fb      	str	r3, [r7, #12]

        if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d02e      	beq.n	8001922 <HAL_RCC_OscConfig+0x61e>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Disable PLL1FRACLE */
          __HAL_RCC_PLL1_FRACN_DISABLE();
 80018c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 80018c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c8:	4a29      	ldr	r2, [pc, #164]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 80018ca:	f023 0301 	bic.w	r3, r3, #1
 80018ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018d0:	f7ff f880 	bl	80009d4 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80018d6:	bf00      	nop
 80018d8:	f7ff f87c 	bl	80009d4 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d0f9      	beq.n	80018d8 <HAL_RCC_OscConfig+0x5d4>
          {
            /* Do nothing */
          }

          /* Configure PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 80018e4:	4b22      	ldr	r3, [pc, #136]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 80018e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018e8:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <HAL_RCC_OscConfig+0x670>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018f0:	00d2      	lsls	r2, r2, #3
 80018f2:	491f      	ldr	r1, [pc, #124]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	634b      	str	r3, [r1, #52]	@ 0x34

          /* Enable PLL1FRACLE to latch new value . */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 80018f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 80018fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001970 <HAL_RCC_OscConfig+0x66c>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001904:	e00d      	b.n	8001922 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Initialize PLL1T to 1 to use common PLL initialization function */
      RCC_OscInitStruct->PLL1.PLLT = 1U;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	645a      	str	r2, [r3, #68]	@ 0x44
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(RCC_OscInitStruct->PLL1)) != HAL_OK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3324      	adds	r3, #36	@ 0x24
 8001910:	4619      	mov	r1, r3
 8001912:	2000      	movs	r0, #0
 8001914:	f000 fc88 	bl	8002228 <RCC_PLL_Config>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e022      	b.n	8001968 <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL2.PLLState));

  if (RCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00a      	beq.n	8001940 <HAL_RCC_OscConfig+0x63c>
  {
    if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(RCC_OscInitStruct->PLL2)) != HAL_OK)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	334c      	adds	r3, #76	@ 0x4c
 800192e:	4619      	mov	r1, r3
 8001930:	2001      	movs	r0, #1
 8001932:	f000 fc79 	bl	8002228 <RCC_PLL_Config>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_RCC_OscConfig+0x63c>
    {
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e013      	b.n	8001968 <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL3.PLLState));

  if (RCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00e      	beq.n	8001966 <HAL_RCC_OscConfig+0x662>
  {
    /* Initialize PLL3T to 1 to use common PLL initialization function */
    RCC_OscInitStruct->PLL3.PLLT = 1U;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(RCC_OscInitStruct->PLL3)) != HAL_OK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3374      	adds	r3, #116	@ 0x74
 8001954:	4619      	mov	r1, r3
 8001956:	2002      	movs	r0, #2
 8001958:	f000 fc66 	bl	8002228 <RCC_PLL_Config>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x662>
    {
      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <HAL_RCC_OscConfig+0x664>
    }
  }

  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	58024400 	.word	0x58024400
 8001974:	ffff0007 	.word	0xffff0007

08001978 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e182      	b.n	8001c92 <HAL_RCC_ClockConfig+0x31a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800198c:	4b8a      	ldr	r3, [pc, #552]	@ (8001bb8 <HAL_RCC_ClockConfig+0x240>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d910      	bls.n	80019bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199a:	4b87      	ldr	r3, [pc, #540]	@ (8001bb8 <HAL_RCC_ClockConfig+0x240>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80019a2:	4985      	ldr	r1, [pc, #532]	@ (8001bb8 <HAL_RCC_ClockConfig+0x240>)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019aa:	4b83      	ldr	r3, [pc, #524]	@ (8001bb8 <HAL_RCC_ClockConfig+0x240>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e16a      	b.n	8001c92 <HAL_RCC_ClockConfig+0x31a>
  }

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d010      	beq.n	80019ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	4b7b      	ldr	r3, [pc, #492]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d908      	bls.n	80019ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80019d8:	4b78      	ldr	r3, [pc, #480]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	f023 0207 	bic.w	r2, r3, #7
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	4975      	ldr	r1, [pc, #468]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d010      	beq.n	8001a18 <HAL_RCC_ClockConfig+0xa0>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	4b70      	ldr	r3, [pc, #448]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d908      	bls.n	8001a18 <HAL_RCC_ClockConfig+0xa0>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a06:	4b6d      	ldr	r3, [pc, #436]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	496a      	ldr	r1, [pc, #424]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0310 	and.w	r3, r3, #16
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d010      	beq.n	8001a46 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699a      	ldr	r2, [r3, #24]
 8001a28:	4b64      	ldr	r3, [pc, #400]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d908      	bls.n	8001a46 <HAL_RCC_ClockConfig+0xce>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
 8001a34:	4b61      	ldr	r3, [pc, #388]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	495e      	ldr	r1, [pc, #376]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d010      	beq.n	8001a74 <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69da      	ldr	r2, [r3, #28]
 8001a56:	4b59      	ldr	r3, [pc, #356]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d908      	bls.n	8001a74 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
 8001a62:	4b56      	ldr	r3, [pc, #344]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	4953      	ldr	r1, [pc, #332]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d010      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x12a>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	4b4d      	ldr	r3, [pc, #308]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d908      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a90:	4b4a      	ldr	r3, [pc, #296]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	f023 020f 	bic.w	r2, r3, #15
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4947      	ldr	r1, [pc, #284]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61cb      	str	r3, [r1, #28]
    }
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d055      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    MODIFY_REG(RCC->CDCFGR, RCC_CDCFGR_CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001aae:	4b43      	ldr	r3, [pc, #268]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f023 020f 	bic.w	r2, r3, #15
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	4940      	ldr	r1, [pc, #256]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	618b      	str	r3, [r1, #24]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d107      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ac8:	4b3c      	ldr	r3, [pc, #240]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d121      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0dc      	b.n	8001c92 <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001ae0:	4b36      	ldr	r3, [pc, #216]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d115      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0d0      	b.n	8001c92 <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001af8:	4b30      	ldr	r3, [pc, #192]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d109      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0c4      	b.n	8001c92 <HAL_RCC_ClockConfig+0x31a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b08:	4b2c      	ldr	r3, [pc, #176]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0bc      	b.n	8001c92 <HAL_RCC_ClockConfig+0x31a>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b18:	4b28      	ldr	r3, [pc, #160]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	f023 0207 	bic.w	r2, r3, #7
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	4925      	ldr	r1, [pc, #148]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b2a:	f7fe ff53 	bl	80009d4 <HAL_GetTick>
 8001b2e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b30:	e00a      	b.n	8001b48 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001b32:	f7fe ff4f 	bl	80009d4 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e0a4      	b.n	8001c92 <HAL_RCC_ClockConfig+0x31a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b48:	4b1c      	ldr	r3, [pc, #112]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d1eb      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x1ba>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d010      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x210>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d208      	bcs.n	8001b88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f023 020f 	bic.w	r2, r3, #15
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	490e      	ldr	r1, [pc, #56]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61cb      	str	r3, [r1, #28]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <HAL_RCC_ClockConfig+0x240>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d214      	bcs.n	8001bc0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <HAL_RCC_ClockConfig+0x240>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001b9e:	4906      	ldr	r1, [pc, #24]	@ (8001bb8 <HAL_RCC_ClockConfig+0x240>)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <HAL_RCC_ClockConfig+0x240>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e06c      	b.n	8001c92 <HAL_RCC_ClockConfig+0x31a>
 8001bb8:	52002000 	.word	0x52002000
 8001bbc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d010      	beq.n	8001bee <HAL_RCC_ClockConfig+0x276>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	4b32      	ldr	r3, [pc, #200]	@ (8001c9c <HAL_RCC_ClockConfig+0x324>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d208      	bcs.n	8001bee <HAL_RCC_ClockConfig+0x276>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8001c9c <HAL_RCC_ClockConfig+0x324>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	f023 0207 	bic.w	r2, r3, #7
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	492c      	ldr	r1, [pc, #176]	@ (8001c9c <HAL_RCC_ClockConfig+0x324>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d010      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x2a4>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	4b27      	ldr	r3, [pc, #156]	@ (8001c9c <HAL_RCC_ClockConfig+0x324>)
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d208      	bcs.n	8001c1c <HAL_RCC_ClockConfig+0x2a4>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c0a:	4b24      	ldr	r3, [pc, #144]	@ (8001c9c <HAL_RCC_ClockConfig+0x324>)
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	4921      	ldr	r1, [pc, #132]	@ (8001c9c <HAL_RCC_ClockConfig+0x324>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0310 	and.w	r3, r3, #16
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d010      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699a      	ldr	r2, [r3, #24]
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <HAL_RCC_ClockConfig+0x324>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d208      	bcs.n	8001c4a <HAL_RCC_ClockConfig+0x2d2>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c38:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <HAL_RCC_ClockConfig+0x324>)
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4915      	ldr	r1, [pc, #84]	@ (8001c9c <HAL_RCC_ClockConfig+0x324>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0320 	and.w	r3, r3, #32
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d010      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x300>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69da      	ldr	r2, [r3, #28]
 8001c5a:	4b10      	ldr	r3, [pc, #64]	@ (8001c9c <HAL_RCC_ClockConfig+0x324>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d208      	bcs.n	8001c78 <HAL_RCC_ClockConfig+0x300>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
 8001c66:	4b0d      	ldr	r3, [pc, #52]	@ (8001c9c <HAL_RCC_ClockConfig+0x324>)
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	490a      	ldr	r1, [pc, #40]	@ (8001c9c <HAL_RCC_ClockConfig+0x324>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable with the System CPU clock */
  SystemCoreClock = HAL_RCC_GetSysClockFreq();
 8001c78:	f000 f816 	bl	8001ca8 <HAL_RCC_GetSysClockFreq>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4a08      	ldr	r2, [pc, #32]	@ (8001ca0 <HAL_RCC_ClockConfig+0x328>)
 8001c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001c82:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <HAL_RCC_ClockConfig+0x32c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fe54 	bl	8000934 <HAL_InitTick>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001c90:	7afb      	ldrb	r3, [r7, #11]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	24000000 	.word	0x24000000
 8001ca4:	24000004 	.word	0x24000004

08001ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b08b      	sub	sp, #44	@ 0x2c
 8001cac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t prescaler;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cae:	4baa      	ldr	r3, [pc, #680]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cb6:	2b18      	cmp	r3, #24
 8001cb8:	f200 8136 	bhi.w	8001f28 <HAL_RCC_GetSysClockFreq+0x280>
 8001cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8001cc4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc2:	bf00      	nop
 8001cc4:	08001d29 	.word	0x08001d29
 8001cc8:	08001f29 	.word	0x08001f29
 8001ccc:	08001f29 	.word	0x08001f29
 8001cd0:	08001f29 	.word	0x08001f29
 8001cd4:	08001f29 	.word	0x08001f29
 8001cd8:	08001f29 	.word	0x08001f29
 8001cdc:	08001f29 	.word	0x08001f29
 8001ce0:	08001f29 	.word	0x08001f29
 8001ce4:	08001d4f 	.word	0x08001d4f
 8001ce8:	08001f29 	.word	0x08001f29
 8001cec:	08001f29 	.word	0x08001f29
 8001cf0:	08001f29 	.word	0x08001f29
 8001cf4:	08001f29 	.word	0x08001f29
 8001cf8:	08001f29 	.word	0x08001f29
 8001cfc:	08001f29 	.word	0x08001f29
 8001d00:	08001f29 	.word	0x08001f29
 8001d04:	08001d55 	.word	0x08001d55
 8001d08:	08001f29 	.word	0x08001f29
 8001d0c:	08001f29 	.word	0x08001f29
 8001d10:	08001f29 	.word	0x08001f29
 8001d14:	08001f29 	.word	0x08001f29
 8001d18:	08001f29 	.word	0x08001f29
 8001d1c:	08001f29 	.word	0x08001f29
 8001d20:	08001f29 	.word	0x08001f29
 8001d24:	08001d5b 	.word	0x08001d5b
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */

      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8001d28:	4b8b      	ldr	r3, [pc, #556]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0320 	and.w	r3, r3, #32
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d009      	beq.n	8001d48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001d34:	4b88      	ldr	r3, [pc, #544]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	4a87      	ldr	r2, [pc, #540]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
 8001d44:	623b      	str	r3, [r7, #32]
      {
        /* Can't retrieve HSIDIV value */
        sysclockfreq = 0U;
      }

      break;
 8001d46:	e0f2      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	623b      	str	r3, [r7, #32]
      break;
 8001d4c:	e0ef      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001d4e:	4b84      	ldr	r3, [pc, #528]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x2b8>)
 8001d50:	623b      	str	r3, [r7, #32]
      break;
 8001d52:	e0ec      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001d54:	4b83      	ldr	r3, [pc, #524]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x2bc>)
 8001d56:	623b      	str	r3, [r7, #32]
      break;
 8001d58:	e0e9      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x286>
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d5a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	61fb      	str	r3, [r7, #28]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
 8001d64:	4b7c      	ldr	r3, [pc, #496]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d6e:	61bb      	str	r3, [r7, #24]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001d70:	4b79      	ldr	r3, [pc, #484]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> 3));
 8001d7a:	4b77      	ldr	r3, [pc, #476]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7e:	08db      	lsrs	r3, r3, #3
 8001d80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	ee07 3a90 	vmov	s15, r3
 8001d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d92:	edc7 7a04 	vstr	s15, [r7, #16]

      if (pllm != 0U)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80c2 	beq.w	8001f22 <HAL_RCC_GetSysClockFreq+0x27a>
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d064      	beq.n	8001e6e <HAL_RCC_GetSysClockFreq+0x1c6>
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	f200 8083 	bhi.w	8001eb2 <HAL_RCC_GetSysClockFreq+0x20a>
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x112>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d038      	beq.n	8001e2a <HAL_RCC_GetSysClockFreq+0x182>
 8001db8:	e07b      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x20a>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8001dba:	4b67      	ldr	r3, [pc, #412]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0320 	and.w	r3, r3, #32
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d02d      	beq.n	8001e22 <HAL_RCC_GetSysClockFreq+0x17a>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001dc6:	4b64      	ldr	r3, [pc, #400]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	08db      	lsrs	r3, r3, #3
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	4a62      	ldr	r2, [pc, #392]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd6:	60fb      	str	r3, [r7, #12]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	ee07 3a90 	vmov	s15, r3
 8001de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001df0:	4b59      	ldr	r3, [pc, #356]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001df8:	ee07 3a90 	vmov	s15, r3
 8001dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e00:	ed97 6a04 	vldr	s12, [r7, #16]
 8001e04:	eddf 5a58 	vldr	s11, [pc, #352]	@ 8001f68 <HAL_RCC_GetSysClockFreq+0x2c0>
 8001e08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            else
            {
              /* Can't retrieve HSIDIV value */
              pllvco = (float_t)0;
            }
            break;
 8001e20:	e069      	b.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x24e>
              pllvco = (float_t)0;
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e28:	e065      	b.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	ee07 3a90 	vmov	s15, r3
 8001e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e34:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8001f6c <HAL_RCC_GetSysClockFreq+0x2c4>
 8001e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e3c:	4b46      	ldr	r3, [pc, #280]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e4c:	ed97 6a04 	vldr	s12, [r7, #16]
 8001e50:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8001f68 <HAL_RCC_GetSysClockFreq+0x2c0>
 8001e54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e68:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8001e6c:	e043      	b.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	ee07 3a90 	vmov	s15, r3
 8001e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e78:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8001f70 <HAL_RCC_GetSysClockFreq+0x2c8>
 8001e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e80:	4b35      	ldr	r3, [pc, #212]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e88:	ee07 3a90 	vmov	s15, r3
 8001e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e90:	ed97 6a04 	vldr	s12, [r7, #16]
 8001e94:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8001f68 <HAL_RCC_GetSysClockFreq+0x2c0>
 8001e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ea0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8001eb0:	e021      	b.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x24e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	ee07 3a90 	vmov	s15, r3
 8001eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ebc:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001f6c <HAL_RCC_GetSysClockFreq+0x2c4>
 8001ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ec4:	4b24      	ldr	r3, [pc, #144]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ecc:	ee07 3a90 	vmov	s15, r3
 8001ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ed4:	ed97 6a04 	vldr	s12, [r7, #16]
 8001ed8:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8001f68 <HAL_RCC_GetSysClockFreq+0x2c0>
 8001edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ee4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8001ef4:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U) ;
 8001ef6:	4b18      	ldr	r3, [pc, #96]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	0a5b      	lsrs	r3, r3, #9
 8001efc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f00:	3301      	adds	r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f0e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f1a:	ee17 3a90 	vmov	r3, s15
 8001f1e:	623b      	str	r3, [r7, #32]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001f20:	e005      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	623b      	str	r3, [r7, #32]
      break;
 8001f26:	e002      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x286>

    default:
      sysclockfreq = CSI_VALUE;
 8001f28:	4b0d      	ldr	r3, [pc, #52]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x2b8>)
 8001f2a:	623b      	str	r3, [r7, #32]
      break;
 8001f2c:	bf00      	nop
  }

  prescaler = RCC->CDCFGR & RCC_CDCFGR_CPRE;
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	607b      	str	r3, [r7, #4]
  if (prescaler >= 8U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b07      	cmp	r3, #7
 8001f3c:	d905      	bls.n	8001f4a <HAL_RCC_GetSysClockFreq+0x2a2>
  {
    sysclockfreq = sysclockfreq >> (prescaler - RCC_CDCFGR_CPRE_3 + 1U);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3b07      	subs	r3, #7
 8001f42:	6a3a      	ldr	r2, [r7, #32]
 8001f44:	fa22 f303 	lsr.w	r3, r2, r3
 8001f48:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	372c      	adds	r7, #44	@ 0x2c
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	58024400 	.word	0x58024400
 8001f5c:	03d09000 	.word	0x03d09000
 8001f60:	003d0900 	.word	0x003d0900
 8001f64:	016e3600 	.word	0x016e3600
 8001f68:	46000000 	.word	0x46000000
 8001f6c:	4a742400 	.word	0x4a742400
 8001f70:	4bb71b00 	.word	0x4bb71b00

08001f74 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  const uint8_t AHBPrescTable[8] = {1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
 8001f7a:	4a10      	ldr	r2, [pc, #64]	@ (8001fbc <HAL_RCC_GetHCLKFreq+0x48>)
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f82:	e883 0003 	stmia.w	r3, {r0, r1}

  /* SysClk */
  clock = HAL_RCC_GetSysClockFreq();
 8001f86:	f7ff fe8f 	bl	8001ca8 <HAL_RCC_GetSysClockFreq>
 8001f8a:	60f8      	str	r0, [r7, #12]
  /* Bus matrix divider */
  prescaler = (RCC->BMCFGR & RCC_BMCFGR_BMPRE) >> RCC_BMCFGR_BMPRE_Pos;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <HAL_RCC_GetHCLKFreq+0x4c>)
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	60bb      	str	r3, [r7, #8]
  if (prescaler >= 8U)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b07      	cmp	r3, #7
 8001f9a:	d909      	bls.n	8001fb0 <HAL_RCC_GetHCLKFreq+0x3c>
  {
    clock = clock >> AHBPrescTable[prescaler - 8U];
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	3b08      	subs	r3, #8
 8001fa0:	3310      	adds	r3, #16
 8001fa2:	443b      	add	r3, r7
 8001fa4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	40d3      	lsrs	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
  }
  return (clock);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	08008574 	.word	0x08008574
 8001fc0:	58024400 	.word	0x58024400

08001fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK1 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 8001fca:	f7ff ffd3 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001fce:	6078      	str	r0, [r7, #4]
  /* APB1 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE1) >> RCC_APBCFGR_PPRE1_Pos;
 8001fd0:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <HAL_RCC_GetPCLK1Freq+0x34>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d905      	bls.n	8001fec <HAL_RCC_GetPCLK1Freq+0x28>
  {
    clock = clock >> (prescaler - 3U);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	3b03      	subs	r3, #3
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fea:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 8001fec:	687b      	ldr	r3, [r7, #4]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	58024400 	.word	0x58024400

08001ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK2 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 8002002:	f7ff ffb7 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8002006:	6078      	str	r0, [r7, #4]
  /* APB2 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE2) >> RCC_APBCFGR_PPRE2_Pos;
 8002008:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <HAL_RCC_GetPCLK2Freq+0x34>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d905      	bls.n	8002026 <HAL_RCC_GetPCLK2Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	3b03      	subs	r3, #3
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	fa22 f303 	lsr.w	r3, r2, r3
 8002024:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 8002026:	687b      	ldr	r3, [r7, #4]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	58024400 	.word	0x58024400

08002034 <HAL_RCC_GetPCLK4Freq>:
  * @note   Each time PCLK4 changes, this function must be called to update the
  *         right PCLK4 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK4 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK4Freq(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK4 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 800203a:	f7ff ff9b 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 800203e:	6078      	str	r0, [r7, #4]
  /* APB4 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE4) >> RCC_APBCFGR_PPRE4_Pos;
 8002040:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <HAL_RCC_GetPCLK4Freq+0x34>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	2b03      	cmp	r3, #3
 8002050:	d905      	bls.n	800205e <HAL_RCC_GetPCLK4Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	3b03      	subs	r3, #3
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	fa22 f303 	lsr.w	r3, r2, r3
 800205c:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 800205e:	687b      	ldr	r3, [r7, #4]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	58024400 	.word	0x58024400

0800206c <HAL_RCC_GetPLL1QFreq>:
/**
  * @brief  Return the PLL1Q frequency.
  * @retval PLL1Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL1QFreq(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL1Q divider */
  pllq = ((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVQ) >> RCC_PLL1DIVR1_DIVQ_Pos) + 1U;
 8002072:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <HAL_RCC_GetPLL1QFreq+0x28>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	0c1b      	lsrs	r3, r3, #16
 8002078:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800207c:	3301      	adds	r3, #1
 800207e:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL1Q one */
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllq);
 8002080:	f000 fa28 	bl	80024d4 <RCC_PLL1_GetVCOOutputFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	58024400 	.word	0x58024400

08002098 <HAL_RCC_GetPLL2PFreq>:
/**
  * @brief  Return the PLL2P frequency.
  * @retval PLL2P frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2PFreq(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
  uint32_t pllp;

  /* PLL2P divider */
  pllp = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVP) >> RCC_PLL2DIVR1_DIVP_Pos) + 1U;
 800209e:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <HAL_RCC_GetPLL2PFreq+0x28>)
 80020a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a2:	0a5b      	lsrs	r3, r3, #9
 80020a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020a8:	3301      	adds	r3, #1
 80020aa:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2P one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllp);
 80020ac:	f000 fa98 	bl	80025e0 <RCC_PLL2_GetVCOOutputFreq>
 80020b0:	4602      	mov	r2, r0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	58024400 	.word	0x58024400

080020c4 <HAL_RCC_GetPLL2QFreq>:
/**
  * @brief  Return the PLL2Q frequency.
  * @retval PLL2Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2QFreq(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL2Q divider */
  pllq = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVQ) >> RCC_PLL2DIVR1_DIVQ_Pos) + 1U;
 80020ca:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <HAL_RCC_GetPLL2QFreq+0x28>)
 80020cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020d4:	3301      	adds	r3, #1
 80020d6:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2Q one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllq);
 80020d8:	f000 fa82 	bl	80025e0 <RCC_PLL2_GetVCOOutputFreq>
 80020dc:	4602      	mov	r2, r0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	58024400 	.word	0x58024400

080020f0 <HAL_RCC_GetPLL2RFreq>:
/**
  * @brief  Return the PLL2R frequency.
  * @retval PLL2R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2RFreq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL2R divider */
  pllr = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVR) >> RCC_PLL2DIVR1_DIVR_Pos) + 1U;
 80020f6:	4b08      	ldr	r3, [pc, #32]	@ (8002118 <HAL_RCC_GetPLL2RFreq+0x28>)
 80020f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020fa:	0e1b      	lsrs	r3, r3, #24
 80020fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002100:	3301      	adds	r3, #1
 8002102:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2R one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllr);
 8002104:	f000 fa6c 	bl	80025e0 <RCC_PLL2_GetVCOOutputFreq>
 8002108:	4602      	mov	r2, r0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	58024400 	.word	0x58024400

0800211c <HAL_RCC_GetPLL2SFreq>:
/**
  * @brief  Return the PLL2S frequency.
  * @retval PLL2S frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2SFreq(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
  uint32_t plls;

  /* PLL2S divider */
  plls = ((RCC->PLL2DIVR2 & RCC_PLL2DIVR2_DIVS) >> RCC_PLL2DIVR2_DIVS_Pos) + 1U;
 8002122:	4b08      	ldr	r3, [pc, #32]	@ (8002144 <HAL_RCC_GetPLL2SFreq+0x28>)
 8002124:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	3301      	adds	r3, #1
 800212e:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2R one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / plls);
 8002130:	f000 fa56 	bl	80025e0 <RCC_PLL2_GetVCOOutputFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	58024400 	.word	0x58024400

08002148 <HAL_RCC_GetPLL2TFreq>:
/**
  * @brief  Return the PLL2T frequency.
  * @retval PLL2T frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2TFreq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
  uint32_t pllt;

  /* PLL2T divider */
  pllt = ((RCC->PLL2DIVR2 & RCC_PLL2DIVR2_DIVT) >> RCC_PLL2DIVR2_DIVT_Pos) + 1U;
 800214e:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <HAL_RCC_GetPLL2TFreq+0x2c>)
 8002150:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	3301      	adds	r3, #1
 800215c:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2T one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllt);
 800215e:	f000 fa3f 	bl	80025e0 <RCC_PLL2_GetVCOOutputFreq>
 8002162:	4602      	mov	r2, r0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	58024400 	.word	0x58024400

08002178 <HAL_RCC_GetPLL3PFreq>:
/**
  * @brief  Return the PLL3P frequency.
  * @retval PLL3P frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3PFreq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
  uint32_t pllp;

  /* PLL3P divider */
  pllp = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVP) >> RCC_PLL3DIVR1_DIVP_Pos) + 1U;
 800217e:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <HAL_RCC_GetPLL3PFreq+0x28>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	0a5b      	lsrs	r3, r3, #9
 8002184:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002188:	3301      	adds	r3, #1
 800218a:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3P one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllp);
 800218c:	f000 faae 	bl	80026ec <RCC_PLL3_GetVCOOutputFreq>
 8002190:	4602      	mov	r2, r0
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	58024400 	.word	0x58024400

080021a4 <HAL_RCC_GetPLL3QFreq>:
/**
  * @brief  Return the PLL3Q frequency.
  * @retval PLL3Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3QFreq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL3Q divider */
  pllq = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVQ) >> RCC_PLL3DIVR1_DIVQ_Pos) + 1U;
 80021aa:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <HAL_RCC_GetPLL3QFreq+0x28>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	0c1b      	lsrs	r3, r3, #16
 80021b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021b4:	3301      	adds	r3, #1
 80021b6:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3Q one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllq);
 80021b8:	f000 fa98 	bl	80026ec <RCC_PLL3_GetVCOOutputFreq>
 80021bc:	4602      	mov	r2, r0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	58024400 	.word	0x58024400

080021d0 <HAL_RCC_GetPLL3RFreq>:
/**
  * @brief  Return the PLL3R frequency.
  * @retval PLL3R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3RFreq(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL3R divider */
  pllr = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVR) >> RCC_PLL3DIVR1_DIVR_Pos) + 1U;
 80021d6:	4b08      	ldr	r3, [pc, #32]	@ (80021f8 <HAL_RCC_GetPLL3RFreq+0x28>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	0e1b      	lsrs	r3, r3, #24
 80021dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021e0:	3301      	adds	r3, #1
 80021e2:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3R one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllr);
 80021e4:	f000 fa82 	bl	80026ec <RCC_PLL3_GetVCOOutputFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	58024400 	.word	0x58024400

080021fc <HAL_RCC_GetPLL3SFreq>:
/**
  * @brief  Return the PLL3S frequency.
  * @retval PLL3S frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3SFreq(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
  uint32_t plls;

  /* PLL3S divider */
  plls = ((RCC->PLL3DIVR2 & RCC_PLL3DIVR2_DIVS) >> RCC_PLL3DIVR2_DIVS_Pos) + 1U;
 8002202:	4b08      	ldr	r3, [pc, #32]	@ (8002224 <HAL_RCC_GetPLL3SFreq+0x28>)
 8002204:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	3301      	adds	r3, #1
 800220e:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3S one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / plls);
 8002210:	f000 fa6c 	bl	80026ec <RCC_PLL3_GetVCOOutputFreq>
 8002214:	4602      	mov	r2, r0
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	58024400 	.word	0x58024400

08002228 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	@ 0x28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_divr1_reg;
  __IO uint32_t *p_rcc_pll_divr2_reg;
  __IO uint32_t *p_rcc_pll_fracr_reg;
  HAL_StatusTypeDef ret = HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tickstart;
  uint32_t pllsrc;
  uint32_t pllvco;

  p_rcc_pll_divr1_reg = &(RCC->PLL1DIVR1) + (((uint32_t)0x02) * PLLnumber);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	00da      	lsls	r2, r3, #3
 800223c:	4b9a      	ldr	r3, [pc, #616]	@ (80024a8 <RCC_PLL_Config+0x280>)
 800223e:	4413      	add	r3, r2
 8002240:	61fb      	str	r3, [r7, #28]
  p_rcc_pll_divr2_reg = &(RCC->PLL1DIVR2) + (((uint32_t)0x01) * PLLnumber);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	009a      	lsls	r2, r3, #2
 8002246:	4b99      	ldr	r3, [pc, #612]	@ (80024ac <RCC_PLL_Config+0x284>)
 8002248:	4413      	add	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]

  /* Disable the post-dividers */
  CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1PEN | RCC_PLLCFGR_PLL1QEN | RCC_PLLCFGR_PLL1REN | RCC_PLLCFGR_PLL1SEN |
 800224c:	4b98      	ldr	r3, [pc, #608]	@ (80024b0 <RCC_PLL_Config+0x288>)
 800224e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	4a92      	ldr	r2, [pc, #584]	@ (80024b0 <RCC_PLL_Config+0x288>)
 8002268:	400b      	ands	r3, r1
 800226a:	62d3      	str	r3, [r2, #44]	@ 0x2c
                           0x00000200U) /* Hardcoded because no definition in CMSIS */
            << ((RCC_PLLCFGR_PLL2PEN_Pos - RCC_PLLCFGR_PLL1PEN_Pos)*PLLnumber));

  /* Ensure PLLx is disabled */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
 800226c:	4b90      	ldr	r3, [pc, #576]	@ (80024b0 <RCC_PLL_Config+0x288>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	498c      	ldr	r1, [pc, #560]	@ (80024b0 <RCC_PLL_Config+0x288>)
 8002280:	4013      	ands	r3, r2
 8002282:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002284:	f7fe fba6 	bl	80009d4 <HAL_GetTick>
 8002288:	6178      	str	r0, [r7, #20]

  /* Wait till PLLx is disabled */
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
 800228a:	e008      	b.n	800229e <RCC_PLL_Config+0x76>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800228c:	f7fe fba2 	bl	80009d4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b32      	cmp	r3, #50	@ 0x32
 8002298:	d901      	bls.n	800229e <RCC_PLL_Config+0x76>
    {
      return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e0ff      	b.n	800249e <RCC_PLL_Config+0x276>
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
 800229e:	4b84      	ldr	r3, [pc, #528]	@ (80024b0 <RCC_PLL_Config+0x288>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1eb      	bne.n	800228c <RCC_PLL_Config+0x64>
    }
  }

  if (pPLLInit->PLLState == RCC_PLL_ON)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	f040 80dd 	bne.w	8002478 <RCC_PLL_Config+0x250>
    assert_param(IS_RCC_PLLQ_VALUE(pPLLInit->PLLQ));
    assert_param(IS_RCC_PLLR_VALUE(pPLLInit->PLLR));
    assert_param(IS_RCC_PLLS_VALUE(pPLLInit->PLLS));
    assert_param(IS_RCC_PLLT_VALUE(pPLLInit->PLLT));

    pllsrc = pPLLInit->PLLSource;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	613b      	str	r3, [r7, #16]

    /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
    if (pllsrc == RCC_PLLSOURCE_HSI)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <RCC_PLL_Config+0xb6>
    {
      /* Clock source is HSI or HSI/HSIDIV */
      pllvco = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 80022ca:	4b79      	ldr	r3, [pc, #484]	@ (80024b0 <RCC_PLL_Config+0x288>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	08db      	lsrs	r3, r3, #3
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	4a77      	ldr	r2, [pc, #476]	@ (80024b4 <RCC_PLL_Config+0x28c>)
 80022d6:	fa22 f303 	lsr.w	r3, r2, r3
 80022da:	627b      	str	r3, [r7, #36]	@ 0x24
 80022dc:	e007      	b.n	80022ee <RCC_PLL_Config+0xc6>
    }
    else if (pllsrc == RCC_PLLSOURCE_HSE)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d102      	bne.n	80022ea <RCC_PLL_Config+0xc2>
    {
      /* Clock source is HSE */
      pllvco = HSE_VALUE;
 80022e4:	4b74      	ldr	r3, [pc, #464]	@ (80024b8 <RCC_PLL_Config+0x290>)
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80022e8:	e001      	b.n	80022ee <RCC_PLL_Config+0xc6>
    }
    else
    {
      /* Clock source is CSI */
      pllvco = CSI_VALUE;
 80022ea:	4b74      	ldr	r3, [pc, #464]	@ (80024bc <RCC_PLL_Config+0x294>)
 80022ec:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Compute VCO input frequency depending on M divider */
    pllvco = (pllvco / pPLLInit->PLLM);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24
    assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllvco));

    if (pllvco >= RCC_PLL_INPUTRANGE2_FREQMAX)
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	4a70      	ldr	r2, [pc, #448]	@ (80024c0 <RCC_PLL_Config+0x298>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d302      	bcc.n	8002308 <RCC_PLL_Config+0xe0>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE3 | RCC_PLL_VCO_HIGH;
 8002302:	2318      	movs	r3, #24
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
 8002306:	e00f      	b.n	8002328 <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE1_FREQMAX)
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	4a6e      	ldr	r2, [pc, #440]	@ (80024c4 <RCC_PLL_Config+0x29c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d902      	bls.n	8002316 <RCC_PLL_Config+0xee>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE2 | RCC_PLL_VCO_HIGH;
 8002310:	2310      	movs	r3, #16
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
 8002314:	e008      	b.n	8002328 <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE0_FREQMAX)
 8002316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002318:	4a6b      	ldr	r2, [pc, #428]	@ (80024c8 <RCC_PLL_Config+0x2a0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d902      	bls.n	8002324 <RCC_PLL_Config+0xfc>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE1 | RCC_PLL_VCO_HIGH;
 800231e:	2308      	movs	r3, #8
 8002320:	627b      	str	r3, [r7, #36]	@ 0x24
 8002322:	e001      	b.n	8002328 <RCC_PLL_Config+0x100>
    }
    else
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE0 | RCC_PLL_VCO_LOW;
 8002324:	2302      	movs	r3, #2
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    pllvco = (pllvco << ((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos) * PLLnumber));
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Configure PLL source and PLLM divider */
    MODIFY_REG(RCC->PLLCKSELR, (RCC_PLLCKSELR_PLLSRC | (RCC_PLLCKSELR_DIVM1 << ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))), \
 800233c:	4b5c      	ldr	r3, [pc, #368]	@ (80024b0 <RCC_PLL_Config+0x288>)
 800233e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	f043 0303 	orr.w	r3, r3, #3
 8002350:	43db      	mvns	r3, r3
 8002352:	401a      	ands	r2, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	6899      	ldr	r1, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	3304      	adds	r3, #4
 800235e:	4099      	lsls	r1, r3
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	430b      	orrs	r3, r1
 8002364:	4952      	ldr	r1, [pc, #328]	@ (80024b0 <RCC_PLL_Config+0x288>)
 8002366:	4313      	orrs	r3, r2
 8002368:	628b      	str	r3, [r1, #40]	@ 0x28
               pllsrc | (pPLLInit->PLLM << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))));

    if ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) != pllsrc)
 800236a:	4b51      	ldr	r3, [pc, #324]	@ (80024b0 <RCC_PLL_Config+0x288>)
 800236c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <RCC_PLL_Config+0x154>
    {
      /* There is another PLL activated with another source */
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e090      	b.n	800249e <RCC_PLL_Config+0x276>
    }

    /* Configure VCO input range, VCO selection and clear FRACEN */
    MODIFY_REG(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1RGE | RCC_PLLCFGR_PLL1VCOSEL | RCC_PLLCFGR_PLL1FRACEN) << (((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos)*PLLnumber)), \
 800237c:	4b4c      	ldr	r3, [pc, #304]	@ (80024b0 <RCC_PLL_Config+0x288>)
 800237e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	221b      	movs	r2, #27
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	ea01 0203 	and.w	r2, r1, r3
 8002398:	4945      	ldr	r1, [pc, #276]	@ (80024b0 <RCC_PLL_Config+0x288>)
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	4313      	orrs	r3, r2
 800239e:	62cb      	str	r3, [r1, #44]	@ 0x2c
               pllvco);

    /* Configure PLLN, PLLP, PLLQ, PLLR, PLLS and PLLT dividers */
    WRITE_REG(*p_rcc_pll_divr1_reg, ((pPLLInit->PLLN - 1U) |
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	1e5a      	subs	r2, r3, #1
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	025b      	lsls	r3, r3, #9
 80023ae:	431a      	orrs	r2, r3
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	041b      	lsls	r3, r3, #16
 80023b8:	431a      	orrs	r2, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	3b01      	subs	r3, #1
 80023c0:	061b      	lsls	r3, r3, #24
 80023c2:	431a      	orrs	r2, r3
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLP - 1U) << RCC_PLL1DIVR1_DIVP_Pos) |
                                     ((pPLLInit->PLLQ - 1U) << RCC_PLL1DIVR1_DIVQ_Pos) |
                                     ((pPLLInit->PLLR - 1U) << RCC_PLL1DIVR1_DIVR_Pos)));
    WRITE_REG(*p_rcc_pll_divr2_reg, ((pPLLInit->PLLS - 1U) |
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	1e5a      	subs	r2, r3, #1
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	431a      	orrs	r2, r3
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLT - 1U) << RCC_PLL2DIVR2_DIVT_Pos)));

    if (PLLnumber == RCC_PLL1_CONFIG)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d105      	bne.n	80023ee <RCC_PLL_Config+0x1c6>
    {
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1PEN);
 80023e2:	4b33      	ldr	r3, [pc, #204]	@ (80024b0 <RCC_PLL_Config+0x288>)
 80023e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e6:	4a32      	ldr	r2, [pc, #200]	@ (80024b0 <RCC_PLL_Config+0x288>)
 80023e8:	f043 0320 	orr.w	r3, r3, #32
 80023ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    if (pPLLInit->PLLFractional != 0U)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01c      	beq.n	8002430 <RCC_PLL_Config+0x208>
    {
      assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));

      p_rcc_pll_fracr_reg = &(RCC->PLL1FRACR) + (((uint32_t)0x02) * PLLnumber);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	00da      	lsls	r2, r3, #3
 80023fa:	4b34      	ldr	r3, [pc, #208]	@ (80024cc <RCC_PLL_Config+0x2a4>)
 80023fc:	4413      	add	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]

      /* Configure PLLFRACN */
      MODIFY_REG(*p_rcc_pll_fracr_reg, RCC_PLL1FRACR_FRACN, pPLLInit->PLLFractional << RCC_PLL1FRACR_FRACN_Pos);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b32      	ldr	r3, [pc, #200]	@ (80024d0 <RCC_PLL_Config+0x2a8>)
 8002406:	4013      	ands	r3, r2
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800240c:	00d2      	lsls	r2, r2, #3
 800240e:	431a      	orrs	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	601a      	str	r2, [r3, #0]

      /* Enable PLLFRACLE */
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN << ((RCC_PLLCFGR_PLL2FRACEN_Pos - RCC_PLLCFGR_PLL1FRACEN_Pos)*PLLnumber));
 8002414:	4b26      	ldr	r3, [pc, #152]	@ (80024b0 <RCC_PLL_Config+0x288>)
 8002416:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4413      	add	r3, r2
 8002424:	2201      	movs	r2, #1
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	4a21      	ldr	r2, [pc, #132]	@ (80024b0 <RCC_PLL_Config+0x288>)
 800242c:	430b      	orrs	r3, r1
 800242e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable the PLLx */
    SET_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
 8002430:	4b1f      	ldr	r3, [pc, #124]	@ (80024b0 <RCC_PLL_Config+0x288>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	491b      	ldr	r1, [pc, #108]	@ (80024b0 <RCC_PLL_Config+0x288>)
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002446:	f7fe fac5 	bl	80009d4 <HAL_GetTick>
 800244a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
 800244c:	e008      	b.n	8002460 <RCC_PLL_Config+0x238>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800244e:	f7fe fac1 	bl	80009d4 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b32      	cmp	r3, #50	@ 0x32
 800245a:	d901      	bls.n	8002460 <RCC_PLL_Config+0x238>
      {
        return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e01e      	b.n	800249e <RCC_PLL_Config+0x276>
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
 8002460:	4b13      	ldr	r3, [pc, #76]	@ (80024b0 <RCC_PLL_Config+0x288>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0eb      	beq.n	800244e <RCC_PLL_Config+0x226>
 8002476:	e010      	b.n	800249a <RCC_PLL_Config+0x272>
    }
  }
  else
  {
    /* Disable outputs to save power when PLLx is off */
    MODIFY_REG(RCC->PLLCKSELR, ((RCC_PLLCKSELR_DIVM1 << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber)))
 8002478:	4b0d      	ldr	r3, [pc, #52]	@ (80024b0 <RCC_PLL_Config+0x288>)
 800247a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	3304      	adds	r3, #4
 8002482:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	f043 0303 	orr.w	r3, r3, #3
 800248e:	43db      	mvns	r3, r3
 8002490:	4013      	ands	r3, r2
 8002492:	4a07      	ldr	r2, [pc, #28]	@ (80024b0 <RCC_PLL_Config+0x288>)
 8002494:	f043 0303 	orr.w	r3, r3, #3
 8002498:	6293      	str	r3, [r2, #40]	@ 0x28
                                | RCC_PLLCKSELR_PLLSRC), RCC_PLLSOURCE_NONE);
  }

  return ret;
 800249a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3728      	adds	r7, #40	@ 0x28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	58024430 	.word	0x58024430
 80024ac:	580244c0 	.word	0x580244c0
 80024b0:	58024400 	.word	0x58024400
 80024b4:	03d09000 	.word	0x03d09000
 80024b8:	016e3600 	.word	0x016e3600
 80024bc:	003d0900 	.word	0x003d0900
 80024c0:	007a1200 	.word	0x007a1200
 80024c4:	003d08ff 	.word	0x003d08ff
 80024c8:	001e847f 	.word	0x001e847f
 80024cc:	58024434 	.word	0x58024434
 80024d0:	ffff0007 	.word	0xffff0007

080024d4 <RCC_PLL1_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL1 VCO output frequency
  * @retval Value of PLL1 VCO output frequency
  */
static uint32_t RCC_PLL1_GetVCOOutputFreq(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	@ 0x24
 80024d8:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL1 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 80024da:	4b3c      	ldr	r3, [pc, #240]	@ (80025cc <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 80024dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024de:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL1DIVR1;
 80024e0:	4b3a      	ldr	r3, [pc, #232]	@ (80025cc <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 80024e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e4:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL1 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024ee:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL1DIVR1_DIVN) + 1U;
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f6:	3301      	adds	r3, #1
 80024f8:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <RCC_PLL1_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	e05c      	b.n	80025be <RCC_PLL1_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) != 0U)
 8002504:	4b31      	ldr	r3, [pc, #196]	@ (80025cc <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 8002506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d006      	beq.n	800251e <RCC_PLL1_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> RCC_PLL1FRACR_FRACN_Pos;
 8002510:	4b2e      	ldr	r3, [pc, #184]	@ (80025cc <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 8002512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002514:	08db      	lsrs	r3, r3, #3
 8002516:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800251a:	61bb      	str	r3, [r7, #24]
 800251c:	e001      	b.n	8002522 <RCC_PLL1_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d019      	beq.n	8002560 <RCC_PLL1_GetVCOOutputFreq+0x8c>
 800252c:	2b02      	cmp	r3, #2
 800252e:	d81d      	bhi.n	800256c <RCC_PLL1_GetVCOOutputFreq+0x98>
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <RCC_PLL1_GetVCOOutputFreq+0x66>
 8002534:	2b01      	cmp	r3, #1
 8002536:	d016      	beq.n	8002566 <RCC_PLL1_GetVCOOutputFreq+0x92>
 8002538:	e018      	b.n	800256c <RCC_PLL1_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL1 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800253a:	4b24      	ldr	r3, [pc, #144]	@ (80025cc <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d009      	beq.n	800255a <RCC_PLL1_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 8002546:	4b21      	ldr	r3, [pc, #132]	@ (80025cc <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	08db      	lsrs	r3, r3, #3
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	4a1f      	ldr	r2, [pc, #124]	@ (80025d0 <RCC_PLL1_GetVCOOutputFreq+0xfc>)
 8002552:	fa22 f303 	lsr.w	r3, r2, r3
 8002556:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 8002558:	e00b      	b.n	8002572 <RCC_PLL1_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
      break;
 800255e:	e008      	b.n	8002572 <RCC_PLL1_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL1 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 8002560:	4b1c      	ldr	r3, [pc, #112]	@ (80025d4 <RCC_PLL1_GetVCOOutputFreq+0x100>)
 8002562:	61fb      	str	r3, [r7, #28]
      break;
 8002564:	e005      	b.n	8002572 <RCC_PLL1_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL1 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 8002566:	4b1c      	ldr	r3, [pc, #112]	@ (80025d8 <RCC_PLL1_GetVCOOutputFreq+0x104>)
 8002568:	61fb      	str	r3, [r7, #28]
      break;
 800256a:	e002      	b.n	8002572 <RCC_PLL1_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
      break;
 8002570:	bf00      	nop
  }
  
  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	ee07 3a90 	vmov	s15, r3
 8002578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	ee07 3a90 	vmov	s15, r3
 8002590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	ee07 3a90 	vmov	s15, r3
 800259a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800259e:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 80025dc <RCC_PLL1_GetVCOOutputFreq+0x108>
 80025a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ae:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 80025b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ba:	ee17 3a90 	vmov	r3, s15
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3724      	adds	r7, #36	@ 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	58024400 	.word	0x58024400
 80025d0:	03d09000 	.word	0x03d09000
 80025d4:	016e3600 	.word	0x016e3600
 80025d8:	003d0900 	.word	0x003d0900
 80025dc:	46000000 	.word	0x46000000

080025e0 <RCC_PLL2_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL2 VCO output frequency
  * @retval Value of PLL2 VCO output frequency
  */
static uint32_t RCC_PLL2_GetVCOOutputFreq(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	@ 0x24
 80025e4:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL2 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 80025e6:	4b3c      	ldr	r3, [pc, #240]	@ (80026d8 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 80025e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ea:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL2DIVR1;
 80025ec:	4b3a      	ldr	r3, [pc, #232]	@ (80026d8 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 80025ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f0:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL2 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM2) >> RCC_PLLCKSELR_DIVM2_Pos;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	0b1b      	lsrs	r3, r3, #12
 80025f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025fa:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL2DIVR1_DIVN) + 1U;
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002602:	3301      	adds	r3, #1
 8002604:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <RCC_PLL2_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	e05c      	b.n	80026ca <RCC_PLL2_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) != 0U)
 8002610:	4b31      	ldr	r3, [pc, #196]	@ (80026d8 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002618:	2b00      	cmp	r3, #0
 800261a:	d006      	beq.n	800262a <RCC_PLL2_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN) >> RCC_PLL2FRACR_FRACN_Pos;
 800261c:	4b2e      	ldr	r3, [pc, #184]	@ (80026d8 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 800261e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002620:	08db      	lsrs	r3, r3, #3
 8002622:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	e001      	b.n	800262e <RCC_PLL2_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d019      	beq.n	800266c <RCC_PLL2_GetVCOOutputFreq+0x8c>
 8002638:	2b02      	cmp	r3, #2
 800263a:	d81d      	bhi.n	8002678 <RCC_PLL2_GetVCOOutputFreq+0x98>
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <RCC_PLL2_GetVCOOutputFreq+0x66>
 8002640:	2b01      	cmp	r3, #1
 8002642:	d016      	beq.n	8002672 <RCC_PLL2_GetVCOOutputFreq+0x92>
 8002644:	e018      	b.n	8002678 <RCC_PLL2_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL2 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002646:	4b24      	ldr	r3, [pc, #144]	@ (80026d8 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0320 	and.w	r3, r3, #32
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <RCC_PLL2_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 8002652:	4b21      	ldr	r3, [pc, #132]	@ (80026d8 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	08db      	lsrs	r3, r3, #3
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	4a1f      	ldr	r2, [pc, #124]	@ (80026dc <RCC_PLL2_GetVCOOutputFreq+0xfc>)
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 8002664:	e00b      	b.n	800267e <RCC_PLL2_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
      break;
 800266a:	e008      	b.n	800267e <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL2 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 800266c:	4b1c      	ldr	r3, [pc, #112]	@ (80026e0 <RCC_PLL2_GetVCOOutputFreq+0x100>)
 800266e:	61fb      	str	r3, [r7, #28]
      break;
 8002670:	e005      	b.n	800267e <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL2 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 8002672:	4b1c      	ldr	r3, [pc, #112]	@ (80026e4 <RCC_PLL2_GetVCOOutputFreq+0x104>)
 8002674:	61fb      	str	r3, [r7, #28]
      break;
 8002676:	e002      	b.n	800267e <RCC_PLL2_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	61fb      	str	r3, [r7, #28]
      break;
 800267c:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	ee07 3a90 	vmov	s15, r3
 8002684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	ee07 3a90 	vmov	s15, r3
 800269c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	ee07 3a90 	vmov	s15, r3
 80026a6:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80026aa:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 80026e8 <RCC_PLL2_GetVCOOutputFreq+0x108>
 80026ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ba:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 80026be:	edd7 7a01 	vldr	s15, [r7, #4]
 80026c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026c6:	ee17 3a90 	vmov	r3, s15
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3724      	adds	r7, #36	@ 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	58024400 	.word	0x58024400
 80026dc:	03d09000 	.word	0x03d09000
 80026e0:	016e3600 	.word	0x016e3600
 80026e4:	003d0900 	.word	0x003d0900
 80026e8:	46000000 	.word	0x46000000

080026ec <RCC_PLL3_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL3 VCO output frequency
  * @retval Value of PLL3 VCO output frequency
  */
static uint32_t RCC_PLL3_GetVCOOutputFreq(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b089      	sub	sp, #36	@ 0x24
 80026f0:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL3 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 80026f2:	4b3c      	ldr	r3, [pc, #240]	@ (80027e4 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 80026f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f6:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL3DIVR1;
 80026f8:	4b3a      	ldr	r3, [pc, #232]	@ (80027e4 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL3 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM3) >> RCC_PLLCKSELR_DIVM3_Pos;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	0d1b      	lsrs	r3, r3, #20
 8002702:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002706:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL3DIVR1_DIVN) + 1U;
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800270e:	3301      	adds	r3, #1
 8002710:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <RCC_PLL3_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	e05c      	b.n	80027d6 <RCC_PLL3_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) != 0U)
 800271c:	4b31      	ldr	r3, [pc, #196]	@ (80027e4 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 800271e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002720:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d006      	beq.n	8002736 <RCC_PLL3_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN) >> RCC_PLL3FRACR_FRACN_Pos;
 8002728:	4b2e      	ldr	r3, [pc, #184]	@ (80027e4 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 800272a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272c:	08db      	lsrs	r3, r3, #3
 800272e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	e001      	b.n	800273a <RCC_PLL3_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d019      	beq.n	8002778 <RCC_PLL3_GetVCOOutputFreq+0x8c>
 8002744:	2b02      	cmp	r3, #2
 8002746:	d81d      	bhi.n	8002784 <RCC_PLL3_GetVCOOutputFreq+0x98>
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <RCC_PLL3_GetVCOOutputFreq+0x66>
 800274c:	2b01      	cmp	r3, #1
 800274e:	d016      	beq.n	800277e <RCC_PLL3_GetVCOOutputFreq+0x92>
 8002750:	e018      	b.n	8002784 <RCC_PLL3_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL3 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002752:	4b24      	ldr	r3, [pc, #144]	@ (80027e4 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <RCC_PLL3_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 800275e:	4b21      	ldr	r3, [pc, #132]	@ (80027e4 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	08db      	lsrs	r3, r3, #3
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	4a1f      	ldr	r2, [pc, #124]	@ (80027e8 <RCC_PLL3_GetVCOOutputFreq+0xfc>)
 800276a:	fa22 f303 	lsr.w	r3, r2, r3
 800276e:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 8002770:	e00b      	b.n	800278a <RCC_PLL3_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
      break;
 8002776:	e008      	b.n	800278a <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL3 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 8002778:	4b1c      	ldr	r3, [pc, #112]	@ (80027ec <RCC_PLL3_GetVCOOutputFreq+0x100>)
 800277a:	61fb      	str	r3, [r7, #28]
      break;
 800277c:	e005      	b.n	800278a <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL3 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 800277e:	4b1c      	ldr	r3, [pc, #112]	@ (80027f0 <RCC_PLL3_GetVCOOutputFreq+0x104>)
 8002780:	61fb      	str	r3, [r7, #28]
      break;
 8002782:	e002      	b.n	800278a <RCC_PLL3_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
      break;
 8002788:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	ee07 3a90 	vmov	s15, r3
 8002790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	ee07 3a90 	vmov	s15, r3
 800279a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800279e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	ee07 3a90 	vmov	s15, r3
 80027a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80027b6:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 80027f4 <RCC_PLL3_GetVCOOutputFreq+0x108>
 80027ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c6:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 80027ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80027ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027d2:	ee17 3a90 	vmov	r3, s15
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3724      	adds	r7, #36	@ 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	58024400 	.word	0x58024400
 80027e8:	03d09000 	.word	0x03d09000
 80027ec:	016e3600 	.word	0x016e3600
 80027f0:	003d0900 	.word	0x003d0900
 80027f4:	46000000 	.word	0x46000000

080027f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002800:	2300      	movs	r3, #0
 8002802:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002804:	2300      	movs	r3, #0
 8002806:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8081 	beq.w	8002918 <HAL_RCCEx_PeriphCLKConfig+0x120>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002816:	4b8c      	ldr	r3, [pc, #560]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800281e:	613b      	str	r3, [r7, #16]

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d029      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x82>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800282a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	429a      	cmp	r2, r3
 8002832:	d022      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002834:	4b85      	ldr	r3, [pc, #532]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a84      	ldr	r2, [pc, #528]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800283a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800283e:	6013      	str	r3, [r2, #0]

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002840:	4b82      	ldr	r3, [pc, #520]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      {
        ret = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	75fb      	strb	r3, [r7, #23]
 8002850:	e013      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x82>
      }
      else
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        /* excepted the RTC clock source selection that will be changed */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002852:	4b7d      	ldr	r3, [pc, #500]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800285a:	613b      	str	r3, [r7, #16]
        __HAL_RCC_BACKUPRESET_FORCE();
 800285c:	4b7a      	ldr	r3, [pc, #488]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800285e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002860:	4a79      	ldr	r2, [pc, #484]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002862:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002866:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002868:	4b77      	ldr	r3, [pc, #476]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286c:	4a76      	ldr	r2, [pc, #472]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800286e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002872:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the content of BDCR register */
        WRITE_REG(RCC->BDCR, tmpreg);
 8002874:	4a74      	ldr	r2, [pc, #464]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	6713      	str	r3, [r2, #112]	@ 0x70
      }
    }

    if (ret == HAL_OK)
 800287a:	7dfb      	ldrb	r3, [r7, #23]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d149      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002884:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002888:	d115      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288a:	f7fe f8a3 	bl	80009d4 <HAL_GetTick>
 800288e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002890:	e00b      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0xb2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002892:	f7fe f89f 	bl	80009d4 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d902      	bls.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0xb2>
          {
            ret = HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	75fb      	strb	r3, [r7, #23]
            break;
 80028a8:	e005      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028aa:	4b67      	ldr	r3, [pc, #412]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0ed      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x9a>
          }
        }
      }

      if (ret == HAL_OK)
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d128      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028c0:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00c      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80028c8:	4b5f      	ldr	r3, [pc, #380]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028d4:	0919      	lsrs	r1, r3, #4
 80028d6:	4b5e      	ldr	r3, [pc, #376]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028d8:	400b      	ands	r3, r1
 80028da:	495b      	ldr	r1, [pc, #364]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	610b      	str	r3, [r1, #16]
 80028e0:	e005      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80028e2:	4b59      	ldr	r3, [pc, #356]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	4a58      	ldr	r2, [pc, #352]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80028ec:	6113      	str	r3, [r2, #16]
 80028ee:	4b56      	ldr	r3, [pc, #344]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028fa:	4953      	ldr	r1, [pc, #332]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	670b      	str	r3, [r1, #112]	@ 0x70
        __HAL_RCC_RTC_ENABLE();
 8002900:	4b51      	ldr	r3, [pc, #324]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002904:	4a50      	ldr	r2, [pc, #320]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800290a:	6713      	str	r3, [r2, #112]	@ 0x70
 800290c:	e004      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800290e:	7dfb      	ldrb	r3, [r7, #23]
 8002910:	75bb      	strb	r3, [r7, #22]
 8002912:	e001      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d030      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d819      	bhi.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800292c:	a201      	add	r2, pc, #4	@ (adr r2, 8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002967 	.word	0x08002967
 8002938:	08002945 	.word	0x08002945
 800293c:	08002953 	.word	0x08002953
 8002940:	08002967 	.word	0x08002967
      case RCC_FMCCLKSOURCE_HCLK:   /* HCLK  clock selected as FMC kernel peripheral clock */
        break;

      case RCC_FMCCLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for FMC kernel */
        /* Enable FMC kernel clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002944:	4b40      	ldr	r3, [pc, #256]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002948:	4a3f      	ldr	r2, [pc, #252]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800294a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800294e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 8002950:	e00a      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x170>

      case RCC_FMCCLKSOURCE_PLL2R:  /* PLL2_R is used as clock source for FMC kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002952:	4b3d      	ldr	r3, [pc, #244]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002956:	4a3c      	ldr	r2, [pc, #240]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800295c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 800295e:	e003      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x170>
      case RCC_FMCCLKSOURCE_HSI:   /* HSI oscillator is used as clock source for FMC kernel */
        /* FMC kernel clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	75fb      	strb	r3, [r7, #23]
        break;
 8002964:	e000      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x170>
        break;
 8002966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002968:	7dfb      	ldrb	r3, [r7, #23]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Set the source of FMC kernel clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800296e:	4b36      	ldr	r3, [pc, #216]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002972:	f023 0203 	bic.w	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4933      	ldr	r1, [pc, #204]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800297c:	4313      	orrs	r3, r2
 800297e:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002980:	e001      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002982:	7dfb      	ldrb	r3, [r7, #23]
 8002984:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d02a      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    switch (PeriphClkInit->Xspi1ClockSelection)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b20      	cmp	r3, #32
 8002998:	d00c      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 800299a:	2b20      	cmp	r3, #32
 800299c:	d811      	bhi.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d012      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80029a2:	2b10      	cmp	r3, #16
 80029a4:	d10d      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      case RCC_XSPI1CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi1 */
        /* Nothing to do */
        break;

      case RCC_XSPI1CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 80029a6:	4b28      	ldr	r3, [pc, #160]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80029a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029aa:	4a27      	ldr	r2, [pc, #156]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80029ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80029b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 80029b2:	e00a      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      case RCC_XSPI1CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 80029b4:	4b24      	ldr	r3, [pc, #144]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	4a23      	ldr	r2, [pc, #140]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80029ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029be:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 80029c0:	e003      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      default:
        ret = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	75fb      	strb	r3, [r7, #23]
        break;
 80029c6:	e000      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        break;
 80029c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d109      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      /* Configure the XSPI1 clock source */
      __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
 80029d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80029d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	491a      	ldr	r1, [pc, #104]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80029e2:	e001      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
 80029e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d031      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    switch (PeriphClkInit->Xspi2ClockSelection)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b80      	cmp	r3, #128	@ 0x80
 80029fa:	d00c      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80029fc:	2b80      	cmp	r3, #128	@ 0x80
 80029fe:	d811      	bhi.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d012      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002a04:	2b40      	cmp	r3, #64	@ 0x40
 8002a06:	d10d      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      case RCC_XSPI2CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi2 */
        /* Nothing to do */
        break;

      case RCC_XSPI2CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8002a08:	4b0f      	ldr	r3, [pc, #60]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002a0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002a12:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 8002a14:	e00a      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x234>

      case RCC_XSPI2CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 8002a16:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1a:	4a0b      	ldr	r2, [pc, #44]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002a1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a20:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 8002a22:	e003      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x234>

      default:
        ret = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	75fb      	strb	r3, [r7, #23]
        break;
 8002a28:	e000      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x234>
        break;
 8002a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d110      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Configure the XSPI2 clock source */
      __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
 8002a32:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	4902      	ldr	r1, [pc, #8]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002a44:	e008      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8002a46:	bf00      	nop
 8002a48:	58024400 	.word	0x58024400
 8002a4c:	58024800 	.word	0x58024800
 8002a50:	0fffffcf 	.word	0x0fffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a54:	7dfb      	ldrb	r3, [r7, #23]
 8002a56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002a64:	4b93      	ldr	r3, [pc, #588]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a68:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	4990      	ldr	r1, [pc, #576]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------------- SDMMC12 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC12) == RCC_PERIPHCLK_SDMMC12)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d026      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d007      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002a8e:	e00d      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      case RCC_SDMMC12CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8002a90:	4b88      	ldr	r3, [pc, #544]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a94:	4a87      	ldr	r2, [pc, #540]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002a96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 8002a9c:	e009      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      case RCC_SDMMC12CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 8002a9e:	4b85      	ldr	r3, [pc, #532]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa2:	4a84      	ldr	r2, [pc, #528]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002aa4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 8002aaa:	e002      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      default:
        ret = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	75fb      	strb	r3, [r7, #23]
        break;
 8002ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d109      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
    {
      /* Set the source of SDMMC12 clock*/
      __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
 8002ab8:	4b7e      	ldr	r3, [pc, #504]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002abc:	f023 0204 	bic.w	r2, r3, #4
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac4:	497b      	ldr	r1, [pc, #492]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002aca:	e001      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002acc:	7dfb      	ldrb	r3, [r7, #23]
 8002ace:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d02e      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ae4:	d019      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x322>
 8002ae6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002aea:	d813      	bhi.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002af4:	d007      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8002af6:	e00d      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    {

      case RCC_ADCCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for ADC */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002af8:	4b6e      	ldr	r3, [pc, #440]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afc:	4a6d      	ldr	r2, [pc, #436]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002afe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b02:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 8002b04:	e00a      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x324>

      case RCC_ADCCLKSOURCE_PLL3R: /* PLL3_R is used as clock source for ADC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002b06:	4b6b      	ldr	r3, [pc, #428]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0a:	4a6a      	ldr	r2, [pc, #424]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002b0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002b10:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 8002b12:	e003      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x324>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	75fb      	strb	r3, [r7, #23]
        break;
 8002b18:	e000      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x324>
        break;
 8002b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b22:	4b64      	ldr	r3, [pc, #400]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b26:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	4961      	ldr	r1, [pc, #388]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002b34:	e001      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x342>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b36:	7dfb      	ldrb	r3, [r7, #23]
 8002b38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d03f      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    switch (PeriphClkInit->Adf1ClockSelection)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8002b4e:	d02a      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002b50:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8002b54:	d824      	bhi.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002b56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b5a:	d024      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002b5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b60:	d81e      	bhi.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002b62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b66:	d01e      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002b68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b6c:	d818      	bhi.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002b6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b72:	d00e      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8002b74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b78:	d812      	bhi.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d013      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002b7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b82:	d10d      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      case RCC_ADF1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for ADF1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002b84:	4b4b      	ldr	r3, [pc, #300]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b88:	4a4a      	ldr	r2, [pc, #296]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002b8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 8002b90:	e00a      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>

      case RCC_ADF1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for ADF1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002b92:	4b48      	ldr	r3, [pc, #288]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b96:	4a47      	ldr	r2, [pc, #284]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002b98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002b9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 8002b9e:	e003      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      case RCC_ADF1CLKSOURCE_HSI:    /* HSI is used as clock source for ADF1 */
        /* ADF1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	75fb      	strb	r3, [r7, #23]
        break;
 8002ba4:	e000      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        break;
 8002ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ba8:	7dfb      	ldrb	r3, [r7, #23]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d109      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    {
      /* Set the source of ADF1 clock*/
      __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 8002bae:	4b41      	ldr	r3, [pc, #260]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb2:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	493e      	ldr	r1, [pc, #248]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002bc0:	e001      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc2:	7dfb      	ldrb	r3, [r7, #23]
 8002bc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- CEC configuration ---------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bd2:	4b38      	ldr	r3, [pc, #224]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bd6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	4935      	ldr	r1, [pc, #212]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	650b      	str	r3, [r1, #80]	@ 0x50
  }

  /*---------------------- ETH1 REF configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1REF) == RCC_PERIPHCLK_ETH1REF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1REFCLKSOURCE(PeriphClkInit->Eth1RefClockSelection));

    /* Configure the ETH1 REF clock source */
    __HAL_RCC_ETH1REF_CONFIG(PeriphClkInit->Eth1RefClockSelection);
 8002bf0:	4b30      	ldr	r3, [pc, #192]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	492d      	ldr	r1, [pc, #180]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*---------------------- ETH1PHY configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d020      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYCLKSOURCE(PeriphClkInit->Eth1PhyClockSelection));

    switch (PeriphClkInit->Eth1PhyClockSelection)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00c      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8002c16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c1a:	d106      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_ETH1PHYCLKSOURCE_HSE:    /* HSE is used as clock source for ETH PHY */
        /* ETH PHY clock source configuration done later after clock selection check */
        break;

      case RCC_ETH1PHYCLKSOURCE_PLL3S:  /* PLL3_S is used as clock source for ETH PHY */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_SCLK);
 8002c1c:	4b25      	ldr	r3, [pc, #148]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c20:	4a24      	ldr	r2, [pc, #144]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002c22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002c26:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ETH PHY clock source configuration done later after clock selection check */
        break;
 8002c28:	e003      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x43a>

      default:
        ret = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	75fb      	strb	r3, [r7, #23]
        break;
 8002c2e:	e000      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x43a>
        break;
 8002c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c32:	7dfb      	ldrb	r3, [r7, #23]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d109      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of ETH PHY clock*/
      __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyClockSelection);
 8002c38:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3c:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c44:	491b      	ldr	r1, [pc, #108]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002c4a:	e001      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c4c:	7dfb      	ldrb	r3, [r7, #23]
 8002c4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d02f      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c64:	d00e      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002c66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c6a:	d812      	bhi.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d013      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002c70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c74:	d10d      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x49a>
    {
      case RCC_FDCANCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for FDCAN kernel */
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002c76:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7a:	4a0e      	ldr	r2, [pc, #56]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002c7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c80:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c82:	e00a      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x4a2>

      case RCC_FDCANCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for FDCAN kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002c84:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c88:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c90:	e003      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      case RCC_FDCANCLKSOURCE_HSE:   /* HSE is used as clock source for FDCAN kernel */
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	75fb      	strb	r3, [r7, #23]
        break;
 8002c96:	e000      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
        break;
 8002c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c9a:	7dfb      	ldrb	r3, [r7, #23]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10b      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ca0:	4b04      	ldr	r3, [pc, #16]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ca4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cac:	4901      	ldr	r1, [pc, #4]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	650b      	str	r3, [r1, #80]	@ 0x50
 8002cb2:	e003      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8002cb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb8:	7dfb      	ldrb	r3, [r7, #23]
 8002cba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1_I3C1) == RCC_PERIPHCLK_I2C1_I3C1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d02c      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1_I3C1CLKSOURCE(PeriphClkInit->I2c1_I3c1ClockSelection));

    switch (PeriphClkInit->I2c1_I3c1ClockSelection)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ccc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cd0:	d017      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002cd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cd6:	d811      	bhi.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cdc:	d011      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002cde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ce2:	d80b      	bhi.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00c      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002ce8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cec:	d106      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_I2C1_I3C1CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C1/I3C1*/
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002cee:	4b97      	ldr	r3, [pc, #604]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf2:	4a96      	ldr	r2, [pc, #600]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002cf4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;
 8002cfa:	e003      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_I2C1_I3C1CLKSOURCE_CSI:     /* CSI is used as clock source for I2C1/I3C1*/
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	75fb      	strb	r3, [r7, #23]
        break;
 8002d00:	e000      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d109      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x526>
    {
      /* Set the source of I2C1/I3C1 clock*/
      __HAL_RCC_I2C1_I3C1_CONFIG(PeriphClkInit->I2c1_I3c1ClockSelection);
 8002d0a:	4b90      	ldr	r3, [pc, #576]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002d0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d0e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d16:	498d      	ldr	r1, [pc, #564]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	650b      	str	r3, [r1, #80]	@ 0x50
 8002d1c:	e001      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
 8002d20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C2/I2C3 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C23) == RCC_PERIPHCLK_I2C23)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d02c      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C23CLKSOURCE(PeriphClkInit->I2c23ClockSelection));

    switch (PeriphClkInit->I2c23ClockSelection)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d36:	d017      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002d38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d3c:	d811      	bhi.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8002d3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d42:	d011      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d48:	d80b      	bhi.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00c      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002d4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d52:	d106      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x56a>
    {
      case RCC_I2C23CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C2/I2C3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002d54:	4b7d      	ldr	r3, [pc, #500]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d58:	4a7c      	ldr	r2, [pc, #496]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002d5a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;
 8002d60:	e003      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x572>
      case RCC_I2C23CLKSOURCE_CSI:     /* CSI is used as clock source for I2C2/I2C3 */
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	75fb      	strb	r3, [r7, #23]
        break;
 8002d66:	e000      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x572>
        break;
 8002d68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d109      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Set the source of I2C2/I2C3 clock*/
      __HAL_RCC_I2C23_CONFIG(PeriphClkInit->I2c23ClockSelection);
 8002d70:	4b76      	ldr	r3, [pc, #472]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	4973      	ldr	r1, [pc, #460]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	650b      	str	r3, [r1, #80]	@ 0x50
 8002d82:	e001      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x590>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
 8002d86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d045      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d9c:	d02a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8002d9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002da2:	d824      	bhi.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8002da4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002da8:	d026      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002daa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002dae:	d81e      	bhi.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8002db0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002db4:	d022      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002db6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002dba:	d818      	bhi.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8002dbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002dc0:	d00e      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8002dc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002dc6:	d812      	bhi.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d019      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dd0:	d10d      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      case RCC_LPTIM1CLKSOURCE_PCLK1: /* PCLK1 as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002dd2:	4b5e      	ldr	r3, [pc, #376]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd6:	4a5d      	ldr	r2, [pc, #372]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ddc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002dde:	e010      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x60a>

      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for LPTIM1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002de0:	4b5a      	ldr	r3, [pc, #360]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de4:	4a59      	ldr	r2, [pc, #356]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002de6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002dea:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002dec:	e009      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        /* HSI, HSE, or CSI oscillator is used as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
        break;
 8002df2:	e006      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8002df4:	bf00      	nop
 8002df6:	e004      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8002df8:	bf00      	nop
 8002dfa:	e002      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8002dfc:	bf00      	nop
 8002dfe:	e000      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8002e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d109      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e08:	4b50      	ldr	r3, [pc, #320]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e0c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e14:	494d      	ldr	r1, [pc, #308]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	650b      	str	r3, [r1, #80]	@ 0x50
 8002e1a:	e001      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x628>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2/LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM23) == RCC_PERIPHCLK_LPTIM23)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d045      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
  {
    switch (PeriphClkInit->Lptim23ClockSelection)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e30:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002e34:	d02a      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x694>
 8002e36:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002e3a:	d824      	bhi.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002e3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e40:	d026      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x698>
 8002e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e46:	d81e      	bhi.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002e48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e4c:	d022      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8002e4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e52:	d818      	bhi.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e58:	d00e      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8002e5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e5e:	d812      	bhi.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d019      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8002e64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e68:	d10d      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_LPTIM23CLKSOURCE_PCLK4: /* PCLK4 as clock source for LPTIM2/LPTIM3 */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM23CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002e6a:	4b38      	ldr	r3, [pc, #224]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6e:	4a37      	ldr	r2, [pc, #220]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e74:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 8002e76:	e010      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x6a2>

      case RCC_LPTIM23CLKSOURCE_PLL3R: /* PLL3_R is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002e78:	4b34      	ldr	r3, [pc, #208]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7c:	4a33      	ldr	r2, [pc, #204]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002e7e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002e82:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 8002e84:	e009      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	75fb      	strb	r3, [r7, #23]
        break;
 8002e8a:	e006      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8002e8c:	bf00      	nop
 8002e8e:	e004      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8002e90:	bf00      	nop
 8002e92:	e002      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8002e94:	bf00      	nop
 8002e96:	e000      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8002e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d109      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      /* Set the source of LPTIM2/LPTIM3 clock*/
      __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
 8002ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eac:	4927      	ldr	r1, [pc, #156]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	658b      	str	r3, [r1, #88]	@ 0x58
 8002eb2:	e001      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
 8002eb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM4/LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM45) == RCC_PERIPHCLK_LPTIM45)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d047      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x75c>
  {
    switch (PeriphClkInit->Lptim45ClockSelection)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002ecc:	d02a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8002ece:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002ed2:	d824      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x726>
 8002ed4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ed8:	d026      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x730>
 8002eda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ede:	d81e      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x726>
 8002ee0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ee4:	d022      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x734>
 8002ee6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002eea:	d818      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x726>
 8002eec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ef0:	d00e      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x718>
 8002ef2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ef6:	d812      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x726>
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d019      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x738>
 8002efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f00:	d10d      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x726>
      case RCC_LPTIM45CLKSOURCE_PCLK4:  /* PCLK4 as clock source for LPTIM4/LPTIM5 */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM45CLKSOURCE_PLL2P: /* PLL2 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002f02:	4b12      	ldr	r3, [pc, #72]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f06:	4a11      	ldr	r2, [pc, #68]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 8002f0e:	e010      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x73a>

      case RCC_LPTIM45CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002f10:	4b0e      	ldr	r3, [pc, #56]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f14:	4a0d      	ldr	r2, [pc, #52]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002f16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 8002f1c:	e009      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM4/LPTIM5 clock */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	75fb      	strb	r3, [r7, #23]
        break;
 8002f22:	e006      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8002f24:	bf00      	nop
 8002f26:	e004      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8002f28:	bf00      	nop
 8002f2a:	e002      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8002f2c:	bf00      	nop
 8002f2e:	e000      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8002f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10b      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x758>
    {
      /* Set the source of LPTIM4/LPTIM5 clock */
      __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
 8002f38:	4b04      	ldr	r3, [pc, #16]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f3c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f44:	4901      	ldr	r1, [pc, #4]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	658b      	str	r3, [r1, #88]	@ 0x58
 8002f4a:	e003      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8002f4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d034      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	2b05      	cmp	r3, #5
 8002f66:	d81d      	bhi.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8002f68:	a201      	add	r2, pc, #4	@ (adr r2, 8002f70 <HAL_RCCEx_PeriphCLKConfig+0x778>)
 8002f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6e:	bf00      	nop
 8002f70:	08002fab 	.word	0x08002fab
 8002f74:	08002f89 	.word	0x08002f89
 8002f78:	08002f97 	.word	0x08002f97
 8002f7c:	08002fab 	.word	0x08002fab
 8002f80:	08002fab 	.word	0x08002fab
 8002f84:	08002fab 	.word	0x08002fab
      case RCC_LPUART1CLKSOURCE_PCLK4: /* PCLK4 selected as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002f88:	4b91      	ldr	r3, [pc, #580]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	4a90      	ldr	r2, [pc, #576]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f92:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002f94:	e00a      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x7b4>

      case RCC_LPUART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002f96:	4b8e      	ldr	r3, [pc, #568]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9a:	4a8d      	ldr	r2, [pc, #564]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002fa2:	e003      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	75fb      	strb	r3, [r7, #23]
        break;
 8002fa8:	e000      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        break;
 8002faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fb2:	4b87      	ldr	r3, [pc, #540]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb6:	f023 0207 	bic.w	r2, r3, #7
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	4984      	ldr	r1, [pc, #528]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	658b      	str	r3, [r1, #88]	@ 0x58
 8002fc4:	e001      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
 8002fc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d005      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
  {
    /* LTDC internally connected to PLL3_R output clock */
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002fd6:	4b7e      	ldr	r3, [pc, #504]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fda:	4a7d      	ldr	r2, [pc, #500]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002fdc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d021      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x83a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    switch (PeriphClkInit->PssiClockSelection)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x806>
 8002ff6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ffa:	d00a      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8002ffc:	e006      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      case RCC_PSSICLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for PSSI */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002ffe:	4b74      	ldr	r3, [pc, #464]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003002:	4a73      	ldr	r2, [pc, #460]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003004:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003008:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* PSSI clock source configuration done later after clock selection check */
        break;
 800300a:	e003      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        /* HSI, HSE, or CSI oscillator is used as source of PSSI clock */
        /* PSSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	75fb      	strb	r3, [r7, #23]
        break;
 8003010:	e000      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8003012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x836>
    {
      /* Set the source of PSSI clock*/
      __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
 800301a:	4b6d      	ldr	r3, [pc, #436]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800301c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800301e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003026:	496a      	ldr	r1, [pc, #424]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003028:	4313      	orrs	r3, r2
 800302a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800302c:	e001      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800302e:	7dfb      	ldrb	r3, [r7, #23]
 8003030:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d043      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003042:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003046:	d02c      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8003048:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800304c:	d826      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800304e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003052:	d028      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8003054:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003058:	d820      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800305a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800305e:	d016      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x896>
 8003060:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003064:	d81a      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 800306a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800306e:	d007      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8003070:	e014      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI1 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003072:	4b57      	ldr	r3, [pc, #348]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003076:	4a56      	ldr	r2, [pc, #344]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800307c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800307e:	e013      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003080:	4b53      	ldr	r3, [pc, #332]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003084:	4a52      	ldr	r2, [pc, #328]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003086:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800308a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800308c:	e00c      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 800308e:	4b50      	ldr	r3, [pc, #320]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003092:	4a4f      	ldr	r2, [pc, #316]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003094:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003098:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800309a:	e005      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	75fb      	strb	r3, [r7, #23]
        break;
 80030a0:	e002      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 80030a2:	bf00      	nop
 80030a4:	e000      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 80030a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d109      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030ae:	4b48      	ldr	r3, [pc, #288]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80030b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ba:	4945      	ldr	r1, [pc, #276]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	654b      	str	r3, [r1, #84]	@ 0x54
 80030c0:	e001      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
 80030c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d04b      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x972>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80030da:	d032      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80030dc:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80030e0:	d82c      	bhi.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x944>
 80030e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030e6:	d02e      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80030e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030ec:	d826      	bhi.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x944>
 80030ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030f2:	d02a      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x952>
 80030f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030f8:	d820      	bhi.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x944>
 80030fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030fe:	d016      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x936>
 8003100:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003104:	d81a      	bhi.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x944>
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800310a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800310e:	d007      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x928>
 8003110:	e014      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x944>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI2 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003112:	4b2f      	ldr	r3, [pc, #188]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003116:	4a2e      	ldr	r2, [pc, #184]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800311c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800311e:	e015      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003120:	4b2b      	ldr	r3, [pc, #172]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003124:	4a2a      	ldr	r2, [pc, #168]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003126:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800312a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800312c:	e00e      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI2 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 800312e:	4b28      	ldr	r3, [pc, #160]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003132:	4a27      	ldr	r2, [pc, #156]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003134:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003138:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800313a:	e007      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x954>
      case RCC_SAI2CLKSOURCE_SPDIF: /* SPDIF clock is used as source of SAI2 clock */
        /* SAI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	75fb      	strb	r3, [r7, #23]
        break;
 8003140:	e004      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8003142:	bf00      	nop
 8003144:	e002      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8003146:	bf00      	nop
 8003148:	e000      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 800314a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800314c:	7dfb      	ldrb	r3, [r7, #23]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x96e>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003152:	4b1f      	ldr	r3, [pc, #124]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003156:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315e:	491c      	ldr	r1, [pc, #112]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003160:	4313      	orrs	r3, r2
 8003162:	654b      	str	r3, [r1, #84]	@ 0x54
 8003164:	e001      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x972>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003166:	7dfb      	ldrb	r3, [r7, #23]
 8003168:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPDIFRX configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d03e      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800317a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800317e:	d029      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8003180:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003184:	d820      	bhi.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003186:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800318a:	d016      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800318c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003190:	d81a      	bhi.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8003196:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800319a:	d007      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 800319c:	e014      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for SPDIFRX */
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 800319e:	4b0c      	ldr	r3, [pc, #48]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80031a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a2:	4a0b      	ldr	r2, [pc, #44]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80031a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031aa:	e014      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL2R: /* PLL2_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 80031ac:	4b08      	ldr	r3, [pc, #32]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80031ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b0:	4a07      	ldr	r2, [pc, #28]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80031b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031b8:	e00d      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80031ba:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80031bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031be:	4a04      	ldr	r2, [pc, #16]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80031c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80031c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031c6:	e006      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	75fb      	strb	r3, [r7, #23]
        break;
 80031cc:	e003      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80031ce:	bf00      	nop
 80031d0:	58024400 	.word	0x58024400
        break;
 80031d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d109      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
    {
      /* Set the source of SPDIFRX clock */
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80031dc:	4b8e      	ldr	r3, [pc, #568]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80031de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031e8:	498b      	ldr	r1, [pc, #556]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	650b      	str	r3, [r1, #80]	@ 0x50
 80031ee:	e001      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f0:	7dfb      	ldrb	r3, [r7, #23]
 80031f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d043      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xa90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003208:	d02c      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 800320a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800320e:	d826      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003210:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003214:	d028      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003216:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800321a:	d820      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xa66>
 800321c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003220:	d016      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8003222:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003226:	d81a      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 800322c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003230:	d007      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xa4a>
 8003232:	e014      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI1 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003234:	4b78      	ldr	r3, [pc, #480]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003238:	4a77      	ldr	r2, [pc, #476]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800323a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800323e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003240:	e013      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003242:	4b75      	ldr	r3, [pc, #468]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003246:	4a74      	ldr	r2, [pc, #464]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800324c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800324e:	e00c      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003250:	4b71      	ldr	r3, [pc, #452]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003254:	4a70      	ldr	r2, [pc, #448]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003256:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800325a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800325c:	e005      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xa72>
      case RCC_SPI1CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	75fb      	strb	r3, [r7, #23]
        break;
 8003262:	e002      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 8003264:	bf00      	nop
 8003266:	e000      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 8003268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800326a:	7dfb      	ldrb	r3, [r7, #23]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d109      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
      /* Set the source of SPI1 clock*/
      __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 8003270:	4b69      	ldr	r3, [pc, #420]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003274:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	4966      	ldr	r1, [pc, #408]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800327e:	4313      	orrs	r3, r2
 8003280:	654b      	str	r3, [r1, #84]	@ 0x54
 8003282:	e001      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI2/SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI23) == RCC_PERIPHCLK_SPI23)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d03c      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003298:	2b40      	cmp	r3, #64	@ 0x40
 800329a:	d026      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 800329c:	2b40      	cmp	r3, #64	@ 0x40
 800329e:	d821      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80032a0:	2b30      	cmp	r3, #48	@ 0x30
 80032a2:	d024      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 80032a4:	2b30      	cmp	r3, #48	@ 0x30
 80032a6:	d81d      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d014      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xade>
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d819      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xac2>
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d007      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80032b8:	e014      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
    {
      case RCC_SPI23CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI2/SPI3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 80032ba:	4b57      	ldr	r3, [pc, #348]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032be:	4a56      	ldr	r2, [pc, #344]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 80032c6:	e013      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80032c8:	4b53      	ldr	r3, [pc, #332]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032cc:	4a52      	ldr	r2, [pc, #328]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 80032d4:	e00c      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 80032d6:	4b50      	ldr	r3, [pc, #320]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032da:	4a4f      	ldr	r2, [pc, #316]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80032e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 80032e2:	e005      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
      case RCC_SPI23CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI2/SPI3 clock */
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	75fb      	strb	r3, [r7, #23]
        break;
 80032e8:	e002      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80032ea:	bf00      	nop
 80032ec:	e000      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80032ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f0:	7dfb      	ldrb	r3, [r7, #23]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d109      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xb12>
    {
      /* Set the source of SPI2/SPI3 clock*/
      __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
 80032f6:	4b48      	ldr	r3, [pc, #288]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003302:	4945      	ldr	r1, [pc, #276]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003304:	4313      	orrs	r3, r2
 8003306:	650b      	str	r3, [r1, #80]	@ 0x50
 8003308:	e001      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330a:	7dfb      	ldrb	r3, [r7, #23]
 800330c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d03c      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    switch (PeriphClkInit->Spi45ClockSelection)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800331e:	2b50      	cmp	r3, #80	@ 0x50
 8003320:	d022      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003322:	2b50      	cmp	r3, #80	@ 0x50
 8003324:	d81d      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003326:	2b40      	cmp	r3, #64	@ 0x40
 8003328:	d020      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800332a:	2b40      	cmp	r3, #64	@ 0x40
 800332c:	d819      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 800332e:	2b30      	cmp	r3, #48	@ 0x30
 8003330:	d01e      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003332:	2b30      	cmp	r3, #48	@ 0x30
 8003334:	d815      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003336:	2b20      	cmp	r3, #32
 8003338:	d00c      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 800333a:	2b20      	cmp	r3, #32
 800333c:	d811      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 800333e:	2b00      	cmp	r3, #0
 8003340:	d018      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003342:	2b10      	cmp	r3, #16
 8003344:	d10d      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
      case RCC_SPI45CLKSOURCE_PCLK2:  /* PCLK2 as clock source for SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003346:	4b34      	ldr	r3, [pc, #208]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334a:	4a33      	ldr	r2, [pc, #204]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800334c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003350:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 8003352:	e010      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_SPI45CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003354:	4b30      	ldr	r3, [pc, #192]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003358:	4a2f      	ldr	r2, [pc, #188]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800335a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800335e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 8003360:	e009      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
      case RCC_SPI45CLKSOURCE_HSE: /* HSE oscillator clock is used as source of SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	75fb      	strb	r3, [r7, #23]
        break;
 8003366:	e006      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003368:	bf00      	nop
 800336a:	e004      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800336c:	bf00      	nop
 800336e:	e002      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003370:	bf00      	nop
 8003372:	e000      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003376:	7dfb      	ldrb	r3, [r7, #23]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d109      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of SPI4/SPI5 clock */
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800337c:	4b26      	ldr	r3, [pc, #152]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800337e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003380:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003388:	4923      	ldr	r1, [pc, #140]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800338a:	4313      	orrs	r3, r2
 800338c:	654b      	str	r3, [r1, #84]	@ 0x54
 800338e:	e001      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003390:	7dfb      	ldrb	r3, [r7, #23]
 8003392:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d03f      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xc28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033a4:	2b50      	cmp	r3, #80	@ 0x50
 80033a6:	d022      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80033a8:	2b50      	cmp	r3, #80	@ 0x50
 80033aa:	d81d      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80033ac:	2b40      	cmp	r3, #64	@ 0x40
 80033ae:	d020      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 80033b0:	2b40      	cmp	r3, #64	@ 0x40
 80033b2:	d819      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80033b4:	2b30      	cmp	r3, #48	@ 0x30
 80033b6:	d01e      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80033b8:	2b30      	cmp	r3, #48	@ 0x30
 80033ba:	d815      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d00c      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d811      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d018      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	d10d      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
      case RCC_SPI6CLKSOURCE_PCLK4: /* PCLK4 as clock source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 80033cc:	4b12      	ldr	r3, [pc, #72]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80033ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d0:	4a11      	ldr	r2, [pc, #68]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80033d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80033d8:	e010      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xc04>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80033da:	4b0f      	ldr	r3, [pc, #60]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80033dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033de:	4a0e      	ldr	r2, [pc, #56]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80033e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80033e6:	e009      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xc04>
      case RCC_SPI6CLKSOURCE_HSE: /* HSE oscillator is used as source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	75fb      	strb	r3, [r7, #23]
        break;
 80033ec:	e006      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 80033ee:	bf00      	nop
 80033f0:	e004      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 80033f2:	bf00      	nop
 80033f4:	e002      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 80033f6:	bf00      	nop
 80033f8:	e000      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 80033fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033fc:	7dfb      	ldrb	r3, [r7, #23]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10c      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xc24>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003402:	4b05      	ldr	r3, [pc, #20]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003406:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800340e:	4902      	ldr	r1, [pc, #8]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003410:	4313      	orrs	r3, r2
 8003412:	658b      	str	r3, [r1, #88]	@ 0x58
 8003414:	e004      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003416:	bf00      	nop
 8003418:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d034      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003430:	2b05      	cmp	r3, #5
 8003432:	d81d      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003434:	a201      	add	r2, pc, #4	@ (adr r2, 800343c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	08003477 	.word	0x08003477
 8003440:	08003455 	.word	0x08003455
 8003444:	08003463 	.word	0x08003463
 8003448:	08003477 	.word	0x08003477
 800344c:	08003477 	.word	0x08003477
 8003450:	08003477 	.word	0x08003477
      case RCC_USART1CLKSOURCE_PCLK2: /* PCLK2 as clock source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003454:	4b69      	ldr	r3, [pc, #420]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003458:	4a68      	ldr	r2, [pc, #416]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800345a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800345e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 8003460:	e00a      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xc80>

      case RCC_USART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003462:	4b66      	ldr	r3, [pc, #408]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003466:	4a65      	ldr	r2, [pc, #404]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800346c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 800346e:	e003      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xc80>
      case RCC_USART1CLKSOURCE_LSE: /* LSE oscillator is used as source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	75fb      	strb	r3, [r7, #23]
        break;
 8003474:	e000      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xc80>
        break;
 8003476:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    {
      /* Set the source of USART1 clock */
      __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800347e:	4b5f      	ldr	r3, [pc, #380]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003482:	f023 0207 	bic.w	r2, r3, #7
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800348a:	495c      	ldr	r1, [pc, #368]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800348c:	4313      	orrs	r3, r2
 800348e:	654b      	str	r3, [r1, #84]	@ 0x54
 8003490:	e001      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003492:	7dfb      	ldrb	r3, [r7, #23]
 8003494:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------- USART2/USART3/UART4/UART5/UART7/UART8 Configuration --------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d033      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xd12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART234578CLKSOURCE(PeriphClkInit->Usart234578ClockSelection));

    switch (PeriphClkInit->Usart234578ClockSelection)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a6:	2b05      	cmp	r3, #5
 80034a8:	d81c      	bhi.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80034aa:	a201      	add	r2, pc, #4	@ (adr r2, 80034b0 <HAL_RCCEx_PeriphCLKConfig+0xcb8>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	080034eb 	.word	0x080034eb
 80034b4:	080034c9 	.word	0x080034c9
 80034b8:	080034d7 	.word	0x080034d7
 80034bc:	080034eb 	.word	0x080034eb
 80034c0:	080034eb 	.word	0x080034eb
 80034c4:	080034eb 	.word	0x080034eb
      case RCC_USART234578CLKSOURCE_PCLK1: /* PCLK1 as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 80034c8:	4b4c      	ldr	r3, [pc, #304]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80034ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034cc:	4a4b      	ldr	r2, [pc, #300]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80034ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 80034d4:	e00a      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xcf4>

      case RCC_USART234578CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80034d6:	4b49      	ldr	r3, [pc, #292]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80034d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034da:	4a48      	ldr	r2, [pc, #288]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80034dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 80034e2:	e003      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        /* LSE,  oscillator is used as source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	75fb      	strb	r3, [r7, #23]
        break;
 80034e8:	e000      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        break;
 80034ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      /* Set the source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80034f2:	4b42      	ldr	r3, [pc, #264]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80034f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034f6:	f023 0207 	bic.w	r2, r3, #7
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fe:	493f      	ldr	r1, [pc, #252]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003500:	4313      	orrs	r3, r2
 8003502:	650b      	str	r3, [r1, #80]	@ 0x50
 8003504:	e001      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xd12>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003506:	7dfb      	ldrb	r3, [r7, #23]
 8003508:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBPHYC Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHYC) == RCC_PERIPHCLK_USBPHYC)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d027      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCCLKSOURCE(PeriphClkInit->UsbPhycClockSelection));

    switch (PeriphClkInit->UsbPhycClockSelection)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800351a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800351e:	d008      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003524:	d80c      	bhi.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xd48>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00d      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800352a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003530:	e006      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      case RCC_USBPHYCCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USBPHYC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003532:	4b32      	ldr	r3, [pc, #200]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003536:	4a31      	ldr	r2, [pc, #196]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800353c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USBPHYC clock source configuration done later after clock selection check */
        break;
 800353e:	e003      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xd50>
      case RCC_USBPHYCCLKSOURCE_HSE_DIV2: /* HSE divided by 2 is used as clock source for USBPHYC */
        /* USBPHYC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	75fb      	strb	r3, [r7, #23]
        break;
 8003544:	e000      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003546:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBPHYC_CONFIG(PeriphClkInit->UsbPhycClockSelection);
 800354e:	4b2b      	ldr	r3, [pc, #172]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003552:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355a:	4928      	ldr	r1, [pc, #160]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800355c:	4313      	orrs	r3, r2
 800355e:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003560:	e001      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003562:	7dfb      	ldrb	r3, [r7, #23]
 8003564:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBOTGFS Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGFS) == RCC_PERIPHCLK_USBOTGFS)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	da2c      	bge.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGFSCLKSOURCE(PeriphClkInit->UsbOtgFsClockSelection));

    switch (PeriphClkInit->UsbOtgFsClockSelection)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003572:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003576:	d017      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8003578:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800357c:	d811      	bhi.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 800357e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003582:	d011      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8003584:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003588:	d80b      	bhi.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00c      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 800358e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003592:	d106      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      case RCC_USBOTGFSCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USB OTG FS */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003594:	4b19      	ldr	r3, [pc, #100]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003598:	4a18      	ldr	r2, [pc, #96]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800359a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800359e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;
 80035a0:	e003      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xdb2>
      case RCC_USBOTGFSCLKSOURCE_CLK48: /* USBPHYC CLK48 is used as clock source for USB OTG FS */
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	75fb      	strb	r3, [r7, #23]
        break;
 80035a6:	e000      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 80035a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035aa:	7dfb      	ldrb	r3, [r7, #23]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d109      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBOTGFS_CONFIG(PeriphClkInit->UsbOtgFsClockSelection);
 80035b0:	4b12      	ldr	r3, [pc, #72]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80035b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035bc:	490f      	ldr	r1, [pc, #60]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80035c2:	e001      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c4:	7dfb      	ldrb	r3, [r7, #23]
 80035c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d009      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
 80035d4:	4b09      	ldr	r3, [pc, #36]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035e2:	4906      	ldr	r1, [pc, #24]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	610b      	str	r3, [r1, #16]
  }

  if (status == HAL_OK)
 80035e8:	7dbb      	ldrb	r3, [r7, #22]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xdfa>
  {
    return HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	e000      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  }
  return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	58024400 	.word	0x58024400

08003600 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_USART234578 : USART2/3/5/7/8 peripheral clock
  *            @arg RCC_PERIPHCLK_USBOTGFS    : USBOTGFS peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0; /* Set to 0 for returned value if no source clock */
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
  uint32_t clocksource;
  uint32_t ethclocksource;
  uint32_t prescaler;

  switch (PeriphClk)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003612:	f001 82db 	beq.w	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x15cc>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800361c:	f201 8326 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003626:	f001 8298 	beq.w	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x155a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003630:	f201 831c 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800363a:	f001 822a 	beq.w	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003644:	f201 8312 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800364e:	f001 81bb 	beq.w	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c8>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003658:	f201 8308 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003662:	f001 8139 	beq.w	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800366c:	f201 82fe 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003676:	f001 80bf 	beq.w	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003680:	f201 82f4 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800368a:	f001 8069 	beq.w	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x1160>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003694:	f201 82ea 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800369e:	f001 8007 	beq.w	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036a8:	f201 82e0 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036b2:	f000 87a2 	beq.w	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0xffa>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036bc:	f201 82d6 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036c6:	f000 877a 	beq.w	80045be <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036d0:	f201 82cc 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036da:	f000 8713 	beq.w	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036e4:	f201 82c2 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80036ee:	f000 86ad 	beq.w	800444c <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80036f8:	f201 82b8 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003702:	f000 8644 	beq.w	800438e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800370c:	f201 82ae 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003716:	f000 861c 	beq.w	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003720:	f201 82a4 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800372a:	f000 8606 	beq.w	800433a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003734:	f201 829a 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800373e:	f000 8592 	beq.w	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003748:	f201 8290 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003752:	f000 8519 	beq.w	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800375c:	f201 8286 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003766:	f000 84a3 	beq.w	80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003770:	f201 827c 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800377a:	f000 842d 	beq.w	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003784:	f201 8272 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800378e:	f000 83c5 	beq.w	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003798:	f201 8268 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a2:	f000 8365 	beq.w	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ac:	f201 825e 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037b6:	f000 831d 	beq.w	8003df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037c0:	f201 8254 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ca:	f000 82ed 	beq.w	8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037d4:	f201 824a 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b80      	cmp	r3, #128	@ 0x80
 80037dc:	f000 8291 	beq.w	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b80      	cmp	r3, #128	@ 0x80
 80037e4:	f201 8242 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d84c      	bhi.n	8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f001 823b 	beq.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	2b1f      	cmp	r3, #31
 80037fc:	f201 8236 	bhi.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003800:	a201      	add	r2, pc, #4	@ (adr r2, 8003808 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8003802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003806:	bf00      	nop
 8003808:	08003895 	.word	0x08003895
 800380c:	08003963 	.word	0x08003963
 8003810:	08004c6d 	.word	0x08004c6d
 8003814:	080039f3 	.word	0x080039f3
 8003818:	08004c6d 	.word	0x08004c6d
 800381c:	08004c6d 	.word	0x08004c6d
 8003820:	08004c6d 	.word	0x08004c6d
 8003824:	08003a8b 	.word	0x08003a8b
 8003828:	08004c6d 	.word	0x08004c6d
 800382c:	08004c6d 	.word	0x08004c6d
 8003830:	08004c6d 	.word	0x08004c6d
 8003834:	08004c6d 	.word	0x08004c6d
 8003838:	08004c6d 	.word	0x08004c6d
 800383c:	08004c6d 	.word	0x08004c6d
 8003840:	08004c6d 	.word	0x08004c6d
 8003844:	08003b2d 	.word	0x08003b2d
 8003848:	08004c6d 	.word	0x08004c6d
 800384c:	08004c6d 	.word	0x08004c6d
 8003850:	08004c6d 	.word	0x08004c6d
 8003854:	08004c6d 	.word	0x08004c6d
 8003858:	08004c6d 	.word	0x08004c6d
 800385c:	08004c6d 	.word	0x08004c6d
 8003860:	08004c6d 	.word	0x08004c6d
 8003864:	08004c6d 	.word	0x08004c6d
 8003868:	08004c6d 	.word	0x08004c6d
 800386c:	08004c6d 	.word	0x08004c6d
 8003870:	08004c6d 	.word	0x08004c6d
 8003874:	08004c6d 	.word	0x08004c6d
 8003878:	08004c6d 	.word	0x08004c6d
 800387c:	08004c6d 	.word	0x08004c6d
 8003880:	08004c6d 	.word	0x08004c6d
 8003884:	08003b99 	.word	0x08003b99
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b40      	cmp	r3, #64	@ 0x40
 800388c:	f000 81fb 	beq.w	8003c86 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      }
      break;

    default:
      /* Nothing to do, frequency is by default set to 0 */
      break;
 8003890:	f001 b9ec 	b.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
      clocksource = __HAL_RCC_GET_FMC_SOURCE();
 8003894:	4ba1      	ldr	r3, [pc, #644]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003896:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800389a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800389e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80038a2:	d004      	beq.n	80038ae <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 80038a4:	4b9d      	ldr	r3, [pc, #628]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80038a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	e001      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 80038ae:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d80e      	bhi.n	80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d844      	bhi.n	800394a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 80038c0:	a201      	add	r2, pc, #4	@ (adr r2, 80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	080038e3 	.word	0x080038e3
 80038cc:	080038eb 	.word	0x080038eb
 80038d0:	080038ff 	.word	0x080038ff
 80038d4:	08003913 	.word	0x08003913
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80038de:	d02e      	beq.n	800393e <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
          break;
 80038e0:	e033      	b.n	800394a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
          frequency = HAL_RCC_GetHCLKFreq();
 80038e2:	f7fe fb47 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 80038e6:	6178      	str	r0, [r7, #20]
          break;
 80038e8:	e039      	b.n	800395e <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 80038ea:	4b8c      	ldr	r3, [pc, #560]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80038ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d02c      	beq.n	8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
            frequency = HAL_RCC_GetPLL1QFreq();
 80038f6:	f7fe fbb9 	bl	800206c <HAL_RCC_GetPLL1QFreq>
 80038fa:	6178      	str	r0, [r7, #20]
          break;
 80038fc:	e028      	b.n	8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 80038fe:	4b87      	ldr	r3, [pc, #540]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003902:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d025      	beq.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
            frequency = HAL_RCC_GetPLL2RFreq();
 800390a:	f7fe fbf1 	bl	80020f0 <HAL_RCC_GetPLL2RFreq>
 800390e:	6178      	str	r0, [r7, #20]
          break;
 8003910:	e021      	b.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003912:	4b82      	ldr	r3, [pc, #520]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	d01e      	beq.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800391e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b00      	cmp	r3, #0
 8003928:	d018      	beq.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800392a:	4b7c      	ldr	r3, [pc, #496]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	08db      	lsrs	r3, r3, #3
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	4a7a      	ldr	r2, [pc, #488]	@ (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8003936:	fa22 f303 	lsr.w	r3, r2, r3
 800393a:	617b      	str	r3, [r7, #20]
          break;
 800393c:	e00e      	b.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          frequency = (HAL_RCC_GetHCLKFreq() / 4U);
 800393e:	f7fe fb19 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8003942:	4603      	mov	r3, r0
 8003944:	089b      	lsrs	r3, r3, #2
 8003946:	617b      	str	r3, [r7, #20]
          break;
 8003948:	e009      	b.n	800395e <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 800394a:	bf00      	nop
 800394c:	f001 b993 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003950:	bf00      	nop
 8003952:	f001 b990 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003956:	bf00      	nop
 8003958:	f001 b98d 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800395c:	bf00      	nop
      break;
 800395e:	f001 b98a 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_XSPI1_SOURCE();
 8003962:	4b6e      	ldr	r3, [pc, #440]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003964:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003968:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800396c:	2b40      	cmp	r3, #64	@ 0x40
 800396e:	d004      	beq.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8003970:	4b6a      	ldr	r3, [pc, #424]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003974:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003978:	e000      	b.n	800397c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800397a:	2340      	movs	r3, #64	@ 0x40
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	2b40      	cmp	r3, #64	@ 0x40
 8003982:	d027      	beq.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	2b40      	cmp	r3, #64	@ 0x40
 8003988:	d82a      	bhi.n	80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	2b20      	cmp	r3, #32
 800398e:	d017      	beq.n	80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	2b20      	cmp	r3, #32
 8003994:	d824      	bhi.n	80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	2b10      	cmp	r3, #16
 80039a0:	d004      	beq.n	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
          break;
 80039a2:	e01d      	b.n	80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          frequency = HAL_RCC_GetHCLKFreq();
 80039a4:	f7fe fae6 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 80039a8:	6178      	str	r0, [r7, #20]
          break;
 80039aa:	e020      	b.n	80039ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 80039ac:	4b5b      	ldr	r3, [pc, #364]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80039ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d016      	beq.n	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = HAL_RCC_GetPLL2SFreq();
 80039b8:	f7fe fbb0 	bl	800211c <HAL_RCC_GetPLL2SFreq>
 80039bc:	6178      	str	r0, [r7, #20]
          break;
 80039be:	e012      	b.n	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_TCLK) != 0U)
 80039c0:	4b56      	ldr	r3, [pc, #344]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80039c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00f      	beq.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
            frequency = HAL_RCC_GetPLL2TFreq();
 80039cc:	f7fe fbbc 	bl	8002148 <HAL_RCC_GetPLL2TFreq>
 80039d0:	6178      	str	r0, [r7, #20]
          break;
 80039d2:	e00b      	b.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
          frequency = (HAL_RCC_GetHCLKFreq() / 4U);
 80039d4:	f7fe face 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 80039d8:	4603      	mov	r3, r0
 80039da:	089b      	lsrs	r3, r3, #2
 80039dc:	617b      	str	r3, [r7, #20]
          break;
 80039de:	e006      	b.n	80039ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
          break;
 80039e0:	bf00      	nop
 80039e2:	f001 b948 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80039e6:	bf00      	nop
 80039e8:	f001 b945 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80039ec:	bf00      	nop
      break;
 80039ee:	f001 b942 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_XSPI2_SOURCE();
 80039f2:	4b4a      	ldr	r3, [pc, #296]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80039f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80039f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80039fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a00:	d004      	beq.n	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
 8003a02:	4b46      	ldr	r3, [pc, #280]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a06:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a0a:	e001      	b.n	8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8003a0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a18:	d028      	beq.n	8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a20:	d82a      	bhi.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b80      	cmp	r3, #128	@ 0x80
 8003a26:	d017      	beq.n	8003a58 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	2b80      	cmp	r3, #128	@ 0x80
 8003a2c:	d824      	bhi.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	2b40      	cmp	r3, #64	@ 0x40
 8003a38:	d004      	beq.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x444>
          break;
 8003a3a:	e01d      	b.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HAL_RCC_GetHCLKFreq();
 8003a3c:	f7fe fa9a 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8003a40:	6178      	str	r0, [r7, #20]
          break;
 8003a42:	e020      	b.n	8003a86 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 8003a44:	4b35      	ldr	r3, [pc, #212]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d016      	beq.n	8003a7e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HAL_RCC_GetPLL2SFreq();
 8003a50:	f7fe fb64 	bl	800211c <HAL_RCC_GetPLL2SFreq>
 8003a54:	6178      	str	r0, [r7, #20]
          break;
 8003a56:	e012      	b.n	8003a7e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_TCLK) != 0U)
 8003a58:	4b30      	ldr	r3, [pc, #192]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00f      	beq.n	8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
            frequency = HAL_RCC_GetPLL2TFreq();
 8003a64:	f7fe fb70 	bl	8002148 <HAL_RCC_GetPLL2TFreq>
 8003a68:	6178      	str	r0, [r7, #20]
          break;
 8003a6a:	e00b      	b.n	8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
          frequency = (HAL_RCC_GetHCLKFreq() / 4U);
 8003a6c:	f7fe fa82 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8003a70:	4603      	mov	r3, r0
 8003a72:	089b      	lsrs	r3, r3, #2
 8003a74:	617b      	str	r3, [r7, #20]
          break;
 8003a76:	e006      	b.n	8003a86 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          break;
 8003a78:	bf00      	nop
 8003a7a:	f001 b8fc 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003a7e:	bf00      	nop
 8003a80:	f001 b8f9 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003a84:	bf00      	nop
      break;
 8003a86:	f001 b8f6 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003a8a:	4b24      	ldr	r3, [pc, #144]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a9a:	d02a      	beq.n	8003af2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aa2:	d82f      	bhi.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d004      	beq.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ab0:	d016      	beq.n	8003ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          break;
 8003ab2:	e027      	b.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ab4:	4b19      	ldr	r3, [pc, #100]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d024      	beq.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8003ac0:	4b16      	ldr	r3, [pc, #88]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d01e      	beq.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003acc:	4b13      	ldr	r3, [pc, #76]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	08db      	lsrs	r3, r3, #3
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	4a12      	ldr	r2, [pc, #72]	@ (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8003adc:	617b      	str	r3, [r7, #20]
          break;
 8003ade:	e014      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d011      	beq.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
            frequency = CSI_VALUE;
 8003aec:	4b0d      	ldr	r3, [pc, #52]	@ (8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003aee:	617b      	str	r3, [r7, #20]
          break;
 8003af0:	e00e      	b.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003af2:	4b0a      	ldr	r3, [pc, #40]	@ (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            frequency = HSE_VALUE;
 8003afe:	4b0a      	ldr	r3, [pc, #40]	@ (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8003b00:	617b      	str	r3, [r7, #20]
          break;
 8003b02:	e008      	b.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          break;
 8003b04:	bf00      	nop
 8003b06:	f001 b8b6 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003b0a:	bf00      	nop
 8003b0c:	f001 b8b3 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003b10:	bf00      	nop
 8003b12:	f001 b8b0 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003b16:	bf00      	nop
      break;
 8003b18:	f001 b8ad 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8003b1c:	58024400 	.word	0x58024400
 8003b20:	03d09000 	.word	0x03d09000
 8003b24:	003d0900 	.word	0x003d0900
 8003b28:	016e3600 	.word	0x016e3600
      clocksource = __HAL_RCC_GET_ADC_SOURCE();
 8003b2c:	4b9a      	ldr	r3, [pc, #616]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b30:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b3c:	d01f      	beq.n	8003b7e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b44:	d81f      	bhi.n	8003b86 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d004      	beq.n	8003b56 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
          break;
 8003b54:	e017      	b.n	8003b86 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8003b56:	4b90      	ldr	r3, [pc, #576]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d014      	beq.n	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
            frequency = HAL_RCC_GetPLL2PFreq();
 8003b62:	f7fe fa99 	bl	8002098 <HAL_RCC_GetPLL2PFreq>
 8003b66:	6178      	str	r0, [r7, #20]
          break;
 8003b68:	e010      	b.n	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8003b6a:	4b8b      	ldr	r3, [pc, #556]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00d      	beq.n	8003b92 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HAL_RCC_GetPLL3RFreq();
 8003b76:	f7fe fb2b 	bl	80021d0 <HAL_RCC_GetPLL3RFreq>
 8003b7a:	6178      	str	r0, [r7, #20]
          break;
 8003b7c:	e009      	b.n	8003b92 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = RCC_GetCLKPFreq();
 8003b7e:	f001 f893 	bl	8004ca8 <RCC_GetCLKPFreq>
 8003b82:	6178      	str	r0, [r7, #20]
          break;
 8003b84:	e006      	b.n	8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
          break;
 8003b86:	bf00      	nop
 8003b88:	f001 b875 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003b8c:	bf00      	nop
 8003b8e:	f001 b872 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003b92:	bf00      	nop
      break;
 8003b94:	f001 b86f 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_ADF1_SOURCE();
 8003b98:	4b7f      	ldr	r3, [pc, #508]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b9c:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003ba8:	d048      	beq.n	8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003bb0:	d85a      	bhi.n	8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bb8:	d037      	beq.n	8003c2a <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bc0:	d852      	bhi.n	8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003bc8:	d02b      	beq.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003bd0:	d84a      	bhi.n	8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bd8:	d019      	beq.n	8003c0e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003be0:	d842      	bhi.n	8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d004      	beq.n	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bee:	d004      	beq.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
          break;
 8003bf0:	e03a      	b.n	8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = HAL_RCC_GetHCLKFreq();
 8003bf2:	f7fe f9bf 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8003bf6:	6178      	str	r0, [r7, #20]
          break;
 8003bf8:	e043      	b.n	8003c82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8003bfa:	4b67      	ldr	r3, [pc, #412]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d033      	beq.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            frequency = HAL_RCC_GetPLL2PFreq();
 8003c06:	f7fe fa47 	bl	8002098 <HAL_RCC_GetPLL2PFreq>
 8003c0a:	6178      	str	r0, [r7, #20]
          break;
 8003c0c:	e02f      	b.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8003c0e:	4b62      	ldr	r3, [pc, #392]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d02c      	beq.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HAL_RCC_GetPLL3PFreq();
 8003c1a:	f7fe faad 	bl	8002178 <HAL_RCC_GetPLL3PFreq>
 8003c1e:	6178      	str	r0, [r7, #20]
          break;
 8003c20:	e028      	b.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003c22:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8003c26:	617b      	str	r3, [r7, #20]
          break;
 8003c28:	e02b      	b.n	8003c82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003c2a:	4b5b      	ldr	r3, [pc, #364]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d021      	beq.n	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
            frequency = CSI_VALUE;
 8003c36:	4b59      	ldr	r3, [pc, #356]	@ (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8003c38:	617b      	str	r3, [r7, #20]
          break;
 8003c3a:	e01e      	b.n	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c3c:	4b56      	ldr	r3, [pc, #344]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01b      	beq.n	8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8003c48:	4b53      	ldr	r3, [pc, #332]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d015      	beq.n	8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c54:	4b50      	ldr	r3, [pc, #320]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	08db      	lsrs	r3, r3, #3
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	4a50      	ldr	r2, [pc, #320]	@ (8003da0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
 8003c64:	617b      	str	r3, [r7, #20]
          break;
 8003c66:	e00b      	b.n	8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
          break;
 8003c68:	bf00      	nop
 8003c6a:	f001 b804 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003c6e:	bf00      	nop
 8003c70:	f001 b801 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003c74:	bf00      	nop
 8003c76:	f000 bffe 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003c7a:	bf00      	nop
 8003c7c:	f000 bffb 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003c80:	bf00      	nop
      break;
 8003c82:	f000 bff8 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_CEC_SOURCE();
 8003c86:	4b44      	ldr	r3, [pc, #272]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c96:	d01f      	beq.n	8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c9e:	d824      	bhi.n	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d004      	beq.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cac:	d00a      	beq.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
          break;
 8003cae:	e01c      	b.n	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cb0:	4b39      	ldr	r3, [pc, #228]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d019      	beq.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
            frequency = LSE_VALUE;
 8003cbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cc0:	617b      	str	r3, [r7, #20]
          break;
 8003cc2:	e015      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cc4:	4b34      	ldr	r3, [pc, #208]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003cc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d012      	beq.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
            frequency = LSI_VALUE;
 8003cd0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003cd4:	617b      	str	r3, [r7, #20]
          break;
 8003cd6:	e00e      	b.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00b      	beq.n	8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
            frequency = CSI_VALUE;
 8003ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8003ce6:	617b      	str	r3, [r7, #20]
          break;
 8003ce8:	e008      	b.n	8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
          break;
 8003cea:	bf00      	nop
 8003cec:	f000 bfc3 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003cf0:	bf00      	nop
 8003cf2:	f000 bfc0 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003cf6:	bf00      	nop
 8003cf8:	f000 bfbd 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003cfc:	bf00      	nop
      break;
 8003cfe:	f000 bfba 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_ETH1REF_SOURCE();
 8003d02:	4b25      	ldr	r3, [pc, #148]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d12:	d013      	beq.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d1a:	d833      	bhi.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d033      	beq.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d28:	d12c      	bne.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d02c      	beq.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
            frequency = HSE_VALUE;
 8003d36:	4b1b      	ldr	r3, [pc, #108]	@ (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8003d38:	617b      	str	r3, [r7, #20]
          break;
 8003d3a:	e029      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          ethclocksource = __HAL_RCC_GET_ETH1PHY_SOURCE();
 8003d3c:	4b16      	ldr	r3, [pc, #88]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d004      	beq.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d52:	d009      	beq.n	8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
              break;
 8003d54:	e015      	b.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
              if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d56:	4b10      	ldr	r3, [pc, #64]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00c      	beq.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
                frequency = HSE_VALUE;
 8003d62:	4b10      	ldr	r3, [pc, #64]	@ (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8003d64:	617b      	str	r3, [r7, #20]
              break;
 8003d66:	e009      	b.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
              if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 8003d68:	4b0b      	ldr	r3, [pc, #44]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
                frequency = HAL_RCC_GetPLL3SFreq();
 8003d74:	f7fe fa42 	bl	80021fc <HAL_RCC_GetPLL3SFreq>
 8003d78:	6178      	str	r0, [r7, #20]
              break;
 8003d7a:	e001      	b.n	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
              break;
 8003d7c:	bf00      	nop
 8003d7e:	e008      	b.n	8003d92 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              break;
 8003d80:	bf00      	nop
          break;
 8003d82:	e006      	b.n	8003d92 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
          break;
 8003d84:	bf00      	nop
 8003d86:	f000 bf76 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003d8a:	bf00      	nop
 8003d8c:	f000 bf73 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003d90:	bf00      	nop
      break;
 8003d92:	f000 bf70 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8003d96:	bf00      	nop
 8003d98:	58024400 	.word	0x58024400
 8003d9c:	003d0900 	.word	0x003d0900
 8003da0:	03d09000 	.word	0x03d09000
 8003da4:	016e3600 	.word	0x016e3600
      clocksource = __HAL_RCC_GET_ETH1PHY_SOURCE();
 8003da8:	4b87      	ldr	r3, [pc, #540]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d004      	beq.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003dbe:	d009      	beq.n	8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          break;
 8003dc0:	e016      	b.n	8003df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dc2:	4b81      	ldr	r3, [pc, #516]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00c      	beq.n	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            frequency = HSE_VALUE;
 8003dce:	4b7f      	ldr	r3, [pc, #508]	@ (8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x9cc>)
 8003dd0:	617b      	str	r3, [r7, #20]
          break;
 8003dd2:	e009      	b.n	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 8003dd4:	4b7c      	ldr	r3, [pc, #496]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d006      	beq.n	8003dee <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = HAL_RCC_GetPLL3SFreq();
 8003de0:	f7fe fa0c 	bl	80021fc <HAL_RCC_GetPLL3SFreq>
 8003de4:	6178      	str	r0, [r7, #20]
          break;
 8003de6:	e002      	b.n	8003dee <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8003de8:	bf00      	nop
 8003dea:	f000 bf44 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003dee:	bf00      	nop
      break;
 8003df0:	f000 bf41 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_FDCAN_SOURCE();
 8003df4:	4b74      	ldr	r3, [pc, #464]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e04:	d01e      	beq.n	8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e0c:	d824      	bhi.n	8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d004      	beq.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e1a:	d009      	beq.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
          break;
 8003e1c:	e01c      	b.n	8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d019      	beq.n	8003e5e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
            frequency = HSE_VALUE;
 8003e2a:	4b68      	ldr	r3, [pc, #416]	@ (8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x9cc>)
 8003e2c:	617b      	str	r3, [r7, #20]
          break;
 8003e2e:	e016      	b.n	8003e5e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8003e30:	4b65      	ldr	r3, [pc, #404]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d013      	beq.n	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
            frequency = HAL_RCC_GetPLL1QFreq();
 8003e3c:	f7fe f916 	bl	800206c <HAL_RCC_GetPLL1QFreq>
 8003e40:	6178      	str	r0, [r7, #20]
          break;
 8003e42:	e00f      	b.n	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8003e44:	4b60      	ldr	r3, [pc, #384]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00c      	beq.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HAL_RCC_GetPLL2PFreq();
 8003e50:	f7fe f922 	bl	8002098 <HAL_RCC_GetPLL2PFreq>
 8003e54:	6178      	str	r0, [r7, #20]
          break;
 8003e56:	e008      	b.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          break;
 8003e58:	bf00      	nop
 8003e5a:	f000 bf0c 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003e5e:	bf00      	nop
 8003e60:	f000 bf09 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003e64:	bf00      	nop
 8003e66:	f000 bf06 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003e6a:	bf00      	nop
      break;
 8003e6c:	f000 bf03 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_I2C23_SOURCE();
 8003e70:	4b55      	ldr	r3, [pc, #340]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e80:	d037      	beq.n	8003ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e88:	d83c      	bhi.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e90:	d019      	beq.n	8003ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e98:	d834      	bhi.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d004      	beq.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ea6:	d004      	beq.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          break;
 8003ea8:	e02c      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003eaa:	f7fe f88b 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 8003eae:	6178      	str	r0, [r7, #20]
          break;
 8003eb0:	e032      	b.n	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8003eb2:	4b45      	ldr	r3, [pc, #276]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d025      	beq.n	8003f0a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
            frequency = HAL_RCC_GetPLL3RFreq();
 8003ebe:	f7fe f987 	bl	80021d0 <HAL_RCC_GetPLL3RFreq>
 8003ec2:	6178      	str	r0, [r7, #20]
          break;
 8003ec4:	e021      	b.n	8003f0a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ec6:	4b40      	ldr	r3, [pc, #256]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d01e      	beq.n	8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8003ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d018      	beq.n	8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003ede:	4b3a      	ldr	r3, [pc, #232]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	08db      	lsrs	r3, r3, #3
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	4a39      	ldr	r2, [pc, #228]	@ (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>)
 8003eea:	fa22 f303 	lsr.w	r3, r2, r3
 8003eee:	617b      	str	r3, [r7, #20]
          break;
 8003ef0:	e00e      	b.n	8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003ef2:	4b35      	ldr	r3, [pc, #212]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
            frequency = CSI_VALUE;
 8003efe:	4b35      	ldr	r3, [pc, #212]	@ (8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>)
 8003f00:	617b      	str	r3, [r7, #20]
          break;
 8003f02:	e008      	b.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003f04:	bf00      	nop
 8003f06:	f000 beb6 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003f0a:	bf00      	nop
 8003f0c:	f000 beb3 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003f10:	bf00      	nop
 8003f12:	f000 beb0 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003f16:	bf00      	nop
      break;
 8003f18:	f000 bead 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_I2C1_I3C1_SOURCE();
 8003f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f20:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f2c:	d037      	beq.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f34:	d83c      	bhi.n	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f3c:	d019      	beq.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f44:	d834      	bhi.n	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d004      	beq.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f52:	d004      	beq.n	8003f5e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          break;
 8003f54:	e02c      	b.n	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f56:	f7fe f835 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 8003f5a:	6178      	str	r0, [r7, #20]
          break;
 8003f5c:	e032      	b.n	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8003f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d025      	beq.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
            frequency = HAL_RCC_GetPLL3RFreq();
 8003f6a:	f7fe f931 	bl	80021d0 <HAL_RCC_GetPLL3RFreq>
 8003f6e:	6178      	str	r0, [r7, #20]
          break;
 8003f70:	e021      	b.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f72:	4b15      	ldr	r3, [pc, #84]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d01e      	beq.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8003f7e:	4b12      	ldr	r3, [pc, #72]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d018      	beq.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	08db      	lsrs	r3, r3, #3
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	4a0e      	ldr	r2, [pc, #56]	@ (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>)
 8003f96:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9a:	617b      	str	r3, [r7, #20]
          break;
 8003f9c:	e00e      	b.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
            frequency = CSI_VALUE;
 8003faa:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>)
 8003fac:	617b      	str	r3, [r7, #20]
          break;
 8003fae:	e008      	b.n	8003fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
          break;
 8003fb0:	bf00      	nop
 8003fb2:	f000 be60 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003fb6:	bf00      	nop
 8003fb8:	f000 be5d 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003fbc:	bf00      	nop
 8003fbe:	f000 be5a 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003fc2:	bf00      	nop
      break;
 8003fc4:	f000 be57 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8003fc8:	58024400 	.word	0x58024400
 8003fcc:	016e3600 	.word	0x016e3600
 8003fd0:	03d09000 	.word	0x03d09000
 8003fd4:	003d0900 	.word	0x003d0900
      clocksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003fd8:	4ba0      	ldr	r3, [pc, #640]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8003fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fdc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fe8:	d04f      	beq.n	800408a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ff0:	d84f      	bhi.n	8004092 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ff8:	d03d      	beq.n	8004076 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004000:	d847      	bhi.n	8004092 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004008:	d02b      	beq.n	8004062 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004010:	d83f      	bhi.n	8004092 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004018:	d019      	beq.n	800404e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004020:	d837      	bhi.n	8004092 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d004      	beq.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800402e:	d004      	beq.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
          break;
 8004030:	e02f      	b.n	8004092 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004032:	f7fd ffc7 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 8004036:	6178      	str	r0, [r7, #20]
          break;
 8004038:	e038      	b.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 800403a:	4b88      	ldr	r3, [pc, #544]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 800403c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d028      	beq.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
            frequency = HAL_RCC_GetPLL2PFreq();
 8004046:	f7fe f827 	bl	8002098 <HAL_RCC_GetPLL2PFreq>
 800404a:	6178      	str	r0, [r7, #20]
          break;
 800404c:	e024      	b.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 800404e:	4b83      	ldr	r3, [pc, #524]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004052:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d021      	beq.n	800409e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
            frequency = HAL_RCC_GetPLL3RFreq();
 800405a:	f7fe f8b9 	bl	80021d0 <HAL_RCC_GetPLL3RFreq>
 800405e:	6178      	str	r0, [r7, #20]
          break;
 8004060:	e01d      	b.n	800409e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004062:	4b7e      	ldr	r3, [pc, #504]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d01a      	beq.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
            frequency = LSE_VALUE;
 800406e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004072:	617b      	str	r3, [r7, #20]
          break;
 8004074:	e016      	b.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004076:	4b79      	ldr	r3, [pc, #484]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d013      	beq.n	80040aa <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = LSI_VALUE;
 8004082:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004086:	617b      	str	r3, [r7, #20]
          break;
 8004088:	e00f      	b.n	80040aa <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          frequency = RCC_GetCLKPFreq();
 800408a:	f000 fe0d 	bl	8004ca8 <RCC_GetCLKPFreq>
 800408e:	6178      	str	r0, [r7, #20]
          break;
 8004090:	e00c      	b.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          break;
 8004092:	bf00      	nop
 8004094:	f000 bdef 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004098:	bf00      	nop
 800409a:	f000 bdec 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800409e:	bf00      	nop
 80040a0:	f000 bde9 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80040a4:	bf00      	nop
 80040a6:	f000 bde6 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80040aa:	bf00      	nop
      break;
 80040ac:	f000 bde3 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_LPTIM23_SOURCE();
 80040b0:	4b6a      	ldr	r3, [pc, #424]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 80040b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80040c0:	d04f      	beq.n	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80040c8:	d84f      	bhi.n	800416a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d0:	d03d      	beq.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d8:	d847      	bhi.n	800416a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040e0:	d02b      	beq.n	800413a <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040e8:	d83f      	bhi.n	800416a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040f0:	d019      	beq.n	8004126 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040f8:	d837      	bhi.n	800416a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d004      	beq.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004106:	d004      	beq.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          break;
 8004108:	e02f      	b.n	800416a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetPCLK4Freq();
 800410a:	f7fd ff93 	bl	8002034 <HAL_RCC_GetPCLK4Freq>
 800410e:	6178      	str	r0, [r7, #20]
          break;
 8004110:	e038      	b.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004112:	4b52      	ldr	r3, [pc, #328]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004116:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d028      	beq.n	8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
            frequency = HAL_RCC_GetPLL2PFreq();
 800411e:	f7fd ffbb 	bl	8002098 <HAL_RCC_GetPLL2PFreq>
 8004122:	6178      	str	r0, [r7, #20]
          break;
 8004124:	e024      	b.n	8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004126:	4b4d      	ldr	r3, [pc, #308]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d021      	beq.n	8004176 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004132:	f7fe f84d 	bl	80021d0 <HAL_RCC_GetPLL3RFreq>
 8004136:	6178      	str	r0, [r7, #20]
          break;
 8004138:	e01d      	b.n	8004176 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800413a:	4b48      	ldr	r3, [pc, #288]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 800413c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d01a      	beq.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
            frequency = LSE_VALUE;
 8004146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800414a:	617b      	str	r3, [r7, #20]
          break;
 800414c:	e016      	b.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800414e:	4b43      	ldr	r3, [pc, #268]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d013      	beq.n	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
            frequency = LSI_VALUE;
 800415a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800415e:	617b      	str	r3, [r7, #20]
          break;
 8004160:	e00f      	b.n	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
          frequency = RCC_GetCLKPFreq();
 8004162:	f000 fda1 	bl	8004ca8 <RCC_GetCLKPFreq>
 8004166:	6178      	str	r0, [r7, #20]
          break;
 8004168:	e00c      	b.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
          break;
 800416a:	bf00      	nop
 800416c:	f000 bd83 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004170:	bf00      	nop
 8004172:	f000 bd80 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004176:	bf00      	nop
 8004178:	f000 bd7d 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800417c:	bf00      	nop
 800417e:	f000 bd7a 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004182:	bf00      	nop
      break;
 8004184:	f000 bd77 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_LPTIM45_SOURCE();
 8004188:	4b34      	ldr	r3, [pc, #208]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 800418a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004198:	d04f      	beq.n	800423a <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80041a0:	d84f      	bhi.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041a8:	d03d      	beq.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0xc26>
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041b0:	d847      	bhi.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041b8:	d02b      	beq.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041c0:	d83f      	bhi.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041c8:	d019      	beq.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0xbfe>
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041d0:	d837      	bhi.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d004      	beq.n	80041e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041de:	d004      	beq.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
          break;
 80041e0:	e02f      	b.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
          frequency = HAL_RCC_GetPCLK4Freq();
 80041e2:	f7fd ff27 	bl	8002034 <HAL_RCC_GetPCLK4Freq>
 80041e6:	6178      	str	r0, [r7, #20]
          break;
 80041e8:	e03b      	b.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0xc62>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 80041ea:	4b1c      	ldr	r3, [pc, #112]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 80041ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d028      	beq.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0xc48>
            frequency = HAL_RCC_GetPLL2PFreq();
 80041f6:	f7fd ff4f 	bl	8002098 <HAL_RCC_GetPLL2PFreq>
 80041fa:	6178      	str	r0, [r7, #20]
          break;
 80041fc:	e024      	b.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0xc48>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 80041fe:	4b17      	ldr	r3, [pc, #92]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004202:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d021      	beq.n	800424e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
            frequency = HAL_RCC_GetPLL3RFreq();
 800420a:	f7fd ffe1 	bl	80021d0 <HAL_RCC_GetPLL3RFreq>
 800420e:	6178      	str	r0, [r7, #20]
          break;
 8004210:	e01d      	b.n	800424e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004212:	4b12      	ldr	r3, [pc, #72]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01a      	beq.n	8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
            frequency = LSE_VALUE;
 800421e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004222:	617b      	str	r3, [r7, #20]
          break;
 8004224:	e016      	b.n	8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004226:	4b0d      	ldr	r3, [pc, #52]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d016      	beq.n	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
            frequency = LSI_VALUE;
 8004232:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004236:	617b      	str	r3, [r7, #20]
          break;
 8004238:	e012      	b.n	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
          frequency = RCC_GetCLKPFreq();
 800423a:	f000 fd35 	bl	8004ca8 <RCC_GetCLKPFreq>
 800423e:	6178      	str	r0, [r7, #20]
          break;
 8004240:	e00f      	b.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0xc62>
          break;
 8004242:	bf00      	nop
 8004244:	f000 bd17 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004248:	bf00      	nop
 800424a:	f000 bd14 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800424e:	bf00      	nop
 8004250:	f000 bd11 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004254:	bf00      	nop
 8004256:	f000 bd0e 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 800425a:	bf00      	nop
 800425c:	58024400 	.word	0x58024400
          break;
 8004260:	bf00      	nop
      break;
 8004262:	f000 bd08 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_LPUART1_SOURCE();
 8004266:	4ba3      	ldr	r3, [pc, #652]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	613b      	str	r3, [r7, #16]
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b05      	cmp	r3, #5
 8004274:	d84f      	bhi.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
 8004276:	a201      	add	r2, pc, #4	@ (adr r2, 800427c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>)
 8004278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427c:	08004295 	.word	0x08004295
 8004280:	0800429d 	.word	0x0800429d
 8004284:	080042b1 	.word	0x080042b1
 8004288:	080042c5 	.word	0x080042c5
 800428c:	080042f1 	.word	0x080042f1
 8004290:	08004303 	.word	0x08004303
          frequency = HAL_RCC_GetPCLK4Freq();
 8004294:	f7fd fece 	bl	8002034 <HAL_RCC_GetPCLK4Freq>
 8004298:	6178      	str	r0, [r7, #20]
          break;
 800429a:	e04c      	b.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 800429c:	4b95      	ldr	r3, [pc, #596]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 800429e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d039      	beq.n	800431c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
            frequency = HAL_RCC_GetPLL2QFreq();
 80042a8:	f7fd ff0c 	bl	80020c4 <HAL_RCC_GetPLL2QFreq>
 80042ac:	6178      	str	r0, [r7, #20]
          break;
 80042ae:	e035      	b.n	800431c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 80042b0:	4b90      	ldr	r3, [pc, #576]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80042b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d032      	beq.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0xd22>
            frequency = HAL_RCC_GetPLL3QFreq();
 80042bc:	f7fd ff72 	bl	80021a4 <HAL_RCC_GetPLL3QFreq>
 80042c0:	6178      	str	r0, [r7, #20]
          break;
 80042c2:	e02e      	b.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0xd22>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042c4:	4b8b      	ldr	r3, [pc, #556]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d02b      	beq.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80042d0:	4b88      	ldr	r3, [pc, #544]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d025      	beq.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80042dc:	4b85      	ldr	r3, [pc, #532]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	08db      	lsrs	r3, r3, #3
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	4a84      	ldr	r2, [pc, #528]	@ (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>)
 80042e8:	fa22 f303 	lsr.w	r3, r2, r3
 80042ec:	617b      	str	r3, [r7, #20]
          break;
 80042ee:	e01b      	b.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80042f0:	4b80      	ldr	r3, [pc, #512]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d018      	beq.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
            frequency = CSI_VALUE;
 80042fc:	4b7f      	ldr	r3, [pc, #508]	@ (80044fc <HAL_RCCEx_GetPeriphCLKFreq+0xefc>)
 80042fe:	617b      	str	r3, [r7, #20]
          break;
 8004300:	e015      	b.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004302:	4b7c      	ldr	r3, [pc, #496]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d012      	beq.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xd34>
            frequency = LSE_VALUE;
 800430e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004312:	617b      	str	r3, [r7, #20]
          break;
 8004314:	e00e      	b.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xd34>
          break;
 8004316:	bf00      	nop
 8004318:	f000 bcad 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800431c:	bf00      	nop
 800431e:	f000 bcaa 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004322:	bf00      	nop
 8004324:	f000 bca7 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004328:	bf00      	nop
 800432a:	f000 bca4 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800432e:	bf00      	nop
 8004330:	f000 bca1 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004334:	bf00      	nop
      break;
 8004336:	f000 bc9e 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 800433a:	4b6e      	ldr	r3, [pc, #440]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 800433c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 8494 	beq.w	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
        frequency = HAL_RCC_GetPLL3RFreq();
 8004348:	f7fd ff42 	bl	80021d0 <HAL_RCC_GetPLL3RFreq>
 800434c:	6178      	str	r0, [r7, #20]
      break;
 800434e:	f000 bc8f 	b.w	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
      clocksource = __HAL_RCC_GET_PSSI_SOURCE();
 8004352:	4b68      	ldr	r3, [pc, #416]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004356:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d004      	beq.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004368:	d00a      	beq.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0xd80>
          break;
 800436a:	e00e      	b.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xd8a>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 800436c:	4b61      	ldr	r3, [pc, #388]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 800436e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004370:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d007      	beq.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004378:	f7fd ff2a 	bl	80021d0 <HAL_RCC_GetPLL3RFreq>
 800437c:	6178      	str	r0, [r7, #20]
          break;
 800437e:	e003      	b.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
          frequency = RCC_GetCLKPFreq();
 8004380:	f000 fc92 	bl	8004ca8 <RCC_GetCLKPFreq>
 8004384:	6178      	str	r0, [r7, #20]
          break;
 8004386:	e000      	b.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xd8a>
          break;
 8004388:	bf00      	nop
      break;
 800438a:	f000 bc74 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_RTC_SOURCE();
 800438e:	4b59      	ldr	r3, [pc, #356]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004396:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800439a:	d107      	bne.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xdac>
 800439c:	4b55      	ldr	r3, [pc, #340]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
 80043a6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80043aa:	e003      	b.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80043ac:	4b51      	ldr	r3, [pc, #324]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043bc:	d014      	beq.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043c4:	d81a      	bhi.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d033      	beq.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043d2:	d113      	bne.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043d4:	4b47      	ldr	r3, [pc, #284]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d02c      	beq.n	800443a <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
            frequency = LSE_VALUE;
 80043e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043e4:	617b      	str	r3, [r7, #20]
          break;
 80043e6:	e028      	b.n	800443a <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043e8:	4b42      	ldr	r3, [pc, #264]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80043ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d025      	beq.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
            frequency = LSI_VALUE;
 80043f4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80043f8:	617b      	str	r3, [r7, #20]
          break;
 80043fa:	e021      	b.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL) == RCC_BDCR_RTCSEL) /*!< HSE is the clock source for RTC */
 80043fc:	4b3d      	ldr	r3, [pc, #244]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80043fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004400:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004404:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004408:	d11d      	bne.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800440a:	4b3a      	ldr	r3, [pc, #232]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d017      	beq.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
              prescaler = READ_BIT(RCC->CFGR, RCC_CFGR_RTCPRE) >> RCC_CFGR_RTCPRE_Pos;
 8004416:	4b37      	ldr	r3, [pc, #220]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	0a1b      	lsrs	r3, r3, #8
 800441c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004420:	60fb      	str	r3, [r7, #12]
              if (prescaler > 1U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d90e      	bls.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
                frequency = HSE_VALUE / prescaler;
 8004428:	4a35      	ldr	r2, [pc, #212]	@ (8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004430:	617b      	str	r3, [r7, #20]
          break;
 8004432:	e008      	b.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
          break;
 8004434:	bf00      	nop
 8004436:	f000 bc1e 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800443a:	bf00      	nop
 800443c:	f000 bc1b 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004440:	bf00      	nop
 8004442:	f000 bc18 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004446:	bf00      	nop
      break;
 8004448:	f000 bc15 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800444c:	4b29      	ldr	r3, [pc, #164]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 800444e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004450:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800445c:	d039      	beq.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004464:	d83d      	bhi.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800446c:	d035      	beq.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0xeda>
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004474:	d835      	bhi.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800447c:	d01f      	beq.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0xebe>
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004484:	d82d      	bhi.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d004      	beq.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
          break;
 8004494:	e025      	b.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004496:	4b17      	ldr	r3, [pc, #92]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d021      	beq.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
            frequency = HAL_RCC_GetPLL1QFreq();
 80044a2:	f7fd fde3 	bl	800206c <HAL_RCC_GetPLL1QFreq>
 80044a6:	6178      	str	r0, [r7, #20]
          break;
 80044a8:	e01d      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 80044aa:	4b12      	ldr	r3, [pc, #72]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d019      	beq.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0xeea>
            frequency = HAL_RCC_GetPLL2PFreq();
 80044b6:	f7fd fdef 	bl	8002098 <HAL_RCC_GetPLL2PFreq>
 80044ba:	6178      	str	r0, [r7, #20]
          break;
 80044bc:	e015      	b.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0xeea>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 80044be:	4b0d      	ldr	r3, [pc, #52]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80044c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d011      	beq.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0xeee>
            frequency = HAL_RCC_GetPLL3PFreq();
 80044ca:	f7fd fe55 	bl	8002178 <HAL_RCC_GetPLL3PFreq>
 80044ce:	6178      	str	r0, [r7, #20]
          break;
 80044d0:	e00d      	b.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0xeee>
          frequency = RCC_GetCLKPFreq();
 80044d2:	f000 fbe9 	bl	8004ca8 <RCC_GetCLKPFreq>
 80044d6:	6178      	str	r0, [r7, #20]
          break;
 80044d8:	e00a      	b.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
          frequency = EXTERNAL_CLOCK_VALUE;
 80044da:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80044de:	617b      	str	r3, [r7, #20]
          break;
 80044e0:	e006      	b.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
          break;
 80044e2:	bf00      	nop
 80044e4:	e3c7      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80044e6:	bf00      	nop
 80044e8:	e3c5      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80044ea:	bf00      	nop
 80044ec:	e3c3      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80044ee:	bf00      	nop
      break;
 80044f0:	e3c1      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 80044f2:	bf00      	nop
 80044f4:	58024400 	.word	0x58024400
 80044f8:	03d09000 	.word	0x03d09000
 80044fc:	003d0900 	.word	0x003d0900
 8004500:	016e3600 	.word	0x016e3600
      clocksource = __HAL_RCC_GET_SAI2_SOURCE();
 8004504:	4b94      	ldr	r3, [pc, #592]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004508:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004514:	d049      	beq.n	80045aa <HAL_RCCEx_GetPeriphCLKFreq+0xfaa>
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800451c:	d847      	bhi.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004524:	d039      	beq.n	800459a <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800452c:	d83f      	bhi.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004534:	d035      	beq.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa2>
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800453c:	d837      	bhi.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004544:	d01f      	beq.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0xf86>
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800454c:	d82f      	bhi.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d004      	beq.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800455a:	d00a      	beq.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0xf72>
          break;
 800455c:	e027      	b.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 800455e:	4b7e      	ldr	r3, [pc, #504]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004566:	2b00      	cmp	r3, #0
 8004568:	d023      	beq.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfb2>
            frequency = HAL_RCC_GetPLL1QFreq();
 800456a:	f7fd fd7f 	bl	800206c <HAL_RCC_GetPLL1QFreq>
 800456e:	6178      	str	r0, [r7, #20]
          break;
 8004570:	e01f      	b.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfb2>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004572:	4b79      	ldr	r3, [pc, #484]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004576:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d01b      	beq.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfb6>
            frequency = HAL_RCC_GetPLL2PFreq();
 800457e:	f7fd fd8b 	bl	8002098 <HAL_RCC_GetPLL2PFreq>
 8004582:	6178      	str	r0, [r7, #20]
          break;
 8004584:	e017      	b.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfb6>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004586:	4b74      	ldr	r3, [pc, #464]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d013      	beq.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
            frequency = HAL_RCC_GetPLL3PFreq();
 8004592:	f7fd fdf1 	bl	8002178 <HAL_RCC_GetPLL3PFreq>
 8004596:	6178      	str	r0, [r7, #20]
          break;
 8004598:	e00f      	b.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
          frequency = RCC_GetCLKPFreq();
 800459a:	f000 fb85 	bl	8004ca8 <RCC_GetCLKPFreq>
 800459e:	6178      	str	r0, [r7, #20]
          break;
 80045a0:	e00c      	b.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xfbc>
          frequency = EXTERNAL_CLOCK_VALUE;
 80045a2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80045a6:	617b      	str	r3, [r7, #20]
          break;
 80045a8:	e008      	b.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xfbc>
          break;
 80045aa:	bf00      	nop
 80045ac:	e363      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80045ae:	bf00      	nop
 80045b0:	e361      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80045b2:	bf00      	nop
 80045b4:	e35f      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80045b6:	bf00      	nop
 80045b8:	e35d      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80045ba:	bf00      	nop
      break;
 80045bc:	e35b      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SDMMC12_SOURCE();
 80045be:	4b66      	ldr	r3, [pc, #408]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80045c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	613b      	str	r3, [r7, #16]
      if (clocksource ==
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
        if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 80045ce:	4b62      	ldr	r3, [pc, #392]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80045d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 834c 	beq.w	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
          frequency = HAL_RCC_GetPLL2SFreq();
 80045dc:	f7fd fd9e 	bl	800211c <HAL_RCC_GetPLL2SFreq>
 80045e0:	6178      	str	r0, [r7, #20]
      break;
 80045e2:	e347      	b.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_TCLK) != 0U)
 80045e4:	4b5c      	ldr	r3, [pc, #368]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80045e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 8341 	beq.w	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
          frequency = HAL_RCC_GetPLL2TFreq();
 80045f2:	f7fd fda9 	bl	8002148 <HAL_RCC_GetPLL2TFreq>
 80045f6:	6178      	str	r0, [r7, #20]
      break;
 80045f8:	e33c      	b.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
      clocksource = __HAL_RCC_GET_SPDIFRX_SOURCE();
 80045fa:	4b57      	ldr	r3, [pc, #348]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80045fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045fe:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800460a:	d031      	beq.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x1070>
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004612:	d843      	bhi.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x109c>
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800461a:	d01f      	beq.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004622:	d83b      	bhi.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x109c>
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d004      	beq.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004630:	d00a      	beq.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
          break;
 8004632:	e033      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x109c>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004634:	4b48      	ldr	r3, [pc, #288]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800463c:	2b00      	cmp	r3, #0
 800463e:	d02f      	beq.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
            frequency = HAL_RCC_GetPLL1QFreq();
 8004640:	f7fd fd14 	bl	800206c <HAL_RCC_GetPLL1QFreq>
 8004644:	6178      	str	r0, [r7, #20]
          break;
 8004646:	e02b      	b.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004648:	4b43      	ldr	r3, [pc, #268]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 800464a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d027      	beq.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
            frequency = HAL_RCC_GetPLL2RFreq();
 8004654:	f7fd fd4c 	bl	80020f0 <HAL_RCC_GetPLL2RFreq>
 8004658:	6178      	str	r0, [r7, #20]
          break;
 800465a:	e023      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 800465c:	4b3e      	ldr	r3, [pc, #248]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 800465e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004660:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01f      	beq.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a8>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004668:	f7fd fdb2 	bl	80021d0 <HAL_RCC_GetPLL3RFreq>
 800466c:	6178      	str	r0, [r7, #20]
          break;
 800466e:	e01b      	b.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a8>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004670:	4b39      	ldr	r3, [pc, #228]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d017      	beq.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800467c:	4b36      	ldr	r3, [pc, #216]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	d011      	beq.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004688:	4b33      	ldr	r3, [pc, #204]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	08db      	lsrs	r3, r3, #3
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	4a32      	ldr	r2, [pc, #200]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x115c>)
 8004694:	fa22 f303 	lsr.w	r3, r2, r3
 8004698:	617b      	str	r3, [r7, #20]
          break;
 800469a:	e007      	b.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
          break;
 800469c:	bf00      	nop
 800469e:	e2ea      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80046a0:	bf00      	nop
 80046a2:	e2e8      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80046a4:	bf00      	nop
 80046a6:	e2e6      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80046a8:	bf00      	nop
 80046aa:	e2e4      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80046ac:	bf00      	nop
      break;
 80046ae:	e2e2      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SPI1_SOURCE();
 80046b0:	4b29      	ldr	r3, [pc, #164]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80046b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046c0:	d039      	beq.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046c8:	d83d      	bhi.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046d0:	d035      	beq.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x113e>
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046d8:	d835      	bhi.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e0:	d01f      	beq.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e8:	d82d      	bhi.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d004      	beq.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x10fa>
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046f6:	d00a      	beq.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x110e>
          break;
 80046f8:	e025      	b.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 80046fa:	4b17      	ldr	r3, [pc, #92]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80046fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	d021      	beq.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x114a>
            frequency = HAL_RCC_GetPLL1QFreq();
 8004706:	f7fd fcb1 	bl	800206c <HAL_RCC_GetPLL1QFreq>
 800470a:	6178      	str	r0, [r7, #20]
          break;
 800470c:	e01d      	b.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x114a>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 800470e:	4b12      	ldr	r3, [pc, #72]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004712:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d019      	beq.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
            frequency = HAL_RCC_GetPLL2PFreq();
 800471a:	f7fd fcbd 	bl	8002098 <HAL_RCC_GetPLL2PFreq>
 800471e:	6178      	str	r0, [r7, #20]
          break;
 8004720:	e015      	b.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004722:	4b0d      	ldr	r3, [pc, #52]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004726:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d011      	beq.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
            frequency = HAL_RCC_GetPLL3PFreq();
 800472e:	f7fd fd23 	bl	8002178 <HAL_RCC_GetPLL3PFreq>
 8004732:	6178      	str	r0, [r7, #20]
          break;
 8004734:	e00d      	b.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
          frequency = RCC_GetCLKPFreq();
 8004736:	f000 fab7 	bl	8004ca8 <RCC_GetCLKPFreq>
 800473a:	6178      	str	r0, [r7, #20]
          break;
 800473c:	e00a      	b.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x1154>
          frequency = EXTERNAL_CLOCK_VALUE;
 800473e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004742:	617b      	str	r3, [r7, #20]
          break;
 8004744:	e006      	b.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x1154>
          break;
 8004746:	bf00      	nop
 8004748:	e295      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800474a:	bf00      	nop
 800474c:	e293      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800474e:	bf00      	nop
 8004750:	e291      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004752:	bf00      	nop
      break;
 8004754:	e28f      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8004756:	bf00      	nop
 8004758:	58024400 	.word	0x58024400
 800475c:	03d09000 	.word	0x03d09000
      clocksource = __HAL_RCC_GET_SPI23_SOURCE();
 8004760:	4b92      	ldr	r3, [pc, #584]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004764:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b40      	cmp	r3, #64	@ 0x40
 800476e:	d033      	beq.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b40      	cmp	r3, #64	@ 0x40
 8004774:	d838      	bhi.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b30      	cmp	r3, #48	@ 0x30
 800477a:	d031      	beq.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2b30      	cmp	r3, #48	@ 0x30
 8004780:	d832      	bhi.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	2b20      	cmp	r3, #32
 8004786:	d01d      	beq.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2b20      	cmp	r3, #32
 800478c:	d82c      	bhi.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x119c>
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	2b10      	cmp	r3, #16
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
          break;
 800479a:	e025      	b.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 800479c:	4b83      	ldr	r3, [pc, #524]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800479e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d021      	beq.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
            frequency = HAL_RCC_GetPLL1QFreq();
 80047a8:	f7fd fc60 	bl	800206c <HAL_RCC_GetPLL1QFreq>
 80047ac:	6178      	str	r0, [r7, #20]
          break;
 80047ae:	e01d      	b.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 80047b0:	4b7e      	ldr	r3, [pc, #504]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80047b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d019      	beq.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11f0>
            frequency = HAL_RCC_GetPLL2PFreq();
 80047bc:	f7fd fc6c 	bl	8002098 <HAL_RCC_GetPLL2PFreq>
 80047c0:	6178      	str	r0, [r7, #20]
          break;
 80047c2:	e015      	b.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11f0>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 80047c4:	4b79      	ldr	r3, [pc, #484]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80047c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d011      	beq.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11f4>
            frequency = HAL_RCC_GetPLL3PFreq();
 80047d0:	f7fd fcd2 	bl	8002178 <HAL_RCC_GetPLL3PFreq>
 80047d4:	6178      	str	r0, [r7, #20]
          break;
 80047d6:	e00d      	b.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11f4>
          frequency = RCC_GetCLKPFreq();
 80047d8:	f000 fa66 	bl	8004ca8 <RCC_GetCLKPFreq>
 80047dc:	6178      	str	r0, [r7, #20]
          break;
 80047de:	e00a      	b.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x11f6>
          frequency = EXTERNAL_CLOCK_VALUE;
 80047e0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80047e4:	617b      	str	r3, [r7, #20]
          break;
 80047e6:	e006      	b.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x11f6>
          break;
 80047e8:	bf00      	nop
 80047ea:	e244      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80047ec:	bf00      	nop
 80047ee:	e242      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80047f0:	bf00      	nop
 80047f2:	e240      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80047f4:	bf00      	nop
      break;
 80047f6:	e23e      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SPI45_SOURCE();
 80047f8:	4b6c      	ldr	r3, [pc, #432]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80047fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b50      	cmp	r3, #80	@ 0x50
 8004806:	d052      	beq.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	2b50      	cmp	r3, #80	@ 0x50
 800480c:	d858      	bhi.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	2b40      	cmp	r3, #64	@ 0x40
 8004812:	d043      	beq.n	800489c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	2b40      	cmp	r3, #64	@ 0x40
 8004818:	d852      	bhi.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2b30      	cmp	r3, #48	@ 0x30
 800481e:	d027      	beq.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2b30      	cmp	r3, #48	@ 0x30
 8004824:	d84c      	bhi.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b20      	cmp	r3, #32
 800482a:	d017      	beq.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	2b20      	cmp	r3, #32
 8004830:	d846      	bhi.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	2b10      	cmp	r3, #16
 800483c:	d004      	beq.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
          break;
 800483e:	e03f      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004840:	f7fd fbdc 	bl	8001ffc <HAL_RCC_GetPCLK2Freq>
 8004844:	6178      	str	r0, [r7, #20]
          break;
 8004846:	e046      	b.n	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004848:	4b58      	ldr	r3, [pc, #352]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800484a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d037      	beq.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c4>
            frequency = HAL_RCC_GetPLL2QFreq();
 8004854:	f7fd fc36 	bl	80020c4 <HAL_RCC_GetPLL2QFreq>
 8004858:	6178      	str	r0, [r7, #20]
          break;
 800485a:	e033      	b.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 800485c:	4b53      	ldr	r3, [pc, #332]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800485e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d02f      	beq.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c8>
            frequency = HAL_RCC_GetPLL3QFreq();
 8004868:	f7fd fc9c 	bl	80021a4 <HAL_RCC_GetPLL3QFreq>
 800486c:	6178      	str	r0, [r7, #20]
          break;
 800486e:	e02b      	b.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c8>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004870:	4b4e      	ldr	r3, [pc, #312]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d027      	beq.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800487c:	4b4b      	ldr	r3, [pc, #300]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d021      	beq.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004888:	4b48      	ldr	r3, [pc, #288]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	08db      	lsrs	r3, r3, #3
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	4a47      	ldr	r2, [pc, #284]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
 8004898:	617b      	str	r3, [r7, #20]
          break;
 800489a:	e017      	b.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800489c:	4b43      	ldr	r3, [pc, #268]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d013      	beq.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>
            frequency = CSI_VALUE;
 80048a8:	4b42      	ldr	r3, [pc, #264]	@ (80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80048aa:	617b      	str	r3, [r7, #20]
          break;
 80048ac:	e010      	b.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ae:	4b3f      	ldr	r3, [pc, #252]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00c      	beq.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
            frequency = HSE_VALUE;
 80048ba:	4b3f      	ldr	r3, [pc, #252]	@ (80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 80048bc:	617b      	str	r3, [r7, #20]
          break;
 80048be:	e009      	b.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
          break;
 80048c0:	bf00      	nop
 80048c2:	e1d8      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80048c4:	bf00      	nop
 80048c6:	e1d6      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80048c8:	bf00      	nop
 80048ca:	e1d4      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80048cc:	bf00      	nop
 80048ce:	e1d2      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80048d0:	bf00      	nop
 80048d2:	e1d0      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80048d4:	bf00      	nop
      break;
 80048d6:	e1ce      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SPI6_SOURCE();
 80048d8:	4b34      	ldr	r3, [pc, #208]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80048da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b50      	cmp	r3, #80	@ 0x50
 80048e6:	d052      	beq.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x138e>
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	2b50      	cmp	r3, #80	@ 0x50
 80048ec:	d858      	bhi.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2b40      	cmp	r3, #64	@ 0x40
 80048f2:	d043      	beq.n	800497c <HAL_RCCEx_GetPeriphCLKFreq+0x137c>
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	2b40      	cmp	r3, #64	@ 0x40
 80048f8:	d852      	bhi.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2b30      	cmp	r3, #48	@ 0x30
 80048fe:	d027      	beq.n	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	2b30      	cmp	r3, #48	@ 0x30
 8004904:	d84c      	bhi.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	2b20      	cmp	r3, #32
 800490a:	d017      	beq.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0x133c>
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	2b20      	cmp	r3, #32
 8004910:	d846      	bhi.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x1320>
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	2b10      	cmp	r3, #16
 800491c:	d004      	beq.n	8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x1328>
          break;
 800491e:	e03f      	b.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
          frequency = HAL_RCC_GetPCLK4Freq();
 8004920:	f7fd fb88 	bl	8002034 <HAL_RCC_GetPCLK4Freq>
 8004924:	6178      	str	r0, [r7, #20]
          break;
 8004926:	e04e      	b.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004928:	4b20      	ldr	r3, [pc, #128]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800492a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d037      	beq.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
            frequency = HAL_RCC_GetPLL2QFreq();
 8004934:	f7fd fbc6 	bl	80020c4 <HAL_RCC_GetPLL2QFreq>
 8004938:	6178      	str	r0, [r7, #20]
          break;
 800493a:	e033      	b.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 800493c:	4b1b      	ldr	r3, [pc, #108]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800493e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d02f      	beq.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = HAL_RCC_GetPLL3QFreq();
 8004948:	f7fd fc2c 	bl	80021a4 <HAL_RCC_GetPLL3QFreq>
 800494c:	6178      	str	r0, [r7, #20]
          break;
 800494e:	e02b      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004950:	4b16      	ldr	r3, [pc, #88]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d02f      	beq.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800495c:	4b13      	ldr	r3, [pc, #76]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b00      	cmp	r3, #0
 8004966:	d029      	beq.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004968:	4b10      	ldr	r3, [pc, #64]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	08db      	lsrs	r3, r3, #3
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	4a0f      	ldr	r2, [pc, #60]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 8004974:	fa22 f303 	lsr.w	r3, r2, r3
 8004978:	617b      	str	r3, [r7, #20]
          break;
 800497a:	e01f      	b.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800497c:	4b0b      	ldr	r3, [pc, #44]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01b      	beq.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>
            frequency = CSI_VALUE;
 8004988:	4b0a      	ldr	r3, [pc, #40]	@ (80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800498a:	617b      	str	r3, [r7, #20]
          break;
 800498c:	e018      	b.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800498e:	4b07      	ldr	r3, [pc, #28]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d014      	beq.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c4>
            frequency = HSE_VALUE;
 800499a:	4b07      	ldr	r3, [pc, #28]	@ (80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 800499c:	617b      	str	r3, [r7, #20]
          break;
 800499e:	e011      	b.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c4>
          break;
 80049a0:	bf00      	nop
 80049a2:	e168      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80049a4:	bf00      	nop
 80049a6:	e166      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80049a8:	bf00      	nop
 80049aa:	e164      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 80049ac:	58024400 	.word	0x58024400
 80049b0:	03d09000 	.word	0x03d09000
 80049b4:	003d0900 	.word	0x003d0900
 80049b8:	016e3600 	.word	0x016e3600
          break;
 80049bc:	bf00      	nop
 80049be:	e15a      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80049c0:	bf00      	nop
 80049c2:	e158      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80049c4:	bf00      	nop
      break;
 80049c6:	e156      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USART1_SOURCE();
 80049c8:	4b9e      	ldr	r3, [pc, #632]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 80049ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b05      	cmp	r3, #5
 80049d6:	d850      	bhi.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 80049d8:	a201      	add	r2, pc, #4	@ (adr r2, 80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 80049da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049de:	bf00      	nop
 80049e0:	080049f9 	.word	0x080049f9
 80049e4:	08004a01 	.word	0x08004a01
 80049e8:	08004a15 	.word	0x08004a15
 80049ec:	08004a29 	.word	0x08004a29
 80049f0:	08004a55 	.word	0x08004a55
 80049f4:	08004a67 	.word	0x08004a67
          frequency = HAL_RCC_GetPCLK2Freq();
 80049f8:	f7fd fb00 	bl	8001ffc <HAL_RCC_GetPCLK2Freq>
 80049fc:	6178      	str	r0, [r7, #20]
          break;
 80049fe:	e047      	b.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004a00:	4b90      	ldr	r3, [pc, #576]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d038      	beq.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
            frequency = HAL_RCC_GetPLL2QFreq();
 8004a0c:	f7fd fb5a 	bl	80020c4 <HAL_RCC_GetPLL2QFreq>
 8004a10:	6178      	str	r0, [r7, #20]
          break;
 8004a12:	e034      	b.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004a14:	4b8b      	ldr	r3, [pc, #556]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d030      	beq.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
            frequency = HAL_RCC_GetPLL3QFreq();
 8004a20:	f7fd fbc0 	bl	80021a4 <HAL_RCC_GetPLL3QFreq>
 8004a24:	6178      	str	r0, [r7, #20]
          break;
 8004a26:	e02c      	b.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a28:	4b86      	ldr	r3, [pc, #536]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d028      	beq.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1486>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004a34:	4b83      	ldr	r3, [pc, #524]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d022      	beq.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1486>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a40:	4b80      	ldr	r3, [pc, #512]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	08db      	lsrs	r3, r3, #3
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	4a7f      	ldr	r2, [pc, #508]	@ (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1648>)
 8004a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a50:	617b      	str	r3, [r7, #20]
          break;
 8004a52:	e018      	b.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1486>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004a54:	4b7b      	ldr	r3, [pc, #492]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d014      	beq.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
            frequency = CSI_VALUE;
 8004a60:	4b7a      	ldr	r3, [pc, #488]	@ (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>)
 8004a62:	617b      	str	r3, [r7, #20]
          break;
 8004a64:	e011      	b.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a66:	4b77      	ldr	r3, [pc, #476]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00d      	beq.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
            frequency = LSE_VALUE;
 8004a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a76:	617b      	str	r3, [r7, #20]
          break;
 8004a78:	e009      	b.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
          break;
 8004a7a:	bf00      	nop
 8004a7c:	e0fb      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004a7e:	bf00      	nop
 8004a80:	e0f9      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004a82:	bf00      	nop
 8004a84:	e0f7      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004a86:	bf00      	nop
 8004a88:	e0f5      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004a8a:	bf00      	nop
 8004a8c:	e0f3      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004a8e:	bf00      	nop
      break;
 8004a90:	e0f1      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USART234578_SOURCE();
 8004a92:	4b6c      	ldr	r3, [pc, #432]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004a94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	613b      	str	r3, [r7, #16]
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2b05      	cmp	r3, #5
 8004aa0:	d84f      	bhi.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1542>
 8004aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a8>)
 8004aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa8:	08004ac1 	.word	0x08004ac1
 8004aac:	08004ac9 	.word	0x08004ac9
 8004ab0:	08004add 	.word	0x08004add
 8004ab4:	08004af1 	.word	0x08004af1
 8004ab8:	08004b1d 	.word	0x08004b1d
 8004abc:	08004b2f 	.word	0x08004b2f
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ac0:	f7fd fa80 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 8004ac4:	6178      	str	r0, [r7, #20]
          break;
 8004ac6:	e047      	b.n	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004ac8:	4b5e      	ldr	r3, [pc, #376]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d038      	beq.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
            frequency = HAL_RCC_GetPLL2QFreq();
 8004ad4:	f7fd faf6 	bl	80020c4 <HAL_RCC_GetPLL2QFreq>
 8004ad8:	6178      	str	r0, [r7, #20]
          break;
 8004ada:	e034      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004adc:	4b59      	ldr	r3, [pc, #356]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d030      	beq.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x154a>
            frequency = HAL_RCC_GetPLL3QFreq();
 8004ae8:	f7fd fb5c 	bl	80021a4 <HAL_RCC_GetPLL3QFreq>
 8004aec:	6178      	str	r0, [r7, #20]
          break;
 8004aee:	e02c      	b.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x154a>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004af0:	4b54      	ldr	r3, [pc, #336]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d028      	beq.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x154e>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004afc:	4b51      	ldr	r3, [pc, #324]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d022      	beq.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x154e>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b08:	4b4e      	ldr	r3, [pc, #312]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	08db      	lsrs	r3, r3, #3
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	4a4d      	ldr	r2, [pc, #308]	@ (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1648>)
 8004b14:	fa22 f303 	lsr.w	r3, r2, r3
 8004b18:	617b      	str	r3, [r7, #20]
          break;
 8004b1a:	e018      	b.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x154e>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004b1c:	4b49      	ldr	r3, [pc, #292]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d014      	beq.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x1552>
            frequency = CSI_VALUE;
 8004b28:	4b48      	ldr	r3, [pc, #288]	@ (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>)
 8004b2a:	617b      	str	r3, [r7, #20]
          break;
 8004b2c:	e011      	b.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x1552>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b2e:	4b45      	ldr	r3, [pc, #276]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00d      	beq.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x1556>
            frequency = LSE_VALUE;
 8004b3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b3e:	617b      	str	r3, [r7, #20]
          break;
 8004b40:	e009      	b.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x1556>
          break;
 8004b42:	bf00      	nop
 8004b44:	e097      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004b46:	bf00      	nop
 8004b48:	e095      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004b4a:	bf00      	nop
 8004b4c:	e093      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004b4e:	bf00      	nop
 8004b50:	e091      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004b52:	bf00      	nop
 8004b54:	e08f      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004b56:	bf00      	nop
      break;
 8004b58:	e08d      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USBPHYC_SOURCE();
 8004b5a:	4b3a      	ldr	r3, [pc, #232]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b5e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b6a:	d01d      	beq.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x15a8>
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b72:	d823      	bhi.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x15bc>
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d004      	beq.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1584>
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b80:	d009      	beq.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
          break;
 8004b82:	e01b      	b.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x15bc>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b84:	4b2f      	ldr	r3, [pc, #188]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d017      	beq.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c0>
            frequency = HSE_VALUE;
 8004b90:	4b2f      	ldr	r3, [pc, #188]	@ (8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1650>)
 8004b92:	617b      	str	r3, [r7, #20]
          break;
 8004b94:	e014      	b.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b96:	4b2b      	ldr	r3, [pc, #172]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d010      	beq.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c4>
            frequency = (HSE_VALUE >> 1UL);
 8004ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>)
 8004ba4:	617b      	str	r3, [r7, #20]
          break;
 8004ba6:	e00d      	b.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004ba8:	4b26      	ldr	r3, [pc, #152]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d009      	beq.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c8>
            frequency = HAL_RCC_GetPLL3QFreq();
 8004bb4:	f7fd faf6 	bl	80021a4 <HAL_RCC_GetPLL3QFreq>
 8004bb8:	6178      	str	r0, [r7, #20]
          break;
 8004bba:	e005      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c8>
          break;
 8004bbc:	bf00      	nop
 8004bbe:	e05a      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004bc0:	bf00      	nop
 8004bc2:	e058      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004bc4:	bf00      	nop
 8004bc6:	e056      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004bc8:	bf00      	nop
      break;
 8004bca:	e054      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USBOTGFS_SOURCE();
 8004bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004bdc:	d02f      	beq.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x163e>
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004be4:	d83a      	bhi.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x165c>
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bec:	d01e      	beq.n	8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bf4:	d832      	bhi.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x165c>
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d004      	beq.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c02:	d009      	beq.n	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
          break;
 8004c04:	e02a      	b.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x165c>
          if (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004c06:	4b0f      	ldr	r3, [pc, #60]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d026      	beq.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1660>
            frequency = HSI48_VALUE;
 8004c12:	4b11      	ldr	r3, [pc, #68]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1658>)
 8004c14:	617b      	str	r3, [r7, #20]
          break;
 8004c16:	e023      	b.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1660>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004c18:	4b0a      	ldr	r3, [pc, #40]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01f      	beq.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
            frequency = HAL_RCC_GetPLL3QFreq();
 8004c24:	f7fd fabe 	bl	80021a4 <HAL_RCC_GetPLL3QFreq>
 8004c28:	6178      	str	r0, [r7, #20]
          break;
 8004c2a:	e01b      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c2c:	4b05      	ldr	r3, [pc, #20]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d017      	beq.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
            frequency = HSE_VALUE;
 8004c38:	4b05      	ldr	r3, [pc, #20]	@ (8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1650>)
 8004c3a:	617b      	str	r3, [r7, #20]
          break;
 8004c3c:	e014      	b.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
          break;
 8004c3e:	bf00      	nop
 8004c40:	e019      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8004c42:	bf00      	nop
 8004c44:	58024400 	.word	0x58024400
 8004c48:	03d09000 	.word	0x03d09000
 8004c4c:	003d0900 	.word	0x003d0900
 8004c50:	016e3600 	.word	0x016e3600
 8004c54:	00b71b00 	.word	0x00b71b00
 8004c58:	02dc6c00 	.word	0x02dc6c00
          break;
 8004c5c:	bf00      	nop
 8004c5e:	e00a      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004c60:	bf00      	nop
 8004c62:	e008      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004c64:	bf00      	nop
 8004c66:	e006      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004c68:	bf00      	nop
      break;
 8004c6a:	e004      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      break;
 8004c6c:	bf00      	nop
 8004c6e:	e002      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      break;
 8004c70:	bf00      	nop
 8004c72:	e000      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      break;
 8004c74:	bf00      	nop
  }

  return frequency;
 8004c76:	697b      	ldr	r3, [r7, #20]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_RCCEx_EnableClockProtection>:
  *            @arg RCC_CLOCKPROTECT_FMC     FMC clock protection
  *            @arg RCC_CLOCKPROTECT_XSPI    XSPIs clock protection
  * @retval None
  */
void HAL_RCCEx_EnableClockProtection(uint32_t ProtectClk)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_RCC_CLOCKPROTECTION(ProtectClk));

  SET_BIT(RCC->CKPROTR, ProtectClk);
 8004c88:	4b06      	ldr	r3, [pc, #24]	@ (8004ca4 <HAL_RCCEx_EnableClockProtection+0x24>)
 8004c8a:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004c8e:	4905      	ldr	r1, [pc, #20]	@ (8004ca4 <HAL_RCCEx_EnableClockProtection+0x24>)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	58024400 	.word	0x58024400

08004ca8 <RCC_GetCLKPFreq>:
/**
  * @brief  Compute PLL2 VCO output frequency
  * @retval Value of PLL2 VCO output frequency
  */
static uint32_t RCC_GetCLKPFreq(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	607b      	str	r3, [r7, #4]
  uint32_t ckpclocksource;

  ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d30 <RCC_GetCLKPFreq+0x88>)
 8004cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cb6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004cba:	603b      	str	r3, [r7, #0]

  if (ckpclocksource == RCC_CLKPSOURCE_HSI)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d115      	bne.n	8004cee <RCC_GetCLKPFreq+0x46>
  {
    if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d30 <RCC_GetCLKPFreq+0x88>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d028      	beq.n	8004d20 <RCC_GetCLKPFreq+0x78>
    {
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004cce:	4b18      	ldr	r3, [pc, #96]	@ (8004d30 <RCC_GetCLKPFreq+0x88>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d022      	beq.n	8004d20 <RCC_GetCLKPFreq+0x78>
      {
        frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004cda:	4b15      	ldr	r3, [pc, #84]	@ (8004d30 <RCC_GetCLKPFreq+0x88>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	08db      	lsrs	r3, r3, #3
 8004ce0:	f003 0303 	and.w	r3, r3, #3
 8004ce4:	4a13      	ldr	r2, [pc, #76]	@ (8004d34 <RCC_GetCLKPFreq+0x8c>)
 8004ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cea:	607b      	str	r3, [r7, #4]
 8004cec:	e018      	b.n	8004d20 <RCC_GetCLKPFreq+0x78>
      {
        /* Can't retrieve HSIDIV value */
      }
    }
  }
  else if (ckpclocksource == RCC_CLKPSOURCE_CSI)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cf4:	d108      	bne.n	8004d08 <RCC_GetCLKPFreq+0x60>
  {
    if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8004d30 <RCC_GetCLKPFreq+0x88>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00e      	beq.n	8004d20 <RCC_GetCLKPFreq+0x78>
    {
      frequency = CSI_VALUE;
 8004d02:	4b0d      	ldr	r3, [pc, #52]	@ (8004d38 <RCC_GetCLKPFreq+0x90>)
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	e00b      	b.n	8004d20 <RCC_GetCLKPFreq+0x78>
    }
  }
  else if (ckpclocksource == RCC_CLKPSOURCE_HSE)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d0e:	d107      	bne.n	8004d20 <RCC_GetCLKPFreq+0x78>
  {
    if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d10:	4b07      	ldr	r3, [pc, #28]	@ (8004d30 <RCC_GetCLKPFreq+0x88>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <RCC_GetCLKPFreq+0x78>
    {
      frequency = HSE_VALUE;
 8004d1c:	4b07      	ldr	r3, [pc, #28]	@ (8004d3c <RCC_GetCLKPFreq+0x94>)
 8004d1e:	607b      	str	r3, [r7, #4]
  {
    /* Nothing to do, case the CKPER is disabled */
    /* frequency is by default set to 0          */
  }

  return frequency;
 8004d20:	687b      	ldr	r3, [r7, #4]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	58024400 	.word	0x58024400
 8004d34:	03d09000 	.word	0x03d09000
 8004d38:	003d0900 	.word	0x003d0900
 8004d3c:	016e3600 	.word	0x016e3600

08004d40 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004d4c:	f7fb fe42 	bl	80009d4 <HAL_GetTick>
 8004d50:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d102      	bne.n	8004d5e <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	73fb      	strb	r3, [r7, #15]
 8004d5c:	e0cb      	b.n	8004ef6 <HAL_XSPI_Init+0x1b6>
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f040 80c4 	bne.w	8004ef6 <HAL_XSPI_Init+0x1b6>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fb fcea 	bl	8000748 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8004d74:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fbce 	bl	800551a <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	4b5e      	ldr	r3, [pc, #376]	@ (8004f00 <HAL_XSPI_Init+0x1c0>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	68d1      	ldr	r1, [r2, #12]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6912      	ldr	r2, [r2, #16]
 8004d90:	0412      	lsls	r2, r2, #16
 8004d92:	4311      	orrs	r1, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6952      	ldr	r2, [r2, #20]
 8004d98:	3a01      	subs	r2, #1
 8004d9a:	0212      	lsls	r2, r2, #8
 8004d9c:	4311      	orrs	r1, r2
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	69d2      	ldr	r2, [r2, #28]
 8004da2:	4311      	orrs	r1, r2
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	430b      	orrs	r3, r1
 8004daa:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1a      	ldr	r2, [r3, #32]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd0:	041a      	lsls	r2, r3, #16
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	611a      	str	r2, [r3, #16]
                 (hxspi->Init.MaxTran << XSPI_DCR3_MAXTRAN_Pos));

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004df8:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	021a      	lsls	r2, r3, #8
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2120      	movs	r1, #32
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fc79 	bl	8005718 <XSPI_WaitFlagStateUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d162      	bne.n	8004ef6 <HAL_XSPI_Init+0x1b6>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a2e      	ldr	r2, [pc, #184]	@ (8004f04 <HAL_XSPI_Init+0x1c4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d004      	beq.n	8004e5a <HAL_XSPI_Init+0x11a>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a2c      	ldr	r2, [pc, #176]	@ (8004f08 <HAL_XSPI_Init+0x1c8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d10f      	bne.n	8004e7a <HAL_XSPI_Init+0x13a>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2200      	movs	r2, #0
 8004e64:	2120      	movs	r1, #32
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fc56 	bl	8005718 <XSPI_WaitFlagStateUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <HAL_XSPI_Init+0x13a>
          {
            return status;
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	e03e      	b.n	8004ef8 <HAL_XSPI_Init+0x1b8>
          }
        }
        /* Configure Dual Memory mode and CS Selection */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	4b22      	ldr	r3, [pc, #136]	@ (8004f0c <HAL_XSPI_Init+0x1cc>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6891      	ldr	r1, [r2, #8]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e8c:	4311      	orrs	r1, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6812      	ldr	r2, [r2, #0]
 8004e92:	430b      	orrs	r3, r1
 8004e94:	6013      	str	r3, [r2, #0]
                   (hxspi->Init.MemoryMode | hxspi->Init.MemorySelect));

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004e9e:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f042 0201 	orr.w	r2, r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d107      	bne.n	8004ede <HAL_XSPI_Init+0x19e>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0202 	orr.w	r2, r2, #2
 8004edc:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ee6:	d103      	bne.n	8004ef0 <HAL_XSPI_Init+0x1b0>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	655a      	str	r2, [r3, #84]	@ 0x54
 8004eee:	e002      	b.n	8004ef6 <HAL_XSPI_Init+0x1b6>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	f8e0c0fc 	.word	0xf8e0c0fc
 8004f04:	52005000 	.word	0x52005000
 8004f08:	5200a000 	.word	0x5200a000
 8004f0c:	feffffbf 	.word	0xfeffffbf

08004f10 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08a      	sub	sp, #40	@ 0x28
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8004f1c:	f7fb fd5a 	bl	80009d4 <HAL_GetTick>
 8004f20:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f26:	2b00      	cmp	r3, #0
  }

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));

  /* Check the state of the driver */
  state = hxspi->State;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f2c:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d104      	bne.n	8004f3e <HAL_XSPI_Command+0x2e>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f3c:	d115      	bne.n	8004f6a <HAL_XSPI_Command+0x5a>
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b14      	cmp	r3, #20
 8004f42:	d107      	bne.n	8004f54 <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d00e      	beq.n	8004f6a <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d00a      	beq.n	8004f6a <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2b24      	cmp	r3, #36	@ 0x24
 8004f58:	d15e      	bne.n	8005018 <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d003      	beq.n	8004f6a <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d156      	bne.n	8005018 <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2200      	movs	r2, #0
 8004f72:	2120      	movs	r1, #32
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 fbcf 	bl	8005718 <XSPI_WaitFlagStateUntilTimeout>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8004f7e:	7ffb      	ldrb	r3, [r7, #31]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d146      	bne.n	8005012 <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 fbf9 	bl	8005784 <XSPI_ConfigCmd>
 8004f92:	4603      	mov	r3, r0
 8004f94:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8004f96:	7ffb      	ldrb	r3, [r7, #31]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d143      	bne.n	8005024 <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10e      	bne.n	8004fc2 <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	2201      	movs	r2, #1
 8004fac:	2102      	movs	r1, #2
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 fbb2 	bl	8005718 <XSPI_WaitFlagStateUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	77fb      	strb	r3, [r7, #31]

          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8004fc0:	e030      	b.n	8005024 <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d103      	bne.n	8004fd2 <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2204      	movs	r2, #4
 8004fce:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8004fd0:	e028      	b.n	8005024 <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d10b      	bne.n	8004ff2 <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fde:	2b24      	cmp	r3, #36	@ 0x24
 8004fe0:	d103      	bne.n	8004fea <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2204      	movs	r2, #4
 8004fe6:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8004fe8:	e01c      	b.n	8005024 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2214      	movs	r2, #20
 8004fee:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8004ff0:	e018      	b.n	8005024 <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d114      	bne.n	8005024 <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ffe:	2b14      	cmp	r3, #20
 8005000:	d103      	bne.n	800500a <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2204      	movs	r2, #4
 8005006:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005008:	e00c      	b.n	8005024 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2224      	movs	r2, #36	@ 0x24
 800500e:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005010:	e008      	b.n	8005024 <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 8005012:	2302      	movs	r3, #2
 8005014:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 8005016:	e005      	b.n	8005024 <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2210      	movs	r2, #16
 8005020:	659a      	str	r2, [r3, #88]	@ 0x58
 8005022:	e000      	b.n	8005026 <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
 8005024:	bf00      	nop
  }

  return status;
 8005026:	7ffb      	ldrb	r3, [r7, #31]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3720      	adds	r7, #32
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08a      	sub	sp, #40	@ 0x28
 8005034:	af02      	add	r7, sp, #8
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800503c:	f7fb fcca 	bl	80009d4 <HAL_GetTick>
 8005040:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3350      	adds	r3, #80	@ 0x50
 8005048:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d105      	bne.n	800505c <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2208      	movs	r2, #8
 8005058:	659a      	str	r2, [r3, #88]	@ 0x58
 800505a:	e057      	b.n	800510c <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005060:	2b04      	cmp	r3, #4
 8005062:	d14e      	bne.n	8005102 <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->XferSize  = hxspi->XferCount;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->pBuffPtr  = (uint8_t *)pData;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800508c:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	2201      	movs	r2, #1
 8005096:	2104      	movs	r1, #4
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 fb3d 	bl	8005718 <XSPI_WaitFlagStateUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80050a2:	7ffb      	ldrb	r3, [r7, #31]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d113      	bne.n	80050d0 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ac:	781a      	ldrb	r2, [r3, #0]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	641a      	str	r2, [r3, #64]	@ 0x40
        hxspi->XferCount--;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050c0:	1e5a      	subs	r2, r3, #1
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hxspi->XferCount > 0U);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1df      	bne.n	800508e <HAL_XSPI_Transmit+0x5e>
 80050ce:	e000      	b.n	80050d2 <HAL_XSPI_Transmit+0xa2>
          break;
 80050d0:	bf00      	nop

      if (status == HAL_OK)
 80050d2:	7ffb      	ldrb	r3, [r7, #31]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d119      	bne.n	800510c <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	2201      	movs	r2, #1
 80050e0:	2102      	movs	r1, #2
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 fb18 	bl	8005718 <XSPI_WaitFlagStateUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80050ec:	7ffb      	ldrb	r3, [r7, #31]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10c      	bne.n	800510c <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2202      	movs	r2, #2
 80050f8:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2202      	movs	r2, #2
 80050fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8005100:	e004      	b.n	800510c <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2210      	movs	r2, #16
 800510a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  return status;
 800510c:	7ffb      	ldrb	r3, [r7, #31]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b08c      	sub	sp, #48	@ 0x30
 800511a:	af02      	add	r7, sp, #8
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005122:	f7fb fc57 	bl	80009d4 <HAL_GetTick>
 8005126:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3350      	adds	r3, #80	@ 0x50
 800512e:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005136:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005140:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d106      	bne.n	8005156 <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2208      	movs	r2, #8
 8005152:	659a      	str	r2, [r3, #88]	@ 0x58
 8005154:	e07c      	b.n	8005250 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800515a:	2b04      	cmp	r3, #4
 800515c:	d172      	bne.n	8005244 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->XferSize  = hxspi->XferCount;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->pBuffPtr  = pData;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800518a:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005194:	d104      	bne.n	80051a0 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	649a      	str	r2, [r3, #72]	@ 0x48
 800519e:	e011      	b.n	80051c4 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80051a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d004      	beq.n	80051ba <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	649a      	str	r2, [r3, #72]	@ 0x48
 80051b8:	e004      	b.n	80051c4 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	2201      	movs	r2, #1
 80051cc:	2106      	movs	r1, #6
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 faa2 	bl	8005718 <XSPI_WaitFlagStateUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 80051da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d114      	bne.n	800520c <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	7812      	ldrb	r2, [r2, #0]
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	641a      	str	r2, [r3, #64]	@ 0x40
        hxspi->XferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051fc:	1e5a      	subs	r2, r3, #1
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hxspi->XferCount > 0U);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1dc      	bne.n	80051c4 <HAL_XSPI_Receive+0xae>
 800520a:	e000      	b.n	800520e <HAL_XSPI_Receive+0xf8>
          break;
 800520c:	bf00      	nop

      if (status == HAL_OK)
 800520e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005212:	2b00      	cmp	r3, #0
 8005214:	d11c      	bne.n	8005250 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	2201      	movs	r2, #1
 800521e:	2102      	movs	r1, #2
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 fa79 	bl	8005718 <XSPI_WaitFlagStateUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 800522c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10d      	bne.n	8005250 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2202      	movs	r2, #2
 800523a:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2202      	movs	r2, #2
 8005240:	655a      	str	r2, [r3, #84]	@ 0x54
 8005242:	e005      	b.n	8005250 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2210      	movs	r2, #16
 800524e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  return status;
 8005250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005254:	4618      	mov	r0, r3
 8005256:	3728      	adds	r7, #40	@ 0x28
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, XSPI_AutoPollingTypeDef *const pCfg,
                                       uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08a      	sub	sp, #40	@ 0x28
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005268:	f7fb fbb4 	bl	80009d4 <HAL_GetTick>
 800526c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005274:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800527e:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005284:	2b04      	cmp	r3, #4
 8005286:	d167      	bne.n	8005358 <HAL_XSPI_AutoPolling+0xfc>
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005290:	d162      	bne.n	8005358 <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	2200      	movs	r2, #0
 800529a:	2120      	movs	r1, #32
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 fa3b 	bl	8005718 <XSPI_WaitFlagStateUntilTimeout>
 80052a2:	4603      	mov	r3, r0
 80052a4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80052a6:	7ffb      	ldrb	r3, [r7, #31]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d152      	bne.n	8005352 <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	6852      	ldr	r2, [r2, #4]
 80052c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	6912      	ldr	r2, [r2, #16]
 80052cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	6899      	ldr	r1, [r3, #8]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	430b      	orrs	r3, r1
 80052e4:	431a      	orrs	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80052ee:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052f8:	d104      	bne.n	8005304 <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	649a      	str	r2, [r3, #72]	@ 0x48
 8005302:	e011      	b.n	8005328 <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800530c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005310:	2b00      	cmp	r3, #0
 8005312:	d004      	beq.n	800531e <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	649a      	str	r2, [r3, #72]	@ 0x48
 800531c:	e004      	b.n	8005328 <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2201      	movs	r2, #1
 8005330:	2108      	movs	r1, #8
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f9f0 	bl	8005718 <XSPI_WaitFlagStateUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800533c:	7ffb      	ldrb	r3, [r7, #31]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d110      	bne.n	8005364 <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2208      	movs	r2, #8
 8005348:	625a      	str	r2, [r3, #36]	@ 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2202      	movs	r2, #2
 800534e:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005350:	e008      	b.n	8005364 <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
 8005352:	2302      	movs	r3, #2
 8005354:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 8005356:	e005      	b.n	8005364 <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2210      	movs	r2, #16
 8005360:	659a      	str	r2, [r3, #88]	@ 0x58
 8005362:	e000      	b.n	8005366 <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
 8005364:	bf00      	nop
  }

  return status;
 8005366:	7ffb      	ldrb	r3, [r7, #31]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3720      	adds	r7, #32
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, XSPI_MemoryMappedTypeDef *const pCfg)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af02      	add	r7, sp, #8
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800537a:	f7fb fb2b 	bl	80009d4 <HAL_GetTick>
 800537e:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005384:	2b04      	cmp	r3, #4
 8005386:	d134      	bne.n	80053f2 <HAL_XSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2200      	movs	r2, #0
 8005392:	2120      	movs	r1, #32
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f9bf 	bl	8005718 <XSPI_WaitFlagStateUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d12b      	bne.n	80053fc <HAL_XSPI_MemoryMapped+0x8c>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2288      	movs	r2, #136	@ 0x88
 80053a8:	655a      	str	r2, [r3, #84]	@ 0x54

      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d111      	bne.n	80053d6 <HAL_XSPI_MemoryMapped+0x66>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	6852      	ldr	r2, [r2, #4]
 80053ba:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2210      	movs	r2, #16
 80053c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80053d4:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005408 <HAL_XSPI_MemoryMapped+0x98>)
 80053de:	4013      	ands	r3, r2
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	6812      	ldr	r2, [r2, #0]
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	e004      	b.n	80053fc <HAL_XSPI_MemoryMapped+0x8c>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2210      	movs	r2, #16
 80053fa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return status;
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	cffffff7 	.word	0xcffffff7

0800540c <HAL_XSPI_Abort>:
  * @brief  Abort the current operation, return to the indirect mode.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af02      	add	r7, sp, #8
 8005412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005418:	f7fb fadc 	bl	80009d4 <HAL_GetTick>
 800541c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is not in reset state */
  if (hxspi->State != HAL_XSPI_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005422:	2b00      	cmp	r3, #0
 8005424:	d06f      	beq.n	8005506 <HAL_XSPI_Abort+0xfa>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d021      	beq.n	8005478 <HAL_XSPI_Abort+0x6c>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0204 	bic.w	r2, r2, #4
 8005442:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005448:	4618      	mov	r0, r3
 800544a:	f7fb fcff 	bl	8000e4c <HAL_DMA_Abort>
 800544e:	4603      	mov	r3, r0
 8005450:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 8005452:	7bfb      	ldrb	r3, [r7, #15]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <HAL_XSPI_Abort+0x52>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2204      	movs	r2, #4
 800545c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005462:	4618      	mov	r0, r3
 8005464:	f7fb fcf2 	bl	8000e4c <HAL_DMA_Abort>
 8005468:	4603      	mov	r3, r0
 800546a:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 800546c:	7bfb      	ldrb	r3, [r7, #15]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_XSPI_Abort+0x6c>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2204      	movs	r2, #4
 8005476:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d033      	beq.n	80054ee <HAL_XSPI_Abort+0xe2>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0202 	orr.w	r2, r2, #2
 8005494:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2201      	movs	r2, #1
 80054a0:	2102      	movs	r1, #2
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f938 	bl	8005718 <XSPI_WaitFlagStateUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d12e      	bne.n	8005510 <HAL_XSPI_Abort+0x104>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2202      	movs	r2, #2
 80054b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2200      	movs	r2, #0
 80054c4:	2120      	movs	r1, #32
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f926 	bl	8005718 <XSPI_WaitFlagStateUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d11c      	bne.n	8005510 <HAL_XSPI_Abort+0x104>
        {
          /* Return to indirect mode */
          CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80054e4:	601a      	str	r2, [r3, #0]

          hxspi->State = HAL_XSPI_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2202      	movs	r2, #2
 80054ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80054ec:	e010      	b.n	8005510 <HAL_XSPI_Abort+0x104>
      }
    }
    else
    {
      /* Return to indirect mode */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80054fc:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2202      	movs	r2, #2
 8005502:	655a      	str	r2, [r3, #84]	@ 0x54
 8005504:	e004      	b.n	8005510 <HAL_XSPI_Abort+0x104>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2210      	movs	r2, #16
 800550e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return status;
 8005510:	7bfb      	ldrb	r3, [r7, #15]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_XSPIM_Config>:
  * @param  pCfg     : Pointer to Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPIM_Config(XSPI_HandleTypeDef *const hxspi, XSPIM_CfgTypeDef *const pCfg, uint32_t Timeout)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08c      	sub	sp, #48	@ 0x30
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t index;
  uint8_t xspi_enabled = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

  XSPIM_CfgTypeDef IOM_cfg[XSPI_NB_INSTANCE] = {0};
 8005550:	f107 0314 	add.w	r3, r7, #20
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	609a      	str	r2, [r3, #8]
 800555c:	60da      	str	r2, [r3, #12]
 800555e:	611a      	str	r2, [r3, #16]
 8005560:	615a      	str	r2, [r3, #20]
  assert_param(IS_XSPIM_NCS_OVR(pCfg->nCSOverride));
  assert_param(IS_XSPIM_IO_PORT(pCfg->IOPort));
  assert_param(IS_XSPIM_REQ2ACKTIME(pCfg->Req2AckTime));

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
 8005562:	2300      	movs	r3, #0
 8005564:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005568:	e014      	b.n	8005594 <HAL_XSPIM_Config+0x5c>
  {
    XSPIM_GetConfig(index + 1U, &(IOM_cfg[index]));
 800556a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800556e:	3301      	adds	r3, #1
 8005570:	b2d8      	uxtb	r0, r3
 8005572:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005576:	f107 0114 	add.w	r1, r7, #20
 800557a:	4613      	mov	r3, r2
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	4413      	add	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	4619      	mov	r1, r3
 8005586:	f000 fa97 	bl	8005ab8 <XSPIM_GetConfig>
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
 800558a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800558e:	3301      	adds	r3, #1
 8005590:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005594:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005598:	2b01      	cmp	r3, #1
 800559a:	d9e6      	bls.n	800556a <HAL_XSPIM_Config+0x32>
  }

  /********** Disable both XSPI to configure XSPI IO Manager **********/
  if ((XSPI1->CR & XSPI_CR_EN) != 0U)
 800559c:	4b5b      	ldr	r3, [pc, #364]	@ (800570c <HAL_XSPIM_Config+0x1d4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00b      	beq.n	80055c0 <HAL_XSPIM_Config+0x88>
  {
    CLEAR_BIT(XSPI1->CR, XSPI_CR_EN);
 80055a8:	4b58      	ldr	r3, [pc, #352]	@ (800570c <HAL_XSPIM_Config+0x1d4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a57      	ldr	r2, [pc, #348]	@ (800570c <HAL_XSPIM_Config+0x1d4>)
 80055ae:	f023 0301 	bic.w	r3, r3, #1
 80055b2:	6013      	str	r3, [r2, #0]
    xspi_enabled |= 0x1U;
 80055b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055b8:	f043 0301 	orr.w	r3, r3, #1
 80055bc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  }
  if ((XSPI2->CR & XSPI_CR_EN) != 0U)
 80055c0:	4b53      	ldr	r3, [pc, #332]	@ (8005710 <HAL_XSPIM_Config+0x1d8>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00b      	beq.n	80055e4 <HAL_XSPIM_Config+0xac>
  {
    CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
 80055cc:	4b50      	ldr	r3, [pc, #320]	@ (8005710 <HAL_XSPIM_Config+0x1d8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a4f      	ldr	r2, [pc, #316]	@ (8005710 <HAL_XSPIM_Config+0x1d8>)
 80055d2:	f023 0301 	bic.w	r3, r3, #1
 80055d6:	6013      	str	r3, [r2, #0]
    xspi_enabled |= 0x2U;
 80055d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055dc:	f043 0302 	orr.w	r3, r3, #2
 80055e0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  }

  /***************** Deactivation of previous configuration *****************/
  CLEAR_REG(XSPIM->CR);
 80055e4:	4b4b      	ldr	r3, [pc, #300]	@ (8005714 <HAL_XSPIM_Config+0x1dc>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	601a      	str	r2, [r3, #0]

  /******************** Activation of new configuration *********************/
  MODIFY_REG(XSPIM->CR, XSPIM_CR_REQ2ACK_TIME, ((pCfg->Req2AckTime - 1U) << XSPIM_CR_REQ2ACK_TIME_Pos));
 80055ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005714 <HAL_XSPIM_Config+0x1dc>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	041b      	lsls	r3, r3, #16
 80055fa:	4946      	ldr	r1, [pc, #280]	@ (8005714 <HAL_XSPIM_Config+0x1dc>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	600b      	str	r3, [r1, #0]

  if (hxspi->Instance == XSPI1)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a41      	ldr	r2, [pc, #260]	@ (800570c <HAL_XSPIM_Config+0x1d4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d110      	bne.n	800562c <HAL_XSPIM_Config+0xf4>
  {
    IOM_cfg[0].IOPort = pCfg->IOPort ;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	61bb      	str	r3, [r7, #24]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d027      	beq.n	8005668 <HAL_XSPIM_Config+0x130>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O1 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
 8005618:	4b3e      	ldr	r3, [pc, #248]	@ (8005714 <HAL_XSPIM_Config+0x1dc>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	493b      	ldr	r1, [pc, #236]	@ (8005714 <HAL_XSPIM_Config+0x1dc>)
 8005626:	4313      	orrs	r3, r2
 8005628:	600b      	str	r3, [r1, #0]
 800562a:	e01d      	b.n	8005668 <HAL_XSPIM_Config+0x130>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI2)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a37      	ldr	r2, [pc, #220]	@ (8005710 <HAL_XSPIM_Config+0x1d8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d110      	bne.n	8005658 <HAL_XSPIM_Config+0x120>
  {
    IOM_cfg[1].IOPort = pCfg->IOPort ;
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d011      	beq.n	8005668 <HAL_XSPIM_Config+0x130>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O2 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
 8005644:	4b33      	ldr	r3, [pc, #204]	@ (8005714 <HAL_XSPIM_Config+0x1dc>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f023 0250 	bic.w	r2, r3, #80	@ 0x50
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4930      	ldr	r1, [pc, #192]	@ (8005714 <HAL_XSPIM_Config+0x1dc>)
 8005652:	4313      	orrs	r3, r2
 8005654:	600b      	str	r3, [r1, #0]
 8005656:	e007      	b.n	8005668 <HAL_XSPIM_Config+0x130>
      /* Nothing to do */
    }
  }
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565c:	f043 0208 	orr.w	r2, r3, #8
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	659a      	str	r2, [r3, #88]	@ 0x58
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e04c      	b.n	8005702 <HAL_XSPIM_Config+0x1ca>
  }

  for (index = 0U; index < (XSPI_NB_INSTANCE - 1U); index++)
 8005668:	2300      	movs	r3, #0
 800566a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800566e:	e02a      	b.n	80056c6 <HAL_XSPIM_Config+0x18e>
  {
    if ((IOM_cfg[index].IOPort == IOM_cfg[index + 1U].IOPort))
 8005670:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005674:	4613      	mov	r3, r2
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	3330      	adds	r3, #48	@ 0x30
 800567e:	443b      	add	r3, r7
 8005680:	3b18      	subs	r3, #24
 8005682:	6819      	ldr	r1, [r3, #0]
 8005684:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	4613      	mov	r3, r2
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	4413      	add	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	3330      	adds	r3, #48	@ 0x30
 8005694:	443b      	add	r3, r7
 8005696:	3b18      	subs	r3, #24
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4299      	cmp	r1, r3
 800569c:	d105      	bne.n	80056aa <HAL_XSPIM_Config+0x172>
    {
      /*Mux*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MUXEN);
 800569e:	4b1d      	ldr	r3, [pc, #116]	@ (8005714 <HAL_XSPIM_Config+0x1dc>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005714 <HAL_XSPIM_Config+0x1dc>)
 80056a4:	f043 0301 	orr.w	r3, r3, #1
 80056a8:	6013      	str	r3, [r2, #0]
    }
    else
    {
      /* Nothing to do */
    }
    if (IOM_cfg[0].IOPort == HAL_XSPIM_IOPORT_2)
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d105      	bne.n	80056bc <HAL_XSPIM_Config+0x184>
    {
      /*Mode*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MODE);
 80056b0:	4b18      	ldr	r3, [pc, #96]	@ (8005714 <HAL_XSPIM_Config+0x1dc>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a17      	ldr	r2, [pc, #92]	@ (8005714 <HAL_XSPIM_Config+0x1dc>)
 80056b6:	f043 0302 	orr.w	r3, r3, #2
 80056ba:	6013      	str	r3, [r2, #0]
  for (index = 0U; index < (XSPI_NB_INSTANCE - 1U); index++)
 80056bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80056c0:	3301      	adds	r3, #1
 80056c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80056c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0d0      	beq.n	8005670 <HAL_XSPIM_Config+0x138>
      /* Nothing to do */
    }
  }

  /******* Re-enable both XSPI after configure XSPI IO Manager ********/
  if ((xspi_enabled & 0x1U) != 0U)
 80056ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d005      	beq.n	80056e6 <HAL_XSPIM_Config+0x1ae>
  {
    SET_BIT(XSPI1->CR, XSPI_CR_EN);
 80056da:	4b0c      	ldr	r3, [pc, #48]	@ (800570c <HAL_XSPIM_Config+0x1d4>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a0b      	ldr	r2, [pc, #44]	@ (800570c <HAL_XSPIM_Config+0x1d4>)
 80056e0:	f043 0301 	orr.w	r3, r3, #1
 80056e4:	6013      	str	r3, [r2, #0]
  }
  if ((xspi_enabled & 0x2U) != 0U)
 80056e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d005      	beq.n	80056fe <HAL_XSPIM_Config+0x1c6>
  {
    SET_BIT(XSPI2->CR, XSPI_CR_EN);
 80056f2:	4b07      	ldr	r3, [pc, #28]	@ (8005710 <HAL_XSPIM_Config+0x1d8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a06      	ldr	r2, [pc, #24]	@ (8005710 <HAL_XSPIM_Config+0x1d8>)
 80056f8:	f043 0301 	orr.w	r3, r3, #1
 80056fc:	6013      	str	r3, [r2, #0]
  }

  return status;
 80056fe:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
}
 8005702:	4618      	mov	r0, r3
 8005704:	3730      	adds	r7, #48	@ 0x30
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	52005000 	.word	0x52005000
 8005710:	5200a000 	.word	0x5200a000
 8005714:	5200b400 	.word	0x5200b400

08005718 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	4613      	mov	r3, r2
 8005726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8005728:	e019      	b.n	800575e <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005730:	d015      	beq.n	800575e <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005732:	f7fb f94f 	bl	80009d4 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	429a      	cmp	r2, r3
 8005740:	d302      	bcc.n	8005748 <XSPI_WaitFlagStateUntilTimeout+0x30>
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10a      	bne.n	800575e <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2202      	movs	r2, #2
 800574c:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005752:	f043 0201 	orr.w	r2, r3, #1
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e00e      	b.n	800577c <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6a1a      	ldr	r2, [r3, #32]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4013      	ands	r3, r2
 8005768:	2b00      	cmp	r3, #0
 800576a:	bf14      	ite	ne
 800576c:	2301      	movne	r3, #1
 800576e:	2300      	moveq	r3, #0
 8005770:	b2db      	uxtb	r3, r3
 8005772:	461a      	mov	r2, r3
 8005774:	79fb      	ldrb	r3, [r7, #7]
 8005776:	429a      	cmp	r2, r3
 8005778:	d1d7      	bne.n	800572a <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 8005784:	b480      	push	{r7}
 8005786:	b089      	sub	sp, #36	@ 0x24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80057a0:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10a      	bne.n	80057c0 <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d114      	bne.n	80057f2 <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80057d0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80057da:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80057e4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	e02c      	b.n	800584c <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d114      	bne.n	8005824 <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8005802:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800580c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005816:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	e013      	b.n	800584c <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800582c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8005836:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8005840:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800584a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005858:	2b00      	cmp	r3, #0
 800585a:	d012      	beq.n	8005882 <XSPI_ConfigCmd+0xfe>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005874:	4319      	orrs	r1, r3
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587a:	430b      	orrs	r3, r1
 800587c:	431a      	orrs	r2, r3
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f023 021f 	bic.w	r2, r3, #31
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800588e:	431a      	orrs	r2, r3
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005898:	2b00      	cmp	r3, #0
 800589a:	d009      	beq.n	80058b0 <XSPI_ConfigCmd+0x12c>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d105      	bne.n	80058b0 <XSPI_ConfigCmd+0x12c>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3a01      	subs	r2, #1
 80058ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01e      	beq.n	80058f6 <XSPI_ConfigCmd+0x172>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058c0:	d10a      	bne.n	80058d8 <XSPI_ConfigCmd+0x154>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80058d2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 80058d6:	e00e      	b.n	80058f6 <XSPI_ConfigCmd+0x172>
    }
    else if(hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e0:	d109      	bne.n	80058f6 <XSPI_ConfigCmd+0x172>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80058f2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 8095 	beq.w	8005a2a <XSPI_ConfigCmd+0x2a6>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d053      	beq.n	80059b0 <XSPI_ConfigCmd+0x22c>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01e      	beq.n	800594e <XSPI_ConfigCmd+0x1ca>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	4b64      	ldr	r3, [pc, #400]	@ (8005aa8 <XSPI_ConfigCmd+0x324>)
 8005916:	4013      	ands	r3, r2
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	68d1      	ldr	r1, [r2, #12]
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	6952      	ldr	r2, [r2, #20]
 8005920:	4311      	orrs	r1, r2
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	6912      	ldr	r2, [r2, #16]
 8005926:	4311      	orrs	r1, r2
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	69d2      	ldr	r2, [r2, #28]
 800592c:	4311      	orrs	r1, r2
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005932:	4311      	orrs	r1, r2
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	6a12      	ldr	r2, [r2, #32]
 8005938:	4311      	orrs	r1, r2
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800593e:	4311      	orrs	r1, r2
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005944:	430a      	orrs	r2, r1
 8005946:	431a      	orrs	r2, r3
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	e026      	b.n	800599c <XSPI_ConfigCmd+0x218>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4b56      	ldr	r3, [pc, #344]	@ (8005aac <XSPI_ConfigCmd+0x328>)
 8005954:	4013      	ands	r3, r2
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	68d1      	ldr	r1, [r2, #12]
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	6952      	ldr	r2, [r2, #20]
 800595e:	4311      	orrs	r1, r2
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	6912      	ldr	r2, [r2, #16]
 8005964:	4311      	orrs	r1, r2
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	69d2      	ldr	r2, [r2, #28]
 800596a:	4311      	orrs	r1, r2
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005970:	4311      	orrs	r1, r2
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	6a12      	ldr	r2, [r2, #32]
 8005976:	430a      	orrs	r2, r1
 8005978:	431a      	orrs	r2, r3
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005982:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005986:	d109      	bne.n	800599c <XSPI_ConfigCmd+0x218>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 800598c:	2b08      	cmp	r3, #8
 800598e:	d105      	bne.n	800599c <XSPI_ConfigCmd+0x218>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	6992      	ldr	r2, [r2, #24]
 80059ac:	649a      	str	r2, [r3, #72]	@ 0x48
 80059ae:	e074      	b.n	8005a9a <XSPI_ConfigCmd+0x316>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d015      	beq.n	80059e4 <XSPI_ConfigCmd+0x260>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	4b3c      	ldr	r3, [pc, #240]	@ (8005ab0 <XSPI_ConfigCmd+0x32c>)
 80059be:	4013      	ands	r3, r2
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	68d1      	ldr	r1, [r2, #12]
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	6952      	ldr	r2, [r2, #20]
 80059c8:	4311      	orrs	r1, r2
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	6912      	ldr	r2, [r2, #16]
 80059ce:	4311      	orrs	r1, r2
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80059d4:	4311      	orrs	r1, r2
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80059da:	430a      	orrs	r2, r1
 80059dc:	431a      	orrs	r2, r3
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	e01d      	b.n	8005a20 <XSPI_ConfigCmd+0x29c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	68d9      	ldr	r1, [r3, #12]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	4319      	orrs	r1, r3
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	430b      	orrs	r3, r1
 80059fc:	431a      	orrs	r2, r3
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a0a:	d109      	bne.n	8005a20 <XSPI_ConfigCmd+0x29c>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d105      	bne.n	8005a20 <XSPI_ConfigCmd+0x29c>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	e037      	b.n	8005a9a <XSPI_ConfigCmd+0x316>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d02e      	beq.n	8005a90 <XSPI_ConfigCmd+0x30c>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d015      	beq.n	8005a66 <XSPI_ConfigCmd+0x2e2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ab4 <XSPI_ConfigCmd+0x330>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	69d1      	ldr	r1, [r2, #28]
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a4a:	4311      	orrs	r1, r2
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	6a12      	ldr	r2, [r2, #32]
 8005a50:	4311      	orrs	r1, r2
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a56:	4311      	orrs	r1, r2
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	e00e      	b.n	8005a84 <XSPI_ConfigCmd+0x300>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	69d9      	ldr	r1, [r3, #28]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a76:	4319      	orrs	r1, r3
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	430b      	orrs	r3, r1
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	6992      	ldr	r2, [r2, #24]
 8005a8c:	649a      	str	r2, [r3, #72]	@ 0x48
 8005a8e:	e004      	b.n	8005a9a <XSPI_ConfigCmd+0x316>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2208      	movs	r2, #8
 8005a98:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  return status;
 8005a9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3724      	adds	r7, #36	@ 0x24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	f0ffc0c0 	.word	0xf0ffc0c0
 8005aac:	ffffc0c0 	.word	0xffffc0c0
 8005ab0:	f0ffffc0 	.word	0xf0ffffc0
 8005ab4:	f0ffc0ff 	.word	0xf0ffc0ff

08005ab8 <XSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  pCfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static void XSPIM_GetConfig(uint8_t instance_nb, XSPIM_CfgTypeDef *const pCfg)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	6039      	str	r1, [r7, #0]
 8005ac2:	71fb      	strb	r3, [r7, #7]
  uint32_t mux;
  uint32_t mode;

  if (instance_nb == 1U)
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d124      	bne.n	8005b14 <XSPIM_GetConfig+0x5c>
  {
    if ((XSPIM->CR & XSPIM_CR_MODE) == 0U)
 8005aca:	4b2c      	ldr	r3, [pc, #176]	@ (8005b7c <XSPIM_GetConfig+0xc4>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d103      	bne.n	8005ade <XSPIM_GetConfig+0x26>
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	605a      	str	r2, [r3, #4]
 8005adc:	e002      	b.n	8005ae4 <XSPIM_GetConfig+0x2c>
    }
    else
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	605a      	str	r2, [r3, #4]
    }

    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
 8005ae4:	4b25      	ldr	r3, [pc, #148]	@ (8005b7c <XSPIM_GetConfig+0xc4>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0310 	and.w	r3, r3, #16
 8005aec:	2b10      	cmp	r3, #16
 8005aee:	d003      	beq.n	8005af8 <XSPIM_GetConfig+0x40>
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
    else
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
    }
  }
}
 8005af6:	e03a      	b.n	8005b6e <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O1) == XSPIM_CR_CSSEL_OVR_O1)
 8005af8:	4b20      	ldr	r3, [pc, #128]	@ (8005b7c <XSPIM_GetConfig+0xc4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0320 	and.w	r3, r3, #32
 8005b00:	2b20      	cmp	r3, #32
 8005b02:	d103      	bne.n	8005b0c <XSPIM_GetConfig+0x54>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2270      	movs	r2, #112	@ 0x70
 8005b08:	601a      	str	r2, [r3, #0]
}
 8005b0a:	e030      	b.n	8005b6e <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2210      	movs	r2, #16
 8005b10:	601a      	str	r2, [r3, #0]
}
 8005b12:	e02c      	b.n	8005b6e <XSPIM_GetConfig+0xb6>
    mux = (XSPIM->CR & XSPIM_CR_MUXEN);
 8005b14:	4b19      	ldr	r3, [pc, #100]	@ (8005b7c <XSPIM_GetConfig+0xc4>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	60fb      	str	r3, [r7, #12]
    mode = ((XSPIM->CR & XSPIM_CR_MODE) >> XSPIM_CR_MODE_Pos);
 8005b1e:	4b17      	ldr	r3, [pc, #92]	@ (8005b7c <XSPIM_GetConfig+0xc4>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	085b      	lsrs	r3, r3, #1
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	60bb      	str	r3, [r7, #8]
    if (mux != mode)
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d003      	beq.n	8005b3a <XSPIM_GetConfig+0x82>
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2200      	movs	r2, #0
 8005b36:	605a      	str	r2, [r3, #4]
 8005b38:	e002      	b.n	8005b40 <XSPIM_GetConfig+0x88>
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	605a      	str	r2, [r3, #4]
    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
 8005b40:	4b0e      	ldr	r3, [pc, #56]	@ (8005b7c <XSPIM_GetConfig+0xc4>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0310 	and.w	r3, r3, #16
 8005b48:	2b10      	cmp	r3, #16
 8005b4a:	d003      	beq.n	8005b54 <XSPIM_GetConfig+0x9c>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]
}
 8005b52:	e00c      	b.n	8005b6e <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O2) == XSPIM_CR_CSSEL_OVR_O2)
 8005b54:	4b09      	ldr	r3, [pc, #36]	@ (8005b7c <XSPIM_GetConfig+0xc4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5c:	2b40      	cmp	r3, #64	@ 0x40
 8005b5e:	d103      	bne.n	8005b68 <XSPIM_GetConfig+0xb0>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2270      	movs	r2, #112	@ 0x70
 8005b64:	601a      	str	r2, [r3, #0]
}
 8005b66:	e002      	b.n	8005b6e <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2210      	movs	r2, #16
 8005b6c:	601a      	str	r2, [r3, #0]
}
 8005b6e:	bf00      	nop
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	5200b400 	.word	0x5200b400

08005b80 <BOOT_Application>:
  *  @addtogroup BOOT_XIP_Exported_Functions Boot XIP exported functions
  * @{
  */

BOOTStatus_TypeDef BOOT_Application(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr;

  /* mount the memory */
  retr = MapMemory();
 8005b86:	f000 f80e 	bl	8005ba6 <MapMemory>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	71fb      	strb	r3, [r7, #7]
  if (BOOT_OK == retr)
 8005b8e:	79fb      	ldrb	r3, [r7, #7]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d103      	bne.n	8005b9c <BOOT_Application+0x1c>
  {
    /* jump on the application */
    retr = JumpToApplication();
 8005b94:	f000 f836 	bl	8005c04 <JumpToApplication>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	71fb      	strb	r3, [r7, #7]
  }
  return retr;
 8005b9c:	79fb      	ldrb	r3, [r7, #7]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <MapMemory>:
/**
  * @brief  this function maps the memory
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef MapMemory(void)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b082      	sub	sp, #8
 8005baa:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr = BOOT_OK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	71fb      	strb	r3, [r7, #7]

  /* Map all the memory */
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	71bb      	strb	r3, [r7, #6]
 8005bb4:	e01d      	b.n	8005bf2 <MapMemory+0x4c>
  {
    switch(EXTMEM_MemoryMappedMode(index, EXTMEM_ENABLE))
 8005bb6:	79bb      	ldrb	r3, [r7, #6]
 8005bb8:	2100      	movs	r1, #0
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 f916 	bl	8005dec <EXTMEM_MemoryMappedMode>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc6:	d002      	beq.n	8005bce <MapMemory+0x28>
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00e      	beq.n	8005bea <MapMemory+0x44>
 8005bcc:	e00a      	b.n	8005be4 <MapMemory+0x3e>
    {
      case EXTMEM_ERROR_NOTSUPPORTED :
           if (EXTMEM_MEMORY_BOOTXIP ==  index)
 8005bce:	79bb      	ldrb	r3, [r7, #6]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d102      	bne.n	8005bda <MapMemory+0x34>
           {
             retr = BOOT_ERROR_INCOMPATIBLEMEMORY;
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	71fb      	strb	r3, [r7, #7]
           {
            /* We considers the memory will be not used any more */
            EXTMEM_DeInit(index);
           }
      case EXTMEM_OK:
      break;
 8005bd8:	e007      	b.n	8005bea <MapMemory+0x44>
            EXTMEM_DeInit(index);
 8005bda:	79bb      	ldrb	r3, [r7, #6]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 f8d9 	bl	8005d94 <EXTMEM_DeInit>
      break;
 8005be2:	e002      	b.n	8005bea <MapMemory+0x44>
      default :
        retr = BOOT_ERROR_MAPPEDMODEFAIL;
 8005be4:	2303      	movs	r3, #3
 8005be6:	71fb      	strb	r3, [r7, #7]
      break;
 8005be8:	e000      	b.n	8005bec <MapMemory+0x46>
      break;
 8005bea:	bf00      	nop
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
 8005bec:	79bb      	ldrb	r3, [r7, #6]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	71bb      	strb	r3, [r7, #6]
 8005bf2:	79bb      	ldrb	r3, [r7, #6]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0de      	beq.n	8005bb6 <MapMemory+0x10>
    }
  }
  return retr;
 8005bf8:	79fb      	ldrb	r3, [r7, #7]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <JumpToApplication>:
/**
  * @brief  This function jumps to the application through its vector table
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef JumpToApplication(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08a      	sub	sp, #40	@ 0x28
 8005c08:	af00      	add	r7, sp, #0
  uint32_t primask_bit;
  typedef  void (*pFunction)(void);
  pFunction JumpToApp;
  uint32_t Application_vector;

  if (EXTMEM_OK != EXTMEM_GetMapAddress(EXTMEM_MEMORY_BOOTXIP, &Application_vector))
 8005c0a:	1d3b      	adds	r3, r7, #4
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	2000      	movs	r0, #0
 8005c10:	f000 f93a 	bl	8005e88 <EXTMEM_GetMapAddress>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <JumpToApplication+0x1a>
  {
      return BOOT_ERROR_INCOMPATIBLEMEMORY;
 8005c1a:	2304      	movs	r3, #4
 8005c1c:	e072      	b.n	8005d04 <JumpToApplication+0x100>
  }

  /* Suspend SysTick */
  HAL_SuspendTick();
 8005c1e:	f7fa ff09 	bl	8000a34 <HAL_SuspendTick>
  __ASM volatile ("dsb 0xF":::"memory");
 8005c22:	f3bf 8f4f 	dsb	sy
}
 8005c26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005c28:	f3bf 8f6f 	isb	sy
}
 8005c2c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8005c2e:	4b37      	ldr	r3, [pc, #220]	@ (8005d0c <JumpToApplication+0x108>)
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	4a36      	ldr	r2, [pc, #216]	@ (8005d0c <JumpToApplication+0x108>)
 8005c34:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005c38:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005c3a:	4b34      	ldr	r3, [pc, #208]	@ (8005d0c <JumpToApplication+0x108>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005c42:	f3bf 8f4f 	dsb	sy
}
 8005c46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005c48:	f3bf 8f6f 	isb	sy
}
 8005c4c:	bf00      	nop
}
 8005c4e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8005c50:	4b2e      	ldr	r3, [pc, #184]	@ (8005d0c <JumpToApplication+0x108>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005c58:	f3bf 8f4f 	dsb	sy
}
 8005c5c:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8005c5e:	4b2b      	ldr	r3, [pc, #172]	@ (8005d0c <JumpToApplication+0x108>)
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	4a2a      	ldr	r2, [pc, #168]	@ (8005d0c <JumpToApplication+0x108>)
 8005c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c68:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c6a:	f3bf 8f4f 	dsb	sy
}
 8005c6e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8005c70:	4b26      	ldr	r3, [pc, #152]	@ (8005d0c <JumpToApplication+0x108>)
 8005c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c76:	613b      	str	r3, [r7, #16]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	0b5b      	lsrs	r3, r3, #13
 8005c7c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005c80:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	08db      	lsrs	r3, r3, #3
 8005c86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c8a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8005c94:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8005c9a:	491c      	ldr	r1, [pc, #112]	@ (8005d0c <JumpToApplication+0x108>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	1e5a      	subs	r2, r3, #1
 8005ca6:	60ba      	str	r2, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1ef      	bne.n	8005c8c <JumpToApplication+0x88>
    } while(sets-- != 0U);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	1e5a      	subs	r2, r3, #1
 8005cb0:	60fa      	str	r2, [r7, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1e5      	bne.n	8005c82 <JumpToApplication+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005cb6:	f3bf 8f4f 	dsb	sy
}
 8005cba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005cbc:	f3bf 8f6f 	isb	sy
}
 8005cc0:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8005cc2:	bf00      	nop
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc8:	617b      	str	r3, [r7, #20]
  return(result);
 8005cca:	697b      	ldr	r3, [r7, #20]

  /* Disable D-Cache---------------------------------------------------------*/
  SCB_DisableDCache();

  /* Initialize user application's Stack Pointer & Jump to user application  */
  primask_bit = __get_PRIMASK();
 8005ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8005cce:	b672      	cpsid	i
}
 8005cd0:	bf00      	nop
  __disable_irq();

  /* Apply offsets for image location and vector table offset */
  Application_vector += EXTMEM_XIP_IMAGE_OFFSET + EXTMEM_HEADER_OFFSET;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	607b      	str	r3, [r7, #4]

  SCB->VTOR = (uint32_t)Application_vector;
 8005cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8005d0c <JumpToApplication+0x108>)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6093      	str	r3, [r2, #8]
  JumpToApp = (pFunction) (*(__IO uint32_t *)(Application_vector + 4u));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	623b      	str	r3, [r7, #32]
     (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
  /* on ARM v8m, set MSPLIM before setting MSP to avoid unwanted stack overflow faults */
  __set_MSPLIM(0x00000000);
#endif  /* __ARM_ARCH_8M_MAIN__ or __ARM_ARCH_8M_BASE__ */

  __set_MSP(*(__IO uint32_t*) Application_vector);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	f383 8808 	msr	MSP, r3
}
 8005cf0:	bf00      	nop
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf4:	61fb      	str	r3, [r7, #28]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	f383 8810 	msr	PRIMASK, r3
}
 8005cfc:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);

  JumpToApp();
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	4798      	blx	r3
  return BOOT_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3728      	adds	r7, #40	@ 0x28
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	e000ed00 	.word	0xe000ed00

08005d10 <EXTMEM_Init>:
/** @defgroup EXTMEM_Exported_Functions External Memory Exported Functions
  * @{
  */

EXTMEM_StatusTypeDef EXTMEM_Init(uint32_t MemId, uint32_t ClockInput)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 8005d1a:	23fb      	movs	r3, #251	@ 0xfb
 8005d1c:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d12f      	bne.n	8005d84 <EXTMEM_Init+0x74>
  {
    retr = EXTMEM_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 8005d28:	4a19      	ldr	r2, [pc, #100]	@ (8005d90 <EXTMEM_Init+0x80>)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	21ac      	movs	r1, #172	@ 0xac
 8005d2e:	fb01 f303 	mul.w	r3, r1, r3
 8005d32:	4413      	add	r3, r2
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d120      	bne.n	8005d7c <EXTMEM_Init+0x6c>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        /* Initialize the SFDP memory */
        if (EXTMEM_DRIVER_NOR_SFDP_OK != EXTMEM_DRIVER_NOR_SFDP_Init(extmem_list_config[MemId].Handle,
 8005d3a:	4a15      	ldr	r2, [pc, #84]	@ (8005d90 <EXTMEM_Init+0x80>)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	21ac      	movs	r1, #172	@ 0xac
 8005d40:	fb01 f303 	mul.w	r3, r1, r3
 8005d44:	4413      	add	r3, r2
 8005d46:	3304      	adds	r3, #4
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	4a11      	ldr	r2, [pc, #68]	@ (8005d90 <EXTMEM_Init+0x80>)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	21ac      	movs	r1, #172	@ 0xac
 8005d50:	fb01 f303 	mul.w	r3, r1, r3
 8005d54:	4413      	add	r3, r2
 8005d56:	3308      	adds	r3, #8
 8005d58:	7819      	ldrb	r1, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	22ac      	movs	r2, #172	@ 0xac
 8005d5e:	fb02 f303 	mul.w	r3, r2, r3
 8005d62:	3308      	adds	r3, #8
 8005d64:	4a0a      	ldr	r2, [pc, #40]	@ (8005d90 <EXTMEM_Init+0x80>)
 8005d66:	4413      	add	r3, r2
 8005d68:	3304      	adds	r3, #4
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	f002 fabc 	bl	80082e8 <EXTMEM_DRIVER_NOR_SFDP_Init>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d005      	beq.n	8005d82 <EXTMEM_Init+0x72>
                                                                     extmem_list_config[MemId].ConfigType,
                                                                     ClockInput,
                                                                     &extmem_list_config[MemId].NorSfdpObject))
        {
          retr = EXTMEM_ERROR_DRIVER;
 8005d76:	23fd      	movs	r3, #253	@ 0xfd
 8005d78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d7a:	e002      	b.n	8005d82 <EXTMEM_Init+0x72>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 8005d7c:	23fe      	movs	r3, #254	@ 0xfe
 8005d7e:	73fb      	strb	r3, [r7, #15]
        break;
 8005d80:	e000      	b.n	8005d84 <EXTMEM_Init+0x74>
        break;
 8005d82:	bf00      	nop
      }
    }
  }
  return retr;
 8005d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	2400008c 	.word	0x2400008c

08005d94 <EXTMEM_DeInit>:

EXTMEM_StatusTypeDef EXTMEM_DeInit(uint32_t MemId)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 8005d9c:	23fb      	movs	r3, #251	@ 0xfb
 8005d9e:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d119      	bne.n	8005dda <EXTMEM_DeInit+0x46>
  {
    retr = EXTMEM_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 8005daa:	4a0f      	ldr	r2, [pc, #60]	@ (8005de8 <EXTMEM_DeInit+0x54>)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	21ac      	movs	r1, #172	@ 0xac
 8005db0:	fb01 f303 	mul.w	r3, r1, r3
 8005db4:	4413      	add	r3, r2
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10b      	bne.n	8005dd4 <EXTMEM_DeInit+0x40>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        /* UnInitialize the SFDP memory, the return is always OK no need to test the returned value */
        (void)EXTMEM_DRIVER_NOR_SFDP_DeInit(&extmem_list_config[MemId].NorSfdpObject);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	22ac      	movs	r2, #172	@ 0xac
 8005dc0:	fb02 f303 	mul.w	r3, r2, r3
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	4a08      	ldr	r2, [pc, #32]	@ (8005de8 <EXTMEM_DeInit+0x54>)
 8005dc8:	4413      	add	r3, r2
 8005dca:	3304      	adds	r3, #4
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f002 fb45 	bl	800845c <EXTMEM_DRIVER_NOR_SFDP_DeInit>
        break;
 8005dd2:	e002      	b.n	8005dda <EXTMEM_DeInit+0x46>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
      default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 8005dd4:	23fe      	movs	r3, #254	@ 0xfe
 8005dd6:	73fb      	strb	r3, [r7, #15]
        break;
 8005dd8:	bf00      	nop
      }
    }
  }
  return retr;
 8005dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	2400008c 	.word	0x2400008c

08005dec <EXTMEM_MemoryMappedMode>:
  }
  return retr;
}

EXTMEM_StatusTypeDef EXTMEM_MemoryMappedMode(uint32_t MemId, EXTMEM_StateTypeDef State)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 8005df8:	23fb      	movs	r3, #251	@ 0xfb
 8005dfa:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d139      	bne.n	8005e76 <EXTMEM_MemoryMappedMode+0x8a>
  {
    retr = EXTMEM_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 8005e06:	4a1f      	ldr	r2, [pc, #124]	@ (8005e84 <EXTMEM_MemoryMappedMode+0x98>)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	21ac      	movs	r1, #172	@ 0xac
 8005e0c:	fb01 f303 	mul.w	r3, r1, r3
 8005e10:	4413      	add	r3, r2
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <EXTMEM_MemoryMappedMode+0x32>
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d025      	beq.n	8005e68 <EXTMEM_MemoryMappedMode+0x7c>
 8005e1c:	e027      	b.n	8005e6e <EXTMEM_MemoryMappedMode+0x82>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        if (EXTMEM_ENABLE == State)
 8005e1e:	78fb      	ldrb	r3, [r7, #3]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d110      	bne.n	8005e46 <EXTMEM_MemoryMappedMode+0x5a>
        {
          /* start the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	22ac      	movs	r2, #172	@ 0xac
 8005e28:	fb02 f303 	mul.w	r3, r2, r3
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	4a15      	ldr	r2, [pc, #84]	@ (8005e84 <EXTMEM_MemoryMappedMode+0x98>)
 8005e30:	4413      	add	r3, r2
 8005e32:	3304      	adds	r3, #4
 8005e34:	4618      	mov	r0, r3
 8005e36:	f002 fb20 	bl	800847a <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>
 8005e3a:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d019      	beq.n	8005e74 <EXTMEM_MemoryMappedMode+0x88>
          {
            return EXTMEM_ERROR_DRIVER;
 8005e40:	f06f 0302 	mvn.w	r3, #2
 8005e44:	e019      	b.n	8005e7a <EXTMEM_MemoryMappedMode+0x8e>
        }
        else
        {
          /* stop the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	22ac      	movs	r2, #172	@ 0xac
 8005e4a:	fb02 f303 	mul.w	r3, r2, r3
 8005e4e:	3308      	adds	r3, #8
 8005e50:	4a0c      	ldr	r2, [pc, #48]	@ (8005e84 <EXTMEM_MemoryMappedMode+0x98>)
 8005e52:	4413      	add	r3, r2
 8005e54:	3304      	adds	r3, #4
 8005e56:	4618      	mov	r0, r3
 8005e58:	f002 fb30 	bl	80084bc <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>
 8005e5c:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d008      	beq.n	8005e74 <EXTMEM_MemoryMappedMode+0x88>
          {
            return EXTMEM_ERROR_DRIVER;
 8005e62:	f06f 0302 	mvn.w	r3, #2
 8005e66:	e008      	b.n	8005e7a <EXTMEM_MemoryMappedMode+0x8e>
       }
       break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    case EXTMEM_SDCARD :
      retr = EXTMEM_ERROR_NOTSUPPORTED;
 8005e68:	23ff      	movs	r3, #255	@ 0xff
 8005e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8005e6c:	e003      	b.n	8005e76 <EXTMEM_MemoryMappedMode+0x8a>
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 8005e6e:	23fe      	movs	r3, #254	@ 0xfe
 8005e70:	73fb      	strb	r3, [r7, #15]
        break;
 8005e72:	e000      	b.n	8005e76 <EXTMEM_MemoryMappedMode+0x8a>
        break;
 8005e74:	bf00      	nop
      }
    }
  }
  return retr;
 8005e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	2400008c 	.word	0x2400008c

08005e88 <EXTMEM_GetMapAddress>:

EXTMEM_StatusTypeDef EXTMEM_GetMapAddress(uint32_t MemId, uint32_t *BaseAddress)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 8005e92:	23fb      	movs	r3, #251	@ 0xfb
 8005e94:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d134      	bne.n	8005f06 <EXTMEM_GetMapAddress+0x7e>
  {
    retr = EXTMEM_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 8005ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f18 <EXTMEM_GetMapAddress+0x90>)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	21ac      	movs	r1, #172	@ 0xac
 8005ea6:	fb01 f303 	mul.w	r3, r1, r3
 8005eaa:	4413      	add	r3, r2
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <EXTMEM_GetMapAddress+0x2e>
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d124      	bne.n	8005f00 <EXTMEM_GetMapAddress+0x78>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1 || EXTMEM_DRIVER_PSRAM == 1
      case EXTMEM_PSRAM:
      case EXTMEM_NOR_SFDP:{
#if defined(XSPI1)       
       if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI1)
 8005eb6:	4a18      	ldr	r2, [pc, #96]	@ (8005f18 <EXTMEM_GetMapAddress+0x90>)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	21ac      	movs	r1, #172	@ 0xac
 8005ebc:	fb01 f303 	mul.w	r3, r1, r3
 8005ec0:	4413      	add	r3, r2
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a14      	ldr	r2, [pc, #80]	@ (8005f1c <EXTMEM_GetMapAddress+0x94>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d104      	bne.n	8005ed8 <EXTMEM_GetMapAddress+0x50>
        {
          *BaseAddress = XSPI1_BASE;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
 8005ed4:	601a      	str	r2, [r3, #0]
       else
       { 
          retr = EXTMEM_ERROR_DRIVER;
       }

       break;
 8005ed6:	e016      	b.n	8005f06 <EXTMEM_GetMapAddress+0x7e>
       else if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI2)
 8005ed8:	4a0f      	ldr	r2, [pc, #60]	@ (8005f18 <EXTMEM_GetMapAddress+0x90>)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	21ac      	movs	r1, #172	@ 0xac
 8005ede:	fb01 f303 	mul.w	r3, r1, r3
 8005ee2:	4413      	add	r3, r2
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a0d      	ldr	r2, [pc, #52]	@ (8005f20 <EXTMEM_GetMapAddress+0x98>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d104      	bne.n	8005efa <EXTMEM_GetMapAddress+0x72>
          *BaseAddress = XSPI2_BASE;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8005ef6:	601a      	str	r2, [r3, #0]
       break;
 8005ef8:	e005      	b.n	8005f06 <EXTMEM_GetMapAddress+0x7e>
          retr = EXTMEM_ERROR_DRIVER;
 8005efa:	23fd      	movs	r3, #253	@ 0xfd
 8005efc:	73fb      	strb	r3, [r7, #15]
       break;
 8005efe:	e002      	b.n	8005f06 <EXTMEM_GetMapAddress+0x7e>
      break;
      }
#endif /* EXTMEM_DRIVER_USER == 1 */      
      default :
      {
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 8005f00:	23fe      	movs	r3, #254	@ 0xfe
 8005f02:	73fb      	strb	r3, [r7, #15]
        break;
 8005f04:	bf00      	nop
      }
    }
  }
  return retr;
 8005f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	2400008c 	.word	0x2400008c
 8005f1c:	52005000 	.word	0x52005000
 8005f20:	5200a000 	.word	0x5200a000

08005f24 <SAL_XSPI_SetClock>:
/* Private variables ---------------------------------------------------------*/
/** @defgroup SAL_XSPI_Exported_Functions SAL XSP Exported Functions
  * @{
  */
HAL_StatusTypeDef SAL_XSPI_SetClock(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t ClockIn, uint32_t ClockRequested, uint32_t *ClockReal)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr = HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	75fb      	strb	r3, [r7, #23]
  uint32_t divider;

  if (ClockRequested == 0u)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d102      	bne.n	8005f42 <SAL_XSPI_SetClock+0x1e>
  {
    retr = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	75fb      	strb	r3, [r7, #23]
 8005f40:	e028      	b.n	8005f94 <SAL_XSPI_SetClock+0x70>
  }
  else
  {
    divider = (ClockIn / ClockRequested);
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4a:	613b      	str	r3, [r7, #16]
    if (divider >= 1u)
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00d      	beq.n	8005f6e <SAL_XSPI_SetClock+0x4a>
    {
      *ClockReal = ClockIn / divider;
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	601a      	str	r2, [r3, #0]
      if (*ClockReal <= ClockRequested)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d302      	bcc.n	8005f6e <SAL_XSPI_SetClock+0x4a>
      {
        divider--;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	613b      	str	r3, [r7, #16]
    divider++;
    divider++;
#endif

    /* real clock calculation */
    *ClockReal = ClockIn / (divider + 1u);
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	3301      	adds	r3, #1
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	601a      	str	r2, [r3, #0]

    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::CLOCK::"); DEBUG_PARAM_INT(divider); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER, (uint32_t)divider << XSPI_DCR2_PRESCALER_Pos);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	60da      	str	r2, [r3, #12]
  }

  return retr;
 8005f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	371c      	adds	r7, #28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <SAL_XSPI_Init>:
/*
* This function is used to configure the way to discuss with the memory
*
*/
HAL_StatusTypeDef SAL_XSPI_Init(SAL_XSPI_ObjectTypeDef *SalXspi, void *HALHandle)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b096      	sub	sp, #88	@ 0x58
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6039      	str	r1, [r7, #0]
  XSPI_RegularCmdTypeDef s_commandbase = {
 8005fac:	f107 030c 	add.w	r3, r7, #12
 8005fb0:	224c      	movs	r2, #76	@ 0x4c
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f002 fa97 	bl	80084e8 <memset>
 8005fba:	235a      	movs	r3, #90	@ 0x5a
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	61bb      	str	r3, [r7, #24]
 8005fc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005fd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fd4:	2308      	movs	r3, #8
 8005fd6:	653b      	str	r3, [r7, #80]	@ 0x50
#if defined(XSPI_CCR_SIOO)
      .SIOOMode = HAL_XSPI_SIOO_INST_EVERY_CMD,
#endif /* HAL_XSPI_SIOO_INST_EVERY_CMD */
  };

  SalXspi->hxspi = (XSPI_HandleTypeDef *)HALHandle;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	601a      	str	r2, [r3, #0]
  SalXspi->Commandbase = s_commandbase;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	f107 010c 	add.w	r1, r7, #12
 8005fe6:	224c      	movs	r2, #76	@ 0x4c
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f002 faa9 	bl	8008540 <memcpy>
  SalXspi->CommandExtension = 0;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  SalXspi->PhyLink = PHY_LINK_1S1S1S;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_TX_CPLT_CB_ID, SAL_XSPI_CompleteCallback);
  /* set the error callback */
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_ERROR_CB_ID, SAL_XSPI_ErrorCallback);
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3758      	adds	r7, #88	@ 0x58
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <SAL_XSPI_MemoryConfig>:

HAL_StatusTypeDef SAL_XSPI_MemoryConfig(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_MemParamTypeTypeDef ParmetersType, void *ParamVal)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b098      	sub	sp, #96	@ 0x60
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	460b      	mov	r3, r1
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr = HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  XSPI_RegularCmdTypeDef s_commandbase = SalXspi->Commandbase;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f107 0010 	add.w	r0, r7, #16
 8006022:	3304      	adds	r3, #4
 8006024:	224c      	movs	r2, #76	@ 0x4c
 8006026:	4619      	mov	r1, r3
 8006028:	f002 fa8a 	bl	8008540 <memcpy>

  switch (ParmetersType) {
 800602c:	7afb      	ldrb	r3, [r7, #11]
 800602e:	2b04      	cmp	r3, #4
 8006030:	f200 812a 	bhi.w	8006288 <SAL_XSPI_MemoryConfig+0x280>
 8006034:	a201      	add	r2, pc, #4	@ (adr r2, 800603c <SAL_XSPI_MemoryConfig+0x34>)
 8006036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603a:	bf00      	nop
 800603c:	08006051 	.word	0x08006051
 8006040:	08006279 	.word	0x08006279
 8006044:	0800624b 	.word	0x0800624b
 8006048:	08006289 	.word	0x08006289
 800604c:	08006253 	.word	0x08006253
  case PARAM_PHY_LINK:{
    SalXspi->PhyLink = *((SAL_XSPI_PhysicalLinkTypeDef *)ParamVal);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	781a      	ldrb	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_PHY_LINK::");DEBUG_PARAM_DATA(STR_PHY_LINK(SalXspi->PhyLink));
    switch (SalXspi->PhyLink)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8006060:	2b0b      	cmp	r3, #11
 8006062:	f200 80ed 	bhi.w	8006240 <SAL_XSPI_MemoryConfig+0x238>
 8006066:	a201      	add	r2, pc, #4	@ (adr r2, 800606c <SAL_XSPI_MemoryConfig+0x64>)
 8006068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606c:	0800609d 	.word	0x0800609d
 8006070:	0800609d 	.word	0x0800609d
 8006074:	0800609d 	.word	0x0800609d
 8006078:	0800609d 	.word	0x0800609d
 800607c:	080060cd 	.word	0x080060cd
 8006080:	080060cd 	.word	0x080060cd
 8006084:	080060fd 	.word	0x080060fd
 8006088:	08006131 	.word	0x08006131
 800608c:	08006161 	.word	0x08006161
 8006090:	08006197 	.word	0x08006197
 8006094:	080061cd 	.word	0x080061cd
 8006098:	08006207 	.word	0x08006207
    {
    case PHY_LINK_1S1D1D:
    case PHY_LINK_1S2S2S:
    case PHY_LINK_1S1S2S:
    case PHY_LINK_1S1S1S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
 800609c:	2301      	movs	r3, #1
 800609e:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 80060a0:	2300      	movs	r3, #0
 80060a2:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80060a4:	2300      	movs	r3, #0
 80060a6:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_1_LINE;
 80060a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 80060ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80060b2:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
 80060b4:	2300      	movs	r3, #0
 80060b6:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_1_LINE;
 80060b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
 80060be:	2300      	movs	r3, #0
 80060c0:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
 80060c2:	2308      	movs	r3, #8
 80060c4:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 80060c6:	2300      	movs	r3, #0
 80060c8:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 80060ca:	e0bd      	b.n	8006248 <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_4S4D4D:
    case PHY_LINK_4S4S4S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
 80060cc:	2303      	movs	r3, #3
 80060ce:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 80060d0:	2300      	movs	r3, #0
 80060d2:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80060d4:	2300      	movs	r3, #0
 80060d6:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
 80060d8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80060dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
 80060de:	2300      	movs	r3, #0
 80060e0:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 80060e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80060e6:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
 80060e8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80060ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
 80060ee:	2300      	movs	r3, #0
 80060f0:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
 80060f2:	2306      	movs	r3, #6
 80060f4:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 80060f6:	2300      	movs	r3, #0
 80060f8:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 80060fa:	e0a5      	b.n	8006248 <SAL_XSPI_MemoryConfig+0x240>
      }
    case PHY_LINK_4D4D4D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
 80060fc:	2303      	movs	r3, #3
 80060fe:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8006100:	2300      	movs	r3, #0
 8006102:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 8006104:	2308      	movs	r3, #8
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
 8006108:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800610c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 800610e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006112:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8006114:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006118:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
 800611a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800611e:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
 8006120:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006124:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
 8006126:	2306      	movs	r3, #6
 8006128:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 800612a:	2300      	movs	r3, #0
 800612c:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 800612e:	e08b      	b.n	8006248 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_1S8S8S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
 8006130:	2301      	movs	r3, #1
 8006132:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8006134:	2300      	movs	r3, #0
 8006136:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8006138:	2300      	movs	r3, #0
 800613a:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
 800613c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006140:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 8006142:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006146:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8006148:	2300      	movs	r3, #0
 800614a:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
 800614c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006150:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
 8006152:	2300      	movs	r3, #0
 8006154:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
 8006156:	2308      	movs	r3, #8
 8006158:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 800615a:	2300      	movs	r3, #0
 800615c:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 800615e:	e073      	b.n	8006248 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_8S8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
 8006160:	2304      	movs	r3, #4
 8006162:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8006164:	2300      	movs	r3, #0
 8006166:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8006168:	2300      	movs	r3, #0
 800616a:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
 800616c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006170:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 8006172:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006176:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8006178:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800617c:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
 800617e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006182:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
 8006184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006188:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
 800618a:	2308      	movs	r3, #8
 800618c:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
 800618e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006192:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 8006194:	e058      	b.n	8006248 <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_8D8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
 8006196:	2304      	movs	r3, #4
 8006198:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_16_BITS;
 800619a:	2310      	movs	r3, #16
 800619c:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 800619e:	2308      	movs	r3, #8
 80061a0:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
 80061a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 80061a8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80061ac:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 80061ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80061b2:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
 80061b4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80061b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
 80061ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80061be:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 20;
 80061c0:	2314      	movs	r3, #20
 80061c2:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
 80061c4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80061c8:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 80061ca:	e03d      	b.n	8006248 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_RAM8:{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 80061cc:	2304      	movs	r3, #4
 80061ce:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
 80061d0:	2300      	movs	r3, #0
 80061d2:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80061d4:	2300      	movs	r3, #0
 80061d6:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 80061d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 80061de:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80061e2:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 80061e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80061e8:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80061ea:	2300      	movs	r3, #0
 80061ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_8_LINES;
 80061ee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80061f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 80061f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80061f8:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
 80061fa:	230a      	movs	r3, #10
 80061fc:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
 80061fe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006202:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 8006204:	e020      	b.n	8006248 <SAL_XSPI_MemoryConfig+0x240>
    }
#if defined(HAL_XSPI_DATA_16_LINES)
    case PHY_LINK_RAM16 :{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 8006206:	2304      	movs	r3, #4
 8006208:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
 800620a:	2300      	movs	r3, #0
 800620c:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800620e:	2300      	movs	r3, #0
 8006210:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 8006212:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006216:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 8006218:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800621c:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 800621e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006222:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8006224:	2300      	movs	r3, #0
 8006226:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_16_LINES;
 8006228:	f04f 63a0 	mov.w	r3, #83886080	@ 0x5000000
 800622c:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 800622e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006232:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
 8006234:	230a      	movs	r3, #10
 8006236:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
 8006238:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800623c:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 800623e:	e003      	b.n	8006248 <SAL_XSPI_MemoryConfig+0x240>
    }
#endif /* defined(HAL_XSPI_DATA_16_LINES) */
    default:
      retr = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      break;
 8006246:	bf00      	nop
    }
    DEBUG_PARAM_END();
    break;
 8006248:	e022      	b.n	8006290 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_ADDRESS_4BITS: {
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_ADDRESS_4BITS"); DEBUG_PARAM_END();
    s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 800624a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800624e:	633b      	str	r3, [r7, #48]	@ 0x30
    break;
 8006250:	e01e      	b.n	8006290 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_FLASHSIZE:{
    uint8_t valParam = *((uint8_t *)ParamVal);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_FLASHSIZE::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_DEVSIZE, ((uint32_t)valParam) << XSPI_DCR1_DEVSIZE_Pos);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8006266:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800626a:	041a      	lsls	r2, r3, #16
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	609a      	str	r2, [r3, #8]
    break;
 8006276:	e00b      	b.n	8006290 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_DUMMY_CYCLES:{
    uint8_t valParam = *((uint8_t *)ParamVal);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_DUMMY_CYCLES::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    s_commandbase.DummyCycles = valParam;
 8006280:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8006284:	657b      	str	r3, [r7, #84]	@ 0x54
    break;
 8006286:	e003      	b.n	8006290 <SAL_XSPI_MemoryConfig+0x288>
  }
  default:
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_MemoryConfig::ERROR"); DEBUG_PARAM_END();
    retr = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    break;
 800628e:	bf00      	nop
  }
  SalXspi->Commandbase = s_commandbase;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	3304      	adds	r3, #4
 8006294:	f107 0110 	add.w	r1, r7, #16
 8006298:	224c      	movs	r2, #76	@ 0x4c
 800629a:	4618      	mov	r0, r3
 800629c:	f002 f950 	bl	8008540 <memcpy>
  return retr;
 80062a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3760      	adds	r7, #96	@ 0x60
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <SAL_XSPI_GetSFDP>:

HAL_StatusTypeDef SAL_XSPI_GetSFDP(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b098      	sub	sp, #96	@ 0x60
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
 80062b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f107 0010 	add.w	r0, r7, #16
 80062c0:	3304      	adds	r3, #4
 80062c2:	224c      	movs	r2, #76	@ 0x4c
 80062c4:	4619      	mov	r1, r3
 80062c6:	f002 f93b 	bl	8008540 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, 0x5A);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80062d0:	6a39      	ldr	r1, [r7, #32]
 80062d2:	225a      	movs	r2, #90	@ 0x5a
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 fb6a 	bl	80069ae <XSPI_FormatCommand>
 80062da:	4603      	mov	r3, r0
 80062dc:	61bb      	str	r3, [r7, #24]

  s_command.Address     = Address;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength  = DataSize;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles = SalXspi->SFDPDummyCycle;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062ec:	657b      	str	r3, [r7, #84]	@ 0x54

  if (s_command.AddressMode == HAL_XSPI_ADDRESS_1_LINE)
 80062ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062f4:	d102      	bne.n	80062fc <SAL_XSPI_GetSFDP+0x50>
  {
    s_command.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 80062f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80062fa:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
 80062fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006302:	d103      	bne.n	800630c <SAL_XSPI_GetSFDP+0x60>
  {
    s_command.DQSMode = HAL_XSPI_DQS_ENABLE;
 8006304:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006308:	65bb      	str	r3, [r7, #88]	@ 0x58
 800630a:	e001      	b.n	8006310 <SAL_XSPI_GetSFDP+0x64>
  }
  else
  {
    s_command.DQSMode = HAL_XSPI_DQS_DISABLE;
 800630c:	2300      	movs	r3, #0
 800630e:	65bb      	str	r3, [r7, #88]	@ 0x58
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f107 0110 	add.w	r1, r7, #16
 8006318:	2264      	movs	r2, #100	@ 0x64
 800631a:	4618      	mov	r0, r3
 800631c:	f7fe fdf8 	bl	8004f10 <HAL_XSPI_Command>
 8006320:	4603      	mov	r3, r0
 8006322:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 8006326:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10a      	bne.n	8006344 <SAL_XSPI_GetSFDP+0x98>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2264      	movs	r2, #100	@ 0x64
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe feed 	bl	8005116 <HAL_XSPI_Receive>
 800633c:	4603      	mov	r3, r0
 800633e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006342:	e000      	b.n	8006346 <SAL_XSPI_GetSFDP+0x9a>
    goto error;
 8006344:	bf00      	nop

error:
  if (retr != HAL_OK )
 8006346:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800634a:	2b00      	cmp	r3, #0
 800634c:	d004      	beq.n	8006358 <SAL_XSPI_GetSFDP+0xac>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4618      	mov	r0, r3
 8006354:	f7ff f85a 	bl	800540c <HAL_XSPI_Abort>
  }
  return retr;
 8006358:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800635c:	4618      	mov	r0, r3
 800635e:	3760      	adds	r7, #96	@ 0x60
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <SAL_XSPI_GetId>:

HAL_StatusTypeDef SAL_XSPI_GetId(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t *Data, uint32_t DataSize)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b098      	sub	sp, #96	@ 0x60
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f107 0010 	add.w	r0, r7, #16
 8006376:	3304      	adds	r3, #4
 8006378:	224c      	movs	r2, #76	@ 0x4c
 800637a:	4619      	mov	r1, r3
 800637c:	f002 f8e0 	bl	8008540 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, 0x9F);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006386:	6a39      	ldr	r1, [r7, #32]
 8006388:	229f      	movs	r2, #159	@ 0x9f
 800638a:	4618      	mov	r0, r3
 800638c:	f000 fb0f 	bl	80069ae <XSPI_FormatCommand>
 8006390:	4603      	mov	r3, r0
 8006392:	61bb      	str	r3, [r7, #24]

  s_command.DataLength  = DataSize;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.AddressMode = HAL_XSPI_ADDRESS_NONE;
 8006398:	2300      	movs	r3, #0
 800639a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if  (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d105      	bne.n	80063ae <SAL_XSPI_GetId+0x4a>
  {
    s_command.DummyCycles       = 0;
 80063a2:	2300      	movs	r3, #0
 80063a4:	657b      	str	r3, [r7, #84]	@ 0x54
    /* this behavior is linked with micron memory to read ID in 1S8S8S */
    s_command.DataMode = HAL_XSPI_DATA_1_LINE;
 80063a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063ac:	e003      	b.n	80063b6 <SAL_XSPI_GetId+0x52>
  }
  else
  {
    /* this behavior is valid for macromix and must be confirmed on the other memories */
    s_command.Address = 0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.DummyCycles = 8;
 80063b2:	2308      	movs	r3, #8
 80063b4:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f107 0110 	add.w	r1, r7, #16
 80063be:	2264      	movs	r2, #100	@ 0x64
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fe fda5 	bl	8004f10 <HAL_XSPI_Command>
 80063c6:	4603      	mov	r3, r0
 80063c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 80063cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10a      	bne.n	80063ea <SAL_XSPI_GetId+0x86>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2264      	movs	r2, #100	@ 0x64
 80063da:	68b9      	ldr	r1, [r7, #8]
 80063dc:	4618      	mov	r0, r3
 80063de:	f7fe fe9a 	bl	8005116 <HAL_XSPI_Receive>
 80063e2:	4603      	mov	r3, r0
 80063e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80063e8:	e000      	b.n	80063ec <SAL_XSPI_GetId+0x88>
    goto error;
 80063ea:	bf00      	nop

error:
  if (retr != HAL_OK )
 80063ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d004      	beq.n	80063fe <SAL_XSPI_GetId+0x9a>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7ff f807 	bl	800540c <HAL_XSPI_Abort>
  }
  return retr;
 80063fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006402:	4618      	mov	r0, r3
 8006404:	3760      	adds	r7, #96	@ 0x60
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <SAL_XSPI_Read>:

HAL_StatusTypeDef SAL_XSPI_Read(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b098      	sub	sp, #96	@ 0x60
 800640e:	af00      	add	r7, sp, #0
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	603b      	str	r3, [r7, #0]
 8006416:	460b      	mov	r3, r1
 8006418:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f107 0010 	add.w	r0, r7, #16
 8006420:	3304      	adds	r3, #4
 8006422:	224c      	movs	r2, #76	@ 0x4c
 8006424:	4619      	mov	r1, r3
 8006426:	f002 f88b 	bl	8008540 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006430:	6a39      	ldr	r1, [r7, #32]
 8006432:	7afa      	ldrb	r2, [r7, #11]
 8006434:	4618      	mov	r0, r3
 8006436:	f000 faba 	bl	80069ae <XSPI_FormatCommand>
 800643a:	4603      	mov	r3, r0
 800643c:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
 8006442:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006444:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DTR management for single/dual/quad */
  switch(SalXspi->PhyLink)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800644c:	2b05      	cmp	r3, #5
 800644e:	d006      	beq.n	800645e <SAL_XSPI_Read+0x54>
 8006450:	2b05      	cmp	r3, #5
 8006452:	dc1a      	bgt.n	800648a <SAL_XSPI_Read+0x80>
 8006454:	2b01      	cmp	r3, #1
 8006456:	d014      	beq.n	8006482 <SAL_XSPI_Read+0x78>
 8006458:	2b02      	cmp	r3, #2
 800645a:	d00b      	beq.n	8006474 <SAL_XSPI_Read+0x6a>
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
   break;
   }
   default :{
     /* keep default parameters */
   break;
 800645c:	e015      	b.n	800648a <SAL_XSPI_Read+0x80>
     s_command.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 800645e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006462:	637b      	str	r3, [r7, #52]	@ 0x34
     s_command.DataDTRMode    = HAL_XSPI_DATA_DTR_ENABLE;
 8006464:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006468:	653b      	str	r3, [r7, #80]	@ 0x50
     s_command.DummyCycles = SalXspi->DTRDummyCycle;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8006470:	657b      	str	r3, [r7, #84]	@ 0x54
   break;
 8006472:	e00b      	b.n	800648c <SAL_XSPI_Read+0x82>
     s_command.AddressMode = HAL_XSPI_ADDRESS_2_LINES;
 8006474:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006478:	62fb      	str	r3, [r7, #44]	@ 0x2c
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
 800647a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800647e:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
 8006480:	e004      	b.n	800648c <SAL_XSPI_Read+0x82>
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
 8006482:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006486:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
 8006488:	e000      	b.n	800648c <SAL_XSPI_Read+0x82>
   break;
 800648a:	bf00      	nop
   }
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f107 0110 	add.w	r1, r7, #16
 8006494:	2264      	movs	r2, #100	@ 0x64
 8006496:	4618      	mov	r0, r3
 8006498:	f7fe fd3a 	bl	8004f10 <HAL_XSPI_Command>
 800649c:	4603      	mov	r3, r0
 800649e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 80064a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d107      	bne.n	80064ba <SAL_XSPI_Read+0xb0>
  {
    goto error;
  }

  /* read the data */
  retr = XSPI_Receive(SalXspi, Data);
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 faba 	bl	8006a26 <XSPI_Receive>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80064b8:	e000      	b.n	80064bc <SAL_XSPI_Read+0xb2>
    goto error;
 80064ba:	bf00      	nop

error:
  if (retr != HAL_OK )
 80064bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d004      	beq.n	80064ce <SAL_XSPI_Read+0xc4>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fe ff9f 	bl	800540c <HAL_XSPI_Abort>
  }
  return retr;
 80064ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3760      	adds	r7, #96	@ 0x60
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <SAL_XSPI_Write>:

HAL_StatusTypeDef SAL_XSPI_Write(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, const uint8_t *Data, uint32_t DataSize)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b098      	sub	sp, #96	@ 0x60
 80064de:	af00      	add	r7, sp, #0
 80064e0:	60f8      	str	r0, [r7, #12]
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	603b      	str	r3, [r7, #0]
 80064e6:	460b      	mov	r3, r1
 80064e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f107 0010 	add.w	r0, r7, #16
 80064f0:	3304      	adds	r3, #4
 80064f2:	224c      	movs	r2, #76	@ 0x4c
 80064f4:	4619      	mov	r1, r3
 80064f6:	f002 f823 	bl	8008540 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006500:	6a39      	ldr	r1, [r7, #32]
 8006502:	7afa      	ldrb	r2, [r7, #11]
 8006504:	4618      	mov	r0, r3
 8006506:	f000 fa52 	bl	80069ae <XSPI_FormatCommand>
 800650a:	4603      	mov	r3, r0
 800650c:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
 8006512:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006514:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0u;
 8006516:	2300      	movs	r3, #0
 8006518:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode           = HAL_XSPI_DQS_DISABLE;
 800651a:	2300      	movs	r3, #0
 800651c:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f107 0110 	add.w	r1, r7, #16
 8006526:	2264      	movs	r2, #100	@ 0x64
 8006528:	4618      	mov	r0, r3
 800652a:	f7fe fcf1 	bl	8004f10 <HAL_XSPI_Command>
 800652e:	4603      	mov	r3, r0
 8006530:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (HAL_OK != retr)
 8006534:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006538:	2b00      	cmp	r3, #0
 800653a:	d107      	bne.n	800654c <SAL_XSPI_Write+0x72>
  {
    goto error;
  }

  /* transmit data */
  retr = XSPI_Transmit(SalXspi, Data);
 800653c:	6839      	ldr	r1, [r7, #0]
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 fa5e 	bl	8006a00 <XSPI_Transmit>
 8006544:	4603      	mov	r3, r0
 8006546:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800654a:	e000      	b.n	800654e <SAL_XSPI_Write+0x74>
    goto error;
 800654c:	bf00      	nop

error:
  if (retr != HAL_OK )
 800654e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006552:	2b00      	cmp	r3, #0
 8006554:	d004      	beq.n	8006560 <SAL_XSPI_Write+0x86>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe ff56 	bl	800540c <HAL_XSPI_Abort>
  }
  return retr;
 8006560:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006564:	4618      	mov	r0, r3
 8006566:	3760      	adds	r7, #96	@ 0x60
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <SAL_XSPI_CommandSendData>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_CommandSendData(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b098      	sub	sp, #96	@ 0x60
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	607a      	str	r2, [r7, #4]
 8006576:	461a      	mov	r2, r3
 8006578:	460b      	mov	r3, r1
 800657a:	72fb      	strb	r3, [r7, #11]
 800657c:	4613      	mov	r3, r2
 800657e:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f107 0010 	add.w	r0, r7, #16
 8006586:	3304      	adds	r3, #4
 8006588:	224c      	movs	r2, #76	@ 0x4c
 800658a:	4619      	mov	r1, r3
 800658c:	f001 ffd8 	bl	8008540 <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006596:	6a39      	ldr	r1, [r7, #32]
 8006598:	7afa      	ldrb	r2, [r7, #11]
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fa07 	bl	80069ae <XSPI_FormatCommand>
 80065a0:	4603      	mov	r3, r0
 80065a2:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 80065a4:	2300      	movs	r3, #0
 80065a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
 80065ac:	893b      	ldrh	r3, [r7, #8]
 80065ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 80065b0:	2300      	movs	r3, #0
 80065b2:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
 80065b4:	893b      	ldrh	r3, [r7, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <SAL_XSPI_CommandSendData+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
 80065ba:	2300      	movs	r3, #0
 80065bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f107 0110 	add.w	r1, r7, #16
 80065c6:	2264      	movs	r2, #100	@ 0x64
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fe fca1 	bl	8004f10 <HAL_XSPI_Command>
 80065ce:	4603      	mov	r3, r0
 80065d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
 80065d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10c      	bne.n	80065f6 <SAL_XSPI_CommandSendData+0x8a>
 80065dc:	893b      	ldrh	r3, [r7, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d009      	beq.n	80065f6 <SAL_XSPI_CommandSendData+0x8a>
  {
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2264      	movs	r2, #100	@ 0x64
 80065e8:	6879      	ldr	r1, [r7, #4]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fe fd20 	bl	8005030 <HAL_XSPI_Transmit>
 80065f0:	4603      	mov	r3, r0
 80065f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
 80065f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d004      	beq.n	8006608 <SAL_XSPI_CommandSendData+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe ff02 	bl	800540c <HAL_XSPI_Abort>
  }
  return retr;
 8006608:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800660c:	4618      	mov	r0, r3
 800660e:	3760      	adds	r7, #96	@ 0x60
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <SAL_XSPI_SendReadCommand>:

HAL_StatusTypeDef SAL_XSPI_SendReadCommand(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b098      	sub	sp, #96	@ 0x60
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	607a      	str	r2, [r7, #4]
 800661e:	461a      	mov	r2, r3
 8006620:	460b      	mov	r3, r1
 8006622:	72fb      	strb	r3, [r7, #11]
 8006624:	4613      	mov	r3, r2
 8006626:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f107 0010 	add.w	r0, r7, #16
 800662e:	3304      	adds	r3, #4
 8006630:	224c      	movs	r2, #76	@ 0x4c
 8006632:	4619      	mov	r1, r3
 8006634:	f001 ff84 	bl	8008540 <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800663e:	6a39      	ldr	r1, [r7, #32]
 8006640:	7afa      	ldrb	r2, [r7, #11]
 8006642:	4618      	mov	r0, r3
 8006644:	f000 f9b3 	bl	80069ae <XSPI_FormatCommand>
 8006648:	4603      	mov	r3, r0
 800664a:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 800664c:	2300      	movs	r3, #0
 800664e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0u;
 8006650:	2300      	movs	r3, #0
 8006652:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
 8006654:	893b      	ldrh	r3, [r7, #8]
 8006656:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8006658:	2300      	movs	r3, #0
 800665a:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
 800665c:	893b      	ldrh	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <SAL_XSPI_SendReadCommand+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
 8006662:	2300      	movs	r3, #0
 8006664:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f107 0110 	add.w	r1, r7, #16
 800666e:	2264      	movs	r2, #100	@ 0x64
 8006670:	4618      	mov	r0, r3
 8006672:	f7fe fc4d 	bl	8004f10 <HAL_XSPI_Command>
 8006676:	4603      	mov	r3, r0
 8006678:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
 800667c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10c      	bne.n	800669e <SAL_XSPI_SendReadCommand+0x8a>
 8006684:	893b      	ldrh	r3, [r7, #8]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d009      	beq.n	800669e <SAL_XSPI_SendReadCommand+0x8a>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2264      	movs	r2, #100	@ 0x64
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	4618      	mov	r0, r3
 8006694:	f7fe fd3f 	bl	8005116 <HAL_XSPI_Receive>
 8006698:	4603      	mov	r3, r0
 800669a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
 800669e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d004      	beq.n	80066b0 <SAL_XSPI_SendReadCommand+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fe feae 	bl	800540c <HAL_XSPI_Abort>
  }
  return retr;
 80066b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3760      	adds	r7, #96	@ 0x60
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <SAL_XSPI_CommandSendReadAddress>:

HAL_StatusTypeDef SAL_XSPI_CommandSendReadAddress(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                                  uint32_t Address, uint8_t *Data, uint16_t DataSize)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b098      	sub	sp, #96	@ 0x60
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	607a      	str	r2, [r7, #4]
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	460b      	mov	r3, r1
 80066ca:	72fb      	strb	r3, [r7, #11]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f107 0010 	add.w	r0, r7, #16
 80066d2:	3304      	adds	r3, #4
 80066d4:	224c      	movs	r2, #76	@ 0x4c
 80066d6:	4619      	mov	r1, r3
 80066d8:	f001 ff32 	bl	8008540 <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80066e2:	6a39      	ldr	r1, [r7, #32]
 80066e4:	7afa      	ldrb	r2, [r7, #11]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 f961 	bl	80069ae <XSPI_FormatCommand>
 80066ec:	4603      	mov	r3, r0
 80066ee:	61bb      	str	r3, [r7, #24]

  s_command.Address            = Address;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DummyCycles        = SalXspi->SFDPDummyCycle;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066fa:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
 80066fc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8006700:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8006702:	2300      	movs	r3, #0
 8006704:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f107 0110 	add.w	r1, r7, #16
 800670e:	2264      	movs	r2, #100	@ 0x64
 8006710:	4618      	mov	r0, r3
 8006712:	f7fe fbfd 	bl	8004f10 <HAL_XSPI_Command>
 8006716:	4603      	mov	r3, r0
 8006718:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if ( retr == HAL_OK)
 800671c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006720:	2b00      	cmp	r3, #0
 8006722:	d109      	bne.n	8006738 <SAL_XSPI_CommandSendReadAddress+0x7c>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2264      	movs	r2, #100	@ 0x64
 800672a:	6839      	ldr	r1, [r7, #0]
 800672c:	4618      	mov	r0, r3
 800672e:	f7fe fcf2 	bl	8005116 <HAL_XSPI_Receive>
 8006732:	4603      	mov	r3, r0
 8006734:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
 8006738:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800673c:	2b00      	cmp	r3, #0
 800673e:	d004      	beq.n	800674a <SAL_XSPI_CommandSendReadAddress+0x8e>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4618      	mov	r0, r3
 8006746:	f7fe fe61 	bl	800540c <HAL_XSPI_Abort>
  }
  return retr;
 800674a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800674e:	4618      	mov	r0, r3
 8006750:	3760      	adds	r7, #96	@ 0x60
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <SAL_XSPI_CheckStatusRegister>:

HAL_StatusTypeDef SAL_XSPI_CheckStatusRegister(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t MatchValue, uint8_t MatchMask, uint32_t Timeout)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b09e      	sub	sp, #120	@ 0x78
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	461a      	mov	r2, r3
 8006762:	460b      	mov	r3, r1
 8006764:	72fb      	strb	r3, [r7, #11]
 8006766:	4613      	mov	r3, r2
 8006768:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8006770:	3304      	adds	r3, #4
 8006772:	224c      	movs	r2, #76	@ 0x4c
 8006774:	4619      	mov	r1, r3
 8006776:	f001 fee3 	bl	8008540 <memcpy>
  XSPI_AutoPollingTypeDef  s_config = {
 800677a:	7abb      	ldrb	r3, [r7, #10]
 800677c:	617b      	str	r3, [r7, #20]
 800677e:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8006782:	61bb      	str	r3, [r7, #24]
 8006784:	2300      	movs	r3, #0
 8006786:	61fb      	str	r3, [r7, #28]
 8006788:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800678c:	623b      	str	r3, [r7, #32]
 800678e:	2310      	movs	r3, #16
 8006790:	627b      	str	r3, [r7, #36]	@ 0x24
                                       .IntervalTime  = 0x10
                                      };
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006798:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800679a:	7afa      	ldrb	r2, [r7, #11]
 800679c:	4618      	mov	r0, r3
 800679e:	f000 f906 	bl	80069ae <XSPI_FormatCommand>
 80067a2:	4603      	mov	r3, r0
 80067a4:	633b      	str	r3, [r7, #48]	@ 0x30

  s_command.DataLength     = 1u;
 80067a6:	2301      	movs	r3, #1
 80067a8:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.DQSMode        = HAL_XSPI_DQS_DISABLE;
 80067aa:	2300      	movs	r3, #0
 80067ac:	673b      	str	r3, [r7, #112]	@ 0x70

  if (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
 80067ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d106      	bne.n	80067c2 <SAL_XSPI_CheckStatusRegister+0x6c>
  {
    // patch cypress to force 1 line on status read
    s_command.DataMode    = HAL_XSPI_DATA_1_LINE;
 80067b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80067b8:	663b      	str	r3, [r7, #96]	@ 0x60
    s_command.AddressMode = HAL_XSPI_DATA_NONE;
 80067ba:	2300      	movs	r3, #0
 80067bc:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.DummyCycles = 0u;
 80067be:	2300      	movs	r3, #0
 80067c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  }

  /* @ is used only in 8 LINES format */
  if (s_command.DataMode == HAL_XSPI_DATA_8_LINES)
 80067c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067c8:	d107      	bne.n	80067da <SAL_XSPI_CheckStatusRegister+0x84>
  {
    s_command.AddressMode    = HAL_XSPI_ADDRESS_8_LINES;
 80067ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067ce:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
 80067d0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80067d4:	64bb      	str	r3, [r7, #72]	@ 0x48
    s_command.Address        = Address;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	643b      	str	r3, [r7, #64]	@ 0x40
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80067e2:	2264      	movs	r2, #100	@ 0x64
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7fe fb93 	bl	8004f10 <HAL_XSPI_Command>
 80067ea:	4603      	mov	r3, r0
 80067ec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if ( retr == HAL_OK)
 80067f0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10b      	bne.n	8006810 <SAL_XSPI_CheckStatusRegister+0xba>
  {
    retr = HAL_XSPI_AutoPolling(SalXspi->hxspi, &s_config, Timeout);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f107 0114 	add.w	r1, r7, #20
 8006800:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006804:	4618      	mov	r0, r3
 8006806:	f7fe fd29 	bl	800525c <HAL_XSPI_AutoPolling>
 800680a:	4603      	mov	r3, r0
 800680c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    DEBUG_AUTOPOLLING(SalXspi->hxspi->Instance->DR, s_config.MatchValue, s_config.MatchMask)
  }

  if (retr != HAL_OK )
 8006810:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006814:	2b00      	cmp	r3, #0
 8006816:	d004      	beq.n	8006822 <SAL_XSPI_CheckStatusRegister+0xcc>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe fdf5 	bl	800540c <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
 8006822:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8006826:	4618      	mov	r0, r3
 8006828:	3778      	adds	r7, #120	@ 0x78
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <SAL_XSPI_EnableMapMode>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_EnableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t CommandRead, uint8_t DummyRead,
                                         uint8_t CommandWrite, uint8_t DummyWrite)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b098      	sub	sp, #96	@ 0x60
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	4608      	mov	r0, r1
 8006838:	4611      	mov	r1, r2
 800683a:	461a      	mov	r2, r3
 800683c:	4603      	mov	r3, r0
 800683e:	70fb      	strb	r3, [r7, #3]
 8006840:	460b      	mov	r3, r1
 8006842:	70bb      	strb	r3, [r7, #2]
 8006844:	4613      	mov	r3, r2
 8006846:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f107 0010 	add.w	r0, r7, #16
 800684e:	3304      	adds	r3, #4
 8006850:	224c      	movs	r2, #76	@ 0x4c
 8006852:	4619      	mov	r1, r3
 8006854:	f001 fe74 	bl	8008540 <memcpy>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8006858:	f107 0308 	add.w	r3, r7, #8
 800685c:	2200      	movs	r2, #0
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	605a      	str	r2, [r3, #4]

  /* Initialize the read ID command */
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
 8006862:	2301      	movs	r3, #1
 8006864:	613b      	str	r3, [r7, #16]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandRead);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800686c:	6a39      	ldr	r1, [r7, #32]
 800686e:	78fa      	ldrb	r2, [r7, #3]
 8006870:	4618      	mov	r0, r3
 8006872:	f000 f89c 	bl	80069ae <XSPI_FormatCommand>
 8006876:	4603      	mov	r3, r0
 8006878:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles = DummyRead;
 800687a:	78bb      	ldrb	r3, [r7, #2]
 800687c:	657b      	str	r3, [r7, #84]	@ 0x54
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f107 0110 	add.w	r1, r7, #16
 8006886:	2264      	movs	r2, #100	@ 0x64
 8006888:	4618      	mov	r0, r3
 800688a:	f7fe fb41 	bl	8004f10 <HAL_XSPI_Command>
 800688e:	4603      	mov	r3, r0
 8006890:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 8006894:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006898:	2b00      	cmp	r3, #0
 800689a:	d12d      	bne.n	80068f8 <SAL_XSPI_EnableMapMode+0xca>
  {
    goto error;
  }

  /* Initialize the read ID command */
  s_command.OperationType     = HAL_XSPI_OPTYPE_WRITE_CFG;
 800689c:	2302      	movs	r3, #2
 800689e:	613b      	str	r3, [r7, #16]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandWrite);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80068a6:	6a39      	ldr	r1, [r7, #32]
 80068a8:	787a      	ldrb	r2, [r7, #1]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 f87f 	bl	80069ae <XSPI_FormatCommand>
 80068b0:	4603      	mov	r3, r0
 80068b2:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles = DummyWrite;
 80068b4:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80068b8:	657b      	str	r3, [r7, #84]	@ 0x54
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f107 0110 	add.w	r1, r7, #16
 80068c2:	2264      	movs	r2, #100	@ 0x64
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fe fb23 	bl	8004f10 <HAL_XSPI_Command>
 80068ca:	4603      	mov	r3, r0
 80068cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 80068d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d111      	bne.n	80068fc <SAL_XSPI_EnableMapMode+0xce>
  {
    goto error;
  }

  /* Activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation  = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 80068d8:	2300      	movs	r3, #0
 80068da:	60bb      	str	r3, [r7, #8]
  sMemMappedCfg.TimeoutPeriodClock = 0x50;
 80068dc:	2350      	movs	r3, #80	@ 0x50
 80068de:	60fb      	str	r3, [r7, #12]
  retr = HAL_XSPI_MemoryMapped(SalXspi->hxspi, &sMemMappedCfg);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f107 0208 	add.w	r2, r7, #8
 80068e8:	4611      	mov	r1, r2
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe fd40 	bl	8005370 <HAL_XSPI_MemoryMapped>
 80068f0:	4603      	mov	r3, r0
 80068f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80068f6:	e002      	b.n	80068fe <SAL_XSPI_EnableMapMode+0xd0>
    goto error;
 80068f8:	bf00      	nop
 80068fa:	e000      	b.n	80068fe <SAL_XSPI_EnableMapMode+0xd0>
    goto error;
 80068fc:	bf00      	nop

error:
  if (retr != HAL_OK )
 80068fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006902:	2b00      	cmp	r3, #0
 8006904:	d004      	beq.n	8006910 <SAL_XSPI_EnableMapMode+0xe2>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4618      	mov	r0, r3
 800690c:	f7fe fd7e 	bl	800540c <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
 8006910:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006914:	4618      	mov	r0, r3
 8006916:	3760      	adds	r7, #96	@ 0x60
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <SAL_XSPI_DisableMapMode>:

HAL_StatusTypeDef SAL_XSPI_DisableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8006924:	f3bf 8f4f 	dsb	sy
}
 8006928:	bf00      	nop
  __DSB();
  return HAL_XSPI_Abort(SalXspi->hxspi);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f7fe fd6c 	bl	800540c <HAL_XSPI_Abort>
 8006934:	4603      	mov	r3, r0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <SAL_XSPI_UpdateMemoryType>:


HAL_StatusTypeDef SAL_XSPI_UpdateMemoryType(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_DataOrderTypeDef DataOrder)
{
 800693e:	b480      	push	{r7}
 8006940:	b085      	sub	sp, #20
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	460b      	mov	r3, r1
 8006948:	70fb      	strb	r3, [r7, #3]
HAL_StatusTypeDef retr = HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	73fb      	strb	r3, [r7, #15]

  /* read the memory type value */
  uint32_t memorytype = READ_REG(SalXspi->hxspi->Instance->DCR1) & XSPI_DCR1_MTYP;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800695a:	60bb      	str	r3, [r7, #8]

  switch(DataOrder)
 800695c:	78fb      	ldrb	r3, [r7, #3]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d11e      	bne.n	80069a0 <SAL_XSPI_UpdateMemoryType+0x62>
  {
  case SAL_XSPI_ORDERINVERTED :
    if (memorytype == HAL_XSPI_MEMTYPE_MICRON) {
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d103      	bne.n	8006970 <SAL_XSPI_UpdateMemoryType+0x32>
      memorytype = HAL_XSPI_MEMTYPE_MACRONIX;
 8006968:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800696c:	60bb      	str	r3, [r7, #8]
 800696e:	e008      	b.n	8006982 <SAL_XSPI_UpdateMemoryType+0x44>
    } else if (memorytype == HAL_XSPI_MEMTYPE_MACRONIX) {
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006976:	d102      	bne.n	800697e <SAL_XSPI_UpdateMemoryType+0x40>
      memorytype = HAL_XSPI_MEMTYPE_MICRON;
 8006978:	2300      	movs	r3, #0
 800697a:	60bb      	str	r3, [r7, #8]
 800697c:	e001      	b.n	8006982 <SAL_XSPI_UpdateMemoryType+0x44>
    } else {
      retr = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	73fb      	strb	r3, [r7, #15]
    }
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_MTYP, memorytype);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	430a      	orrs	r2, r1
 8006998:	609a      	str	r2, [r3, #8]
    break;
 800699a:	bf00      	nop
    return HAL_ERROR;
    break;
  }

  DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_UpdateMemoryType::"); DEBUG_PARAM_INT(memorytype); DEBUG_PARAM_END();
  return retr;
 800699c:	7bfb      	ldrb	r3, [r7, #15]
 800699e:	e000      	b.n	80069a2 <SAL_XSPI_UpdateMemoryType+0x64>
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <XSPI_FormatCommand>:
  * @param InstructionWidth instruction width
  * @param Command command
  * @return the formatted command
  */
uint16_t XSPI_FormatCommand(uint8_t CommandExtension, uint32_t InstructionWidth, uint8_t Command)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b085      	sub	sp, #20
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	4603      	mov	r3, r0
 80069b6:	6039      	str	r1, [r7, #0]
 80069b8:	71fb      	strb	r3, [r7, #7]
 80069ba:	4613      	mov	r3, r2
 80069bc:	71bb      	strb	r3, [r7, #6]
  uint16_t retr;
  if  (InstructionWidth == HAL_XSPI_INSTRUCTION_16_BITS)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b10      	cmp	r3, #16
 80069c2:	d114      	bne.n	80069ee <XSPI_FormatCommand+0x40>
  {
    /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
    /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
    /* 0b11 Command and Command Extension forms a 16 bit command word :: Not yes handled */
    retr = ((uint16_t)Command << 8u);
 80069c4:	79bb      	ldrb	r3, [r7, #6]
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	021b      	lsls	r3, r3, #8
 80069ca:	81fb      	strh	r3, [r7, #14]
    if (CommandExtension == 1u)
 80069cc:	79fb      	ldrb	r3, [r7, #7]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d107      	bne.n	80069e2 <XSPI_FormatCommand+0x34>
    {
       retr|=  (uint8_t)(~Command & 0xFFu);
 80069d2:	79bb      	ldrb	r3, [r7, #6]
 80069d4:	43db      	mvns	r3, r3
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	461a      	mov	r2, r3
 80069da:	89fb      	ldrh	r3, [r7, #14]
 80069dc:	4313      	orrs	r3, r2
 80069de:	81fb      	strh	r3, [r7, #14]
 80069e0:	e007      	b.n	80069f2 <XSPI_FormatCommand+0x44>
    }
    else
    {
       retr|=  (uint8_t)(Command & 0xFFu);
 80069e2:	79bb      	ldrb	r3, [r7, #6]
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	89fb      	ldrh	r3, [r7, #14]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	81fb      	strh	r3, [r7, #14]
 80069ec:	e001      	b.n	80069f2 <XSPI_FormatCommand+0x44>
    }
  }
  else
  {
    retr = Command;
 80069ee:	79bb      	ldrb	r3, [r7, #6]
 80069f0:	81fb      	strh	r3, [r7, #14]
  }

  return retr;
 80069f2:	89fb      	ldrh	r3, [r7, #14]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <XSPI_Transmit>:


HAL_StatusTypeDef XSPI_Transmit(SAL_XSPI_ObjectTypeDef *SalXspi, const uint8_t *Data)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmatx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* transmit data */
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2264      	movs	r2, #100	@ 0x64
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe fb0c 	bl	8005030 <HAL_XSPI_Transmit>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return retr;
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <XSPI_Receive>:
  * @param hxpsi handle on the XSPI IP
  * @param Data data pointer
  * @return none
  */
HAL_StatusTypeDef XSPI_Receive(SAL_XSPI_ObjectTypeDef *SalXspi,  uint8_t *Data)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b084      	sub	sp, #16
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmarx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* Reception of the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2264      	movs	r2, #100	@ 0x64
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fe fb6c 	bl	8005116 <HAL_XSPI_Receive>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	73fb      	strb	r3, [r7, #15]
        retr = HAL_ERROR;
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  return retr;
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <SFDP_ReadHeader>:
 * @param Object memory Object
 * @param sfdp_header data of the SFDP header
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef SFDP_ReadHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFPD_HeaderTypeDef *sfdp_header)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr;
  uint8_t retry_counter = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	73bb      	strb	r3, [r7, #14]
  SFDP_DEBUG_STR(__func__);
  
  do {
    /* Reset the signature value */
    sfdp_header->Signature = 0;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	601a      	str	r2, [r3, #0]
    
    /* send the SFDP command to read the header */
    if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 0, (uint8_t*)sfdp_header, SFDP_HEADER_SIZE))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f103 0008 	add.w	r0, r3, #8
 8006a66:	2308      	movs	r3, #8
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	f7ff fc1e 	bl	80062ac <SAL_XSPI_GetSFDP>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <SFDP_ReadHeader+0x30>
    {
      retr = EXTMEM_SFDP_ERROR_SFPDREAD;
 8006a76:	2303      	movs	r3, #3
 8006a78:	73fb      	strb	r3, [r7, #15]
      goto error;
 8006a7a:	e01f      	b.n	8006abc <SFDP_ReadHeader+0x70>
    }
    
    /* view the header signature value  */
    SFDP_DEBUG_INT("SFDP signature::", sfdp_header->Signature);
    
    switch(CheckSFDP_Signature(Object, sfdp_header->Signature))
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4619      	mov	r1, r3
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f001 fc06 	bl	8008294 <CheckSFDP_Signature>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <SFDP_ReadHeader+0x48>
 8006a8e:	2b05      	cmp	r3, #5
 8006a90:	d005      	beq.n	8006a9e <SFDP_ReadHeader+0x52>
 8006a92:	e00a      	b.n	8006aaa <SFDP_ReadHeader+0x5e>
    {
    case EXTMEM_SFDP_OK:
      SFDP_DEBUG_INT("param_number=", sfdp_header->param_number);
      SFDP_DEBUG_INT("AccessProtocol=", sfdp_header->AccessProtocol);
      retr = EXTMEM_SFDP_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
 8006a98:	2302      	movs	r3, #2
 8006a9a:	73bb      	strb	r3, [r7, #14]
    break;
 8006a9c:	e00a      	b.n	8006ab4 <SFDP_ReadHeader+0x68>
    case EXTMEM_SFDP_ERROR_SIGNATUREMTYPE:
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 8006a9e:	2304      	movs	r3, #4
 8006aa0:	73fb      	strb	r3, [r7, #15]
      retry_counter++;
 8006aa2:	7bbb      	ldrb	r3, [r7, #14]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	73bb      	strb	r3, [r7, #14]
      break;
 8006aa8:	e004      	b.n	8006ab4 <SFDP_ReadHeader+0x68>
    /* case EXTMEM_SFDP_ERROR_SIGNATURE :*/
    default :
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 8006aaa:	2304      	movs	r3, #4
 8006aac:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
 8006aae:	2302      	movs	r3, #2
 8006ab0:	73bb      	strb	r3, [r7, #14]
      break;
 8006ab2:	bf00      	nop
    }
  } while(retry_counter < 2u);
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d9cf      	bls.n	8006a5a <SFDP_ReadHeader+0xe>

error:
 8006aba:	bf00      	nop
  return retr;
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <SFDP_GetHeader>:


SFDP_StatusTypeDef SFDP_GetHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFPD_HeaderTypeDef *sfdp_header)
{
 8006ac8:	b590      	push	{r4, r7, lr}
 8006aca:	b089      	sub	sp, #36	@ 0x24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 8006ad2:	2304      	movs	r3, #4
 8006ad4:	77fb      	strb	r3, [r7, #31]
  SFDP_DEBUG_STR(__func__);
  const TableConfig_Typedef table_config[] =
 8006ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8006b80 <SFDP_GetHeader+0xb8>)
 8006ad8:	f107 040c 	add.w	r4, r7, #12
 8006adc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ade:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    {PHY_LINK_8D8D8D, 10u},
    {PHY_LINK_8D8D8D, 16u}
  };
  
  /* loop to find the link configuration of the memory */
  for (uint8_t index = 0u;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	77bb      	strb	r3, [r7, #30]
 8006ae6:	e040      	b.n	8006b6a <SFDP_GetHeader+0xa2>
  {
    /* Set the command mode */
    SFDP_DEBUG_STR("try a command configuration");
    
    /* Configure the link */
    Object->sfpd_private.DriverInfo.SpiPhyLink  = table_config[index].PhyLink;
 8006ae8:	7fbb      	ldrb	r3, [r7, #30]
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	3320      	adds	r3, #32
 8006aee:	443b      	add	r3, r7
 8006af0:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f103 0008 	add.w	r0, r3, #8
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3364      	adds	r3, #100	@ 0x64
 8006b04:	461a      	mov	r2, r3
 8006b06:	2100      	movs	r1, #0
 8006b08:	f7ff fa7e 	bl	8006008 <SAL_XSPI_MemoryConfig>
    SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfpd_private.SALObject, table_config[index].DummyCycle);
 8006b0c:	7fbb      	ldrb	r3, [r7, #30]
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	3320      	adds	r3, #32
 8006b12:	443b      	add	r3, r7
 8006b14:	f813 2c13 	ldrb.w	r2, [r3, #-19]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Loop on the instruction extension */    
    for (uint8_t IExt = 0u;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	777b      	strb	r3, [r7, #29]
 8006b22:	e017      	b.n	8006b54 <SFDP_GetHeader+0x8c>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
    {
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfpd_private.SALObject, IExt);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	7f7a      	ldrb	r2, [r7, #29]
 8006b28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Read the sfdp header */
      if (EXTMEM_SFDP_OK == SFDP_ReadHeader(Object, sfdp_header))
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff ff8c 	bl	8006a4c <SFDP_ReadHeader>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <SFDP_GetHeader+0x76>
      {
        retr = EXTMEM_SFDP_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	77fb      	strb	r3, [r7, #31]
      }

      if (table_config[index].PhyLink < PHY_LINK_4S4S4S)
 8006b3e:	7fbb      	ldrb	r3, [r7, #30]
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	3320      	adds	r3, #32
 8006b44:	443b      	add	r3, r7
 8006b46:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d909      	bls.n	8006b62 <SFDP_GetHeader+0x9a>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
 8006b4e:	7f7b      	ldrb	r3, [r7, #29]
 8006b50:	3301      	adds	r3, #1
 8006b52:	777b      	strb	r3, [r7, #29]
 8006b54:	7f7b      	ldrb	r3, [r7, #29]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d804      	bhi.n	8006b64 <SFDP_GetHeader+0x9c>
 8006b5a:	7ffb      	ldrb	r3, [r7, #31]
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	d0e1      	beq.n	8006b24 <SFDP_GetHeader+0x5c>
 8006b60:	e000      	b.n	8006b64 <SFDP_GetHeader+0x9c>
      {
        /* Config 1 is invalid so exit the loop */
        break;
 8006b62:	bf00      	nop
           ; index++) 
 8006b64:	7fbb      	ldrb	r3, [r7, #30]
 8006b66:	3301      	adds	r3, #1
 8006b68:	77bb      	strb	r3, [r7, #30]
       (index < (sizeof(table_config)/sizeof(TableConfig_Typedef))) &&
 8006b6a:	7fbb      	ldrb	r3, [r7, #30]
 8006b6c:	2b07      	cmp	r3, #7
 8006b6e:	d802      	bhi.n	8006b76 <SFDP_GetHeader+0xae>
 8006b70:	7ffb      	ldrb	r3, [r7, #31]
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d0b8      	beq.n	8006ae8 <SFDP_GetHeader+0x20>
      }
    }
  }
  return retr;
 8006b76:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3724      	adds	r7, #36	@ 0x24
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd90      	pop	{r4, r7, pc}
 8006b80:	0800857c 	.word	0x0800857c

08006b84 <SFDP_CollectData>:

SFDP_StatusTypeDef SFDP_CollectData(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	77fb      	strb	r3, [r7, #31]
  uint32_t sfdp_adress = SFDP_HEADER_SIZE;
 8006b90:	2308      	movs	r3, #8
 8006b92:	61bb      	str	r3, [r7, #24]
  SFDP_DEBUG_STR(__func__);

  /* reset the table mask */
  Object->sfpd_private.Sfdp_table_mask = 0;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* reset the param info */
  (void)memset(sfdp_param_info, 0x0, sizeof(sfdp_param_info));
 8006b9c:	2278      	movs	r2, #120	@ 0x78
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	485f      	ldr	r0, [pc, #380]	@ (8006d20 <SFDP_CollectData+0x19c>)
 8006ba2:	f001 fca1 	bl	80084e8 <memset>

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	75fb      	strb	r3, [r7, #23]
 8006baa:	e027      	b.n	8006bfc <SFDP_CollectData+0x78>
  {
    CHECK_FUNCTION_CALL(sfdp_get_paraminfo(Object, sfdp_adress, &sfdp_param_info[index]))
 8006bac:	7dfa      	ldrb	r2, [r7, #23]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4a5a      	ldr	r2, [pc, #360]	@ (8006d20 <SFDP_CollectData+0x19c>)
 8006bb8:	4413      	add	r3, r2
 8006bba:	461a      	mov	r2, r3
 8006bbc:	69b9      	ldr	r1, [r7, #24]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 ffae 	bl	8007b20 <sfdp_get_paraminfo>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	77fb      	strb	r3, [r7, #31]
 8006bc8:	7ffb      	ldrb	r3, [r7, #31]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f040 80a2 	bne.w	8006d14 <SFDP_CollectData+0x190>
    Object->sfpd_private.Sfdp_table_mask |= (uint32_t)sfdp_param_info[index].type;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8006bd6:	7dfa      	ldrb	r2, [r7, #23]
 8006bd8:	4851      	ldr	r0, [pc, #324]	@ (8006d20 <SFDP_CollectData+0x19c>)
 8006bda:	4613      	mov	r3, r2
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4403      	add	r3, r0
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	ea41 0203 	orr.w	r2, r1, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    sfdp_adress+= SFDP_PARAM_HEADER_SIZE;
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	61bb      	str	r3, [r7, #24]
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 8006bf6:	7dfb      	ldrb	r3, [r7, #23]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	75fb      	strb	r3, [r7, #23]
 8006bfc:	7dfa      	ldrb	r2, [r7, #23]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8006c04:	3301      	adds	r3, #1
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d3d0      	bcc.n	8006bac <SFDP_CollectData+0x28>
  }

  /* Read each table param to extract the information to build the driver */
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFPD_PARAMID_UNKNOWN; index++)
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	75bb      	strb	r3, [r7, #22]
 8006c0e:	e075      	b.n	8006cfc <SFDP_CollectData+0x178>
  {
    uint8_t *ptr = NULL;
 8006c10:	2300      	movs	r3, #0
 8006c12:	613b      	str	r3, [r7, #16]
    uint32_t size = sfdp_param_info[index].size;
 8006c14:	7dba      	ldrb	r2, [r7, #22]
 8006c16:	4942      	ldr	r1, [pc, #264]	@ (8006d20 <SFDP_CollectData+0x19c>)
 8006c18:	4613      	mov	r3, r2
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	4413      	add	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	440b      	add	r3, r1
 8006c22:	3308      	adds	r3, #8
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	60fb      	str	r3, [r7, #12]
    switch(sfdp_param_info[index].type)
 8006c28:	7dba      	ldrb	r2, [r7, #22]
 8006c2a:	493d      	ldr	r1, [pc, #244]	@ (8006d20 <SFDP_CollectData+0x19c>)
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	005b      	lsls	r3, r3, #1
 8006c30:	4413      	add	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	440b      	add	r3, r1
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c3c:	d029      	beq.n	8006c92 <SFDP_CollectData+0x10e>
 8006c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c42:	d829      	bhi.n	8006c98 <SFDP_CollectData+0x114>
 8006c44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c48:	d01d      	beq.n	8006c86 <SFDP_CollectData+0x102>
 8006c4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c4e:	d823      	bhi.n	8006c98 <SFDP_CollectData+0x114>
 8006c50:	2b80      	cmp	r3, #128	@ 0x80
 8006c52:	d01b      	beq.n	8006c8c <SFDP_CollectData+0x108>
 8006c54:	2b80      	cmp	r3, #128	@ 0x80
 8006c56:	d81f      	bhi.n	8006c98 <SFDP_CollectData+0x114>
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d002      	beq.n	8006c62 <SFDP_CollectData+0xde>
 8006c5c:	2b40      	cmp	r3, #64	@ 0x40
 8006c5e:	d00f      	beq.n	8006c80 <SFDP_CollectData+0xfc>
    case SFPD_PARAMID_OCTAL_DDR:
      ptr = JEDEC_OctalDdr.data_BYTE;
      break;
    default :
      SFDP_DEBUG_STR("the table is not yet handled by the SW");
      break;
 8006c60:	e01a      	b.n	8006c98 <SFDP_CollectData+0x114>
      JEDEC_Basic.size = sfdp_param_info[index].size;
 8006c62:	7dba      	ldrb	r2, [r7, #22]
 8006c64:	492e      	ldr	r1, [pc, #184]	@ (8006d20 <SFDP_CollectData+0x19c>)
 8006c66:	4613      	mov	r3, r2
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	4413      	add	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	440b      	add	r3, r1
 8006c70:	3308      	adds	r3, #8
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	461a      	mov	r2, r3
 8006c76:	4b2b      	ldr	r3, [pc, #172]	@ (8006d24 <SFDP_CollectData+0x1a0>)
 8006c78:	601a      	str	r2, [r3, #0]
      ptr = JEDEC_Basic.Params.data_BYTE;
 8006c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8006d28 <SFDP_CollectData+0x1a4>)
 8006c7c:	613b      	str	r3, [r7, #16]
      break;
 8006c7e:	e00c      	b.n	8006c9a <SFDP_CollectData+0x116>
      ptr = JEDEC_Address4Bit.data_BYTE;
 8006c80:	4b2a      	ldr	r3, [pc, #168]	@ (8006d2c <SFDP_CollectData+0x1a8>)
 8006c82:	613b      	str	r3, [r7, #16]
      break;
 8006c84:	e009      	b.n	8006c9a <SFDP_CollectData+0x116>
      ptr = JEDEC_SCCR_Map.data_b;
 8006c86:	4b2a      	ldr	r3, [pc, #168]	@ (8006d30 <SFDP_CollectData+0x1ac>)
 8006c88:	613b      	str	r3, [r7, #16]
      break;
 8006c8a:	e006      	b.n	8006c9a <SFDP_CollectData+0x116>
      ptr = JEDEC_XSPI10.data_BYTE;
 8006c8c:	4b29      	ldr	r3, [pc, #164]	@ (8006d34 <SFDP_CollectData+0x1b0>)
 8006c8e:	613b      	str	r3, [r7, #16]
      break;
 8006c90:	e003      	b.n	8006c9a <SFDP_CollectData+0x116>
      ptr = JEDEC_OctalDdr.data_BYTE;
 8006c92:	4b29      	ldr	r3, [pc, #164]	@ (8006d38 <SFDP_CollectData+0x1b4>)
 8006c94:	613b      	str	r3, [r7, #16]
      break;
 8006c96:	e000      	b.n	8006c9a <SFDP_CollectData+0x116>
      break;
 8006c98:	bf00      	nop
    }
    if (ptr != NULL)
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d016      	beq.n	8006cce <SFDP_CollectData+0x14a>
    {
      if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f103 0008 	add.w	r0, r3, #8
 8006ca6:	7dba      	ldrb	r2, [r7, #22]
 8006ca8:	491d      	ldr	r1, [pc, #116]	@ (8006d20 <SFDP_CollectData+0x19c>)
 8006caa:	4613      	mov	r3, r2
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	4413      	add	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	440b      	add	r3, r1
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	6819      	ldr	r1, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	f7ff faf5 	bl	80062ac <SAL_XSPI_GetSFDP>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <SFDP_CollectData+0x14a>
                                     sfdp_param_info[index].address, 
                                     ptr, size * 4u))
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
 8006cc8:	230c      	movs	r3, #12
 8006cca:	77fb      	strb	r3, [r7, #31]
        goto error;
 8006ccc:	e022      	b.n	8006d14 <SFDP_CollectData+0x190>
      }
    }

    if (SFPD_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[index].type)
 8006cce:	7dba      	ldrb	r2, [r7, #22]
 8006cd0:	4913      	ldr	r1, [pc, #76]	@ (8006d20 <SFDP_CollectData+0x19c>)
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	4413      	add	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	440b      	add	r3, r1
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b08      	cmp	r3, #8
 8006ce0:	d109      	bne.n	8006cf6 <SFDP_CollectData+0x172>
    {
      /* save data about the reset procedure */
      Object->sfpd_private.Reset_info = JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support;
 8006ce2:	4b10      	ldr	r3, [pc, #64]	@ (8006d24 <SFDP_CollectData+0x1a0>)
 8006ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ce8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	461a      	mov	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFPD_PARAMID_UNKNOWN; index++)
 8006cf6:	7dbb      	ldrb	r3, [r7, #22]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	75bb      	strb	r3, [r7, #22]
 8006cfc:	7dba      	ldrb	r2, [r7, #22]
 8006cfe:	4908      	ldr	r1, [pc, #32]	@ (8006d20 <SFDP_CollectData+0x19c>)
 8006d00:	4613      	mov	r3, r2
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	4413      	add	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	440b      	add	r3, r1
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f47f af7f 	bne.w	8006c10 <SFDP_CollectData+0x8c>
    }
  }

error:
 8006d12:	bf00      	nop
  return retr;
 8006d14:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3720      	adds	r7, #32
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	24000138 	.word	0x24000138
 8006d24:	240001b0 	.word	0x240001b0
 8006d28:	240001b4 	.word	0x240001b4
 8006d2c:	24000210 	.word	0x24000210
 8006d30:	24000230 	.word	0x24000230
 8006d34:	24000218 	.word	0x24000218
 8006d38:	240002a0 	.word	0x240002a0

08006d3c <SFDP_MemoryReset>:

SFDP_StatusTypeDef SFDP_MemoryReset(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  RESET_METHOD reset_methode;
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
 8006d44:	2307      	movs	r3, #7
 8006d46:	75bb      	strb	r3, [r7, #22]
  uint32_t sfdp_adress = SFDP_HEADER_SIZE;
 8006d48:	2308      	movs	r3, #8
 8006d4a:	613b      	str	r3, [r7, #16]
  uint8_t find = 0u;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR(__func__);

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 8006d50:	2300      	movs	r3, #0
 8006d52:	73bb      	strb	r3, [r7, #14]
 8006d54:	e02e      	b.n	8006db4 <SFDP_MemoryReset+0x78>
  {
    retr = sfdp_get_paraminfo(Object, sfdp_adress, &sfdp_param_info[0]);
 8006d56:	4a64      	ldr	r2, [pc, #400]	@ (8006ee8 <SFDP_MemoryReset+0x1ac>)
 8006d58:	6939      	ldr	r1, [r7, #16]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fee0 	bl	8007b20 <sfdp_get_paraminfo>
 8006d60:	4603      	mov	r3, r0
 8006d62:	75bb      	strb	r3, [r7, #22]
    if (EXTMEM_SFDP_OK == retr)
 8006d64:	7dbb      	ldrb	r3, [r7, #22]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d118      	bne.n	8006d9c <SFDP_MemoryReset+0x60>
    {
      /* check if the table is basic table */        
      if (SFPD_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[0].type)
 8006d6a:	4b5f      	ldr	r3, [pc, #380]	@ (8006ee8 <SFDP_MemoryReset+0x1ac>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b08      	cmp	r3, #8
 8006d70:	d114      	bne.n	8006d9c <SFDP_MemoryReset+0x60>
      {
        /* read the JEDEC basic param */
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f103 0008 	add.w	r0, r3, #8
 8006d78:	4b5b      	ldr	r3, [pc, #364]	@ (8006ee8 <SFDP_MemoryReset+0x1ac>)
 8006d7a:	6859      	ldr	r1, [r3, #4]
                                       sfdp_param_info[0].address, 
                                       JEDEC_Basic.Params.data_BYTE, 
                                       ((uint32_t)sfdp_param_info[0].size) * 4u))
 8006d7c:	4b5a      	ldr	r3, [pc, #360]	@ (8006ee8 <SFDP_MemoryReset+0x1ac>)
 8006d7e:	7a1b      	ldrb	r3, [r3, #8]
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4a5a      	ldr	r2, [pc, #360]	@ (8006eec <SFDP_MemoryReset+0x1b0>)
 8006d84:	f7ff fa92 	bl	80062ac <SAL_XSPI_GetSFDP>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d002      	beq.n	8006d94 <SFDP_MemoryReset+0x58>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 8006d8e:	230c      	movs	r3, #12
 8006d90:	75bb      	strb	r3, [r7, #22]
 8006d92:	e003      	b.n	8006d9c <SFDP_MemoryReset+0x60>
        }
        else
        {
          retr = EXTMEM_SFDP_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	75bb      	strb	r3, [r7, #22]
          find = 1u;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }

    if ((EXTMEM_SFDP_OK != retr) || (1u == find))
 8006d9c:	7dbb      	ldrb	r3, [r7, #22]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10f      	bne.n	8006dc2 <SFDP_MemoryReset+0x86>
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d00c      	beq.n	8006dc2 <SFDP_MemoryReset+0x86>
    {
        /* stop the read, if there is an error or if the table has been found */
        break;
    }
    /* look for the next table */        
    sfdp_adress+= SFDP_PARAM_HEADER_SIZE;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	3308      	adds	r3, #8
 8006dac:	613b      	str	r3, [r7, #16]
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 8006dae:	7bbb      	ldrb	r3, [r7, #14]
 8006db0:	3301      	adds	r3, #1
 8006db2:	73bb      	strb	r3, [r7, #14]
 8006db4:	7bba      	ldrb	r2, [r7, #14]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d3c9      	bcc.n	8006d56 <SFDP_MemoryReset+0x1a>
  }
  
  /* if an error has been returned or if the table has not been found */
  if ((EXTMEM_SFDP_OK != retr) || (0u == find))
 8006dc2:	7dbb      	ldrb	r3, [r7, #22]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d102      	bne.n	8006dce <SFDP_MemoryReset+0x92>
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d102      	bne.n	8006dd4 <SFDP_MemoryReset+0x98>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8006dce:	230c      	movs	r3, #12
 8006dd0:	75bb      	strb	r3, [r7, #22]
    goto error;
 8006dd2:	e083      	b.n	8006edc <SFDP_MemoryReset+0x1a0>
  }

  /* determine how to proced memory reset */
  if( 0x0u == JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support)
 8006dd4:	4b46      	ldr	r3, [pc, #280]	@ (8006ef0 <SFDP_MemoryReset+0x1b4>)
 8006dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d102      	bne.n	8006dea <SFDP_MemoryReset+0xae>
  {
    /* 00_0000b: no software reset instruction is supported */
    reset_methode = RESET_NONE;
 8006de4:	2300      	movs	r3, #0
 8006de6:	75fb      	strb	r3, [r7, #23]
 8006de8:	e053      	b.n	8006e92 <SFDP_MemoryReset+0x156>
  }
  else if (0x1u == (0x1u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 8006dea:	4b41      	ldr	r3, [pc, #260]	@ (8006ef0 <SFDP_MemoryReset+0x1b4>)
 8006dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006df0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <SFDP_MemoryReset+0xca>
  {
    /* xx_xxx1b: drive Fh on all 4 data wires for 8 clocks */
    reset_methode = RESET_Fh_4DATA_8CLOCK;
 8006e00:	2301      	movs	r3, #1
 8006e02:	75fb      	strb	r3, [r7, #23]
 8006e04:	e045      	b.n	8006e92 <SFDP_MemoryReset+0x156>
  }
  else if (0x2u == (0x2u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 8006e06:	4b3a      	ldr	r3, [pc, #232]	@ (8006ef0 <SFDP_MemoryReset+0x1b4>)
 8006e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e0c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <SFDP_MemoryReset+0xe6>
  {
    /* xx_xx1xb: drive Fh on all 4 data wires for 10 clocks if device is operating in 4-byte address mode */
    reset_methode = RESET_Fh_4DATA_10CLOCK;
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	75fb      	strb	r3, [r7, #23]
 8006e20:	e037      	b.n	8006e92 <SFDP_MemoryReset+0x156>
  }
  else if (0x4u == (0x4u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 8006e22:	4b33      	ldr	r3, [pc, #204]	@ (8006ef0 <SFDP_MemoryReset+0x1b4>)
 8006e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e28:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	f003 0304 	and.w	r3, r3, #4
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <SFDP_MemoryReset+0x102>
  {
    /* xx_x1xxb: drive Fh on all 4 data wires for 16 clocks */
    reset_methode = RESET_Fh_4DATA_16CLOCK;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	75fb      	strb	r3, [r7, #23]
 8006e3c:	e029      	b.n	8006e92 <SFDP_MemoryReset+0x156>
  }
  else if (0x8u == (0x8u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 8006e3e:	4b2c      	ldr	r3, [pc, #176]	@ (8006ef0 <SFDP_MemoryReset+0x1b4>)
 8006e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e44:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	f003 0308 	and.w	r3, r3, #8
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <SFDP_MemoryReset+0x11e>
  {
    /* xx_1xxxb: issue instruction F0h */
    reset_methode = RESET_INSTRUCTION_F0;
 8006e54:	2304      	movs	r3, #4
 8006e56:	75fb      	strb	r3, [r7, #23]
 8006e58:	e01b      	b.n	8006e92 <SFDP_MemoryReset+0x156>
  }
  else if (0x10u == (0x10u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 8006e5a:	4b25      	ldr	r3, [pc, #148]	@ (8006ef0 <SFDP_MemoryReset+0x1b4>)
 8006e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e60:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	f003 0310 	and.w	r3, r3, #16
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <SFDP_MemoryReset+0x13a>
  {
    /* x1_xxxxb: issue reset enable instruction 66h, then issue reset instruction 99h. The reset enable,
    reset sequence may be issued on 1, 2, or 4 wires depending on the device operating mode.
    */
    reset_methode = RESET_INSTRUCTION_66_99;
 8006e70:	2305      	movs	r3, #5
 8006e72:	75fb      	strb	r3, [r7, #23]
 8006e74:	e00d      	b.n	8006e92 <SFDP_MemoryReset+0x156>
  }
  else if (0x20u == (0x20u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 8006e76:	4b1e      	ldr	r3, [pc, #120]	@ (8006ef0 <SFDP_MemoryReset+0x1b4>)
 8006e78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e7c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b1f      	cmp	r3, #31
 8006e84:	d902      	bls.n	8006e8c <SFDP_MemoryReset+0x150>
    xx_xx1x_xxxxb: Hardware reset
    xx_x1xx_xxxxb: Software reset (see bits 13:8 in this DWORD)
    xx_1xxx_xxxxb: Power cycle
    x1_xxxx_xxxxb: Reserved
    */
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 8006e86:	230f      	movs	r3, #15
 8006e88:	75bb      	strb	r3, [r7, #22]
    goto error;
 8006e8a:	e027      	b.n	8006edc <SFDP_MemoryReset+0x1a0>
  }
  else
  {
    /* no coherence, should be managed as error */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8006e8c:	230c      	movs	r3, #12
 8006e8e:	75bb      	strb	r3, [r7, #22]
    goto error;
 8006e90:	e024      	b.n	8006edc <SFDP_MemoryReset+0x1a0>
  }
  
  switch(reset_methode)
 8006e92:	7dfb      	ldrb	r3, [r7, #23]
 8006e94:	2b05      	cmp	r3, #5
 8006e96:	d009      	beq.n	8006eac <SFDP_MemoryReset+0x170>
 8006e98:	2b05      	cmp	r3, #5
 8006e9a:	dc1b      	bgt.n	8006ed4 <SFDP_MemoryReset+0x198>
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d01c      	beq.n	8006eda <SFDP_MemoryReset+0x19e>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	db17      	blt.n	8006ed4 <SFDP_MemoryReset+0x198>
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d814      	bhi.n	8006ed4 <SFDP_MemoryReset+0x198>
 8006eaa:	e010      	b.n	8006ece <SFDP_MemoryReset+0x192>
  case RESET_NONE:
    break;
  case RESET_INSTRUCTION_66_99:
    /* perform the reset in 1, 2 and 4 lines */
    SFDP_DEBUG_STR("::reset 0x66 0x99");
    (void)SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x66, NULL, 0);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f103 0008 	add.w	r0, r3, #8
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2166      	movs	r1, #102	@ 0x66
 8006eb8:	f7ff fb58 	bl	800656c <SAL_XSPI_CommandSendData>
    (void)SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x99, NULL, 0);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f103 0008 	add.w	r0, r3, #8
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2199      	movs	r1, #153	@ 0x99
 8006ec8:	f7ff fb50 	bl	800656c <SAL_XSPI_CommandSendData>
    break;
 8006ecc:	e006      	b.n	8006edc <SFDP_MemoryReset+0x1a0>
  case RESET_INSTRUCTION_F0:
  case RESET_Fh_4DATA_8CLOCK:
  case RESET_Fh_4DATA_10CLOCK:
  case RESET_Fh_4DATA_16CLOCK:
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 8006ece:	230f      	movs	r3, #15
 8006ed0:	75bb      	strb	r3, [r7, #22]
    break;
 8006ed2:	e003      	b.n	8006edc <SFDP_MemoryReset+0x1a0>
  /* case RESET_ERROR:*/
  default :
    retr = EXTMEM_SFDP_ERROR_PARAM;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	75bb      	strb	r3, [r7, #22]
    break;
 8006ed8:	e000      	b.n	8006edc <SFDP_MemoryReset+0x1a0>
    break;
 8006eda:	bf00      	nop
  }
error :
  return retr;
 8006edc:	7dbb      	ldrb	r3, [r7, #22]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	24000138 	.word	0x24000138
 8006eec:	240001b4 	.word	0x240001b4
 8006ef0:	240001b0 	.word	0x240001b0

08006ef4 <SFDP_BuildGenericDriver>:

SFDP_StatusTypeDef SFDP_BuildGenericDriver(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint8_t *FreqUpdated)
{
 8006ef4:	b5b0      	push	{r4, r5, r7, lr}
 8006ef6:	b08c      	sub	sp, #48	@ 0x30
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  static const uint16_t block_erase_unit[] = { 16u, 256u, 4000u, 64000u};
  static const uint32_t chip_erase_unit[]  = { 16u, 256u, 4000u, 64000u};
  SFDP_DEBUG_STR(__func__);
  uint8_t flag4bitAddress = 0u;
 8006f04:	2300      	movs	r3, #0
 8006f06:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint32_t dummyCycles, dummyCyclesValue;
  uint8_t FlashSize;
  
  if ((Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL) != (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f10:	f003 0308 	and.w	r3, r3, #8
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d104      	bne.n	8006f22 <SFDP_BuildGenericDriver+0x2e>
  {
    /* This table is mandatory to build the driver data */
    retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
 8006f18:	2307      	movs	r3, #7
 8006f1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 8006f1e:	f000 bd93 	b.w	8007a48 <SFDP_BuildGenericDriver+0xb54>
  /* ---------------------------------------------------
   *  Flash sizing
   * ---------------------------------------------------
   */
  /* Calculation of the flash density in puissance of 2 */
  if ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x80000000u) == 0x0u)
 8006f22:	4bba      	ldr	r3, [pc, #744]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	db13      	blt.n	8006f52 <SFDP_BuildGenericDriver+0x5e>
  {
#if( __CORTEX_M == 0)
#error "the assembly instruction is not available"
#else
    Object->sfpd_private.FlashSize = 31u - (uint8_t)__CLZ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize + 1u));
 8006f2a:	4bb8      	ldr	r3, [pc, #736]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <SFDP_BuildGenericDriver+0x48>
    return 32U;
 8006f38:	2320      	movs	r3, #32
 8006f3a:	e003      	b.n	8006f44 <SFDP_BuildGenericDriver+0x50>
  return __builtin_clz(value);
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	fab3 f383 	clz	r3, r3
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	f1c3 031f 	rsb	r3, r3, #31
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
 8006f50:	e005      	b.n	8006f5e <SFDP_BuildGenericDriver+0x6a>
#endif /* __CORTEX_M */
  }
  else
  {
    Object->sfpd_private.FlashSize = (uint8_t)(JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x7FFFFFFFu);
 8006f52:	4bae      	ldr	r3, [pc, #696]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  }

  /* Conversion bit to byte */
  Object->sfpd_private.FlashSize = Object->sfpd_private.FlashSize - 3u; /* divide by eight the value */
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8006f64:	3b03      	subs	r3, #3
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e

  SFDP_DEBUG_INT("-> flash size: 2^", Object->sfpd_private.FlashSize);
  FlashSize = Object->sfpd_private.FlashSize - 1u;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8006f74:	3b01      	subs	r3, #1
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	74fb      	strb	r3, [r7, #19]
  (void) SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_FLASHSIZE, &FlashSize);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	3308      	adds	r3, #8
 8006f7e:	f107 0213 	add.w	r2, r7, #19
 8006f82:	2104      	movs	r1, #4
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7ff f83f 	bl	8006008 <SAL_XSPI_MemoryConfig>

  /* get the page size info */
  Object->sfpd_private.PageSize = ((uint32_t)1u <<  JEDEC_Basic.Params.Param_DWORD.D11.PageSize);
 8006f8a:	4ba0      	ldr	r3, [pc, #640]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8006f8c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006f90:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	461a      	mov	r2, r3
 8006f98:	2301      	movs	r3, #1
 8006f9a:	fa03 f202 	lsl.w	r2, r3, r2
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* ---------------------------------------------------
   *  Set default command
   * ---------------------------------------------------
   */
  Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x02;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
  /* ---------------------------------------------------
   *  Erase management
   * ---------------------------------------------------
   */
  /* Manage erase data */
  Object->sfpd_private.DriverInfo.EraseType1Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Size;
 8006faa:	4b98      	ldr	r3, [pc, #608]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8006fac:	f893 2020 	ldrb.w	r2, [r3, #32]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
  Object->sfpd_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Instruction;
 8006fb6:	4b95      	ldr	r3, [pc, #596]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8006fb8:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  Object->sfpd_private.DriverInfo.EraseType2Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Size;
 8006fc2:	4b92      	ldr	r3, [pc, #584]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8006fc4:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  Object->sfpd_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Instruction;
 8006fce:	4b8f      	ldr	r3, [pc, #572]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8006fd0:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
  Object->sfpd_private.DriverInfo.EraseType3Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Size;
 8006fda:	4b8c      	ldr	r3, [pc, #560]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8006fdc:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
  Object->sfpd_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Instruction;
 8006fe6:	4b89      	ldr	r3, [pc, #548]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8006fe8:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  Object->sfpd_private.DriverInfo.EraseType4Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Size;
 8006ff2:	4b86      	ldr	r3, [pc, #536]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8006ff4:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  Object->sfpd_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Instruction;
 8006ffe:	4b83      	ldr	r3, [pc, #524]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8007000:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

  if (Object->sfpd_private.DriverInfo.EraseType1Command != 0x0u)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8007010:	2b00      	cmp	r3, #0
 8007012:	d01d      	beq.n	8007050 <SFDP_BuildGenericDriver+0x15c>
  {
    Object->sfpd_private.DriverInfo.EraseType1Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_units];
 8007014:	4b7d      	ldr	r3, [pc, #500]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8007016:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800701a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800701e:	b2db      	uxtb	r3, r3
 8007020:	461a      	mov	r2, r3
 8007022:	4b7a      	ldr	r3, [pc, #488]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8007024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007026:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800702a:	b2db      	uxtb	r3, r3
 800702c:	3301      	adds	r3, #1
 800702e:	fb02 f303 	mul.w	r3, r2, r3
 8007032:	4a76      	ldr	r2, [pc, #472]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8007034:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8007038:	f3c2 0241 	ubfx	r2, r2, #1, #2
 800703c:	b2d2      	uxtb	r2, r2
 800703e:	4611      	mov	r1, r2
 8007040:	4a73      	ldr	r2, [pc, #460]	@ (8007210 <SFDP_BuildGenericDriver+0x31c>)
 8007042:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8007046:	fb03 f202 	mul.w	r2, r3, r2
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }

  if (Object->sfpd_private.DriverInfo.EraseType2Command != 0x0u)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8007056:	2b00      	cmp	r3, #0
 8007058:	d01e      	beq.n	8007098 <SFDP_BuildGenericDriver+0x1a4>
  {
    Object->sfpd_private.DriverInfo.EraseType2Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_units];
 800705a:	4b6c      	ldr	r3, [pc, #432]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 800705c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007060:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007064:	b2db      	uxtb	r3, r3
 8007066:	461a      	mov	r2, r3
 8007068:	4b68      	ldr	r3, [pc, #416]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 800706a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800706e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8007072:	b2db      	uxtb	r3, r3
 8007074:	3301      	adds	r3, #1
 8007076:	fb02 f303 	mul.w	r3, r2, r3
 800707a:	4a64      	ldr	r2, [pc, #400]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 800707c:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8007080:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8007084:	b2d2      	uxtb	r2, r2
 8007086:	4611      	mov	r1, r2
 8007088:	4a61      	ldr	r2, [pc, #388]	@ (8007210 <SFDP_BuildGenericDriver+0x31c>)
 800708a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800708e:	fb03 f202 	mul.w	r2, r3, r2
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  if (Object->sfpd_private.DriverInfo.EraseType3Command != 0x0u)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d01d      	beq.n	80070de <SFDP_BuildGenericDriver+0x1ea>
  {
    Object->sfpd_private.DriverInfo.EraseType3Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_units];
 80070a2:	4b5a      	ldr	r3, [pc, #360]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 80070a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070a8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	461a      	mov	r2, r3
 80070b0:	4b56      	ldr	r3, [pc, #344]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 80070b2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80070b6:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	3301      	adds	r3, #1
 80070be:	fb02 f303 	mul.w	r3, r2, r3
 80070c2:	4a52      	ldr	r2, [pc, #328]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 80070c4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80070c6:	f3c2 12c1 	ubfx	r2, r2, #7, #2
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	4611      	mov	r1, r2
 80070ce:	4a50      	ldr	r2, [pc, #320]	@ (8007210 <SFDP_BuildGenericDriver+0x31c>)
 80070d0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80070d4:	fb03 f202 	mul.w	r2, r3, r2
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  if (Object->sfpd_private.DriverInfo.EraseType4Command != 0x0u)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d01e      	beq.n	8007126 <SFDP_BuildGenericDriver+0x232>
  {
    Object->sfpd_private.DriverInfo.EraseType4Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_units];
 80070e8:	4b48      	ldr	r3, [pc, #288]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 80070ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070ee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	461a      	mov	r2, r3
 80070f6:	4b45      	ldr	r3, [pc, #276]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 80070f8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80070fc:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8007100:	b2db      	uxtb	r3, r3
 8007102:	3301      	adds	r3, #1
 8007104:	fb02 f303 	mul.w	r3, r2, r3
 8007108:	4a40      	ldr	r2, [pc, #256]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 800710a:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 800710e:	f3c2 1281 	ubfx	r2, r2, #6, #2
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	4611      	mov	r1, r2
 8007116:	4a3e      	ldr	r2, [pc, #248]	@ (8007210 <SFDP_BuildGenericDriver+0x31c>)
 8007118:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800711c:	fb03 f202 	mul.w	r2, r3, r2
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  Object->sfpd_private.DriverInfo.EraseChipTiming   = JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_count + 1u)* chip_erase_unit[JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_units];
 8007126:	4b39      	ldr	r3, [pc, #228]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8007128:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800712c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007130:	b2db      	uxtb	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	4b35      	ldr	r3, [pc, #212]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8007136:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800713a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800713e:	b2db      	uxtb	r3, r3
 8007140:	3301      	adds	r3, #1
 8007142:	fb02 f303 	mul.w	r3, r2, r3
 8007146:	4a31      	ldr	r2, [pc, #196]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8007148:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 800714c:	f3c2 1241 	ubfx	r2, r2, #5, #2
 8007150:	b2d2      	uxtb	r2, r2
 8007152:	4611      	mov	r1, r2
 8007154:	4a2f      	ldr	r2, [pc, #188]	@ (8007214 <SFDP_BuildGenericDriver+0x320>)
 8007156:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800715a:	fb03 f202 	mul.w	r2, r3, r2
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
   *   WIP/WEL : write in progress/ write enable management
   * ------------------------------------------------------
   */
  /* This bit definition is maintained for legacy compatibility only. New system implementations
  should refer to 6.4.19 for a full definition of volatile and non-volatile behavior. */
  Object->sfpd_private.DriverInfo.ReadWELCommand = 0x05;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2205      	movs	r2, #5
 8007168:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
  Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x05;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2205      	movs	r2, #5
 8007170:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  if (JEDEC_Basic.Params.Param_DWORD.D1.WriteEnableInstructionVolatileRegister == 0u)
 8007174:	4b25      	ldr	r3, [pc, #148]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8007176:	791b      	ldrb	r3, [r3, #4]
 8007178:	f003 0310 	and.w	r3, r3, #16
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d104      	bne.n	800718c <SFDP_BuildGenericDriver+0x298>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x50U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2250      	movs	r2, #80	@ 0x50
 8007186:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800718a:	e003      	b.n	8007194 <SFDP_BuildGenericDriver+0x2a0>
  }
  else
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06U;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2206      	movs	r2, #6
 8007190:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
  /* Volatile or Non-Volatile Register and Write Enable Instruction for Status Register 1
  The instruction 01h is typically used to write status register 1 which contains Block Protection (BP) and other bits. Status register 1 is written by the first data byte following the instruction 01h. The protection bits must be written to zero to enable writes/erases to the device.
  This field describes how to modify the writable bits in status register 1 in either a volatile or non-volatile manner. Bits 1:0 in status register 1 are de-facto standard write enable and busy status and are excluded from the definitions below.
  */
  /* xxx_xxx1b: Non-Volatile Status Register 1, powers-up to last written value, use instruction 06h to enable write */
  if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x1u) != 0u)
 8007194:	4b1d      	ldr	r3, [pc, #116]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 8007196:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800719a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d004      	beq.n	80071b2 <SFDP_BuildGenericDriver+0x2be>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2206      	movs	r2, #6
 80071ac:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80071b0:	e046      	b.n	8007240 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_xx1xb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 06h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x02u) != 0u)
 80071b2:	4b16      	ldr	r3, [pc, #88]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 80071b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071b8:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d004      	beq.n	80071d0 <SFDP_BuildGenericDriver+0x2dc>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2206      	movs	r2, #6
 80071ca:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80071ce:	e037      	b.n	8007240 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_x1xxb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 50h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x04u) != 0u)
 80071d0:	4b0e      	ldr	r3, [pc, #56]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 80071d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071d6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d004      	beq.n	80071ee <SFDP_BuildGenericDriver+0x2fa>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x50;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2250      	movs	r2, #80	@ 0x50
 80071e8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80071ec:	e028      	b.n	8007240 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_1xxxb: Non-Volatile/Volatile status register 1 powers-up to last written value in the non-volatile status register,
  use instruction 06h to enable write to non-volatile status register. Volatile status register may be activated after
  power-up to override the non-volatile status register, use instruction 50h to enable write and activate the volatile
  status register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x08u) != 0u)
 80071ee:	4b07      	ldr	r3, [pc, #28]	@ (800720c <SFDP_BuildGenericDriver+0x318>)
 80071f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071f4:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00a      	beq.n	8007218 <SFDP_BuildGenericDriver+0x324>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2206      	movs	r2, #6
 8007206:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800720a:	e019      	b.n	8007240 <SFDP_BuildGenericDriver+0x34c>
 800720c:	240001b0 	.word	0x240001b0
 8007210:	080085a8 	.word	0x080085a8
 8007214:	080085b0 	.word	0x080085b0
  }
  /* xx1_xxxxb: Status Register 1 contains a mix of volatile and non-volatile bits. The 06h instruction is used to
  enable writing of the register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x10u) != 0u)
 8007218:	4b66      	ldr	r3, [pc, #408]	@ (80073b4 <SFDP_BuildGenericDriver+0x4c0>)
 800721a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800721e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8007222:	b2db      	uxtb	r3, r3
 8007224:	f003 0310 	and.w	r3, r3, #16
 8007228:	2b00      	cmp	r3, #0
 800722a:	d004      	beq.n	8007236 <SFDP_BuildGenericDriver+0x342>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2206      	movs	r2, #6
 8007230:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8007234:	e004      	b.n	8007240 <SFDP_BuildGenericDriver+0x34c>
  1xx_xxxxb: Reserved
  NOTE If the status register is read-only then this field will contain all zeros in bits 4:0.
  */
  else
  {
    retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D16;
 8007236:	230a      	movs	r3, #10
 8007238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 800723c:	f000 bc04 	b.w	8007a48 <SFDP_BuildGenericDriver+0xb54>
  }

  if(0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007246:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800724a:	2b00      	cmp	r3, #0
 800724c:	d078      	beq.n	8007340 <SFDP_BuildGenericDriver+0x44c>
  {
    /* WIP */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitAvailable)
 800724e:	4b5a      	ldr	r3, [pc, #360]	@ (80073b8 <SFDP_BuildGenericDriver+0x4c4>)
 8007250:	7cdb      	ldrb	r3, [r3, #19]
 8007252:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	d034      	beq.n	80072c6 <SFDP_BuildGenericDriver+0x3d2>
    {
      Object->sfpd_private.DriverInfo.ReadWIPCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.CommandReadAccess;
 800725c:	4b56      	ldr	r3, [pc, #344]	@ (80073b8 <SFDP_BuildGenericDriver+0x4c4>)
 800725e:	7c5a      	ldrb	r2, [r3, #17]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
      Object->sfpd_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
 8007266:	4b54      	ldr	r3, [pc, #336]	@ (80073b8 <SFDP_BuildGenericDriver+0x4c4>)
 8007268:	7cdb      	ldrb	r3, [r3, #19]
 800726a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800726e:	b2db      	uxtb	r3, r3
 8007270:	461a      	mov	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
      Object->sfpd_private.DriverInfo.WIPBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.WIPpolarity;
 8007278:	4b4f      	ldr	r3, [pc, #316]	@ (80073b8 <SFDP_BuildGenericDriver+0x4c4>)
 800727a:	7cdb      	ldrb	r3, [r3, #19]
 800727c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007280:	b2db      	uxtb	r3, r3
 8007282:	461a      	mov	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
      Object->sfpd_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
 800728a:	4b4b      	ldr	r3, [pc, #300]	@ (80073b8 <SFDP_BuildGenericDriver+0x4c4>)
 800728c:	7cdb      	ldrb	r3, [r3, #19]
 800728e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007292:	b2db      	uxtb	r3, r3
 8007294:	461a      	mov	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
      
      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
 800729c:	4b46      	ldr	r3, [pc, #280]	@ (80073b8 <SFDP_BuildGenericDriver+0x4c4>)
 800729e:	7cdb      	ldrb	r3, [r3, #19]
 80072a0:	f003 0310 	and.w	r3, r3, #16
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d009      	beq.n	80072be <SFDP_BuildGenericDriver+0x3ca>
      {
        /* Address management */
        Object->sfpd_private.DriverInfo.WIPAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.LocalAddressForWIP;
 80072aa:	4b43      	ldr	r3, [pc, #268]	@ (80073b8 <SFDP_BuildGenericDriver+0x4c4>)
 80072ac:	7cdb      	ldrb	r3, [r3, #19]
 80072ae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	461a      	mov	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
 80072bc:	e003      	b.n	80072c6 <SFDP_BuildGenericDriver+0x3d2>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfpd_private.DriverInfo.WIPAddress = EXTMEM_ADDRESS_NONE;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	22ff      	movs	r2, #255	@ 0xff
 80072c2:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
      }
    }

    /* WEL */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D6.WELBitAvailable)
 80072c6:	4b3c      	ldr	r3, [pc, #240]	@ (80073b8 <SFDP_BuildGenericDriver+0x4c4>)
 80072c8:	7ddb      	ldrb	r3, [r3, #23]
 80072ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d073      	beq.n	80073bc <SFDP_BuildGenericDriver+0x4c8>
    {
      Object->sfpd_private.DriverInfo.ReadWELCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.CommandReadAccess;
 80072d4:	4b38      	ldr	r3, [pc, #224]	@ (80073b8 <SFDP_BuildGenericDriver+0x4c4>)
 80072d6:	7d5a      	ldrb	r2, [r3, #21]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
      Object->sfpd_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
 80072de:	4b36      	ldr	r3, [pc, #216]	@ (80073b8 <SFDP_BuildGenericDriver+0x4c4>)
 80072e0:	7ddb      	ldrb	r3, [r3, #23]
 80072e2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	461a      	mov	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfpd_private.DriverInfo.WELBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELpolarity;
 80072f0:	4b31      	ldr	r3, [pc, #196]	@ (80073b8 <SFDP_BuildGenericDriver+0x4c4>)
 80072f2:	7ddb      	ldrb	r3, [r3, #23]
 80072f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	461a      	mov	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
      Object->sfpd_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
 8007302:	4b2d      	ldr	r3, [pc, #180]	@ (80073b8 <SFDP_BuildGenericDriver+0x4c4>)
 8007304:	7ddb      	ldrb	r3, [r3, #23]
 8007306:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800730a:	b2db      	uxtb	r3, r3
 800730c:	461a      	mov	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72

      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
 8007314:	4b28      	ldr	r3, [pc, #160]	@ (80073b8 <SFDP_BuildGenericDriver+0x4c4>)
 8007316:	7cdb      	ldrb	r3, [r3, #19]
 8007318:	f003 0310 	and.w	r3, r3, #16
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d009      	beq.n	8007336 <SFDP_BuildGenericDriver+0x442>
      {
        /* Address management */
        Object->sfpd_private.DriverInfo.WELAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELLocalAddress;
 8007322:	4b25      	ldr	r3, [pc, #148]	@ (80073b8 <SFDP_BuildGenericDriver+0x4c4>)
 8007324:	7ddb      	ldrb	r3, [r3, #23]
 8007326:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800732a:	b2db      	uxtb	r3, r3
 800732c:	461a      	mov	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8007334:	e042      	b.n	80073bc <SFDP_BuildGenericDriver+0x4c8>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfpd_private.DriverInfo.WELAddress = EXTMEM_ADDRESS_NONE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	22ff      	movs	r2, #255	@ 0xff
 800733a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 800733e:	e03d      	b.n	80073bc <SFDP_BuildGenericDriver+0x4c8>
      }
    }
  }
  else
  {
      Object->sfpd_private.DriverInfo.WELPosition     = 1;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfpd_private.DriverInfo.WELBusyPolarity = 0;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73

      /*
       *   WIP : Status register read management
       *         Basic D14 Status register Polling device Busy
       */
      if(0x01u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x01u))
 8007350:	4b18      	ldr	r3, [pc, #96]	@ (80073b4 <SFDP_BuildGenericDriver+0x4c0>)
 8007352:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007356:	f3c3 0385 	ubfx	r3, r3, #2, #6
 800735a:	b2db      	uxtb	r3, r3
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00c      	beq.n	800737e <SFDP_BuildGenericDriver+0x48a>
      {
        /* xx_xxx1b: Use of legacy polling is supported by reading the Status Register with 05h instruction
        and checking WIP bit[0] (0=ready; 1=busy). */
        Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x05;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2205      	movs	r2, #5
 8007368:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfpd_private.DriverInfo.WIPPosition = 0u;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfpd_private.DriverInfo.WIPBusyPolarity = 0u;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
 800737c:	e01e      	b.n	80073bc <SFDP_BuildGenericDriver+0x4c8>
      } else if (0x02u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x02u))
 800737e:	4b0d      	ldr	r3, [pc, #52]	@ (80073b4 <SFDP_BuildGenericDriver+0x4c0>)
 8007380:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007384:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8007388:	b2db      	uxtb	r3, r3
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00c      	beq.n	80073ac <SFDP_BuildGenericDriver+0x4b8>
      {
        /* xx_xx1xb: Bit 7 of the Flag Status Register may be polled any time a Program, Erase, Suspend/Resume
        command is issued, or after a Reset command while the device is busy. The read instruction is 70h.
        Flag Status Register bit definitions: bit[7]: Program or erase controller status (0=busy; 1=ready)*/
        Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x70;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2270      	movs	r2, #112	@ 0x70
 8007396:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfpd_private.DriverInfo.WIPPosition = 7u;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2207      	movs	r2, #7
 800739e:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfpd_private.DriverInfo.WIPBusyPolarity = 0u;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
 80073aa:	e007      	b.n	80073bc <SFDP_BuildGenericDriver+0x4c8>
      } else
      {
          retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D14;
 80073ac:	2309      	movs	r3, #9
 80073ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 80073b2:	e349      	b.n	8007a48 <SFDP_BuildGenericDriver+0xb54>
 80073b4:	240001b0 	.word	0x240001b0
 80073b8:	24000230 	.word	0x24000230
      }
  }

  /* Set default value for instruction */
  Object->sfpd_private.DriverInfo.ReadInstruction     = 0x03U;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2203      	movs	r2, #3
 80073c0:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76

  /* ---------------------------------------------------
   *  command based on SFPD_PARAMID_BASIC_SPIPROTOCOL
   * ---------------------------------------------------
   */
  if (Object->sfpd_private.Sfdp_table_mask == (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL) 
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073ca:	2b08      	cmp	r3, #8
 80073cc:	f040 80a9 	bne.w	8007522 <SFDP_BuildGenericDriver+0x62e>
  {
    dummyCycles = 0;
 80073d0:	2300      	movs	r3, #0
 80073d2:	617b      	str	r3, [r7, #20]
    Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

    if (Object->sfpd_private.Config > EXTMEM_LINK_CONFIG_1LINE)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d04c      	beq.n	8007480 <SFDP_BuildGenericDriver+0x58c>
    {
      /* control if read 1s1s2s is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction != 0u)
 80073e6:	4bb4      	ldr	r3, [pc, #720]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 80073e8:	7c5b      	ldrb	r3, [r3, #17]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d015      	beq.n	800741a <SFDP_BuildGenericDriver+0x526>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_ModeClock;
 80073ee:	4bb2      	ldr	r3, [pc, #712]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 80073f0:	7c1b      	ldrb	r3, [r3, #16]
 80073f2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	461a      	mov	r2, r3
 80073fa:	4baf      	ldr	r3, [pc, #700]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 80073fc:	7c1b      	ldrb	r3, [r3, #16]
 80073fe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8007402:	b2db      	uxtb	r3, r3
 8007404:	4413      	add	r3, r2
 8007406:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction;
 8007408:	4bab      	ldr	r3, [pc, #684]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 800740a:	7c5a      	ldrb	r2, [r3, #17]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S2S;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* control if read 1S2S2S is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction != 0u)
 800741a:	4ba7      	ldr	r3, [pc, #668]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 800741c:	7cdb      	ldrb	r3, [r3, #19]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d015      	beq.n	800744e <SFDP_BuildGenericDriver+0x55a>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_ModeClock;
 8007422:	4ba5      	ldr	r3, [pc, #660]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 8007424:	7c9b      	ldrb	r3, [r3, #18]
 8007426:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800742a:	b2db      	uxtb	r3, r3
 800742c:	461a      	mov	r2, r3
 800742e:	4ba2      	ldr	r3, [pc, #648]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 8007430:	7c9b      	ldrb	r3, [r3, #18]
 8007432:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8007436:	b2db      	uxtb	r3, r3
 8007438:	4413      	add	r3, r2
 800743a:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction;
 800743c:	4b9e      	ldr	r3, [pc, #632]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 800743e:	7cda      	ldrb	r2, [r3, #19]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S2S2S;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2202      	movs	r2, #2
 800744a:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* The memory work only in 2S2S2S */
      if (JEDEC_Basic.Params.Param_DWORD.D5._2S2S2S_FastReadSupport != 0u)
 800744e:	4b9a      	ldr	r3, [pc, #616]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 8007450:	7d1b      	ldrb	r3, [r3, #20]
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b00      	cmp	r3, #0
 800745a:	d011      	beq.n	8007480 <SFDP_BuildGenericDriver+0x58c>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_ModeClock;
 800745c:	4b96      	ldr	r3, [pc, #600]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 800745e:	7e9b      	ldrb	r3, [r3, #26]
 8007460:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007464:	b2db      	uxtb	r3, r3
 8007466:	461a      	mov	r2, r3
 8007468:	4b93      	ldr	r3, [pc, #588]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 800746a:	7e9b      	ldrb	r3, [r3, #26]
 800746c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8007470:	b2db      	uxtb	r3, r3
 8007472:	4413      	add	r3, r2
 8007474:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_FastReadInstruction;
 8007476:	4b90      	ldr	r3, [pc, #576]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 8007478:	7eda      	ldrb	r2, [r3, #27]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      }
    }

    /* the command set is only based on this table */
    /* determine the best line configuration */
    if (Object->sfpd_private.Config > EXTMEM_LINK_CONFIG_2LINES)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007486:	2b01      	cmp	r3, #1
 8007488:	d92c      	bls.n	80074e4 <SFDP_BuildGenericDriver+0x5f0>
    {
      if (JEDEC_Basic.Params.Param_DWORD.D5._4S4S4S_FastReadSupport != 0u)
 800748a:	4b8b      	ldr	r3, [pc, #556]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 800748c:	7d1b      	ldrb	r3, [r3, #20]
 800748e:	f003 0310 	and.w	r3, r3, #16
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b00      	cmp	r3, #0
 8007496:	d020      	beq.n	80074da <SFDP_BuildGenericDriver+0x5e6>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_ModeClock;
 8007498:	4b87      	ldr	r3, [pc, #540]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 800749a:	7f9b      	ldrb	r3, [r3, #30]
 800749c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	461a      	mov	r2, r3
 80074a4:	4b84      	ldr	r3, [pc, #528]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 80074a6:	7f9b      	ldrb	r3, [r3, #30]
 80074a8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	4413      	add	r3, r2
 80074b0:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_FastReadInstruction;
 80074b2:	4b81      	ldr	r3, [pc, #516]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 80074b4:	7fda      	ldrb	r2, [r3, #31]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_4S4S4S;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2204      	movs	r2, #4
 80074c0:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        
        retr = JEDEC_Basic_Manage4S4S4SEnableSequence(Object);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fea7 	bl	8008218 <JEDEC_Basic_Manage4S4S4SEnableSequence>
 80074ca:	4603      	mov	r3, r0
 80074cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ( retr != EXTMEM_SFDP_OK)
 80074d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f040 82b4 	bne.w	8007a42 <SFDP_BuildGenericDriver+0xb4e>
      }
      else /* other configuration with more 4 lines */
      {
        /* not yet handled */
      }
      SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfpd_private.SALObject, (uint8_t)dummyCycles);
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    }

    /* Configure the link */
    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f103 0008 	add.w	r0, r3, #8
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3364      	adds	r3, #100	@ 0x64
 80074ee:	461a      	mov	r2, r3
 80074f0:	2100      	movs	r1, #0
 80074f2:	f7fe fd89 	bl	8006008 <SAL_XSPI_MemoryConfig>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <SFDP_BuildGenericDriver+0x610>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80074fc:	230c      	movs	r3, #12
 80074fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8007502:	e2a1      	b.n	8007a48 <SFDP_BuildGenericDriver+0xb54>
    }

    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, &dummyCycles))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3308      	adds	r3, #8
 8007508:	f107 0214 	add.w	r2, r7, #20
 800750c:	2101      	movs	r1, #1
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe fd7a 	bl	8006008 <SAL_XSPI_MemoryConfig>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <SFDP_BuildGenericDriver+0x62e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 800751a:	230c      	movs	r3, #12
 800751c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8007520:	e292      	b.n	8007a48 <SFDP_BuildGenericDriver+0xb54>

     If an octal DDR table is present and the target is 8D8D8D,
     when switch in octal DDR mode
     -------------------------------------------------------------------------------------------------------------------
  */
  if (((uint32_t)SFPD_PARAMID_OCTAL_DDR == (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_OCTAL_DDR)) 
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007528:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d069      	beq.n	8007604 <SFDP_BuildGenericDriver+0x710>
      && (EXTMEM_LINK_CONFIG_8LINES == Object->sfpd_private.Config))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007536:	2b03      	cmp	r3, #3
 8007538:	d164      	bne.n	8007604 <SFDP_BuildGenericDriver+0x710>
  {
    /* check if we are not already in octal mode */
    if (PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8007540:	2b09      	cmp	r3, #9
 8007542:	d103      	bne.n	800754c <SFDP_BuildGenericDriver+0x658>
    {
      flag4bitAddress = 1u;
 8007544:	2301      	movs	r3, #1
 8007546:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800754a:	e03a      	b.n	80075c2 <SFDP_BuildGenericDriver+0x6ce>
    }
    else
    {
      /* Execute the flash command sequence to switch in octal DDR */
      if (EXTMEM_SFDP_OK == sfpd_enter_octal_mode(Object))
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fbdb 	bl	8007d08 <sfpd_enter_octal_mode>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d134      	bne.n	80075c2 <SFDP_BuildGenericDriver+0x6ce>
      {
        /* switch the memory interface configuration according the Access protocol field */
        flag4bitAddress = 1u;
 8007558:	2301      	movs	r3, #1
 800755a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_8D8D8D;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2209      	movs	r2, #9
 8007562:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        
        /* update the physical link */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f103 0008 	add.w	r0, r3, #8
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3364      	adds	r3, #100	@ 0x64
 8007570:	461a      	mov	r2, r3
 8007572:	2100      	movs	r1, #0
 8007574:	f7fe fd48 	bl	8006008 <SAL_XSPI_MemoryConfig>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <SFDP_BuildGenericDriver+0x692>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 800757e:	230c      	movs	r3, #12
 8007580:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8007584:	e260      	b.n	8007a48 <SFDP_BuildGenericDriver+0xb54>
        }
        
        if (Object->sfpd_private.Sfdp_AccessProtocol == 0xFDu)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800758c:	2bfd      	cmp	r3, #253	@ 0xfd
 800758e:	d109      	bne.n	80075a4 <SFDP_BuildGenericDriver+0x6b0>
        {
          /* set 20 wait state */
          dummyCycles = 20;
 8007590:	2314      	movs	r3, #20
 8007592:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3308      	adds	r3, #8
 8007598:	f107 0214 	add.w	r2, r7, #20
 800759c:	2101      	movs	r1, #1
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe fd32 	bl	8006008 <SAL_XSPI_MemoryConfig>
        }
        if (Object->sfpd_private.Sfdp_AccessProtocol == 0xFEu)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80075aa:	2bfe      	cmp	r3, #254	@ 0xfe
 80075ac:	d109      	bne.n	80075c2 <SFDP_BuildGenericDriver+0x6ce>
        {
          /* set 8 wait state */
          dummyCycles = 8;
 80075ae:	2308      	movs	r3, #8
 80075b0:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	3308      	adds	r3, #8
 80075b6:	f107 0214 	add.w	r2, r7, #20
 80075ba:	2101      	movs	r1, #1
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fe fd23 	bl	8006008 <SAL_XSPI_MemoryConfig>
        /* an error occurs when trying to switch the mode                        */
        /* when continue the process and check if another mode could be targeted */
      }
    }

    if ((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)) &&
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075c8:	f003 0308 	and.w	r3, r3, #8
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d019      	beq.n	8007604 <SFDP_BuildGenericDriver+0x710>
        (JEDEC_Basic.size > 16u))
 80075d0:	4b39      	ldr	r3, [pc, #228]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
    if ((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)) &&
 80075d4:	2b10      	cmp	r3, #16
 80075d6:	d915      	bls.n	8007604 <SFDP_BuildGenericDriver+0x710>
    {
      /* check octal information to determine */
      /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
      /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
      /* 0b11 Command and Command Extension forms a 16 bit command word */
      if (JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension > 1u)
 80075d8:	4b37      	ldr	r3, [pc, #220]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 80075da:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80075de:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d903      	bls.n	80075f0 <SFDP_BuildGenericDriver+0x6fc>
      {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 80075e8:	230f      	movs	r3, #15
 80075ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 80075ee:	e22b      	b.n	8007a48 <SFDP_BuildGenericDriver+0xb54>
      }
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfpd_private.SALObject, (uint8_t)JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension);
 80075f0:	4b31      	ldr	r3, [pc, #196]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 80075f2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80075f6:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	461a      	mov	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }
  }

  if ((Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION) == (uint32_t)SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800760a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 813c 	beq.w	800788c <SFDP_BuildGenericDriver+0x998>
  {
    if (0u == flag4bitAddress)
 8007614:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007618:	2b00      	cmp	r3, #0
 800761a:	f040 809e 	bne.w	800775a <SFDP_BuildGenericDriver+0x866>
    {
      /* xxxx_xxx1b: issue instruction B7h (preceding write enable not required) */
      if (0x01u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x01u))
 800761e:	4b26      	ldr	r3, [pc, #152]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 8007620:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b00      	cmp	r3, #0
 800762a:	d01c      	beq.n	8007666 <SFDP_BuildGenericDriver+0x772>
      {
        /* send command to enter 4bit@ mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,0xB7, NULL, 0))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f103 0008 	add.w	r0, r3, #8
 8007632:	2300      	movs	r3, #0
 8007634:	2200      	movs	r2, #0
 8007636:	21b7      	movs	r1, #183	@ 0xb7
 8007638:	f7fe ff98 	bl	800656c <SAL_XSPI_CommandSendData>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d003      	beq.n	800764a <SFDP_BuildGenericDriver+0x756>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007642:	230c      	movs	r3, #12
 8007644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 8007648:	e1fe      	b.n	8007a48 <SFDP_BuildGenericDriver+0xb54>
        }

        /* Set 4Bit addressing on PHY side */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_ADDRESS_4BITS, NULL))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3308      	adds	r3, #8
 800764e:	2200      	movs	r2, #0
 8007650:	2102      	movs	r1, #2
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe fcd8 	bl	8006008 <SAL_XSPI_MemoryConfig>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d06b      	beq.n	8007736 <SFDP_BuildGenericDriver+0x842>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 800765e:	230c      	movs	r3, #12
 8007660:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 8007664:	e1f0      	b.n	8007a48 <SFDP_BuildGenericDriver+0xb54>
        }

        /* flag4bitAddress = 1u; this settings is not needed because variable is no more used */
      }
      /* xxxx_xx1xb: issue write enable instruction 06h, then issue instruction B7h */
      else if (0x2u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x2u))
 8007666:	4b14      	ldr	r3, [pc, #80]	@ (80076b8 <SFDP_BuildGenericDriver+0x7c4>)
 8007668:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	2b00      	cmp	r3, #0
 8007672:	d04e      	beq.n	8007712 <SFDP_BuildGenericDriver+0x81e>
      {
        /* send command to write enable */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f103 0008 	add.w	r0, r3, #8
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 8007680:	2300      	movs	r3, #0
 8007682:	2200      	movs	r2, #0
 8007684:	f7fe ff72 	bl	800656c <SAL_XSPI_CommandSendData>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <SFDP_BuildGenericDriver+0x7a2>
                                           Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 800768e:	230c      	movs	r3, #12
 8007690:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 8007694:	e1d8      	b.n	8007a48 <SFDP_BuildGenericDriver+0xb54>
        }

        /* control the write enable */
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f103 0008 	add.w	r0, r3, #8
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                            Object->sfpd_private.DriverInfo.ReadWELCommand,
                                            Object->sfpd_private.DriverInfo.WELAddress,
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 80076a8:	461d      	mov	r5, r3
                                            ((Object->sfpd_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfpd_private.DriverInfo.WELPosition,
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d103      	bne.n	80076bc <SFDP_BuildGenericDriver+0x7c8>
 80076b4:	2301      	movs	r3, #1
 80076b6:	e002      	b.n	80076be <SFDP_BuildGenericDriver+0x7ca>
 80076b8:	240001b0 	.word	0x240001b0
 80076bc:	2300      	movs	r3, #0
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
 80076c4:	4093      	lsls	r3, r2
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 80076c6:	b2da      	uxtb	r2, r3
                                            1u << Object->sfpd_private.DriverInfo.WELPosition,
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80076ce:	461c      	mov	r4, r3
 80076d0:	2301      	movs	r3, #1
 80076d2:	40a3      	lsls	r3, r4
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80076da:	9401      	str	r4, [sp, #4]
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	4613      	mov	r3, r2
 80076e0:	462a      	mov	r2, r5
 80076e2:	f7ff f838 	bl	8006756 <SAL_XSPI_CheckStatusRegister>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <SFDP_BuildGenericDriver+0x800>
                                            1000))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 80076ec:	230c      	movs	r3, #12
 80076ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 80076f2:	e1a9      	b.n	8007a48 <SFDP_BuildGenericDriver+0xb54>
        }

        /* send command to enter 4bit@ mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0xB7, NULL, 0u))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f103 0008 	add.w	r0, r3, #8
 80076fa:	2300      	movs	r3, #0
 80076fc:	2200      	movs	r2, #0
 80076fe:	21b7      	movs	r1, #183	@ 0xb7
 8007700:	f7fe ff34 	bl	800656c <SAL_XSPI_CommandSendData>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d015      	beq.n	8007736 <SFDP_BuildGenericDriver+0x842>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 800770a:	230c      	movs	r3, #12
 800770c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8007710:	e19a      	b.n	8007a48 <SFDP_BuildGenericDriver+0xb54>
        }
      }
      /* x1xx_xxxxb: Always operates in 4-Byte address mode */
      else if (0x40u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x40u))
 8007712:	4ba3      	ldr	r3, [pc, #652]	@ (80079a0 <SFDP_BuildGenericDriver+0xaac>)
 8007714:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10a      	bne.n	8007736 <SFDP_BuildGenericDriver+0x842>
      {
        /* nothing to do */
        /* flag4bitAddress = 1u; this settings is not needed because variable is no more used */
      }
      /* xx1x_xxxxb: Supports dedicated 4-Byte address instruction set. Consult vendor data sheet for the instruction set definition.*/
      else if (0x20u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x20u))
 8007720:	4b9f      	ldr	r3, [pc, #636]	@ (80079a0 <SFDP_BuildGenericDriver+0xaac>)
 8007722:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007726:	f003 0320 	and.w	r3, r3, #32
 800772a:	2b00      	cmp	r3, #0
 800772c:	d103      	bne.n	8007736 <SFDP_BuildGenericDriver+0x842>
        /* xxxx_x1xxb: 8-bit volatile extended address register used to define A[31:24] bits. Read with instruction C8h. Write instruction is C5h with 1 byte of data. Select the active 128 Mbit memory segment by setting the appropriate A[31:24] bits and use 3-Byte addressing.
           xxxx_1xxxb: 8-bit volatile bank register used to define A[30:A24] bits. MSB (bit[7]) is used to enable/disable 4-byte address mode. When MSB is set to 1, 4-byte address mode is active and A[30:24] bits are don not care. Read with instruction 16h. Write instruction is 17h with 1 byte of data. When MSB is cleared to 0, select the active 128 Mbit segment by setting the appropriate A[30:24] bits and use 3-Byte addressing.
           xxx1_xxxxb: A 16-bit nonvolatile configuration register controls 3-Byte/4-Byte address mode. Read instruction is B5h. Bit[0] controls address mode [0=3-Byte;1=4-Byte]. Write configuration register instruction is B1h, data length is 2 bytes.
        */
      else {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 800772e:	230f      	movs	r3, #15
 8007730:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8007734:	e188      	b.n	8007a48 <SFDP_BuildGenericDriver+0xb54>

      }

      /* Set 4Bit addressing on PHY side */
      if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_ADDRESS_4BITS, NULL))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	3308      	adds	r3, #8
 800773a:	2200      	movs	r2, #0
 800773c:	2102      	movs	r1, #2
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe fc62 	bl	8006008 <SAL_XSPI_MemoryConfig>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <SFDP_BuildGenericDriver+0x85e>
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
 800774a:	230c      	movs	r3, #12
 800774c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8007750:	e17a      	b.n	8007a48 <SFDP_BuildGenericDriver+0xb54>
      }
      
      /* Set the read function for 4Bit Address */
      Object->sfpd_private.DriverInfo.ReadInstruction = 0x13U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2213      	movs	r2, #19
 8007756:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if ((EXTMEM_LINK_CONFIG_8LINES == Object->sfpd_private.Config) && (PHY_LINK_1S1S1S == Object->sfpd_private.DriverInfo.SpiPhyLink))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007760:	2b03      	cmp	r3, #3
 8007762:	d12e      	bne.n	80077c2 <SFDP_BuildGenericDriver+0x8ce>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800776a:	2b00      	cmp	r3, #0
 800776c:	d129      	bne.n	80077c2 <SFDP_BuildGenericDriver+0x8ce>
    {
      /* check if we can switch to if the config is still 1S8S8S */
      if ((0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)  && (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand))
 800776e:	4b8d      	ldr	r3, [pc, #564]	@ (80079a4 <SFDP_BuildGenericDriver+0xab0>)
 8007770:	789b      	ldrb	r3, [r3, #2]
 8007772:	f003 0320 	and.w	r3, r3, #32
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	d022      	beq.n	80077c2 <SFDP_BuildGenericDriver+0x8ce>
 800777c:	4b89      	ldr	r3, [pc, #548]	@ (80079a4 <SFDP_BuildGenericDriver+0xab0>)
 800777e:	78db      	ldrb	r3, [r3, #3]
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d01b      	beq.n	80077c2 <SFDP_BuildGenericDriver+0x8ce>
      {
        /* Patch micron write command 0x81 @0x0 0xE7 */
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S8S8S;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2207      	movs	r2, #7
 800778e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f103 0008 	add.w	r0, r3, #8
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3364      	adds	r3, #100	@ 0x64
 800779c:	461a      	mov	r2, r3
 800779e:	2100      	movs	r1, #0
 80077a0:	f7fe fc32 	bl	8006008 <SAL_XSPI_MemoryConfig>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <SFDP_BuildGenericDriver+0x8be>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 80077aa:	230c      	movs	r3, #12
 80077ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 80077b0:	e14a      	b.n	8007a48 <SFDP_BuildGenericDriver+0xb54>
        }
        Object->sfpd_private.DriverInfo.ReadInstruction = 0xCC;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	22cc      	movs	r2, #204	@ 0xcc
 80077b6:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x8E;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	228e      	movs	r2, #142	@ 0x8e
 80077be:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75

    /*
      need to be study more; it seems that macromix used it to define the command maybe because only one mode is
      supported in their case
    */
    if ((Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) || 
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80077c8:	2b09      	cmp	r3, #9
 80077ca:	d004      	beq.n	80077d6 <SFDP_BuildGenericDriver+0x8e2>
        (Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_1S1S1S))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
    if ((Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) || 
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d120      	bne.n	8007818 <SFDP_BuildGenericDriver+0x924>
    {
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_PageProgramCommand) {Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x12u;}
 80077d6:	4b73      	ldr	r3, [pc, #460]	@ (80079a4 <SFDP_BuildGenericDriver+0xab0>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d003      	beq.n	80077ec <SFDP_BuildGenericDriver+0x8f8>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2212      	movs	r2, #18
 80077e8:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_ReadCommand)        {Object->sfpd_private.DriverInfo.ReadInstruction        = 0x13u;}
 80077ec:	4b6d      	ldr	r3, [pc, #436]	@ (80079a4 <SFDP_BuildGenericDriver+0xab0>)
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <SFDP_BuildGenericDriver+0x90e>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2213      	movs	r2, #19
 80077fe:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_FastReadCommand)    {Object->sfpd_private.DriverInfo.ReadInstruction        = 0x0Cu;}
 8007802:	4b68      	ldr	r3, [pc, #416]	@ (80079a4 <SFDP_BuildGenericDriver+0xab0>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	b2db      	uxtb	r3, r3
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <SFDP_BuildGenericDriver+0x924>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	220c      	movs	r2, #12
 8007814:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }
    
    if (Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8S8D8D) 
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800781e:	2b08      	cmp	r3, #8
 8007820:	d120      	bne.n	8007864 <SFDP_BuildGenericDriver+0x970>
    {
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand) {Object->sfpd_private.DriverInfo.PageProgramInstruction  = 0x02u;}
 8007822:	4b60      	ldr	r3, [pc, #384]	@ (80079a4 <SFDP_BuildGenericDriver+0xab0>)
 8007824:	78db      	ldrb	r3, [r3, #3]
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d003      	beq.n	8007838 <SFDP_BuildGenericDriver+0x944>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)    {Object->sfpd_private.DriverInfo.ReadInstruction         = 0xCCu;}
 8007838:	4b5a      	ldr	r3, [pc, #360]	@ (80079a4 <SFDP_BuildGenericDriver+0xab0>)
 800783a:	789b      	ldrb	r3, [r3, #2]
 800783c:	f003 0320 	and.w	r3, r3, #32
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <SFDP_BuildGenericDriver+0x95a>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	22cc      	movs	r2, #204	@ 0xcc
 800784a:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8D8D_DTRReadCommand)     {Object->sfpd_private.DriverInfo.ReadInstruction         = 0xFDu;}
 800784e:	4b55      	ldr	r3, [pc, #340]	@ (80079a4 <SFDP_BuildGenericDriver+0xab0>)
 8007850:	789b      	ldrb	r3, [r3, #2]
 8007852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <SFDP_BuildGenericDriver+0x970>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	22fd      	movs	r2, #253	@ 0xfd
 8007860:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    Object->sfpd_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType1;
 8007864:	4b4f      	ldr	r3, [pc, #316]	@ (80079a4 <SFDP_BuildGenericDriver+0xab0>)
 8007866:	791a      	ldrb	r2, [r3, #4]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    Object->sfpd_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType2;
 800786e:	4b4d      	ldr	r3, [pc, #308]	@ (80079a4 <SFDP_BuildGenericDriver+0xab0>)
 8007870:	795a      	ldrb	r2, [r3, #5]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
    Object->sfpd_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType3;
 8007878:	4b4a      	ldr	r3, [pc, #296]	@ (80079a4 <SFDP_BuildGenericDriver+0xab0>)
 800787a:	799a      	ldrb	r2, [r3, #6]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Object->sfpd_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType4;
 8007882:	4b48      	ldr	r3, [pc, #288]	@ (80079a4 <SFDP_BuildGenericDriver+0xab0>)
 8007884:	79da      	ldrb	r2, [r3, #7]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
  }

  if(((uint32_t)SFPD_PARAMID_XSPI_V1_0 == (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_XSPI_V1_0))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 80d5 	beq.w	8007a46 <SFDP_BuildGenericDriver+0xb52>
      && 
      ((PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
      && 
 80078a2:	2b09      	cmp	r3, #9
 80078a4:	d005      	beq.n	80078b2 <SFDP_BuildGenericDriver+0x9be>
      ((PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	f040 80ca 	bne.w	8007a46 <SFDP_BuildGenericDriver+0xb52>
  {
    uint32_t ClockOut = 0u;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60fb      	str	r3, [r7, #12]
    uint32_t MaxFreqMhz;
    /* Read command */
    if (0u != JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand)
 80078b6:	4b3c      	ldr	r3, [pc, #240]	@ (80079a8 <SFDP_BuildGenericDriver+0xab4>)
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d004      	beq.n	80078c8 <SFDP_BuildGenericDriver+0x9d4>
    {
      Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand;
 80078be:	4b3a      	ldr	r3, [pc, #232]	@ (80079a8 <SFDP_BuildGenericDriver+0xab4>)
 80078c0:	785a      	ldrb	r2, [r3, #1]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }
    
    if (JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle != 0u)
 80078c8:	4b37      	ldr	r3, [pc, #220]	@ (80079a8 <SFDP_BuildGenericDriver+0xab4>)
 80078ca:	7d1b      	ldrb	r3, [r3, #20]
 80078cc:	f003 031f 	and.w	r3, r3, #31
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00d      	beq.n	80078f2 <SFDP_BuildGenericDriver+0x9fe>
    {
      /* Set the default dummy cycle of this mode */
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle;
 80078d6:	4b34      	ldr	r3, [pc, #208]	@ (80079a8 <SFDP_BuildGenericDriver+0xab4>)
 80078d8:	7d1b      	ldrb	r3, [r3, #20]
 80078da:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	617b      	str	r3, [r7, #20]
      (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	3308      	adds	r3, #8
 80078e6:	f107 0214 	add.w	r2, r7, #20
 80078ea:	2101      	movs	r1, #1
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fe fb8b 	bl	8006008 <SAL_XSPI_MemoryConfig>
    }

    /* adapt the memory freq according its capabilities */
    MaxFreqMhz = sfdp_getfrequencevalue(JEDEC_Basic.Params.Param_DWORD.D20._8D8D8D_MaximunSpeedWithStrobe);
 80078f2:	4b2b      	ldr	r3, [pc, #172]	@ (80079a0 <SFDP_BuildGenericDriver+0xaac>)
 80078f4:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 80078f8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 f8e8 	bl	8007ad4 <sfdp_getfrequencevalue>
 8007904:	61f8      	str	r0, [r7, #28]
    if (MaxFreqMhz > Object->sfpd_private.DriverInfo.ClockIn)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800790a:	69fa      	ldr	r2, [r7, #28]
 800790c:	429a      	cmp	r2, r3
 800790e:	d902      	bls.n	8007916 <SFDP_BuildGenericDriver+0xa22>
    {
      /* Adjust the frequence with the ClokcIn */ 
      MaxFreqMhz = Object->sfpd_private.DriverInfo.ClockIn;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007914:	61fb      	str	r3, [r7, #28]
    }

    /* Update the clock to be aligned with selected configuration */
    if(HAL_OK != SAL_XSPI_SetClock(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.ClockIn, MaxFreqMhz, &ClockOut))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f103 0008 	add.w	r0, r3, #8
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8007920:	f107 030c 	add.w	r3, r7, #12
 8007924:	69fa      	ldr	r2, [r7, #28]
 8007926:	f7fe fafd 	bl	8005f24 <SAL_XSPI_SetClock>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d003      	beq.n	8007938 <SFDP_BuildGenericDriver+0xa44>
    {
      retr = EXTMEM_SFDP_ERROR_SETCLOCK;
 8007930:	230d      	movs	r3, #13
 8007932:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8007936:	e087      	b.n	8007a48 <SFDP_BuildGenericDriver+0xb54>
    }
    *FreqUpdated = 1u; /* Used to indicate that the clock configuration has been updated */
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2201      	movs	r2, #1
 800793c:	701a      	strb	r2, [r3, #0]
    
    /* get the dummy cycle value according the real output clock */
    if ((ClockOut >= CLOCK_200MHZ) && (JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle != 0u))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4a1a      	ldr	r2, [pc, #104]	@ (80079ac <SFDP_BuildGenericDriver+0xab8>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d913      	bls.n	800796e <SFDP_BuildGenericDriver+0xa7a>
 8007946:	4b18      	ldr	r3, [pc, #96]	@ (80079a8 <SFDP_BuildGenericDriver+0xab4>)
 8007948:	899b      	ldrh	r3, [r3, #12]
 800794a:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 800794e:	b29b      	uxth	r3, r3
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00c      	beq.n	800796e <SFDP_BuildGenericDriver+0xa7a>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle;
 8007954:	4b14      	ldr	r3, [pc, #80]	@ (80079a8 <SFDP_BuildGenericDriver+0xab4>)
 8007956:	899b      	ldrh	r3, [r3, #12]
 8007958:	f3c3 13c4 	ubfx	r3, r3, #7, #5
 800795c:	b2db      	uxtb	r3, r3
 800795e:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_ConfigPattern;
 8007960:	4b11      	ldr	r3, [pc, #68]	@ (80079a8 <SFDP_BuildGenericDriver+0xab4>)
 8007962:	7b1b      	ldrb	r3, [r3, #12]
 8007964:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8007968:	b2db      	uxtb	r3, r3
 800796a:	623b      	str	r3, [r7, #32]
 800796c:	e046      	b.n	80079fc <SFDP_BuildGenericDriver+0xb08>
    }
    else if ((ClockOut >= CLOCK_166MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle != 0u))
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4a0f      	ldr	r2, [pc, #60]	@ (80079b0 <SFDP_BuildGenericDriver+0xabc>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d91e      	bls.n	80079b4 <SFDP_BuildGenericDriver+0xac0>
 8007976:	4b0c      	ldr	r3, [pc, #48]	@ (80079a8 <SFDP_BuildGenericDriver+0xab4>)
 8007978:	7cdb      	ldrb	r3, [r3, #19]
 800797a:	f023 0307 	bic.w	r3, r3, #7
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b00      	cmp	r3, #0
 8007982:	d017      	beq.n	80079b4 <SFDP_BuildGenericDriver+0xac0>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle;
 8007984:	4b08      	ldr	r3, [pc, #32]	@ (80079a8 <SFDP_BuildGenericDriver+0xab4>)
 8007986:	7cdb      	ldrb	r3, [r3, #19]
 8007988:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800798c:	b2db      	uxtb	r3, r3
 800798e:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_ConfigPattern;
 8007990:	4b05      	ldr	r3, [pc, #20]	@ (80079a8 <SFDP_BuildGenericDriver+0xab4>)
 8007992:	8a5b      	ldrh	r3, [r3, #18]
 8007994:	f3c3 1384 	ubfx	r3, r3, #6, #5
 8007998:	b2db      	uxtb	r3, r3
 800799a:	623b      	str	r3, [r7, #32]
 800799c:	e02e      	b.n	80079fc <SFDP_BuildGenericDriver+0xb08>
 800799e:	bf00      	nop
 80079a0:	240001b0 	.word	0x240001b0
 80079a4:	24000210 	.word	0x24000210
 80079a8:	24000218 	.word	0x24000218
 80079ac:	0bebc1ff 	.word	0x0bebc1ff
 80079b0:	09e4f57f 	.word	0x09e4f57f
    }
    else if ((ClockOut >= CLOCK_133MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle != 0u))
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4a27      	ldr	r2, [pc, #156]	@ (8007a54 <SFDP_BuildGenericDriver+0xb60>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d913      	bls.n	80079e4 <SFDP_BuildGenericDriver+0xaf0>
 80079bc:	4b26      	ldr	r3, [pc, #152]	@ (8007a58 <SFDP_BuildGenericDriver+0xb64>)
 80079be:	7c9b      	ldrb	r3, [r3, #18]
 80079c0:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00c      	beq.n	80079e4 <SFDP_BuildGenericDriver+0xaf0>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle;
 80079ca:	4b23      	ldr	r3, [pc, #140]	@ (8007a58 <SFDP_BuildGenericDriver+0xb64>)
 80079cc:	7c9b      	ldrb	r3, [r3, #18]
 80079ce:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_ConfigPattern;
 80079d6:	4b20      	ldr	r3, [pc, #128]	@ (8007a58 <SFDP_BuildGenericDriver+0xb64>)
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f3c3 3304 	ubfx	r3, r3, #12, #5
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	623b      	str	r3, [r7, #32]
 80079e2:	e00b      	b.n	80079fc <SFDP_BuildGenericDriver+0xb08>
    }
    else /* if (ClockOut =< 100Mhz) */
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_DummyCycle;
 80079e4:	4b1c      	ldr	r3, [pc, #112]	@ (8007a58 <SFDP_BuildGenericDriver+0xb64>)
 80079e6:	8a1b      	ldrh	r3, [r3, #16]
 80079e8:	f3c3 13c4 	ubfx	r3, r3, #7, #5
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_ConfigPattern;
 80079f0:	4b19      	ldr	r3, [pc, #100]	@ (8007a58 <SFDP_BuildGenericDriver+0xb64>)
 80079f2:	7c1b      	ldrb	r3, [r3, #16]
 80079f4:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	623b      	str	r3, [r7, #32]
    }
    
    /* Write the dummy cycle value in the configuration register using information coming from SCCR Map */
    if((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d017      	beq.n	8007a3a <SFDP_BuildGenericDriver+0xb46>
	  && (0u != JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable))
 8007a0a:	4b14      	ldr	r3, [pc, #80]	@ (8007a5c <SFDP_BuildGenericDriver+0xb68>)
 8007a0c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007a10:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00f      	beq.n	8007a3a <SFDP_BuildGenericDriver+0xb46>
    {
      /* Update the frequence with MaxFreqMhz information */
      if( sfpd_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
 8007a1a:	6a39      	ldr	r1, [r7, #32]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fa5d 	bl	8007edc <sfpd_set_dummycycle>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10f      	bne.n	8007a48 <SFDP_BuildGenericDriver+0xb54>
      {
        /* Set the dummy cycle corresponding */
        (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	3308      	adds	r3, #8
 8007a2c:	f107 0214 	add.w	r2, r7, #20
 8007a30:	2101      	movs	r1, #1
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe fae8 	bl	8006008 <SAL_XSPI_MemoryConfig>
      if( sfpd_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
 8007a38:	e006      	b.n	8007a48 <SFDP_BuildGenericDriver+0xb54>
      }
    }
    else
    {
      retr = EXTMEM_SFDP_ERROR_CONFIGDUMMY;
 8007a3a:	230e      	movs	r3, #14
 8007a3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8007a40:	e002      	b.n	8007a48 <SFDP_BuildGenericDriver+0xb54>
          goto error;
 8007a42:	bf00      	nop
 8007a44:	e000      	b.n	8007a48 <SFDP_BuildGenericDriver+0xb54>
    }
  }

error :
 8007a46:	bf00      	nop
  return retr;
 8007a48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3728      	adds	r7, #40	@ 0x28
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bdb0      	pop	{r4, r5, r7, pc}
 8007a54:	07ed6b3f 	.word	0x07ed6b3f
 8007a58:	24000218 	.word	0x24000218
 8007a5c:	24000230 	.word	0x24000230

08007a60 <driver_check_FlagBUSY>:


EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef driver_check_FlagBUSY(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject, uint32_t Timeout)
{
 8007a60:	b5b0      	push	{r4, r5, r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af02      	add	r7, sp, #8
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUSY;
 8007a6a:	23fb      	movs	r3, #251	@ 0xfb
 8007a6c:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR((uint8_t *)__func__)
  if (0u != SFDPObject->sfpd_private.DriverInfo.ReadWIPCommand)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d026      	beq.n	8007ac6 <driver_check_FlagBUSY+0x66>
  {
    /* check if the busy flag is enabled */
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f103 0008 	add.w	r0, r3, #8
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
                                               SFDPObject->sfpd_private.DriverInfo.ReadWIPCommand,
                                               SFDPObject->sfpd_private.DriverInfo.WIPAddress,
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 8007a8a:	461d      	mov	r5, r3
                                               SFDPObject->sfpd_private.DriverInfo.WIPBusyPolarity << SFDPObject->sfpd_private.DriverInfo.WIPPosition,
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8007a92:	461a      	mov	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 8007a9a:	fa02 f303 	lsl.w	r3, r2, r3
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 8007a9e:	b2dc      	uxtb	r4, r3
                                               1u << SFDPObject->sfpd_private.DriverInfo.WIPPosition,
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	4093      	lsls	r3, r2
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	9201      	str	r2, [sp, #4]
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	4623      	mov	r3, r4
 8007ab6:	462a      	mov	r2, r5
 8007ab8:	f7fe fe4d 	bl	8006756 <SAL_XSPI_CheckStatusRegister>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <driver_check_FlagBUSY+0x66>
                                               Timeout))
    {
      retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	73fb      	strb	r3, [r7, #15]
    }
  }
  return retr;
 8007ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007ad4 <sfdp_getfrequencevalue>:
 * @brief this function returns the frequence corresponding to a frequecy
 * @param BitField bit field value
 * @return frequency value
 */
uint32_t sfdp_getfrequencevalue(uint32_t BitField)
{
 8007ad4:	b4b0      	push	{r4, r5, r7}
 8007ad6:	b08b      	sub	sp, #44	@ 0x2c
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  const uint16_t freqMhz_table[] = { 0x0, 33, 50, 66, 80, 100, 133, 166, 200, 250, 266, 333, 400 };
 8007adc:	4b0e      	ldr	r3, [pc, #56]	@ (8007b18 <sfdp_getfrequencevalue+0x44>)
 8007ade:	f107 040c 	add.w	r4, r7, #12
 8007ae2:	461d      	mov	r5, r3
 8007ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ae8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007aec:	c403      	stmia	r4!, {r0, r1}
 8007aee:	8022      	strh	r2, [r4, #0]
  SFDP_DEBUG_STR(__func__);

  if (BitField < 0b1010u)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b09      	cmp	r3, #9
 8007af4:	d80a      	bhi.n	8007b0c <sfdp_getfrequencevalue+0x38>
  {
    return (uint32_t)freqMhz_table[BitField]* 1000000u;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	3328      	adds	r3, #40	@ 0x28
 8007afc:	443b      	add	r3, r7
 8007afe:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8007b02:	461a      	mov	r2, r3
 8007b04:	4b05      	ldr	r3, [pc, #20]	@ (8007b1c <sfdp_getfrequencevalue+0x48>)
 8007b06:	fb02 f303 	mul.w	r3, r2, r3
 8007b0a:	e000      	b.n	8007b0e <sfdp_getfrequencevalue+0x3a>
  }
  return 0; /* the max frequency is unknown */
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	372c      	adds	r7, #44	@ 0x2c
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bcb0      	pop	{r4, r5, r7}
 8007b16:	4770      	bx	lr
 8007b18:	0800858c 	.word	0x0800858c
 8007b1c:	000f4240 	.word	0x000f4240

08007b20 <sfdp_get_paraminfo>:
 * @param sfdp_adress address of the SFDP table
 * @param sfdp_param_info pointer on parameter info
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfdp_get_paraminfo(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t sfdp_adress, SFDP_ParameterTableTypeDef *Param_info)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b088      	sub	sp, #32
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	77fb      	strb	r3, [r7, #31]
  SFDP_ParameterHeaderTypeDef sfdp_param_header = {0};
 8007b30:	f107 0314 	add.w	r3, r7, #20
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	605a      	str	r2, [r3, #4]
  SFDP_DEBUG_STR(__func__);

  /* send the SFDP command to read the header */
  if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, sfdp_adress, 
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f103 0008 	add.w	r0, r3, #8
 8007b40:	f107 0214 	add.w	r2, r7, #20
 8007b44:	2308      	movs	r3, #8
 8007b46:	68b9      	ldr	r1, [r7, #8]
 8007b48:	f7fe fbb0 	bl	80062ac <SAL_XSPI_GetSFDP>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <sfdp_get_paraminfo+0x38>
                                (uint8_t*)&sfdp_param_header, SFDP_PARAM_HEADER_SIZE))
  {
    retr = EXTMEM_SFDP_ERROR_SFPDREAD;
 8007b52:	2303      	movs	r3, #3
 8007b54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b56:	e0d1      	b.n	8007cfc <sfdp_get_paraminfo+0x1dc>
  }

  Param_info->type = SFPD_PARAMID_UNKNOWN;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]
  Param_info->size = sfdp_param_header.Length ;
 8007b5e:	7dfa      	ldrb	r2, [r7, #23]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	721a      	strb	r2, [r3, #8]
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
 8007b64:	7ebb      	ldrb	r3, [r7, #26]
 8007b66:	041a      	lsls	r2, r3, #16
                        |((uint32_t)sfdp_param_header.TableAddressPointer[1u] << 8u)
 8007b68:	7e7b      	ldrb	r3, [r7, #25]
 8007b6a:	021b      	lsls	r3, r3, #8
 8007b6c:	4313      	orrs	r3, r2
                        |((uint32_t)sfdp_param_header.TableAddressPointer[0u]));
 8007b6e:	7e3a      	ldrb	r2, [r7, #24]
 8007b70:	431a      	orrs	r2, r3
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	605a      	str	r2, [r3, #4]

  if ((sfdp_param_header.ID_msb > 0x00u) && (sfdp_param_header.ID_msb < 0x80u))
 8007b76:	7efb      	ldrb	r3, [r7, #27]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d010      	beq.n	8007b9e <sfdp_get_paraminfo+0x7e>
 8007b7c:	7efb      	ldrb	r3, [r7, #27]
 8007b7e:	b25b      	sxtb	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	db0c      	blt.n	8007b9e <sfdp_get_paraminfo+0x7e>
  {
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
 8007b84:	7efb      	ldrb	r3, [r7, #27]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <sfdp_get_paraminfo+0x76>
    {
      Param_info->type = SFPD_PARAMID_VENDOR;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
 8007b94:	e0b2      	b.n	8007cfc <sfdp_get_paraminfo+0x1dc>
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_VENDOR");
    }
    else
    {
      Param_info->type = SFPD_PARAMID_FUNCTION_VENDOR;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2202      	movs	r2, #2
 8007b9a:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
 8007b9c:	e0ae      	b.n	8007cfc <sfdp_get_paraminfo+0x1dc>
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_FUNCTION_VENDOR");
    }
  }
  else
  {
    if((sfdp_param_header.ID_lsb & 0x01u) == 0x00u)
 8007b9e:	7d3b      	ldrb	r3, [r7, #20]
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d102      	bne.n	8007bae <sfdp_get_paraminfo+0x8e>
    {
      Param_info->type = SFPD_PARAMID_FUNCTION_JEDEC;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2204      	movs	r2, #4
 8007bac:	601a      	str	r2, [r3, #0]
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_FUNCTION_JEDEC");
    }

    if((0xFFu == sfdp_param_header.ID_msb))
 8007bae:	7efb      	ldrb	r3, [r7, #27]
 8007bb0:	2bff      	cmp	r3, #255	@ 0xff
 8007bb2:	f040 80a2 	bne.w	8007cfa <sfdp_get_paraminfo+0x1da>
    {
      switch(sfdp_param_header.ID_lsb)
 8007bb6:	7d3b      	ldrb	r3, [r7, #20]
 8007bb8:	2b0f      	cmp	r3, #15
 8007bba:	dc4b      	bgt.n	8007c54 <sfdp_get_paraminfo+0x134>
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	da23      	bge.n	8007c08 <sfdp_get_paraminfo+0xe8>
        Param_info->type = SFPD_PARAMID_RESERVED;
        SFDP_DEBUG_STR("-> info SFPD_PARAMID_RESERVED");
        break;
      default :
        SFDP_DEBUG_STR("-> info SFPD_PARAMID_????");
        break;
 8007bc0:	e09a      	b.n	8007cf8 <sfdp_get_paraminfo+0x1d8>
      switch(sfdp_param_header.ID_lsb)
 8007bc2:	3b81      	subs	r3, #129	@ 0x81
 8007bc4:	2b0d      	cmp	r3, #13
 8007bc6:	f200 8097 	bhi.w	8007cf8 <sfdp_get_paraminfo+0x1d8>
 8007bca:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd0 <sfdp_get_paraminfo+0xb0>)
 8007bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd0:	08007c75 	.word	0x08007c75
 8007bd4:	08007cf9 	.word	0x08007cf9
 8007bd8:	08007cf9 	.word	0x08007cf9
 8007bdc:	08007c85 	.word	0x08007c85
 8007be0:	08007cf9 	.word	0x08007cf9
 8007be4:	08007cf9 	.word	0x08007cf9
 8007be8:	08007c9f 	.word	0x08007c9f
 8007bec:	08007ca9 	.word	0x08007ca9
 8007bf0:	08007cf9 	.word	0x08007cf9
 8007bf4:	08007cf9 	.word	0x08007cf9
 8007bf8:	08007cc7 	.word	0x08007cc7
 8007bfc:	08007cf9 	.word	0x08007cf9
 8007c00:	08007cdb 	.word	0x08007cdb
 8007c04:	08007ce5 	.word	0x08007ce5
 8007c08:	2b0f      	cmp	r3, #15
 8007c0a:	d875      	bhi.n	8007cf8 <sfdp_get_paraminfo+0x1d8>
 8007c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c14 <sfdp_get_paraminfo+0xf4>)
 8007c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c12:	bf00      	nop
 8007c14:	08007c5f 	.word	0x08007c5f
 8007c18:	08007cf9 	.word	0x08007cf9
 8007c1c:	08007cf9 	.word	0x08007cf9
 8007c20:	08007c7d 	.word	0x08007c7d
 8007c24:	08007cf9 	.word	0x08007cf9
 8007c28:	08007c8d 	.word	0x08007c8d
 8007c2c:	08007c95 	.word	0x08007c95
 8007c30:	08007cf9 	.word	0x08007cf9
 8007c34:	08007cf9 	.word	0x08007cf9
 8007c38:	08007cb3 	.word	0x08007cb3
 8007c3c:	08007cbd 	.word	0x08007cbd
 8007c40:	08007cf9 	.word	0x08007cf9
 8007c44:	08007cd1 	.word	0x08007cd1
 8007c48:	08007cf9 	.word	0x08007cf9
 8007c4c:	08007cf9 	.word	0x08007cf9
 8007c50:	08007cef 	.word	0x08007cef
 8007c54:	2b8e      	cmp	r3, #142	@ 0x8e
 8007c56:	dc4f      	bgt.n	8007cf8 <sfdp_get_paraminfo+0x1d8>
 8007c58:	2b81      	cmp	r3, #129	@ 0x81
 8007c5a:	dab2      	bge.n	8007bc2 <sfdp_get_paraminfo+0xa2>
        break;
 8007c5c:	e04c      	b.n	8007cf8 <sfdp_get_paraminfo+0x1d8>
        Param_info->type = SFPD_PARAMID_BASIC_SPIPROTOCOL;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2208      	movs	r2, #8
 8007c62:	601a      	str	r2, [r3, #0]
        Param_info->size = ((sfdp_param_header.Length ) < SFPD_PARAMS_BASIC_TABLE_DEFAULTSIZE) ? SFPD_PARAMS_BASIC_TABLE_DEFAULTSIZE : sfdp_param_header.Length;
 8007c64:	7dfb      	ldrb	r3, [r7, #23]
 8007c66:	2b10      	cmp	r3, #16
 8007c68:	bf38      	it	cc
 8007c6a:	2310      	movcc	r3, #16
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	721a      	strb	r2, [r3, #8]
        break;
 8007c72:	e042      	b.n	8007cfa <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_SECTORMAP;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2210      	movs	r2, #16
 8007c78:	601a      	str	r2, [r3, #0]
        break;
 8007c7a:	e03e      	b.n	8007cfa <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_RPMC;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	601a      	str	r2, [r3, #0]
        break;
 8007c82:	e03a      	b.n	8007cfa <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2240      	movs	r2, #64	@ 0x40
 8007c88:	601a      	str	r2, [r3, #0]
        break;
 8007c8a:	e036      	b.n	8007cfa <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_XSPI_V1_0;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2280      	movs	r2, #128	@ 0x80
 8007c90:	601a      	str	r2, [r3, #0]
        break;
 8007c92:	e032      	b.n	8007cfa <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_XSPI_V2_0;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c9a:	601a      	str	r2, [r3, #0]
        break;
 8007c9c:	e02d      	b.n	8007cfa <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ca4:	601a      	str	r2, [r3, #0]
        break;
 8007ca6:	e028      	b.n	8007cfa <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP_MULTICHIP;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007cae:	601a      	str	r2, [r3, #0]
        break;
 8007cb0:	e023      	b.n	8007cfa <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_XSPI_V2_0;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007cb8:	601a      	str	r2, [r3, #0]
        break;
 8007cba:	e01e      	b.n	8007cfa <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_OCTAL_DDR;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007cc2:	601a      	str	r2, [r3, #0]
        break;
 8007cc4:	e019      	b.n	8007cfa <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_MSPT;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007ccc:	601a      	str	r2, [r3, #0]
        break;
 8007cce:	e014      	b.n	8007cfa <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_X4QUAD_DS;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007cd6:	601a      	str	r2, [r3, #0]
        break;
 8007cd8:	e00f      	b.n	8007cfa <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_QUAD_DDR;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007ce0:	601a      	str	r2, [r3, #0]
        break;
 8007ce2:	e00a      	b.n	8007cfa <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_SECURE_PACKET_READ_WRITE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007cea:	601a      	str	r2, [r3, #0]
        break;
 8007cec:	e005      	b.n	8007cfa <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_RESERVED;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007cf4:	601a      	str	r2, [r3, #0]
        break;
 8007cf6:	e000      	b.n	8007cfa <sfdp_get_paraminfo+0x1da>
        break;
 8007cf8:	bf00      	nop
    {
      SFDP_DEBUG_STR("-> the table is not conform to JEDEC standard");
    }
  }
  
error:
 8007cfa:	bf00      	nop
  return retr;
 8007cfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3720      	adds	r7, #32
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop

08007d08 <sfpd_enter_octal_mode>:
 * @brief this function executes the octal DDR table to enter octal DDR mode
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfpd_enter_octal_mode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 8007d08:	b590      	push	{r4, r7, lr}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]
  uint8_t data[7];
  SFDP_DEBUG_STR(__func__);
  /* D1-D2 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D1.LenghtCommand)
 8007d14:	4b70      	ldr	r3, [pc, #448]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007d16:	78db      	ldrb	r3, [r3, #3]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d032      	beq.n	8007d82 <sfpd_enter_octal_mode+0x7a>
  {
     data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte1CommandSequence;
 8007d1c:	4b6e      	ldr	r3, [pc, #440]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007d1e:	789b      	ldrb	r3, [r3, #2]
 8007d20:	723b      	strb	r3, [r7, #8]
     data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte2CommandSequence;
 8007d22:	4b6d      	ldr	r3, [pc, #436]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007d24:	785b      	ldrb	r3, [r3, #1]
 8007d26:	727b      	strb	r3, [r7, #9]
     data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte3CommandSequence;
 8007d28:	4b6b      	ldr	r3, [pc, #428]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	72bb      	strb	r3, [r7, #10]
     data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte4CommandSequence;
 8007d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007d30:	79db      	ldrb	r3, [r3, #7]
 8007d32:	72fb      	strb	r3, [r7, #11]
     data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte5CommandSequence;
 8007d34:	4b68      	ldr	r3, [pc, #416]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007d36:	799b      	ldrb	r3, [r3, #6]
 8007d38:	733b      	strb	r3, [r7, #12]
     data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte6CommandSequence;
 8007d3a:	4b67      	ldr	r3, [pc, #412]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007d3c:	795b      	ldrb	r3, [r3, #5]
 8007d3e:	737b      	strb	r3, [r7, #13]
     data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte7CommandSequence;
 8007d40:	4b65      	ldr	r3, [pc, #404]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007d42:	791b      	ldrb	r3, [r3, #4]
 8007d44:	73bb      	strb	r3, [r7, #14]

     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f103 0008 	add.w	r0, r3, #8
 8007d4c:	7a39      	ldrb	r1, [r7, #8]
                                        (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D1.LenghtCommand - 1u)))
 8007d4e:	4b62      	ldr	r3, [pc, #392]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007d50:	78db      	ldrb	r3, [r3, #3]
     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8007d52:	3b01      	subs	r3, #1
 8007d54:	b29c      	uxth	r4, r3
 8007d56:	f107 0308 	add.w	r3, r7, #8
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	4623      	mov	r3, r4
 8007d5e:	f7fe fc05 	bl	800656c <SAL_XSPI_CommandSendData>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <sfpd_enter_octal_mode+0x66>
     {
       retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 8007d68:	230b      	movs	r3, #11
 8007d6a:	73fb      	strb	r3, [r7, #15]
       goto error;
 8007d6c:	e0af      	b.n	8007ece <sfpd_enter_octal_mode+0x1c6>
     }

    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 8007d6e:	2164      	movs	r1, #100	@ 0x64
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7ff fe75 	bl	8007a60 <driver_check_FlagBUSY>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d002      	beq.n	8007d82 <sfpd_enter_octal_mode+0x7a>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007d7c:	230c      	movs	r3, #12
 8007d7e:	73fb      	strb	r3, [r7, #15]
      goto error;
 8007d80:	e0a5      	b.n	8007ece <sfpd_enter_octal_mode+0x1c6>
    }
  }
  
  /* D3-D4 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D3.LenghtCommand)
 8007d82:	4b55      	ldr	r3, [pc, #340]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007d84:	7adb      	ldrb	r3, [r3, #11]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d032      	beq.n	8007df0 <sfpd_enter_octal_mode+0xe8>
  {
     data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte1CommandSequence;
 8007d8a:	4b53      	ldr	r3, [pc, #332]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007d8c:	7a9b      	ldrb	r3, [r3, #10]
 8007d8e:	723b      	strb	r3, [r7, #8]
     data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte2CommandSequence;
 8007d90:	4b51      	ldr	r3, [pc, #324]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007d92:	7a5b      	ldrb	r3, [r3, #9]
 8007d94:	727b      	strb	r3, [r7, #9]
     data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte3CommandSequence;
 8007d96:	4b50      	ldr	r3, [pc, #320]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007d98:	7a1b      	ldrb	r3, [r3, #8]
 8007d9a:	72bb      	strb	r3, [r7, #10]
     data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte4CommandSequence;
 8007d9c:	4b4e      	ldr	r3, [pc, #312]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007d9e:	7bdb      	ldrb	r3, [r3, #15]
 8007da0:	72fb      	strb	r3, [r7, #11]
     data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte5CommandSequence;
 8007da2:	4b4d      	ldr	r3, [pc, #308]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007da4:	7b9b      	ldrb	r3, [r3, #14]
 8007da6:	733b      	strb	r3, [r7, #12]
     data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte6CommandSequence;
 8007da8:	4b4b      	ldr	r3, [pc, #300]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007daa:	7b5b      	ldrb	r3, [r3, #13]
 8007dac:	737b      	strb	r3, [r7, #13]
     data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte7CommandSequence;
 8007dae:	4b4a      	ldr	r3, [pc, #296]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007db0:	7b1b      	ldrb	r3, [r3, #12]
 8007db2:	73bb      	strb	r3, [r7, #14]

     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f103 0008 	add.w	r0, r3, #8
 8007dba:	7a39      	ldrb	r1, [r7, #8]
                                            (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D3.LenghtCommand - 1u)))
 8007dbc:	4b46      	ldr	r3, [pc, #280]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007dbe:	7adb      	ldrb	r3, [r3, #11]
     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	b29c      	uxth	r4, r3
 8007dc4:	f107 0308 	add.w	r3, r7, #8
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	4623      	mov	r3, r4
 8007dcc:	f7fe fbce 	bl	800656c <SAL_XSPI_CommandSendData>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d002      	beq.n	8007ddc <sfpd_enter_octal_mode+0xd4>
     {
       retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 8007dd6:	230b      	movs	r3, #11
 8007dd8:	73fb      	strb	r3, [r7, #15]
       goto error;
 8007dda:	e078      	b.n	8007ece <sfpd_enter_octal_mode+0x1c6>
     }
     
    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 8007ddc:	2164      	movs	r1, #100	@ 0x64
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7ff fe3e 	bl	8007a60 <driver_check_FlagBUSY>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d002      	beq.n	8007df0 <sfpd_enter_octal_mode+0xe8>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007dea:	230c      	movs	r3, #12
 8007dec:	73fb      	strb	r3, [r7, #15]
      goto error;
 8007dee:	e06e      	b.n	8007ece <sfpd_enter_octal_mode+0x1c6>
    }
  }

  /* D5-D6 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D5.LenghtCommand)
 8007df0:	4b39      	ldr	r3, [pc, #228]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007df2:	7cdb      	ldrb	r3, [r3, #19]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d032      	beq.n	8007e5e <sfpd_enter_octal_mode+0x156>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte1CommandSequence;
 8007df8:	4b37      	ldr	r3, [pc, #220]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007dfa:	7c9b      	ldrb	r3, [r3, #18]
 8007dfc:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte2CommandSequence;
 8007dfe:	4b36      	ldr	r3, [pc, #216]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007e00:	7c5b      	ldrb	r3, [r3, #17]
 8007e02:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte3CommandSequence;
 8007e04:	4b34      	ldr	r3, [pc, #208]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007e06:	7c1b      	ldrb	r3, [r3, #16]
 8007e08:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte4CommandSequence;
 8007e0a:	4b33      	ldr	r3, [pc, #204]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007e0c:	7ddb      	ldrb	r3, [r3, #23]
 8007e0e:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte5CommandSequence;
 8007e10:	4b31      	ldr	r3, [pc, #196]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007e12:	7d9b      	ldrb	r3, [r3, #22]
 8007e14:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte6CommandSequence;
 8007e16:	4b30      	ldr	r3, [pc, #192]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007e18:	7d5b      	ldrb	r3, [r3, #21]
 8007e1a:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte7CommandSequence;
 8007e1c:	4b2e      	ldr	r3, [pc, #184]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007e1e:	7d1b      	ldrb	r3, [r3, #20]
 8007e20:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f103 0008 	add.w	r0, r3, #8
 8007e28:	7a39      	ldrb	r1, [r7, #8]
                                       (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D5.LenghtCommand - 1u)))
 8007e2a:	4b2b      	ldr	r3, [pc, #172]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007e2c:	7cdb      	ldrb	r3, [r3, #19]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	b29c      	uxth	r4, r3
 8007e32:	f107 0308 	add.w	r3, r7, #8
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	4623      	mov	r3, r4
 8007e3a:	f7fe fb97 	bl	800656c <SAL_XSPI_CommandSendData>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <sfpd_enter_octal_mode+0x142>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 8007e44:	230b      	movs	r3, #11
 8007e46:	73fb      	strb	r3, [r7, #15]
      goto error;
 8007e48:	e041      	b.n	8007ece <sfpd_enter_octal_mode+0x1c6>
    }

     /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 8007e4a:	2164      	movs	r1, #100	@ 0x64
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7ff fe07 	bl	8007a60 <driver_check_FlagBUSY>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d002      	beq.n	8007e5e <sfpd_enter_octal_mode+0x156>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007e58:	230c      	movs	r3, #12
 8007e5a:	73fb      	strb	r3, [r7, #15]
      goto error;
 8007e5c:	e037      	b.n	8007ece <sfpd_enter_octal_mode+0x1c6>
    }
  }

  /* D7-D8 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D7.LenghtCommand)
 8007e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007e60:	7edb      	ldrb	r3, [r3, #27]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d032      	beq.n	8007ecc <sfpd_enter_octal_mode+0x1c4>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte1CommandSequence;
 8007e66:	4b1c      	ldr	r3, [pc, #112]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007e68:	7e9b      	ldrb	r3, [r3, #26]
 8007e6a:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte2CommandSequence;
 8007e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007e6e:	7e5b      	ldrb	r3, [r3, #25]
 8007e70:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte3CommandSequence;
 8007e72:	4b19      	ldr	r3, [pc, #100]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007e74:	7e1b      	ldrb	r3, [r3, #24]
 8007e76:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte4CommandSequence;
 8007e78:	4b17      	ldr	r3, [pc, #92]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007e7a:	7fdb      	ldrb	r3, [r3, #31]
 8007e7c:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte5CommandSequence;
 8007e7e:	4b16      	ldr	r3, [pc, #88]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007e80:	7f9b      	ldrb	r3, [r3, #30]
 8007e82:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte6CommandSequence;
 8007e84:	4b14      	ldr	r3, [pc, #80]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007e86:	7f5b      	ldrb	r3, [r3, #29]
 8007e88:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte7CommandSequence;
 8007e8a:	4b13      	ldr	r3, [pc, #76]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007e8c:	7f1b      	ldrb	r3, [r3, #28]
 8007e8e:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f103 0008 	add.w	r0, r3, #8
 8007e96:	7a39      	ldrb	r1, [r7, #8]
                                       (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D7.LenghtCommand - 1u)))
 8007e98:	4b0f      	ldr	r3, [pc, #60]	@ (8007ed8 <sfpd_enter_octal_mode+0x1d0>)
 8007e9a:	7edb      	ldrb	r3, [r3, #27]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	b29c      	uxth	r4, r3
 8007ea0:	f107 0308 	add.w	r3, r7, #8
 8007ea4:	1c5a      	adds	r2, r3, #1
 8007ea6:	4623      	mov	r3, r4
 8007ea8:	f7fe fb60 	bl	800656c <SAL_XSPI_CommandSendData>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <sfpd_enter_octal_mode+0x1b0>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 8007eb2:	230b      	movs	r3, #11
 8007eb4:	73fb      	strb	r3, [r7, #15]
      goto error;
 8007eb6:	e00a      	b.n	8007ece <sfpd_enter_octal_mode+0x1c6>
    }

    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 8007eb8:	2164      	movs	r1, #100	@ 0x64
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7ff fdd0 	bl	8007a60 <driver_check_FlagBUSY>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <sfpd_enter_octal_mode+0x1c4>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007ec6:	230c      	movs	r3, #12
 8007ec8:	73fb      	strb	r3, [r7, #15]
      goto error;
 8007eca:	e000      	b.n	8007ece <sfpd_enter_octal_mode+0x1c6>
    }
  }

error:
 8007ecc:	bf00      	nop
  return retr;
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd90      	pop	{r4, r7, pc}
 8007ed8:	240002a0 	.word	0x240002a0

08007edc <sfpd_set_dummycycle>:
 * @brief this function writes the config register to set dummy cycle
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfpd_set_dummycycle(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t DummyValue)
{
 8007edc:	b5b0      	push	{r4, r5, r7, lr}
 8007ede:	b088      	sub	sp, #32
 8007ee0:	af02      	add	r7, sp, #8
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
const uint8_t MaskWaitStateValue[4] = { 0x3u, 0x7u, 0xFu, 0x1Fu };
 8007ee6:	4b6d      	ldr	r3, [pc, #436]	@ (800809c <sfpd_set_dummycycle+0x1c0>)
 8007ee8:	60fb      	str	r3, [r7, #12]
SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	75fb      	strb	r3, [r7, #23]
uint8_t localValue[2] = { 0 };
 8007eee:	2300      	movs	r3, #0
 8007ef0:	813b      	strh	r3, [r7, #8]
uint32_t Address;

  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
 8007ef2:	4b6b      	ldr	r3, [pc, #428]	@ (80080a0 <sfpd_set_dummycycle+0x1c4>)
 8007ef4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007ef8:	f003 0310 	and.w	r3, r3, #16
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10a      	bne.n	8007f18 <sfpd_set_dummycycle+0x3c>
    (JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable == 1u))
 8007f02:	4b67      	ldr	r3, [pc, #412]	@ (80080a0 <sfpd_set_dummycycle+0x1c4>)
 8007f04:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007f08:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007f0c:	b2db      	uxtb	r3, r3
  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <sfpd_set_dummycycle+0x3c>
  {
    /* Not yet supported */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007f12:	230c      	movs	r3, #12
 8007f14:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f16:	e0bb      	b.n	8008090 <sfpd_set_dummycycle+0x1b4>
  }
  
  /* Compute the Address */
  if (JEDEC_SCCR_Map.Param_DWORD.D9.LocalAddress == 1u)
 8007f18:	4b61      	ldr	r3, [pc, #388]	@ (80080a0 <sfpd_set_dummycycle+0x1c4>)
 8007f1a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007f1e:	f003 0308 	and.w	r3, r3, #8
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <sfpd_set_dummycycle+0x58>
  { 
    Address = JEDEC_SCCR_Map.Param_DWORD.D9.AdressRegisterOrModesSupported << 8;
 8007f28:	4b5d      	ldr	r3, [pc, #372]	@ (80080a0 <sfpd_set_dummycycle+0x1c4>)
 8007f2a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8007f2e:	021b      	lsls	r3, r3, #8
 8007f30:	613b      	str	r3, [r7, #16]
 8007f32:	e001      	b.n	8007f38 <sfpd_set_dummycycle+0x5c>
  }
  else
  {
    /* patch no really universal */
    Address = 1; 
 8007f34:	2301      	movs	r3, #1
 8007f36:	613b      	str	r3, [r7, #16]
  }
    
  /* Read the configuration */
  if (HAL_OK != SAL_XSPI_CommandSendReadAddress(&Object->sfpd_private.SALObject, 
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f103 0008 	add.w	r0, r3, #8
 8007f3e:	4b58      	ldr	r3, [pc, #352]	@ (80080a0 <sfpd_set_dummycycle+0x1c4>)
 8007f40:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
 8007f44:	f107 0308 	add.w	r3, r7, #8
 8007f48:	2202      	movs	r2, #2
 8007f4a:	9200      	str	r2, [sp, #0]
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	f7fe fbb5 	bl	80066bc <SAL_XSPI_CommandSendReadAddress>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <sfpd_set_dummycycle+0x82>
                   (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess, 
                   Address, 
                   (uint8_t *)localValue, 
                   2u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007f58:	230c      	movs	r3, #12
 8007f5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f5c:	e098      	b.n	8008090 <sfpd_set_dummycycle+0x1b4>
  }
      
  /* send command to write enable */
  if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f103 0008 	add.w	r0, r3, #8
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f7fe fafd 	bl	800656c <SAL_XSPI_CommandSendData>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <sfpd_set_dummycycle+0xa2>
                                     Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007f78:	230c      	movs	r3, #12
 8007f7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f7c:	e088      	b.n	8008090 <sfpd_set_dummycycle+0x1b4>
  }

  /* control the write enable */
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f103 0008 	add.w	r0, r3, #8
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                            Object->sfpd_private.DriverInfo.ReadWELCommand,
                                            Object->sfpd_private.DriverInfo.WELAddress,
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8007f90:	461d      	mov	r5, r3
                                            ((Object->sfpd_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfpd_private.DriverInfo.WELPosition,
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <sfpd_set_dummycycle+0xc4>
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e000      	b.n	8007fa2 <sfpd_set_dummycycle+0xc6>
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
 8007fa8:	4093      	lsls	r3, r2
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8007faa:	b2da      	uxtb	r2, r3
                                            1u << Object->sfpd_private.DriverInfo.WELPosition,
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8007fb2:	461c      	mov	r4, r3
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	40a3      	lsls	r3, r4
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8007fbe:	9401      	str	r4, [sp, #4]
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	462a      	mov	r2, r5
 8007fc6:	f7fe fbc6 	bl	8006756 <SAL_XSPI_CheckStatusRegister>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <sfpd_set_dummycycle+0xfa>
                                            1000))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007fd0:	230c      	movs	r3, #12
 8007fd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007fd4:	e05c      	b.n	8008090 <sfpd_set_dummycycle+0x1b4>
  }
    
  /* clear the value */
  localValue[0] = localValue[0] & ~(MaskWaitStateValue[JEDEC_SCCR_Map.Param_DWORD.D9.NumberBitsUsedToSetWaitStates] << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
 8007fd6:	7a3b      	ldrb	r3, [r7, #8]
 8007fd8:	b25a      	sxtb	r2, r3
 8007fda:	4b31      	ldr	r3, [pc, #196]	@ (80080a0 <sfpd_set_dummycycle+0x1c4>)
 8007fdc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007fe0:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	3318      	adds	r3, #24
 8007fe8:	443b      	add	r3, r7
 8007fea:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80080a0 <sfpd_set_dummycycle+0x1c4>)
 8007ff2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007ff6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8008000:	b25b      	sxtb	r3, r3
 8008002:	43db      	mvns	r3, r3
 8008004:	b25b      	sxtb	r3, r3
 8008006:	4013      	ands	r3, r2
 8008008:	b25b      	sxtb	r3, r3
 800800a:	b2db      	uxtb	r3, r3
 800800c:	723b      	strb	r3, [r7, #8]
                                    
  /* Apply the value with the mask */
  localValue[0] =  localValue[0] | (uint8_t)(DummyValue << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
 800800e:	7a3a      	ldrb	r2, [r7, #8]
 8008010:	4b23      	ldr	r3, [pc, #140]	@ (80080a0 <sfpd_set_dummycycle+0x1c4>)
 8008012:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008016:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800801a:	b2db      	uxtb	r3, r3
 800801c:	4619      	mov	r1, r3
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	408b      	lsls	r3, r1
 8008022:	b2db      	uxtb	r3, r3
 8008024:	4313      	orrs	r3, r2
 8008026:	b2db      	uxtb	r3, r3
 8008028:	723b      	strb	r3, [r7, #8]
  localValue[1] = localValue[0];
 800802a:	7a3b      	ldrb	r3, [r7, #8]
 800802c:	727b      	strb	r3, [r7, #9]
     
  /* Write de configuration */
  if (HAL_OK != SAL_XSPI_Write(&Object->sfpd_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandWriteAccess, Address, (uint8_t *)localValue, 2u))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f103 0008 	add.w	r0, r3, #8
 8008034:	4b1a      	ldr	r3, [pc, #104]	@ (80080a0 <sfpd_set_dummycycle+0x1c4>)
 8008036:	f893 1020 	ldrb.w	r1, [r3, #32]
 800803a:	f107 0308 	add.w	r3, r7, #8
 800803e:	2202      	movs	r2, #2
 8008040:	9200      	str	r2, [sp, #0]
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	f7fe fa49 	bl	80064da <SAL_XSPI_Write>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d002      	beq.n	8008054 <sfpd_set_dummycycle+0x178>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 800804e:	230c      	movs	r3, #12
 8008050:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008052:	e01d      	b.n	8008090 <sfpd_set_dummycycle+0x1b4>
  }

  /* wait for busy flag clear */
  if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 8008054:	2164      	movs	r1, #100	@ 0x64
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7ff fd02 	bl	8007a60 <driver_check_FlagBUSY>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <sfpd_set_dummycycle+0x18c>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008062:	230c      	movs	r3, #12
 8008064:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008066:	e013      	b.n	8008090 <sfpd_set_dummycycle+0x1b4>
  }

  /* Read the configuration, line can be removed it is only used for debug purpose */
  if (HAL_OK != SAL_XSPI_Read(&Object->sfpd_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess, Address, (uint8_t *)localValue, 2u))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f103 0008 	add.w	r0, r3, #8
 800806e:	4b0c      	ldr	r3, [pc, #48]	@ (80080a0 <sfpd_set_dummycycle+0x1c4>)
 8008070:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
 8008074:	f107 0308 	add.w	r3, r7, #8
 8008078:	2202      	movs	r2, #2
 800807a:	9200      	str	r2, [sp, #0]
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	f7fe f9c4 	bl	800640a <SAL_XSPI_Read>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <sfpd_set_dummycycle+0x1b2>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008088:	230c      	movs	r3, #12
 800808a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800808c:	e000      	b.n	8008090 <sfpd_set_dummycycle+0x1b4>
  }	
  
error :
 800808e:	bf00      	nop
  return retr;  
 8008090:	7dfb      	ldrb	r3, [r7, #23]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3718      	adds	r7, #24
 8008096:	46bd      	mov	sp, r7
 8008098:	bdb0      	pop	{r4, r5, r7, pc}
 800809a:	bf00      	nop
 800809c:	1f0f0703 	.word	0x1f0f0703
 80080a0:	24000230 	.word	0x24000230

080080a4 <JEDEC_Basic_ManageQuadEnableRequierement>:
          JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequierment parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_ManageQuadEnableRequierement(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 80080ac:	230f      	movs	r3, #15
 80080ae:	73fb      	strb	r3, [r7, #15]
  uint8_t localValue[2];  
  
  /* switch the mode in QSPI if available */
  switch (JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequierment & 0x7u)
 80080b0:	4b58      	ldr	r3, [pc, #352]	@ (8008214 <JEDEC_Basic_ManageQuadEnableRequierement+0x170>)
 80080b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080b6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b07      	cmp	r3, #7
 80080be:	f200 80a1 	bhi.w	8008204 <JEDEC_Basic_ManageQuadEnableRequierement+0x160>
 80080c2:	a201      	add	r2, pc, #4	@ (adr r2, 80080c8 <JEDEC_Basic_ManageQuadEnableRequierement+0x24>)
 80080c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c8:	08008205 	.word	0x08008205
 80080cc:	08008205 	.word	0x08008205
 80080d0:	080080e9 	.word	0x080080e9
 80080d4:	08008205 	.word	0x08008205
 80080d8:	08008169 	.word	0x08008169
 80080dc:	08008205 	.word	0x08008205
 80080e0:	08008205 	.word	0x08008205
 80080e4:	08008205 	.word	0x08008205
              */
    break;
  case 0x2u: {/* 010b: QE is bit 6 of status register 1. It is set via Write Status with one data byte where bit 6 is one. 
                 It is cleared via Write Status with one data byte where bit 6 is zero..*/
    /* 1 - set the write enable */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f103 0008 	add.w	r0, r3, #8
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 80080f4:	2300      	movs	r3, #0
 80080f6:	2200      	movs	r2, #0
 80080f8:	f7fe fa8c 	bl	8006614 <SAL_XSPI_SendReadCommand>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <JEDEC_Basic_ManageQuadEnableRequierement+0x64>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008102:	230c      	movs	r3, #12
 8008104:	73fb      	strb	r3, [r7, #15]
      goto error;
 8008106:	e080      	b.n	800820a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* 2 - read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5u, (uint8_t *)&localValue[0], 1u))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f103 0008 	add.w	r0, r3, #8
 800810e:	f107 020c 	add.w	r2, r7, #12
 8008112:	2301      	movs	r3, #1
 8008114:	2105      	movs	r1, #5
 8008116:	f7fe fa7d 	bl	8006614 <SAL_XSPI_SendReadCommand>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d002      	beq.n	8008126 <JEDEC_Basic_ManageQuadEnableRequierement+0x82>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008120:	230c      	movs	r3, #12
 8008122:	73fb      	strb	r3, [r7, #15]
      goto error;
 8008124:	e071      	b.n	800820a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* 3 - update the status register to enable QPI mode*/
    localValue[0] = localValue[0] | 0x40u;
 8008126:	7b3b      	ldrb	r3, [r7, #12]
 8008128:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800812c:	b2db      	uxtb	r3, r3
 800812e:	733b      	strb	r3, [r7, #12]
    
    /* 4 - write the status register with QPI mode to 1 */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 1u))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f103 0008 	add.w	r0, r3, #8
 8008136:	f107 020c 	add.w	r2, r7, #12
 800813a:	2301      	movs	r3, #1
 800813c:	2101      	movs	r1, #1
 800813e:	f7fe fa15 	bl	800656c <SAL_XSPI_CommandSendData>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <JEDEC_Basic_ManageQuadEnableRequierement+0xaa>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008148:	230c      	movs	r3, #12
 800814a:	73fb      	strb	r3, [r7, #15]
      goto error;
 800814c:	e05d      	b.n	800820a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
 800814e:	2164      	movs	r1, #100	@ 0x64
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7ff fc85 	bl	8007a60 <driver_check_FlagBUSY>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <JEDEC_Basic_ManageQuadEnableRequierement+0xbe>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 800815c:	230c      	movs	r3, #12
 800815e:	73fb      	strb	r3, [r7, #15]
      goto error;
 8008160:	e053      	b.n	800820a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    retr = EXTMEM_SFDP_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	73fb      	strb	r3, [r7, #15]
    break;
 8008166:	e050      	b.n	800820a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
  case 0x4u:{ /* 100b: QE is bit 1 of status register 2. It is set via Write Status with two data bytes where bit 1 of the second byte is one. 
                It is cleared via Write Status with two data bytes where bit 1 of the second byte is zero. 
                In contrast to the 001b code, writing one byte to the status register does not modify status register 2.*/
   
    /* read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f103 0008 	add.w	r0, r3, #8
 800816e:	f107 020c 	add.w	r2, r7, #12
 8008172:	2302      	movs	r3, #2
 8008174:	2105      	movs	r1, #5
 8008176:	f7fe fa4d 	bl	8006614 <SAL_XSPI_SendReadCommand>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <JEDEC_Basic_ManageQuadEnableRequierement+0xe2>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008180:	230c      	movs	r3, #12
 8008182:	73fb      	strb	r3, [r7, #15]
      goto error;
 8008184:	e041      	b.n	800820a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* update the status register */
    localValue[1] |= 2u;
 8008186:	7b7b      	ldrb	r3, [r7, #13]
 8008188:	f043 0302 	orr.w	r3, r3, #2
 800818c:	b2db      	uxtb	r3, r3
 800818e:	737b      	strb	r3, [r7, #13]
    
    /* WEL */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f103 0008 	add.w	r0, r3, #8
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 800819c:	2300      	movs	r3, #0
 800819e:	2200      	movs	r2, #0
 80081a0:	f7fe fa38 	bl	8006614 <SAL_XSPI_SendReadCommand>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <JEDEC_Basic_ManageQuadEnableRequierement+0x10c>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80081aa:	230c      	movs	r3, #12
 80081ac:	73fb      	strb	r3, [r7, #15]
      goto error;
 80081ae:	e02c      	b.n	800820a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* write the status register */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 2u))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f103 0008 	add.w	r0, r3, #8
 80081b6:	f107 020c 	add.w	r2, r7, #12
 80081ba:	2302      	movs	r3, #2
 80081bc:	2101      	movs	r1, #1
 80081be:	f7fe f9d5 	bl	800656c <SAL_XSPI_CommandSendData>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d002      	beq.n	80081ce <JEDEC_Basic_ManageQuadEnableRequierement+0x12a>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80081c8:	230c      	movs	r3, #12
 80081ca:	73fb      	strb	r3, [r7, #15]
      goto error;
 80081cc:	e01d      	b.n	800820a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
 80081ce:	2164      	movs	r1, #100	@ 0x64
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f7ff fc45 	bl	8007a60 <driver_check_FlagBUSY>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <JEDEC_Basic_ManageQuadEnableRequierement+0x13e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80081dc:	230c      	movs	r3, #12
 80081de:	73fb      	strb	r3, [r7, #15]
      goto error;
 80081e0:	e013      	b.n	800820a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* Optional : only for control read the status register and check write operation is OK */
    localValue[1] = 0xFF;
 80081e2:	23ff      	movs	r3, #255	@ 0xff
 80081e4:	737b      	strb	r3, [r7, #13]
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f103 0008 	add.w	r0, r3, #8
 80081ec:	f107 020c 	add.w	r2, r7, #12
 80081f0:	2302      	movs	r3, #2
 80081f2:	2105      	movs	r1, #5
 80081f4:	f7fe fa0e 	bl	8006614 <SAL_XSPI_SendReadCommand>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d004      	beq.n	8008208 <JEDEC_Basic_ManageQuadEnableRequierement+0x164>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80081fe:	230c      	movs	r3, #12
 8008200:	73fb      	strb	r3, [r7, #15]
      goto error;
 8008202:	e002      	b.n	800820a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
  case 0x6u: /* 110b: QE is bit 1 of the status register 2. Status register 1 is read using Read Status instruction 05h. Status register 2 is read using instruction 35h, and status register 3 is read using instruction 15h. QE is set via Write Status Register instruction 31h with one data byte where bit 1 is one. It is cleared via Write Status Register instruction 31h with one data byte where bit 1 is zero.*/
    break;
  case 0x7u: /*111b: Reserved */
    break;
  default :/* Added for Misra */
    break;
 8008204:	bf00      	nop
 8008206:	e000      	b.n	800820a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    break;
 8008208:	bf00      	nop
  }
error :  
  return retr;
 800820a:	7bfb      	ldrb	r3, [r7, #15]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	240001b0 	.word	0x240001b0

08008218 <JEDEC_Basic_Manage4S4S4SEnableSequence>:
          JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_Manage4S4S4SEnableSequence(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 8008220:	230f      	movs	r3, #15
 8008222:	73fb      	strb	r3, [r7, #15]
  uint8_t instruction = 0x00u;
 8008224:	2300      	movs	r3, #0
 8008226:	73bb      	strb	r3, [r7, #14]
    /* 4-4-4 mode enable sequences, This field describes the supported methods to enter 4-4-4 mode from 1-1-1 mode */
    /* x_xxx1b: set QE per QER description above, then issue instruction 38h */
    if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x1u) == 0x1u)
 8008228:	4b19      	ldr	r3, [pc, #100]	@ (8008290 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x78>)
 800822a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800822c:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8008230:	b2db      	uxtb	r3, r3
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	2b00      	cmp	r3, #0
 8008238:	d007      	beq.n	800824a <JEDEC_Basic_Manage4S4S4SEnableSequence+0x32>
    {
      retr = JEDEC_Basic_ManageQuadEnableRequierement(Object);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7ff ff32 	bl	80080a4 <JEDEC_Basic_ManageQuadEnableRequierement>
 8008240:	4603      	mov	r3, r0
 8008242:	73fb      	strb	r3, [r7, #15]
      instruction = 0x38u;
 8008244:	2338      	movs	r3, #56	@ 0x38
 8008246:	73bb      	strb	r3, [r7, #14]
 8008248:	e00c      	b.n	8008264 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x4c>
    }
    /* x_x1xxb: issue instruction 35h */
    else if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x4u) == 0x4u)
 800824a:	4b11      	ldr	r3, [pc, #68]	@ (8008290 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x78>)
 800824c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800824e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8008252:	b2db      	uxtb	r3, r3
 8008254:	f003 0304 	and.w	r3, r3, #4
 8008258:	2b00      	cmp	r3, #0
 800825a:	d003      	beq.n	8008264 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x4c>
    {
      retr = EXTMEM_SFDP_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	73fb      	strb	r3, [r7, #15]
      instruction = 0x35u;
 8008260:	2335      	movs	r3, #53	@ 0x35
 8008262:	73bb      	strb	r3, [r7, #14]
device uses a read-modify-write sequence of operations:
Read Volatile Enhanced Configuration Register using instruction 65h, no address is required, set bit 7 to 1.
Write Volatile Enhanced Configuration Register using instruction 61h, no address is required. This configuration is volatile.
NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 enable sequence is issued.
*/
    if ((retr == EXTMEM_SFDP_OK) && (instruction != 0u))
 8008264:	7bfb      	ldrb	r3, [r7, #15]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10c      	bne.n	8008284 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x6c>
 800826a:	7bbb      	ldrb	r3, [r7, #14]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d009      	beq.n	8008284 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x6c>
    {
        (void)SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, instruction, NULL, 0u);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f103 0008 	add.w	r0, r3, #8
 8008276:	7bb9      	ldrb	r1, [r7, #14]
 8008278:	2300      	movs	r3, #0
 800827a:	2200      	movs	r2, #0
 800827c:	f7fe f9ca 	bl	8006614 <SAL_XSPI_SendReadCommand>
        /* @note on memory W25Q64JV the command 38h does not exist so the control on command execution has been removed */
        retr = EXTMEM_SFDP_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	73fb      	strb	r3, [r7, #15]
    
    // x1xxb: device uses a read-modify-write sequence of operations: read configuration using instruction 65h followed by address 800003h, clear bit 6, write configuration using instruction 71h followed by address 800003h.. This configuration is volatile.
    // 1xxxb: issue the Soft Reset 66/99 sequence, see 6.4.19
    // NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 disable sequence is issued.
  
  return retr;
 8008284:	7bfb      	ldrb	r3, [r7, #15]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	240001b0 	.word	0x240001b0

08008294 <CheckSFDP_Signature>:
 * @param Object memory Object
 * @param Signature value of the SFDP signature
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef CheckSFDP_Signature(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t Signature )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 800829e:	2304      	movs	r3, #4
 80082a0:	73fb      	strb	r3, [r7, #15]
  
  /* check the magic number */
  switch(Signature)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	4a0e      	ldr	r2, [pc, #56]	@ (80082e0 <CheckSFDP_Signature+0x4c>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d006      	beq.n	80082b8 <CheckSFDP_Signature+0x24>
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	4a0d      	ldr	r2, [pc, #52]	@ (80082e4 <CheckSFDP_Signature+0x50>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d10e      	bne.n	80082d0 <CheckSFDP_Signature+0x3c>
  {
  case SFDP_SIGNATURE :
    SFDP_DEBUG_STR("signature of the header: OK");
    retr = EXTMEM_SFDP_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	73fb      	strb	r3, [r7, #15]
    break;
 80082b6:	e00e      	b.n	80082d6 <CheckSFDP_Signature+0x42>
  case 0x44505346U :
    SFDP_DEBUG_STR("signature of the header: KO inverted data order");
    /* Change the Mtype settings */
    if (HAL_OK == SAL_XSPI_UpdateMemoryType(&Object->sfpd_private.SALObject, SAL_XSPI_ORDERINVERTED))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3308      	adds	r3, #8
 80082bc:	2100      	movs	r1, #0
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fe fb3d 	bl	800693e <SAL_XSPI_UpdateMemoryType>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d104      	bne.n	80082d4 <CheckSFDP_Signature+0x40>
    {
      retr = EXTMEM_SFDP_ERROR_SIGNATUREMTYPE;
 80082ca:	2305      	movs	r3, #5
 80082cc:	73fb      	strb	r3, [r7, #15]
    }
    break;
 80082ce:	e001      	b.n	80082d4 <CheckSFDP_Signature+0x40>
  default :
    SFDP_DEBUG_STR("signature of the header: KO");
    break;
 80082d0:	bf00      	nop
 80082d2:	e000      	b.n	80082d6 <CheckSFDP_Signature+0x42>
    break;
 80082d4:	bf00      	nop
  }
  return retr;
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	44505346 	.word	0x44505346
 80082e4:	50444653 	.word	0x50444653

080082e8 <EXTMEM_DRIVER_NOR_SFDP_Init>:
/** @defgroup DRIVER_SFDP_Exported_Functions DRIVER SFDP Exported Functions
  * @{
  */

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Init(void *Peripheral, EXTMEM_LinkConfig_TypeDef Config, uint32_t ClockInput, EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08a      	sub	sp, #40	@ 0x28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	607a      	str	r2, [r7, #4]
 80082f2:	603b      	str	r3, [r7, #0]
 80082f4:	460b      	mov	r3, r1
 80082f6:	72fb      	strb	r3, [r7, #11]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  SFPD_HeaderTypeDef JEDEC_SFDP_Header;
  uint8_t FreqUpdate = 0u;
 80082fe:	2300      	movs	r3, #0
 8008300:	76fb      	strb	r3, [r7, #27]
  uint8_t DataID[6];
  uint32_t ClockOut;

  /* reset data of SFDPObject to zero */
  SFDP_DEBUG_STR("1 - reset data SFDPObject to zero")
  (void)memset((void *)&SFDPObject->sfpd_private, 0x0, sizeof(SFDPObject->sfpd_private));
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	3308      	adds	r3, #8
 8008306:	2298      	movs	r2, #152	@ 0x98
 8008308:	2100      	movs	r1, #0
 800830a:	4618      	mov	r0, r3
 800830c:	f000 f8ec 	bl	80084e8 <memset>

  /* initialize the SFDPObject */
  SFDP_DEBUG_STR("2 - initialize the SFDPObject")
  SFDPObject->sfpd_private.Config = Config;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	7afa      	ldrb	r2, [r7, #11]
 8008314:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  SFDPObject->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  SFDPObject->sfpd_private.DriverInfo.ClockIn = ClockInput;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	669a      	str	r2, [r3, #104]	@ 0x68
  SAL_XSPI_SET_SFDPDUMMYCYLE(SFDPObject->sfpd_private.SALObject, 8);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2208      	movs	r2, #8
 800832a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* set memory speed to 50Mhz maximum */
  SFDP_DEBUG_STR("3 - set memory link and speed to 50Mhz maximum")
  (void)SAL_XSPI_Init(&SFDPObject->sfpd_private.SALObject, Peripheral);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	3308      	adds	r3, #8
 8008332:	68f9      	ldr	r1, [r7, #12]
 8008334:	4618      	mov	r0, r3
 8008336:	f7fd fe34 	bl	8005fa2 <SAL_XSPI_Init>
  (void)SAL_XSPI_SetClock(&SFDPObject->sfpd_private.SALObject, ClockInput, DRIVER_SFDP_DEFAULT_CLOCK, &ClockOut);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	f103 0008 	add.w	r0, r3, #8
 8008340:	f107 0310 	add.w	r3, r7, #16
 8008344:	4a44      	ldr	r2, [pc, #272]	@ (8008458 <EXTMEM_DRIVER_NOR_SFDP_Init+0x170>)
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	f7fd fdec 	bl	8005f24 <SAL_XSPI_SetClock>

  /* Abort any ongoing XSPI action */
  (void)SAL_XSPI_DisableMapMode(&SFDPObject->sfpd_private.SALObject);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	3308      	adds	r3, #8
 8008350:	4618      	mov	r0, r3
 8008352:	f7fe fae3 	bl	800691c <SAL_XSPI_DisableMapMode>

  /* analyse the SFPD structure to get driver information */
  SFDP_DEBUG_STR("4 - analyse the SFPD structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
 8008356:	f107 031c 	add.w	r3, r7, #28
 800835a:	4619      	mov	r1, r3
 800835c:	6838      	ldr	r0, [r7, #0]
 800835e:	f7fe fbb3 	bl	8006ac8 <SFDP_GetHeader>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <EXTMEM_DRIVER_NOR_SFDP_Init+0x88>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only performed in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
 8008368:	23ff      	movs	r3, #255	@ 0xff
 800836a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 800836e:	e06c      	b.n	800844a <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* Reset the memory */
  SFDP_DEBUG_STR("5 - reset the memory")
  if(EXTMEM_SFDP_OK != SFDP_MemoryReset(SFDPObject))
 8008370:	6838      	ldr	r0, [r7, #0]
 8008372:	f7fe fce3 	bl	8006d3c <SFDP_MemoryReset>
     */
    SFDP_DEBUG_STR("ERROR::on the call of SFDP_MemoryReset but no error returned")
  }

  /* wait few ms after the reset operation, this is done to avoid issue on SFDP read */
  HAL_Delay(10);
 8008376:	200a      	movs	r0, #10
 8008378:	f7f8 fb38 	bl	80009ec <HAL_Delay>

  /* analyse the SFPD structure to get driver information after the reset */
  SFDP_DEBUG_STR("6 - analyse the SFPD structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
 800837c:	f107 031c 	add.w	r3, r7, #28
 8008380:	4619      	mov	r1, r3
 8008382:	6838      	ldr	r0, [r7, #0]
 8008384:	f7fe fba0 	bl	8006ac8 <SFDP_GetHeader>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <EXTMEM_DRIVER_NOR_SFDP_Init+0xae>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only perform in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
 800838e:	23ff      	movs	r3, #255	@ 0xff
 8008390:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 8008394:	e059      	b.n	800844a <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* Save information from the SFDP table */
  SFDPObject->sfpd_private.Sfdp_param_number = JEDEC_SFDP_Header.param_number;
 8008396:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
  SFDPObject->sfpd_private.Sfdp_AccessProtocol = JEDEC_SFDP_Header.AccessProtocol;
 80083a0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d

  /* read the flash ID */
  SFDP_DEBUG_STR("7 - read the flash ID")
  (void)SAL_XSPI_GetId(&SFDPObject->sfpd_private.SALObject, DataID, 4);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	3308      	adds	r3, #8
 80083ae:	f107 0114 	add.w	r1, r7, #20
 80083b2:	2204      	movs	r2, #4
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fd ffd5 	bl	8006364 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

  /* keep manufacturer information, it could be used to help in
     building of consistent driver */
  SFDPObject->sfpd_private.ManuID = DataID[0];
 80083ba:	7d3a      	ldrb	r2, [r7, #20]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* get the SFDP data */
  SFDP_DEBUG_STR("8 - collect the SFDP data")
  if(EXTMEM_SFDP_OK != SFDP_CollectData(SFDPObject))
 80083c2:	6838      	ldr	r0, [r7, #0]
 80083c4:	f7fe fbde 	bl	8006b84 <SFDP_CollectData>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <EXTMEM_DRIVER_NOR_SFDP_Init+0xee>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
 80083ce:	23ff      	movs	r3, #255	@ 0xff
 80083d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 80083d4:	e039      	b.n	800844a <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* setup the generic driver information and prepare the physical layer */
  SFDP_DEBUG_STR("9 - build the generic driver information and prepare the physical layer")
  if(EXTMEM_SFDP_OK !=  SFDP_BuildGenericDriver(SFDPObject, &FreqUpdate))
 80083d6:	f107 031b 	add.w	r3, r7, #27
 80083da:	4619      	mov	r1, r3
 80083dc:	6838      	ldr	r0, [r7, #0]
 80083de:	f7fe fd89 	bl	8006ef4 <SFDP_BuildGenericDriver>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d003      	beq.n	80083f0 <EXTMEM_DRIVER_NOR_SFDP_Init+0x108>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD;
 80083e8:	23fd      	movs	r3, #253	@ 0xfd
 80083ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 80083ee:	e02c      	b.n	800844a <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  SFDP_DEBUG_STR("10 - adjust the frequency if required")
  if ((FreqUpdate == 0u) && (SFDPObject->sfdp_public.MaxFreq != 0u))
 80083f0:	7efb      	ldrb	r3, [r7, #27]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10d      	bne.n	8008412 <EXTMEM_DRIVER_NOR_SFDP_Init+0x12a>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d009      	beq.n	8008412 <EXTMEM_DRIVER_NOR_SFDP_Init+0x12a>
  {
    (void)SAL_XSPI_SetClock(&SFDPObject->sfpd_private.SALObject, ClockInput, SFDPObject->sfdp_public.MaxFreq, &ClockOut);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	f103 0008 	add.w	r0, r3, #8
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	f107 0310 	add.w	r3, r7, #16
 800840c:	6879      	ldr	r1, [r7, #4]
 800840e:	f7fd fd89 	bl	8005f24 <SAL_XSPI_SetClock>
    SFDP_DEBUG_STR("--> new freq configured");
  }

  SFDP_DEBUG_STR("11 - read again the SFDP header to adjust memory type if necessary")
  if(EXTMEM_SFDP_OK != SFDP_ReadHeader(SFDPObject, &JEDEC_SFDP_Header))
 8008412:	f107 031c 	add.w	r3, r7, #28
 8008416:	4619      	mov	r1, r3
 8008418:	6838      	ldr	r0, [r7, #0]
 800841a:	f7fe fb17 	bl	8006a4c <SFDP_ReadHeader>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d003      	beq.n	800842c <EXTMEM_DRIVER_NOR_SFDP_Init+0x144>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_MEMTYPE_CHECK")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MEMTYPE_CHECK;
 8008424:	23f2      	movs	r3, #242	@ 0xf2
 8008426:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 800842a:	e00e      	b.n	800844a <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  (void)memset(DataID, 0xAA, sizeof(DataID));
 800842c:	f107 0314 	add.w	r3, r7, #20
 8008430:	2206      	movs	r2, #6
 8008432:	21aa      	movs	r1, #170	@ 0xaa
 8008434:	4618      	mov	r0, r3
 8008436:	f000 f857 	bl	80084e8 <memset>
  (void)SAL_XSPI_GetId(&SFDPObject->sfpd_private.SALObject, DataID, 4);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	3308      	adds	r3, #8
 800843e:	f107 0114 	add.w	r1, r7, #20
 8008442:	2204      	movs	r2, #4
 8008444:	4618      	mov	r0, r3
 8008446:	f7fd ff8d 	bl	8006364 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

error:
  return retr;
 800844a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800844e:	4618      	mov	r0, r3
 8008450:	3728      	adds	r7, #40	@ 0x28
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	02faf080 	.word	0x02faf080

0800845c <EXTMEM_DRIVER_NOR_SFDP_DeInit>:

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_DeInit(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  SFDPObject->sfpd_private.FlashSize = 0;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  return EXTMEM_DRIVER_NOR_SFDP_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>:
error:
  return retr;
}

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 800847a:	b590      	push	{r4, r7, lr}
 800847c:	b087      	sub	sp, #28
 800847e:	af02      	add	r7, sp, #8
 8008480:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	73fb      	strb	r3, [r7, #15]

  /* enter the mapped mode */
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction,
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f103 0008 	add.w	r0, r3, #8
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 1076 	ldrb.w	r1, [r3, #118]	@ 0x76
                                        (uint8_t)SFDPObject->sfpd_private.SALObject.Commandbase.DummyCycles,
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction,
 8008496:	b2da      	uxtb	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800849e:	2400      	movs	r4, #0
 80084a0:	9400      	str	r4, [sp, #0]
 80084a2:	f7fe f9c4 	bl	800682e <SAL_XSPI_EnableMapMode>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode+0x36>
                                        SFDPObject->sfpd_private.DriverInfo.PageProgramInstruction, 0))
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
 80084ac:	23f3      	movs	r3, #243	@ 0xf3
 80084ae:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
 80084b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd90      	pop	{r4, r7, pc}

080084bc <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>:

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73fb      	strb	r3, [r7, #15]

  /* exit the mapped mode */
  if (HAL_OK != SAL_XSPI_DisableMapMode(&SFDPObject->sfpd_private.SALObject))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3308      	adds	r3, #8
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7fe fa25 	bl	800691c <SAL_XSPI_DisableMapMode>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode+0x20>
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
 80084d8:	23f3      	movs	r3, #243	@ 0xf3
 80084da:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
 80084dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <memset>:
 80084e8:	4402      	add	r2, r0
 80084ea:	4603      	mov	r3, r0
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d100      	bne.n	80084f2 <memset+0xa>
 80084f0:	4770      	bx	lr
 80084f2:	f803 1b01 	strb.w	r1, [r3], #1
 80084f6:	e7f9      	b.n	80084ec <memset+0x4>

080084f8 <__libc_init_array>:
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	4d0d      	ldr	r5, [pc, #52]	@ (8008530 <__libc_init_array+0x38>)
 80084fc:	4c0d      	ldr	r4, [pc, #52]	@ (8008534 <__libc_init_array+0x3c>)
 80084fe:	1b64      	subs	r4, r4, r5
 8008500:	10a4      	asrs	r4, r4, #2
 8008502:	2600      	movs	r6, #0
 8008504:	42a6      	cmp	r6, r4
 8008506:	d109      	bne.n	800851c <__libc_init_array+0x24>
 8008508:	4d0b      	ldr	r5, [pc, #44]	@ (8008538 <__libc_init_array+0x40>)
 800850a:	4c0c      	ldr	r4, [pc, #48]	@ (800853c <__libc_init_array+0x44>)
 800850c:	f000 f826 	bl	800855c <_init>
 8008510:	1b64      	subs	r4, r4, r5
 8008512:	10a4      	asrs	r4, r4, #2
 8008514:	2600      	movs	r6, #0
 8008516:	42a6      	cmp	r6, r4
 8008518:	d105      	bne.n	8008526 <__libc_init_array+0x2e>
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008520:	4798      	blx	r3
 8008522:	3601      	adds	r6, #1
 8008524:	e7ee      	b.n	8008504 <__libc_init_array+0xc>
 8008526:	f855 3b04 	ldr.w	r3, [r5], #4
 800852a:	4798      	blx	r3
 800852c:	3601      	adds	r6, #1
 800852e:	e7f2      	b.n	8008516 <__libc_init_array+0x1e>
 8008530:	080085c0 	.word	0x080085c0
 8008534:	080085c0 	.word	0x080085c0
 8008538:	080085c0 	.word	0x080085c0
 800853c:	080085c4 	.word	0x080085c4

08008540 <memcpy>:
 8008540:	440a      	add	r2, r1
 8008542:	4291      	cmp	r1, r2
 8008544:	f100 33ff 	add.w	r3, r0, #4294967295
 8008548:	d100      	bne.n	800854c <memcpy+0xc>
 800854a:	4770      	bx	lr
 800854c:	b510      	push	{r4, lr}
 800854e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008556:	4291      	cmp	r1, r2
 8008558:	d1f9      	bne.n	800854e <memcpy+0xe>
 800855a:	bd10      	pop	{r4, pc}

0800855c <_init>:
 800855c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855e:	bf00      	nop
 8008560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008562:	bc08      	pop	{r3}
 8008564:	469e      	mov	lr, r3
 8008566:	4770      	bx	lr

08008568 <_fini>:
 8008568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856a:	bf00      	nop
 800856c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856e:	bc08      	pop	{r3}
 8008570:	469e      	mov	lr, r3
 8008572:	4770      	bx	lr


Simple_FreeRTOS_Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002b0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082f4  080002b0  080002b0  000012b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080085a4  080085a4  000095a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085f0  080085f0  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000000  080085f0  080085f0  0000a00c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085f0  080085f0  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085f0  080085f0  000095f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085f4  080085f4  000095f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  24000000  080085f8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2400000c  08008604  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  20000000  0000b000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d4d  00000000  00000000  0000a03a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf6  00000000  00000000  0001ed87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00021980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a32  00000000  00000000  00022728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000315bb  00000000  00000000  0002315a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f56  00000000  00000000  00054715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013475e  00000000  00000000  0006966b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019ddc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003644  00000000  00000000  0019de0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001a1450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400000c 	.word	0x2400000c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800858c 	.word	0x0800858c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000010 	.word	0x24000010
 80002ec:	0800858c 	.word	0x0800858c

080002f0 <MX_EXTMEM_MANAGER_Init>:
/**
  * Init External memory manager
  * @retval None
  */
void MX_EXTMEM_MANAGER_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MX_EXTMEM_Init_PreTreatment */

  /* USER CODE END MX_EXTMEM_Init_PreTreatment */
  HAL_RCCEx_EnableClockProtection(RCC_CLOCKPROTECT_XSPI);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f004 fcdb 	bl	8004cb0 <HAL_RCCEx_EnableClockProtection>

  /* Initialization of the memory parameters */
  memset(extmem_list_config, 0x0, sizeof(extmem_list_config));
 80002fa:	22ac      	movs	r2, #172	@ 0xac
 80002fc:	2100      	movs	r1, #0
 80002fe:	480b      	ldr	r0, [pc, #44]	@ (800032c <MX_EXTMEM_MANAGER_Init+0x3c>)
 8000300:	f008 f90a 	bl	8008518 <memset>

  /* EXTMEMORY_1 */
  extmem_list_config[0].MemType = EXTMEM_NOR_SFDP;
 8000304:	4b09      	ldr	r3, [pc, #36]	@ (800032c <MX_EXTMEM_MANAGER_Init+0x3c>)
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
  extmem_list_config[0].Handle = (void*)&hxspi2;
 800030a:	4b08      	ldr	r3, [pc, #32]	@ (800032c <MX_EXTMEM_MANAGER_Init+0x3c>)
 800030c:	4a08      	ldr	r2, [pc, #32]	@ (8000330 <MX_EXTMEM_MANAGER_Init+0x40>)
 800030e:	605a      	str	r2, [r3, #4]
  extmem_list_config[0].ConfigType = EXTMEM_LINK_CONFIG_8LINES;
 8000310:	4b06      	ldr	r3, [pc, #24]	@ (800032c <MX_EXTMEM_MANAGER_Init+0x3c>)
 8000312:	2203      	movs	r2, #3
 8000314:	721a      	strb	r2, [r3, #8]

  EXTMEM_Init(EXTMEMORY_1, HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_XSPI2));
 8000316:	2004      	movs	r0, #4
 8000318:	f003 f98a 	bl	8003630 <HAL_RCCEx_GetPeriphCLKFreq>
 800031c:	4603      	mov	r3, r0
 800031e:	4619      	mov	r1, r3
 8000320:	2000      	movs	r0, #0
 8000322:	f005 fd0d 	bl	8005d40 <EXTMEM_Init>

  /* USER CODE BEGIN MX_EXTMEM_Init_PostTreatment */

  /* USER CODE END MX_EXTMEM_Init_PostTreatment */
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	2400008c 	.word	0x2400008c
 8000330:	24000028 	.word	0x24000028

08000334 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPION_CLK_ENABLE();
 800033a:	4b09      	ldr	r3, [pc, #36]	@ (8000360 <MX_GPIO_Init+0x2c>)
 800033c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000340:	4a07      	ldr	r2, [pc, #28]	@ (8000360 <MX_GPIO_Init+0x2c>)
 8000342:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000346:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800034a:	4b05      	ldr	r3, [pc, #20]	@ (8000360 <MX_GPIO_Init+0x2c>)
 800034c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	687b      	ldr	r3, [r7, #4]

}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	58024400 	.word	0x58024400

08000364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800036a:	f000 f911 	bl	8000590 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800036e:	4b3c      	ldr	r3, [pc, #240]	@ (8000460 <main+0xfc>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000376:	2b00      	cmp	r3, #0
 8000378:	d11b      	bne.n	80003b2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800037a:	f3bf 8f4f 	dsb	sy
}
 800037e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000380:	f3bf 8f6f 	isb	sy
}
 8000384:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000386:	4b36      	ldr	r3, [pc, #216]	@ (8000460 <main+0xfc>)
 8000388:	2200      	movs	r2, #0
 800038a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800038e:	f3bf 8f4f 	dsb	sy
}
 8000392:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000394:	f3bf 8f6f 	isb	sy
}
 8000398:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800039a:	4b31      	ldr	r3, [pc, #196]	@ (8000460 <main+0xfc>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a30      	ldr	r2, [pc, #192]	@ (8000460 <main+0xfc>)
 80003a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003a4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003a6:	f3bf 8f4f 	dsb	sy
}
 80003aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003ac:	f3bf 8f6f 	isb	sy
}
 80003b0:	e000      	b.n	80003b4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003b2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000460 <main+0xfc>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d138      	bne.n	8000432 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003c0:	4b27      	ldr	r3, [pc, #156]	@ (8000460 <main+0xfc>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003c8:	f3bf 8f4f 	dsb	sy
}
 80003cc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003ce:	4b24      	ldr	r3, [pc, #144]	@ (8000460 <main+0xfc>)
 80003d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80003d4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	0b5b      	lsrs	r3, r3, #13
 80003da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003de:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	08db      	lsrs	r3, r3, #3
 80003e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80003e8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	015a      	lsls	r2, r3, #5
 80003ee:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80003f2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003f8:	4919      	ldr	r1, [pc, #100]	@ (8000460 <main+0xfc>)
 80003fa:	4313      	orrs	r3, r2
 80003fc:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	1e5a      	subs	r2, r3, #1
 8000404:	607a      	str	r2, [r7, #4]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d1ef      	bne.n	80003ea <main+0x86>
    } while(sets-- != 0U);
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	1e5a      	subs	r2, r3, #1
 800040e:	60ba      	str	r2, [r7, #8]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d1e5      	bne.n	80003e0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000414:	f3bf 8f4f 	dsb	sy
}
 8000418:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800041a:	4b11      	ldr	r3, [pc, #68]	@ (8000460 <main+0xfc>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a10      	ldr	r2, [pc, #64]	@ (8000460 <main+0xfc>)
 8000420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000424:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000426:	f3bf 8f4f 	dsb	sy
}
 800042a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800042c:	f3bf 8f6f 	isb	sy
}
 8000430:	e000      	b.n	8000434 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000432:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000434:	f000 fa7d 	bl	8000932 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000438:	f000 f814 	bl	8000464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800043c:	f7ff ff7a 	bl	8000334 <MX_GPIO_Init>
  MX_SBS_Init();
 8000440:	f000 f8f1 	bl	8000626 <MX_SBS_Init>
  MX_XSPI2_Init();
 8000444:	f000 f984 	bl	8000750 <MX_XSPI2_Init>
  MX_EXTMEM_MANAGER_Init();
 8000448:	f7ff ff52 	bl	80002f0 <MX_EXTMEM_MANAGER_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Launch the application */
  if (BOOT_OK != BOOT_Application())
 800044c:	f005 fbb0 	bl	8005bb0 <BOOT_Application>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d002      	beq.n	800045c <main+0xf8>
  {
    Error_Handler();
 8000456:	f000 f8e0 	bl	800061a <Error_Handler>
  }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800045a:	bf00      	nop
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <main+0xf8>
 8000460:	e000ed00 	.word	0xe000ed00

08000464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b0b0      	sub	sp, #192	@ 0xc0
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800046e:	229c      	movs	r2, #156	@ 0x9c
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f008 f850 	bl	8008518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2220      	movs	r2, #32
 800047c:	2100      	movs	r1, #0
 800047e:	4618      	mov	r0, r3
 8000480:	f008 f84a 	bl	8008518 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000484:	2000      	movs	r0, #0
 8000486:	f000 ff1d 	bl	80012c4 <HAL_PWREx_ControlVoltageScaling>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0x30>
  {
    Error_Handler();
 8000490:	f000 f8c3 	bl	800061a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000494:	2302      	movs	r3, #2
 8000496:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000498:	2301      	movs	r3, #1
 800049a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a0:	2340      	movs	r3, #64	@ 0x40
 80004a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
 80004a4:	2302      	movs	r3, #2
 80004a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
 80004a8:	2300      	movs	r3, #0
 80004aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL1.PLLM = 4;
 80004ac:	2304      	movs	r3, #4
 80004ae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL1.PLLN = 25;
 80004b0:	2319      	movs	r3, #25
 80004b2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLP = 1;
 80004b4:	2301      	movs	r3, #1
 80004b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL1.PLLQ = 2;
 80004b8:	2302      	movs	r3, #2
 80004ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL1.PLLR = 2;
 80004bc:	2302      	movs	r3, #2
 80004be:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL1.PLLS = 2;
 80004c0:	2302      	movs	r3, #2
 80004c2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL1.PLLT = 2;
 80004c4:	2302      	movs	r3, #2
 80004c6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
 80004cc:	2302      	movs	r3, #2
 80004ce:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
 80004d0:	2300      	movs	r3, #0
 80004d2:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLM = 4;
 80004d4:	2304      	movs	r3, #4
 80004d6:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL2.PLLN = 25;
 80004d8:	2319      	movs	r3, #25
 80004da:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL2.PLLP = 2;
 80004dc:	2302      	movs	r3, #2
 80004de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLQ = 2;
 80004e2:	2302      	movs	r3, #2
 80004e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL2.PLLR = 2;
 80004e8:	2302      	movs	r3, #2
 80004ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL2.PLLS = 1;
 80004ee:	2301      	movs	r3, #1
 80004f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL2.PLLT = 2;
 80004f4:	2302      	movs	r3, #2
 80004f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
 8000500:	2302      	movs	r3, #2
 8000502:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLLSOURCE_HSI;
 8000506:	2300      	movs	r3, #0
 8000508:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLM = 4;
 800050c:	2304      	movs	r3, #4
 800050e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL3.PLLN = 25;
 8000512:	2319      	movs	r3, #25
 8000514:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLP = 2;
 8000518:	2302      	movs	r3, #2
 800051a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  RCC_OscInitStruct.PLL3.PLLQ = 2;
 800051e:	2302      	movs	r3, #2
 8000520:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLR = 2;
 8000524:	2302      	movs	r3, #2
 8000526:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RCC_OscInitStruct.PLL3.PLLS = 8;
 800052a:	2308      	movs	r3, #8
 800052c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  RCC_OscInitStruct.PLL3.PLLT = 2;
 8000530:	2302      	movs	r3, #2
 8000532:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  RCC_OscInitStruct.PLL3.PLLFractional = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000540:	4618      	mov	r0, r3
 8000542:	f000 fef7 	bl	8001334 <HAL_RCC_OscConfig>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0xec>
  {
    Error_Handler();
 800054c:	f000 f865 	bl	800061a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000550:	233f      	movs	r3, #63	@ 0x3f
 8000552:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK4|RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000554:	2303      	movs	r3, #3
 8000556:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800055c:	2308      	movs	r3, #8
 800055e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000560:	2304      	movs	r3, #4
 8000562:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000564:	2340      	movs	r3, #64	@ 0x40
 8000566:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000568:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800056c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV2;
 800056e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000572:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2125      	movs	r1, #37	@ 0x25
 8000578:	4618      	mov	r0, r3
 800057a:	f001 fa15 	bl	80019a8 <HAL_RCC_ClockConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x124>
  {
    Error_Handler();
 8000584:	f000 f849 	bl	800061a <Error_Handler>
  }
}
 8000588:	bf00      	nop
 800058a:	37c0      	adds	r7, #192	@ 0xc0
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

static void MPU_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000596:	463b      	mov	r3, r7
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80005a2:	f000 fc07 	bl	8000db4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005a6:	2301      	movs	r3, #1
 80005a8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80005b2:	231f      	movs	r3, #31
 80005b4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80005b6:	2387      	movs	r3, #135	@ 0x87
 80005b8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80005be:	2300      	movs	r3, #0
 80005c0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80005c2:	2301      	movs	r3, #1
 80005c4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80005ca:	2300      	movs	r3, #0
 80005cc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80005ce:	2300      	movs	r3, #0
 80005d0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005d2:	463b      	mov	r3, r7
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fc0b 	bl	8000df0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80005da:	2301      	movs	r3, #1
 80005dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x70000000;
 80005de:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80005e2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80005e4:	231a      	movs	r3, #26
 80005e6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80005f0:	2303      	movs	r3, #3
 80005f2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000600:	2301      	movs	r3, #1
 8000602:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000604:	463b      	mov	r3, r7
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fbf2 	bl	8000df0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800060c:	2004      	movs	r0, #4
 800060e:	f000 fbaf 	bl	8000d70 <HAL_MPU_Enable>

}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061e:	b672      	cpsid	i
}
 8000620:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000622:	bf00      	nop
 8000624:	e7fd      	b.n	8000622 <Error_Handler+0x8>

08000626 <MX_SBS_Init>:

/* USER CODE END 0 */

/* SBS init function */
void MX_SBS_Init(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE END SBS_Init 1 */
  /* USER CODE BEGIN SBS_Init 2 */

  /* USER CODE END SBS_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b0a8      	sub	sp, #160	@ 0xa0
 8000638:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	229c      	movs	r2, #156	@ 0x9c
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f007 ff69 	bl	8008518 <memset>

  /* Configure the system Power Supply */

  if (HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY) != HAL_OK)
 8000646:	2002      	movs	r0, #2
 8000648:	f000 fdea 	bl	8001220 <HAL_PWREx_ConfigSupply>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <HAL_MspInit+0x22>
  {
    /* Initialization error */
    Error_Handler();
 8000652:	f7ff ffe2 	bl	800061a <Error_Handler>

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SBS_CLK_ENABLE();
 8000656:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <HAL_MspInit+0x8c>)
 8000658:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800065c:	4a18      	ldr	r2, [pc, #96]	@ (80006c0 <HAL_MspInit+0x8c>)
 800065e:	f043 0302 	orr.w	r3, r3, #2
 8000662:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000666:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <HAL_MspInit+0x8c>)
 8000668:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Enable the XSPIM_P2 interface */
  HAL_PWREx_EnableXSPIM2();
 8000670:	f000 fe50 	bl	8001314 <HAL_PWREx_EnableXSPIM2>

  /* The CSI is used by the compensation cells and must be enabled before enabling the
     compensation cells.
     For more details refer to RM0477 [SBS I/O compensation cell management] chapter.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000674:	2310      	movs	r3, #16
 8000676:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fe58 	bl	8001334 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <HAL_MspInit+0x5a>
  {
    Error_Handler();
 800068a:	f7ff ffc6 	bl	800061a <Error_Handler>
  }

  /* Configure the compensation cell */
  HAL_SBS_ConfigCompensationCell(SBS_IO_XSPI2_CELL, SBS_IO_CELL_CODE, 0U, 0U);
 800068e:	2300      	movs	r3, #0
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	2010      	movs	r0, #16
 8000696:	f000 fa1f 	bl	8000ad8 <HAL_SBS_ConfigCompensationCell>

  /* Enable compensation cell */
  HAL_SBS_EnableCompensationCell(SBS_IO_XSPI2_CELL);
 800069a:	2010      	movs	r0, #16
 800069c:	f000 f9f2 	bl	8000a84 <HAL_SBS_EnableCompensationCell>

  /* wait ready before enabled IO */
  while(HAL_SBS_GetCompensationCellReadyStatus(SBS_IO_XSPI2_CELL_READY) != 1U);
 80006a0:	bf00      	nop
 80006a2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80006a6:	f000 fa01 	bl	8000aac <HAL_SBS_GetCompensationCellReadyStatus>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d1f8      	bne.n	80006a2 <HAL_MspInit+0x6e>

  /* high speed low voltage config */
  HAL_SBS_EnableIOSpeedOptimize(SBS_IO_XSPI2_HSLV);
 80006b0:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80006b4:	f000 fa64 	bl	8000b80 <HAL_SBS_EnableIOSpeedOptimize>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b8:	bf00      	nop
 80006ba:	37a0      	adds	r7, #160	@ 0xa0
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	58024400 	.word	0x58024400

080006c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <NMI_Handler+0x4>

080006cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <HardFault_Handler+0x4>

080006d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <MemManage_Handler+0x4>

080006dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071a:	f000 f95f 	bl	80009dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = INTVECT_START;
 8000728:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <SystemInit+0x24>)
 800072a:	4a08      	ldr	r2, [pc, #32]	@ (800074c <SystemInit+0x28>)
 800072c:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800072e:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <SystemInit+0x24>)
 8000730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000734:	4a04      	ldr	r2, [pc, #16]	@ (8000748 <SystemInit+0x24>)
 8000736:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800073a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000ed00 	.word	0xe000ed00
 800074c:	08000000 	.word	0x08000000

08000750 <MX_XSPI2_Init>:

XSPI_HandleTypeDef hxspi2;

/* XSPI2 init function */
void MX_XSPI2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI2_Init 0 */

  /* USER CODE END XSPI2_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN XSPI2_Init 1 */

  /* USER CODE END XSPI2_Init 1 */
  hxspi2.Instance = XSPI2;
 8000760:	4b26      	ldr	r3, [pc, #152]	@ (80007fc <MX_XSPI2_Init+0xac>)
 8000762:	4a27      	ldr	r2, [pc, #156]	@ (8000800 <MX_XSPI2_Init+0xb0>)
 8000764:	601a      	str	r2, [r3, #0]
  hxspi2.Init.FifoThresholdByte = 4;
 8000766:	4b25      	ldr	r3, [pc, #148]	@ (80007fc <MX_XSPI2_Init+0xac>)
 8000768:	2204      	movs	r2, #4
 800076a:	605a      	str	r2, [r3, #4]
  hxspi2.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 800076c:	4b23      	ldr	r3, [pc, #140]	@ (80007fc <MX_XSPI2_Init+0xac>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hxspi2.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000772:	4b22      	ldr	r3, [pc, #136]	@ (80007fc <MX_XSPI2_Init+0xac>)
 8000774:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000778:	60da      	str	r2, [r3, #12]
  hxspi2.Init.MemorySize = HAL_XSPI_SIZE_32GB;
 800077a:	4b20      	ldr	r3, [pc, #128]	@ (80007fc <MX_XSPI2_Init+0xac>)
 800077c:	221f      	movs	r2, #31
 800077e:	611a      	str	r2, [r3, #16]
  hxspi2.Init.ChipSelectHighTimeCycle = 2;
 8000780:	4b1e      	ldr	r3, [pc, #120]	@ (80007fc <MX_XSPI2_Init+0xac>)
 8000782:	2202      	movs	r2, #2
 8000784:	615a      	str	r2, [r3, #20]
  hxspi2.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <MX_XSPI2_Init+0xac>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  hxspi2.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 800078c:	4b1b      	ldr	r3, [pc, #108]	@ (80007fc <MX_XSPI2_Init+0xac>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  hxspi2.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000792:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <MX_XSPI2_Init+0xac>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  hxspi2.Init.ClockPrescaler = 3;
 8000798:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <MX_XSPI2_Init+0xac>)
 800079a:	2203      	movs	r2, #3
 800079c:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi2.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 800079e:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <MX_XSPI2_Init+0xac>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi2.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 80007a4:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <MX_XSPI2_Init+0xac>)
 80007a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi2.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 80007ac:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <MX_XSPI2_Init+0xac>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi2.Init.MaxTran = 0;
 80007b2:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <MX_XSPI2_Init+0xac>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi2.Init.Refresh = 0;
 80007b8:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <MX_XSPI2_Init+0xac>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi2.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
 80007be:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_XSPI2_Init+0xac>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi2) != HAL_OK)
 80007c4:	480d      	ldr	r0, [pc, #52]	@ (80007fc <MX_XSPI2_Init+0xac>)
 80007c6:	f004 fad3 	bl	8004d70 <HAL_XSPI_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_XSPI2_Init+0x84>
  {
    Error_Handler();
 80007d0:	f7ff ff23 	bl	800061a <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 80007d4:	2310      	movs	r3, #16
 80007d6:	607b      	str	r3, [r7, #4]
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_2;
 80007d8:	2301      	movs	r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
  if (HAL_XSPIM_Config(&hxspi2, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_XSPI2_Init+0xac>)
 80007e6:	f004 febf 	bl	8005568 <HAL_XSPIM_Config>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_XSPI2_Init+0xa4>
  {
    Error_Handler();
 80007f0:	f7ff ff13 	bl	800061a <Error_Handler>
  }
  /* USER CODE BEGIN XSPI2_Init 2 */

  /* USER CODE END XSPI2_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	24000028 	.word	0x24000028
 8000800:	5200a000 	.word	0x5200a000

08000804 <HAL_XSPI_MspInit>:

void HAL_XSPI_MspInit(XSPI_HandleTypeDef* xspiHandle)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b0ac      	sub	sp, #176	@ 0xb0
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800081c:	f107 0318 	add.w	r3, r7, #24
 8000820:	2284      	movs	r2, #132	@ 0x84
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f007 fe77 	bl	8008518 <memset>
  if(xspiHandle->Instance==XSPI2)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a29      	ldr	r2, [pc, #164]	@ (80008d4 <HAL_XSPI_MspInit+0xd0>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d14a      	bne.n	80008ca <HAL_XSPI_MspInit+0xc6>

  /* USER CODE END XSPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_XSPI2;
 8000834:	2304      	movs	r3, #4
 8000836:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_PLL2S;
 8000838:	2340      	movs	r3, #64	@ 0x40
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800083c:	f107 0318 	add.w	r3, r7, #24
 8000840:	4618      	mov	r0, r3
 8000842:	f001 fff1 	bl	8002828 <HAL_RCCEx_PeriphCLKConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <HAL_XSPI_MspInit+0x4c>
    {
      Error_Handler();
 800084c:	f7ff fee5 	bl	800061a <Error_Handler>
    }

    /* XSPI2 clock enable */
    __HAL_RCC_XSPIM_CLK_ENABLE();
 8000850:	4b21      	ldr	r3, [pc, #132]	@ (80008d8 <HAL_XSPI_MspInit+0xd4>)
 8000852:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000856:	4a20      	ldr	r2, [pc, #128]	@ (80008d8 <HAL_XSPI_MspInit+0xd4>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800085c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000860:	4b1d      	ldr	r3, [pc, #116]	@ (80008d8 <HAL_XSPI_MspInit+0xd4>)
 8000862:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_XSPI2_CLK_ENABLE();
 800086a:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <HAL_XSPI_MspInit+0xd4>)
 800086c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000870:	4a19      	ldr	r2, [pc, #100]	@ (80008d8 <HAL_XSPI_MspInit+0xd4>)
 8000872:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000876:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800087a:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <HAL_XSPI_MspInit+0xd4>)
 800087c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPION_CLK_ENABLE();
 8000884:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <HAL_XSPI_MspInit+0xd4>)
 8000886:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800088a:	4a13      	ldr	r2, [pc, #76]	@ (80008d8 <HAL_XSPI_MspInit+0xd4>)
 800088c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000890:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000894:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <HAL_XSPI_MspInit+0xd4>)
 8000896:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    PN6     ------> XSPIM_P2_CLK
    PN8     ------> XSPIM_P2_IO4
    PN4     ------> XSPIM_P2_IO2
    PN5     ------> XSPIM_P2_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_11
 800089e:	f640 737f 	movw	r3, #3967	@ 0xf7f
 80008a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_2|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P2;
 80008b8:	2309      	movs	r3, #9
 80008ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPION, &GPIO_InitStruct);
 80008be:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	@ (80008dc <HAL_XSPI_MspInit+0xd8>)
 80008c6:	f000 fb55 	bl	8000f74 <HAL_GPIO_Init>

  /* USER CODE BEGIN XSPI2_MspInit 1 */

  /* USER CODE END XSPI2_MspInit 1 */
  }
}
 80008ca:	bf00      	nop
 80008cc:	37b0      	adds	r7, #176	@ 0xb0
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	5200a000 	.word	0x5200a000
 80008d8:	58024400 	.word	0x58024400
 80008dc:	58023400 	.word	0x58023400

080008e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008e0:	480d      	ldr	r0, [pc, #52]	@ (8000918 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008e4:	f7ff ff1e 	bl	8000724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e8:	480c      	ldr	r0, [pc, #48]	@ (800091c <LoopForever+0x6>)
  ldr r1, =_edata
 80008ea:	490d      	ldr	r1, [pc, #52]	@ (8000920 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000924 <LoopForever+0xe>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f0:	e002      	b.n	80008f8 <LoopCopyDataInit>

080008f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f6:	3304      	adds	r3, #4

080008f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008fc:	d3f9      	bcc.n	80008f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000900:	4c0a      	ldr	r4, [pc, #40]	@ (800092c <LoopForever+0x16>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000904:	e001      	b.n	800090a <LoopFillZerobss>

08000906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000908:	3204      	adds	r2, #4

0800090a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800090c:	d3fb      	bcc.n	8000906 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090e:	f007 fe0b 	bl	8008528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000912:	f7ff fd27 	bl	8000364 <main>

08000916 <LoopForever>:

LoopForever:
  b LoopForever
 8000916:	e7fe      	b.n	8000916 <LoopForever>
  ldr   r0, =_estack
 8000918:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800091c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000920:	2400000c 	.word	0x2400000c
  ldr r2, =_sidata
 8000924:	080085f8 	.word	0x080085f8
  ldr r2, =_sbss
 8000928:	2400000c 	.word	0x2400000c
  ldr r4, =_ebss
 800092c:	240002c0 	.word	0x240002c0

08000930 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000930:	e7fe      	b.n	8000930 <ADC1_2_IRQHandler>

08000932 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000938:	2300      	movs	r3, #0
 800093a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f9e5 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000942:	200f      	movs	r0, #15
 8000944:	f000 f80e 	bl	8000964 <HAL_InitTick>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d002      	beq.n	8000954 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	71fb      	strb	r3, [r7, #7]
 8000952:	e001      	b.n	8000958 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000954:	f7ff fe6e 	bl	8000634 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000958:	79fb      	ldrb	r3, [r7, #7]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000970:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <HAL_InitTick+0x6c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d023      	beq.n	80009c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000978:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <HAL_InitTick+0x70>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <HAL_InitTick+0x6c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000986:	fbb3 f3f1 	udiv	r3, r3, r1
 800098a:	fbb2 f3f3 	udiv	r3, r2, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f9e1 	bl	8000d56 <HAL_SYSTICK_Config>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d10f      	bne.n	80009ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d809      	bhi.n	80009b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f000 f9bb 	bl	8000d22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ac:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <HAL_InitTick+0x74>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6013      	str	r3, [r2, #0]
 80009b2:	e007      	b.n	80009c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	e004      	b.n	80009c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	73fb      	strb	r3, [r7, #15]
 80009be:	e001      	b.n	80009c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	24000008 	.word	0x24000008
 80009d4:	24000000 	.word	0x24000000
 80009d8:	24000004 	.word	0x24000004

080009dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_IncTick+0x20>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <HAL_IncTick+0x24>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <HAL_IncTick+0x24>)
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	24000008 	.word	0x24000008
 8000a00:	24000088 	.word	0x24000088

08000a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return uwTick;
 8000a08:	4b03      	ldr	r3, [pc, #12]	@ (8000a18 <HAL_GetTick+0x14>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	24000088 	.word	0x24000088

08000a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a24:	f7ff ffee 	bl	8000a04 <HAL_GetTick>
 8000a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to ensure minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a34:	d005      	beq.n	8000a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a36:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <HAL_Delay+0x44>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4413      	add	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a42:	bf00      	nop
 8000a44:	f7ff ffde 	bl	8000a04 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d8f7      	bhi.n	8000a44 <HAL_Delay+0x28>
  {
  }
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	24000008 	.word	0x24000008

08000a64 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <HAL_SuspendTick+0x1c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <HAL_SuspendTick+0x1c>)
 8000a6e:	f023 0302 	bic.w	r3, r3, #2
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000e010 	.word	0xe000e010

08000a84 <HAL_SBS_EnableCompensationCell>:
  *            @arg SBS_IO_XSPI1_CELL Compensation cell for the I/O of the XSPI1
  *            @arg SBS_IO_XSPI2_CELL Compensation cell for the I/O of the XSPI2
  * @retval None
  */
void HAL_SBS_EnableCompensationCell(uint32_t Selection)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_COMPENSATION_CELL(Selection));

  SET_BIT(SBS->CCCSR, Selection);
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_SBS_EnableCompensationCell+0x24>)
 8000a8e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000a92:	4905      	ldr	r1, [pc, #20]	@ (8000aa8 <HAL_SBS_EnableCompensationCell+0x24>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	58000400 	.word	0x58000400

08000aac <HAL_SBS_GetCompensationCellReadyStatus>:
  *            @arg SBS_IO_XSPI1_CELL_READY Compensation cell for the I/O of the XSPI1
  *            @arg SBS_IO_XSPI2_CELL_READY Compensation cell for the I/O of the XSPI2
  * @retval Ready status (1 or 0)
  */
uint32_t HAL_SBS_GetCompensationCellReadyStatus(uint32_t Selection)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_COMPENSATION_CELL_READY(Selection));

  return (((SBS->CCCSR & Selection) == 0U) ? 0UL : 1UL);
 8000ab4:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <HAL_SBS_GetCompensationCellReadyStatus+0x28>)
 8000ab6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4013      	ands	r3, r2
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	bf14      	ite	ne
 8000ac2:	2301      	movne	r3, #1
 8000ac4:	2300      	moveq	r3, #0
 8000ac6:	b2db      	uxtb	r3, r3
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	58000400 	.word	0x58000400

08000ad8 <HAL_SBS_ConfigCompensationCell>:
  * @param  PmosValue In case SBS_IO_REGISTER_CODE is selected, it  provides the Pmos value
  *                   to apply in range 0 to 15 else this parameter is not used
  * @retval None
  */
void HAL_SBS_ConfigCompensationCell(uint32_t Selection, uint32_t Code, uint32_t NmosValue, uint32_t PmosValue)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b089      	sub	sp, #36	@ 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
 8000ae4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SBS_COMPENSATION_CELL(Selection));
  assert_param(IS_SBS_IO_COMPENSATION_CODE(Code));

  if (Code == SBS_IO_REGISTER_CODE)
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d121      	bne.n	8000b30 <HAL_SBS_ConfigCompensationCell+0x58>
  {
    /* Check the parameters */
    assert_param(IS_SBS_IO_COMPENSATION_CELL_NMOS_VALUE(NmosValue));
    assert_param(IS_SBS_IO_COMPENSATION_CELL_PMOS_VALUE(PmosValue));

    offset = ((Selection == SBS_IO_ANALOG_CELL) ? 0U : ((Selection == SBS_IO_XSPI1_CELL) ? 8U : 16U));
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d006      	beq.n	8000b00 <HAL_SBS_ConfigCompensationCell+0x28>
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	2b04      	cmp	r3, #4
 8000af6:	d101      	bne.n	8000afc <HAL_SBS_ConfigCompensationCell+0x24>
 8000af8:	2308      	movs	r3, #8
 8000afa:	e002      	b.n	8000b02 <HAL_SBS_ConfigCompensationCell+0x2a>
 8000afc:	2310      	movs	r3, #16
 8000afe:	e000      	b.n	8000b02 <HAL_SBS_ConfigCompensationCell+0x2a>
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]

    MODIFY_REG(SBS->CCSWVALR, (0xFFU << offset), ((NmosValue << offset) | (PmosValue << (offset + 4U))));
 8000b04:	4b1d      	ldr	r3, [pc, #116]	@ (8000b7c <HAL_SBS_ConfigCompensationCell+0xa4>)
 8000b06:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8000b0a:	21ff      	movs	r1, #255	@ 0xff
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	401a      	ands	r2, r3
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	4099      	lsls	r1, r3
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	3304      	adds	r3, #4
 8000b20:	6838      	ldr	r0, [r7, #0]
 8000b22:	fa00 f303 	lsl.w	r3, r0, r3
 8000b26:	430b      	orrs	r3, r1
 8000b28:	4914      	ldr	r1, [pc, #80]	@ (8000b7c <HAL_SBS_ConfigCompensationCell+0xa4>)
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	f8c1 3118 	str.w	r3, [r1, #280]	@ 0x118
  }

  MODIFY_REG(SBS->CCCSR, (Selection << 1U), (Code << (POSITION_VAL(Selection) + 1U)));
 8000b30:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <HAL_SBS_ConfigCompensationCell+0xa4>)
 8000b32:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	401a      	ands	r2, r3
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	fa93 f3a3 	rbit	r3, r3
 8000b48:	613b      	str	r3, [r7, #16]
  return result;
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d101      	bne.n	8000b58 <HAL_SBS_ConfigCompensationCell+0x80>
    return 32U;
 8000b54:	2320      	movs	r3, #32
 8000b56:	e003      	b.n	8000b60 <HAL_SBS_ConfigCompensationCell+0x88>
  return __builtin_clz(value);
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	fab3 f383 	clz	r3, r3
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	3301      	adds	r3, #1
 8000b62:	68b9      	ldr	r1, [r7, #8]
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	4904      	ldr	r1, [pc, #16]	@ (8000b7c <HAL_SBS_ConfigCompensationCell+0xa4>)
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
}
 8000b70:	bf00      	nop
 8000b72:	3724      	adds	r7, #36	@ 0x24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	58000400 	.word	0x58000400

08000b80 <HAL_SBS_EnableIOSpeedOptimize>:
  *            @arg SBS_IO_XSPI1_HSLV High speed at low voltage for the I/O of the XSPI1
  *            @arg SBS_IO_XSPI2_HSLV High speed at low voltage for the I/O of the XSPI2
  * @retval None
  */
void HAL_SBS_EnableIOSpeedOptimize(uint32_t Selection)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_IOHSLV(Selection));

  SET_BIT(SBS->CCCSR, Selection);
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <HAL_SBS_EnableIOSpeedOptimize+0x24>)
 8000b8a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000b8e:	4905      	ldr	r1, [pc, #20]	@ (8000ba4 <HAL_SBS_EnableIOSpeedOptimize+0x24>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	58000400 	.word	0x58000400

08000ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <__NVIC_SetPriorityGrouping+0x40>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <__NVIC_SetPriorityGrouping+0x40>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00
 8000bec:	05fa0000 	.word	0x05fa0000

08000bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf4:	4b04      	ldr	r3, [pc, #16]	@ (8000c08 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	f003 0307 	and.w	r3, r3, #7
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	@ (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	@ (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	@ 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	@ 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f7ff ff8e 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff47 	bl	8000ba8 <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d30:	f7ff ff5e 	bl	8000bf0 <__NVIC_GetPriorityGrouping>
 8000d34:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	6978      	ldr	r0, [r7, #20]
 8000d3c:	f7ff ff90 	bl	8000c60 <NVIC_EncodePriority>
 8000d40:	4602      	mov	r2, r0
 8000d42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff5f 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ffb2 	bl	8000cc8 <SysTick_Config>
 8000d64:	4603      	mov	r3, r0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8000d78:	f3bf 8f5f 	dmb	sy
}
 8000d7c:	bf00      	nop
  /* Force any outstanding transfers to complete before enabling MPU */
  __DMB();

  /* Enable the MPU */
  MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000dac <HAL_MPU_Enable+0x3c>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000d88:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <HAL_MPU_Enable+0x40>)
 8000d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d8c:	4a08      	ldr	r2, [pc, #32]	@ (8000db0 <HAL_MPU_Enable+0x40>)
 8000d8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d92:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000d94:	f3bf 8f4f 	dsb	sy
}
 8000d98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d9a:	f3bf 8f6f 	isb	sy
}
 8000d9e:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed90 	.word	0xe000ed90
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8000db8:	f3bf 8f5f 	dmb	sy
}
 8000dbc:	bf00      	nop
  /* Force any outstanding transfers to complete before disabling MPU */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <HAL_MPU_Disable+0x34>)
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc2:	4a09      	ldr	r2, [pc, #36]	@ (8000de8 <HAL_MPU_Disable+0x34>)
 8000dc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dc8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register */
  MPU->CTRL = 0U;
 8000dca:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <HAL_MPU_Disable+0x38>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd0:	f3bf 8f4f 	dsb	sy
}
 8000dd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dd6:	f3bf 8f6f 	isb	sy
}
 8000dda:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00
 8000dec:	e000ed90 	.word	0xe000ed90

08000df0 <HAL_MPU_ConfigRegion>:
  *                  the initialization and configuration information.
  * @note   The region base address must be aligned to the size of the region.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *pMPU_RegionInit)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(pMPU_RegionInit->Number));
  assert_param(IS_MPU_REGION_ENABLE(pMPU_RegionInit->Enable));

  /* Set the Region number */
  MPU->RNR = pMPU_RegionInit->Number;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	785a      	ldrb	r2, [r3, #1]
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e78 <HAL_MPU_ConfigRegion+0x88>)
 8000dfe:	609a      	str	r2, [r3, #8]
  assert_param(IS_MPU_SUB_REGION_DISABLE(pMPU_RegionInit->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(pMPU_RegionInit->Size));
  assert_param(IS_MPU_ADDRESS_MULTIPLE_SIZE(pMPU_RegionInit->BaseAddress, pMPU_RegionInit->Size));

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000e00:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <HAL_MPU_ConfigRegion+0x88>)
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	4a1c      	ldr	r2, [pc, #112]	@ (8000e78 <HAL_MPU_ConfigRegion+0x88>)
 8000e06:	f023 0301 	bic.w	r3, r3, #1
 8000e0a:	6113      	str	r3, [r2, #16]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <HAL_MPU_ConfigRegion+0x88>)
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	4a19      	ldr	r2, [pc, #100]	@ (8000e78 <HAL_MPU_ConfigRegion+0x88>)
 8000e12:	f023 0301 	bic.w	r3, r3, #1
 8000e16:	6113      	str	r3, [r2, #16]
  MPU->RBAR = pMPU_RegionInit->BaseAddress;
 8000e18:	4a17      	ldr	r2, [pc, #92]	@ (8000e78 <HAL_MPU_ConfigRegion+0x88>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	7b1b      	ldrb	r3, [r3, #12]
 8000e24:	071a      	lsls	r2, r3, #28
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7adb      	ldrb	r3, [r3, #11]
 8000e2a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8000e2c:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7a9b      	ldrb	r3, [r3, #10]
 8000e32:	04db      	lsls	r3, r3, #19
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
 8000e34:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7b5b      	ldrb	r3, [r3, #13]
 8000e3a:	049b      	lsls	r3, r3, #18
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
 8000e3c:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7b9b      	ldrb	r3, [r3, #14]
 8000e42:	045b      	lsls	r3, r3, #17
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
 8000e44:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	7bdb      	ldrb	r3, [r3, #15]
 8000e4a:	041b      	lsls	r3, r3, #16
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
 8000e4c:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7a5b      	ldrb	r3, [r3, #9]
 8000e52:	021b      	lsls	r3, r3, #8
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
 8000e54:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7a1b      	ldrb	r3, [r3, #8]
 8000e5a:	005b      	lsls	r3, r3, #1
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
 8000e5c:	4313      	orrs	r3, r2
              ((uint32_t)pMPU_RegionInit->Enable           << MPU_RASR_ENABLE_Pos);
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8000e64:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <HAL_MPU_ConfigRegion+0x88>)
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
 8000e66:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8000e68:	6113      	str	r3, [r2, #16]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed90 	.word	0xe000ed90

08000e7c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8000e84:	f7ff fdbe 	bl	8000a04 <HAL_GetTick>
 8000e88:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d101      	bne.n	8000e94 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e06b      	b.n	8000f6c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d008      	beq.n	8000eb2 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2220      	movs	r2, #32
 8000ea4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e05c      	b.n	8000f6c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	695a      	ldr	r2, [r3, #20]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f042 0204 	orr.w	r2, r2, #4
 8000ec0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2205      	movs	r2, #5
 8000ec6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8000eca:	e020      	b.n	8000f0e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8000ecc:	f7ff fd9a 	bl	8000a04 <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b05      	cmp	r3, #5
 8000ed8:	d919      	bls.n	8000f0e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ede:	f043 0210 	orr.w	r2, r3, #16
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2203      	movs	r2, #3
 8000eea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000efe:	2201      	movs	r2, #1
 8000f00:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e02e      	b.n	8000f6c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	691b      	ldr	r3, [r3, #16]
 8000f14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0d7      	beq.n	8000ecc <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	695a      	ldr	r2, [r3, #20]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f042 0202 	orr.w	r2, r2, #2
 8000f2a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2204      	movs	r2, #4
 8000f30:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8000f3c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2201      	movs	r2, #1
 8000f42:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d007      	beq.n	8000f62 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f56:	2201      	movs	r2, #1
 8000f58:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f82:	e139      	b.n	80011f8 <HAL_GPIO_Init+0x284>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	2101      	movs	r1, #1
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f90:	4013      	ands	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 812b 	beq.w	80011f2 <HAL_GPIO_Init+0x27e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d005      	beq.n	8000fb4 <HAL_GPIO_Init+0x40>
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d130      	bne.n	8001016 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fea:	2201      	movs	r2, #1
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	091b      	lsrs	r3, r3, #4
 8001000:	f003 0201 	and.w	r2, r3, #1
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b03      	cmp	r3, #3
 8001020:	d017      	beq.n	8001052 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d123      	bne.n	80010a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	08da      	lsrs	r2, r3, #3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3208      	adds	r2, #8
 8001066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	220f      	movs	r2, #15
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	691a      	ldr	r2, [r3, #16]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	08da      	lsrs	r2, r3, #3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3208      	adds	r2, #8
 80010a0:	6939      	ldr	r1, [r7, #16]
 80010a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	2203      	movs	r2, #3
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0203 	and.w	r2, r3, #3
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 8085 	beq.w	80011f2 <HAL_GPIO_Init+0x27e>
      {
        temp = SBS->EXTICR[position >> 2u];
 80010e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001218 <HAL_GPIO_Init+0x2a4>)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	089b      	lsrs	r3, r3, #2
 80010ee:	334c      	adds	r3, #76	@ 0x4c
 80010f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	220f      	movs	r2, #15
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	0a9a      	lsrs	r2, r3, #10
 8001110:	4b42      	ldr	r3, [pc, #264]	@ (800121c <HAL_GPIO_Init+0x2a8>)
 8001112:	4013      	ands	r3, r2
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	f002 0203 	and.w	r2, r2, #3
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	4093      	lsls	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        SBS->EXTICR[position >> 2u] = temp;
 8001124:	493c      	ldr	r1, [pc, #240]	@ (8001218 <HAL_GPIO_Init+0x2a4>)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	334c      	adds	r3, #76	@ 0x4c
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x1e4>
        {
          temp |= iocurrent;
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001158:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x212>
        {
          temp |= iocurrent;
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001186:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800118e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80011c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	3301      	adds	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	f47f aebe 	bne.w	8000f84 <HAL_GPIO_Init+0x10>
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	371c      	adds	r7, #28
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	58000400 	.word	0x58000400
 800121c:	0029ff7f 	.word	0x0029ff7f

08001220 <HAL_PWREx_ConfigSupply>:
  *        PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO and PWR_SMPS_1V8_SUPPLIES_EXT are used
  *        only for lines that supports SMPS regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Check if supply source was configured */
  if ((PWR->CSR2 & (PWR_CSR2_SDEN | PWR_CSR2_LDOEN | PWR_CSR2_BYPASS)) != (PWR_CSR2_SDEN | PWR_CSR2_LDOEN))
 8001228:	4b25      	ldr	r3, [pc, #148]	@ (80012c0 <HAL_PWREx_ConfigSupply+0xa0>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	2b06      	cmp	r3, #6
 8001232:	d00a      	beq.n	800124a <HAL_PWREx_ConfigSupply+0x2a>
  {
    /* Check supply configuration */
    if ((PWR->CSR2 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001234:	4b22      	ldr	r3, [pc, #136]	@ (80012c0 <HAL_PWREx_ConfigSupply+0xa0>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	f003 031f 	and.w	r3, r3, #31
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	429a      	cmp	r2, r3
 8001240:	d001      	beq.n	8001246 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e038      	b.n	80012b8 <HAL_PWREx_ConfigSupply+0x98>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e036      	b.n	80012b8 <HAL_PWREx_ConfigSupply+0x98>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CSR2, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800124a:	4b1d      	ldr	r3, [pc, #116]	@ (80012c0 <HAL_PWREx_ConfigSupply+0xa0>)
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	f023 021f 	bic.w	r2, r3, #31
 8001252:	491b      	ldr	r1, [pc, #108]	@ (80012c0 <HAL_PWREx_ConfigSupply+0xa0>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4313      	orrs	r3, r2
 8001258:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800125a:	f7ff fbd3 	bl	8000a04 <HAL_GetTick>
 800125e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->SR1 & PWR_SR1_ACTVOSRDY) == 0U)
 8001260:	e009      	b.n	8001276 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001262:	f7ff fbcf 	bl	8000a04 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001270:	d901      	bls.n	8001276 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e020      	b.n	80012b8 <HAL_PWREx_ConfigSupply+0x98>
  while ((PWR->SR1 & PWR_SR1_ACTVOSRDY) == 0U)
 8001276:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_PWREx_ConfigSupply+0xa0>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0ef      	beq.n	8001262 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b1e      	cmp	r3, #30
 8001286:	d002      	beq.n	800128e <HAL_PWREx_ConfigSupply+0x6e>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b1d      	cmp	r3, #29
 800128c:	d113      	bne.n	80012b6 <HAL_PWREx_ConfigSupply+0x96>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick();
 800128e:	f7ff fbb9 	bl	8000a04 <HAL_GetTick>
 8001292:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while ((PWR->CSR2 & PWR_CSR2_SDEXTRDY) == 0U)
 8001294:	e009      	b.n	80012aa <HAL_PWREx_ConfigSupply+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001296:	f7ff fbb5 	bl	8000a04 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012a4:	d901      	bls.n	80012aa <HAL_PWREx_ConfigSupply+0x8a>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e006      	b.n	80012b8 <HAL_PWREx_ConfigSupply+0x98>
    while ((PWR->CSR2 & PWR_CSR2_SDEXTRDY) == 0U)
 80012aa:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <HAL_PWREx_ConfigSupply+0xa0>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0ef      	beq.n	8001296 <HAL_PWREx_ConfigSupply+0x76>
      }
    }
  }
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	58024800 	.word	0x58024800

080012c4 <HAL_PWREx_ControlVoltageScaling>:
  * @note When exiting from Stop mode or Standby mode, the Run mode voltage
  *       scaling is reset to the default VOS low value.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(VoltageScaling));

  /* Set the voltage range */
  MODIFY_REG(PWR->CSR4, PWR_CSR4_VOS, VoltageScaling);
 80012cc:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	f023 0201 	bic.w	r2, r3, #1
 80012d4:	490e      	ldr	r1, [pc, #56]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4313      	orrs	r3, r2
 80012da:	614b      	str	r3, [r1, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012dc:	f7ff fb92 	bl	8000a04 <HAL_GetTick>
 80012e0:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->CSR4 & PWR_CSR4_VOSRDY) == 0U)
 80012e2:	e009      	b.n	80012f8 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 80012e4:	f7ff fb8e 	bl	8000a04 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012f2:	d901      	bls.n	80012f8 <HAL_PWREx_ControlVoltageScaling+0x34>
    {
      return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e006      	b.n	8001306 <HAL_PWREx_ControlVoltageScaling+0x42>
  while ((PWR->CSR4 & PWR_CSR4_VOSRDY) == 0U)
 80012f8:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0ef      	beq.n	80012e4 <HAL_PWREx_ControlVoltageScaling+0x20>
    }
  }

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	58024800 	.word	0x58024800

08001314 <HAL_PWREx_EnableXSPIM2>:
  * @note   The XSPIM_P2 supply must be stable prior to setting
            this bit.
  * @retval None.
  */
void HAL_PWREx_EnableXSPIM2(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CSR2, PWR_CSR2_EN_XSPIM2);
 8001318:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <HAL_PWREx_EnableXSPIM2+0x1c>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	4a04      	ldr	r2, [pc, #16]	@ (8001330 <HAL_PWREx_EnableXSPIM2+0x1c>)
 800131e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	58024800 	.word	0x58024800

08001334 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t pllsrc;
  uint32_t pllrdy;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e328      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001346:	4b97      	ldr	r3, [pc, #604]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800134e:	61fb      	str	r3, [r7, #28]
  pllsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001350:	4b94      	ldr	r3, [pc, #592]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 8001352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	61bb      	str	r3, [r7, #24]
  pllrdy = RCC->CR & (RCC_CR_PLL1RDY | RCC_CR_PLL2RDY | RCC_CR_PLL3RDY);
 800135a:	4b92      	ldr	r3, [pc, #584]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 5328 	and.w	r3, r3, #704643072	@ 0x2a000000
 8001362:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 809c 	beq.w	80014aa <HAL_RCC_OscConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	2b10      	cmp	r3, #16
 8001376:	d005      	beq.n	8001384 <HAL_RCC_OscConfig+0x50>
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d009      	beq.n	8001392 <HAL_RCC_OscConfig+0x5e>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSE)))
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d106      	bne.n	8001392 <HAL_RCC_OscConfig+0x5e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	f040 808e 	bne.w	80014aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e302      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800139a:	d106      	bne.n	80013aa <HAL_RCC_OscConfig+0x76>
 800139c:	4b81      	ldr	r3, [pc, #516]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a80      	ldr	r2, [pc, #512]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 80013a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	e058      	b.n	800145c <HAL_RCC_OscConfig+0x128>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d112      	bne.n	80013d8 <HAL_RCC_OscConfig+0xa4>
 80013b2:	4b7c      	ldr	r3, [pc, #496]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a7b      	ldr	r2, [pc, #492]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 80013b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b79      	ldr	r3, [pc, #484]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a78      	ldr	r2, [pc, #480]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 80013c4:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b76      	ldr	r3, [pc, #472]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a75      	ldr	r2, [pc, #468]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 80013d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e041      	b.n	800145c <HAL_RCC_OscConfig+0x128>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013e0:	d112      	bne.n	8001408 <HAL_RCC_OscConfig+0xd4>
 80013e2:	4b70      	ldr	r3, [pc, #448]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a6f      	ldr	r2, [pc, #444]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 80013e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b6d      	ldr	r3, [pc, #436]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a6c      	ldr	r2, [pc, #432]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 80013f4:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	4b6a      	ldr	r3, [pc, #424]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a69      	ldr	r2, [pc, #420]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 8001400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e029      	b.n	800145c <HAL_RCC_OscConfig+0x128>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 8001410:	d112      	bne.n	8001438 <HAL_RCC_OscConfig+0x104>
 8001412:	4b64      	ldr	r3, [pc, #400]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a63      	ldr	r2, [pc, #396]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 8001418:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	4b61      	ldr	r3, [pc, #388]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a60      	ldr	r2, [pc, #384]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 8001424:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4b5e      	ldr	r3, [pc, #376]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a5d      	ldr	r2, [pc, #372]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 8001430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e011      	b.n	800145c <HAL_RCC_OscConfig+0x128>
 8001438:	4b5a      	ldr	r3, [pc, #360]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a59      	ldr	r2, [pc, #356]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 800143e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4b57      	ldr	r3, [pc, #348]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a56      	ldr	r2, [pc, #344]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 800144a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b54      	ldr	r3, [pc, #336]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a53      	ldr	r2, [pc, #332]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 8001456:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800145a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145c:	f7ff fad2 	bl	8000a04 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d019      	beq.n	800149e <HAL_RCC_OscConfig+0x16a>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800146c:	f7ff faca 	bl	8000a04 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	@ 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e28c      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800147e:	4b49      	ldr	r3, [pc, #292]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x138>
 800148a:	e00e      	b.n	80014aa <HAL_RCC_OscConfig+0x176>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800148c:	f7ff faba 	bl	8000a04 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	@ 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x16a>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e27c      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800149e:	4b41      	ldr	r3, [pc, #260]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x158>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 809e 	beq.w	80015f4 <HAL_RCC_OscConfig+0x2c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <HAL_RCC_OscConfig+0x196>
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d047      	beq.n	8001554 <HAL_RCC_OscConfig+0x220>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSI)))
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d144      	bne.n	8001554 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e260      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
      }
      /* Otherwise, calibration is allowed, divider update also unless used for any enabled PLL */
      else
      {
        /* HSI must not be used as reference clock for any enabled PLL clock source */
        tmpreg1 = (RCC->CR & RCC_CR_HSIDIV);
 80014d6:	4b33      	ldr	r3, [pc, #204]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0318 	and.w	r3, r3, #24
 80014de:	60fb      	str	r3, [r7, #12]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d109      	bne.n	80014fa <HAL_RCC_OscConfig+0x1c6>
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d006      	beq.n	80014fa <HAL_RCC_OscConfig+0x1c6>
            (tmpreg1 != RCC_OscInitStruct->HSIDiv))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d001      	beq.n	80014fa <HAL_RCC_OscConfig+0x1c6>
        {
          return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e24e      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
        }

        assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

        /* Set the Internal High Speed oscillator new divider */
        __HAL_RCC_HSI_CONFIG(RCC_HSI_ON | RCC_OscInitStruct->HSIDiv);
 80014fa:	4b2a      	ldr	r3, [pc, #168]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 0219 	bic.w	r2, r3, #25
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	4a26      	ldr	r2, [pc, #152]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6013      	str	r3, [r2, #0]

        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d109      	bne.n	800152a <HAL_RCC_OscConfig+0x1f6>
        {
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001516:	4b23      	ldr	r3, [pc, #140]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	4a21      	ldr	r2, [pc, #132]	@ (80015a8 <HAL_RCC_OscConfig+0x274>)
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	4a21      	ldr	r2, [pc, #132]	@ (80015ac <HAL_RCC_OscConfig+0x278>)
 8001528:	6013      	str	r3, [r2, #0]
        }
        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800152a:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <HAL_RCC_OscConfig+0x27c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fa18 	bl	8000964 <HAL_InitTick>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_RCC_OscConfig+0x20a>
        {
          return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e22c      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
        }
      }
      /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
      __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153e:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	061b      	lsls	r3, r3, #24
 800154c:	4915      	ldr	r1, [pc, #84]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 800154e:	4313      	orrs	r3, r2
 8001550:	604b      	str	r3, [r1, #4]
 8001552:	e04f      	b.n	80015f4 <HAL_RCC_OscConfig+0x2c0>
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d032      	beq.n	80015c2 <HAL_RCC_OscConfig+0x28e>
      {
        /* Enable the Internal High Speed oscillator */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState | RCC_OscInitStruct->HSIDiv);
 800155c:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 0219 	bic.w	r2, r3, #25
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68d9      	ldr	r1, [r3, #12]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	430b      	orrs	r3, r1
 800156e:	490d      	ldr	r1, [pc, #52]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 8001570:	4313      	orrs	r3, r2
 8001572:	600b      	str	r3, [r1, #0]

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001574:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	061b      	lsls	r3, r3, #24
 8001582:	4908      	ldr	r1, [pc, #32]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fa3c 	bl	8000a04 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800158e:	e011      	b.n	80015b4 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001590:	f7ff fa38 	bl	8000a04 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b01      	cmp	r3, #1
 800159c:	d90a      	bls.n	80015b4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e1fa      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
 80015a2:	bf00      	nop
 80015a4:	58024400 	.word	0x58024400
 80015a8:	03d09000 	.word	0x03d09000
 80015ac:	24000000 	.word	0x24000000
 80015b0:	24000004 	.word	0x24000004
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b4:	4b95      	ldr	r3, [pc, #596]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0e7      	beq.n	8001590 <HAL_RCC_OscConfig+0x25c>
 80015c0:	e018      	b.n	80015f4 <HAL_RCC_OscConfig+0x2c0>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c2:	4b92      	ldr	r3, [pc, #584]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a91      	ldr	r2, [pc, #580]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ce:	f7ff fa19 	bl	8000a04 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80015d6:	f7ff fa15 	bl	8000a04 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e1d7      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e8:	4b88      	ldr	r3, [pc, #544]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d045      	beq.n	800168c <HAL_RCC_OscConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));

    /* When the CSI is used as system clock it will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	2b08      	cmp	r3, #8
 8001604:	d005      	beq.n	8001612 <HAL_RCC_OscConfig+0x2de>
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d008      	beq.n	800161e <HAL_RCC_OscConfig+0x2ea>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_CSI)))
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d105      	bne.n	800161e <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if (RCC_OscInitStruct->CSIState == RCC_CSI_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d138      	bne.n	800168c <HAL_RCC_OscConfig+0x358>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e1bc      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d019      	beq.n	800165a <HAL_RCC_OscConfig+0x326>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001626:	4b79      	ldr	r3, [pc, #484]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a78      	ldr	r2, [pc, #480]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 800162c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001632:	f7ff f9e7 	bl	8000a04 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x318>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800163a:	f7ff f9e3 	bl	8000a04 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b01      	cmp	r3, #1
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e1a5      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800164c:	4b6f      	ldr	r3, [pc, #444]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x306>
 8001658:	e018      	b.n	800168c <HAL_RCC_OscConfig+0x358>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800165a:	4b6c      	ldr	r3, [pc, #432]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a6b      	ldr	r2, [pc, #428]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 8001660:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001666:	f7ff f9cd 	bl	8000a04 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x34c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800166e:	f7ff f9c9 	bl	8000a04 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b01      	cmp	r3, #1
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e18b      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001680:	4b62      	ldr	r3, [pc, #392]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f0      	bne.n	800166e <HAL_RCC_OscConfig+0x33a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	2b00      	cmp	r3, #0
 8001696:	d036      	beq.n	8001706 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d019      	beq.n	80016d4 <HAL_RCC_OscConfig+0x3a0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a0:	4b5a      	ldr	r3, [pc, #360]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80016a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016a4:	4a59      	ldr	r2, [pc, #356]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff f9aa 	bl	8000a04 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x392>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80016b4:	f7ff f9a6 	bl	8000a04 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x392>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e168      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016c6:	4b51      	ldr	r3, [pc, #324]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80016c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x380>
 80016d2:	e018      	b.n	8001706 <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d4:	4b4d      	ldr	r3, [pc, #308]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80016d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016d8:	4a4c      	ldr	r2, [pc, #304]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e0:	f7ff f990 	bl	8000a04 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x3c6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80016e8:	f7ff f98c 	bl	8000a04 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e14e      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016fa:	4b44      	ldr	r3, [pc, #272]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80016fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0320 	and.w	r3, r3, #32
 800170e:	2b00      	cmp	r3, #0
 8001710:	d036      	beq.n	8001780 <HAL_RCC_OscConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d019      	beq.n	800174e <HAL_RCC_OscConfig+0x41a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800171a:	4b3c      	ldr	r3, [pc, #240]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a3b      	ldr	r2, [pc, #236]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 8001720:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001724:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001726:	f7ff f96d 	bl	8000a04 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x40c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800172e:	f7ff f969 	bl	8000a04 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b01      	cmp	r3, #1
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x40c>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e12b      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001740:	4b32      	ldr	r3, [pc, #200]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x3fa>
 800174c:	e018      	b.n	8001780 <HAL_RCC_OscConfig+0x44c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800174e:	4b2f      	ldr	r3, [pc, #188]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a2e      	ldr	r2, [pc, #184]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 8001754:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001758:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800175a:	f7ff f953 	bl	8000a04 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x440>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001762:	f7ff f94f 	bl	8000a04 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b01      	cmp	r3, #1
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x440>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e111      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001774:	4b25      	ldr	r3, [pc, #148]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f0      	bne.n	8001762 <HAL_RCC_OscConfig+0x42e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 809b 	beq.w	80018c4 <HAL_RCC_OscConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800178e:	4b20      	ldr	r3, [pc, #128]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1f      	ldr	r2, [pc, #124]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 8001794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001798:	6013      	str	r3, [r2, #0]

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d106      	bne.n	80017b0 <HAL_RCC_OscConfig+0x47c>
 80017a2:	4b1a      	ldr	r3, [pc, #104]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80017a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a6:	4a19      	ldr	r2, [pc, #100]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ae:	e05a      	b.n	8001866 <HAL_RCC_OscConfig+0x532>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d112      	bne.n	80017de <HAL_RCC_OscConfig+0x4aa>
 80017b8:	4b14      	ldr	r3, [pc, #80]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80017ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017bc:	4a13      	ldr	r2, [pc, #76]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80017c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c8:	4a10      	ldr	r2, [pc, #64]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80017ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80017d0:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80017d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d4:	4a0d      	ldr	r2, [pc, #52]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80017d6:	f023 0304 	bic.w	r3, r3, #4
 80017da:	6713      	str	r3, [r2, #112]	@ 0x70
 80017dc:	e043      	b.n	8001866 <HAL_RCC_OscConfig+0x532>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b05      	cmp	r3, #5
 80017e4:	d116      	bne.n	8001814 <HAL_RCC_OscConfig+0x4e0>
 80017e6:	4b09      	ldr	r3, [pc, #36]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ea:	4a08      	ldr	r2, [pc, #32]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017f2:	4b06      	ldr	r3, [pc, #24]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80017f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f6:	4a05      	ldr	r2, [pc, #20]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 80017f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80017fe:	4b03      	ldr	r3, [pc, #12]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001802:	4a02      	ldr	r2, [pc, #8]	@ (800180c <HAL_RCC_OscConfig+0x4d8>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6713      	str	r3, [r2, #112]	@ 0x70
 800180a:	e02c      	b.n	8001866 <HAL_RCC_OscConfig+0x532>
 800180c:	58024400 	.word	0x58024400
 8001810:	58024800 	.word	0x58024800
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b85      	cmp	r3, #133	@ 0x85
 800181a:	d112      	bne.n	8001842 <HAL_RCC_OscConfig+0x50e>
 800181c:	4b60      	ldr	r3, [pc, #384]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 800181e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001820:	4a5f      	ldr	r2, [pc, #380]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	6713      	str	r3, [r2, #112]	@ 0x70
 8001828:	4b5d      	ldr	r3, [pc, #372]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 800182a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800182c:	4a5c      	ldr	r2, [pc, #368]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 800182e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001832:	6713      	str	r3, [r2, #112]	@ 0x70
 8001834:	4b5a      	ldr	r3, [pc, #360]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 8001836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001838:	4a59      	ldr	r2, [pc, #356]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001840:	e011      	b.n	8001866 <HAL_RCC_OscConfig+0x532>
 8001842:	4b57      	ldr	r3, [pc, #348]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 8001844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001846:	4a56      	ldr	r2, [pc, #344]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	6713      	str	r3, [r2, #112]	@ 0x70
 800184e:	4b54      	ldr	r3, [pc, #336]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 8001850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001852:	4a53      	ldr	r2, [pc, #332]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 8001854:	f023 0304 	bic.w	r3, r3, #4
 8001858:	6713      	str	r3, [r2, #112]	@ 0x70
 800185a:	4b51      	ldr	r3, [pc, #324]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 800185c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800185e:	4a50      	ldr	r2, [pc, #320]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 8001860:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001864:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d015      	beq.n	800189a <HAL_RCC_OscConfig+0x566>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186e:	f7ff f8c9 	bl	8000a04 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001874:	e00a      	b.n	800188c <HAL_RCC_OscConfig+0x558>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001876:	f7ff f8c5 	bl	8000a04 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001884:	4293      	cmp	r3, r2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x558>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e085      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800188c:	4b44      	ldr	r3, [pc, #272]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 800188e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0ee      	beq.n	8001876 <HAL_RCC_OscConfig+0x542>
 8001898:	e014      	b.n	80018c4 <HAL_RCC_OscConfig+0x590>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189a:	f7ff f8b3 	bl	8000a04 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018a0:	e00a      	b.n	80018b8 <HAL_RCC_OscConfig+0x584>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a2:	f7ff f8af 	bl	8000a04 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x584>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e06f      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018b8:	4b39      	ldr	r3, [pc, #228]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1ee      	bne.n	80018a2 <HAL_RCC_OscConfig+0x56e>

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if (RCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d042      	beq.n	8001952 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	2b18      	cmp	r3, #24
 80018d0:	d131      	bne.n	8001936 <HAL_RCC_OscConfig+0x602>
    {
      /* No PLL off possible */
      if (RCC_OscInitStruct->PLL1.PLLState == RCC_PLL_OFF)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d101      	bne.n	80018de <HAL_RCC_OscConfig+0x5aa>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e05c      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> RCC_PLL1FRACR_FRACN_Pos);
 80018de:	4b30      	ldr	r3, [pc, #192]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 80018e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018e2:	08db      	lsrs	r3, r3, #3
 80018e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80018e8:	60fb      	str	r3, [r7, #12]

        if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d02e      	beq.n	8001952 <HAL_RCC_OscConfig+0x61e>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Disable PLL1FRACLE */
          __HAL_RCC_PLL1_FRACN_DISABLE();
 80018f4:	4b2a      	ldr	r3, [pc, #168]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 80018f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f8:	4a29      	ldr	r2, [pc, #164]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 80018fa:	f023 0301 	bic.w	r3, r3, #1
 80018fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001900:	f7ff f880 	bl	8000a04 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001906:	bf00      	nop
 8001908:	f7ff f87c 	bl	8000a04 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4293      	cmp	r3, r2
 8001912:	d0f9      	beq.n	8001908 <HAL_RCC_OscConfig+0x5d4>
          {
            /* Do nothing */
          }

          /* Configure PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8001914:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 8001916:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001918:	4b22      	ldr	r3, [pc, #136]	@ (80019a4 <HAL_RCC_OscConfig+0x670>)
 800191a:	4013      	ands	r3, r2
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001920:	00d2      	lsls	r2, r2, #3
 8001922:	491f      	ldr	r1, [pc, #124]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 8001924:	4313      	orrs	r3, r2
 8001926:	634b      	str	r3, [r1, #52]	@ 0x34

          /* Enable PLL1FRACLE to latch new value . */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 8001928:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 800192a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192c:	4a1c      	ldr	r2, [pc, #112]	@ (80019a0 <HAL_RCC_OscConfig+0x66c>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001934:	e00d      	b.n	8001952 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Initialize PLL1T to 1 to use common PLL initialization function */
      RCC_OscInitStruct->PLL1.PLLT = 1U;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	645a      	str	r2, [r3, #68]	@ 0x44
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(RCC_OscInitStruct->PLL1)) != HAL_OK)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3324      	adds	r3, #36	@ 0x24
 8001940:	4619      	mov	r1, r3
 8001942:	2000      	movs	r0, #0
 8001944:	f000 fc88 	bl	8002258 <RCC_PLL_Config>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e022      	b.n	8001998 <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL2.PLLState));

  if (RCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00a      	beq.n	8001970 <HAL_RCC_OscConfig+0x63c>
  {
    if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(RCC_OscInitStruct->PLL2)) != HAL_OK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	334c      	adds	r3, #76	@ 0x4c
 800195e:	4619      	mov	r1, r3
 8001960:	2001      	movs	r0, #1
 8001962:	f000 fc79 	bl	8002258 <RCC_PLL_Config>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <HAL_RCC_OscConfig+0x63c>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e013      	b.n	8001998 <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL3.PLLState));

  if (RCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00e      	beq.n	8001996 <HAL_RCC_OscConfig+0x662>
  {
    /* Initialize PLL3T to 1 to use common PLL initialization function */
    RCC_OscInitStruct->PLL3.PLLT = 1U;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(RCC_OscInitStruct->PLL3)) != HAL_OK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3374      	adds	r3, #116	@ 0x74
 8001984:	4619      	mov	r1, r3
 8001986:	2002      	movs	r0, #2
 8001988:	f000 fc66 	bl	8002258 <RCC_PLL_Config>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_RCC_OscConfig+0x662>
    {
      return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <HAL_RCC_OscConfig+0x664>
    }
  }

  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3720      	adds	r7, #32
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	58024400 	.word	0x58024400
 80019a4:	ffff0007 	.word	0xffff0007

080019a8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e182      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x31a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b8a      	ldr	r3, [pc, #552]	@ (8001be8 <HAL_RCC_ClockConfig+0x240>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d910      	bls.n	80019ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b87      	ldr	r3, [pc, #540]	@ (8001be8 <HAL_RCC_ClockConfig+0x240>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80019d2:	4985      	ldr	r1, [pc, #532]	@ (8001be8 <HAL_RCC_ClockConfig+0x240>)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b83      	ldr	r3, [pc, #524]	@ (8001be8 <HAL_RCC_ClockConfig+0x240>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e16a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x31a>
  }

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d010      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	4b7b      	ldr	r3, [pc, #492]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d908      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a08:	4b78      	ldr	r3, [pc, #480]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	f023 0207 	bic.w	r2, r3, #7
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	4975      	ldr	r1, [pc, #468]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d010      	beq.n	8001a48 <HAL_RCC_ClockConfig+0xa0>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	4b70      	ldr	r3, [pc, #448]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d908      	bls.n	8001a48 <HAL_RCC_ClockConfig+0xa0>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a36:	4b6d      	ldr	r3, [pc, #436]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	496a      	ldr	r1, [pc, #424]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d010      	beq.n	8001a76 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699a      	ldr	r2, [r3, #24]
 8001a58:	4b64      	ldr	r3, [pc, #400]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d908      	bls.n	8001a76 <HAL_RCC_ClockConfig+0xce>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
 8001a64:	4b61      	ldr	r3, [pc, #388]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	495e      	ldr	r1, [pc, #376]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0320 	and.w	r3, r3, #32
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d010      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69da      	ldr	r2, [r3, #28]
 8001a86:	4b59      	ldr	r3, [pc, #356]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d908      	bls.n	8001aa4 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
 8001a92:	4b56      	ldr	r3, [pc, #344]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4953      	ldr	r1, [pc, #332]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d010      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x12a>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	4b4d      	ldr	r3, [pc, #308]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d908      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b4a      	ldr	r3, [pc, #296]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	f023 020f 	bic.w	r2, r3, #15
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4947      	ldr	r1, [pc, #284]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61cb      	str	r3, [r1, #28]
    }
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d055      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    MODIFY_REG(RCC->CDCFGR, RCC_CDCFGR_CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ade:	4b43      	ldr	r3, [pc, #268]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f023 020f 	bic.w	r2, r3, #15
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	4940      	ldr	r1, [pc, #256]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	618b      	str	r3, [r1, #24]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af8:	4b3c      	ldr	r3, [pc, #240]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d121      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0dc      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001b10:	4b36      	ldr	r3, [pc, #216]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d115      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0d0      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d107      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001b28:	4b30      	ldr	r3, [pc, #192]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d109      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0c4      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x31a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b38:	4b2c      	ldr	r3, [pc, #176]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0bc      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x31a>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b48:	4b28      	ldr	r3, [pc, #160]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	f023 0207 	bic.w	r2, r3, #7
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4925      	ldr	r1, [pc, #148]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b5a:	f7fe ff53 	bl	8000a04 <HAL_GetTick>
 8001b5e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b60:	e00a      	b.n	8001b78 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001b62:	f7fe ff4f 	bl	8000a04 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e0a4      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x31a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b78:	4b1c      	ldr	r3, [pc, #112]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d1eb      	bne.n	8001b62 <HAL_RCC_ClockConfig+0x1ba>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d010      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x210>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d208      	bcs.n	8001bb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba6:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f023 020f 	bic.w	r2, r3, #15
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	490e      	ldr	r1, [pc, #56]	@ (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61cb      	str	r3, [r1, #28]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <HAL_RCC_ClockConfig+0x240>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d214      	bcs.n	8001bf0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <HAL_RCC_ClockConfig+0x240>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001bce:	4906      	ldr	r1, [pc, #24]	@ (8001be8 <HAL_RCC_ClockConfig+0x240>)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b04      	ldr	r3, [pc, #16]	@ (8001be8 <HAL_RCC_ClockConfig+0x240>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e06c      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x31a>
 8001be8:	52002000 	.word	0x52002000
 8001bec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d010      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x276>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	4b32      	ldr	r3, [pc, #200]	@ (8001ccc <HAL_RCC_ClockConfig+0x324>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d208      	bcs.n	8001c1e <HAL_RCC_ClockConfig+0x276>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8001ccc <HAL_RCC_ClockConfig+0x324>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	f023 0207 	bic.w	r2, r3, #7
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	492c      	ldr	r1, [pc, #176]	@ (8001ccc <HAL_RCC_ClockConfig+0x324>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d010      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x2a4>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695a      	ldr	r2, [r3, #20]
 8001c2e:	4b27      	ldr	r3, [pc, #156]	@ (8001ccc <HAL_RCC_ClockConfig+0x324>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d208      	bcs.n	8001c4c <HAL_RCC_ClockConfig+0x2a4>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c3a:	4b24      	ldr	r3, [pc, #144]	@ (8001ccc <HAL_RCC_ClockConfig+0x324>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	4921      	ldr	r1, [pc, #132]	@ (8001ccc <HAL_RCC_ClockConfig+0x324>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d010      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	699a      	ldr	r2, [r3, #24]
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <HAL_RCC_ClockConfig+0x324>)
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d208      	bcs.n	8001c7a <HAL_RCC_ClockConfig+0x2d2>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c68:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <HAL_RCC_ClockConfig+0x324>)
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4915      	ldr	r1, [pc, #84]	@ (8001ccc <HAL_RCC_ClockConfig+0x324>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d010      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x300>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69da      	ldr	r2, [r3, #28]
 8001c8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <HAL_RCC_ClockConfig+0x324>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d208      	bcs.n	8001ca8 <HAL_RCC_ClockConfig+0x300>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
 8001c96:	4b0d      	ldr	r3, [pc, #52]	@ (8001ccc <HAL_RCC_ClockConfig+0x324>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	490a      	ldr	r1, [pc, #40]	@ (8001ccc <HAL_RCC_ClockConfig+0x324>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable with the System CPU clock */
  SystemCoreClock = HAL_RCC_GetSysClockFreq();
 8001ca8:	f000 f816 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a08      	ldr	r2, [pc, #32]	@ (8001cd0 <HAL_RCC_ClockConfig+0x328>)
 8001cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001cb2:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <HAL_RCC_ClockConfig+0x32c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fe54 	bl	8000964 <HAL_InitTick>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001cc0:	7afb      	ldrb	r3, [r7, #11]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	58024400 	.word	0x58024400
 8001cd0:	24000000 	.word	0x24000000
 8001cd4:	24000004 	.word	0x24000004

08001cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b08b      	sub	sp, #44	@ 0x2c
 8001cdc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t prescaler;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cde:	4baa      	ldr	r3, [pc, #680]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ce6:	2b18      	cmp	r3, #24
 8001ce8:	f200 8136 	bhi.w	8001f58 <HAL_RCC_GetSysClockFreq+0x280>
 8001cec:	a201      	add	r2, pc, #4	@ (adr r2, 8001cf4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf2:	bf00      	nop
 8001cf4:	08001d59 	.word	0x08001d59
 8001cf8:	08001f59 	.word	0x08001f59
 8001cfc:	08001f59 	.word	0x08001f59
 8001d00:	08001f59 	.word	0x08001f59
 8001d04:	08001f59 	.word	0x08001f59
 8001d08:	08001f59 	.word	0x08001f59
 8001d0c:	08001f59 	.word	0x08001f59
 8001d10:	08001f59 	.word	0x08001f59
 8001d14:	08001d7f 	.word	0x08001d7f
 8001d18:	08001f59 	.word	0x08001f59
 8001d1c:	08001f59 	.word	0x08001f59
 8001d20:	08001f59 	.word	0x08001f59
 8001d24:	08001f59 	.word	0x08001f59
 8001d28:	08001f59 	.word	0x08001f59
 8001d2c:	08001f59 	.word	0x08001f59
 8001d30:	08001f59 	.word	0x08001f59
 8001d34:	08001d85 	.word	0x08001d85
 8001d38:	08001f59 	.word	0x08001f59
 8001d3c:	08001f59 	.word	0x08001f59
 8001d40:	08001f59 	.word	0x08001f59
 8001d44:	08001f59 	.word	0x08001f59
 8001d48:	08001f59 	.word	0x08001f59
 8001d4c:	08001f59 	.word	0x08001f59
 8001d50:	08001f59 	.word	0x08001f59
 8001d54:	08001d8b 	.word	0x08001d8b
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */

      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8001d58:	4b8b      	ldr	r3, [pc, #556]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0320 	and.w	r3, r3, #32
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d009      	beq.n	8001d78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001d64:	4b88      	ldr	r3, [pc, #544]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	08db      	lsrs	r3, r3, #3
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	4a87      	ldr	r2, [pc, #540]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
 8001d74:	623b      	str	r3, [r7, #32]
      {
        /* Can't retrieve HSIDIV value */
        sysclockfreq = 0U;
      }

      break;
 8001d76:	e0f2      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
      break;
 8001d7c:	e0ef      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001d7e:	4b84      	ldr	r3, [pc, #528]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x2b8>)
 8001d80:	623b      	str	r3, [r7, #32]
      break;
 8001d82:	e0ec      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001d84:	4b83      	ldr	r3, [pc, #524]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x2bc>)
 8001d86:	623b      	str	r3, [r7, #32]
      break;
 8001d88:	e0e9      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x286>
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d8a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	61fb      	str	r3, [r7, #28]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
 8001d94:	4b7c      	ldr	r3, [pc, #496]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d9e:	61bb      	str	r3, [r7, #24]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001da0:	4b79      	ldr	r3, [pc, #484]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> 3));
 8001daa:	4b77      	ldr	r3, [pc, #476]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dae:	08db      	lsrs	r3, r3, #3
 8001db0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	fb02 f303 	mul.w	r3, r2, r3
 8001dba:	ee07 3a90 	vmov	s15, r3
 8001dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc2:	edc7 7a04 	vstr	s15, [r7, #16]

      if (pllm != 0U)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80c2 	beq.w	8001f52 <HAL_RCC_GetSysClockFreq+0x27a>
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d064      	beq.n	8001e9e <HAL_RCC_GetSysClockFreq+0x1c6>
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	f200 8083 	bhi.w	8001ee2 <HAL_RCC_GetSysClockFreq+0x20a>
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_RCC_GetSysClockFreq+0x112>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d038      	beq.n	8001e5a <HAL_RCC_GetSysClockFreq+0x182>
 8001de8:	e07b      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x20a>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8001dea:	4b67      	ldr	r3, [pc, #412]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d02d      	beq.n	8001e52 <HAL_RCC_GetSysClockFreq+0x17a>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001df6:	4b64      	ldr	r3, [pc, #400]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	08db      	lsrs	r3, r3, #3
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	4a62      	ldr	r2, [pc, #392]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001e02:	fa22 f303 	lsr.w	r3, r2, r3
 8001e06:	60fb      	str	r3, [r7, #12]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e20:	4b59      	ldr	r3, [pc, #356]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e28:	ee07 3a90 	vmov	s15, r3
 8001e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e30:	ed97 6a04 	vldr	s12, [r7, #16]
 8001e34:	eddf 5a58 	vldr	s11, [pc, #352]	@ 8001f98 <HAL_RCC_GetSysClockFreq+0x2c0>
 8001e38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e4c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            else
            {
              /* Can't retrieve HSIDIV value */
              pllvco = (float_t)0;
            }
            break;
 8001e50:	e069      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x24e>
              pllvco = (float_t)0;
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e58:	e065      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e64:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8001f9c <HAL_RCC_GetSysClockFreq+0x2c4>
 8001e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e6c:	4b46      	ldr	r3, [pc, #280]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e7c:	ed97 6a04 	vldr	s12, [r7, #16]
 8001e80:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8001f98 <HAL_RCC_GetSysClockFreq+0x2c0>
 8001e84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e98:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8001e9c:	e043      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	ee07 3a90 	vmov	s15, r3
 8001ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea8:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8001fa0 <HAL_RCC_GetSysClockFreq+0x2c8>
 8001eac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eb0:	4b35      	ldr	r3, [pc, #212]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb8:	ee07 3a90 	vmov	s15, r3
 8001ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ec0:	ed97 6a04 	vldr	s12, [r7, #16]
 8001ec4:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8001f98 <HAL_RCC_GetSysClockFreq+0x2c0>
 8001ec8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ecc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ed0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001edc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8001ee0:	e021      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x24e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	ee07 3a90 	vmov	s15, r3
 8001ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eec:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001f9c <HAL_RCC_GetSysClockFreq+0x2c4>
 8001ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ef4:	4b24      	ldr	r3, [pc, #144]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001efc:	ee07 3a90 	vmov	s15, r3
 8001f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f04:	ed97 6a04 	vldr	s12, [r7, #16]
 8001f08:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8001f98 <HAL_RCC_GetSysClockFreq+0x2c0>
 8001f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f20:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8001f24:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U) ;
 8001f26:	4b18      	ldr	r3, [pc, #96]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	0a5b      	lsrs	r3, r3, #9
 8001f2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f30:	3301      	adds	r3, #1
 8001f32:	60bb      	str	r3, [r7, #8]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	ee07 3a90 	vmov	s15, r3
 8001f3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f3e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f4a:	ee17 3a90 	vmov	r3, s15
 8001f4e:	623b      	str	r3, [r7, #32]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001f50:	e005      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
      break;
 8001f56:	e002      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x286>

    default:
      sysclockfreq = CSI_VALUE;
 8001f58:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x2b8>)
 8001f5a:	623b      	str	r3, [r7, #32]
      break;
 8001f5c:	bf00      	nop
  }

  prescaler = RCC->CDCFGR & RCC_CDCFGR_CPRE;
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	607b      	str	r3, [r7, #4]
  if (prescaler >= 8U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b07      	cmp	r3, #7
 8001f6c:	d905      	bls.n	8001f7a <HAL_RCC_GetSysClockFreq+0x2a2>
  {
    sysclockfreq = sysclockfreq >> (prescaler - RCC_CDCFGR_CPRE_3 + 1U);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3b07      	subs	r3, #7
 8001f72:	6a3a      	ldr	r2, [r7, #32]
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
 8001f78:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	372c      	adds	r7, #44	@ 0x2c
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	58024400 	.word	0x58024400
 8001f8c:	03d09000 	.word	0x03d09000
 8001f90:	003d0900 	.word	0x003d0900
 8001f94:	016e3600 	.word	0x016e3600
 8001f98:	46000000 	.word	0x46000000
 8001f9c:	4a742400 	.word	0x4a742400
 8001fa0:	4bb71b00 	.word	0x4bb71b00

08001fa4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  const uint8_t AHBPrescTable[8] = {1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
 8001faa:	4a10      	ldr	r2, [pc, #64]	@ (8001fec <HAL_RCC_GetHCLKFreq+0x48>)
 8001fac:	463b      	mov	r3, r7
 8001fae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fb2:	e883 0003 	stmia.w	r3, {r0, r1}

  /* SysClk */
  clock = HAL_RCC_GetSysClockFreq();
 8001fb6:	f7ff fe8f 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8001fba:	60f8      	str	r0, [r7, #12]
  /* Bus matrix divider */
  prescaler = (RCC->BMCFGR & RCC_BMCFGR_BMPRE) >> RCC_BMCFGR_BMPRE_Pos;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <HAL_RCC_GetHCLKFreq+0x4c>)
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	60bb      	str	r3, [r7, #8]
  if (prescaler >= 8U)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b07      	cmp	r3, #7
 8001fca:	d909      	bls.n	8001fe0 <HAL_RCC_GetHCLKFreq+0x3c>
  {
    clock = clock >> AHBPrescTable[prescaler - 8U];
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	3b08      	subs	r3, #8
 8001fd0:	3310      	adds	r3, #16
 8001fd2:	443b      	add	r3, r7
 8001fd4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	40d3      	lsrs	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
  }
  return (clock);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	080085a4 	.word	0x080085a4
 8001ff0:	58024400 	.word	0x58024400

08001ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK1 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 8001ffa:	f7ff ffd3 	bl	8001fa4 <HAL_RCC_GetHCLKFreq>
 8001ffe:	6078      	str	r0, [r7, #4]
  /* APB1 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE1) >> RCC_APBCFGR_PPRE1_Pos;
 8002000:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <HAL_RCC_GetPCLK1Freq+0x34>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d905      	bls.n	800201c <HAL_RCC_GetPCLK1Freq+0x28>
  {
    clock = clock >> (prescaler - 3U);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	3b03      	subs	r3, #3
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	fa22 f303 	lsr.w	r3, r2, r3
 800201a:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 800201c:	687b      	ldr	r3, [r7, #4]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	58024400 	.word	0x58024400

0800202c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK2 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 8002032:	f7ff ffb7 	bl	8001fa4 <HAL_RCC_GetHCLKFreq>
 8002036:	6078      	str	r0, [r7, #4]
  /* APB2 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE2) >> RCC_APBCFGR_PPRE2_Pos;
 8002038:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <HAL_RCC_GetPCLK2Freq+0x34>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b03      	cmp	r3, #3
 8002048:	d905      	bls.n	8002056 <HAL_RCC_GetPCLK2Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	3b03      	subs	r3, #3
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
 8002054:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 8002056:	687b      	ldr	r3, [r7, #4]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	58024400 	.word	0x58024400

08002064 <HAL_RCC_GetPCLK4Freq>:
  * @note   Each time PCLK4 changes, this function must be called to update the
  *         right PCLK4 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK4 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK4Freq(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK4 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 800206a:	f7ff ff9b 	bl	8001fa4 <HAL_RCC_GetHCLKFreq>
 800206e:	6078      	str	r0, [r7, #4]
  /* APB4 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE4) >> RCC_APBCFGR_PPRE4_Pos;
 8002070:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <HAL_RCC_GetPCLK4Freq+0x34>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	2b03      	cmp	r3, #3
 8002080:	d905      	bls.n	800208e <HAL_RCC_GetPCLK4Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	3b03      	subs	r3, #3
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
 800208c:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 800208e:	687b      	ldr	r3, [r7, #4]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	58024400 	.word	0x58024400

0800209c <HAL_RCC_GetPLL1QFreq>:
/**
  * @brief  Return the PLL1Q frequency.
  * @retval PLL1Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL1QFreq(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL1Q divider */
  pllq = ((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVQ) >> RCC_PLL1DIVR1_DIVQ_Pos) + 1U;
 80020a2:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <HAL_RCC_GetPLL1QFreq+0x28>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	0c1b      	lsrs	r3, r3, #16
 80020a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020ac:	3301      	adds	r3, #1
 80020ae:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL1Q one */
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllq);
 80020b0:	f000 fa28 	bl	8002504 <RCC_PLL1_GetVCOOutputFreq>
 80020b4:	4602      	mov	r2, r0
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	58024400 	.word	0x58024400

080020c8 <HAL_RCC_GetPLL2PFreq>:
/**
  * @brief  Return the PLL2P frequency.
  * @retval PLL2P frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2PFreq(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
  uint32_t pllp;

  /* PLL2P divider */
  pllp = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVP) >> RCC_PLL2DIVR1_DIVP_Pos) + 1U;
 80020ce:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <HAL_RCC_GetPLL2PFreq+0x28>)
 80020d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d2:	0a5b      	lsrs	r3, r3, #9
 80020d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020d8:	3301      	adds	r3, #1
 80020da:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2P one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllp);
 80020dc:	f000 fa98 	bl	8002610 <RCC_PLL2_GetVCOOutputFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	58024400 	.word	0x58024400

080020f4 <HAL_RCC_GetPLL2QFreq>:
/**
  * @brief  Return the PLL2Q frequency.
  * @retval PLL2Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2QFreq(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL2Q divider */
  pllq = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVQ) >> RCC_PLL2DIVR1_DIVQ_Pos) + 1U;
 80020fa:	4b08      	ldr	r3, [pc, #32]	@ (800211c <HAL_RCC_GetPLL2QFreq+0x28>)
 80020fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020fe:	0c1b      	lsrs	r3, r3, #16
 8002100:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002104:	3301      	adds	r3, #1
 8002106:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2Q one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllq);
 8002108:	f000 fa82 	bl	8002610 <RCC_PLL2_GetVCOOutputFreq>
 800210c:	4602      	mov	r2, r0
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	58024400 	.word	0x58024400

08002120 <HAL_RCC_GetPLL2RFreq>:
/**
  * @brief  Return the PLL2R frequency.
  * @retval PLL2R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2RFreq(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL2R divider */
  pllr = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVR) >> RCC_PLL2DIVR1_DIVR_Pos) + 1U;
 8002126:	4b08      	ldr	r3, [pc, #32]	@ (8002148 <HAL_RCC_GetPLL2RFreq+0x28>)
 8002128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800212a:	0e1b      	lsrs	r3, r3, #24
 800212c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002130:	3301      	adds	r3, #1
 8002132:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2R one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllr);
 8002134:	f000 fa6c 	bl	8002610 <RCC_PLL2_GetVCOOutputFreq>
 8002138:	4602      	mov	r2, r0
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	58024400 	.word	0x58024400

0800214c <HAL_RCC_GetPLL2SFreq>:
/**
  * @brief  Return the PLL2S frequency.
  * @retval PLL2S frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2SFreq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
  uint32_t plls;

  /* PLL2S divider */
  plls = ((RCC->PLL2DIVR2 & RCC_PLL2DIVR2_DIVS) >> RCC_PLL2DIVR2_DIVS_Pos) + 1U;
 8002152:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <HAL_RCC_GetPLL2SFreq+0x28>)
 8002154:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	3301      	adds	r3, #1
 800215e:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2R one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / plls);
 8002160:	f000 fa56 	bl	8002610 <RCC_PLL2_GetVCOOutputFreq>
 8002164:	4602      	mov	r2, r0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	58024400 	.word	0x58024400

08002178 <HAL_RCC_GetPLL2TFreq>:
/**
  * @brief  Return the PLL2T frequency.
  * @retval PLL2T frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2TFreq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
  uint32_t pllt;

  /* PLL2T divider */
  pllt = ((RCC->PLL2DIVR2 & RCC_PLL2DIVR2_DIVT) >> RCC_PLL2DIVR2_DIVT_Pos) + 1U;
 800217e:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <HAL_RCC_GetPLL2TFreq+0x2c>)
 8002180:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	3301      	adds	r3, #1
 800218c:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2T one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllt);
 800218e:	f000 fa3f 	bl	8002610 <RCC_PLL2_GetVCOOutputFreq>
 8002192:	4602      	mov	r2, r0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	58024400 	.word	0x58024400

080021a8 <HAL_RCC_GetPLL3PFreq>:
/**
  * @brief  Return the PLL3P frequency.
  * @retval PLL3P frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3PFreq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
  uint32_t pllp;

  /* PLL3P divider */
  pllp = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVP) >> RCC_PLL3DIVR1_DIVP_Pos) + 1U;
 80021ae:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <HAL_RCC_GetPLL3PFreq+0x28>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	0a5b      	lsrs	r3, r3, #9
 80021b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021b8:	3301      	adds	r3, #1
 80021ba:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3P one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllp);
 80021bc:	f000 faae 	bl	800271c <RCC_PLL3_GetVCOOutputFreq>
 80021c0:	4602      	mov	r2, r0
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	58024400 	.word	0x58024400

080021d4 <HAL_RCC_GetPLL3QFreq>:
/**
  * @brief  Return the PLL3Q frequency.
  * @retval PLL3Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3QFreq(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL3Q divider */
  pllq = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVQ) >> RCC_PLL3DIVR1_DIVQ_Pos) + 1U;
 80021da:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <HAL_RCC_GetPLL3QFreq+0x28>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	0c1b      	lsrs	r3, r3, #16
 80021e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021e4:	3301      	adds	r3, #1
 80021e6:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3Q one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllq);
 80021e8:	f000 fa98 	bl	800271c <RCC_PLL3_GetVCOOutputFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	58024400 	.word	0x58024400

08002200 <HAL_RCC_GetPLL3RFreq>:
/**
  * @brief  Return the PLL3R frequency.
  * @retval PLL3R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3RFreq(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL3R divider */
  pllr = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVR) >> RCC_PLL3DIVR1_DIVR_Pos) + 1U;
 8002206:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <HAL_RCC_GetPLL3RFreq+0x28>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	0e1b      	lsrs	r3, r3, #24
 800220c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002210:	3301      	adds	r3, #1
 8002212:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3R one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllr);
 8002214:	f000 fa82 	bl	800271c <RCC_PLL3_GetVCOOutputFreq>
 8002218:	4602      	mov	r2, r0
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	58024400 	.word	0x58024400

0800222c <HAL_RCC_GetPLL3SFreq>:
/**
  * @brief  Return the PLL3S frequency.
  * @retval PLL3S frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3SFreq(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
  uint32_t plls;

  /* PLL3S divider */
  plls = ((RCC->PLL3DIVR2 & RCC_PLL3DIVR2_DIVS) >> RCC_PLL3DIVR2_DIVS_Pos) + 1U;
 8002232:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <HAL_RCC_GetPLL3SFreq+0x28>)
 8002234:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	3301      	adds	r3, #1
 800223e:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3S one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / plls);
 8002240:	f000 fa6c 	bl	800271c <RCC_PLL3_GetVCOOutputFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	58024400 	.word	0x58024400

08002258 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	@ 0x28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_divr1_reg;
  __IO uint32_t *p_rcc_pll_divr2_reg;
  __IO uint32_t *p_rcc_pll_fracr_reg;
  HAL_StatusTypeDef ret = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tickstart;
  uint32_t pllsrc;
  uint32_t pllvco;

  p_rcc_pll_divr1_reg = &(RCC->PLL1DIVR1) + (((uint32_t)0x02) * PLLnumber);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	00da      	lsls	r2, r3, #3
 800226c:	4b9a      	ldr	r3, [pc, #616]	@ (80024d8 <RCC_PLL_Config+0x280>)
 800226e:	4413      	add	r3, r2
 8002270:	61fb      	str	r3, [r7, #28]
  p_rcc_pll_divr2_reg = &(RCC->PLL1DIVR2) + (((uint32_t)0x01) * PLLnumber);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	009a      	lsls	r2, r3, #2
 8002276:	4b99      	ldr	r3, [pc, #612]	@ (80024dc <RCC_PLL_Config+0x284>)
 8002278:	4413      	add	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]

  /* Disable the post-dividers */
  CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1PEN | RCC_PLLCFGR_PLL1QEN | RCC_PLLCFGR_PLL1REN | RCC_PLLCFGR_PLL1SEN |
 800227c:	4b98      	ldr	r3, [pc, #608]	@ (80024e0 <RCC_PLL_Config+0x288>)
 800227e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4413      	add	r3, r2
 800228c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	4a92      	ldr	r2, [pc, #584]	@ (80024e0 <RCC_PLL_Config+0x288>)
 8002298:	400b      	ands	r3, r1
 800229a:	62d3      	str	r3, [r2, #44]	@ 0x2c
                           0x00000200U) /* Hardcoded because no definition in CMSIS */
            << ((RCC_PLLCFGR_PLL2PEN_Pos - RCC_PLLCFGR_PLL1PEN_Pos)*PLLnumber));

  /* Ensure PLLx is disabled */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
 800229c:	4b90      	ldr	r3, [pc, #576]	@ (80024e0 <RCC_PLL_Config+0x288>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	498c      	ldr	r1, [pc, #560]	@ (80024e0 <RCC_PLL_Config+0x288>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80022b4:	f7fe fba6 	bl	8000a04 <HAL_GetTick>
 80022b8:	6178      	str	r0, [r7, #20]

  /* Wait till PLLx is disabled */
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
 80022ba:	e008      	b.n	80022ce <RCC_PLL_Config+0x76>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80022bc:	f7fe fba2 	bl	8000a04 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b32      	cmp	r3, #50	@ 0x32
 80022c8:	d901      	bls.n	80022ce <RCC_PLL_Config+0x76>
    {
      return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e0ff      	b.n	80024ce <RCC_PLL_Config+0x276>
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
 80022ce:	4b84      	ldr	r3, [pc, #528]	@ (80024e0 <RCC_PLL_Config+0x288>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1eb      	bne.n	80022bc <RCC_PLL_Config+0x64>
    }
  }

  if (pPLLInit->PLLState == RCC_PLL_ON)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	f040 80dd 	bne.w	80024a8 <RCC_PLL_Config+0x250>
    assert_param(IS_RCC_PLLQ_VALUE(pPLLInit->PLLQ));
    assert_param(IS_RCC_PLLR_VALUE(pPLLInit->PLLR));
    assert_param(IS_RCC_PLLS_VALUE(pPLLInit->PLLS));
    assert_param(IS_RCC_PLLT_VALUE(pPLLInit->PLLT));

    pllsrc = pPLLInit->PLLSource;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	613b      	str	r3, [r7, #16]

    /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
    if (pllsrc == RCC_PLLSOURCE_HSI)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <RCC_PLL_Config+0xb6>
    {
      /* Clock source is HSI or HSI/HSIDIV */
      pllvco = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 80022fa:	4b79      	ldr	r3, [pc, #484]	@ (80024e0 <RCC_PLL_Config+0x288>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	08db      	lsrs	r3, r3, #3
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	4a77      	ldr	r2, [pc, #476]	@ (80024e4 <RCC_PLL_Config+0x28c>)
 8002306:	fa22 f303 	lsr.w	r3, r2, r3
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
 800230c:	e007      	b.n	800231e <RCC_PLL_Config+0xc6>
    }
    else if (pllsrc == RCC_PLLSOURCE_HSE)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d102      	bne.n	800231a <RCC_PLL_Config+0xc2>
    {
      /* Clock source is HSE */
      pllvco = HSE_VALUE;
 8002314:	4b74      	ldr	r3, [pc, #464]	@ (80024e8 <RCC_PLL_Config+0x290>)
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24
 8002318:	e001      	b.n	800231e <RCC_PLL_Config+0xc6>
    }
    else
    {
      /* Clock source is CSI */
      pllvco = CSI_VALUE;
 800231a:	4b74      	ldr	r3, [pc, #464]	@ (80024ec <RCC_PLL_Config+0x294>)
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Compute VCO input frequency depending on M divider */
    pllvco = (pllvco / pPLLInit->PLLM);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002324:	fbb2 f3f3 	udiv	r3, r2, r3
 8002328:	627b      	str	r3, [r7, #36]	@ 0x24
    assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllvco));

    if (pllvco >= RCC_PLL_INPUTRANGE2_FREQMAX)
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	4a70      	ldr	r2, [pc, #448]	@ (80024f0 <RCC_PLL_Config+0x298>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d302      	bcc.n	8002338 <RCC_PLL_Config+0xe0>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE3 | RCC_PLL_VCO_HIGH;
 8002332:	2318      	movs	r3, #24
 8002334:	627b      	str	r3, [r7, #36]	@ 0x24
 8002336:	e00f      	b.n	8002358 <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE1_FREQMAX)
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	4a6e      	ldr	r2, [pc, #440]	@ (80024f4 <RCC_PLL_Config+0x29c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d902      	bls.n	8002346 <RCC_PLL_Config+0xee>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE2 | RCC_PLL_VCO_HIGH;
 8002340:	2310      	movs	r3, #16
 8002342:	627b      	str	r3, [r7, #36]	@ 0x24
 8002344:	e008      	b.n	8002358 <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE0_FREQMAX)
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	4a6b      	ldr	r2, [pc, #428]	@ (80024f8 <RCC_PLL_Config+0x2a0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d902      	bls.n	8002354 <RCC_PLL_Config+0xfc>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE1 | RCC_PLL_VCO_HIGH;
 800234e:	2308      	movs	r3, #8
 8002350:	627b      	str	r3, [r7, #36]	@ 0x24
 8002352:	e001      	b.n	8002358 <RCC_PLL_Config+0x100>
    }
    else
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE0 | RCC_PLL_VCO_LOW;
 8002354:	2302      	movs	r3, #2
 8002356:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    pllvco = (pllvco << ((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos) * PLLnumber));
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Configure PLL source and PLLM divider */
    MODIFY_REG(RCC->PLLCKSELR, (RCC_PLLCKSELR_PLLSRC | (RCC_PLLCKSELR_DIVM1 << ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))), \
 800236c:	4b5c      	ldr	r3, [pc, #368]	@ (80024e0 <RCC_PLL_Config+0x288>)
 800236e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	f043 0303 	orr.w	r3, r3, #3
 8002380:	43db      	mvns	r3, r3
 8002382:	401a      	ands	r2, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6899      	ldr	r1, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	3304      	adds	r3, #4
 800238e:	4099      	lsls	r1, r3
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	430b      	orrs	r3, r1
 8002394:	4952      	ldr	r1, [pc, #328]	@ (80024e0 <RCC_PLL_Config+0x288>)
 8002396:	4313      	orrs	r3, r2
 8002398:	628b      	str	r3, [r1, #40]	@ 0x28
               pllsrc | (pPLLInit->PLLM << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))));

    if ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) != pllsrc)
 800239a:	4b51      	ldr	r3, [pc, #324]	@ (80024e0 <RCC_PLL_Config+0x288>)
 800239c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <RCC_PLL_Config+0x154>
    {
      /* There is another PLL activated with another source */
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e090      	b.n	80024ce <RCC_PLL_Config+0x276>
    }

    /* Configure VCO input range, VCO selection and clear FRACEN */
    MODIFY_REG(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1RGE | RCC_PLLCFGR_PLL1VCOSEL | RCC_PLLCFGR_PLL1FRACEN) << (((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos)*PLLnumber)), \
 80023ac:	4b4c      	ldr	r3, [pc, #304]	@ (80024e0 <RCC_PLL_Config+0x288>)
 80023ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4413      	add	r3, r2
 80023bc:	221b      	movs	r2, #27
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	ea01 0203 	and.w	r2, r1, r3
 80023c8:	4945      	ldr	r1, [pc, #276]	@ (80024e0 <RCC_PLL_Config+0x288>)
 80023ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023cc:	4313      	orrs	r3, r2
 80023ce:	62cb      	str	r3, [r1, #44]	@ 0x2c
               pllvco);

    /* Configure PLLN, PLLP, PLLQ, PLLR, PLLS and PLLT dividers */
    WRITE_REG(*p_rcc_pll_divr1_reg, ((pPLLInit->PLLN - 1U) |
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	1e5a      	subs	r2, r3, #1
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	3b01      	subs	r3, #1
 80023dc:	025b      	lsls	r3, r3, #9
 80023de:	431a      	orrs	r2, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	041b      	lsls	r3, r3, #16
 80023e8:	431a      	orrs	r2, r3
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	061b      	lsls	r3, r3, #24
 80023f2:	431a      	orrs	r2, r3
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLP - 1U) << RCC_PLL1DIVR1_DIVP_Pos) |
                                     ((pPLLInit->PLLQ - 1U) << RCC_PLL1DIVR1_DIVQ_Pos) |
                                     ((pPLLInit->PLLR - 1U) << RCC_PLL1DIVR1_DIVR_Pos)));
    WRITE_REG(*p_rcc_pll_divr2_reg, ((pPLLInit->PLLS - 1U) |
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	1e5a      	subs	r2, r3, #1
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	3b01      	subs	r3, #1
 8002404:	021b      	lsls	r3, r3, #8
 8002406:	431a      	orrs	r2, r3
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLT - 1U) << RCC_PLL2DIVR2_DIVT_Pos)));

    if (PLLnumber == RCC_PLL1_CONFIG)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d105      	bne.n	800241e <RCC_PLL_Config+0x1c6>
    {
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1PEN);
 8002412:	4b33      	ldr	r3, [pc, #204]	@ (80024e0 <RCC_PLL_Config+0x288>)
 8002414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002416:	4a32      	ldr	r2, [pc, #200]	@ (80024e0 <RCC_PLL_Config+0x288>)
 8002418:	f043 0320 	orr.w	r3, r3, #32
 800241c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    if (pPLLInit->PLLFractional != 0U)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002422:	2b00      	cmp	r3, #0
 8002424:	d01c      	beq.n	8002460 <RCC_PLL_Config+0x208>
    {
      assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));

      p_rcc_pll_fracr_reg = &(RCC->PLL1FRACR) + (((uint32_t)0x02) * PLLnumber);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	00da      	lsls	r2, r3, #3
 800242a:	4b34      	ldr	r3, [pc, #208]	@ (80024fc <RCC_PLL_Config+0x2a4>)
 800242c:	4413      	add	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]

      /* Configure PLLFRACN */
      MODIFY_REG(*p_rcc_pll_fracr_reg, RCC_PLL1FRACR_FRACN, pPLLInit->PLLFractional << RCC_PLL1FRACR_FRACN_Pos);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b32      	ldr	r3, [pc, #200]	@ (8002500 <RCC_PLL_Config+0x2a8>)
 8002436:	4013      	ands	r3, r2
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800243c:	00d2      	lsls	r2, r2, #3
 800243e:	431a      	orrs	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	601a      	str	r2, [r3, #0]

      /* Enable PLLFRACLE */
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN << ((RCC_PLLCFGR_PLL2FRACEN_Pos - RCC_PLLCFGR_PLL1FRACEN_Pos)*PLLnumber));
 8002444:	4b26      	ldr	r3, [pc, #152]	@ (80024e0 <RCC_PLL_Config+0x288>)
 8002446:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	2201      	movs	r2, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	4a21      	ldr	r2, [pc, #132]	@ (80024e0 <RCC_PLL_Config+0x288>)
 800245c:	430b      	orrs	r3, r1
 800245e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable the PLLx */
    SET_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
 8002460:	4b1f      	ldr	r3, [pc, #124]	@ (80024e0 <RCC_PLL_Config+0x288>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	491b      	ldr	r1, [pc, #108]	@ (80024e0 <RCC_PLL_Config+0x288>)
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002476:	f7fe fac5 	bl	8000a04 <HAL_GetTick>
 800247a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
 800247c:	e008      	b.n	8002490 <RCC_PLL_Config+0x238>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800247e:	f7fe fac1 	bl	8000a04 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b32      	cmp	r3, #50	@ 0x32
 800248a:	d901      	bls.n	8002490 <RCC_PLL_Config+0x238>
      {
        return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e01e      	b.n	80024ce <RCC_PLL_Config+0x276>
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
 8002490:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <RCC_PLL_Config+0x288>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800249c:	fa01 f303 	lsl.w	r3, r1, r3
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0eb      	beq.n	800247e <RCC_PLL_Config+0x226>
 80024a6:	e010      	b.n	80024ca <RCC_PLL_Config+0x272>
    }
  }
  else
  {
    /* Disable outputs to save power when PLLx is off */
    MODIFY_REG(RCC->PLLCKSELR, ((RCC_PLLCKSELR_DIVM1 << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber)))
 80024a8:	4b0d      	ldr	r3, [pc, #52]	@ (80024e0 <RCC_PLL_Config+0x288>)
 80024aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	3304      	adds	r3, #4
 80024b2:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 80024b6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ba:	f043 0303 	orr.w	r3, r3, #3
 80024be:	43db      	mvns	r3, r3
 80024c0:	4013      	ands	r3, r2
 80024c2:	4a07      	ldr	r2, [pc, #28]	@ (80024e0 <RCC_PLL_Config+0x288>)
 80024c4:	f043 0303 	orr.w	r3, r3, #3
 80024c8:	6293      	str	r3, [r2, #40]	@ 0x28
                                | RCC_PLLCKSELR_PLLSRC), RCC_PLLSOURCE_NONE);
  }

  return ret;
 80024ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3728      	adds	r7, #40	@ 0x28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	58024430 	.word	0x58024430
 80024dc:	580244c0 	.word	0x580244c0
 80024e0:	58024400 	.word	0x58024400
 80024e4:	03d09000 	.word	0x03d09000
 80024e8:	016e3600 	.word	0x016e3600
 80024ec:	003d0900 	.word	0x003d0900
 80024f0:	007a1200 	.word	0x007a1200
 80024f4:	003d08ff 	.word	0x003d08ff
 80024f8:	001e847f 	.word	0x001e847f
 80024fc:	58024434 	.word	0x58024434
 8002500:	ffff0007 	.word	0xffff0007

08002504 <RCC_PLL1_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL1 VCO output frequency
  * @retval Value of PLL1 VCO output frequency
  */
static uint32_t RCC_PLL1_GetVCOOutputFreq(void)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	@ 0x24
 8002508:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL1 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 800250a:	4b3c      	ldr	r3, [pc, #240]	@ (80025fc <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 800250c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250e:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL1DIVR1;
 8002510:	4b3a      	ldr	r3, [pc, #232]	@ (80025fc <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002514:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL1 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800251e:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL1DIVR1_DIVN) + 1U;
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002526:	3301      	adds	r3, #1
 8002528:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <RCC_PLL1_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	e05c      	b.n	80025ee <RCC_PLL1_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) != 0U)
 8002534:	4b31      	ldr	r3, [pc, #196]	@ (80025fc <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 8002536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d006      	beq.n	800254e <RCC_PLL1_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> RCC_PLL1FRACR_FRACN_Pos;
 8002540:	4b2e      	ldr	r3, [pc, #184]	@ (80025fc <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 8002542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002544:	08db      	lsrs	r3, r3, #3
 8002546:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	e001      	b.n	8002552 <RCC_PLL1_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d019      	beq.n	8002590 <RCC_PLL1_GetVCOOutputFreq+0x8c>
 800255c:	2b02      	cmp	r3, #2
 800255e:	d81d      	bhi.n	800259c <RCC_PLL1_GetVCOOutputFreq+0x98>
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <RCC_PLL1_GetVCOOutputFreq+0x66>
 8002564:	2b01      	cmp	r3, #1
 8002566:	d016      	beq.n	8002596 <RCC_PLL1_GetVCOOutputFreq+0x92>
 8002568:	e018      	b.n	800259c <RCC_PLL1_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL1 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800256a:	4b24      	ldr	r3, [pc, #144]	@ (80025fc <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	2b00      	cmp	r3, #0
 8002574:	d009      	beq.n	800258a <RCC_PLL1_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 8002576:	4b21      	ldr	r3, [pc, #132]	@ (80025fc <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	08db      	lsrs	r3, r3, #3
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	4a1f      	ldr	r2, [pc, #124]	@ (8002600 <RCC_PLL1_GetVCOOutputFreq+0xfc>)
 8002582:	fa22 f303 	lsr.w	r3, r2, r3
 8002586:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 8002588:	e00b      	b.n	80025a2 <RCC_PLL1_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
      break;
 800258e:	e008      	b.n	80025a2 <RCC_PLL1_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL1 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 8002590:	4b1c      	ldr	r3, [pc, #112]	@ (8002604 <RCC_PLL1_GetVCOOutputFreq+0x100>)
 8002592:	61fb      	str	r3, [r7, #28]
      break;
 8002594:	e005      	b.n	80025a2 <RCC_PLL1_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL1 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 8002596:	4b1c      	ldr	r3, [pc, #112]	@ (8002608 <RCC_PLL1_GetVCOOutputFreq+0x104>)
 8002598:	61fb      	str	r3, [r7, #28]
      break;
 800259a:	e002      	b.n	80025a2 <RCC_PLL1_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
      break;
 80025a0:	bf00      	nop
  }
  
  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	ee07 3a90 	vmov	s15, r3
 80025a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	ee07 3a90 	vmov	s15, r3
 80025c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	ee07 3a90 	vmov	s15, r3
 80025ca:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80025ce:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 800260c <RCC_PLL1_GetVCOOutputFreq+0x108>
 80025d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025de:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 80025e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ea:	ee17 3a90 	vmov	r3, s15
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3724      	adds	r7, #36	@ 0x24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	58024400 	.word	0x58024400
 8002600:	03d09000 	.word	0x03d09000
 8002604:	016e3600 	.word	0x016e3600
 8002608:	003d0900 	.word	0x003d0900
 800260c:	46000000 	.word	0x46000000

08002610 <RCC_PLL2_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL2 VCO output frequency
  * @retval Value of PLL2 VCO output frequency
  */
static uint32_t RCC_PLL2_GetVCOOutputFreq(void)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	@ 0x24
 8002614:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL2 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 8002616:	4b3c      	ldr	r3, [pc, #240]	@ (8002708 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261a:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL2DIVR1;
 800261c:	4b3a      	ldr	r3, [pc, #232]	@ (8002708 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 800261e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002620:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL2 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM2) >> RCC_PLLCKSELR_DIVM2_Pos;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	0b1b      	lsrs	r3, r3, #12
 8002626:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800262a:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL2DIVR1_DIVN) + 1U;
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002632:	3301      	adds	r3, #1
 8002634:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <RCC_PLL2_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	e05c      	b.n	80026fa <RCC_PLL2_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) != 0U)
 8002640:	4b31      	ldr	r3, [pc, #196]	@ (8002708 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002644:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002648:	2b00      	cmp	r3, #0
 800264a:	d006      	beq.n	800265a <RCC_PLL2_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN) >> RCC_PLL2FRACR_FRACN_Pos;
 800264c:	4b2e      	ldr	r3, [pc, #184]	@ (8002708 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 800264e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002650:	08db      	lsrs	r3, r3, #3
 8002652:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	e001      	b.n	800265e <RCC_PLL2_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d019      	beq.n	800269c <RCC_PLL2_GetVCOOutputFreq+0x8c>
 8002668:	2b02      	cmp	r3, #2
 800266a:	d81d      	bhi.n	80026a8 <RCC_PLL2_GetVCOOutputFreq+0x98>
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <RCC_PLL2_GetVCOOutputFreq+0x66>
 8002670:	2b01      	cmp	r3, #1
 8002672:	d016      	beq.n	80026a2 <RCC_PLL2_GetVCOOutputFreq+0x92>
 8002674:	e018      	b.n	80026a8 <RCC_PLL2_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL2 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002676:	4b24      	ldr	r3, [pc, #144]	@ (8002708 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <RCC_PLL2_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 8002682:	4b21      	ldr	r3, [pc, #132]	@ (8002708 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	08db      	lsrs	r3, r3, #3
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	4a1f      	ldr	r2, [pc, #124]	@ (800270c <RCC_PLL2_GetVCOOutputFreq+0xfc>)
 800268e:	fa22 f303 	lsr.w	r3, r2, r3
 8002692:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 8002694:	e00b      	b.n	80026ae <RCC_PLL2_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
      break;
 800269a:	e008      	b.n	80026ae <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL2 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 800269c:	4b1c      	ldr	r3, [pc, #112]	@ (8002710 <RCC_PLL2_GetVCOOutputFreq+0x100>)
 800269e:	61fb      	str	r3, [r7, #28]
      break;
 80026a0:	e005      	b.n	80026ae <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL2 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 80026a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002714 <RCC_PLL2_GetVCOOutputFreq+0x104>)
 80026a4:	61fb      	str	r3, [r7, #28]
      break;
 80026a6:	e002      	b.n	80026ae <RCC_PLL2_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
      break;
 80026ac:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	ee07 3a90 	vmov	s15, r3
 80026b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	ee07 3a90 	vmov	s15, r3
 80026be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	ee07 3a90 	vmov	s15, r3
 80026cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80026da:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 8002718 <RCC_PLL2_GetVCOOutputFreq+0x108>
 80026de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ea:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 80026ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80026f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026f6:	ee17 3a90 	vmov	r3, s15
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	@ 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	58024400 	.word	0x58024400
 800270c:	03d09000 	.word	0x03d09000
 8002710:	016e3600 	.word	0x016e3600
 8002714:	003d0900 	.word	0x003d0900
 8002718:	46000000 	.word	0x46000000

0800271c <RCC_PLL3_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL3 VCO output frequency
  * @retval Value of PLL3 VCO output frequency
  */
static uint32_t RCC_PLL3_GetVCOOutputFreq(void)
{
 800271c:	b480      	push	{r7}
 800271e:	b089      	sub	sp, #36	@ 0x24
 8002720:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL3 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 8002722:	4b3c      	ldr	r3, [pc, #240]	@ (8002814 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002726:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL3DIVR1;
 8002728:	4b3a      	ldr	r3, [pc, #232]	@ (8002814 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 800272a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272c:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL3 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM3) >> RCC_PLLCKSELR_DIVM3_Pos;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	0d1b      	lsrs	r3, r3, #20
 8002732:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002736:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL3DIVR1_DIVN) + 1U;
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800273e:	3301      	adds	r3, #1
 8002740:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <RCC_PLL3_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	e05c      	b.n	8002806 <RCC_PLL3_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) != 0U)
 800274c:	4b31      	ldr	r3, [pc, #196]	@ (8002814 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 800274e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002750:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d006      	beq.n	8002766 <RCC_PLL3_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN) >> RCC_PLL3FRACR_FRACN_Pos;
 8002758:	4b2e      	ldr	r3, [pc, #184]	@ (8002814 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 800275a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275c:	08db      	lsrs	r3, r3, #3
 800275e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002762:	61bb      	str	r3, [r7, #24]
 8002764:	e001      	b.n	800276a <RCC_PLL3_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d019      	beq.n	80027a8 <RCC_PLL3_GetVCOOutputFreq+0x8c>
 8002774:	2b02      	cmp	r3, #2
 8002776:	d81d      	bhi.n	80027b4 <RCC_PLL3_GetVCOOutputFreq+0x98>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <RCC_PLL3_GetVCOOutputFreq+0x66>
 800277c:	2b01      	cmp	r3, #1
 800277e:	d016      	beq.n	80027ae <RCC_PLL3_GetVCOOutputFreq+0x92>
 8002780:	e018      	b.n	80027b4 <RCC_PLL3_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL3 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002782:	4b24      	ldr	r3, [pc, #144]	@ (8002814 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <RCC_PLL3_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 800278e:	4b21      	ldr	r3, [pc, #132]	@ (8002814 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	08db      	lsrs	r3, r3, #3
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	4a1f      	ldr	r2, [pc, #124]	@ (8002818 <RCC_PLL3_GetVCOOutputFreq+0xfc>)
 800279a:	fa22 f303 	lsr.w	r3, r2, r3
 800279e:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 80027a0:	e00b      	b.n	80027ba <RCC_PLL3_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
      break;
 80027a6:	e008      	b.n	80027ba <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL3 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 80027a8:	4b1c      	ldr	r3, [pc, #112]	@ (800281c <RCC_PLL3_GetVCOOutputFreq+0x100>)
 80027aa:	61fb      	str	r3, [r7, #28]
      break;
 80027ac:	e005      	b.n	80027ba <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL3 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 80027ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002820 <RCC_PLL3_GetVCOOutputFreq+0x104>)
 80027b0:	61fb      	str	r3, [r7, #28]
      break;
 80027b2:	e002      	b.n	80027ba <RCC_PLL3_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
      break;
 80027b8:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	ee07 3a90 	vmov	s15, r3
 80027c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	ee07 3a90 	vmov	s15, r3
 80027d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80027e6:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 8002824 <RCC_PLL3_GetVCOOutputFreq+0x108>
 80027ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f6:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 80027fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80027fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002802:	ee17 3a90 	vmov	r3, s15
}
 8002806:	4618      	mov	r0, r3
 8002808:	3724      	adds	r7, #36	@ 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	58024400 	.word	0x58024400
 8002818:	03d09000 	.word	0x03d09000
 800281c:	016e3600 	.word	0x016e3600
 8002820:	003d0900 	.word	0x003d0900
 8002824:	46000000 	.word	0x46000000

08002828 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002830:	2300      	movs	r3, #0
 8002832:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002834:	2300      	movs	r3, #0
 8002836:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 8081 	beq.w	8002948 <HAL_RCCEx_PeriphCLKConfig+0x120>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002846:	4b8c      	ldr	r3, [pc, #560]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800284e:	613b      	str	r3, [r7, #16]

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d029      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x82>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800285a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	429a      	cmp	r2, r3
 8002862:	d022      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002864:	4b85      	ldr	r3, [pc, #532]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a84      	ldr	r2, [pc, #528]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800286a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800286e:	6013      	str	r3, [r2, #0]

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002870:	4b82      	ldr	r3, [pc, #520]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      {
        ret = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	75fb      	strb	r3, [r7, #23]
 8002880:	e013      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x82>
      }
      else
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        /* excepted the RTC clock source selection that will be changed */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002882:	4b7d      	ldr	r3, [pc, #500]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800288a:	613b      	str	r3, [r7, #16]
        __HAL_RCC_BACKUPRESET_FORCE();
 800288c:	4b7a      	ldr	r3, [pc, #488]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002890:	4a79      	ldr	r2, [pc, #484]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002896:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002898:	4b77      	ldr	r3, [pc, #476]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289c:	4a76      	ldr	r2, [pc, #472]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800289e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028a2:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the content of BDCR register */
        WRITE_REG(RCC->BDCR, tmpreg);
 80028a4:	4a74      	ldr	r2, [pc, #464]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	6713      	str	r3, [r2, #112]	@ 0x70
      }
    }

    if (ret == HAL_OK)
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d149      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028b8:	d115      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7fe f8a3 	bl	8000a04 <HAL_GetTick>
 80028be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c0:	e00b      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0xb2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c2:	f7fe f89f 	bl	8000a04 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d902      	bls.n	80028da <HAL_RCCEx_PeriphCLKConfig+0xb2>
          {
            ret = HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	75fb      	strb	r3, [r7, #23]
            break;
 80028d8:	e005      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028da:	4b67      	ldr	r3, [pc, #412]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0ed      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
          }
        }
      }

      if (ret == HAL_OK)
 80028e6:	7dfb      	ldrb	r3, [r7, #23]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d128      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028f0:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00c      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80028f8:	4b5f      	ldr	r3, [pc, #380]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002904:	0919      	lsrs	r1, r3, #4
 8002906:	4b5e      	ldr	r3, [pc, #376]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002908:	400b      	ands	r3, r1
 800290a:	495b      	ldr	r1, [pc, #364]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800290c:	4313      	orrs	r3, r2
 800290e:	610b      	str	r3, [r1, #16]
 8002910:	e005      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8002912:	4b59      	ldr	r3, [pc, #356]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	4a58      	ldr	r2, [pc, #352]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002918:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800291c:	6113      	str	r3, [r2, #16]
 800291e:	4b56      	ldr	r3, [pc, #344]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002920:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800292a:	4953      	ldr	r1, [pc, #332]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800292c:	4313      	orrs	r3, r2
 800292e:	670b      	str	r3, [r1, #112]	@ 0x70
        __HAL_RCC_RTC_ENABLE();
 8002930:	4b51      	ldr	r3, [pc, #324]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002934:	4a50      	ldr	r2, [pc, #320]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800293a:	6713      	str	r3, [r2, #112]	@ 0x70
 800293c:	e004      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800293e:	7dfb      	ldrb	r3, [r7, #23]
 8002940:	75bb      	strb	r3, [r7, #22]
 8002942:	e001      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002944:	7dfb      	ldrb	r3, [r7, #23]
 8002946:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d030      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b03      	cmp	r3, #3
 800295a:	d819      	bhi.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800295c:	a201      	add	r2, pc, #4	@ (adr r2, 8002964 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800295e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002962:	bf00      	nop
 8002964:	08002997 	.word	0x08002997
 8002968:	08002975 	.word	0x08002975
 800296c:	08002983 	.word	0x08002983
 8002970:	08002997 	.word	0x08002997
      case RCC_FMCCLKSOURCE_HCLK:   /* HCLK  clock selected as FMC kernel peripheral clock */
        break;

      case RCC_FMCCLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for FMC kernel */
        /* Enable FMC kernel clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002974:	4b40      	ldr	r3, [pc, #256]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002978:	4a3f      	ldr	r2, [pc, #252]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800297a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800297e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 8002980:	e00a      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x170>

      case RCC_FMCCLKSOURCE_PLL2R:  /* PLL2_R is used as clock source for FMC kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002982:	4b3d      	ldr	r3, [pc, #244]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002986:	4a3c      	ldr	r2, [pc, #240]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002988:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800298c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 800298e:	e003      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x170>
      case RCC_FMCCLKSOURCE_HSI:   /* HSI oscillator is used as clock source for FMC kernel */
        /* FMC kernel clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	75fb      	strb	r3, [r7, #23]
        break;
 8002994:	e000      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x170>
        break;
 8002996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Set the source of FMC kernel clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800299e:	4b36      	ldr	r3, [pc, #216]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80029a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a2:	f023 0203 	bic.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4933      	ldr	r1, [pc, #204]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80029b0:	e001      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d02a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    switch (PeriphClkInit->Xspi1ClockSelection)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b20      	cmp	r3, #32
 80029c8:	d00c      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d811      	bhi.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d012      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80029d2:	2b10      	cmp	r3, #16
 80029d4:	d10d      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      case RCC_XSPI1CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi1 */
        /* Nothing to do */
        break;

      case RCC_XSPI1CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 80029d6:	4b28      	ldr	r3, [pc, #160]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80029d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029da:	4a27      	ldr	r2, [pc, #156]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80029dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80029e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 80029e2:	e00a      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      case RCC_XSPI1CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 80029e4:	4b24      	ldr	r3, [pc, #144]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80029e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e8:	4a23      	ldr	r2, [pc, #140]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80029ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 80029f0:	e003      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      default:
        ret = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	75fb      	strb	r3, [r7, #23]
        break;
 80029f6:	e000      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        break;
 80029f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d109      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      /* Configure the XSPI1 clock source */
      __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
 8002a00:	4b1d      	ldr	r3, [pc, #116]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a04:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	491a      	ldr	r1, [pc, #104]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002a12:	e001      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
 8002a16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d031      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    switch (PeriphClkInit->Xspi2ClockSelection)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	2b80      	cmp	r3, #128	@ 0x80
 8002a2a:	d00c      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002a2c:	2b80      	cmp	r3, #128	@ 0x80
 8002a2e:	d811      	bhi.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d012      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002a34:	2b40      	cmp	r3, #64	@ 0x40
 8002a36:	d10d      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      case RCC_XSPI2CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi2 */
        /* Nothing to do */
        break;

      case RCC_XSPI2CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8002a38:	4b0f      	ldr	r3, [pc, #60]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	4a0e      	ldr	r2, [pc, #56]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002a3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002a42:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 8002a44:	e00a      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x234>

      case RCC_XSPI2CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 8002a46:	4b0c      	ldr	r3, [pc, #48]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002a4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a50:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 8002a52:	e003      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x234>

      default:
        ret = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	75fb      	strb	r3, [r7, #23]
        break;
 8002a58:	e000      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x234>
        break;
 8002a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a5c:	7dfb      	ldrb	r3, [r7, #23]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d110      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Configure the XSPI2 clock source */
      __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
 8002a62:	4b05      	ldr	r3, [pc, #20]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	4902      	ldr	r1, [pc, #8]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002a74:	e008      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8002a76:	bf00      	nop
 8002a78:	58024400 	.word	0x58024400
 8002a7c:	58024800 	.word	0x58024800
 8002a80:	0fffffcf 	.word	0x0fffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a84:	7dfb      	ldrb	r3, [r7, #23]
 8002a86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002a94:	4b93      	ldr	r3, [pc, #588]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a98:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	4990      	ldr	r1, [pc, #576]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------------- SDMMC12 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC12) == RCC_PERIPHCLK_SDMMC12)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d026      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d007      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002abe:	e00d      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      case RCC_SDMMC12CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8002ac0:	4b88      	ldr	r3, [pc, #544]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac4:	4a87      	ldr	r2, [pc, #540]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002ac6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002aca:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 8002acc:	e009      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      case RCC_SDMMC12CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 8002ace:	4b85      	ldr	r3, [pc, #532]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad2:	4a84      	ldr	r2, [pc, #528]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002ad4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 8002ada:	e002      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      default:
        ret = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	75fb      	strb	r3, [r7, #23]
        break;
 8002ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d109      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
    {
      /* Set the source of SDMMC12 clock*/
      __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
 8002ae8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aec:	f023 0204 	bic.w	r2, r3, #4
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af4:	497b      	ldr	r1, [pc, #492]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002afa:	e001      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002afc:	7dfb      	ldrb	r3, [r7, #23]
 8002afe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d02e      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b14:	d019      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x322>
 8002b16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b1a:	d813      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002b20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b24:	d007      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8002b26:	e00d      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    {

      case RCC_ADCCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for ADC */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002b28:	4b6e      	ldr	r3, [pc, #440]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2c:	4a6d      	ldr	r2, [pc, #436]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b32:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 8002b34:	e00a      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x324>

      case RCC_ADCCLKSOURCE_PLL3R: /* PLL3_R is used as clock source for ADC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002b36:	4b6b      	ldr	r3, [pc, #428]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3a:	4a6a      	ldr	r2, [pc, #424]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002b3c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002b40:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 8002b42:	e003      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x324>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	75fb      	strb	r3, [r7, #23]
        break;
 8002b48:	e000      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x324>
        break;
 8002b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b52:	4b64      	ldr	r3, [pc, #400]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b56:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	4961      	ldr	r1, [pc, #388]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002b64:	e001      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x342>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
 8002b68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d03f      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    switch (PeriphClkInit->Adf1ClockSelection)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8002b7e:	d02a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002b80:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8002b84:	d824      	bhi.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002b86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b8a:	d024      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002b8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b90:	d81e      	bhi.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002b92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b96:	d01e      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002b98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b9c:	d818      	bhi.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002b9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ba2:	d00e      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8002ba4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ba8:	d812      	bhi.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d013      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002bae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bb2:	d10d      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      case RCC_ADF1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for ADF1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002bb4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb8:	4a4a      	ldr	r2, [pc, #296]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>

      case RCC_ADF1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for ADF1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002bc2:	4b48      	ldr	r3, [pc, #288]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc6:	4a47      	ldr	r2, [pc, #284]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002bc8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002bcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 8002bce:	e003      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      case RCC_ADF1CLKSOURCE_HSI:    /* HSI is used as clock source for ADF1 */
        /* ADF1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	75fb      	strb	r3, [r7, #23]
        break;
 8002bd4:	e000      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        break;
 8002bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bd8:	7dfb      	ldrb	r3, [r7, #23]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    {
      /* Set the source of ADF1 clock*/
      __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 8002bde:	4b41      	ldr	r3, [pc, #260]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be2:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	493e      	ldr	r1, [pc, #248]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002bf0:	e001      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf2:	7dfb      	ldrb	r3, [r7, #23]
 8002bf4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- CEC configuration ---------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c02:	4b38      	ldr	r3, [pc, #224]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002c04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	4935      	ldr	r1, [pc, #212]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	650b      	str	r3, [r1, #80]	@ 0x50
  }

  /*---------------------- ETH1 REF configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1REF) == RCC_PERIPHCLK_ETH1REF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1REFCLKSOURCE(PeriphClkInit->Eth1RefClockSelection));

    /* Configure the ETH1 REF clock source */
    __HAL_RCC_ETH1REF_CONFIG(PeriphClkInit->Eth1RefClockSelection);
 8002c20:	4b30      	ldr	r3, [pc, #192]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	492d      	ldr	r1, [pc, #180]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*---------------------- ETH1PHY configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d020      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYCLKSOURCE(PeriphClkInit->Eth1PhyClockSelection));

    switch (PeriphClkInit->Eth1PhyClockSelection)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00c      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8002c46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_ETH1PHYCLKSOURCE_HSE:    /* HSE is used as clock source for ETH PHY */
        /* ETH PHY clock source configuration done later after clock selection check */
        break;

      case RCC_ETH1PHYCLKSOURCE_PLL3S:  /* PLL3_S is used as clock source for ETH PHY */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_SCLK);
 8002c4c:	4b25      	ldr	r3, [pc, #148]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	4a24      	ldr	r2, [pc, #144]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002c52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002c56:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ETH PHY clock source configuration done later after clock selection check */
        break;
 8002c58:	e003      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x43a>

      default:
        ret = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	75fb      	strb	r3, [r7, #23]
        break;
 8002c5e:	e000      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
        break;
 8002c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d109      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of ETH PHY clock*/
      __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyClockSelection);
 8002c68:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c6c:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	491b      	ldr	r1, [pc, #108]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002c7a:	e001      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c7c:	7dfb      	ldrb	r3, [r7, #23]
 8002c7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d02f      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c94:	d00e      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002c96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c9a:	d812      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002ca0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ca4:	d10d      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x49a>
    {
      case RCC_FDCANCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for FDCAN kernel */
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002caa:	4a0e      	ldr	r2, [pc, #56]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002cac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002cb2:	e00a      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x4a2>

      case RCC_FDCANCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for FDCAN kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002cc0:	e003      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      case RCC_FDCANCLKSOURCE_HSE:   /* HSE is used as clock source for FDCAN kernel */
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	75fb      	strb	r3, [r7, #23]
        break;
 8002cc6:	e000      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x4a2>
        break;
 8002cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002cd0:	4b04      	ldr	r3, [pc, #16]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cd4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cdc:	4901      	ldr	r1, [pc, #4]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	650b      	str	r3, [r1, #80]	@ 0x50
 8002ce2:	e003      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8002ce4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce8:	7dfb      	ldrb	r3, [r7, #23]
 8002cea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1_I3C1) == RCC_PERIPHCLK_I2C1_I3C1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d02c      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1_I3C1CLKSOURCE(PeriphClkInit->I2c1_I3c1ClockSelection));

    switch (PeriphClkInit->I2c1_I3c1ClockSelection)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d00:	d017      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002d02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d06:	d811      	bhi.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002d08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d0c:	d011      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d12:	d80b      	bhi.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00c      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002d18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d1c:	d106      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_I2C1_I3C1CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C1/I3C1*/
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002d1e:	4b97      	ldr	r3, [pc, #604]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d22:	4a96      	ldr	r2, [pc, #600]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002d24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002d28:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;
 8002d2a:	e003      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_I2C1_I3C1CLKSOURCE_CSI:     /* CSI is used as clock source for I2C1/I3C1*/
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	75fb      	strb	r3, [r7, #23]
        break;
 8002d30:	e000      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d34:	7dfb      	ldrb	r3, [r7, #23]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x526>
    {
      /* Set the source of I2C1/I3C1 clock*/
      __HAL_RCC_I2C1_I3C1_CONFIG(PeriphClkInit->I2c1_I3c1ClockSelection);
 8002d3a:	4b90      	ldr	r3, [pc, #576]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d3e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d46:	498d      	ldr	r1, [pc, #564]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	650b      	str	r3, [r1, #80]	@ 0x50
 8002d4c:	e001      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
 8002d50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C2/I2C3 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C23) == RCC_PERIPHCLK_I2C23)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d02c      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C23CLKSOURCE(PeriphClkInit->I2c23ClockSelection));

    switch (PeriphClkInit->I2c23ClockSelection)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d66:	d017      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002d68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d6c:	d811      	bhi.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8002d6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d72:	d011      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d78:	d80b      	bhi.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00c      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d82:	d106      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x56a>
    {
      case RCC_I2C23CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C2/I2C3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002d84:	4b7d      	ldr	r3, [pc, #500]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d88:	4a7c      	ldr	r2, [pc, #496]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002d8a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;
 8002d90:	e003      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x572>
      case RCC_I2C23CLKSOURCE_CSI:     /* CSI is used as clock source for I2C2/I2C3 */
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	75fb      	strb	r3, [r7, #23]
        break;
 8002d96:	e000      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x572>
        break;
 8002d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d9a:	7dfb      	ldrb	r3, [r7, #23]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d109      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Set the source of I2C2/I2C3 clock*/
      __HAL_RCC_I2C23_CONFIG(PeriphClkInit->I2c23ClockSelection);
 8002da0:	4b76      	ldr	r3, [pc, #472]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002da4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dac:	4973      	ldr	r1, [pc, #460]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	650b      	str	r3, [r1, #80]	@ 0x50
 8002db2:	e001      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db4:	7dfb      	ldrb	r3, [r7, #23]
 8002db6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d045      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dcc:	d02a      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8002dce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dd2:	d824      	bhi.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8002dd4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002dd8:	d026      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002dda:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002dde:	d81e      	bhi.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8002de0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002de4:	d022      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002de6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002dea:	d818      	bhi.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8002dec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002df0:	d00e      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8002df2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002df6:	d812      	bhi.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d019      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e00:	d10d      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      case RCC_LPTIM1CLKSOURCE_PCLK1: /* PCLK1 as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002e02:	4b5e      	ldr	r3, [pc, #376]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e06:	4a5d      	ldr	r2, [pc, #372]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002e0e:	e010      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x60a>

      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for LPTIM1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002e10:	4b5a      	ldr	r3, [pc, #360]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e14:	4a59      	ldr	r2, [pc, #356]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002e16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002e1c:	e009      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        /* HSI, HSE, or CSI oscillator is used as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	75fb      	strb	r3, [r7, #23]
        break;
 8002e22:	e006      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8002e24:	bf00      	nop
 8002e26:	e004      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8002e28:	bf00      	nop
 8002e2a:	e002      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8002e2c:	bf00      	nop
 8002e2e:	e000      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8002e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d109      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e38:	4b50      	ldr	r3, [pc, #320]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e3c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e44:	494d      	ldr	r1, [pc, #308]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	650b      	str	r3, [r1, #80]	@ 0x50
 8002e4a:	e001      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x628>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e4c:	7dfb      	ldrb	r3, [r7, #23]
 8002e4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2/LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM23) == RCC_PERIPHCLK_LPTIM23)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d045      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
  {
    switch (PeriphClkInit->Lptim23ClockSelection)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e60:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002e64:	d02a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x694>
 8002e66:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002e6a:	d824      	bhi.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002e6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e70:	d026      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x698>
 8002e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e76:	d81e      	bhi.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002e78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e7c:	d022      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8002e7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e82:	d818      	bhi.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002e84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e88:	d00e      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8002e8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e8e:	d812      	bhi.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d019      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8002e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e98:	d10d      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_LPTIM23CLKSOURCE_PCLK4: /* PCLK4 as clock source for LPTIM2/LPTIM3 */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM23CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002e9a:	4b38      	ldr	r3, [pc, #224]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9e:	4a37      	ldr	r2, [pc, #220]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 8002ea6:	e010      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x6a2>

      case RCC_LPTIM23CLKSOURCE_PLL3R: /* PLL3_R is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002ea8:	4b34      	ldr	r3, [pc, #208]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eac:	4a33      	ldr	r2, [pc, #204]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002eae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 8002eb4:	e009      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	75fb      	strb	r3, [r7, #23]
        break;
 8002eba:	e006      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8002ebc:	bf00      	nop
 8002ebe:	e004      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8002ec0:	bf00      	nop
 8002ec2:	e002      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8002ec4:	bf00      	nop
 8002ec6:	e000      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8002ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eca:	7dfb      	ldrb	r3, [r7, #23]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      /* Set the source of LPTIM2/LPTIM3 clock*/
      __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
 8002ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002edc:	4927      	ldr	r1, [pc, #156]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	658b      	str	r3, [r1, #88]	@ 0x58
 8002ee2:	e001      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM4/LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM45) == RCC_PERIPHCLK_LPTIM45)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d047      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x75c>
  {
    switch (PeriphClkInit->Lptim45ClockSelection)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002efc:	d02a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8002efe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002f02:	d824      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x726>
 8002f04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f08:	d026      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x730>
 8002f0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f0e:	d81e      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x726>
 8002f10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f14:	d022      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x734>
 8002f16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f1a:	d818      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x726>
 8002f1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f20:	d00e      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x718>
 8002f22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f26:	d812      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x726>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d019      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x738>
 8002f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f30:	d10d      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x726>
      case RCC_LPTIM45CLKSOURCE_PCLK4:  /* PCLK4 as clock source for LPTIM4/LPTIM5 */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM45CLKSOURCE_PLL2P: /* PLL2 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002f32:	4b12      	ldr	r3, [pc, #72]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f36:	4a11      	ldr	r2, [pc, #68]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 8002f3e:	e010      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x73a>

      case RCC_LPTIM45CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002f40:	4b0e      	ldr	r3, [pc, #56]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	4a0d      	ldr	r2, [pc, #52]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002f46:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 8002f4c:	e009      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM4/LPTIM5 clock */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	75fb      	strb	r3, [r7, #23]
        break;
 8002f52:	e006      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8002f54:	bf00      	nop
 8002f56:	e004      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8002f58:	bf00      	nop
 8002f5a:	e002      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8002f5c:	bf00      	nop
 8002f5e:	e000      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8002f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10b      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x758>
    {
      /* Set the source of LPTIM4/LPTIM5 clock */
      __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
 8002f68:	4b04      	ldr	r3, [pc, #16]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f74:	4901      	ldr	r1, [pc, #4]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	658b      	str	r3, [r1, #88]	@ 0x58
 8002f7a:	e003      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8002f7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
 8002f82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d034      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	2b05      	cmp	r3, #5
 8002f96:	d81d      	bhi.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8002f98:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x778>)
 8002f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9e:	bf00      	nop
 8002fa0:	08002fdb 	.word	0x08002fdb
 8002fa4:	08002fb9 	.word	0x08002fb9
 8002fa8:	08002fc7 	.word	0x08002fc7
 8002fac:	08002fdb 	.word	0x08002fdb
 8002fb0:	08002fdb 	.word	0x08002fdb
 8002fb4:	08002fdb 	.word	0x08002fdb
      case RCC_LPUART1CLKSOURCE_PCLK4: /* PCLK4 selected as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002fb8:	4b91      	ldr	r3, [pc, #580]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbc:	4a90      	ldr	r2, [pc, #576]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002fbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x7b4>

      case RCC_LPUART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002fc6:	4b8e      	ldr	r3, [pc, #568]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fca:	4a8d      	ldr	r2, [pc, #564]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002fd2:	e003      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	75fb      	strb	r3, [r7, #23]
        break;
 8002fd8:	e000      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        break;
 8002fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fdc:	7dfb      	ldrb	r3, [r7, #23]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fe2:	4b87      	ldr	r3, [pc, #540]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe6:	f023 0207 	bic.w	r2, r3, #7
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	4984      	ldr	r1, [pc, #528]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	658b      	str	r3, [r1, #88]	@ 0x58
 8002ff4:	e001      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff6:	7dfb      	ldrb	r3, [r7, #23]
 8002ff8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
  {
    /* LTDC internally connected to PLL3_R output clock */
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003006:	4b7e      	ldr	r3, [pc, #504]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300a:	4a7d      	ldr	r2, [pc, #500]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800300c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003010:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d021      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x83a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    switch (PeriphClkInit->PssiClockSelection)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x806>
 8003026:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800302a:	d00a      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800302c:	e006      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      case RCC_PSSICLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for PSSI */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 800302e:	4b74      	ldr	r3, [pc, #464]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003032:	4a73      	ldr	r2, [pc, #460]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003034:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003038:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* PSSI clock source configuration done later after clock selection check */
        break;
 800303a:	e003      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        /* HSI, HSE, or CSI oscillator is used as source of PSSI clock */
        /* PSSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	75fb      	strb	r3, [r7, #23]
        break;
 8003040:	e000      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8003042:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003044:	7dfb      	ldrb	r3, [r7, #23]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d109      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x836>
    {
      /* Set the source of PSSI clock*/
      __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
 800304a:	4b6d      	ldr	r3, [pc, #436]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800304c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800304e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003056:	496a      	ldr	r1, [pc, #424]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003058:	4313      	orrs	r3, r2
 800305a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800305c:	e001      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305e:	7dfb      	ldrb	r3, [r7, #23]
 8003060:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d043      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003072:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003076:	d02c      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8003078:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800307c:	d826      	bhi.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800307e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003082:	d028      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8003084:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003088:	d820      	bhi.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800308a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800308e:	d016      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x896>
 8003090:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003094:	d81a      	bhi.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 800309a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800309e:	d007      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80030a0:	e014      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x8a4>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI1 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 80030a2:	4b57      	ldr	r3, [pc, #348]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80030a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a6:	4a56      	ldr	r2, [pc, #344]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80030a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030ae:	e013      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80030b0:	4b53      	ldr	r3, [pc, #332]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80030b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b4:	4a52      	ldr	r2, [pc, #328]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80030b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030bc:	e00c      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 80030be:	4b50      	ldr	r3, [pc, #320]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80030c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c2:	4a4f      	ldr	r2, [pc, #316]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80030c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80030c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030ca:	e005      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	75fb      	strb	r3, [r7, #23]
        break;
 80030d0:	e002      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 80030d2:	bf00      	nop
 80030d4:	e000      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 80030d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030de:	4b48      	ldr	r3, [pc, #288]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80030e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ea:	4945      	ldr	r1, [pc, #276]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	654b      	str	r3, [r1, #84]	@ 0x54
 80030f0:	e001      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f2:	7dfb      	ldrb	r3, [r7, #23]
 80030f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d04b      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x972>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003106:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800310a:	d032      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800310c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003110:	d82c      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x944>
 8003112:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003116:	d02e      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003118:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800311c:	d826      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x944>
 800311e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003122:	d02a      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003124:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003128:	d820      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x944>
 800312a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800312e:	d016      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x936>
 8003130:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003134:	d81a      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x944>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800313a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800313e:	d007      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x928>
 8003140:	e014      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x944>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI2 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003142:	4b2f      	ldr	r3, [pc, #188]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003146:	4a2e      	ldr	r2, [pc, #184]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800314c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800314e:	e015      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003150:	4b2b      	ldr	r3, [pc, #172]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	4a2a      	ldr	r2, [pc, #168]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800315a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800315c:	e00e      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI2 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 800315e:	4b28      	ldr	r3, [pc, #160]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003162:	4a27      	ldr	r2, [pc, #156]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003164:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003168:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800316a:	e007      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x954>
      case RCC_SAI2CLKSOURCE_SPDIF: /* SPDIF clock is used as source of SAI2 clock */
        /* SAI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	75fb      	strb	r3, [r7, #23]
        break;
 8003170:	e004      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8003172:	bf00      	nop
 8003174:	e002      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8003176:	bf00      	nop
 8003178:	e000      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 800317a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800317c:	7dfb      	ldrb	r3, [r7, #23]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x96e>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003182:	4b1f      	ldr	r3, [pc, #124]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003186:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800318e:	491c      	ldr	r1, [pc, #112]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003190:	4313      	orrs	r3, r2
 8003192:	654b      	str	r3, [r1, #84]	@ 0x54
 8003194:	e001      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x972>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003196:	7dfb      	ldrb	r3, [r7, #23]
 8003198:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPDIFRX configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d03e      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031ae:	d029      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 80031b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031b4:	d820      	bhi.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80031b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031ba:	d016      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80031bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031c0:	d81a      	bhi.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 80031c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031ca:	d007      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 80031cc:	e014      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for SPDIFRX */
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 80031ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80031d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d2:	4a0b      	ldr	r2, [pc, #44]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80031d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031da:	e014      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL2R: /* PLL2_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 80031dc:	4b08      	ldr	r3, [pc, #32]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80031de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e0:	4a07      	ldr	r2, [pc, #28]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80031e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031e8:	e00d      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80031ea:	4b05      	ldr	r3, [pc, #20]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80031ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ee:	4a04      	ldr	r2, [pc, #16]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80031f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80031f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031f6:	e006      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x9de>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	75fb      	strb	r3, [r7, #23]
        break;
 80031fc:	e003      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80031fe:	bf00      	nop
 8003200:	58024400 	.word	0x58024400
        break;
 8003204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003206:	7dfb      	ldrb	r3, [r7, #23]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d109      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
    {
      /* Set the source of SPDIFRX clock */
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800320c:	4b8e      	ldr	r3, [pc, #568]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800320e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003210:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003218:	498b      	ldr	r1, [pc, #556]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800321a:	4313      	orrs	r3, r2
 800321c:	650b      	str	r3, [r1, #80]	@ 0x50
 800321e:	e001      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003220:	7dfb      	ldrb	r3, [r7, #23]
 8003222:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d043      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003238:	d02c      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 800323a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800323e:	d826      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003240:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003244:	d028      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003246:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800324a:	d820      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xa66>
 800324c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003250:	d016      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8003252:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003256:	d81a      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 800325c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003260:	d007      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xa4a>
 8003262:	e014      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI1 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003264:	4b78      	ldr	r3, [pc, #480]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003268:	4a77      	ldr	r2, [pc, #476]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800326a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800326e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003270:	e013      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003272:	4b75      	ldr	r3, [pc, #468]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003276:	4a74      	ldr	r2, [pc, #464]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800327c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800327e:	e00c      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003280:	4b71      	ldr	r3, [pc, #452]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003284:	4a70      	ldr	r2, [pc, #448]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003286:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800328a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800328c:	e005      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xa72>
      case RCC_SPI1CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	75fb      	strb	r3, [r7, #23]
        break;
 8003292:	e002      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 8003294:	bf00      	nop
 8003296:	e000      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 8003298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800329a:	7dfb      	ldrb	r3, [r7, #23]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d109      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
      /* Set the source of SPI1 clock*/
      __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 80032a0:	4b69      	ldr	r3, [pc, #420]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ac:	4966      	ldr	r1, [pc, #408]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	654b      	str	r3, [r1, #84]	@ 0x54
 80032b2:	e001      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b4:	7dfb      	ldrb	r3, [r7, #23]
 80032b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI2/SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI23) == RCC_PERIPHCLK_SPI23)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d03c      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c8:	2b40      	cmp	r3, #64	@ 0x40
 80032ca:	d026      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80032cc:	2b40      	cmp	r3, #64	@ 0x40
 80032ce:	d821      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80032d0:	2b30      	cmp	r3, #48	@ 0x30
 80032d2:	d024      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 80032d4:	2b30      	cmp	r3, #48	@ 0x30
 80032d6:	d81d      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d014      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xade>
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d819      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xac2>
 80032e4:	2b10      	cmp	r3, #16
 80032e6:	d007      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80032e8:	e014      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xaec>
    {
      case RCC_SPI23CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI2/SPI3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 80032ea:	4b57      	ldr	r3, [pc, #348]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ee:	4a56      	ldr	r2, [pc, #344]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 80032f6:	e013      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80032f8:	4b53      	ldr	r3, [pc, #332]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fc:	4a52      	ldr	r2, [pc, #328]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003302:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 8003304:	e00c      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003306:	4b50      	ldr	r3, [pc, #320]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330a:	4a4f      	ldr	r2, [pc, #316]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800330c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003310:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 8003312:	e005      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
      case RCC_SPI23CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI2/SPI3 clock */
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	75fb      	strb	r3, [r7, #23]
        break;
 8003318:	e002      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800331a:	bf00      	nop
 800331c:	e000      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800331e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003320:	7dfb      	ldrb	r3, [r7, #23]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xb12>
    {
      /* Set the source of SPI2/SPI3 clock*/
      __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
 8003326:	4b48      	ldr	r3, [pc, #288]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800332a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003332:	4945      	ldr	r1, [pc, #276]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003334:	4313      	orrs	r3, r2
 8003336:	650b      	str	r3, [r1, #80]	@ 0x50
 8003338:	e001      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333a:	7dfb      	ldrb	r3, [r7, #23]
 800333c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d03c      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    switch (PeriphClkInit->Spi45ClockSelection)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800334e:	2b50      	cmp	r3, #80	@ 0x50
 8003350:	d022      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003352:	2b50      	cmp	r3, #80	@ 0x50
 8003354:	d81d      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003356:	2b40      	cmp	r3, #64	@ 0x40
 8003358:	d020      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800335a:	2b40      	cmp	r3, #64	@ 0x40
 800335c:	d819      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 800335e:	2b30      	cmp	r3, #48	@ 0x30
 8003360:	d01e      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003362:	2b30      	cmp	r3, #48	@ 0x30
 8003364:	d815      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003366:	2b20      	cmp	r3, #32
 8003368:	d00c      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 800336a:	2b20      	cmp	r3, #32
 800336c:	d811      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 800336e:	2b00      	cmp	r3, #0
 8003370:	d018      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003372:	2b10      	cmp	r3, #16
 8003374:	d10d      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
      case RCC_SPI45CLKSOURCE_PCLK2:  /* PCLK2 as clock source for SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003376:	4b34      	ldr	r3, [pc, #208]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337a:	4a33      	ldr	r2, [pc, #204]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800337c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003380:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 8003382:	e010      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_SPI45CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003384:	4b30      	ldr	r3, [pc, #192]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003388:	4a2f      	ldr	r2, [pc, #188]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800338a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800338e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 8003390:	e009      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
      case RCC_SPI45CLKSOURCE_HSE: /* HSE oscillator clock is used as source of SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	75fb      	strb	r3, [r7, #23]
        break;
 8003396:	e006      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003398:	bf00      	nop
 800339a:	e004      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800339c:	bf00      	nop
 800339e:	e002      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80033a0:	bf00      	nop
 80033a2:	e000      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80033a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d109      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of SPI4/SPI5 clock */
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80033ac:	4b26      	ldr	r3, [pc, #152]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80033ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b8:	4923      	ldr	r1, [pc, #140]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	654b      	str	r3, [r1, #84]	@ 0x54
 80033be:	e001      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d03f      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xc28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033d4:	2b50      	cmp	r3, #80	@ 0x50
 80033d6:	d022      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80033d8:	2b50      	cmp	r3, #80	@ 0x50
 80033da:	d81d      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80033dc:	2b40      	cmp	r3, #64	@ 0x40
 80033de:	d020      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 80033e0:	2b40      	cmp	r3, #64	@ 0x40
 80033e2:	d819      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80033e4:	2b30      	cmp	r3, #48	@ 0x30
 80033e6:	d01e      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80033e8:	2b30      	cmp	r3, #48	@ 0x30
 80033ea:	d815      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	d00c      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d811      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d018      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80033f8:	2b10      	cmp	r3, #16
 80033fa:	d10d      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
      case RCC_SPI6CLKSOURCE_PCLK4: /* PCLK4 as clock source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 80033fc:	4b12      	ldr	r3, [pc, #72]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80033fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003400:	4a11      	ldr	r2, [pc, #68]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003406:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003408:	e010      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xc04>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 800340a:	4b0f      	ldr	r3, [pc, #60]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800340c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340e:	4a0e      	ldr	r2, [pc, #56]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003414:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003416:	e009      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xc04>
      case RCC_SPI6CLKSOURCE_HSE: /* HSE oscillator is used as source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	75fb      	strb	r3, [r7, #23]
        break;
 800341c:	e006      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 800341e:	bf00      	nop
 8003420:	e004      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8003422:	bf00      	nop
 8003424:	e002      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8003426:	bf00      	nop
 8003428:	e000      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 800342a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800342c:	7dfb      	ldrb	r3, [r7, #23]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10c      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xc24>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003432:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003436:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800343e:	4902      	ldr	r1, [pc, #8]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003440:	4313      	orrs	r3, r2
 8003442:	658b      	str	r3, [r1, #88]	@ 0x58
 8003444:	e004      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003446:	bf00      	nop
 8003448:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d034      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003460:	2b05      	cmp	r3, #5
 8003462:	d81d      	bhi.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003464:	a201      	add	r2, pc, #4	@ (adr r2, 800346c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346a:	bf00      	nop
 800346c:	080034a7 	.word	0x080034a7
 8003470:	08003485 	.word	0x08003485
 8003474:	08003493 	.word	0x08003493
 8003478:	080034a7 	.word	0x080034a7
 800347c:	080034a7 	.word	0x080034a7
 8003480:	080034a7 	.word	0x080034a7
      case RCC_USART1CLKSOURCE_PCLK2: /* PCLK2 as clock source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003484:	4b69      	ldr	r3, [pc, #420]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003488:	4a68      	ldr	r2, [pc, #416]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800348a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800348e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 8003490:	e00a      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>

      case RCC_USART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003492:	4b66      	ldr	r3, [pc, #408]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003496:	4a65      	ldr	r2, [pc, #404]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800349c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 800349e:	e003      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
      case RCC_USART1CLKSOURCE_LSE: /* LSE oscillator is used as source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	75fb      	strb	r3, [r7, #23]
        break;
 80034a4:	e000      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
        break;
 80034a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    {
      /* Set the source of USART1 clock */
      __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034ae:	4b5f      	ldr	r3, [pc, #380]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80034b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b2:	f023 0207 	bic.w	r2, r3, #7
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034ba:	495c      	ldr	r1, [pc, #368]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	654b      	str	r3, [r1, #84]	@ 0x54
 80034c0:	e001      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
 80034c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------- USART2/USART3/UART4/UART5/UART7/UART8 Configuration --------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d033      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xd12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART234578CLKSOURCE(PeriphClkInit->Usart234578ClockSelection));

    switch (PeriphClkInit->Usart234578ClockSelection)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	d81c      	bhi.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80034da:	a201      	add	r2, pc, #4	@ (adr r2, 80034e0 <HAL_RCCEx_PeriphCLKConfig+0xcb8>)
 80034dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e0:	0800351b 	.word	0x0800351b
 80034e4:	080034f9 	.word	0x080034f9
 80034e8:	08003507 	.word	0x08003507
 80034ec:	0800351b 	.word	0x0800351b
 80034f0:	0800351b 	.word	0x0800351b
 80034f4:	0800351b 	.word	0x0800351b
      case RCC_USART234578CLKSOURCE_PCLK1: /* PCLK1 as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 80034f8:	4b4c      	ldr	r3, [pc, #304]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80034fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fc:	4a4b      	ldr	r2, [pc, #300]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80034fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003502:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 8003504:	e00a      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xcf4>

      case RCC_USART234578CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003506:	4b49      	ldr	r3, [pc, #292]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350a:	4a48      	ldr	r2, [pc, #288]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800350c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003510:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 8003512:	e003      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        /* LSE,  oscillator is used as source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	75fb      	strb	r3, [r7, #23]
        break;
 8003518:	e000      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        break;
 800351a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800351c:	7dfb      	ldrb	r3, [r7, #23]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d109      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      /* Set the source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003522:	4b42      	ldr	r3, [pc, #264]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003526:	f023 0207 	bic.w	r2, r3, #7
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352e:	493f      	ldr	r1, [pc, #252]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003530:	4313      	orrs	r3, r2
 8003532:	650b      	str	r3, [r1, #80]	@ 0x50
 8003534:	e001      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xd12>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003536:	7dfb      	ldrb	r3, [r7, #23]
 8003538:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBPHYC Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHYC) == RCC_PERIPHCLK_USBPHYC)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d027      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCCLKSOURCE(PeriphClkInit->UsbPhycClockSelection));

    switch (PeriphClkInit->UsbPhycClockSelection)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800354a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800354e:	d008      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003554:	d80c      	bhi.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xd48>
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00d      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800355a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800355e:	d00a      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003560:	e006      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      case RCC_USBPHYCCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USBPHYC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003562:	4b32      	ldr	r3, [pc, #200]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003566:	4a31      	ldr	r2, [pc, #196]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800356c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USBPHYC clock source configuration done later after clock selection check */
        break;
 800356e:	e003      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xd50>
      case RCC_USBPHYCCLKSOURCE_HSE_DIV2: /* HSE divided by 2 is used as clock source for USBPHYC */
        /* USBPHYC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	75fb      	strb	r3, [r7, #23]
        break;
 8003574:	e000      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003576:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003578:	7dfb      	ldrb	r3, [r7, #23]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBPHYC_CONFIG(PeriphClkInit->UsbPhycClockSelection);
 800357e:	4b2b      	ldr	r3, [pc, #172]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003582:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800358a:	4928      	ldr	r1, [pc, #160]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800358c:	4313      	orrs	r3, r2
 800358e:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003590:	e001      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003592:	7dfb      	ldrb	r3, [r7, #23]
 8003594:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBOTGFS Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGFS) == RCC_PERIPHCLK_USBOTGFS)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	da2c      	bge.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGFSCLKSOURCE(PeriphClkInit->UsbOtgFsClockSelection));

    switch (PeriphClkInit->UsbOtgFsClockSelection)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035a2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80035a6:	d017      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 80035a8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80035ac:	d811      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 80035ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035b2:	d011      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 80035b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035b8:	d80b      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00c      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 80035be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035c2:	d106      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      case RCC_USBOTGFSCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USB OTG FS */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80035c4:	4b19      	ldr	r3, [pc, #100]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80035c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c8:	4a18      	ldr	r2, [pc, #96]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80035ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;
 80035d0:	e003      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xdb2>
      case RCC_USBOTGFSCLKSOURCE_CLK48: /* USBPHYC CLK48 is used as clock source for USB OTG FS */
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
        break;
 80035d6:	e000      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 80035d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d109      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBOTGFS_CONFIG(PeriphClkInit->UsbOtgFsClockSelection);
 80035e0:	4b12      	ldr	r3, [pc, #72]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80035e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035ec:	490f      	ldr	r1, [pc, #60]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80035f2:	e001      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f4:	7dfb      	ldrb	r3, [r7, #23]
 80035f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d009      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
 8003604:	4b09      	ldr	r3, [pc, #36]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003612:	4906      	ldr	r1, [pc, #24]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003614:	4313      	orrs	r3, r2
 8003616:	610b      	str	r3, [r1, #16]
  }

  if (status == HAL_OK)
 8003618:	7dbb      	ldrb	r3, [r7, #22]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xdfa>
  {
    return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e000      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  }
  return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	58024400 	.word	0x58024400

08003630 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_USART234578 : USART2/3/5/7/8 peripheral clock
  *            @arg RCC_PERIPHCLK_USBOTGFS    : USBOTGFS peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0; /* Set to 0 for returned value if no source clock */
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
  uint32_t clocksource;
  uint32_t ethclocksource;
  uint32_t prescaler;

  switch (PeriphClk)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003642:	f001 82db 	beq.w	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x15cc>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800364c:	f201 8326 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003656:	f001 8298 	beq.w	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x155a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003660:	f201 831c 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800366a:	f001 822a 	beq.w	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003674:	f201 8312 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800367e:	f001 81bb 	beq.w	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c8>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003688:	f201 8308 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003692:	f001 8139 	beq.w	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800369c:	f201 82fe 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036a6:	f001 80bf 	beq.w	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036b0:	f201 82f4 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036ba:	f001 8069 	beq.w	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x1160>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036c4:	f201 82ea 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036ce:	f001 8007 	beq.w	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036d8:	f201 82e0 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036e2:	f000 87a2 	beq.w	800462a <HAL_RCCEx_GetPeriphCLKFreq+0xffa>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036ec:	f201 82d6 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036f6:	f000 877a 	beq.w	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003700:	f201 82cc 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800370a:	f000 8713 	beq.w	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003714:	f201 82c2 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800371e:	f000 86ad 	beq.w	800447c <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003728:	f201 82b8 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003732:	f000 8644 	beq.w	80043be <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800373c:	f201 82ae 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003746:	f000 861c 	beq.w	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003750:	f201 82a4 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800375a:	f000 8606 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003764:	f201 829a 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800376e:	f000 8592 	beq.w	8004296 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003778:	f201 8290 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003782:	f000 8519 	beq.w	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800378c:	f201 8286 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003796:	f000 84a3 	beq.w	80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a0:	f201 827c 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037aa:	f000 842d 	beq.w	8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b4:	f201 8272 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037be:	f000 83c5 	beq.w	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037c8:	f201 8268 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d2:	f000 8365 	beq.w	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037dc:	f201 825e 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037e6:	f000 831d 	beq.w	8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037f0:	f201 8254 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037fa:	f000 82ed 	beq.w	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003804:	f201 824a 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b80      	cmp	r3, #128	@ 0x80
 800380c:	f000 8291 	beq.w	8003d32 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b80      	cmp	r3, #128	@ 0x80
 8003814:	f201 8242 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b20      	cmp	r3, #32
 800381c:	d84c      	bhi.n	80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	f001 823b 	beq.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3b01      	subs	r3, #1
 800382a:	2b1f      	cmp	r3, #31
 800382c:	f201 8236 	bhi.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003830:	a201      	add	r2, pc, #4	@ (adr r2, 8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	080038c5 	.word	0x080038c5
 800383c:	08003993 	.word	0x08003993
 8003840:	08004c9d 	.word	0x08004c9d
 8003844:	08003a23 	.word	0x08003a23
 8003848:	08004c9d 	.word	0x08004c9d
 800384c:	08004c9d 	.word	0x08004c9d
 8003850:	08004c9d 	.word	0x08004c9d
 8003854:	08003abb 	.word	0x08003abb
 8003858:	08004c9d 	.word	0x08004c9d
 800385c:	08004c9d 	.word	0x08004c9d
 8003860:	08004c9d 	.word	0x08004c9d
 8003864:	08004c9d 	.word	0x08004c9d
 8003868:	08004c9d 	.word	0x08004c9d
 800386c:	08004c9d 	.word	0x08004c9d
 8003870:	08004c9d 	.word	0x08004c9d
 8003874:	08003b5d 	.word	0x08003b5d
 8003878:	08004c9d 	.word	0x08004c9d
 800387c:	08004c9d 	.word	0x08004c9d
 8003880:	08004c9d 	.word	0x08004c9d
 8003884:	08004c9d 	.word	0x08004c9d
 8003888:	08004c9d 	.word	0x08004c9d
 800388c:	08004c9d 	.word	0x08004c9d
 8003890:	08004c9d 	.word	0x08004c9d
 8003894:	08004c9d 	.word	0x08004c9d
 8003898:	08004c9d 	.word	0x08004c9d
 800389c:	08004c9d 	.word	0x08004c9d
 80038a0:	08004c9d 	.word	0x08004c9d
 80038a4:	08004c9d 	.word	0x08004c9d
 80038a8:	08004c9d 	.word	0x08004c9d
 80038ac:	08004c9d 	.word	0x08004c9d
 80038b0:	08004c9d 	.word	0x08004c9d
 80038b4:	08003bc9 	.word	0x08003bc9
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b40      	cmp	r3, #64	@ 0x40
 80038bc:	f000 81fb 	beq.w	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      }
      break;

    default:
      /* Nothing to do, frequency is by default set to 0 */
      break;
 80038c0:	f001 b9ec 	b.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
      clocksource = __HAL_RCC_GET_FMC_SOURCE();
 80038c4:	4ba1      	ldr	r3, [pc, #644]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80038c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80038ca:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80038ce:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80038d2:	d004      	beq.n	80038de <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 80038d4:	4b9d      	ldr	r3, [pc, #628]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80038d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	e001      	b.n	80038e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 80038de:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80038e2:	613b      	str	r3, [r7, #16]
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d80e      	bhi.n	8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d844      	bhi.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 80038f0:	a201      	add	r2, pc, #4	@ (adr r2, 80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80038f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f6:	bf00      	nop
 80038f8:	08003913 	.word	0x08003913
 80038fc:	0800391b 	.word	0x0800391b
 8003900:	0800392f 	.word	0x0800392f
 8003904:	08003943 	.word	0x08003943
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800390e:	d02e      	beq.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
          break;
 8003910:	e033      	b.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
          frequency = HAL_RCC_GetHCLKFreq();
 8003912:	f7fe fb47 	bl	8001fa4 <HAL_RCC_GetHCLKFreq>
 8003916:	6178      	str	r0, [r7, #20]
          break;
 8003918:	e039      	b.n	800398e <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 800391a:	4b8c      	ldr	r3, [pc, #560]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800391c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d02c      	beq.n	8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
            frequency = HAL_RCC_GetPLL1QFreq();
 8003926:	f7fe fbb9 	bl	800209c <HAL_RCC_GetPLL1QFreq>
 800392a:	6178      	str	r0, [r7, #20]
          break;
 800392c:	e028      	b.n	8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 800392e:	4b87      	ldr	r3, [pc, #540]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003932:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d025      	beq.n	8003986 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
            frequency = HAL_RCC_GetPLL2RFreq();
 800393a:	f7fe fbf1 	bl	8002120 <HAL_RCC_GetPLL2RFreq>
 800393e:	6178      	str	r0, [r7, #20]
          break;
 8003940:	e021      	b.n	8003986 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003942:	4b82      	ldr	r3, [pc, #520]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d01e      	beq.n	800398c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800394e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b00      	cmp	r3, #0
 8003958:	d018      	beq.n	800398c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800395a:	4b7c      	ldr	r3, [pc, #496]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	08db      	lsrs	r3, r3, #3
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	4a7a      	ldr	r2, [pc, #488]	@ (8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8003966:	fa22 f303 	lsr.w	r3, r2, r3
 800396a:	617b      	str	r3, [r7, #20]
          break;
 800396c:	e00e      	b.n	800398c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          frequency = (HAL_RCC_GetHCLKFreq() / 4U);
 800396e:	f7fe fb19 	bl	8001fa4 <HAL_RCC_GetHCLKFreq>
 8003972:	4603      	mov	r3, r0
 8003974:	089b      	lsrs	r3, r3, #2
 8003976:	617b      	str	r3, [r7, #20]
          break;
 8003978:	e009      	b.n	800398e <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 800397a:	bf00      	nop
 800397c:	f001 b993 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003980:	bf00      	nop
 8003982:	f001 b990 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003986:	bf00      	nop
 8003988:	f001 b98d 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800398c:	bf00      	nop
      break;
 800398e:	f001 b98a 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_XSPI1_SOURCE();
 8003992:	4b6e      	ldr	r3, [pc, #440]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003994:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003998:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800399c:	2b40      	cmp	r3, #64	@ 0x40
 800399e:	d004      	beq.n	80039aa <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80039a0:	4b6a      	ldr	r3, [pc, #424]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80039a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80039a8:	e000      	b.n	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80039aa:	2340      	movs	r3, #64	@ 0x40
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	2b40      	cmp	r3, #64	@ 0x40
 80039b2:	d027      	beq.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2b40      	cmp	r3, #64	@ 0x40
 80039b8:	d82a      	bhi.n	8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d017      	beq.n	80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d824      	bhi.n	8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	2b10      	cmp	r3, #16
 80039d0:	d004      	beq.n	80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
          break;
 80039d2:	e01d      	b.n	8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          frequency = HAL_RCC_GetHCLKFreq();
 80039d4:	f7fe fae6 	bl	8001fa4 <HAL_RCC_GetHCLKFreq>
 80039d8:	6178      	str	r0, [r7, #20]
          break;
 80039da:	e020      	b.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 80039dc:	4b5b      	ldr	r3, [pc, #364]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80039de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d016      	beq.n	8003a16 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = HAL_RCC_GetPLL2SFreq();
 80039e8:	f7fe fbb0 	bl	800214c <HAL_RCC_GetPLL2SFreq>
 80039ec:	6178      	str	r0, [r7, #20]
          break;
 80039ee:	e012      	b.n	8003a16 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_TCLK) != 0U)
 80039f0:	4b56      	ldr	r3, [pc, #344]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80039f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00f      	beq.n	8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
            frequency = HAL_RCC_GetPLL2TFreq();
 80039fc:	f7fe fbbc 	bl	8002178 <HAL_RCC_GetPLL2TFreq>
 8003a00:	6178      	str	r0, [r7, #20]
          break;
 8003a02:	e00b      	b.n	8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
          frequency = (HAL_RCC_GetHCLKFreq() / 4U);
 8003a04:	f7fe face 	bl	8001fa4 <HAL_RCC_GetHCLKFreq>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	089b      	lsrs	r3, r3, #2
 8003a0c:	617b      	str	r3, [r7, #20]
          break;
 8003a0e:	e006      	b.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
          break;
 8003a10:	bf00      	nop
 8003a12:	f001 b948 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003a16:	bf00      	nop
 8003a18:	f001 b945 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003a1c:	bf00      	nop
      break;
 8003a1e:	f001 b942 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_XSPI2_SOURCE();
 8003a22:	4b4a      	ldr	r3, [pc, #296]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003a24:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003a28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a30:	d004      	beq.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
 8003a32:	4b46      	ldr	r3, [pc, #280]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a3a:	e001      	b.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8003a3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a48:	d028      	beq.n	8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a50:	d82a      	bhi.n	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b80      	cmp	r3, #128	@ 0x80
 8003a56:	d017      	beq.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	2b80      	cmp	r3, #128	@ 0x80
 8003a5c:	d824      	bhi.n	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b40      	cmp	r3, #64	@ 0x40
 8003a68:	d004      	beq.n	8003a74 <HAL_RCCEx_GetPeriphCLKFreq+0x444>
          break;
 8003a6a:	e01d      	b.n	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HAL_RCC_GetHCLKFreq();
 8003a6c:	f7fe fa9a 	bl	8001fa4 <HAL_RCC_GetHCLKFreq>
 8003a70:	6178      	str	r0, [r7, #20]
          break;
 8003a72:	e020      	b.n	8003ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 8003a74:	4b35      	ldr	r3, [pc, #212]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d016      	beq.n	8003aae <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HAL_RCC_GetPLL2SFreq();
 8003a80:	f7fe fb64 	bl	800214c <HAL_RCC_GetPLL2SFreq>
 8003a84:	6178      	str	r0, [r7, #20]
          break;
 8003a86:	e012      	b.n	8003aae <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_TCLK) != 0U)
 8003a88:	4b30      	ldr	r3, [pc, #192]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00f      	beq.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
            frequency = HAL_RCC_GetPLL2TFreq();
 8003a94:	f7fe fb70 	bl	8002178 <HAL_RCC_GetPLL2TFreq>
 8003a98:	6178      	str	r0, [r7, #20]
          break;
 8003a9a:	e00b      	b.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
          frequency = (HAL_RCC_GetHCLKFreq() / 4U);
 8003a9c:	f7fe fa82 	bl	8001fa4 <HAL_RCC_GetHCLKFreq>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	089b      	lsrs	r3, r3, #2
 8003aa4:	617b      	str	r3, [r7, #20]
          break;
 8003aa6:	e006      	b.n	8003ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          break;
 8003aa8:	bf00      	nop
 8003aaa:	f001 b8fc 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003aae:	bf00      	nop
 8003ab0:	f001 b8f9 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003ab4:	bf00      	nop
      break;
 8003ab6:	f001 b8f6 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003aba:	4b24      	ldr	r3, [pc, #144]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003abe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aca:	d02a      	beq.n	8003b22 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ad2:	d82f      	bhi.n	8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d004      	beq.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ae0:	d016      	beq.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          break;
 8003ae2:	e027      	b.n	8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ae4:	4b19      	ldr	r3, [pc, #100]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d024      	beq.n	8003b3a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8003af0:	4b16      	ldr	r3, [pc, #88]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01e      	beq.n	8003b3a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003afc:	4b13      	ldr	r3, [pc, #76]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	08db      	lsrs	r3, r3, #3
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	4a12      	ldr	r2, [pc, #72]	@ (8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8003b08:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]
          break;
 8003b0e:	e014      	b.n	8003b3a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003b10:	4b0e      	ldr	r3, [pc, #56]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d011      	beq.n	8003b40 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
            frequency = CSI_VALUE;
 8003b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003b1e:	617b      	str	r3, [r7, #20]
          break;
 8003b20:	e00e      	b.n	8003b40 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b22:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            frequency = HSE_VALUE;
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8003b30:	617b      	str	r3, [r7, #20]
          break;
 8003b32:	e008      	b.n	8003b46 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          break;
 8003b34:	bf00      	nop
 8003b36:	f001 b8b6 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003b3a:	bf00      	nop
 8003b3c:	f001 b8b3 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003b40:	bf00      	nop
 8003b42:	f001 b8b0 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003b46:	bf00      	nop
      break;
 8003b48:	f001 b8ad 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8003b4c:	58024400 	.word	0x58024400
 8003b50:	03d09000 	.word	0x03d09000
 8003b54:	003d0900 	.word	0x003d0900
 8003b58:	016e3600 	.word	0x016e3600
      clocksource = __HAL_RCC_GET_ADC_SOURCE();
 8003b5c:	4b9a      	ldr	r3, [pc, #616]	@ (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b60:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b6c:	d01f      	beq.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b74:	d81f      	bhi.n	8003bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d004      	beq.n	8003b86 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
          break;
 8003b84:	e017      	b.n	8003bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8003b86:	4b90      	ldr	r3, [pc, #576]	@ (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d014      	beq.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
            frequency = HAL_RCC_GetPLL2PFreq();
 8003b92:	f7fe fa99 	bl	80020c8 <HAL_RCC_GetPLL2PFreq>
 8003b96:	6178      	str	r0, [r7, #20]
          break;
 8003b98:	e010      	b.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8003b9a:	4b8b      	ldr	r3, [pc, #556]	@ (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00d      	beq.n	8003bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HAL_RCC_GetPLL3RFreq();
 8003ba6:	f7fe fb2b 	bl	8002200 <HAL_RCC_GetPLL3RFreq>
 8003baa:	6178      	str	r0, [r7, #20]
          break;
 8003bac:	e009      	b.n	8003bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = RCC_GetCLKPFreq();
 8003bae:	f001 f893 	bl	8004cd8 <RCC_GetCLKPFreq>
 8003bb2:	6178      	str	r0, [r7, #20]
          break;
 8003bb4:	e006      	b.n	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
          break;
 8003bb6:	bf00      	nop
 8003bb8:	f001 b875 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003bbc:	bf00      	nop
 8003bbe:	f001 b872 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003bc2:	bf00      	nop
      break;
 8003bc4:	f001 b86f 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_ADF1_SOURCE();
 8003bc8:	4b7f      	ldr	r3, [pc, #508]	@ (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bcc:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003bd8:	d048      	beq.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003be0:	d85a      	bhi.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003be8:	d037      	beq.n	8003c5a <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bf0:	d852      	bhi.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003bf8:	d02b      	beq.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c00:	d84a      	bhi.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c08:	d019      	beq.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c10:	d842      	bhi.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d004      	beq.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c1e:	d004      	beq.n	8003c2a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
          break;
 8003c20:	e03a      	b.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = HAL_RCC_GetHCLKFreq();
 8003c22:	f7fe f9bf 	bl	8001fa4 <HAL_RCC_GetHCLKFreq>
 8003c26:	6178      	str	r0, [r7, #20]
          break;
 8003c28:	e043      	b.n	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8003c2a:	4b67      	ldr	r3, [pc, #412]	@ (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d033      	beq.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            frequency = HAL_RCC_GetPLL2PFreq();
 8003c36:	f7fe fa47 	bl	80020c8 <HAL_RCC_GetPLL2PFreq>
 8003c3a:	6178      	str	r0, [r7, #20]
          break;
 8003c3c:	e02f      	b.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8003c3e:	4b62      	ldr	r3, [pc, #392]	@ (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d02c      	beq.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HAL_RCC_GetPLL3PFreq();
 8003c4a:	f7fe faad 	bl	80021a8 <HAL_RCC_GetPLL3PFreq>
 8003c4e:	6178      	str	r0, [r7, #20]
          break;
 8003c50:	e028      	b.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003c52:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8003c56:	617b      	str	r3, [r7, #20]
          break;
 8003c58:	e02b      	b.n	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003c5a:	4b5b      	ldr	r3, [pc, #364]	@ (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d021      	beq.n	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
            frequency = CSI_VALUE;
 8003c66:	4b59      	ldr	r3, [pc, #356]	@ (8003dcc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8003c68:	617b      	str	r3, [r7, #20]
          break;
 8003c6a:	e01e      	b.n	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c6c:	4b56      	ldr	r3, [pc, #344]	@ (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01b      	beq.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8003c78:	4b53      	ldr	r3, [pc, #332]	@ (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d015      	beq.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c84:	4b50      	ldr	r3, [pc, #320]	@ (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	08db      	lsrs	r3, r3, #3
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	4a50      	ldr	r2, [pc, #320]	@ (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
 8003c94:	617b      	str	r3, [r7, #20]
          break;
 8003c96:	e00b      	b.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
          break;
 8003c98:	bf00      	nop
 8003c9a:	f001 b804 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003c9e:	bf00      	nop
 8003ca0:	f001 b801 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003ca4:	bf00      	nop
 8003ca6:	f000 bffe 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003caa:	bf00      	nop
 8003cac:	f000 bffb 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003cb0:	bf00      	nop
      break;
 8003cb2:	f000 bff8 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_CEC_SOURCE();
 8003cb6:	4b44      	ldr	r3, [pc, #272]	@ (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003cbe:	613b      	str	r3, [r7, #16]
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cc6:	d01f      	beq.n	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cce:	d824      	bhi.n	8003d1a <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d004      	beq.n	8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
          break;
 8003cde:	e01c      	b.n	8003d1a <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ce0:	4b39      	ldr	r3, [pc, #228]	@ (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d019      	beq.n	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
            frequency = LSE_VALUE;
 8003cec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cf0:	617b      	str	r3, [r7, #20]
          break;
 8003cf2:	e015      	b.n	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cf4:	4b34      	ldr	r3, [pc, #208]	@ (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003cf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d012      	beq.n	8003d26 <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
            frequency = LSI_VALUE;
 8003d00:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003d04:	617b      	str	r3, [r7, #20]
          break;
 8003d06:	e00e      	b.n	8003d26 <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003d08:	4b2f      	ldr	r3, [pc, #188]	@ (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00b      	beq.n	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
            frequency = CSI_VALUE;
 8003d14:	4b2d      	ldr	r3, [pc, #180]	@ (8003dcc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8003d16:	617b      	str	r3, [r7, #20]
          break;
 8003d18:	e008      	b.n	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
          break;
 8003d1a:	bf00      	nop
 8003d1c:	f000 bfc3 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003d20:	bf00      	nop
 8003d22:	f000 bfc0 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003d26:	bf00      	nop
 8003d28:	f000 bfbd 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003d2c:	bf00      	nop
      break;
 8003d2e:	f000 bfba 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_ETH1REF_SOURCE();
 8003d32:	4b25      	ldr	r3, [pc, #148]	@ (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d42:	d013      	beq.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d4a:	d833      	bhi.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d033      	beq.n	8003dba <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d58:	d12c      	bne.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d02c      	beq.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
            frequency = HSE_VALUE;
 8003d66:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8003d68:	617b      	str	r3, [r7, #20]
          break;
 8003d6a:	e029      	b.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          ethclocksource = __HAL_RCC_GET_ETH1PHY_SOURCE();
 8003d6c:	4b16      	ldr	r3, [pc, #88]	@ (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d004      	beq.n	8003d86 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d82:	d009      	beq.n	8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
              break;
 8003d84:	e015      	b.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
              if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d86:	4b10      	ldr	r3, [pc, #64]	@ (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00c      	beq.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
                frequency = HSE_VALUE;
 8003d92:	4b10      	ldr	r3, [pc, #64]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8003d94:	617b      	str	r3, [r7, #20]
              break;
 8003d96:	e009      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
              if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 8003d98:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
                frequency = HAL_RCC_GetPLL3SFreq();
 8003da4:	f7fe fa42 	bl	800222c <HAL_RCC_GetPLL3SFreq>
 8003da8:	6178      	str	r0, [r7, #20]
              break;
 8003daa:	e001      	b.n	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
              break;
 8003dac:	bf00      	nop
 8003dae:	e008      	b.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              break;
 8003db0:	bf00      	nop
          break;
 8003db2:	e006      	b.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
          break;
 8003db4:	bf00      	nop
 8003db6:	f000 bf76 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003dba:	bf00      	nop
 8003dbc:	f000 bf73 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003dc0:	bf00      	nop
      break;
 8003dc2:	f000 bf70 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8003dc6:	bf00      	nop
 8003dc8:	58024400 	.word	0x58024400
 8003dcc:	003d0900 	.word	0x003d0900
 8003dd0:	03d09000 	.word	0x03d09000
 8003dd4:	016e3600 	.word	0x016e3600
      clocksource = __HAL_RCC_GET_ETH1PHY_SOURCE();
 8003dd8:	4b87      	ldr	r3, [pc, #540]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ddc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d004      	beq.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003dee:	d009      	beq.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          break;
 8003df0:	e016      	b.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003df2:	4b81      	ldr	r3, [pc, #516]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00c      	beq.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            frequency = HSE_VALUE;
 8003dfe:	4b7f      	ldr	r3, [pc, #508]	@ (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x9cc>)
 8003e00:	617b      	str	r3, [r7, #20]
          break;
 8003e02:	e009      	b.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 8003e04:	4b7c      	ldr	r3, [pc, #496]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e08:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d006      	beq.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = HAL_RCC_GetPLL3SFreq();
 8003e10:	f7fe fa0c 	bl	800222c <HAL_RCC_GetPLL3SFreq>
 8003e14:	6178      	str	r0, [r7, #20]
          break;
 8003e16:	e002      	b.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8003e18:	bf00      	nop
 8003e1a:	f000 bf44 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003e1e:	bf00      	nop
      break;
 8003e20:	f000 bf41 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_FDCAN_SOURCE();
 8003e24:	4b74      	ldr	r3, [pc, #464]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e28:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e34:	d01e      	beq.n	8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e3c:	d824      	bhi.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e4a:	d009      	beq.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
          break;
 8003e4c:	e01c      	b.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e4e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d019      	beq.n	8003e8e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
            frequency = HSE_VALUE;
 8003e5a:	4b68      	ldr	r3, [pc, #416]	@ (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x9cc>)
 8003e5c:	617b      	str	r3, [r7, #20]
          break;
 8003e5e:	e016      	b.n	8003e8e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8003e60:	4b65      	ldr	r3, [pc, #404]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d013      	beq.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
            frequency = HAL_RCC_GetPLL1QFreq();
 8003e6c:	f7fe f916 	bl	800209c <HAL_RCC_GetPLL1QFreq>
 8003e70:	6178      	str	r0, [r7, #20]
          break;
 8003e72:	e00f      	b.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8003e74:	4b60      	ldr	r3, [pc, #384]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00c      	beq.n	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HAL_RCC_GetPLL2PFreq();
 8003e80:	f7fe f922 	bl	80020c8 <HAL_RCC_GetPLL2PFreq>
 8003e84:	6178      	str	r0, [r7, #20]
          break;
 8003e86:	e008      	b.n	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          break;
 8003e88:	bf00      	nop
 8003e8a:	f000 bf0c 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003e8e:	bf00      	nop
 8003e90:	f000 bf09 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003e94:	bf00      	nop
 8003e96:	f000 bf06 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003e9a:	bf00      	nop
      break;
 8003e9c:	f000 bf03 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_I2C23_SOURCE();
 8003ea0:	4b55      	ldr	r3, [pc, #340]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eb0:	d037      	beq.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eb8:	d83c      	bhi.n	8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ec0:	d019      	beq.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ec8:	d834      	bhi.n	8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ed6:	d004      	beq.n	8003ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          break;
 8003ed8:	e02c      	b.n	8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003eda:	f7fe f88b 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 8003ede:	6178      	str	r0, [r7, #20]
          break;
 8003ee0:	e032      	b.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8003ee2:	4b45      	ldr	r3, [pc, #276]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d025      	beq.n	8003f3a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
            frequency = HAL_RCC_GetPLL3RFreq();
 8003eee:	f7fe f987 	bl	8002200 <HAL_RCC_GetPLL3RFreq>
 8003ef2:	6178      	str	r0, [r7, #20]
          break;
 8003ef4:	e021      	b.n	8003f3a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ef6:	4b40      	ldr	r3, [pc, #256]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d01e      	beq.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8003f02:	4b3d      	ldr	r3, [pc, #244]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d018      	beq.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f0e:	4b3a      	ldr	r3, [pc, #232]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	08db      	lsrs	r3, r3, #3
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	4a39      	ldr	r2, [pc, #228]	@ (8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>)
 8003f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1e:	617b      	str	r3, [r7, #20]
          break;
 8003f20:	e00e      	b.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003f22:	4b35      	ldr	r3, [pc, #212]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
            frequency = CSI_VALUE;
 8003f2e:	4b35      	ldr	r3, [pc, #212]	@ (8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>)
 8003f30:	617b      	str	r3, [r7, #20]
          break;
 8003f32:	e008      	b.n	8003f46 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003f34:	bf00      	nop
 8003f36:	f000 beb6 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003f3a:	bf00      	nop
 8003f3c:	f000 beb3 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003f40:	bf00      	nop
 8003f42:	f000 beb0 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003f46:	bf00      	nop
      break;
 8003f48:	f000 bead 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_I2C1_I3C1_SOURCE();
 8003f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f50:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f5c:	d037      	beq.n	8003fce <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f64:	d83c      	bhi.n	8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f6c:	d019      	beq.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f74:	d834      	bhi.n	8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d004      	beq.n	8003f86 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f82:	d004      	beq.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          break;
 8003f84:	e02c      	b.n	8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f86:	f7fe f835 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 8003f8a:	6178      	str	r0, [r7, #20]
          break;
 8003f8c:	e032      	b.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8003f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d025      	beq.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
            frequency = HAL_RCC_GetPLL3RFreq();
 8003f9a:	f7fe f931 	bl	8002200 <HAL_RCC_GetPLL3RFreq>
 8003f9e:	6178      	str	r0, [r7, #20]
          break;
 8003fa0:	e021      	b.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fa2:	4b15      	ldr	r3, [pc, #84]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d01e      	beq.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8003fae:	4b12      	ldr	r3, [pc, #72]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d018      	beq.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003fba:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	08db      	lsrs	r3, r3, #3
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>)
 8003fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fca:	617b      	str	r3, [r7, #20]
          break;
 8003fcc:	e00e      	b.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003fce:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00b      	beq.n	8003ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
            frequency = CSI_VALUE;
 8003fda:	4b0a      	ldr	r3, [pc, #40]	@ (8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>)
 8003fdc:	617b      	str	r3, [r7, #20]
          break;
 8003fde:	e008      	b.n	8003ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
          break;
 8003fe0:	bf00      	nop
 8003fe2:	f000 be60 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003fe6:	bf00      	nop
 8003fe8:	f000 be5d 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003fec:	bf00      	nop
 8003fee:	f000 be5a 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003ff2:	bf00      	nop
      break;
 8003ff4:	f000 be57 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8003ff8:	58024400 	.word	0x58024400
 8003ffc:	016e3600 	.word	0x016e3600
 8004000:	03d09000 	.word	0x03d09000
 8004004:	003d0900 	.word	0x003d0900
      clocksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004008:	4ba0      	ldr	r3, [pc, #640]	@ (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 800400a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800400c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004018:	d04f      	beq.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004020:	d84f      	bhi.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004028:	d03d      	beq.n	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004030:	d847      	bhi.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004038:	d02b      	beq.n	8004092 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004040:	d83f      	bhi.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004048:	d019      	beq.n	800407e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004050:	d837      	bhi.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d004      	beq.n	8004062 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800405e:	d004      	beq.n	800406a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
          break;
 8004060:	e02f      	b.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004062:	f7fd ffc7 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 8004066:	6178      	str	r0, [r7, #20]
          break;
 8004068:	e038      	b.n	80040dc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 800406a:	4b88      	ldr	r3, [pc, #544]	@ (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 800406c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d028      	beq.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
            frequency = HAL_RCC_GetPLL2PFreq();
 8004076:	f7fe f827 	bl	80020c8 <HAL_RCC_GetPLL2PFreq>
 800407a:	6178      	str	r0, [r7, #20]
          break;
 800407c:	e024      	b.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 800407e:	4b83      	ldr	r3, [pc, #524]	@ (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004082:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d021      	beq.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
            frequency = HAL_RCC_GetPLL3RFreq();
 800408a:	f7fe f8b9 	bl	8002200 <HAL_RCC_GetPLL3RFreq>
 800408e:	6178      	str	r0, [r7, #20]
          break;
 8004090:	e01d      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004092:	4b7e      	ldr	r3, [pc, #504]	@ (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d01a      	beq.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
            frequency = LSE_VALUE;
 800409e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040a2:	617b      	str	r3, [r7, #20]
          break;
 80040a4:	e016      	b.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040a6:	4b79      	ldr	r3, [pc, #484]	@ (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 80040a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d013      	beq.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = LSI_VALUE;
 80040b2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80040b6:	617b      	str	r3, [r7, #20]
          break;
 80040b8:	e00f      	b.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          frequency = RCC_GetCLKPFreq();
 80040ba:	f000 fe0d 	bl	8004cd8 <RCC_GetCLKPFreq>
 80040be:	6178      	str	r0, [r7, #20]
          break;
 80040c0:	e00c      	b.n	80040dc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          break;
 80040c2:	bf00      	nop
 80040c4:	f000 bdef 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80040c8:	bf00      	nop
 80040ca:	f000 bdec 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80040ce:	bf00      	nop
 80040d0:	f000 bde9 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80040d4:	bf00      	nop
 80040d6:	f000 bde6 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80040da:	bf00      	nop
      break;
 80040dc:	f000 bde3 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_LPTIM23_SOURCE();
 80040e0:	4b6a      	ldr	r3, [pc, #424]	@ (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80040f0:	d04f      	beq.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80040f8:	d84f      	bhi.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004100:	d03d      	beq.n	800417e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004108:	d847      	bhi.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004110:	d02b      	beq.n	800416a <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004118:	d83f      	bhi.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004120:	d019      	beq.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004128:	d837      	bhi.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d004      	beq.n	800413a <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004136:	d004      	beq.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          break;
 8004138:	e02f      	b.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetPCLK4Freq();
 800413a:	f7fd ff93 	bl	8002064 <HAL_RCC_GetPCLK4Freq>
 800413e:	6178      	str	r0, [r7, #20]
          break;
 8004140:	e038      	b.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004142:	4b52      	ldr	r3, [pc, #328]	@ (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d028      	beq.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
            frequency = HAL_RCC_GetPLL2PFreq();
 800414e:	f7fd ffbb 	bl	80020c8 <HAL_RCC_GetPLL2PFreq>
 8004152:	6178      	str	r0, [r7, #20]
          break;
 8004154:	e024      	b.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004156:	4b4d      	ldr	r3, [pc, #308]	@ (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d021      	beq.n	80041a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004162:	f7fe f84d 	bl	8002200 <HAL_RCC_GetPLL3RFreq>
 8004166:	6178      	str	r0, [r7, #20]
          break;
 8004168:	e01d      	b.n	80041a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800416a:	4b48      	ldr	r3, [pc, #288]	@ (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01a      	beq.n	80041ac <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
            frequency = LSE_VALUE;
 8004176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800417a:	617b      	str	r3, [r7, #20]
          break;
 800417c:	e016      	b.n	80041ac <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800417e:	4b43      	ldr	r3, [pc, #268]	@ (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d013      	beq.n	80041b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
            frequency = LSI_VALUE;
 800418a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800418e:	617b      	str	r3, [r7, #20]
          break;
 8004190:	e00f      	b.n	80041b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
          frequency = RCC_GetCLKPFreq();
 8004192:	f000 fda1 	bl	8004cd8 <RCC_GetCLKPFreq>
 8004196:	6178      	str	r0, [r7, #20]
          break;
 8004198:	e00c      	b.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
          break;
 800419a:	bf00      	nop
 800419c:	f000 bd83 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80041a0:	bf00      	nop
 80041a2:	f000 bd80 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80041a6:	bf00      	nop
 80041a8:	f000 bd7d 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80041ac:	bf00      	nop
 80041ae:	f000 bd7a 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80041b2:	bf00      	nop
      break;
 80041b4:	f000 bd77 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_LPTIM45_SOURCE();
 80041b8:	4b34      	ldr	r3, [pc, #208]	@ (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 80041ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041bc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80041c8:	d04f      	beq.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80041d0:	d84f      	bhi.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041d8:	d03d      	beq.n	8004256 <HAL_RCCEx_GetPeriphCLKFreq+0xc26>
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041e0:	d847      	bhi.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041e8:	d02b      	beq.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041f0:	d83f      	bhi.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041f8:	d019      	beq.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0xbfe>
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004200:	d837      	bhi.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d004      	beq.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800420e:	d004      	beq.n	800421a <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
          break;
 8004210:	e02f      	b.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
          frequency = HAL_RCC_GetPCLK4Freq();
 8004212:	f7fd ff27 	bl	8002064 <HAL_RCC_GetPCLK4Freq>
 8004216:	6178      	str	r0, [r7, #20]
          break;
 8004218:	e03b      	b.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0xc62>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 800421a:	4b1c      	ldr	r3, [pc, #112]	@ (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 800421c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d028      	beq.n	8004278 <HAL_RCCEx_GetPeriphCLKFreq+0xc48>
            frequency = HAL_RCC_GetPLL2PFreq();
 8004226:	f7fd ff4f 	bl	80020c8 <HAL_RCC_GetPLL2PFreq>
 800422a:	6178      	str	r0, [r7, #20]
          break;
 800422c:	e024      	b.n	8004278 <HAL_RCCEx_GetPeriphCLKFreq+0xc48>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 800422e:	4b17      	ldr	r3, [pc, #92]	@ (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004232:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d021      	beq.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
            frequency = HAL_RCC_GetPLL3RFreq();
 800423a:	f7fd ffe1 	bl	8002200 <HAL_RCC_GetPLL3RFreq>
 800423e:	6178      	str	r0, [r7, #20]
          break;
 8004240:	e01d      	b.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004242:	4b12      	ldr	r3, [pc, #72]	@ (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d01a      	beq.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
            frequency = LSE_VALUE;
 800424e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004252:	617b      	str	r3, [r7, #20]
          break;
 8004254:	e016      	b.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004256:	4b0d      	ldr	r3, [pc, #52]	@ (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d016      	beq.n	8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
            frequency = LSI_VALUE;
 8004262:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004266:	617b      	str	r3, [r7, #20]
          break;
 8004268:	e012      	b.n	8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
          frequency = RCC_GetCLKPFreq();
 800426a:	f000 fd35 	bl	8004cd8 <RCC_GetCLKPFreq>
 800426e:	6178      	str	r0, [r7, #20]
          break;
 8004270:	e00f      	b.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0xc62>
          break;
 8004272:	bf00      	nop
 8004274:	f000 bd17 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004278:	bf00      	nop
 800427a:	f000 bd14 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800427e:	bf00      	nop
 8004280:	f000 bd11 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004284:	bf00      	nop
 8004286:	f000 bd0e 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 800428a:	bf00      	nop
 800428c:	58024400 	.word	0x58024400
          break;
 8004290:	bf00      	nop
      break;
 8004292:	f000 bd08 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_LPUART1_SOURCE();
 8004296:	4ba3      	ldr	r3, [pc, #652]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	613b      	str	r3, [r7, #16]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2b05      	cmp	r3, #5
 80042a4:	d84f      	bhi.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
 80042a6:	a201      	add	r2, pc, #4	@ (adr r2, 80042ac <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>)
 80042a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ac:	080042c5 	.word	0x080042c5
 80042b0:	080042cd 	.word	0x080042cd
 80042b4:	080042e1 	.word	0x080042e1
 80042b8:	080042f5 	.word	0x080042f5
 80042bc:	08004321 	.word	0x08004321
 80042c0:	08004333 	.word	0x08004333
          frequency = HAL_RCC_GetPCLK4Freq();
 80042c4:	f7fd fece 	bl	8002064 <HAL_RCC_GetPCLK4Freq>
 80042c8:	6178      	str	r0, [r7, #20]
          break;
 80042ca:	e04c      	b.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 80042cc:	4b95      	ldr	r3, [pc, #596]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80042ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d039      	beq.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
            frequency = HAL_RCC_GetPLL2QFreq();
 80042d8:	f7fd ff0c 	bl	80020f4 <HAL_RCC_GetPLL2QFreq>
 80042dc:	6178      	str	r0, [r7, #20]
          break;
 80042de:	e035      	b.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 80042e0:	4b90      	ldr	r3, [pc, #576]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d032      	beq.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0xd22>
            frequency = HAL_RCC_GetPLL3QFreq();
 80042ec:	f7fd ff72 	bl	80021d4 <HAL_RCC_GetPLL3QFreq>
 80042f0:	6178      	str	r0, [r7, #20]
          break;
 80042f2:	e02e      	b.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0xd22>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042f4:	4b8b      	ldr	r3, [pc, #556]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d02b      	beq.n	8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004300:	4b88      	ldr	r3, [pc, #544]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d025      	beq.n	8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800430c:	4b85      	ldr	r3, [pc, #532]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	08db      	lsrs	r3, r3, #3
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	4a84      	ldr	r2, [pc, #528]	@ (8004528 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>)
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
 800431c:	617b      	str	r3, [r7, #20]
          break;
 800431e:	e01b      	b.n	8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004320:	4b80      	ldr	r3, [pc, #512]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004328:	2b00      	cmp	r3, #0
 800432a:	d018      	beq.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
            frequency = CSI_VALUE;
 800432c:	4b7f      	ldr	r3, [pc, #508]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0xefc>)
 800432e:	617b      	str	r3, [r7, #20]
          break;
 8004330:	e015      	b.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004332:	4b7c      	ldr	r3, [pc, #496]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d012      	beq.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0xd34>
            frequency = LSE_VALUE;
 800433e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004342:	617b      	str	r3, [r7, #20]
          break;
 8004344:	e00e      	b.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0xd34>
          break;
 8004346:	bf00      	nop
 8004348:	f000 bcad 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800434c:	bf00      	nop
 800434e:	f000 bcaa 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004352:	bf00      	nop
 8004354:	f000 bca7 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004358:	bf00      	nop
 800435a:	f000 bca4 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800435e:	bf00      	nop
 8004360:	f000 bca1 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004364:	bf00      	nop
      break;
 8004366:	f000 bc9e 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 800436a:	4b6e      	ldr	r3, [pc, #440]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 800436c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8494 	beq.w	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
        frequency = HAL_RCC_GetPLL3RFreq();
 8004378:	f7fd ff42 	bl	8002200 <HAL_RCC_GetPLL3RFreq>
 800437c:	6178      	str	r0, [r7, #20]
      break;
 800437e:	f000 bc8f 	b.w	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
      clocksource = __HAL_RCC_GET_PSSI_SOURCE();
 8004382:	4b68      	ldr	r3, [pc, #416]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004386:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d004      	beq.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004398:	d00a      	beq.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd80>
          break;
 800439a:	e00e      	b.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0xd8a>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 800439c:	4b61      	ldr	r3, [pc, #388]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 800439e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d007      	beq.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
            frequency = HAL_RCC_GetPLL3RFreq();
 80043a8:	f7fd ff2a 	bl	8002200 <HAL_RCC_GetPLL3RFreq>
 80043ac:	6178      	str	r0, [r7, #20]
          break;
 80043ae:	e003      	b.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
          frequency = RCC_GetCLKPFreq();
 80043b0:	f000 fc92 	bl	8004cd8 <RCC_GetCLKPFreq>
 80043b4:	6178      	str	r0, [r7, #20]
          break;
 80043b6:	e000      	b.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0xd8a>
          break;
 80043b8:	bf00      	nop
      break;
 80043ba:	f000 bc74 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_RTC_SOURCE();
 80043be:	4b59      	ldr	r3, [pc, #356]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ca:	d107      	bne.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0xdac>
 80043cc:	4b55      	ldr	r3, [pc, #340]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
 80043d6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80043da:	e003      	b.n	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80043dc:	4b51      	ldr	r3, [pc, #324]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80043de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043ec:	d014      	beq.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043f4:	d81a      	bhi.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d033      	beq.n	8004464 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004402:	d113      	bne.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004404:	4b47      	ldr	r3, [pc, #284]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d02c      	beq.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
            frequency = LSE_VALUE;
 8004410:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004414:	617b      	str	r3, [r7, #20]
          break;
 8004416:	e028      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004418:	4b42      	ldr	r3, [pc, #264]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 800441a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d025      	beq.n	8004470 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
            frequency = LSI_VALUE;
 8004424:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004428:	617b      	str	r3, [r7, #20]
          break;
 800442a:	e021      	b.n	8004470 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL) == RCC_BDCR_RTCSEL) /*!< HSE is the clock source for RTC */
 800442c:	4b3d      	ldr	r3, [pc, #244]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004430:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004434:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004438:	d11d      	bne.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800443a:	4b3a      	ldr	r3, [pc, #232]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d017      	beq.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
              prescaler = READ_BIT(RCC->CFGR, RCC_CFGR_RTCPRE) >> RCC_CFGR_RTCPRE_Pos;
 8004446:	4b37      	ldr	r3, [pc, #220]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	0a1b      	lsrs	r3, r3, #8
 800444c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004450:	60fb      	str	r3, [r7, #12]
              if (prescaler > 1U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d90e      	bls.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
                frequency = HSE_VALUE / prescaler;
 8004458:	4a35      	ldr	r2, [pc, #212]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004460:	617b      	str	r3, [r7, #20]
          break;
 8004462:	e008      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
          break;
 8004464:	bf00      	nop
 8004466:	f000 bc1e 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800446a:	bf00      	nop
 800446c:	f000 bc1b 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004470:	bf00      	nop
 8004472:	f000 bc18 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004476:	bf00      	nop
      break;
 8004478:	f000 bc15 	b.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800447c:	4b29      	ldr	r3, [pc, #164]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 800447e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004480:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800448c:	d039      	beq.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004494:	d83d      	bhi.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800449c:	d035      	beq.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xeda>
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80044a4:	d835      	bhi.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044ac:	d01f      	beq.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0xebe>
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044b4:	d82d      	bhi.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c2:	d00a      	beq.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
          break;
 80044c4:	e025      	b.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 80044c6:	4b17      	ldr	r3, [pc, #92]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d021      	beq.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
            frequency = HAL_RCC_GetPLL1QFreq();
 80044d2:	f7fd fde3 	bl	800209c <HAL_RCC_GetPLL1QFreq>
 80044d6:	6178      	str	r0, [r7, #20]
          break;
 80044d8:	e01d      	b.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 80044da:	4b12      	ldr	r3, [pc, #72]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80044dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d019      	beq.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0xeea>
            frequency = HAL_RCC_GetPLL2PFreq();
 80044e6:	f7fd fdef 	bl	80020c8 <HAL_RCC_GetPLL2PFreq>
 80044ea:	6178      	str	r0, [r7, #20]
          break;
 80044ec:	e015      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0xeea>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 80044ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80044f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d011      	beq.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0xeee>
            frequency = HAL_RCC_GetPLL3PFreq();
 80044fa:	f7fd fe55 	bl	80021a8 <HAL_RCC_GetPLL3PFreq>
 80044fe:	6178      	str	r0, [r7, #20]
          break;
 8004500:	e00d      	b.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0xeee>
          frequency = RCC_GetCLKPFreq();
 8004502:	f000 fbe9 	bl	8004cd8 <RCC_GetCLKPFreq>
 8004506:	6178      	str	r0, [r7, #20]
          break;
 8004508:	e00a      	b.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
          frequency = EXTERNAL_CLOCK_VALUE;
 800450a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800450e:	617b      	str	r3, [r7, #20]
          break;
 8004510:	e006      	b.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
          break;
 8004512:	bf00      	nop
 8004514:	e3c7      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004516:	bf00      	nop
 8004518:	e3c5      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800451a:	bf00      	nop
 800451c:	e3c3      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800451e:	bf00      	nop
      break;
 8004520:	e3c1      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8004522:	bf00      	nop
 8004524:	58024400 	.word	0x58024400
 8004528:	03d09000 	.word	0x03d09000
 800452c:	003d0900 	.word	0x003d0900
 8004530:	016e3600 	.word	0x016e3600
      clocksource = __HAL_RCC_GET_SAI2_SOURCE();
 8004534:	4b94      	ldr	r3, [pc, #592]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004538:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004544:	d049      	beq.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0xfaa>
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800454c:	d847      	bhi.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004554:	d039      	beq.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800455c:	d83f      	bhi.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004564:	d035      	beq.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa2>
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800456c:	d837      	bhi.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004574:	d01f      	beq.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf86>
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800457c:	d82f      	bhi.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d004      	beq.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800458a:	d00a      	beq.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0xf72>
          break;
 800458c:	e027      	b.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 800458e:	4b7e      	ldr	r3, [pc, #504]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d023      	beq.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfb2>
            frequency = HAL_RCC_GetPLL1QFreq();
 800459a:	f7fd fd7f 	bl	800209c <HAL_RCC_GetPLL1QFreq>
 800459e:	6178      	str	r0, [r7, #20]
          break;
 80045a0:	e01f      	b.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfb2>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 80045a2:	4b79      	ldr	r3, [pc, #484]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d01b      	beq.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfb6>
            frequency = HAL_RCC_GetPLL2PFreq();
 80045ae:	f7fd fd8b 	bl	80020c8 <HAL_RCC_GetPLL2PFreq>
 80045b2:	6178      	str	r0, [r7, #20]
          break;
 80045b4:	e017      	b.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfb6>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 80045b6:	4b74      	ldr	r3, [pc, #464]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80045b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d013      	beq.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
            frequency = HAL_RCC_GetPLL3PFreq();
 80045c2:	f7fd fdf1 	bl	80021a8 <HAL_RCC_GetPLL3PFreq>
 80045c6:	6178      	str	r0, [r7, #20]
          break;
 80045c8:	e00f      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
          frequency = RCC_GetCLKPFreq();
 80045ca:	f000 fb85 	bl	8004cd8 <RCC_GetCLKPFreq>
 80045ce:	6178      	str	r0, [r7, #20]
          break;
 80045d0:	e00c      	b.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xfbc>
          frequency = EXTERNAL_CLOCK_VALUE;
 80045d2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80045d6:	617b      	str	r3, [r7, #20]
          break;
 80045d8:	e008      	b.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xfbc>
          break;
 80045da:	bf00      	nop
 80045dc:	e363      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80045de:	bf00      	nop
 80045e0:	e361      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80045e2:	bf00      	nop
 80045e4:	e35f      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80045e6:	bf00      	nop
 80045e8:	e35d      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80045ea:	bf00      	nop
      break;
 80045ec:	e35b      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SDMMC12_SOURCE();
 80045ee:	4b66      	ldr	r3, [pc, #408]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80045f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	613b      	str	r3, [r7, #16]
      if (clocksource ==
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10a      	bne.n	8004614 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
        if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 80045fe:	4b62      	ldr	r3, [pc, #392]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004602:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 834c 	beq.w	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
          frequency = HAL_RCC_GetPLL2SFreq();
 800460c:	f7fd fd9e 	bl	800214c <HAL_RCC_GetPLL2SFreq>
 8004610:	6178      	str	r0, [r7, #20]
      break;
 8004612:	e347      	b.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_TCLK) != 0U)
 8004614:	4b5c      	ldr	r3, [pc, #368]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004618:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8341 	beq.w	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
          frequency = HAL_RCC_GetPLL2TFreq();
 8004622:	f7fd fda9 	bl	8002178 <HAL_RCC_GetPLL2TFreq>
 8004626:	6178      	str	r0, [r7, #20]
      break;
 8004628:	e33c      	b.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
      clocksource = __HAL_RCC_GET_SPDIFRX_SOURCE();
 800462a:	4b57      	ldr	r3, [pc, #348]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 800462c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800462e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800463a:	d031      	beq.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1070>
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004642:	d843      	bhi.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x109c>
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800464a:	d01f      	beq.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004652:	d83b      	bhi.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x109c>
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d004      	beq.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004660:	d00a      	beq.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
          break;
 8004662:	e033      	b.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x109c>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004664:	4b48      	ldr	r3, [pc, #288]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466c:	2b00      	cmp	r3, #0
 800466e:	d02f      	beq.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
            frequency = HAL_RCC_GetPLL1QFreq();
 8004670:	f7fd fd14 	bl	800209c <HAL_RCC_GetPLL1QFreq>
 8004674:	6178      	str	r0, [r7, #20]
          break;
 8004676:	e02b      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004678:	4b43      	ldr	r3, [pc, #268]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 800467a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d027      	beq.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
            frequency = HAL_RCC_GetPLL2RFreq();
 8004684:	f7fd fd4c 	bl	8002120 <HAL_RCC_GetPLL2RFreq>
 8004688:	6178      	str	r0, [r7, #20]
          break;
 800468a:	e023      	b.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 800468c:	4b3e      	ldr	r3, [pc, #248]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 800468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004690:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01f      	beq.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a8>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004698:	f7fd fdb2 	bl	8002200 <HAL_RCC_GetPLL3RFreq>
 800469c:	6178      	str	r0, [r7, #20]
          break;
 800469e:	e01b      	b.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a8>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046a0:	4b39      	ldr	r3, [pc, #228]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d017      	beq.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80046ac:	4b36      	ldr	r3, [pc, #216]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d011      	beq.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046b8:	4b33      	ldr	r3, [pc, #204]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	08db      	lsrs	r3, r3, #3
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	4a32      	ldr	r2, [pc, #200]	@ (800478c <HAL_RCCEx_GetPeriphCLKFreq+0x115c>)
 80046c4:	fa22 f303 	lsr.w	r3, r2, r3
 80046c8:	617b      	str	r3, [r7, #20]
          break;
 80046ca:	e007      	b.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
          break;
 80046cc:	bf00      	nop
 80046ce:	e2ea      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80046d0:	bf00      	nop
 80046d2:	e2e8      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80046d4:	bf00      	nop
 80046d6:	e2e6      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80046d8:	bf00      	nop
 80046da:	e2e4      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80046dc:	bf00      	nop
      break;
 80046de:	e2e2      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SPI1_SOURCE();
 80046e0:	4b29      	ldr	r3, [pc, #164]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80046e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046e8:	613b      	str	r3, [r7, #16]
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046f0:	d039      	beq.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046f8:	d83d      	bhi.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004700:	d035      	beq.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x113e>
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004708:	d835      	bhi.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004710:	d01f      	beq.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004718:	d82d      	bhi.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d004      	beq.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x10fa>
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x110e>
          break;
 8004728:	e025      	b.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 800472a:	4b17      	ldr	r3, [pc, #92]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 800472c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d021      	beq.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x114a>
            frequency = HAL_RCC_GetPLL1QFreq();
 8004736:	f7fd fcb1 	bl	800209c <HAL_RCC_GetPLL1QFreq>
 800473a:	6178      	str	r0, [r7, #20]
          break;
 800473c:	e01d      	b.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x114a>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 800473e:	4b12      	ldr	r3, [pc, #72]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004742:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d019      	beq.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
            frequency = HAL_RCC_GetPLL2PFreq();
 800474a:	f7fd fcbd 	bl	80020c8 <HAL_RCC_GetPLL2PFreq>
 800474e:	6178      	str	r0, [r7, #20]
          break;
 8004750:	e015      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004752:	4b0d      	ldr	r3, [pc, #52]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004756:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d011      	beq.n	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
            frequency = HAL_RCC_GetPLL3PFreq();
 800475e:	f7fd fd23 	bl	80021a8 <HAL_RCC_GetPLL3PFreq>
 8004762:	6178      	str	r0, [r7, #20]
          break;
 8004764:	e00d      	b.n	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
          frequency = RCC_GetCLKPFreq();
 8004766:	f000 fab7 	bl	8004cd8 <RCC_GetCLKPFreq>
 800476a:	6178      	str	r0, [r7, #20]
          break;
 800476c:	e00a      	b.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x1154>
          frequency = EXTERNAL_CLOCK_VALUE;
 800476e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004772:	617b      	str	r3, [r7, #20]
          break;
 8004774:	e006      	b.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x1154>
          break;
 8004776:	bf00      	nop
 8004778:	e295      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800477a:	bf00      	nop
 800477c:	e293      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800477e:	bf00      	nop
 8004780:	e291      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004782:	bf00      	nop
      break;
 8004784:	e28f      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8004786:	bf00      	nop
 8004788:	58024400 	.word	0x58024400
 800478c:	03d09000 	.word	0x03d09000
      clocksource = __HAL_RCC_GET_SPI23_SOURCE();
 8004790:	4b92      	ldr	r3, [pc, #584]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004794:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	2b40      	cmp	r3, #64	@ 0x40
 800479e:	d033      	beq.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	2b40      	cmp	r3, #64	@ 0x40
 80047a4:	d838      	bhi.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	2b30      	cmp	r3, #48	@ 0x30
 80047aa:	d031      	beq.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	2b30      	cmp	r3, #48	@ 0x30
 80047b0:	d832      	bhi.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d01d      	beq.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d82c      	bhi.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x119c>
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b10      	cmp	r3, #16
 80047c8:	d00a      	beq.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
          break;
 80047ca:	e025      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 80047cc:	4b83      	ldr	r3, [pc, #524]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80047ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d021      	beq.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
            frequency = HAL_RCC_GetPLL1QFreq();
 80047d8:	f7fd fc60 	bl	800209c <HAL_RCC_GetPLL1QFreq>
 80047dc:	6178      	str	r0, [r7, #20]
          break;
 80047de:	e01d      	b.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 80047e0:	4b7e      	ldr	r3, [pc, #504]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80047e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d019      	beq.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x11f0>
            frequency = HAL_RCC_GetPLL2PFreq();
 80047ec:	f7fd fc6c 	bl	80020c8 <HAL_RCC_GetPLL2PFreq>
 80047f0:	6178      	str	r0, [r7, #20]
          break;
 80047f2:	e015      	b.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x11f0>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 80047f4:	4b79      	ldr	r3, [pc, #484]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80047f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d011      	beq.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x11f4>
            frequency = HAL_RCC_GetPLL3PFreq();
 8004800:	f7fd fcd2 	bl	80021a8 <HAL_RCC_GetPLL3PFreq>
 8004804:	6178      	str	r0, [r7, #20]
          break;
 8004806:	e00d      	b.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x11f4>
          frequency = RCC_GetCLKPFreq();
 8004808:	f000 fa66 	bl	8004cd8 <RCC_GetCLKPFreq>
 800480c:	6178      	str	r0, [r7, #20]
          break;
 800480e:	e00a      	b.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0x11f6>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004810:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004814:	617b      	str	r3, [r7, #20]
          break;
 8004816:	e006      	b.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0x11f6>
          break;
 8004818:	bf00      	nop
 800481a:	e244      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800481c:	bf00      	nop
 800481e:	e242      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004820:	bf00      	nop
 8004822:	e240      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004824:	bf00      	nop
      break;
 8004826:	e23e      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SPI45_SOURCE();
 8004828:	4b6c      	ldr	r3, [pc, #432]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800482a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800482c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2b50      	cmp	r3, #80	@ 0x50
 8004836:	d052      	beq.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	2b50      	cmp	r3, #80	@ 0x50
 800483c:	d858      	bhi.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b40      	cmp	r3, #64	@ 0x40
 8004842:	d043      	beq.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	2b40      	cmp	r3, #64	@ 0x40
 8004848:	d852      	bhi.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2b30      	cmp	r3, #48	@ 0x30
 800484e:	d027      	beq.n	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	2b30      	cmp	r3, #48	@ 0x30
 8004854:	d84c      	bhi.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b20      	cmp	r3, #32
 800485a:	d017      	beq.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	2b20      	cmp	r3, #32
 8004860:	d846      	bhi.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	2b10      	cmp	r3, #16
 800486c:	d004      	beq.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
          break;
 800486e:	e03f      	b.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004870:	f7fd fbdc 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8004874:	6178      	str	r0, [r7, #20]
          break;
 8004876:	e046      	b.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004878:	4b58      	ldr	r3, [pc, #352]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800487a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d037      	beq.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c4>
            frequency = HAL_RCC_GetPLL2QFreq();
 8004884:	f7fd fc36 	bl	80020f4 <HAL_RCC_GetPLL2QFreq>
 8004888:	6178      	str	r0, [r7, #20]
          break;
 800488a:	e033      	b.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 800488c:	4b53      	ldr	r3, [pc, #332]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800488e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d02f      	beq.n	80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c8>
            frequency = HAL_RCC_GetPLL3QFreq();
 8004898:	f7fd fc9c 	bl	80021d4 <HAL_RCC_GetPLL3QFreq>
 800489c:	6178      	str	r0, [r7, #20]
          break;
 800489e:	e02b      	b.n	80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c8>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048a0:	4b4e      	ldr	r3, [pc, #312]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d027      	beq.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80048ac:	4b4b      	ldr	r3, [pc, #300]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d021      	beq.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80048b8:	4b48      	ldr	r3, [pc, #288]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	08db      	lsrs	r3, r3, #3
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	4a47      	ldr	r2, [pc, #284]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
 80048c8:	617b      	str	r3, [r7, #20]
          break;
 80048ca:	e017      	b.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80048cc:	4b43      	ldr	r3, [pc, #268]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d013      	beq.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>
            frequency = CSI_VALUE;
 80048d8:	4b42      	ldr	r3, [pc, #264]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80048da:	617b      	str	r3, [r7, #20]
          break;
 80048dc:	e010      	b.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048de:	4b3f      	ldr	r3, [pc, #252]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00c      	beq.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
            frequency = HSE_VALUE;
 80048ea:	4b3f      	ldr	r3, [pc, #252]	@ (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 80048ec:	617b      	str	r3, [r7, #20]
          break;
 80048ee:	e009      	b.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
          break;
 80048f0:	bf00      	nop
 80048f2:	e1d8      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80048f4:	bf00      	nop
 80048f6:	e1d6      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80048f8:	bf00      	nop
 80048fa:	e1d4      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80048fc:	bf00      	nop
 80048fe:	e1d2      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004900:	bf00      	nop
 8004902:	e1d0      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004904:	bf00      	nop
      break;
 8004906:	e1ce      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SPI6_SOURCE();
 8004908:	4b34      	ldr	r3, [pc, #208]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b50      	cmp	r3, #80	@ 0x50
 8004916:	d052      	beq.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x138e>
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	2b50      	cmp	r3, #80	@ 0x50
 800491c:	d858      	bhi.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b40      	cmp	r3, #64	@ 0x40
 8004922:	d043      	beq.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x137c>
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	2b40      	cmp	r3, #64	@ 0x40
 8004928:	d852      	bhi.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	2b30      	cmp	r3, #48	@ 0x30
 800492e:	d027      	beq.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b30      	cmp	r3, #48	@ 0x30
 8004934:	d84c      	bhi.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b20      	cmp	r3, #32
 800493a:	d017      	beq.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x133c>
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	2b20      	cmp	r3, #32
 8004940:	d846      	bhi.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x1320>
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b10      	cmp	r3, #16
 800494c:	d004      	beq.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x1328>
          break;
 800494e:	e03f      	b.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
          frequency = HAL_RCC_GetPCLK4Freq();
 8004950:	f7fd fb88 	bl	8002064 <HAL_RCC_GetPCLK4Freq>
 8004954:	6178      	str	r0, [r7, #20]
          break;
 8004956:	e04e      	b.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004958:	4b20      	ldr	r3, [pc, #128]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800495a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d037      	beq.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
            frequency = HAL_RCC_GetPLL2QFreq();
 8004964:	f7fd fbc6 	bl	80020f4 <HAL_RCC_GetPLL2QFreq>
 8004968:	6178      	str	r0, [r7, #20]
          break;
 800496a:	e033      	b.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 800496c:	4b1b      	ldr	r3, [pc, #108]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800496e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d02f      	beq.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = HAL_RCC_GetPLL3QFreq();
 8004978:	f7fd fc2c 	bl	80021d4 <HAL_RCC_GetPLL3QFreq>
 800497c:	6178      	str	r0, [r7, #20]
          break;
 800497e:	e02b      	b.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004980:	4b16      	ldr	r3, [pc, #88]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	d02f      	beq.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800498c:	4b13      	ldr	r3, [pc, #76]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0320 	and.w	r3, r3, #32
 8004994:	2b00      	cmp	r3, #0
 8004996:	d029      	beq.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004998:	4b10      	ldr	r3, [pc, #64]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	08db      	lsrs	r3, r3, #3
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	4a0f      	ldr	r2, [pc, #60]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 80049a4:	fa22 f303 	lsr.w	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]
          break;
 80049aa:	e01f      	b.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80049ac:	4b0b      	ldr	r3, [pc, #44]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d01b      	beq.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>
            frequency = CSI_VALUE;
 80049b8:	4b0a      	ldr	r3, [pc, #40]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80049ba:	617b      	str	r3, [r7, #20]
          break;
 80049bc:	e018      	b.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049be:	4b07      	ldr	r3, [pc, #28]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d014      	beq.n	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c4>
            frequency = HSE_VALUE;
 80049ca:	4b07      	ldr	r3, [pc, #28]	@ (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 80049cc:	617b      	str	r3, [r7, #20]
          break;
 80049ce:	e011      	b.n	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c4>
          break;
 80049d0:	bf00      	nop
 80049d2:	e168      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80049d4:	bf00      	nop
 80049d6:	e166      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80049d8:	bf00      	nop
 80049da:	e164      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 80049dc:	58024400 	.word	0x58024400
 80049e0:	03d09000 	.word	0x03d09000
 80049e4:	003d0900 	.word	0x003d0900
 80049e8:	016e3600 	.word	0x016e3600
          break;
 80049ec:	bf00      	nop
 80049ee:	e15a      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80049f0:	bf00      	nop
 80049f2:	e158      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80049f4:	bf00      	nop
      break;
 80049f6:	e156      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USART1_SOURCE();
 80049f8:	4b9e      	ldr	r3, [pc, #632]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 80049fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b05      	cmp	r3, #5
 8004a06:	d850      	bhi.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 8004a08:	a201      	add	r2, pc, #4	@ (adr r2, 8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 8004a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0e:	bf00      	nop
 8004a10:	08004a29 	.word	0x08004a29
 8004a14:	08004a31 	.word	0x08004a31
 8004a18:	08004a45 	.word	0x08004a45
 8004a1c:	08004a59 	.word	0x08004a59
 8004a20:	08004a85 	.word	0x08004a85
 8004a24:	08004a97 	.word	0x08004a97
          frequency = HAL_RCC_GetPCLK2Freq();
 8004a28:	f7fd fb00 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8004a2c:	6178      	str	r0, [r7, #20]
          break;
 8004a2e:	e047      	b.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004a30:	4b90      	ldr	r3, [pc, #576]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d038      	beq.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
            frequency = HAL_RCC_GetPLL2QFreq();
 8004a3c:	f7fd fb5a 	bl	80020f4 <HAL_RCC_GetPLL2QFreq>
 8004a40:	6178      	str	r0, [r7, #20]
          break;
 8004a42:	e034      	b.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004a44:	4b8b      	ldr	r3, [pc, #556]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d030      	beq.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
            frequency = HAL_RCC_GetPLL3QFreq();
 8004a50:	f7fd fbc0 	bl	80021d4 <HAL_RCC_GetPLL3QFreq>
 8004a54:	6178      	str	r0, [r7, #20]
          break;
 8004a56:	e02c      	b.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a58:	4b86      	ldr	r3, [pc, #536]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d028      	beq.n	8004ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1486>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004a64:	4b83      	ldr	r3, [pc, #524]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d022      	beq.n	8004ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1486>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a70:	4b80      	ldr	r3, [pc, #512]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	08db      	lsrs	r3, r3, #3
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	4a7f      	ldr	r2, [pc, #508]	@ (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1648>)
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a80:	617b      	str	r3, [r7, #20]
          break;
 8004a82:	e018      	b.n	8004ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1486>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004a84:	4b7b      	ldr	r3, [pc, #492]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d014      	beq.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
            frequency = CSI_VALUE;
 8004a90:	4b7a      	ldr	r3, [pc, #488]	@ (8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>)
 8004a92:	617b      	str	r3, [r7, #20]
          break;
 8004a94:	e011      	b.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a96:	4b77      	ldr	r3, [pc, #476]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00d      	beq.n	8004abe <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
            frequency = LSE_VALUE;
 8004aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aa6:	617b      	str	r3, [r7, #20]
          break;
 8004aa8:	e009      	b.n	8004abe <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
          break;
 8004aaa:	bf00      	nop
 8004aac:	e0fb      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004aae:	bf00      	nop
 8004ab0:	e0f9      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004ab2:	bf00      	nop
 8004ab4:	e0f7      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004ab6:	bf00      	nop
 8004ab8:	e0f5      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004aba:	bf00      	nop
 8004abc:	e0f3      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004abe:	bf00      	nop
      break;
 8004ac0:	e0f1      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USART234578_SOURCE();
 8004ac2:	4b6c      	ldr	r3, [pc, #432]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004ac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b05      	cmp	r3, #5
 8004ad0:	d84f      	bhi.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x1542>
 8004ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a8>)
 8004ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad8:	08004af1 	.word	0x08004af1
 8004adc:	08004af9 	.word	0x08004af9
 8004ae0:	08004b0d 	.word	0x08004b0d
 8004ae4:	08004b21 	.word	0x08004b21
 8004ae8:	08004b4d 	.word	0x08004b4d
 8004aec:	08004b5f 	.word	0x08004b5f
          frequency = HAL_RCC_GetPCLK1Freq();
 8004af0:	f7fd fa80 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 8004af4:	6178      	str	r0, [r7, #20]
          break;
 8004af6:	e047      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004af8:	4b5e      	ldr	r3, [pc, #376]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d038      	beq.n	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
            frequency = HAL_RCC_GetPLL2QFreq();
 8004b04:	f7fd faf6 	bl	80020f4 <HAL_RCC_GetPLL2QFreq>
 8004b08:	6178      	str	r0, [r7, #20]
          break;
 8004b0a:	e034      	b.n	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004b0c:	4b59      	ldr	r3, [pc, #356]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d030      	beq.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x154a>
            frequency = HAL_RCC_GetPLL3QFreq();
 8004b18:	f7fd fb5c 	bl	80021d4 <HAL_RCC_GetPLL3QFreq>
 8004b1c:	6178      	str	r0, [r7, #20]
          break;
 8004b1e:	e02c      	b.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x154a>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b20:	4b54      	ldr	r3, [pc, #336]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d028      	beq.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x154e>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004b2c:	4b51      	ldr	r3, [pc, #324]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d022      	beq.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x154e>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b38:	4b4e      	ldr	r3, [pc, #312]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	08db      	lsrs	r3, r3, #3
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	4a4d      	ldr	r2, [pc, #308]	@ (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1648>)
 8004b44:	fa22 f303 	lsr.w	r3, r2, r3
 8004b48:	617b      	str	r3, [r7, #20]
          break;
 8004b4a:	e018      	b.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x154e>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004b4c:	4b49      	ldr	r3, [pc, #292]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d014      	beq.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x1552>
            frequency = CSI_VALUE;
 8004b58:	4b48      	ldr	r3, [pc, #288]	@ (8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>)
 8004b5a:	617b      	str	r3, [r7, #20]
          break;
 8004b5c:	e011      	b.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x1552>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b5e:	4b45      	ldr	r3, [pc, #276]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00d      	beq.n	8004b86 <HAL_RCCEx_GetPeriphCLKFreq+0x1556>
            frequency = LSE_VALUE;
 8004b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b6e:	617b      	str	r3, [r7, #20]
          break;
 8004b70:	e009      	b.n	8004b86 <HAL_RCCEx_GetPeriphCLKFreq+0x1556>
          break;
 8004b72:	bf00      	nop
 8004b74:	e097      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004b76:	bf00      	nop
 8004b78:	e095      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004b7a:	bf00      	nop
 8004b7c:	e093      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004b7e:	bf00      	nop
 8004b80:	e091      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004b82:	bf00      	nop
 8004b84:	e08f      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004b86:	bf00      	nop
      break;
 8004b88:	e08d      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USBPHYC_SOURCE();
 8004b8a:	4b3a      	ldr	r3, [pc, #232]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b8e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b9a:	d01d      	beq.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x15a8>
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ba2:	d823      	bhi.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x15bc>
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d004      	beq.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1584>
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bb0:	d009      	beq.n	8004bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
          break;
 8004bb2:	e01b      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x15bc>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d017      	beq.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c0>
            frequency = HSE_VALUE;
 8004bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1650>)
 8004bc2:	617b      	str	r3, [r7, #20]
          break;
 8004bc4:	e014      	b.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d010      	beq.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c4>
            frequency = (HSE_VALUE >> 1UL);
 8004bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>)
 8004bd4:	617b      	str	r3, [r7, #20]
          break;
 8004bd6:	e00d      	b.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004bd8:	4b26      	ldr	r3, [pc, #152]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d009      	beq.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c8>
            frequency = HAL_RCC_GetPLL3QFreq();
 8004be4:	f7fd faf6 	bl	80021d4 <HAL_RCC_GetPLL3QFreq>
 8004be8:	6178      	str	r0, [r7, #20]
          break;
 8004bea:	e005      	b.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c8>
          break;
 8004bec:	bf00      	nop
 8004bee:	e05a      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004bf0:	bf00      	nop
 8004bf2:	e058      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004bf4:	bf00      	nop
 8004bf6:	e056      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004bf8:	bf00      	nop
      break;
 8004bfa:	e054      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USBOTGFS_SOURCE();
 8004bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004c0c:	d02f      	beq.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x163e>
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004c14:	d83a      	bhi.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x165c>
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c1c:	d01e      	beq.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c24:	d832      	bhi.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x165c>
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d004      	beq.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c32:	d009      	beq.n	8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
          break;
 8004c34:	e02a      	b.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x165c>
          if (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004c36:	4b0f      	ldr	r3, [pc, #60]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d026      	beq.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1660>
            frequency = HSI48_VALUE;
 8004c42:	4b11      	ldr	r3, [pc, #68]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1658>)
 8004c44:	617b      	str	r3, [r7, #20]
          break;
 8004c46:	e023      	b.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1660>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004c48:	4b0a      	ldr	r3, [pc, #40]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01f      	beq.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
            frequency = HAL_RCC_GetPLL3QFreq();
 8004c54:	f7fd fabe 	bl	80021d4 <HAL_RCC_GetPLL3QFreq>
 8004c58:	6178      	str	r0, [r7, #20]
          break;
 8004c5a:	e01b      	b.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c5c:	4b05      	ldr	r3, [pc, #20]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d017      	beq.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
            frequency = HSE_VALUE;
 8004c68:	4b05      	ldr	r3, [pc, #20]	@ (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1650>)
 8004c6a:	617b      	str	r3, [r7, #20]
          break;
 8004c6c:	e014      	b.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
          break;
 8004c6e:	bf00      	nop
 8004c70:	e019      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8004c72:	bf00      	nop
 8004c74:	58024400 	.word	0x58024400
 8004c78:	03d09000 	.word	0x03d09000
 8004c7c:	003d0900 	.word	0x003d0900
 8004c80:	016e3600 	.word	0x016e3600
 8004c84:	00b71b00 	.word	0x00b71b00
 8004c88:	02dc6c00 	.word	0x02dc6c00
          break;
 8004c8c:	bf00      	nop
 8004c8e:	e00a      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004c90:	bf00      	nop
 8004c92:	e008      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004c94:	bf00      	nop
 8004c96:	e006      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004c98:	bf00      	nop
      break;
 8004c9a:	e004      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      break;
 8004c9c:	bf00      	nop
 8004c9e:	e002      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      break;
 8004ca0:	bf00      	nop
 8004ca2:	e000      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      break;
 8004ca4:	bf00      	nop
  }

  return frequency;
 8004ca6:	697b      	ldr	r3, [r7, #20]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_RCCEx_EnableClockProtection>:
  *            @arg RCC_CLOCKPROTECT_FMC     FMC clock protection
  *            @arg RCC_CLOCKPROTECT_XSPI    XSPIs clock protection
  * @retval None
  */
void HAL_RCCEx_EnableClockProtection(uint32_t ProtectClk)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_RCC_CLOCKPROTECTION(ProtectClk));

  SET_BIT(RCC->CKPROTR, ProtectClk);
 8004cb8:	4b06      	ldr	r3, [pc, #24]	@ (8004cd4 <HAL_RCCEx_EnableClockProtection+0x24>)
 8004cba:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004cbe:	4905      	ldr	r1, [pc, #20]	@ (8004cd4 <HAL_RCCEx_EnableClockProtection+0x24>)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	58024400 	.word	0x58024400

08004cd8 <RCC_GetCLKPFreq>:
/**
  * @brief  Compute PLL2 VCO output frequency
  * @retval Value of PLL2 VCO output frequency
  */
static uint32_t RCC_GetCLKPFreq(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	607b      	str	r3, [r7, #4]
  uint32_t ckpclocksource;

  ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d60 <RCC_GetCLKPFreq+0x88>)
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004cea:	603b      	str	r3, [r7, #0]

  if (ckpclocksource == RCC_CLKPSOURCE_HSI)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d115      	bne.n	8004d1e <RCC_GetCLKPFreq+0x46>
  {
    if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d60 <RCC_GetCLKPFreq+0x88>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0304 	and.w	r3, r3, #4
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d028      	beq.n	8004d50 <RCC_GetCLKPFreq+0x78>
    {
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004cfe:	4b18      	ldr	r3, [pc, #96]	@ (8004d60 <RCC_GetCLKPFreq+0x88>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d022      	beq.n	8004d50 <RCC_GetCLKPFreq+0x78>
      {
        frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d0a:	4b15      	ldr	r3, [pc, #84]	@ (8004d60 <RCC_GetCLKPFreq+0x88>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	08db      	lsrs	r3, r3, #3
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	4a13      	ldr	r2, [pc, #76]	@ (8004d64 <RCC_GetCLKPFreq+0x8c>)
 8004d16:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1a:	607b      	str	r3, [r7, #4]
 8004d1c:	e018      	b.n	8004d50 <RCC_GetCLKPFreq+0x78>
      {
        /* Can't retrieve HSIDIV value */
      }
    }
  }
  else if (ckpclocksource == RCC_CLKPSOURCE_CSI)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d24:	d108      	bne.n	8004d38 <RCC_GetCLKPFreq+0x60>
  {
    if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004d26:	4b0e      	ldr	r3, [pc, #56]	@ (8004d60 <RCC_GetCLKPFreq+0x88>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00e      	beq.n	8004d50 <RCC_GetCLKPFreq+0x78>
    {
      frequency = CSI_VALUE;
 8004d32:	4b0d      	ldr	r3, [pc, #52]	@ (8004d68 <RCC_GetCLKPFreq+0x90>)
 8004d34:	607b      	str	r3, [r7, #4]
 8004d36:	e00b      	b.n	8004d50 <RCC_GetCLKPFreq+0x78>
    }
  }
  else if (ckpclocksource == RCC_CLKPSOURCE_HSE)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d3e:	d107      	bne.n	8004d50 <RCC_GetCLKPFreq+0x78>
  {
    if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d40:	4b07      	ldr	r3, [pc, #28]	@ (8004d60 <RCC_GetCLKPFreq+0x88>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <RCC_GetCLKPFreq+0x78>
    {
      frequency = HSE_VALUE;
 8004d4c:	4b07      	ldr	r3, [pc, #28]	@ (8004d6c <RCC_GetCLKPFreq+0x94>)
 8004d4e:	607b      	str	r3, [r7, #4]
  {
    /* Nothing to do, case the CKPER is disabled */
    /* frequency is by default set to 0          */
  }

  return frequency;
 8004d50:	687b      	ldr	r3, [r7, #4]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	58024400 	.word	0x58024400
 8004d64:	03d09000 	.word	0x03d09000
 8004d68:	003d0900 	.word	0x003d0900
 8004d6c:	016e3600 	.word	0x016e3600

08004d70 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004d7c:	f7fb fe42 	bl	8000a04 <HAL_GetTick>
 8004d80:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d102      	bne.n	8004d8e <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	73fb      	strb	r3, [r7, #15]
 8004d8c:	e0cb      	b.n	8004f26 <HAL_XSPI_Init+0x1b6>
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f040 80c4 	bne.w	8004f26 <HAL_XSPI_Init+0x1b6>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fb fd30 	bl	8000804 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8004da4:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fbce 	bl	800554a <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	4b5e      	ldr	r3, [pc, #376]	@ (8004f30 <HAL_XSPI_Init+0x1c0>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	68d1      	ldr	r1, [r2, #12]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6912      	ldr	r2, [r2, #16]
 8004dc0:	0412      	lsls	r2, r2, #16
 8004dc2:	4311      	orrs	r1, r2
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6952      	ldr	r2, [r2, #20]
 8004dc8:	3a01      	subs	r2, #1
 8004dca:	0212      	lsls	r2, r2, #8
 8004dcc:	4311      	orrs	r1, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	69d2      	ldr	r2, [r2, #28]
 8004dd2:	4311      	orrs	r1, r2
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6812      	ldr	r2, [r2, #0]
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1a      	ldr	r2, [r3, #32]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e00:	041a      	lsls	r2, r3, #16
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	611a      	str	r2, [r3, #16]
                 (hxspi->Init.MaxTran << XSPI_DCR3_MAXTRAN_Pos));

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e28:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	021a      	lsls	r2, r3, #8
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2120      	movs	r1, #32
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 fc79 	bl	8005748 <XSPI_WaitFlagStateUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d162      	bne.n	8004f26 <HAL_XSPI_Init+0x1b6>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a2e      	ldr	r2, [pc, #184]	@ (8004f34 <HAL_XSPI_Init+0x1c4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d004      	beq.n	8004e8a <HAL_XSPI_Init+0x11a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a2c      	ldr	r2, [pc, #176]	@ (8004f38 <HAL_XSPI_Init+0x1c8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d10f      	bne.n	8004eaa <HAL_XSPI_Init+0x13a>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2200      	movs	r2, #0
 8004e94:	2120      	movs	r1, #32
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fc56 	bl	8005748 <XSPI_WaitFlagStateUntilTimeout>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_XSPI_Init+0x13a>
          {
            return status;
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	e03e      	b.n	8004f28 <HAL_XSPI_Init+0x1b8>
          }
        }
        /* Configure Dual Memory mode and CS Selection */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	4b22      	ldr	r3, [pc, #136]	@ (8004f3c <HAL_XSPI_Init+0x1cc>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6891      	ldr	r1, [r2, #8]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ebc:	4311      	orrs	r1, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6812      	ldr	r2, [r2, #0]
 8004ec2:	430b      	orrs	r3, r1
 8004ec4:	6013      	str	r3, [r2, #0]
                   (hxspi->Init.MemoryMode | hxspi->Init.MemorySelect));

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004ece:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0201 	orr.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d107      	bne.n	8004f0e <HAL_XSPI_Init+0x19e>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0202 	orr.w	r2, r2, #2
 8004f0c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f16:	d103      	bne.n	8004f20 <HAL_XSPI_Init+0x1b0>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	655a      	str	r2, [r3, #84]	@ 0x54
 8004f1e:	e002      	b.n	8004f26 <HAL_XSPI_Init+0x1b6>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	f8e0c0fc 	.word	0xf8e0c0fc
 8004f34:	52005000 	.word	0x52005000
 8004f38:	5200a000 	.word	0x5200a000
 8004f3c:	feffffbf 	.word	0xfeffffbf

08004f40 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08a      	sub	sp, #40	@ 0x28
 8004f44:	af02      	add	r7, sp, #8
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8004f4c:	f7fb fd5a 	bl	8000a04 <HAL_GetTick>
 8004f50:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f56:	2b00      	cmp	r3, #0
  }

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));

  /* Check the state of the driver */
  state = hxspi->State;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f5c:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d104      	bne.n	8004f6e <HAL_XSPI_Command+0x2e>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f6c:	d115      	bne.n	8004f9a <HAL_XSPI_Command+0x5a>
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b14      	cmp	r3, #20
 8004f72:	d107      	bne.n	8004f84 <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d00e      	beq.n	8004f9a <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d00a      	beq.n	8004f9a <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2b24      	cmp	r3, #36	@ 0x24
 8004f88:	d15e      	bne.n	8005048 <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d003      	beq.n	8004f9a <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d156      	bne.n	8005048 <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2120      	movs	r1, #32
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fbcf 	bl	8005748 <XSPI_WaitFlagStateUntilTimeout>
 8004faa:	4603      	mov	r3, r0
 8004fac:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8004fae:	7ffb      	ldrb	r3, [r7, #31]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d146      	bne.n	8005042 <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 fbf9 	bl	80057b4 <XSPI_ConfigCmd>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8004fc6:	7ffb      	ldrb	r3, [r7, #31]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d143      	bne.n	8005054 <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10e      	bne.n	8004ff2 <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	2102      	movs	r1, #2
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 fbb2 	bl	8005748 <XSPI_WaitFlagStateUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	77fb      	strb	r3, [r7, #31]

          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2202      	movs	r2, #2
 8004fee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8004ff0:	e030      	b.n	8005054 <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d103      	bne.n	8005002 <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2204      	movs	r2, #4
 8004ffe:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005000:	e028      	b.n	8005054 <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d10b      	bne.n	8005022 <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500e:	2b24      	cmp	r3, #36	@ 0x24
 8005010:	d103      	bne.n	800501a <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2204      	movs	r2, #4
 8005016:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005018:	e01c      	b.n	8005054 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2214      	movs	r2, #20
 800501e:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005020:	e018      	b.n	8005054 <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d114      	bne.n	8005054 <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800502e:	2b14      	cmp	r3, #20
 8005030:	d103      	bne.n	800503a <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2204      	movs	r2, #4
 8005036:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005038:	e00c      	b.n	8005054 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2224      	movs	r2, #36	@ 0x24
 800503e:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005040:	e008      	b.n	8005054 <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 8005042:	2302      	movs	r3, #2
 8005044:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 8005046:	e005      	b.n	8005054 <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2210      	movs	r2, #16
 8005050:	659a      	str	r2, [r3, #88]	@ 0x58
 8005052:	e000      	b.n	8005056 <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
 8005054:	bf00      	nop
  }

  return status;
 8005056:	7ffb      	ldrb	r3, [r7, #31]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3720      	adds	r7, #32
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08a      	sub	sp, #40	@ 0x28
 8005064:	af02      	add	r7, sp, #8
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800506c:	f7fb fcca 	bl	8000a04 <HAL_GetTick>
 8005070:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3350      	adds	r3, #80	@ 0x50
 8005078:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d105      	bne.n	800508c <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2208      	movs	r2, #8
 8005088:	659a      	str	r2, [r3, #88]	@ 0x58
 800508a:	e057      	b.n	800513c <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005090:	2b04      	cmp	r3, #4
 8005092:	d14e      	bne.n	8005132 <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->XferSize  = hxspi->XferCount;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->pBuffPtr  = (uint8_t *)pData;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80050bc:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	2201      	movs	r2, #1
 80050c6:	2104      	movs	r1, #4
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 fb3d 	bl	8005748 <XSPI_WaitFlagStateUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80050d2:	7ffb      	ldrb	r3, [r7, #31]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d113      	bne.n	8005100 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050dc:	781a      	ldrb	r2, [r3, #0]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	641a      	str	r2, [r3, #64]	@ 0x40
        hxspi->XferCount--;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050f0:	1e5a      	subs	r2, r3, #1
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hxspi->XferCount > 0U);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1df      	bne.n	80050be <HAL_XSPI_Transmit+0x5e>
 80050fe:	e000      	b.n	8005102 <HAL_XSPI_Transmit+0xa2>
          break;
 8005100:	bf00      	nop

      if (status == HAL_OK)
 8005102:	7ffb      	ldrb	r3, [r7, #31]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d119      	bne.n	800513c <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	2201      	movs	r2, #1
 8005110:	2102      	movs	r1, #2
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 fb18 	bl	8005748 <XSPI_WaitFlagStateUntilTimeout>
 8005118:	4603      	mov	r3, r0
 800511a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800511c:	7ffb      	ldrb	r3, [r7, #31]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10c      	bne.n	800513c <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2202      	movs	r2, #2
 8005128:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2202      	movs	r2, #2
 800512e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005130:	e004      	b.n	800513c <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2210      	movs	r2, #16
 800513a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  return status;
 800513c:	7ffb      	ldrb	r3, [r7, #31]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3720      	adds	r7, #32
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b08c      	sub	sp, #48	@ 0x30
 800514a:	af02      	add	r7, sp, #8
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005152:	f7fb fc57 	bl	8000a04 <HAL_GetTick>
 8005156:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3350      	adds	r3, #80	@ 0x50
 800515e:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005166:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005170:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d106      	bne.n	8005186 <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2208      	movs	r2, #8
 8005182:	659a      	str	r2, [r3, #88]	@ 0x58
 8005184:	e07c      	b.n	8005280 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800518a:	2b04      	cmp	r3, #4
 800518c:	d172      	bne.n	8005274 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->XferSize  = hxspi->XferCount;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->pBuffPtr  = pData;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80051ba:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051c4:	d104      	bne.n	80051d0 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	649a      	str	r2, [r3, #72]	@ 0x48
 80051ce:	e011      	b.n	80051f4 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80051d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d004      	beq.n	80051ea <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	649a      	str	r2, [r3, #72]	@ 0x48
 80051e8:	e004      	b.n	80051f4 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	2201      	movs	r2, #1
 80051fc:	2106      	movs	r1, #6
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 faa2 	bl	8005748 <XSPI_WaitFlagStateUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 800520a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800520e:	2b00      	cmp	r3, #0
 8005210:	d114      	bne.n	800523c <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	7812      	ldrb	r2, [r2, #0]
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	641a      	str	r2, [r3, #64]	@ 0x40
        hxspi->XferCount--;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800522c:	1e5a      	subs	r2, r3, #1
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hxspi->XferCount > 0U);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1dc      	bne.n	80051f4 <HAL_XSPI_Receive+0xae>
 800523a:	e000      	b.n	800523e <HAL_XSPI_Receive+0xf8>
          break;
 800523c:	bf00      	nop

      if (status == HAL_OK)
 800523e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005242:	2b00      	cmp	r3, #0
 8005244:	d11c      	bne.n	8005280 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	2201      	movs	r2, #1
 800524e:	2102      	movs	r1, #2
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 fa79 	bl	8005748 <XSPI_WaitFlagStateUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 800525c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10d      	bne.n	8005280 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2202      	movs	r2, #2
 800526a:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2202      	movs	r2, #2
 8005270:	655a      	str	r2, [r3, #84]	@ 0x54
 8005272:	e005      	b.n	8005280 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2210      	movs	r2, #16
 800527e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  return status;
 8005280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005284:	4618      	mov	r0, r3
 8005286:	3728      	adds	r7, #40	@ 0x28
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, XSPI_AutoPollingTypeDef *const pCfg,
                                       uint32_t Timeout)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08a      	sub	sp, #40	@ 0x28
 8005290:	af02      	add	r7, sp, #8
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005298:	f7fb fbb4 	bl	8000a04 <HAL_GetTick>
 800529c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052a4:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80052ae:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d167      	bne.n	8005388 <HAL_XSPI_AutoPolling+0xfc>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052c0:	d162      	bne.n	8005388 <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	2200      	movs	r2, #0
 80052ca:	2120      	movs	r1, #32
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 fa3b 	bl	8005748 <XSPI_WaitFlagStateUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80052d6:	7ffb      	ldrb	r3, [r7, #31]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d152      	bne.n	8005382 <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	6812      	ldr	r2, [r2, #0]
 80052e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	6852      	ldr	r2, [r2, #4]
 80052f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	6912      	ldr	r2, [r2, #16]
 80052fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	6899      	ldr	r1, [r3, #8]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	430b      	orrs	r3, r1
 8005314:	431a      	orrs	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800531e:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005328:	d104      	bne.n	8005334 <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	649a      	str	r2, [r3, #72]	@ 0x48
 8005332:	e011      	b.n	8005358 <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800533c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005340:	2b00      	cmp	r3, #0
 8005342:	d004      	beq.n	800534e <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	649a      	str	r2, [r3, #72]	@ 0x48
 800534c:	e004      	b.n	8005358 <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	2201      	movs	r2, #1
 8005360:	2108      	movs	r1, #8
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f9f0 	bl	8005748 <XSPI_WaitFlagStateUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800536c:	7ffb      	ldrb	r3, [r7, #31]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d110      	bne.n	8005394 <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2208      	movs	r2, #8
 8005378:	625a      	str	r2, [r3, #36]	@ 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2202      	movs	r2, #2
 800537e:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005380:	e008      	b.n	8005394 <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
 8005382:	2302      	movs	r3, #2
 8005384:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 8005386:	e005      	b.n	8005394 <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2210      	movs	r2, #16
 8005390:	659a      	str	r2, [r3, #88]	@ 0x58
 8005392:	e000      	b.n	8005396 <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
 8005394:	bf00      	nop
  }

  return status;
 8005396:	7ffb      	ldrb	r3, [r7, #31]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3720      	adds	r7, #32
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, XSPI_MemoryMappedTypeDef *const pCfg)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af02      	add	r7, sp, #8
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80053aa:	f7fb fb2b 	bl	8000a04 <HAL_GetTick>
 80053ae:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d134      	bne.n	8005422 <HAL_XSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2200      	movs	r2, #0
 80053c2:	2120      	movs	r1, #32
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f9bf 	bl	8005748 <XSPI_WaitFlagStateUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d12b      	bne.n	800542c <HAL_XSPI_MemoryMapped+0x8c>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2288      	movs	r2, #136	@ 0x88
 80053d8:	655a      	str	r2, [r3, #84]	@ 0x54

      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b08      	cmp	r3, #8
 80053e0:	d111      	bne.n	8005406 <HAL_XSPI_MemoryMapped+0x66>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	6852      	ldr	r2, [r2, #4]
 80053ea:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2210      	movs	r2, #16
 80053f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005404:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	4b0a      	ldr	r3, [pc, #40]	@ (8005438 <HAL_XSPI_MemoryMapped+0x98>)
 800540e:	4013      	ands	r3, r2
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	6812      	ldr	r2, [r2, #0]
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	e004      	b.n	800542c <HAL_XSPI_MemoryMapped+0x8c>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2210      	movs	r2, #16
 800542a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return status;
 800542c:	7bfb      	ldrb	r3, [r7, #15]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	cffffff7 	.word	0xcffffff7

0800543c <HAL_XSPI_Abort>:
  * @brief  Abort the current operation, return to the indirect mode.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af02      	add	r7, sp, #8
 8005442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005444:	2300      	movs	r3, #0
 8005446:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005448:	f7fb fadc 	bl	8000a04 <HAL_GetTick>
 800544c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is not in reset state */
  if (hxspi->State != HAL_XSPI_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005452:	2b00      	cmp	r3, #0
 8005454:	d06f      	beq.n	8005536 <HAL_XSPI_Abort+0xfa>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d021      	beq.n	80054a8 <HAL_XSPI_Abort+0x6c>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0204 	bic.w	r2, r2, #4
 8005472:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005478:	4618      	mov	r0, r3
 800547a:	f7fb fcff 	bl	8000e7c <HAL_DMA_Abort>
 800547e:	4603      	mov	r3, r0
 8005480:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <HAL_XSPI_Abort+0x52>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2204      	movs	r2, #4
 800548c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005492:	4618      	mov	r0, r3
 8005494:	f7fb fcf2 	bl	8000e7c <HAL_DMA_Abort>
 8005498:	4603      	mov	r3, r0
 800549a:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <HAL_XSPI_Abort+0x6c>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2204      	movs	r2, #4
 80054a6:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d033      	beq.n	800551e <HAL_XSPI_Abort+0xe2>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0202 	orr.w	r2, r2, #2
 80054c4:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2201      	movs	r2, #1
 80054d0:	2102      	movs	r1, #2
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f938 	bl	8005748 <XSPI_WaitFlagStateUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d12e      	bne.n	8005540 <HAL_XSPI_Abort+0x104>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2202      	movs	r2, #2
 80054e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2200      	movs	r2, #0
 80054f4:	2120      	movs	r1, #32
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f926 	bl	8005748 <XSPI_WaitFlagStateUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d11c      	bne.n	8005540 <HAL_XSPI_Abort+0x104>
        {
          /* Return to indirect mode */
          CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005514:	601a      	str	r2, [r3, #0]

          hxspi->State = HAL_XSPI_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2202      	movs	r2, #2
 800551a:	655a      	str	r2, [r3, #84]	@ 0x54
 800551c:	e010      	b.n	8005540 <HAL_XSPI_Abort+0x104>
      }
    }
    else
    {
      /* Return to indirect mode */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800552c:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2202      	movs	r2, #2
 8005532:	655a      	str	r2, [r3, #84]	@ 0x54
 8005534:	e004      	b.n	8005540 <HAL_XSPI_Abort+0x104>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2210      	movs	r2, #16
 800553e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return status;
 8005540:	7bfb      	ldrb	r3, [r7, #15]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_XSPIM_Config>:
  * @param  pCfg     : Pointer to Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPIM_Config(XSPI_HandleTypeDef *const hxspi, XSPIM_CfgTypeDef *const pCfg, uint32_t Timeout)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b08c      	sub	sp, #48	@ 0x30
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t index;
  uint8_t xspi_enabled = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

  XSPIM_CfgTypeDef IOM_cfg[XSPI_NB_INSTANCE] = {0};
 8005580:	f107 0314 	add.w	r3, r7, #20
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	605a      	str	r2, [r3, #4]
 800558a:	609a      	str	r2, [r3, #8]
 800558c:	60da      	str	r2, [r3, #12]
 800558e:	611a      	str	r2, [r3, #16]
 8005590:	615a      	str	r2, [r3, #20]
  assert_param(IS_XSPIM_NCS_OVR(pCfg->nCSOverride));
  assert_param(IS_XSPIM_IO_PORT(pCfg->IOPort));
  assert_param(IS_XSPIM_REQ2ACKTIME(pCfg->Req2AckTime));

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
 8005592:	2300      	movs	r3, #0
 8005594:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005598:	e014      	b.n	80055c4 <HAL_XSPIM_Config+0x5c>
  {
    XSPIM_GetConfig(index + 1U, &(IOM_cfg[index]));
 800559a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800559e:	3301      	adds	r3, #1
 80055a0:	b2d8      	uxtb	r0, r3
 80055a2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80055a6:	f107 0114 	add.w	r1, r7, #20
 80055aa:	4613      	mov	r3, r2
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	440b      	add	r3, r1
 80055b4:	4619      	mov	r1, r3
 80055b6:	f000 fa97 	bl	8005ae8 <XSPIM_GetConfig>
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
 80055ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80055be:	3301      	adds	r3, #1
 80055c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80055c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d9e6      	bls.n	800559a <HAL_XSPIM_Config+0x32>
  }

  /********** Disable both XSPI to configure XSPI IO Manager **********/
  if ((XSPI1->CR & XSPI_CR_EN) != 0U)
 80055cc:	4b5b      	ldr	r3, [pc, #364]	@ (800573c <HAL_XSPIM_Config+0x1d4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00b      	beq.n	80055f0 <HAL_XSPIM_Config+0x88>
  {
    CLEAR_BIT(XSPI1->CR, XSPI_CR_EN);
 80055d8:	4b58      	ldr	r3, [pc, #352]	@ (800573c <HAL_XSPIM_Config+0x1d4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a57      	ldr	r2, [pc, #348]	@ (800573c <HAL_XSPIM_Config+0x1d4>)
 80055de:	f023 0301 	bic.w	r3, r3, #1
 80055e2:	6013      	str	r3, [r2, #0]
    xspi_enabled |= 0x1U;
 80055e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  }
  if ((XSPI2->CR & XSPI_CR_EN) != 0U)
 80055f0:	4b53      	ldr	r3, [pc, #332]	@ (8005740 <HAL_XSPIM_Config+0x1d8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00b      	beq.n	8005614 <HAL_XSPIM_Config+0xac>
  {
    CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
 80055fc:	4b50      	ldr	r3, [pc, #320]	@ (8005740 <HAL_XSPIM_Config+0x1d8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a4f      	ldr	r2, [pc, #316]	@ (8005740 <HAL_XSPIM_Config+0x1d8>)
 8005602:	f023 0301 	bic.w	r3, r3, #1
 8005606:	6013      	str	r3, [r2, #0]
    xspi_enabled |= 0x2U;
 8005608:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800560c:	f043 0302 	orr.w	r3, r3, #2
 8005610:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  }

  /***************** Deactivation of previous configuration *****************/
  CLEAR_REG(XSPIM->CR);
 8005614:	4b4b      	ldr	r3, [pc, #300]	@ (8005744 <HAL_XSPIM_Config+0x1dc>)
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]

  /******************** Activation of new configuration *********************/
  MODIFY_REG(XSPIM->CR, XSPIM_CR_REQ2ACK_TIME, ((pCfg->Req2AckTime - 1U) << XSPIM_CR_REQ2ACK_TIME_Pos));
 800561a:	4b4a      	ldr	r3, [pc, #296]	@ (8005744 <HAL_XSPIM_Config+0x1dc>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	3b01      	subs	r3, #1
 8005628:	041b      	lsls	r3, r3, #16
 800562a:	4946      	ldr	r1, [pc, #280]	@ (8005744 <HAL_XSPIM_Config+0x1dc>)
 800562c:	4313      	orrs	r3, r2
 800562e:	600b      	str	r3, [r1, #0]

  if (hxspi->Instance == XSPI1)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a41      	ldr	r2, [pc, #260]	@ (800573c <HAL_XSPIM_Config+0x1d4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d110      	bne.n	800565c <HAL_XSPIM_Config+0xf4>
  {
    IOM_cfg[0].IOPort = pCfg->IOPort ;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	61bb      	str	r3, [r7, #24]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d027      	beq.n	8005698 <HAL_XSPIM_Config+0x130>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O1 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
 8005648:	4b3e      	ldr	r3, [pc, #248]	@ (8005744 <HAL_XSPIM_Config+0x1dc>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	493b      	ldr	r1, [pc, #236]	@ (8005744 <HAL_XSPIM_Config+0x1dc>)
 8005656:	4313      	orrs	r3, r2
 8005658:	600b      	str	r3, [r1, #0]
 800565a:	e01d      	b.n	8005698 <HAL_XSPIM_Config+0x130>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI2)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a37      	ldr	r2, [pc, #220]	@ (8005740 <HAL_XSPIM_Config+0x1d8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d110      	bne.n	8005688 <HAL_XSPIM_Config+0x120>
  {
    IOM_cfg[1].IOPort = pCfg->IOPort ;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d011      	beq.n	8005698 <HAL_XSPIM_Config+0x130>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O2 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
 8005674:	4b33      	ldr	r3, [pc, #204]	@ (8005744 <HAL_XSPIM_Config+0x1dc>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f023 0250 	bic.w	r2, r3, #80	@ 0x50
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4930      	ldr	r1, [pc, #192]	@ (8005744 <HAL_XSPIM_Config+0x1dc>)
 8005682:	4313      	orrs	r3, r2
 8005684:	600b      	str	r3, [r1, #0]
 8005686:	e007      	b.n	8005698 <HAL_XSPIM_Config+0x130>
      /* Nothing to do */
    }
  }
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568c:	f043 0208 	orr.w	r2, r3, #8
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	659a      	str	r2, [r3, #88]	@ 0x58
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e04c      	b.n	8005732 <HAL_XSPIM_Config+0x1ca>
  }

  for (index = 0U; index < (XSPI_NB_INSTANCE - 1U); index++)
 8005698:	2300      	movs	r3, #0
 800569a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800569e:	e02a      	b.n	80056f6 <HAL_XSPIM_Config+0x18e>
  {
    if ((IOM_cfg[index].IOPort == IOM_cfg[index + 1U].IOPort))
 80056a0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80056a4:	4613      	mov	r3, r2
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	3330      	adds	r3, #48	@ 0x30
 80056ae:	443b      	add	r3, r7
 80056b0:	3b18      	subs	r3, #24
 80056b2:	6819      	ldr	r1, [r3, #0]
 80056b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	4613      	mov	r3, r2
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	4413      	add	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	3330      	adds	r3, #48	@ 0x30
 80056c4:	443b      	add	r3, r7
 80056c6:	3b18      	subs	r3, #24
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4299      	cmp	r1, r3
 80056cc:	d105      	bne.n	80056da <HAL_XSPIM_Config+0x172>
    {
      /*Mux*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MUXEN);
 80056ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005744 <HAL_XSPIM_Config+0x1dc>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005744 <HAL_XSPIM_Config+0x1dc>)
 80056d4:	f043 0301 	orr.w	r3, r3, #1
 80056d8:	6013      	str	r3, [r2, #0]
    }
    else
    {
      /* Nothing to do */
    }
    if (IOM_cfg[0].IOPort == HAL_XSPIM_IOPORT_2)
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d105      	bne.n	80056ec <HAL_XSPIM_Config+0x184>
    {
      /*Mode*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MODE);
 80056e0:	4b18      	ldr	r3, [pc, #96]	@ (8005744 <HAL_XSPIM_Config+0x1dc>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a17      	ldr	r2, [pc, #92]	@ (8005744 <HAL_XSPIM_Config+0x1dc>)
 80056e6:	f043 0302 	orr.w	r3, r3, #2
 80056ea:	6013      	str	r3, [r2, #0]
  for (index = 0U; index < (XSPI_NB_INSTANCE - 1U); index++)
 80056ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80056f0:	3301      	adds	r3, #1
 80056f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80056f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0d0      	beq.n	80056a0 <HAL_XSPIM_Config+0x138>
      /* Nothing to do */
    }
  }

  /******* Re-enable both XSPI after configure XSPI IO Manager ********/
  if ((xspi_enabled & 0x1U) != 0U)
 80056fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d005      	beq.n	8005716 <HAL_XSPIM_Config+0x1ae>
  {
    SET_BIT(XSPI1->CR, XSPI_CR_EN);
 800570a:	4b0c      	ldr	r3, [pc, #48]	@ (800573c <HAL_XSPIM_Config+0x1d4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a0b      	ldr	r2, [pc, #44]	@ (800573c <HAL_XSPIM_Config+0x1d4>)
 8005710:	f043 0301 	orr.w	r3, r3, #1
 8005714:	6013      	str	r3, [r2, #0]
  }
  if ((xspi_enabled & 0x2U) != 0U)
 8005716:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d005      	beq.n	800572e <HAL_XSPIM_Config+0x1c6>
  {
    SET_BIT(XSPI2->CR, XSPI_CR_EN);
 8005722:	4b07      	ldr	r3, [pc, #28]	@ (8005740 <HAL_XSPIM_Config+0x1d8>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a06      	ldr	r2, [pc, #24]	@ (8005740 <HAL_XSPIM_Config+0x1d8>)
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	6013      	str	r3, [r2, #0]
  }

  return status;
 800572e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
}
 8005732:	4618      	mov	r0, r3
 8005734:	3730      	adds	r7, #48	@ 0x30
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	52005000 	.word	0x52005000
 8005740:	5200a000 	.word	0x5200a000
 8005744:	5200b400 	.word	0x5200b400

08005748 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	4613      	mov	r3, r2
 8005756:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8005758:	e019      	b.n	800578e <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005760:	d015      	beq.n	800578e <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005762:	f7fb f94f 	bl	8000a04 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	429a      	cmp	r2, r3
 8005770:	d302      	bcc.n	8005778 <XSPI_WaitFlagStateUntilTimeout+0x30>
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10a      	bne.n	800578e <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2202      	movs	r2, #2
 800577c:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005782:	f043 0201 	orr.w	r2, r3, #1
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e00e      	b.n	80057ac <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6a1a      	ldr	r2, [r3, #32]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4013      	ands	r3, r2
 8005798:	2b00      	cmp	r3, #0
 800579a:	bf14      	ite	ne
 800579c:	2301      	movne	r3, #1
 800579e:	2300      	moveq	r3, #0
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	79fb      	ldrb	r3, [r7, #7]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d1d7      	bne.n	800575a <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b089      	sub	sp, #36	@ 0x24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80057d0:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10a      	bne.n	80057f0 <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d114      	bne.n	8005822 <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005800:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800580a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8005814:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	e02c      	b.n	800587c <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b03      	cmp	r3, #3
 8005828:	d114      	bne.n	8005854 <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8005832:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800583c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005846:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	e013      	b.n	800587c <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800585c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8005866:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8005870:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800587a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005888:	2b00      	cmp	r3, #0
 800588a:	d012      	beq.n	80058b2 <XSPI_ConfigCmd+0xfe>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a4:	4319      	orrs	r1, r3
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058aa:	430b      	orrs	r3, r1
 80058ac:	431a      	orrs	r2, r3
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f023 021f 	bic.w	r2, r3, #31
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058be:	431a      	orrs	r2, r3
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d009      	beq.n	80058e0 <XSPI_ConfigCmd+0x12c>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d105      	bne.n	80058e0 <XSPI_ConfigCmd+0x12c>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3a01      	subs	r2, #1
 80058de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01e      	beq.n	8005926 <XSPI_ConfigCmd+0x172>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058f0:	d10a      	bne.n	8005908 <XSPI_ConfigCmd+0x154>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8005902:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8005906:	e00e      	b.n	8005926 <XSPI_ConfigCmd+0x172>
    }
    else if(hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005910:	d109      	bne.n	8005926 <XSPI_ConfigCmd+0x172>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005922:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 8095 	beq.w	8005a5a <XSPI_ConfigCmd+0x2a6>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d053      	beq.n	80059e0 <XSPI_ConfigCmd+0x22c>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01e      	beq.n	800597e <XSPI_ConfigCmd+0x1ca>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	4b64      	ldr	r3, [pc, #400]	@ (8005ad8 <XSPI_ConfigCmd+0x324>)
 8005946:	4013      	ands	r3, r2
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	68d1      	ldr	r1, [r2, #12]
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	6952      	ldr	r2, [r2, #20]
 8005950:	4311      	orrs	r1, r2
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	6912      	ldr	r2, [r2, #16]
 8005956:	4311      	orrs	r1, r2
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	69d2      	ldr	r2, [r2, #28]
 800595c:	4311      	orrs	r1, r2
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005962:	4311      	orrs	r1, r2
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	6a12      	ldr	r2, [r2, #32]
 8005968:	4311      	orrs	r1, r2
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800596e:	4311      	orrs	r1, r2
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005974:	430a      	orrs	r2, r1
 8005976:	431a      	orrs	r2, r3
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	e026      	b.n	80059cc <XSPI_ConfigCmd+0x218>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4b56      	ldr	r3, [pc, #344]	@ (8005adc <XSPI_ConfigCmd+0x328>)
 8005984:	4013      	ands	r3, r2
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	68d1      	ldr	r1, [r2, #12]
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	6952      	ldr	r2, [r2, #20]
 800598e:	4311      	orrs	r1, r2
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	6912      	ldr	r2, [r2, #16]
 8005994:	4311      	orrs	r1, r2
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	69d2      	ldr	r2, [r2, #28]
 800599a:	4311      	orrs	r1, r2
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059a0:	4311      	orrs	r1, r2
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	6a12      	ldr	r2, [r2, #32]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	431a      	orrs	r2, r3
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059b6:	d109      	bne.n	80059cc <XSPI_ConfigCmd+0x218>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d105      	bne.n	80059cc <XSPI_ConfigCmd+0x218>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	6992      	ldr	r2, [r2, #24]
 80059dc:	649a      	str	r2, [r3, #72]	@ 0x48
 80059de:	e074      	b.n	8005aca <XSPI_ConfigCmd+0x316>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d015      	beq.n	8005a14 <XSPI_ConfigCmd+0x260>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	4b3c      	ldr	r3, [pc, #240]	@ (8005ae0 <XSPI_ConfigCmd+0x32c>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	68d1      	ldr	r1, [r2, #12]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	6952      	ldr	r2, [r2, #20]
 80059f8:	4311      	orrs	r1, r2
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	6912      	ldr	r2, [r2, #16]
 80059fe:	4311      	orrs	r1, r2
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a04:	4311      	orrs	r1, r2
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	e01d      	b.n	8005a50 <XSPI_ConfigCmd+0x29c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68d9      	ldr	r1, [r3, #12]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	4319      	orrs	r1, r3
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	430b      	orrs	r3, r1
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a3a:	d109      	bne.n	8005a50 <XSPI_ConfigCmd+0x29c>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d105      	bne.n	8005a50 <XSPI_ConfigCmd+0x29c>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	e037      	b.n	8005aca <XSPI_ConfigCmd+0x316>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d02e      	beq.n	8005ac0 <XSPI_ConfigCmd+0x30c>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d015      	beq.n	8005a96 <XSPI_ConfigCmd+0x2e2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ae4 <XSPI_ConfigCmd+0x330>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	69d1      	ldr	r1, [r2, #28]
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a7a:	4311      	orrs	r1, r2
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	6a12      	ldr	r2, [r2, #32]
 8005a80:	4311      	orrs	r1, r2
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a86:	4311      	orrs	r1, r2
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	e00e      	b.n	8005ab4 <XSPI_ConfigCmd+0x300>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	69d9      	ldr	r1, [r3, #28]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa6:	4319      	orrs	r1, r3
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	430b      	orrs	r3, r1
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	6992      	ldr	r2, [r2, #24]
 8005abc:	649a      	str	r2, [r3, #72]	@ 0x48
 8005abe:	e004      	b.n	8005aca <XSPI_ConfigCmd+0x316>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2208      	movs	r2, #8
 8005ac8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  return status;
 8005aca:	7ffb      	ldrb	r3, [r7, #31]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3724      	adds	r7, #36	@ 0x24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	f0ffc0c0 	.word	0xf0ffc0c0
 8005adc:	ffffc0c0 	.word	0xffffc0c0
 8005ae0:	f0ffffc0 	.word	0xf0ffffc0
 8005ae4:	f0ffc0ff 	.word	0xf0ffc0ff

08005ae8 <XSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  pCfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static void XSPIM_GetConfig(uint8_t instance_nb, XSPIM_CfgTypeDef *const pCfg)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	4603      	mov	r3, r0
 8005af0:	6039      	str	r1, [r7, #0]
 8005af2:	71fb      	strb	r3, [r7, #7]
  uint32_t mux;
  uint32_t mode;

  if (instance_nb == 1U)
 8005af4:	79fb      	ldrb	r3, [r7, #7]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d124      	bne.n	8005b44 <XSPIM_GetConfig+0x5c>
  {
    if ((XSPIM->CR & XSPIM_CR_MODE) == 0U)
 8005afa:	4b2c      	ldr	r3, [pc, #176]	@ (8005bac <XSPIM_GetConfig+0xc4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d103      	bne.n	8005b0e <XSPIM_GetConfig+0x26>
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	605a      	str	r2, [r3, #4]
 8005b0c:	e002      	b.n	8005b14 <XSPIM_GetConfig+0x2c>
    }
    else
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2201      	movs	r2, #1
 8005b12:	605a      	str	r2, [r3, #4]
    }

    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
 8005b14:	4b25      	ldr	r3, [pc, #148]	@ (8005bac <XSPIM_GetConfig+0xc4>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b10      	cmp	r3, #16
 8005b1e:	d003      	beq.n	8005b28 <XSPIM_GetConfig+0x40>
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
    else
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
    }
  }
}
 8005b26:	e03a      	b.n	8005b9e <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O1) == XSPIM_CR_CSSEL_OVR_O1)
 8005b28:	4b20      	ldr	r3, [pc, #128]	@ (8005bac <XSPIM_GetConfig+0xc4>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0320 	and.w	r3, r3, #32
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	d103      	bne.n	8005b3c <XSPIM_GetConfig+0x54>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2270      	movs	r2, #112	@ 0x70
 8005b38:	601a      	str	r2, [r3, #0]
}
 8005b3a:	e030      	b.n	8005b9e <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2210      	movs	r2, #16
 8005b40:	601a      	str	r2, [r3, #0]
}
 8005b42:	e02c      	b.n	8005b9e <XSPIM_GetConfig+0xb6>
    mux = (XSPIM->CR & XSPIM_CR_MUXEN);
 8005b44:	4b19      	ldr	r3, [pc, #100]	@ (8005bac <XSPIM_GetConfig+0xc4>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]
    mode = ((XSPIM->CR & XSPIM_CR_MODE) >> XSPIM_CR_MODE_Pos);
 8005b4e:	4b17      	ldr	r3, [pc, #92]	@ (8005bac <XSPIM_GetConfig+0xc4>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	085b      	lsrs	r3, r3, #1
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	60bb      	str	r3, [r7, #8]
    if (mux != mode)
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d003      	beq.n	8005b6a <XSPIM_GetConfig+0x82>
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2200      	movs	r2, #0
 8005b66:	605a      	str	r2, [r3, #4]
 8005b68:	e002      	b.n	8005b70 <XSPIM_GetConfig+0x88>
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	605a      	str	r2, [r3, #4]
    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
 8005b70:	4b0e      	ldr	r3, [pc, #56]	@ (8005bac <XSPIM_GetConfig+0xc4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0310 	and.w	r3, r3, #16
 8005b78:	2b10      	cmp	r3, #16
 8005b7a:	d003      	beq.n	8005b84 <XSPIM_GetConfig+0x9c>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
}
 8005b82:	e00c      	b.n	8005b9e <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O2) == XSPIM_CR_CSSEL_OVR_O2)
 8005b84:	4b09      	ldr	r3, [pc, #36]	@ (8005bac <XSPIM_GetConfig+0xc4>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b8c:	2b40      	cmp	r3, #64	@ 0x40
 8005b8e:	d103      	bne.n	8005b98 <XSPIM_GetConfig+0xb0>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2270      	movs	r2, #112	@ 0x70
 8005b94:	601a      	str	r2, [r3, #0]
}
 8005b96:	e002      	b.n	8005b9e <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2210      	movs	r2, #16
 8005b9c:	601a      	str	r2, [r3, #0]
}
 8005b9e:	bf00      	nop
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	5200b400 	.word	0x5200b400

08005bb0 <BOOT_Application>:
  *  @addtogroup BOOT_XIP_Exported_Functions Boot XIP exported functions
  * @{
  */

BOOTStatus_TypeDef BOOT_Application(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr;

  /* mount the memory */
  retr = MapMemory();
 8005bb6:	f000 f80e 	bl	8005bd6 <MapMemory>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	71fb      	strb	r3, [r7, #7]
  if (BOOT_OK == retr)
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d103      	bne.n	8005bcc <BOOT_Application+0x1c>
  {
    /* jump on the application */
    retr = JumpToApplication();
 8005bc4:	f000 f836 	bl	8005c34 <JumpToApplication>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	71fb      	strb	r3, [r7, #7]
  }
  return retr;
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <MapMemory>:
/**
  * @brief  this function maps the memory
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef MapMemory(void)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b082      	sub	sp, #8
 8005bda:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr = BOOT_OK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	71fb      	strb	r3, [r7, #7]

  /* Map all the memory */
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
 8005be0:	2300      	movs	r3, #0
 8005be2:	71bb      	strb	r3, [r7, #6]
 8005be4:	e01d      	b.n	8005c22 <MapMemory+0x4c>
  {
    switch(EXTMEM_MemoryMappedMode(index, EXTMEM_ENABLE))
 8005be6:	79bb      	ldrb	r3, [r7, #6]
 8005be8:	2100      	movs	r1, #0
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 f916 	bl	8005e1c <EXTMEM_MemoryMappedMode>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf6:	d002      	beq.n	8005bfe <MapMemory+0x28>
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00e      	beq.n	8005c1a <MapMemory+0x44>
 8005bfc:	e00a      	b.n	8005c14 <MapMemory+0x3e>
    {
      case EXTMEM_ERROR_NOTSUPPORTED :
           if (EXTMEM_MEMORY_BOOTXIP ==  index)
 8005bfe:	79bb      	ldrb	r3, [r7, #6]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d102      	bne.n	8005c0a <MapMemory+0x34>
           {
             retr = BOOT_ERROR_INCOMPATIBLEMEMORY;
 8005c04:	2304      	movs	r3, #4
 8005c06:	71fb      	strb	r3, [r7, #7]
           {
            /* We considers the memory will be not used any more */
            EXTMEM_DeInit(index);
           }
      case EXTMEM_OK:
      break;
 8005c08:	e007      	b.n	8005c1a <MapMemory+0x44>
            EXTMEM_DeInit(index);
 8005c0a:	79bb      	ldrb	r3, [r7, #6]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 f8d9 	bl	8005dc4 <EXTMEM_DeInit>
      break;
 8005c12:	e002      	b.n	8005c1a <MapMemory+0x44>
      default :
        retr = BOOT_ERROR_MAPPEDMODEFAIL;
 8005c14:	2303      	movs	r3, #3
 8005c16:	71fb      	strb	r3, [r7, #7]
      break;
 8005c18:	e000      	b.n	8005c1c <MapMemory+0x46>
      break;
 8005c1a:	bf00      	nop
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
 8005c1c:	79bb      	ldrb	r3, [r7, #6]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	71bb      	strb	r3, [r7, #6]
 8005c22:	79bb      	ldrb	r3, [r7, #6]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0de      	beq.n	8005be6 <MapMemory+0x10>
    }
  }
  return retr;
 8005c28:	79fb      	ldrb	r3, [r7, #7]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <JumpToApplication>:
/**
  * @brief  This function jumps to the application through its vector table
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef JumpToApplication(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08a      	sub	sp, #40	@ 0x28
 8005c38:	af00      	add	r7, sp, #0
  uint32_t primask_bit;
  typedef  void (*pFunction)(void);
  pFunction JumpToApp;
  uint32_t Application_vector;

  if (EXTMEM_OK != EXTMEM_GetMapAddress(EXTMEM_MEMORY_BOOTXIP, &Application_vector))
 8005c3a:	1d3b      	adds	r3, r7, #4
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	2000      	movs	r0, #0
 8005c40:	f000 f93a 	bl	8005eb8 <EXTMEM_GetMapAddress>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <JumpToApplication+0x1a>
  {
      return BOOT_ERROR_INCOMPATIBLEMEMORY;
 8005c4a:	2304      	movs	r3, #4
 8005c4c:	e072      	b.n	8005d34 <JumpToApplication+0x100>
  }

  /* Suspend SysTick */
  HAL_SuspendTick();
 8005c4e:	f7fa ff09 	bl	8000a64 <HAL_SuspendTick>
  __ASM volatile ("dsb 0xF":::"memory");
 8005c52:	f3bf 8f4f 	dsb	sy
}
 8005c56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005c58:	f3bf 8f6f 	isb	sy
}
 8005c5c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8005c5e:	4b37      	ldr	r3, [pc, #220]	@ (8005d3c <JumpToApplication+0x108>)
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	4a36      	ldr	r2, [pc, #216]	@ (8005d3c <JumpToApplication+0x108>)
 8005c64:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005c68:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005c6a:	4b34      	ldr	r3, [pc, #208]	@ (8005d3c <JumpToApplication+0x108>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005c72:	f3bf 8f4f 	dsb	sy
}
 8005c76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005c78:	f3bf 8f6f 	isb	sy
}
 8005c7c:	bf00      	nop
}
 8005c7e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8005c80:	4b2e      	ldr	r3, [pc, #184]	@ (8005d3c <JumpToApplication+0x108>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005c88:	f3bf 8f4f 	dsb	sy
}
 8005c8c:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8005c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8005d3c <JumpToApplication+0x108>)
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	4a2a      	ldr	r2, [pc, #168]	@ (8005d3c <JumpToApplication+0x108>)
 8005c94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c98:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c9a:	f3bf 8f4f 	dsb	sy
}
 8005c9e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8005ca0:	4b26      	ldr	r3, [pc, #152]	@ (8005d3c <JumpToApplication+0x108>)
 8005ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ca6:	613b      	str	r3, [r7, #16]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	0b5b      	lsrs	r3, r3, #13
 8005cac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005cb0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	08db      	lsrs	r3, r3, #3
 8005cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cba:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8005cc4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8005cca:	491c      	ldr	r1, [pc, #112]	@ (8005d3c <JumpToApplication+0x108>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	1e5a      	subs	r2, r3, #1
 8005cd6:	60ba      	str	r2, [r7, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1ef      	bne.n	8005cbc <JumpToApplication+0x88>
    } while(sets-- != 0U);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	1e5a      	subs	r2, r3, #1
 8005ce0:	60fa      	str	r2, [r7, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e5      	bne.n	8005cb2 <JumpToApplication+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005ce6:	f3bf 8f4f 	dsb	sy
}
 8005cea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005cec:	f3bf 8f6f 	isb	sy
}
 8005cf0:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8005cf2:	bf00      	nop
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8005cf8:	617b      	str	r3, [r7, #20]
  return(result);
 8005cfa:	697b      	ldr	r3, [r7, #20]

  /* Disable D-Cache---------------------------------------------------------*/
  SCB_DisableDCache();

  /* Initialize user application's Stack Pointer & Jump to user application  */
  primask_bit = __get_PRIMASK();
 8005cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8005cfe:	b672      	cpsid	i
}
 8005d00:	bf00      	nop
  __disable_irq();

  /* Apply offsets for image location and vector table offset */
  Application_vector += EXTMEM_XIP_IMAGE_OFFSET + EXTMEM_HEADER_OFFSET;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	607b      	str	r3, [r7, #4]

  SCB->VTOR = (uint32_t)Application_vector;
 8005d06:	4a0d      	ldr	r2, [pc, #52]	@ (8005d3c <JumpToApplication+0x108>)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6093      	str	r3, [r2, #8]
  JumpToApp = (pFunction) (*(__IO uint32_t *)(Application_vector + 4u));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	623b      	str	r3, [r7, #32]
     (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
  /* on ARM v8m, set MSPLIM before setting MSP to avoid unwanted stack overflow faults */
  __set_MSPLIM(0x00000000);
#endif  /* __ARM_ARCH_8M_MAIN__ or __ARM_ARCH_8M_BASE__ */

  __set_MSP(*(__IO uint32_t*) Application_vector);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	f383 8808 	msr	MSP, r3
}
 8005d20:	bf00      	nop
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	61fb      	str	r3, [r7, #28]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	f383 8810 	msr	PRIMASK, r3
}
 8005d2c:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);

  JumpToApp();
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	4798      	blx	r3
  return BOOT_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3728      	adds	r7, #40	@ 0x28
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	e000ed00 	.word	0xe000ed00

08005d40 <EXTMEM_Init>:
/** @defgroup EXTMEM_Exported_Functions External Memory Exported Functions
  * @{
  */

EXTMEM_StatusTypeDef EXTMEM_Init(uint32_t MemId, uint32_t ClockInput)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 8005d4a:	23fb      	movs	r3, #251	@ 0xfb
 8005d4c:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d12f      	bne.n	8005db4 <EXTMEM_Init+0x74>
  {
    retr = EXTMEM_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 8005d58:	4a19      	ldr	r2, [pc, #100]	@ (8005dc0 <EXTMEM_Init+0x80>)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	21ac      	movs	r1, #172	@ 0xac
 8005d5e:	fb01 f303 	mul.w	r3, r1, r3
 8005d62:	4413      	add	r3, r2
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d120      	bne.n	8005dac <EXTMEM_Init+0x6c>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        /* Initialize the SFDP memory */
        if (EXTMEM_DRIVER_NOR_SFDP_OK != EXTMEM_DRIVER_NOR_SFDP_Init(extmem_list_config[MemId].Handle,
 8005d6a:	4a15      	ldr	r2, [pc, #84]	@ (8005dc0 <EXTMEM_Init+0x80>)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	21ac      	movs	r1, #172	@ 0xac
 8005d70:	fb01 f303 	mul.w	r3, r1, r3
 8005d74:	4413      	add	r3, r2
 8005d76:	3304      	adds	r3, #4
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	4a11      	ldr	r2, [pc, #68]	@ (8005dc0 <EXTMEM_Init+0x80>)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	21ac      	movs	r1, #172	@ 0xac
 8005d80:	fb01 f303 	mul.w	r3, r1, r3
 8005d84:	4413      	add	r3, r2
 8005d86:	3308      	adds	r3, #8
 8005d88:	7819      	ldrb	r1, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	22ac      	movs	r2, #172	@ 0xac
 8005d8e:	fb02 f303 	mul.w	r3, r2, r3
 8005d92:	3308      	adds	r3, #8
 8005d94:	4a0a      	ldr	r2, [pc, #40]	@ (8005dc0 <EXTMEM_Init+0x80>)
 8005d96:	4413      	add	r3, r2
 8005d98:	3304      	adds	r3, #4
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	f002 fabc 	bl	8008318 <EXTMEM_DRIVER_NOR_SFDP_Init>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d005      	beq.n	8005db2 <EXTMEM_Init+0x72>
                                                                     extmem_list_config[MemId].ConfigType,
                                                                     ClockInput,
                                                                     &extmem_list_config[MemId].NorSfdpObject))
        {
          retr = EXTMEM_ERROR_DRIVER;
 8005da6:	23fd      	movs	r3, #253	@ 0xfd
 8005da8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005daa:	e002      	b.n	8005db2 <EXTMEM_Init+0x72>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 8005dac:	23fe      	movs	r3, #254	@ 0xfe
 8005dae:	73fb      	strb	r3, [r7, #15]
        break;
 8005db0:	e000      	b.n	8005db4 <EXTMEM_Init+0x74>
        break;
 8005db2:	bf00      	nop
      }
    }
  }
  return retr;
 8005db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	2400008c 	.word	0x2400008c

08005dc4 <EXTMEM_DeInit>:

EXTMEM_StatusTypeDef EXTMEM_DeInit(uint32_t MemId)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 8005dcc:	23fb      	movs	r3, #251	@ 0xfb
 8005dce:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d119      	bne.n	8005e0a <EXTMEM_DeInit+0x46>
  {
    retr = EXTMEM_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 8005dda:	4a0f      	ldr	r2, [pc, #60]	@ (8005e18 <EXTMEM_DeInit+0x54>)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	21ac      	movs	r1, #172	@ 0xac
 8005de0:	fb01 f303 	mul.w	r3, r1, r3
 8005de4:	4413      	add	r3, r2
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10b      	bne.n	8005e04 <EXTMEM_DeInit+0x40>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        /* UnInitialize the SFDP memory, the return is always OK no need to test the returned value */
        (void)EXTMEM_DRIVER_NOR_SFDP_DeInit(&extmem_list_config[MemId].NorSfdpObject);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	22ac      	movs	r2, #172	@ 0xac
 8005df0:	fb02 f303 	mul.w	r3, r2, r3
 8005df4:	3308      	adds	r3, #8
 8005df6:	4a08      	ldr	r2, [pc, #32]	@ (8005e18 <EXTMEM_DeInit+0x54>)
 8005df8:	4413      	add	r3, r2
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f002 fb45 	bl	800848c <EXTMEM_DRIVER_NOR_SFDP_DeInit>
        break;
 8005e02:	e002      	b.n	8005e0a <EXTMEM_DeInit+0x46>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
      default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 8005e04:	23fe      	movs	r3, #254	@ 0xfe
 8005e06:	73fb      	strb	r3, [r7, #15]
        break;
 8005e08:	bf00      	nop
      }
    }
  }
  return retr;
 8005e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	2400008c 	.word	0x2400008c

08005e1c <EXTMEM_MemoryMappedMode>:
  }
  return retr;
}

EXTMEM_StatusTypeDef EXTMEM_MemoryMappedMode(uint32_t MemId, EXTMEM_StateTypeDef State)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	70fb      	strb	r3, [r7, #3]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 8005e28:	23fb      	movs	r3, #251	@ 0xfb
 8005e2a:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d139      	bne.n	8005ea6 <EXTMEM_MemoryMappedMode+0x8a>
  {
    retr = EXTMEM_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 8005e36:	4a1f      	ldr	r2, [pc, #124]	@ (8005eb4 <EXTMEM_MemoryMappedMode+0x98>)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	21ac      	movs	r1, #172	@ 0xac
 8005e3c:	fb01 f303 	mul.w	r3, r1, r3
 8005e40:	4413      	add	r3, r2
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <EXTMEM_MemoryMappedMode+0x32>
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	d025      	beq.n	8005e98 <EXTMEM_MemoryMappedMode+0x7c>
 8005e4c:	e027      	b.n	8005e9e <EXTMEM_MemoryMappedMode+0x82>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        if (EXTMEM_ENABLE == State)
 8005e4e:	78fb      	ldrb	r3, [r7, #3]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d110      	bne.n	8005e76 <EXTMEM_MemoryMappedMode+0x5a>
        {
          /* start the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	22ac      	movs	r2, #172	@ 0xac
 8005e58:	fb02 f303 	mul.w	r3, r2, r3
 8005e5c:	3308      	adds	r3, #8
 8005e5e:	4a15      	ldr	r2, [pc, #84]	@ (8005eb4 <EXTMEM_MemoryMappedMode+0x98>)
 8005e60:	4413      	add	r3, r2
 8005e62:	3304      	adds	r3, #4
 8005e64:	4618      	mov	r0, r3
 8005e66:	f002 fb20 	bl	80084aa <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>
 8005e6a:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d019      	beq.n	8005ea4 <EXTMEM_MemoryMappedMode+0x88>
          {
            return EXTMEM_ERROR_DRIVER;
 8005e70:	f06f 0302 	mvn.w	r3, #2
 8005e74:	e019      	b.n	8005eaa <EXTMEM_MemoryMappedMode+0x8e>
        }
        else
        {
          /* stop the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	22ac      	movs	r2, #172	@ 0xac
 8005e7a:	fb02 f303 	mul.w	r3, r2, r3
 8005e7e:	3308      	adds	r3, #8
 8005e80:	4a0c      	ldr	r2, [pc, #48]	@ (8005eb4 <EXTMEM_MemoryMappedMode+0x98>)
 8005e82:	4413      	add	r3, r2
 8005e84:	3304      	adds	r3, #4
 8005e86:	4618      	mov	r0, r3
 8005e88:	f002 fb30 	bl	80084ec <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>
 8005e8c:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d008      	beq.n	8005ea4 <EXTMEM_MemoryMappedMode+0x88>
          {
            return EXTMEM_ERROR_DRIVER;
 8005e92:	f06f 0302 	mvn.w	r3, #2
 8005e96:	e008      	b.n	8005eaa <EXTMEM_MemoryMappedMode+0x8e>
       }
       break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    case EXTMEM_SDCARD :
      retr = EXTMEM_ERROR_NOTSUPPORTED;
 8005e98:	23ff      	movs	r3, #255	@ 0xff
 8005e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8005e9c:	e003      	b.n	8005ea6 <EXTMEM_MemoryMappedMode+0x8a>
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 8005e9e:	23fe      	movs	r3, #254	@ 0xfe
 8005ea0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ea2:	e000      	b.n	8005ea6 <EXTMEM_MemoryMappedMode+0x8a>
        break;
 8005ea4:	bf00      	nop
      }
    }
  }
  return retr;
 8005ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	2400008c 	.word	0x2400008c

08005eb8 <EXTMEM_GetMapAddress>:

EXTMEM_StatusTypeDef EXTMEM_GetMapAddress(uint32_t MemId, uint32_t *BaseAddress)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 8005ec2:	23fb      	movs	r3, #251	@ 0xfb
 8005ec4:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d134      	bne.n	8005f36 <EXTMEM_GetMapAddress+0x7e>
  {
    retr = EXTMEM_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 8005ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f48 <EXTMEM_GetMapAddress+0x90>)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	21ac      	movs	r1, #172	@ 0xac
 8005ed6:	fb01 f303 	mul.w	r3, r1, r3
 8005eda:	4413      	add	r3, r2
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <EXTMEM_GetMapAddress+0x2e>
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d124      	bne.n	8005f30 <EXTMEM_GetMapAddress+0x78>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1 || EXTMEM_DRIVER_PSRAM == 1
      case EXTMEM_PSRAM:
      case EXTMEM_NOR_SFDP:{
#if defined(XSPI1)       
       if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI1)
 8005ee6:	4a18      	ldr	r2, [pc, #96]	@ (8005f48 <EXTMEM_GetMapAddress+0x90>)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	21ac      	movs	r1, #172	@ 0xac
 8005eec:	fb01 f303 	mul.w	r3, r1, r3
 8005ef0:	4413      	add	r3, r2
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a14      	ldr	r2, [pc, #80]	@ (8005f4c <EXTMEM_GetMapAddress+0x94>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d104      	bne.n	8005f08 <EXTMEM_GetMapAddress+0x50>
        {
          *BaseAddress = XSPI1_BASE;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
 8005f04:	601a      	str	r2, [r3, #0]
       else
       { 
          retr = EXTMEM_ERROR_DRIVER;
       }

       break;
 8005f06:	e016      	b.n	8005f36 <EXTMEM_GetMapAddress+0x7e>
       else if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI2)
 8005f08:	4a0f      	ldr	r2, [pc, #60]	@ (8005f48 <EXTMEM_GetMapAddress+0x90>)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	21ac      	movs	r1, #172	@ 0xac
 8005f0e:	fb01 f303 	mul.w	r3, r1, r3
 8005f12:	4413      	add	r3, r2
 8005f14:	3304      	adds	r3, #4
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8005f50 <EXTMEM_GetMapAddress+0x98>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d104      	bne.n	8005f2a <EXTMEM_GetMapAddress+0x72>
          *BaseAddress = XSPI2_BASE;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8005f26:	601a      	str	r2, [r3, #0]
       break;
 8005f28:	e005      	b.n	8005f36 <EXTMEM_GetMapAddress+0x7e>
          retr = EXTMEM_ERROR_DRIVER;
 8005f2a:	23fd      	movs	r3, #253	@ 0xfd
 8005f2c:	73fb      	strb	r3, [r7, #15]
       break;
 8005f2e:	e002      	b.n	8005f36 <EXTMEM_GetMapAddress+0x7e>
      break;
      }
#endif /* EXTMEM_DRIVER_USER == 1 */      
      default :
      {
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 8005f30:	23fe      	movs	r3, #254	@ 0xfe
 8005f32:	73fb      	strb	r3, [r7, #15]
        break;
 8005f34:	bf00      	nop
      }
    }
  }
  return retr;
 8005f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	2400008c 	.word	0x2400008c
 8005f4c:	52005000 	.word	0x52005000
 8005f50:	5200a000 	.word	0x5200a000

08005f54 <SAL_XSPI_SetClock>:
/* Private variables ---------------------------------------------------------*/
/** @defgroup SAL_XSPI_Exported_Functions SAL XSP Exported Functions
  * @{
  */
HAL_StatusTypeDef SAL_XSPI_SetClock(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t ClockIn, uint32_t ClockRequested, uint32_t *ClockReal)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr = HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	75fb      	strb	r3, [r7, #23]
  uint32_t divider;

  if (ClockRequested == 0u)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d102      	bne.n	8005f72 <SAL_XSPI_SetClock+0x1e>
  {
    retr = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	75fb      	strb	r3, [r7, #23]
 8005f70:	e028      	b.n	8005fc4 <SAL_XSPI_SetClock+0x70>
  }
  else
  {
    divider = (ClockIn / ClockRequested);
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7a:	613b      	str	r3, [r7, #16]
    if (divider >= 1u)
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00d      	beq.n	8005f9e <SAL_XSPI_SetClock+0x4a>
    {
      *ClockReal = ClockIn / divider;
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	601a      	str	r2, [r3, #0]
      if (*ClockReal <= ClockRequested)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d302      	bcc.n	8005f9e <SAL_XSPI_SetClock+0x4a>
      {
        divider--;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	613b      	str	r3, [r7, #16]
    divider++;
    divider++;
#endif

    /* real clock calculation */
    *ClockReal = ClockIn / (divider + 1u);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	601a      	str	r2, [r3, #0]

    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::CLOCK::"); DEBUG_PARAM_INT(divider); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER, (uint32_t)divider << XSPI_DCR2_PRESCALER_Pos);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	60da      	str	r2, [r3, #12]
  }

  return retr;
 8005fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <SAL_XSPI_Init>:
/*
* This function is used to configure the way to discuss with the memory
*
*/
HAL_StatusTypeDef SAL_XSPI_Init(SAL_XSPI_ObjectTypeDef *SalXspi, void *HALHandle)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b096      	sub	sp, #88	@ 0x58
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
  XSPI_RegularCmdTypeDef s_commandbase = {
 8005fdc:	f107 030c 	add.w	r3, r7, #12
 8005fe0:	224c      	movs	r2, #76	@ 0x4c
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f002 fa97 	bl	8008518 <memset>
 8005fea:	235a      	movs	r3, #90	@ 0x5a
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	2301      	movs	r3, #1
 8005ff0:	61bb      	str	r3, [r7, #24]
 8005ff2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ff8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ffe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006002:	647b      	str	r3, [r7, #68]	@ 0x44
 8006004:	2308      	movs	r3, #8
 8006006:	653b      	str	r3, [r7, #80]	@ 0x50
#if defined(XSPI_CCR_SIOO)
      .SIOOMode = HAL_XSPI_SIOO_INST_EVERY_CMD,
#endif /* HAL_XSPI_SIOO_INST_EVERY_CMD */
  };

  SalXspi->hxspi = (XSPI_HandleTypeDef *)HALHandle;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	601a      	str	r2, [r3, #0]
  SalXspi->Commandbase = s_commandbase;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3304      	adds	r3, #4
 8006012:	f107 010c 	add.w	r1, r7, #12
 8006016:	224c      	movs	r2, #76	@ 0x4c
 8006018:	4618      	mov	r0, r3
 800601a:	f002 faa9 	bl	8008570 <memcpy>
  SalXspi->CommandExtension = 0;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  SalXspi->PhyLink = PHY_LINK_1S1S1S;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_TX_CPLT_CB_ID, SAL_XSPI_CompleteCallback);
  /* set the error callback */
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_ERROR_CB_ID, SAL_XSPI_ErrorCallback);
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3758      	adds	r7, #88	@ 0x58
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <SAL_XSPI_MemoryConfig>:

HAL_StatusTypeDef SAL_XSPI_MemoryConfig(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_MemParamTypeTypeDef ParmetersType, void *ParamVal)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b098      	sub	sp, #96	@ 0x60
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	460b      	mov	r3, r1
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr = HAL_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  XSPI_RegularCmdTypeDef s_commandbase = SalXspi->Commandbase;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f107 0010 	add.w	r0, r7, #16
 8006052:	3304      	adds	r3, #4
 8006054:	224c      	movs	r2, #76	@ 0x4c
 8006056:	4619      	mov	r1, r3
 8006058:	f002 fa8a 	bl	8008570 <memcpy>

  switch (ParmetersType) {
 800605c:	7afb      	ldrb	r3, [r7, #11]
 800605e:	2b04      	cmp	r3, #4
 8006060:	f200 812a 	bhi.w	80062b8 <SAL_XSPI_MemoryConfig+0x280>
 8006064:	a201      	add	r2, pc, #4	@ (adr r2, 800606c <SAL_XSPI_MemoryConfig+0x34>)
 8006066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606a:	bf00      	nop
 800606c:	08006081 	.word	0x08006081
 8006070:	080062a9 	.word	0x080062a9
 8006074:	0800627b 	.word	0x0800627b
 8006078:	080062b9 	.word	0x080062b9
 800607c:	08006283 	.word	0x08006283
  case PARAM_PHY_LINK:{
    SalXspi->PhyLink = *((SAL_XSPI_PhysicalLinkTypeDef *)ParamVal);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	781a      	ldrb	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_PHY_LINK::");DEBUG_PARAM_DATA(STR_PHY_LINK(SalXspi->PhyLink));
    switch (SalXspi->PhyLink)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8006090:	2b0b      	cmp	r3, #11
 8006092:	f200 80ed 	bhi.w	8006270 <SAL_XSPI_MemoryConfig+0x238>
 8006096:	a201      	add	r2, pc, #4	@ (adr r2, 800609c <SAL_XSPI_MemoryConfig+0x64>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	080060cd 	.word	0x080060cd
 80060a0:	080060cd 	.word	0x080060cd
 80060a4:	080060cd 	.word	0x080060cd
 80060a8:	080060cd 	.word	0x080060cd
 80060ac:	080060fd 	.word	0x080060fd
 80060b0:	080060fd 	.word	0x080060fd
 80060b4:	0800612d 	.word	0x0800612d
 80060b8:	08006161 	.word	0x08006161
 80060bc:	08006191 	.word	0x08006191
 80060c0:	080061c7 	.word	0x080061c7
 80060c4:	080061fd 	.word	0x080061fd
 80060c8:	08006237 	.word	0x08006237
    {
    case PHY_LINK_1S1D1D:
    case PHY_LINK_1S2S2S:
    case PHY_LINK_1S1S2S:
    case PHY_LINK_1S1S1S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
 80060cc:	2301      	movs	r3, #1
 80060ce:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 80060d0:	2300      	movs	r3, #0
 80060d2:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80060d4:	2300      	movs	r3, #0
 80060d6:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_1_LINE;
 80060d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 80060de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80060e2:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
 80060e4:	2300      	movs	r3, #0
 80060e6:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_1_LINE;
 80060e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
 80060ee:	2300      	movs	r3, #0
 80060f0:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
 80060f2:	2308      	movs	r3, #8
 80060f4:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 80060f6:	2300      	movs	r3, #0
 80060f8:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 80060fa:	e0bd      	b.n	8006278 <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_4S4D4D:
    case PHY_LINK_4S4S4S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
 80060fc:	2303      	movs	r3, #3
 80060fe:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8006100:	2300      	movs	r3, #0
 8006102:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8006104:	2300      	movs	r3, #0
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
 8006108:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800610c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
 800610e:	2300      	movs	r3, #0
 8006110:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 8006112:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006116:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
 8006118:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800611c:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
 800611e:	2300      	movs	r3, #0
 8006120:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
 8006122:	2306      	movs	r3, #6
 8006124:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 8006126:	2300      	movs	r3, #0
 8006128:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 800612a:	e0a5      	b.n	8006278 <SAL_XSPI_MemoryConfig+0x240>
      }
    case PHY_LINK_4D4D4D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
 800612c:	2303      	movs	r3, #3
 800612e:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8006130:	2300      	movs	r3, #0
 8006132:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 8006134:	2308      	movs	r3, #8
 8006136:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
 8006138:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800613c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 800613e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006142:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8006144:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006148:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
 800614a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800614e:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
 8006150:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006154:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
 8006156:	2306      	movs	r3, #6
 8006158:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 800615a:	2300      	movs	r3, #0
 800615c:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 800615e:	e08b      	b.n	8006278 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_1S8S8S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
 8006160:	2301      	movs	r3, #1
 8006162:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8006164:	2300      	movs	r3, #0
 8006166:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8006168:	2300      	movs	r3, #0
 800616a:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
 800616c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006170:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 8006172:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006176:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8006178:	2300      	movs	r3, #0
 800617a:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
 800617c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006180:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
 8006182:	2300      	movs	r3, #0
 8006184:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
 8006186:	2308      	movs	r3, #8
 8006188:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 800618a:	2300      	movs	r3, #0
 800618c:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 800618e:	e073      	b.n	8006278 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_8S8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
 8006190:	2304      	movs	r3, #4
 8006192:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8006194:	2300      	movs	r3, #0
 8006196:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8006198:	2300      	movs	r3, #0
 800619a:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
 800619c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 80061a2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80061a6:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 80061a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80061ac:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
 80061ae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80061b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
 80061b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80061b8:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
 80061ba:	2308      	movs	r3, #8
 80061bc:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
 80061be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80061c2:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 80061c4:	e058      	b.n	8006278 <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_8D8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
 80061c6:	2304      	movs	r3, #4
 80061c8:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_16_BITS;
 80061ca:	2310      	movs	r3, #16
 80061cc:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 80061ce:	2308      	movs	r3, #8
 80061d0:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
 80061d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 80061d8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80061dc:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 80061de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80061e2:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
 80061e4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80061e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
 80061ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80061ee:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 20;
 80061f0:	2314      	movs	r3, #20
 80061f2:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
 80061f4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80061f8:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 80061fa:	e03d      	b.n	8006278 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_RAM8:{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 80061fc:	2304      	movs	r3, #4
 80061fe:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
 8006200:	2300      	movs	r3, #0
 8006202:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8006204:	2300      	movs	r3, #0
 8006206:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 8006208:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800620c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 800620e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006212:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8006214:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006218:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 800621a:	2300      	movs	r3, #0
 800621c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_8_LINES;
 800621e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006222:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 8006224:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006228:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
 800622a:	230a      	movs	r3, #10
 800622c:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
 800622e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006232:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 8006234:	e020      	b.n	8006278 <SAL_XSPI_MemoryConfig+0x240>
    }
#if defined(HAL_XSPI_DATA_16_LINES)
    case PHY_LINK_RAM16 :{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 8006236:	2304      	movs	r3, #4
 8006238:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
 800623a:	2300      	movs	r3, #0
 800623c:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800623e:	2300      	movs	r3, #0
 8006240:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 8006242:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006246:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 8006248:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800624c:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 800624e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006252:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8006254:	2300      	movs	r3, #0
 8006256:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_16_LINES;
 8006258:	f04f 63a0 	mov.w	r3, #83886080	@ 0x5000000
 800625c:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 800625e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006262:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
 8006264:	230a      	movs	r3, #10
 8006266:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
 8006268:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800626c:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 800626e:	e003      	b.n	8006278 <SAL_XSPI_MemoryConfig+0x240>
    }
#endif /* defined(HAL_XSPI_DATA_16_LINES) */
    default:
      retr = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      break;
 8006276:	bf00      	nop
    }
    DEBUG_PARAM_END();
    break;
 8006278:	e022      	b.n	80062c0 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_ADDRESS_4BITS: {
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_ADDRESS_4BITS"); DEBUG_PARAM_END();
    s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 800627a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800627e:	633b      	str	r3, [r7, #48]	@ 0x30
    break;
 8006280:	e01e      	b.n	80062c0 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_FLASHSIZE:{
    uint8_t valParam = *((uint8_t *)ParamVal);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_FLASHSIZE::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_DEVSIZE, ((uint32_t)valParam) << XSPI_DCR1_DEVSIZE_Pos);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8006296:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800629a:	041a      	lsls	r2, r3, #16
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	609a      	str	r2, [r3, #8]
    break;
 80062a6:	e00b      	b.n	80062c0 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_DUMMY_CYCLES:{
    uint8_t valParam = *((uint8_t *)ParamVal);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_DUMMY_CYCLES::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    s_commandbase.DummyCycles = valParam;
 80062b0:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80062b4:	657b      	str	r3, [r7, #84]	@ 0x54
    break;
 80062b6:	e003      	b.n	80062c0 <SAL_XSPI_MemoryConfig+0x288>
  }
  default:
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_MemoryConfig::ERROR"); DEBUG_PARAM_END();
    retr = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    break;
 80062be:	bf00      	nop
  }
  SalXspi->Commandbase = s_commandbase;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3304      	adds	r3, #4
 80062c4:	f107 0110 	add.w	r1, r7, #16
 80062c8:	224c      	movs	r2, #76	@ 0x4c
 80062ca:	4618      	mov	r0, r3
 80062cc:	f002 f950 	bl	8008570 <memcpy>
  return retr;
 80062d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3760      	adds	r7, #96	@ 0x60
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <SAL_XSPI_GetSFDP>:

HAL_StatusTypeDef SAL_XSPI_GetSFDP(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b098      	sub	sp, #96	@ 0x60
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f107 0010 	add.w	r0, r7, #16
 80062f0:	3304      	adds	r3, #4
 80062f2:	224c      	movs	r2, #76	@ 0x4c
 80062f4:	4619      	mov	r1, r3
 80062f6:	f002 f93b 	bl	8008570 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, 0x5A);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006300:	6a39      	ldr	r1, [r7, #32]
 8006302:	225a      	movs	r2, #90	@ 0x5a
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fb6a 	bl	80069de <XSPI_FormatCommand>
 800630a:	4603      	mov	r3, r0
 800630c:	61bb      	str	r3, [r7, #24]

  s_command.Address     = Address;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength  = DataSize;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles = SalXspi->SFDPDummyCycle;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800631c:	657b      	str	r3, [r7, #84]	@ 0x54

  if (s_command.AddressMode == HAL_XSPI_ADDRESS_1_LINE)
 800631e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006320:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006324:	d102      	bne.n	800632c <SAL_XSPI_GetSFDP+0x50>
  {
    s_command.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 8006326:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800632a:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
 800632c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800632e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006332:	d103      	bne.n	800633c <SAL_XSPI_GetSFDP+0x60>
  {
    s_command.DQSMode = HAL_XSPI_DQS_ENABLE;
 8006334:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006338:	65bb      	str	r3, [r7, #88]	@ 0x58
 800633a:	e001      	b.n	8006340 <SAL_XSPI_GetSFDP+0x64>
  }
  else
  {
    s_command.DQSMode = HAL_XSPI_DQS_DISABLE;
 800633c:	2300      	movs	r3, #0
 800633e:	65bb      	str	r3, [r7, #88]	@ 0x58
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f107 0110 	add.w	r1, r7, #16
 8006348:	2264      	movs	r2, #100	@ 0x64
 800634a:	4618      	mov	r0, r3
 800634c:	f7fe fdf8 	bl	8004f40 <HAL_XSPI_Command>
 8006350:	4603      	mov	r3, r0
 8006352:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 8006356:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10a      	bne.n	8006374 <SAL_XSPI_GetSFDP+0x98>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2264      	movs	r2, #100	@ 0x64
 8006364:	6879      	ldr	r1, [r7, #4]
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe feed 	bl	8005146 <HAL_XSPI_Receive>
 800636c:	4603      	mov	r3, r0
 800636e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006372:	e000      	b.n	8006376 <SAL_XSPI_GetSFDP+0x9a>
    goto error;
 8006374:	bf00      	nop

error:
  if (retr != HAL_OK )
 8006376:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800637a:	2b00      	cmp	r3, #0
 800637c:	d004      	beq.n	8006388 <SAL_XSPI_GetSFDP+0xac>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4618      	mov	r0, r3
 8006384:	f7ff f85a 	bl	800543c <HAL_XSPI_Abort>
  }
  return retr;
 8006388:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800638c:	4618      	mov	r0, r3
 800638e:	3760      	adds	r7, #96	@ 0x60
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <SAL_XSPI_GetId>:

HAL_StatusTypeDef SAL_XSPI_GetId(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t *Data, uint32_t DataSize)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b098      	sub	sp, #96	@ 0x60
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f107 0010 	add.w	r0, r7, #16
 80063a6:	3304      	adds	r3, #4
 80063a8:	224c      	movs	r2, #76	@ 0x4c
 80063aa:	4619      	mov	r1, r3
 80063ac:	f002 f8e0 	bl	8008570 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, 0x9F);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80063b6:	6a39      	ldr	r1, [r7, #32]
 80063b8:	229f      	movs	r2, #159	@ 0x9f
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 fb0f 	bl	80069de <XSPI_FormatCommand>
 80063c0:	4603      	mov	r3, r0
 80063c2:	61bb      	str	r3, [r7, #24]

  s_command.DataLength  = DataSize;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.AddressMode = HAL_XSPI_ADDRESS_NONE;
 80063c8:	2300      	movs	r3, #0
 80063ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if  (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d105      	bne.n	80063de <SAL_XSPI_GetId+0x4a>
  {
    s_command.DummyCycles       = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	657b      	str	r3, [r7, #84]	@ 0x54
    /* this behavior is linked with micron memory to read ID in 1S8S8S */
    s_command.DataMode = HAL_XSPI_DATA_1_LINE;
 80063d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063dc:	e003      	b.n	80063e6 <SAL_XSPI_GetId+0x52>
  }
  else
  {
    /* this behavior is valid for macromix and must be confirmed on the other memories */
    s_command.Address = 0;
 80063de:	2300      	movs	r3, #0
 80063e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.DummyCycles = 8;
 80063e2:	2308      	movs	r3, #8
 80063e4:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f107 0110 	add.w	r1, r7, #16
 80063ee:	2264      	movs	r2, #100	@ 0x64
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fe fda5 	bl	8004f40 <HAL_XSPI_Command>
 80063f6:	4603      	mov	r3, r0
 80063f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 80063fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10a      	bne.n	800641a <SAL_XSPI_GetId+0x86>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2264      	movs	r2, #100	@ 0x64
 800640a:	68b9      	ldr	r1, [r7, #8]
 800640c:	4618      	mov	r0, r3
 800640e:	f7fe fe9a 	bl	8005146 <HAL_XSPI_Receive>
 8006412:	4603      	mov	r3, r0
 8006414:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006418:	e000      	b.n	800641c <SAL_XSPI_GetId+0x88>
    goto error;
 800641a:	bf00      	nop

error:
  if (retr != HAL_OK )
 800641c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006420:	2b00      	cmp	r3, #0
 8006422:	d004      	beq.n	800642e <SAL_XSPI_GetId+0x9a>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4618      	mov	r0, r3
 800642a:	f7ff f807 	bl	800543c <HAL_XSPI_Abort>
  }
  return retr;
 800642e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006432:	4618      	mov	r0, r3
 8006434:	3760      	adds	r7, #96	@ 0x60
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <SAL_XSPI_Read>:

HAL_StatusTypeDef SAL_XSPI_Read(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b098      	sub	sp, #96	@ 0x60
 800643e:	af00      	add	r7, sp, #0
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
 8006446:	460b      	mov	r3, r1
 8006448:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f107 0010 	add.w	r0, r7, #16
 8006450:	3304      	adds	r3, #4
 8006452:	224c      	movs	r2, #76	@ 0x4c
 8006454:	4619      	mov	r1, r3
 8006456:	f002 f88b 	bl	8008570 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006460:	6a39      	ldr	r1, [r7, #32]
 8006462:	7afa      	ldrb	r2, [r7, #11]
 8006464:	4618      	mov	r0, r3
 8006466:	f000 faba 	bl	80069de <XSPI_FormatCommand>
 800646a:	4603      	mov	r3, r0
 800646c:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
 8006472:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006474:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DTR management for single/dual/quad */
  switch(SalXspi->PhyLink)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800647c:	2b05      	cmp	r3, #5
 800647e:	d006      	beq.n	800648e <SAL_XSPI_Read+0x54>
 8006480:	2b05      	cmp	r3, #5
 8006482:	dc1a      	bgt.n	80064ba <SAL_XSPI_Read+0x80>
 8006484:	2b01      	cmp	r3, #1
 8006486:	d014      	beq.n	80064b2 <SAL_XSPI_Read+0x78>
 8006488:	2b02      	cmp	r3, #2
 800648a:	d00b      	beq.n	80064a4 <SAL_XSPI_Read+0x6a>
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
   break;
   }
   default :{
     /* keep default parameters */
   break;
 800648c:	e015      	b.n	80064ba <SAL_XSPI_Read+0x80>
     s_command.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 800648e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006492:	637b      	str	r3, [r7, #52]	@ 0x34
     s_command.DataDTRMode    = HAL_XSPI_DATA_DTR_ENABLE;
 8006494:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006498:	653b      	str	r3, [r7, #80]	@ 0x50
     s_command.DummyCycles = SalXspi->DTRDummyCycle;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 80064a0:	657b      	str	r3, [r7, #84]	@ 0x54
   break;
 80064a2:	e00b      	b.n	80064bc <SAL_XSPI_Read+0x82>
     s_command.AddressMode = HAL_XSPI_ADDRESS_2_LINES;
 80064a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
 80064aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
 80064b0:	e004      	b.n	80064bc <SAL_XSPI_Read+0x82>
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
 80064b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
 80064b8:	e000      	b.n	80064bc <SAL_XSPI_Read+0x82>
   break;
 80064ba:	bf00      	nop
   }
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f107 0110 	add.w	r1, r7, #16
 80064c4:	2264      	movs	r2, #100	@ 0x64
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fd3a 	bl	8004f40 <HAL_XSPI_Command>
 80064cc:	4603      	mov	r3, r0
 80064ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 80064d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d107      	bne.n	80064ea <SAL_XSPI_Read+0xb0>
  {
    goto error;
  }

  /* read the data */
  retr = XSPI_Receive(SalXspi, Data);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 faba 	bl	8006a56 <XSPI_Receive>
 80064e2:	4603      	mov	r3, r0
 80064e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80064e8:	e000      	b.n	80064ec <SAL_XSPI_Read+0xb2>
    goto error;
 80064ea:	bf00      	nop

error:
  if (retr != HAL_OK )
 80064ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d004      	beq.n	80064fe <SAL_XSPI_Read+0xc4>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fe ff9f 	bl	800543c <HAL_XSPI_Abort>
  }
  return retr;
 80064fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006502:	4618      	mov	r0, r3
 8006504:	3760      	adds	r7, #96	@ 0x60
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <SAL_XSPI_Write>:

HAL_StatusTypeDef SAL_XSPI_Write(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, const uint8_t *Data, uint32_t DataSize)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b098      	sub	sp, #96	@ 0x60
 800650e:	af00      	add	r7, sp, #0
 8006510:	60f8      	str	r0, [r7, #12]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
 8006516:	460b      	mov	r3, r1
 8006518:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f107 0010 	add.w	r0, r7, #16
 8006520:	3304      	adds	r3, #4
 8006522:	224c      	movs	r2, #76	@ 0x4c
 8006524:	4619      	mov	r1, r3
 8006526:	f002 f823 	bl	8008570 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006530:	6a39      	ldr	r1, [r7, #32]
 8006532:	7afa      	ldrb	r2, [r7, #11]
 8006534:	4618      	mov	r0, r3
 8006536:	f000 fa52 	bl	80069de <XSPI_FormatCommand>
 800653a:	4603      	mov	r3, r0
 800653c:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
 8006542:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006544:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0u;
 8006546:	2300      	movs	r3, #0
 8006548:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode           = HAL_XSPI_DQS_DISABLE;
 800654a:	2300      	movs	r3, #0
 800654c:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f107 0110 	add.w	r1, r7, #16
 8006556:	2264      	movs	r2, #100	@ 0x64
 8006558:	4618      	mov	r0, r3
 800655a:	f7fe fcf1 	bl	8004f40 <HAL_XSPI_Command>
 800655e:	4603      	mov	r3, r0
 8006560:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (HAL_OK != retr)
 8006564:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006568:	2b00      	cmp	r3, #0
 800656a:	d107      	bne.n	800657c <SAL_XSPI_Write+0x72>
  {
    goto error;
  }

  /* transmit data */
  retr = XSPI_Transmit(SalXspi, Data);
 800656c:	6839      	ldr	r1, [r7, #0]
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f000 fa5e 	bl	8006a30 <XSPI_Transmit>
 8006574:	4603      	mov	r3, r0
 8006576:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800657a:	e000      	b.n	800657e <SAL_XSPI_Write+0x74>
    goto error;
 800657c:	bf00      	nop

error:
  if (retr != HAL_OK )
 800657e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006582:	2b00      	cmp	r3, #0
 8006584:	d004      	beq.n	8006590 <SAL_XSPI_Write+0x86>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4618      	mov	r0, r3
 800658c:	f7fe ff56 	bl	800543c <HAL_XSPI_Abort>
  }
  return retr;
 8006590:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006594:	4618      	mov	r0, r3
 8006596:	3760      	adds	r7, #96	@ 0x60
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <SAL_XSPI_CommandSendData>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_CommandSendData(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b098      	sub	sp, #96	@ 0x60
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	607a      	str	r2, [r7, #4]
 80065a6:	461a      	mov	r2, r3
 80065a8:	460b      	mov	r3, r1
 80065aa:	72fb      	strb	r3, [r7, #11]
 80065ac:	4613      	mov	r3, r2
 80065ae:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f107 0010 	add.w	r0, r7, #16
 80065b6:	3304      	adds	r3, #4
 80065b8:	224c      	movs	r2, #76	@ 0x4c
 80065ba:	4619      	mov	r1, r3
 80065bc:	f001 ffd8 	bl	8008570 <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80065c6:	6a39      	ldr	r1, [r7, #32]
 80065c8:	7afa      	ldrb	r2, [r7, #11]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fa07 	bl	80069de <XSPI_FormatCommand>
 80065d0:	4603      	mov	r3, r0
 80065d2:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 80065d4:	2300      	movs	r3, #0
 80065d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
 80065dc:	893b      	ldrh	r3, [r7, #8]
 80065de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 80065e0:	2300      	movs	r3, #0
 80065e2:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
 80065e4:	893b      	ldrh	r3, [r7, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <SAL_XSPI_CommandSendData+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
 80065ea:	2300      	movs	r3, #0
 80065ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f107 0110 	add.w	r1, r7, #16
 80065f6:	2264      	movs	r2, #100	@ 0x64
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fe fca1 	bl	8004f40 <HAL_XSPI_Command>
 80065fe:	4603      	mov	r3, r0
 8006600:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
 8006604:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10c      	bne.n	8006626 <SAL_XSPI_CommandSendData+0x8a>
 800660c:	893b      	ldrh	r3, [r7, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d009      	beq.n	8006626 <SAL_XSPI_CommandSendData+0x8a>
  {
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2264      	movs	r2, #100	@ 0x64
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	4618      	mov	r0, r3
 800661c:	f7fe fd20 	bl	8005060 <HAL_XSPI_Transmit>
 8006620:	4603      	mov	r3, r0
 8006622:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
 8006626:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800662a:	2b00      	cmp	r3, #0
 800662c:	d004      	beq.n	8006638 <SAL_XSPI_CommandSendData+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4618      	mov	r0, r3
 8006634:	f7fe ff02 	bl	800543c <HAL_XSPI_Abort>
  }
  return retr;
 8006638:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800663c:	4618      	mov	r0, r3
 800663e:	3760      	adds	r7, #96	@ 0x60
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <SAL_XSPI_SendReadCommand>:

HAL_StatusTypeDef SAL_XSPI_SendReadCommand(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b098      	sub	sp, #96	@ 0x60
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	607a      	str	r2, [r7, #4]
 800664e:	461a      	mov	r2, r3
 8006650:	460b      	mov	r3, r1
 8006652:	72fb      	strb	r3, [r7, #11]
 8006654:	4613      	mov	r3, r2
 8006656:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f107 0010 	add.w	r0, r7, #16
 800665e:	3304      	adds	r3, #4
 8006660:	224c      	movs	r2, #76	@ 0x4c
 8006662:	4619      	mov	r1, r3
 8006664:	f001 ff84 	bl	8008570 <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800666e:	6a39      	ldr	r1, [r7, #32]
 8006670:	7afa      	ldrb	r2, [r7, #11]
 8006672:	4618      	mov	r0, r3
 8006674:	f000 f9b3 	bl	80069de <XSPI_FormatCommand>
 8006678:	4603      	mov	r3, r0
 800667a:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 800667c:	2300      	movs	r3, #0
 800667e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0u;
 8006680:	2300      	movs	r3, #0
 8006682:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
 8006684:	893b      	ldrh	r3, [r7, #8]
 8006686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8006688:	2300      	movs	r3, #0
 800668a:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
 800668c:	893b      	ldrh	r3, [r7, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <SAL_XSPI_SendReadCommand+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
 8006692:	2300      	movs	r3, #0
 8006694:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f107 0110 	add.w	r1, r7, #16
 800669e:	2264      	movs	r2, #100	@ 0x64
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fe fc4d 	bl	8004f40 <HAL_XSPI_Command>
 80066a6:	4603      	mov	r3, r0
 80066a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
 80066ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10c      	bne.n	80066ce <SAL_XSPI_SendReadCommand+0x8a>
 80066b4:	893b      	ldrh	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d009      	beq.n	80066ce <SAL_XSPI_SendReadCommand+0x8a>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2264      	movs	r2, #100	@ 0x64
 80066c0:	6879      	ldr	r1, [r7, #4]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fe fd3f 	bl	8005146 <HAL_XSPI_Receive>
 80066c8:	4603      	mov	r3, r0
 80066ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
 80066ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d004      	beq.n	80066e0 <SAL_XSPI_SendReadCommand+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fe feae 	bl	800543c <HAL_XSPI_Abort>
  }
  return retr;
 80066e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3760      	adds	r7, #96	@ 0x60
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <SAL_XSPI_CommandSendReadAddress>:

HAL_StatusTypeDef SAL_XSPI_CommandSendReadAddress(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                                  uint32_t Address, uint8_t *Data, uint16_t DataSize)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b098      	sub	sp, #96	@ 0x60
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	607a      	str	r2, [r7, #4]
 80066f6:	603b      	str	r3, [r7, #0]
 80066f8:	460b      	mov	r3, r1
 80066fa:	72fb      	strb	r3, [r7, #11]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f107 0010 	add.w	r0, r7, #16
 8006702:	3304      	adds	r3, #4
 8006704:	224c      	movs	r2, #76	@ 0x4c
 8006706:	4619      	mov	r1, r3
 8006708:	f001 ff32 	bl	8008570 <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006712:	6a39      	ldr	r1, [r7, #32]
 8006714:	7afa      	ldrb	r2, [r7, #11]
 8006716:	4618      	mov	r0, r3
 8006718:	f000 f961 	bl	80069de <XSPI_FormatCommand>
 800671c:	4603      	mov	r3, r0
 800671e:	61bb      	str	r3, [r7, #24]

  s_command.Address            = Address;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DummyCycles        = SalXspi->SFDPDummyCycle;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800672a:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
 800672c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8006730:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8006732:	2300      	movs	r3, #0
 8006734:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f107 0110 	add.w	r1, r7, #16
 800673e:	2264      	movs	r2, #100	@ 0x64
 8006740:	4618      	mov	r0, r3
 8006742:	f7fe fbfd 	bl	8004f40 <HAL_XSPI_Command>
 8006746:	4603      	mov	r3, r0
 8006748:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if ( retr == HAL_OK)
 800674c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006750:	2b00      	cmp	r3, #0
 8006752:	d109      	bne.n	8006768 <SAL_XSPI_CommandSendReadAddress+0x7c>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2264      	movs	r2, #100	@ 0x64
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	4618      	mov	r0, r3
 800675e:	f7fe fcf2 	bl	8005146 <HAL_XSPI_Receive>
 8006762:	4603      	mov	r3, r0
 8006764:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
 8006768:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800676c:	2b00      	cmp	r3, #0
 800676e:	d004      	beq.n	800677a <SAL_XSPI_CommandSendReadAddress+0x8e>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4618      	mov	r0, r3
 8006776:	f7fe fe61 	bl	800543c <HAL_XSPI_Abort>
  }
  return retr;
 800677a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800677e:	4618      	mov	r0, r3
 8006780:	3760      	adds	r7, #96	@ 0x60
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <SAL_XSPI_CheckStatusRegister>:

HAL_StatusTypeDef SAL_XSPI_CheckStatusRegister(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t MatchValue, uint8_t MatchMask, uint32_t Timeout)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b09e      	sub	sp, #120	@ 0x78
 800678a:	af00      	add	r7, sp, #0
 800678c:	60f8      	str	r0, [r7, #12]
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	461a      	mov	r2, r3
 8006792:	460b      	mov	r3, r1
 8006794:	72fb      	strb	r3, [r7, #11]
 8006796:	4613      	mov	r3, r2
 8006798:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80067a0:	3304      	adds	r3, #4
 80067a2:	224c      	movs	r2, #76	@ 0x4c
 80067a4:	4619      	mov	r1, r3
 80067a6:	f001 fee3 	bl	8008570 <memcpy>
  XSPI_AutoPollingTypeDef  s_config = {
 80067aa:	7abb      	ldrb	r3, [r7, #10]
 80067ac:	617b      	str	r3, [r7, #20]
 80067ae:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 80067b2:	61bb      	str	r3, [r7, #24]
 80067b4:	2300      	movs	r3, #0
 80067b6:	61fb      	str	r3, [r7, #28]
 80067b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80067bc:	623b      	str	r3, [r7, #32]
 80067be:	2310      	movs	r3, #16
 80067c0:	627b      	str	r3, [r7, #36]	@ 0x24
                                       .IntervalTime  = 0x10
                                      };
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80067c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80067ca:	7afa      	ldrb	r2, [r7, #11]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 f906 	bl	80069de <XSPI_FormatCommand>
 80067d2:	4603      	mov	r3, r0
 80067d4:	633b      	str	r3, [r7, #48]	@ 0x30

  s_command.DataLength     = 1u;
 80067d6:	2301      	movs	r3, #1
 80067d8:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.DQSMode        = HAL_XSPI_DQS_DISABLE;
 80067da:	2300      	movs	r3, #0
 80067dc:	673b      	str	r3, [r7, #112]	@ 0x70

  if (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
 80067de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d106      	bne.n	80067f2 <SAL_XSPI_CheckStatusRegister+0x6c>
  {
    // patch cypress to force 1 line on status read
    s_command.DataMode    = HAL_XSPI_DATA_1_LINE;
 80067e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80067e8:	663b      	str	r3, [r7, #96]	@ 0x60
    s_command.AddressMode = HAL_XSPI_DATA_NONE;
 80067ea:	2300      	movs	r3, #0
 80067ec:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.DummyCycles = 0u;
 80067ee:	2300      	movs	r3, #0
 80067f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  }

  /* @ is used only in 8 LINES format */
  if (s_command.DataMode == HAL_XSPI_DATA_8_LINES)
 80067f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067f8:	d107      	bne.n	800680a <SAL_XSPI_CheckStatusRegister+0x84>
  {
    s_command.AddressMode    = HAL_XSPI_ADDRESS_8_LINES;
 80067fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067fe:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
 8006800:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006804:	64bb      	str	r3, [r7, #72]	@ 0x48
    s_command.Address        = Address;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	643b      	str	r3, [r7, #64]	@ 0x40
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8006812:	2264      	movs	r2, #100	@ 0x64
 8006814:	4618      	mov	r0, r3
 8006816:	f7fe fb93 	bl	8004f40 <HAL_XSPI_Command>
 800681a:	4603      	mov	r3, r0
 800681c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if ( retr == HAL_OK)
 8006820:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10b      	bne.n	8006840 <SAL_XSPI_CheckStatusRegister+0xba>
  {
    retr = HAL_XSPI_AutoPolling(SalXspi->hxspi, &s_config, Timeout);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f107 0114 	add.w	r1, r7, #20
 8006830:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006834:	4618      	mov	r0, r3
 8006836:	f7fe fd29 	bl	800528c <HAL_XSPI_AutoPolling>
 800683a:	4603      	mov	r3, r0
 800683c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    DEBUG_AUTOPOLLING(SalXspi->hxspi->Instance->DR, s_config.MatchValue, s_config.MatchMask)
  }

  if (retr != HAL_OK )
 8006840:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006844:	2b00      	cmp	r3, #0
 8006846:	d004      	beq.n	8006852 <SAL_XSPI_CheckStatusRegister+0xcc>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4618      	mov	r0, r3
 800684e:	f7fe fdf5 	bl	800543c <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
 8006852:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8006856:	4618      	mov	r0, r3
 8006858:	3778      	adds	r7, #120	@ 0x78
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <SAL_XSPI_EnableMapMode>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_EnableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t CommandRead, uint8_t DummyRead,
                                         uint8_t CommandWrite, uint8_t DummyWrite)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b098      	sub	sp, #96	@ 0x60
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	4608      	mov	r0, r1
 8006868:	4611      	mov	r1, r2
 800686a:	461a      	mov	r2, r3
 800686c:	4603      	mov	r3, r0
 800686e:	70fb      	strb	r3, [r7, #3]
 8006870:	460b      	mov	r3, r1
 8006872:	70bb      	strb	r3, [r7, #2]
 8006874:	4613      	mov	r3, r2
 8006876:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f107 0010 	add.w	r0, r7, #16
 800687e:	3304      	adds	r3, #4
 8006880:	224c      	movs	r2, #76	@ 0x4c
 8006882:	4619      	mov	r1, r3
 8006884:	f001 fe74 	bl	8008570 <memcpy>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8006888:	f107 0308 	add.w	r3, r7, #8
 800688c:	2200      	movs	r2, #0
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	605a      	str	r2, [r3, #4]

  /* Initialize the read ID command */
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
 8006892:	2301      	movs	r3, #1
 8006894:	613b      	str	r3, [r7, #16]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandRead);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800689c:	6a39      	ldr	r1, [r7, #32]
 800689e:	78fa      	ldrb	r2, [r7, #3]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 f89c 	bl	80069de <XSPI_FormatCommand>
 80068a6:	4603      	mov	r3, r0
 80068a8:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles = DummyRead;
 80068aa:	78bb      	ldrb	r3, [r7, #2]
 80068ac:	657b      	str	r3, [r7, #84]	@ 0x54
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f107 0110 	add.w	r1, r7, #16
 80068b6:	2264      	movs	r2, #100	@ 0x64
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fe fb41 	bl	8004f40 <HAL_XSPI_Command>
 80068be:	4603      	mov	r3, r0
 80068c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 80068c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d12d      	bne.n	8006928 <SAL_XSPI_EnableMapMode+0xca>
  {
    goto error;
  }

  /* Initialize the read ID command */
  s_command.OperationType     = HAL_XSPI_OPTYPE_WRITE_CFG;
 80068cc:	2302      	movs	r3, #2
 80068ce:	613b      	str	r3, [r7, #16]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandWrite);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80068d6:	6a39      	ldr	r1, [r7, #32]
 80068d8:	787a      	ldrb	r2, [r7, #1]
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 f87f 	bl	80069de <XSPI_FormatCommand>
 80068e0:	4603      	mov	r3, r0
 80068e2:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles = DummyWrite;
 80068e4:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80068e8:	657b      	str	r3, [r7, #84]	@ 0x54
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f107 0110 	add.w	r1, r7, #16
 80068f2:	2264      	movs	r2, #100	@ 0x64
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fe fb23 	bl	8004f40 <HAL_XSPI_Command>
 80068fa:	4603      	mov	r3, r0
 80068fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 8006900:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006904:	2b00      	cmp	r3, #0
 8006906:	d111      	bne.n	800692c <SAL_XSPI_EnableMapMode+0xce>
  {
    goto error;
  }

  /* Activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation  = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 8006908:	2300      	movs	r3, #0
 800690a:	60bb      	str	r3, [r7, #8]
  sMemMappedCfg.TimeoutPeriodClock = 0x50;
 800690c:	2350      	movs	r3, #80	@ 0x50
 800690e:	60fb      	str	r3, [r7, #12]
  retr = HAL_XSPI_MemoryMapped(SalXspi->hxspi, &sMemMappedCfg);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f107 0208 	add.w	r2, r7, #8
 8006918:	4611      	mov	r1, r2
 800691a:	4618      	mov	r0, r3
 800691c:	f7fe fd40 	bl	80053a0 <HAL_XSPI_MemoryMapped>
 8006920:	4603      	mov	r3, r0
 8006922:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006926:	e002      	b.n	800692e <SAL_XSPI_EnableMapMode+0xd0>
    goto error;
 8006928:	bf00      	nop
 800692a:	e000      	b.n	800692e <SAL_XSPI_EnableMapMode+0xd0>
    goto error;
 800692c:	bf00      	nop

error:
  if (retr != HAL_OK )
 800692e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006932:	2b00      	cmp	r3, #0
 8006934:	d004      	beq.n	8006940 <SAL_XSPI_EnableMapMode+0xe2>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe fd7e 	bl	800543c <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
 8006940:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006944:	4618      	mov	r0, r3
 8006946:	3760      	adds	r7, #96	@ 0x60
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <SAL_XSPI_DisableMapMode>:

HAL_StatusTypeDef SAL_XSPI_DisableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8006954:	f3bf 8f4f 	dsb	sy
}
 8006958:	bf00      	nop
  __DSB();
  return HAL_XSPI_Abort(SalXspi->hxspi);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	f7fe fd6c 	bl	800543c <HAL_XSPI_Abort>
 8006964:	4603      	mov	r3, r0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <SAL_XSPI_UpdateMemoryType>:


HAL_StatusTypeDef SAL_XSPI_UpdateMemoryType(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_DataOrderTypeDef DataOrder)
{
 800696e:	b480      	push	{r7}
 8006970:	b085      	sub	sp, #20
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	460b      	mov	r3, r1
 8006978:	70fb      	strb	r3, [r7, #3]
HAL_StatusTypeDef retr = HAL_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	73fb      	strb	r3, [r7, #15]

  /* read the memory type value */
  uint32_t memorytype = READ_REG(SalXspi->hxspi->Instance->DCR1) & XSPI_DCR1_MTYP;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800698a:	60bb      	str	r3, [r7, #8]

  switch(DataOrder)
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d11e      	bne.n	80069d0 <SAL_XSPI_UpdateMemoryType+0x62>
  {
  case SAL_XSPI_ORDERINVERTED :
    if (memorytype == HAL_XSPI_MEMTYPE_MICRON) {
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d103      	bne.n	80069a0 <SAL_XSPI_UpdateMemoryType+0x32>
      memorytype = HAL_XSPI_MEMTYPE_MACRONIX;
 8006998:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800699c:	60bb      	str	r3, [r7, #8]
 800699e:	e008      	b.n	80069b2 <SAL_XSPI_UpdateMemoryType+0x44>
    } else if (memorytype == HAL_XSPI_MEMTYPE_MACRONIX) {
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069a6:	d102      	bne.n	80069ae <SAL_XSPI_UpdateMemoryType+0x40>
      memorytype = HAL_XSPI_MEMTYPE_MICRON;
 80069a8:	2300      	movs	r3, #0
 80069aa:	60bb      	str	r3, [r7, #8]
 80069ac:	e001      	b.n	80069b2 <SAL_XSPI_UpdateMemoryType+0x44>
    } else {
      retr = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	73fb      	strb	r3, [r7, #15]
    }
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_MTYP, memorytype);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	609a      	str	r2, [r3, #8]
    break;
 80069ca:	bf00      	nop
    return HAL_ERROR;
    break;
  }

  DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_UpdateMemoryType::"); DEBUG_PARAM_INT(memorytype); DEBUG_PARAM_END();
  return retr;
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	e000      	b.n	80069d2 <SAL_XSPI_UpdateMemoryType+0x64>
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <XSPI_FormatCommand>:
  * @param InstructionWidth instruction width
  * @param Command command
  * @return the formatted command
  */
uint16_t XSPI_FormatCommand(uint8_t CommandExtension, uint32_t InstructionWidth, uint8_t Command)
{
 80069de:	b480      	push	{r7}
 80069e0:	b085      	sub	sp, #20
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	4603      	mov	r3, r0
 80069e6:	6039      	str	r1, [r7, #0]
 80069e8:	71fb      	strb	r3, [r7, #7]
 80069ea:	4613      	mov	r3, r2
 80069ec:	71bb      	strb	r3, [r7, #6]
  uint16_t retr;
  if  (InstructionWidth == HAL_XSPI_INSTRUCTION_16_BITS)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b10      	cmp	r3, #16
 80069f2:	d114      	bne.n	8006a1e <XSPI_FormatCommand+0x40>
  {
    /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
    /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
    /* 0b11 Command and Command Extension forms a 16 bit command word :: Not yes handled */
    retr = ((uint16_t)Command << 8u);
 80069f4:	79bb      	ldrb	r3, [r7, #6]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	81fb      	strh	r3, [r7, #14]
    if (CommandExtension == 1u)
 80069fc:	79fb      	ldrb	r3, [r7, #7]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d107      	bne.n	8006a12 <XSPI_FormatCommand+0x34>
    {
       retr|=  (uint8_t)(~Command & 0xFFu);
 8006a02:	79bb      	ldrb	r3, [r7, #6]
 8006a04:	43db      	mvns	r3, r3
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	89fb      	ldrh	r3, [r7, #14]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	81fb      	strh	r3, [r7, #14]
 8006a10:	e007      	b.n	8006a22 <XSPI_FormatCommand+0x44>
    }
    else
    {
       retr|=  (uint8_t)(Command & 0xFFu);
 8006a12:	79bb      	ldrb	r3, [r7, #6]
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	89fb      	ldrh	r3, [r7, #14]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	81fb      	strh	r3, [r7, #14]
 8006a1c:	e001      	b.n	8006a22 <XSPI_FormatCommand+0x44>
    }
  }
  else
  {
    retr = Command;
 8006a1e:	79bb      	ldrb	r3, [r7, #6]
 8006a20:	81fb      	strh	r3, [r7, #14]
  }

  return retr;
 8006a22:	89fb      	ldrh	r3, [r7, #14]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <XSPI_Transmit>:


HAL_StatusTypeDef XSPI_Transmit(SAL_XSPI_ObjectTypeDef *SalXspi, const uint8_t *Data)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmatx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* transmit data */
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2264      	movs	r2, #100	@ 0x64
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fe fb0c 	bl	8005060 <HAL_XSPI_Transmit>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return retr;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <XSPI_Receive>:
  * @param hxpsi handle on the XSPI IP
  * @param Data data pointer
  * @return none
  */
HAL_StatusTypeDef XSPI_Receive(SAL_XSPI_ObjectTypeDef *SalXspi,  uint8_t *Data)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b084      	sub	sp, #16
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmarx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* Reception of the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2264      	movs	r2, #100	@ 0x64
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fe fb6c 	bl	8005146 <HAL_XSPI_Receive>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73fb      	strb	r3, [r7, #15]
        retr = HAL_ERROR;
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  return retr;
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <SFDP_ReadHeader>:
 * @param Object memory Object
 * @param sfdp_header data of the SFDP header
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef SFDP_ReadHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFPD_HeaderTypeDef *sfdp_header)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr;
  uint8_t retry_counter = 0;
 8006a86:	2300      	movs	r3, #0
 8006a88:	73bb      	strb	r3, [r7, #14]
  SFDP_DEBUG_STR(__func__);
  
  do {
    /* Reset the signature value */
    sfdp_header->Signature = 0;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]
    
    /* send the SFDP command to read the header */
    if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 0, (uint8_t*)sfdp_header, SFDP_HEADER_SIZE))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f103 0008 	add.w	r0, r3, #8
 8006a96:	2308      	movs	r3, #8
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	f7ff fc1e 	bl	80062dc <SAL_XSPI_GetSFDP>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d002      	beq.n	8006aac <SFDP_ReadHeader+0x30>
    {
      retr = EXTMEM_SFDP_ERROR_SFPDREAD;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	73fb      	strb	r3, [r7, #15]
      goto error;
 8006aaa:	e01f      	b.n	8006aec <SFDP_ReadHeader+0x70>
    }
    
    /* view the header signature value  */
    SFDP_DEBUG_INT("SFDP signature::", sfdp_header->Signature);
    
    switch(CheckSFDP_Signature(Object, sfdp_header->Signature))
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 fc06 	bl	80082c4 <CheckSFDP_Signature>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d002      	beq.n	8006ac4 <SFDP_ReadHeader+0x48>
 8006abe:	2b05      	cmp	r3, #5
 8006ac0:	d005      	beq.n	8006ace <SFDP_ReadHeader+0x52>
 8006ac2:	e00a      	b.n	8006ada <SFDP_ReadHeader+0x5e>
    {
    case EXTMEM_SFDP_OK:
      SFDP_DEBUG_INT("param_number=", sfdp_header->param_number);
      SFDP_DEBUG_INT("AccessProtocol=", sfdp_header->AccessProtocol);
      retr = EXTMEM_SFDP_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
 8006ac8:	2302      	movs	r3, #2
 8006aca:	73bb      	strb	r3, [r7, #14]
    break;
 8006acc:	e00a      	b.n	8006ae4 <SFDP_ReadHeader+0x68>
    case EXTMEM_SFDP_ERROR_SIGNATUREMTYPE:
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 8006ace:	2304      	movs	r3, #4
 8006ad0:	73fb      	strb	r3, [r7, #15]
      retry_counter++;
 8006ad2:	7bbb      	ldrb	r3, [r7, #14]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	73bb      	strb	r3, [r7, #14]
      break;
 8006ad8:	e004      	b.n	8006ae4 <SFDP_ReadHeader+0x68>
    /* case EXTMEM_SFDP_ERROR_SIGNATURE :*/
    default :
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 8006ada:	2304      	movs	r3, #4
 8006adc:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
 8006ade:	2302      	movs	r3, #2
 8006ae0:	73bb      	strb	r3, [r7, #14]
      break;
 8006ae2:	bf00      	nop
    }
  } while(retry_counter < 2u);
 8006ae4:	7bbb      	ldrb	r3, [r7, #14]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d9cf      	bls.n	8006a8a <SFDP_ReadHeader+0xe>

error:
 8006aea:	bf00      	nop
  return retr;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <SFDP_GetHeader>:


SFDP_StatusTypeDef SFDP_GetHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFPD_HeaderTypeDef *sfdp_header)
{
 8006af8:	b590      	push	{r4, r7, lr}
 8006afa:	b089      	sub	sp, #36	@ 0x24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 8006b02:	2304      	movs	r3, #4
 8006b04:	77fb      	strb	r3, [r7, #31]
  SFDP_DEBUG_STR(__func__);
  const TableConfig_Typedef table_config[] =
 8006b06:	4b2a      	ldr	r3, [pc, #168]	@ (8006bb0 <SFDP_GetHeader+0xb8>)
 8006b08:	f107 040c 	add.w	r4, r7, #12
 8006b0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    {PHY_LINK_8D8D8D, 10u},
    {PHY_LINK_8D8D8D, 16u}
  };
  
  /* loop to find the link configuration of the memory */
  for (uint8_t index = 0u;
 8006b12:	2300      	movs	r3, #0
 8006b14:	77bb      	strb	r3, [r7, #30]
 8006b16:	e040      	b.n	8006b9a <SFDP_GetHeader+0xa2>
  {
    /* Set the command mode */
    SFDP_DEBUG_STR("try a command configuration");
    
    /* Configure the link */
    Object->sfpd_private.DriverInfo.SpiPhyLink  = table_config[index].PhyLink;
 8006b18:	7fbb      	ldrb	r3, [r7, #30]
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	3320      	adds	r3, #32
 8006b1e:	443b      	add	r3, r7
 8006b20:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f103 0008 	add.w	r0, r3, #8
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3364      	adds	r3, #100	@ 0x64
 8006b34:	461a      	mov	r2, r3
 8006b36:	2100      	movs	r1, #0
 8006b38:	f7ff fa7e 	bl	8006038 <SAL_XSPI_MemoryConfig>
    SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfpd_private.SALObject, table_config[index].DummyCycle);
 8006b3c:	7fbb      	ldrb	r3, [r7, #30]
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	3320      	adds	r3, #32
 8006b42:	443b      	add	r3, r7
 8006b44:	f813 2c13 	ldrb.w	r2, [r3, #-19]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Loop on the instruction extension */    
    for (uint8_t IExt = 0u;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	777b      	strb	r3, [r7, #29]
 8006b52:	e017      	b.n	8006b84 <SFDP_GetHeader+0x8c>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
    {
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfpd_private.SALObject, IExt);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	7f7a      	ldrb	r2, [r7, #29]
 8006b58:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Read the sfdp header */
      if (EXTMEM_SFDP_OK == SFDP_ReadHeader(Object, sfdp_header))
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff ff8c 	bl	8006a7c <SFDP_ReadHeader>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <SFDP_GetHeader+0x76>
      {
        retr = EXTMEM_SFDP_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	77fb      	strb	r3, [r7, #31]
      }

      if (table_config[index].PhyLink < PHY_LINK_4S4S4S)
 8006b6e:	7fbb      	ldrb	r3, [r7, #30]
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	3320      	adds	r3, #32
 8006b74:	443b      	add	r3, r7
 8006b76:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d909      	bls.n	8006b92 <SFDP_GetHeader+0x9a>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
 8006b7e:	7f7b      	ldrb	r3, [r7, #29]
 8006b80:	3301      	adds	r3, #1
 8006b82:	777b      	strb	r3, [r7, #29]
 8006b84:	7f7b      	ldrb	r3, [r7, #29]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d804      	bhi.n	8006b94 <SFDP_GetHeader+0x9c>
 8006b8a:	7ffb      	ldrb	r3, [r7, #31]
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	d0e1      	beq.n	8006b54 <SFDP_GetHeader+0x5c>
 8006b90:	e000      	b.n	8006b94 <SFDP_GetHeader+0x9c>
      {
        /* Config 1 is invalid so exit the loop */
        break;
 8006b92:	bf00      	nop
           ; index++) 
 8006b94:	7fbb      	ldrb	r3, [r7, #30]
 8006b96:	3301      	adds	r3, #1
 8006b98:	77bb      	strb	r3, [r7, #30]
       (index < (sizeof(table_config)/sizeof(TableConfig_Typedef))) &&
 8006b9a:	7fbb      	ldrb	r3, [r7, #30]
 8006b9c:	2b07      	cmp	r3, #7
 8006b9e:	d802      	bhi.n	8006ba6 <SFDP_GetHeader+0xae>
 8006ba0:	7ffb      	ldrb	r3, [r7, #31]
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	d0b8      	beq.n	8006b18 <SFDP_GetHeader+0x20>
      }
    }
  }
  return retr;
 8006ba6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3724      	adds	r7, #36	@ 0x24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd90      	pop	{r4, r7, pc}
 8006bb0:	080085ac 	.word	0x080085ac

08006bb4 <SFDP_CollectData>:

SFDP_StatusTypeDef SFDP_CollectData(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b088      	sub	sp, #32
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	77fb      	strb	r3, [r7, #31]
  uint32_t sfdp_adress = SFDP_HEADER_SIZE;
 8006bc0:	2308      	movs	r3, #8
 8006bc2:	61bb      	str	r3, [r7, #24]
  SFDP_DEBUG_STR(__func__);

  /* reset the table mask */
  Object->sfpd_private.Sfdp_table_mask = 0;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* reset the param info */
  (void)memset(sfdp_param_info, 0x0, sizeof(sfdp_param_info));
 8006bcc:	2278      	movs	r2, #120	@ 0x78
 8006bce:	2100      	movs	r1, #0
 8006bd0:	485f      	ldr	r0, [pc, #380]	@ (8006d50 <SFDP_CollectData+0x19c>)
 8006bd2:	f001 fca1 	bl	8008518 <memset>

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	75fb      	strb	r3, [r7, #23]
 8006bda:	e027      	b.n	8006c2c <SFDP_CollectData+0x78>
  {
    CHECK_FUNCTION_CALL(sfdp_get_paraminfo(Object, sfdp_adress, &sfdp_param_info[index]))
 8006bdc:	7dfa      	ldrb	r2, [r7, #23]
 8006bde:	4613      	mov	r3, r2
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	4413      	add	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4a5a      	ldr	r2, [pc, #360]	@ (8006d50 <SFDP_CollectData+0x19c>)
 8006be8:	4413      	add	r3, r2
 8006bea:	461a      	mov	r2, r3
 8006bec:	69b9      	ldr	r1, [r7, #24]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 ffae 	bl	8007b50 <sfdp_get_paraminfo>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	77fb      	strb	r3, [r7, #31]
 8006bf8:	7ffb      	ldrb	r3, [r7, #31]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f040 80a2 	bne.w	8006d44 <SFDP_CollectData+0x190>
    Object->sfpd_private.Sfdp_table_mask |= (uint32_t)sfdp_param_info[index].type;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8006c06:	7dfa      	ldrb	r2, [r7, #23]
 8006c08:	4851      	ldr	r0, [pc, #324]	@ (8006d50 <SFDP_CollectData+0x19c>)
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	4413      	add	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4403      	add	r3, r0
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	ea41 0203 	orr.w	r2, r1, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    sfdp_adress+= SFDP_PARAM_HEADER_SIZE;
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	3308      	adds	r3, #8
 8006c24:	61bb      	str	r3, [r7, #24]
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 8006c26:	7dfb      	ldrb	r3, [r7, #23]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	75fb      	strb	r3, [r7, #23]
 8006c2c:	7dfa      	ldrb	r2, [r7, #23]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8006c34:	3301      	adds	r3, #1
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d3d0      	bcc.n	8006bdc <SFDP_CollectData+0x28>
  }

  /* Read each table param to extract the information to build the driver */
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFPD_PARAMID_UNKNOWN; index++)
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	75bb      	strb	r3, [r7, #22]
 8006c3e:	e075      	b.n	8006d2c <SFDP_CollectData+0x178>
  {
    uint8_t *ptr = NULL;
 8006c40:	2300      	movs	r3, #0
 8006c42:	613b      	str	r3, [r7, #16]
    uint32_t size = sfdp_param_info[index].size;
 8006c44:	7dba      	ldrb	r2, [r7, #22]
 8006c46:	4942      	ldr	r1, [pc, #264]	@ (8006d50 <SFDP_CollectData+0x19c>)
 8006c48:	4613      	mov	r3, r2
 8006c4a:	005b      	lsls	r3, r3, #1
 8006c4c:	4413      	add	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	440b      	add	r3, r1
 8006c52:	3308      	adds	r3, #8
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	60fb      	str	r3, [r7, #12]
    switch(sfdp_param_info[index].type)
 8006c58:	7dba      	ldrb	r2, [r7, #22]
 8006c5a:	493d      	ldr	r1, [pc, #244]	@ (8006d50 <SFDP_CollectData+0x19c>)
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	440b      	add	r3, r1
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c6c:	d029      	beq.n	8006cc2 <SFDP_CollectData+0x10e>
 8006c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c72:	d829      	bhi.n	8006cc8 <SFDP_CollectData+0x114>
 8006c74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c78:	d01d      	beq.n	8006cb6 <SFDP_CollectData+0x102>
 8006c7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c7e:	d823      	bhi.n	8006cc8 <SFDP_CollectData+0x114>
 8006c80:	2b80      	cmp	r3, #128	@ 0x80
 8006c82:	d01b      	beq.n	8006cbc <SFDP_CollectData+0x108>
 8006c84:	2b80      	cmp	r3, #128	@ 0x80
 8006c86:	d81f      	bhi.n	8006cc8 <SFDP_CollectData+0x114>
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d002      	beq.n	8006c92 <SFDP_CollectData+0xde>
 8006c8c:	2b40      	cmp	r3, #64	@ 0x40
 8006c8e:	d00f      	beq.n	8006cb0 <SFDP_CollectData+0xfc>
    case SFPD_PARAMID_OCTAL_DDR:
      ptr = JEDEC_OctalDdr.data_BYTE;
      break;
    default :
      SFDP_DEBUG_STR("the table is not yet handled by the SW");
      break;
 8006c90:	e01a      	b.n	8006cc8 <SFDP_CollectData+0x114>
      JEDEC_Basic.size = sfdp_param_info[index].size;
 8006c92:	7dba      	ldrb	r2, [r7, #22]
 8006c94:	492e      	ldr	r1, [pc, #184]	@ (8006d50 <SFDP_CollectData+0x19c>)
 8006c96:	4613      	mov	r3, r2
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	4b2b      	ldr	r3, [pc, #172]	@ (8006d54 <SFDP_CollectData+0x1a0>)
 8006ca8:	601a      	str	r2, [r3, #0]
      ptr = JEDEC_Basic.Params.data_BYTE;
 8006caa:	4b2b      	ldr	r3, [pc, #172]	@ (8006d58 <SFDP_CollectData+0x1a4>)
 8006cac:	613b      	str	r3, [r7, #16]
      break;
 8006cae:	e00c      	b.n	8006cca <SFDP_CollectData+0x116>
      ptr = JEDEC_Address4Bit.data_BYTE;
 8006cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8006d5c <SFDP_CollectData+0x1a8>)
 8006cb2:	613b      	str	r3, [r7, #16]
      break;
 8006cb4:	e009      	b.n	8006cca <SFDP_CollectData+0x116>
      ptr = JEDEC_SCCR_Map.data_b;
 8006cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8006d60 <SFDP_CollectData+0x1ac>)
 8006cb8:	613b      	str	r3, [r7, #16]
      break;
 8006cba:	e006      	b.n	8006cca <SFDP_CollectData+0x116>
      ptr = JEDEC_XSPI10.data_BYTE;
 8006cbc:	4b29      	ldr	r3, [pc, #164]	@ (8006d64 <SFDP_CollectData+0x1b0>)
 8006cbe:	613b      	str	r3, [r7, #16]
      break;
 8006cc0:	e003      	b.n	8006cca <SFDP_CollectData+0x116>
      ptr = JEDEC_OctalDdr.data_BYTE;
 8006cc2:	4b29      	ldr	r3, [pc, #164]	@ (8006d68 <SFDP_CollectData+0x1b4>)
 8006cc4:	613b      	str	r3, [r7, #16]
      break;
 8006cc6:	e000      	b.n	8006cca <SFDP_CollectData+0x116>
      break;
 8006cc8:	bf00      	nop
    }
    if (ptr != NULL)
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d016      	beq.n	8006cfe <SFDP_CollectData+0x14a>
    {
      if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f103 0008 	add.w	r0, r3, #8
 8006cd6:	7dba      	ldrb	r2, [r7, #22]
 8006cd8:	491d      	ldr	r1, [pc, #116]	@ (8006d50 <SFDP_CollectData+0x19c>)
 8006cda:	4613      	mov	r3, r2
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	4413      	add	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	440b      	add	r3, r1
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	6819      	ldr	r1, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	f7ff faf5 	bl	80062dc <SAL_XSPI_GetSFDP>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <SFDP_CollectData+0x14a>
                                     sfdp_param_info[index].address, 
                                     ptr, size * 4u))
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
 8006cf8:	230c      	movs	r3, #12
 8006cfa:	77fb      	strb	r3, [r7, #31]
        goto error;
 8006cfc:	e022      	b.n	8006d44 <SFDP_CollectData+0x190>
      }
    }

    if (SFPD_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[index].type)
 8006cfe:	7dba      	ldrb	r2, [r7, #22]
 8006d00:	4913      	ldr	r1, [pc, #76]	@ (8006d50 <SFDP_CollectData+0x19c>)
 8006d02:	4613      	mov	r3, r2
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	440b      	add	r3, r1
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b08      	cmp	r3, #8
 8006d10:	d109      	bne.n	8006d26 <SFDP_CollectData+0x172>
    {
      /* save data about the reset procedure */
      Object->sfpd_private.Reset_info = JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support;
 8006d12:	4b10      	ldr	r3, [pc, #64]	@ (8006d54 <SFDP_CollectData+0x1a0>)
 8006d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d18:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	461a      	mov	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFPD_PARAMID_UNKNOWN; index++)
 8006d26:	7dbb      	ldrb	r3, [r7, #22]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	75bb      	strb	r3, [r7, #22]
 8006d2c:	7dba      	ldrb	r2, [r7, #22]
 8006d2e:	4908      	ldr	r1, [pc, #32]	@ (8006d50 <SFDP_CollectData+0x19c>)
 8006d30:	4613      	mov	r3, r2
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	4413      	add	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	440b      	add	r3, r1
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f47f af7f 	bne.w	8006c40 <SFDP_CollectData+0x8c>
    }
  }

error:
 8006d42:	bf00      	nop
  return retr;
 8006d44:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3720      	adds	r7, #32
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	24000138 	.word	0x24000138
 8006d54:	240001b0 	.word	0x240001b0
 8006d58:	240001b4 	.word	0x240001b4
 8006d5c:	24000210 	.word	0x24000210
 8006d60:	24000230 	.word	0x24000230
 8006d64:	24000218 	.word	0x24000218
 8006d68:	240002a0 	.word	0x240002a0

08006d6c <SFDP_MemoryReset>:

SFDP_StatusTypeDef SFDP_MemoryReset(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  RESET_METHOD reset_methode;
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
 8006d74:	2307      	movs	r3, #7
 8006d76:	75bb      	strb	r3, [r7, #22]
  uint32_t sfdp_adress = SFDP_HEADER_SIZE;
 8006d78:	2308      	movs	r3, #8
 8006d7a:	613b      	str	r3, [r7, #16]
  uint8_t find = 0u;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR(__func__);

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 8006d80:	2300      	movs	r3, #0
 8006d82:	73bb      	strb	r3, [r7, #14]
 8006d84:	e02e      	b.n	8006de4 <SFDP_MemoryReset+0x78>
  {
    retr = sfdp_get_paraminfo(Object, sfdp_adress, &sfdp_param_info[0]);
 8006d86:	4a64      	ldr	r2, [pc, #400]	@ (8006f18 <SFDP_MemoryReset+0x1ac>)
 8006d88:	6939      	ldr	r1, [r7, #16]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fee0 	bl	8007b50 <sfdp_get_paraminfo>
 8006d90:	4603      	mov	r3, r0
 8006d92:	75bb      	strb	r3, [r7, #22]
    if (EXTMEM_SFDP_OK == retr)
 8006d94:	7dbb      	ldrb	r3, [r7, #22]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d118      	bne.n	8006dcc <SFDP_MemoryReset+0x60>
    {
      /* check if the table is basic table */        
      if (SFPD_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[0].type)
 8006d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8006f18 <SFDP_MemoryReset+0x1ac>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b08      	cmp	r3, #8
 8006da0:	d114      	bne.n	8006dcc <SFDP_MemoryReset+0x60>
      {
        /* read the JEDEC basic param */
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f103 0008 	add.w	r0, r3, #8
 8006da8:	4b5b      	ldr	r3, [pc, #364]	@ (8006f18 <SFDP_MemoryReset+0x1ac>)
 8006daa:	6859      	ldr	r1, [r3, #4]
                                       sfdp_param_info[0].address, 
                                       JEDEC_Basic.Params.data_BYTE, 
                                       ((uint32_t)sfdp_param_info[0].size) * 4u))
 8006dac:	4b5a      	ldr	r3, [pc, #360]	@ (8006f18 <SFDP_MemoryReset+0x1ac>)
 8006dae:	7a1b      	ldrb	r3, [r3, #8]
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4a5a      	ldr	r2, [pc, #360]	@ (8006f1c <SFDP_MemoryReset+0x1b0>)
 8006db4:	f7ff fa92 	bl	80062dc <SAL_XSPI_GetSFDP>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <SFDP_MemoryReset+0x58>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 8006dbe:	230c      	movs	r3, #12
 8006dc0:	75bb      	strb	r3, [r7, #22]
 8006dc2:	e003      	b.n	8006dcc <SFDP_MemoryReset+0x60>
        }
        else
        {
          retr = EXTMEM_SFDP_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	75bb      	strb	r3, [r7, #22]
          find = 1u;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	73fb      	strb	r3, [r7, #15]
        }
      }
    }

    if ((EXTMEM_SFDP_OK != retr) || (1u == find))
 8006dcc:	7dbb      	ldrb	r3, [r7, #22]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10f      	bne.n	8006df2 <SFDP_MemoryReset+0x86>
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d00c      	beq.n	8006df2 <SFDP_MemoryReset+0x86>
    {
        /* stop the read, if there is an error or if the table has been found */
        break;
    }
    /* look for the next table */        
    sfdp_adress+= SFDP_PARAM_HEADER_SIZE;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	3308      	adds	r3, #8
 8006ddc:	613b      	str	r3, [r7, #16]
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 8006dde:	7bbb      	ldrb	r3, [r7, #14]
 8006de0:	3301      	adds	r3, #1
 8006de2:	73bb      	strb	r3, [r7, #14]
 8006de4:	7bba      	ldrb	r2, [r7, #14]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8006dec:	3301      	adds	r3, #1
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d3c9      	bcc.n	8006d86 <SFDP_MemoryReset+0x1a>
  }
  
  /* if an error has been returned or if the table has not been found */
  if ((EXTMEM_SFDP_OK != retr) || (0u == find))
 8006df2:	7dbb      	ldrb	r3, [r7, #22]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d102      	bne.n	8006dfe <SFDP_MemoryReset+0x92>
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d102      	bne.n	8006e04 <SFDP_MemoryReset+0x98>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8006dfe:	230c      	movs	r3, #12
 8006e00:	75bb      	strb	r3, [r7, #22]
    goto error;
 8006e02:	e083      	b.n	8006f0c <SFDP_MemoryReset+0x1a0>
  }

  /* determine how to proced memory reset */
  if( 0x0u == JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support)
 8006e04:	4b46      	ldr	r3, [pc, #280]	@ (8006f20 <SFDP_MemoryReset+0x1b4>)
 8006e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <SFDP_MemoryReset+0xae>
  {
    /* 00_0000b: no software reset instruction is supported */
    reset_methode = RESET_NONE;
 8006e14:	2300      	movs	r3, #0
 8006e16:	75fb      	strb	r3, [r7, #23]
 8006e18:	e053      	b.n	8006ec2 <SFDP_MemoryReset+0x156>
  }
  else if (0x1u == (0x1u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 8006e1a:	4b41      	ldr	r3, [pc, #260]	@ (8006f20 <SFDP_MemoryReset+0x1b4>)
 8006e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e20:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <SFDP_MemoryReset+0xca>
  {
    /* xx_xxx1b: drive Fh on all 4 data wires for 8 clocks */
    reset_methode = RESET_Fh_4DATA_8CLOCK;
 8006e30:	2301      	movs	r3, #1
 8006e32:	75fb      	strb	r3, [r7, #23]
 8006e34:	e045      	b.n	8006ec2 <SFDP_MemoryReset+0x156>
  }
  else if (0x2u == (0x2u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 8006e36:	4b3a      	ldr	r3, [pc, #232]	@ (8006f20 <SFDP_MemoryReset+0x1b4>)
 8006e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e3c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <SFDP_MemoryReset+0xe6>
  {
    /* xx_xx1xb: drive Fh on all 4 data wires for 10 clocks if device is operating in 4-byte address mode */
    reset_methode = RESET_Fh_4DATA_10CLOCK;
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	75fb      	strb	r3, [r7, #23]
 8006e50:	e037      	b.n	8006ec2 <SFDP_MemoryReset+0x156>
  }
  else if (0x4u == (0x4u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 8006e52:	4b33      	ldr	r3, [pc, #204]	@ (8006f20 <SFDP_MemoryReset+0x1b4>)
 8006e54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e58:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	f003 0304 	and.w	r3, r3, #4
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <SFDP_MemoryReset+0x102>
  {
    /* xx_x1xxb: drive Fh on all 4 data wires for 16 clocks */
    reset_methode = RESET_Fh_4DATA_16CLOCK;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	75fb      	strb	r3, [r7, #23]
 8006e6c:	e029      	b.n	8006ec2 <SFDP_MemoryReset+0x156>
  }
  else if (0x8u == (0x8u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 8006e6e:	4b2c      	ldr	r3, [pc, #176]	@ (8006f20 <SFDP_MemoryReset+0x1b4>)
 8006e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e74:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	f003 0308 	and.w	r3, r3, #8
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <SFDP_MemoryReset+0x11e>
  {
    /* xx_1xxxb: issue instruction F0h */
    reset_methode = RESET_INSTRUCTION_F0;
 8006e84:	2304      	movs	r3, #4
 8006e86:	75fb      	strb	r3, [r7, #23]
 8006e88:	e01b      	b.n	8006ec2 <SFDP_MemoryReset+0x156>
  }
  else if (0x10u == (0x10u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 8006e8a:	4b25      	ldr	r3, [pc, #148]	@ (8006f20 <SFDP_MemoryReset+0x1b4>)
 8006e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e90:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	f003 0310 	and.w	r3, r3, #16
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <SFDP_MemoryReset+0x13a>
  {
    /* x1_xxxxb: issue reset enable instruction 66h, then issue reset instruction 99h. The reset enable,
    reset sequence may be issued on 1, 2, or 4 wires depending on the device operating mode.
    */
    reset_methode = RESET_INSTRUCTION_66_99;
 8006ea0:	2305      	movs	r3, #5
 8006ea2:	75fb      	strb	r3, [r7, #23]
 8006ea4:	e00d      	b.n	8006ec2 <SFDP_MemoryReset+0x156>
  }
  else if (0x20u == (0x20u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 8006ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8006f20 <SFDP_MemoryReset+0x1b4>)
 8006ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eac:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b1f      	cmp	r3, #31
 8006eb4:	d902      	bls.n	8006ebc <SFDP_MemoryReset+0x150>
    xx_xx1x_xxxxb: Hardware reset
    xx_x1xx_xxxxb: Software reset (see bits 13:8 in this DWORD)
    xx_1xxx_xxxxb: Power cycle
    x1_xxxx_xxxxb: Reserved
    */
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 8006eb6:	230f      	movs	r3, #15
 8006eb8:	75bb      	strb	r3, [r7, #22]
    goto error;
 8006eba:	e027      	b.n	8006f0c <SFDP_MemoryReset+0x1a0>
  }
  else
  {
    /* no coherence, should be managed as error */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8006ebc:	230c      	movs	r3, #12
 8006ebe:	75bb      	strb	r3, [r7, #22]
    goto error;
 8006ec0:	e024      	b.n	8006f0c <SFDP_MemoryReset+0x1a0>
  }
  
  switch(reset_methode)
 8006ec2:	7dfb      	ldrb	r3, [r7, #23]
 8006ec4:	2b05      	cmp	r3, #5
 8006ec6:	d009      	beq.n	8006edc <SFDP_MemoryReset+0x170>
 8006ec8:	2b05      	cmp	r3, #5
 8006eca:	dc1b      	bgt.n	8006f04 <SFDP_MemoryReset+0x198>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d01c      	beq.n	8006f0a <SFDP_MemoryReset+0x19e>
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	db17      	blt.n	8006f04 <SFDP_MemoryReset+0x198>
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d814      	bhi.n	8006f04 <SFDP_MemoryReset+0x198>
 8006eda:	e010      	b.n	8006efe <SFDP_MemoryReset+0x192>
  case RESET_NONE:
    break;
  case RESET_INSTRUCTION_66_99:
    /* perform the reset in 1, 2 and 4 lines */
    SFDP_DEBUG_STR("::reset 0x66 0x99");
    (void)SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x66, NULL, 0);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f103 0008 	add.w	r0, r3, #8
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	2166      	movs	r1, #102	@ 0x66
 8006ee8:	f7ff fb58 	bl	800659c <SAL_XSPI_CommandSendData>
    (void)SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x99, NULL, 0);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f103 0008 	add.w	r0, r3, #8
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	2199      	movs	r1, #153	@ 0x99
 8006ef8:	f7ff fb50 	bl	800659c <SAL_XSPI_CommandSendData>
    break;
 8006efc:	e006      	b.n	8006f0c <SFDP_MemoryReset+0x1a0>
  case RESET_INSTRUCTION_F0:
  case RESET_Fh_4DATA_8CLOCK:
  case RESET_Fh_4DATA_10CLOCK:
  case RESET_Fh_4DATA_16CLOCK:
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 8006efe:	230f      	movs	r3, #15
 8006f00:	75bb      	strb	r3, [r7, #22]
    break;
 8006f02:	e003      	b.n	8006f0c <SFDP_MemoryReset+0x1a0>
  /* case RESET_ERROR:*/
  default :
    retr = EXTMEM_SFDP_ERROR_PARAM;
 8006f04:	2301      	movs	r3, #1
 8006f06:	75bb      	strb	r3, [r7, #22]
    break;
 8006f08:	e000      	b.n	8006f0c <SFDP_MemoryReset+0x1a0>
    break;
 8006f0a:	bf00      	nop
  }
error :
  return retr;
 8006f0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3718      	adds	r7, #24
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	24000138 	.word	0x24000138
 8006f1c:	240001b4 	.word	0x240001b4
 8006f20:	240001b0 	.word	0x240001b0

08006f24 <SFDP_BuildGenericDriver>:

SFDP_StatusTypeDef SFDP_BuildGenericDriver(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint8_t *FreqUpdated)
{
 8006f24:	b5b0      	push	{r4, r5, r7, lr}
 8006f26:	b08c      	sub	sp, #48	@ 0x30
 8006f28:	af02      	add	r7, sp, #8
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  static const uint16_t block_erase_unit[] = { 16u, 256u, 4000u, 64000u};
  static const uint32_t chip_erase_unit[]  = { 16u, 256u, 4000u, 64000u};
  SFDP_DEBUG_STR(__func__);
  uint8_t flag4bitAddress = 0u;
 8006f34:	2300      	movs	r3, #0
 8006f36:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint32_t dummyCycles, dummyCyclesValue;
  uint8_t FlashSize;
  
  if ((Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL) != (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f40:	f003 0308 	and.w	r3, r3, #8
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d104      	bne.n	8006f52 <SFDP_BuildGenericDriver+0x2e>
  {
    /* This table is mandatory to build the driver data */
    retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
 8006f48:	2307      	movs	r3, #7
 8006f4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 8006f4e:	f000 bd93 	b.w	8007a78 <SFDP_BuildGenericDriver+0xb54>
  /* ---------------------------------------------------
   *  Flash sizing
   * ---------------------------------------------------
   */
  /* Calculation of the flash density in puissance of 2 */
  if ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x80000000u) == 0x0u)
 8006f52:	4bba      	ldr	r3, [pc, #744]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	db13      	blt.n	8006f82 <SFDP_BuildGenericDriver+0x5e>
  {
#if( __CORTEX_M == 0)
#error "the assembly instruction is not available"
#else
    Object->sfpd_private.FlashSize = 31u - (uint8_t)__CLZ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize + 1u));
 8006f5a:	4bb8      	ldr	r3, [pc, #736]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <SFDP_BuildGenericDriver+0x48>
    return 32U;
 8006f68:	2320      	movs	r3, #32
 8006f6a:	e003      	b.n	8006f74 <SFDP_BuildGenericDriver+0x50>
  return __builtin_clz(value);
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	fab3 f383 	clz	r3, r3
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	f1c3 031f 	rsb	r3, r3, #31
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
 8006f80:	e005      	b.n	8006f8e <SFDP_BuildGenericDriver+0x6a>
#endif /* __CORTEX_M */
  }
  else
  {
    Object->sfpd_private.FlashSize = (uint8_t)(JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x7FFFFFFFu);
 8006f82:	4bae      	ldr	r3, [pc, #696]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  }

  /* Conversion bit to byte */
  Object->sfpd_private.FlashSize = Object->sfpd_private.FlashSize - 3u; /* divide by eight the value */
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8006f94:	3b03      	subs	r3, #3
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e

  SFDP_DEBUG_INT("-> flash size: 2^", Object->sfpd_private.FlashSize);
  FlashSize = Object->sfpd_private.FlashSize - 1u;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	74fb      	strb	r3, [r7, #19]
  (void) SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_FLASHSIZE, &FlashSize);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	3308      	adds	r3, #8
 8006fae:	f107 0213 	add.w	r2, r7, #19
 8006fb2:	2104      	movs	r1, #4
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7ff f83f 	bl	8006038 <SAL_XSPI_MemoryConfig>

  /* get the page size info */
  Object->sfpd_private.PageSize = ((uint32_t)1u <<  JEDEC_Basic.Params.Param_DWORD.D11.PageSize);
 8006fba:	4ba0      	ldr	r3, [pc, #640]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8006fbc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006fc0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	2301      	movs	r3, #1
 8006fca:	fa03 f202 	lsl.w	r2, r3, r2
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* ---------------------------------------------------
   *  Set default command
   * ---------------------------------------------------
   */
  Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x02;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
  /* ---------------------------------------------------
   *  Erase management
   * ---------------------------------------------------
   */
  /* Manage erase data */
  Object->sfpd_private.DriverInfo.EraseType1Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Size;
 8006fda:	4b98      	ldr	r3, [pc, #608]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8006fdc:	f893 2020 	ldrb.w	r2, [r3, #32]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
  Object->sfpd_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Instruction;
 8006fe6:	4b95      	ldr	r3, [pc, #596]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8006fe8:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  Object->sfpd_private.DriverInfo.EraseType2Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Size;
 8006ff2:	4b92      	ldr	r3, [pc, #584]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8006ff4:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  Object->sfpd_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Instruction;
 8006ffe:	4b8f      	ldr	r3, [pc, #572]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8007000:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
  Object->sfpd_private.DriverInfo.EraseType3Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Size;
 800700a:	4b8c      	ldr	r3, [pc, #560]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 800700c:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
  Object->sfpd_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Instruction;
 8007016:	4b89      	ldr	r3, [pc, #548]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8007018:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  Object->sfpd_private.DriverInfo.EraseType4Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Size;
 8007022:	4b86      	ldr	r3, [pc, #536]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8007024:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  Object->sfpd_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Instruction;
 800702e:	4b83      	ldr	r3, [pc, #524]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8007030:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

  if (Object->sfpd_private.DriverInfo.EraseType1Command != 0x0u)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01d      	beq.n	8007080 <SFDP_BuildGenericDriver+0x15c>
  {
    Object->sfpd_private.DriverInfo.EraseType1Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_units];
 8007044:	4b7d      	ldr	r3, [pc, #500]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8007046:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800704a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800704e:	b2db      	uxtb	r3, r3
 8007050:	461a      	mov	r2, r3
 8007052:	4b7a      	ldr	r3, [pc, #488]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8007054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007056:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800705a:	b2db      	uxtb	r3, r3
 800705c:	3301      	adds	r3, #1
 800705e:	fb02 f303 	mul.w	r3, r2, r3
 8007062:	4a76      	ldr	r2, [pc, #472]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8007064:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8007068:	f3c2 0241 	ubfx	r2, r2, #1, #2
 800706c:	b2d2      	uxtb	r2, r2
 800706e:	4611      	mov	r1, r2
 8007070:	4a73      	ldr	r2, [pc, #460]	@ (8007240 <SFDP_BuildGenericDriver+0x31c>)
 8007072:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8007076:	fb03 f202 	mul.w	r2, r3, r2
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }

  if (Object->sfpd_private.DriverInfo.EraseType2Command != 0x0u)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8007086:	2b00      	cmp	r3, #0
 8007088:	d01e      	beq.n	80070c8 <SFDP_BuildGenericDriver+0x1a4>
  {
    Object->sfpd_private.DriverInfo.EraseType2Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_units];
 800708a:	4b6c      	ldr	r3, [pc, #432]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 800708c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007090:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007094:	b2db      	uxtb	r3, r3
 8007096:	461a      	mov	r2, r3
 8007098:	4b68      	ldr	r3, [pc, #416]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 800709a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800709e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	3301      	adds	r3, #1
 80070a6:	fb02 f303 	mul.w	r3, r2, r3
 80070aa:	4a64      	ldr	r2, [pc, #400]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 80070ac:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 80070b0:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80070b4:	b2d2      	uxtb	r2, r2
 80070b6:	4611      	mov	r1, r2
 80070b8:	4a61      	ldr	r2, [pc, #388]	@ (8007240 <SFDP_BuildGenericDriver+0x31c>)
 80070ba:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80070be:	fb03 f202 	mul.w	r2, r3, r2
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  if (Object->sfpd_private.DriverInfo.EraseType3Command != 0x0u)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d01d      	beq.n	800710e <SFDP_BuildGenericDriver+0x1ea>
  {
    Object->sfpd_private.DriverInfo.EraseType3Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_units];
 80070d2:	4b5a      	ldr	r3, [pc, #360]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 80070d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070d8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	461a      	mov	r2, r3
 80070e0:	4b56      	ldr	r3, [pc, #344]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 80070e2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80070e6:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	3301      	adds	r3, #1
 80070ee:	fb02 f303 	mul.w	r3, r2, r3
 80070f2:	4a52      	ldr	r2, [pc, #328]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 80070f4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80070f6:	f3c2 12c1 	ubfx	r2, r2, #7, #2
 80070fa:	b2d2      	uxtb	r2, r2
 80070fc:	4611      	mov	r1, r2
 80070fe:	4a50      	ldr	r2, [pc, #320]	@ (8007240 <SFDP_BuildGenericDriver+0x31c>)
 8007100:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8007104:	fb03 f202 	mul.w	r2, r3, r2
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  if (Object->sfpd_private.DriverInfo.EraseType4Command != 0x0u)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01e      	beq.n	8007156 <SFDP_BuildGenericDriver+0x232>
  {
    Object->sfpd_private.DriverInfo.EraseType4Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_units];
 8007118:	4b48      	ldr	r3, [pc, #288]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 800711a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800711e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007122:	b2db      	uxtb	r3, r3
 8007124:	461a      	mov	r2, r3
 8007126:	4b45      	ldr	r3, [pc, #276]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8007128:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800712c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8007130:	b2db      	uxtb	r3, r3
 8007132:	3301      	adds	r3, #1
 8007134:	fb02 f303 	mul.w	r3, r2, r3
 8007138:	4a40      	ldr	r2, [pc, #256]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 800713a:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 800713e:	f3c2 1281 	ubfx	r2, r2, #6, #2
 8007142:	b2d2      	uxtb	r2, r2
 8007144:	4611      	mov	r1, r2
 8007146:	4a3e      	ldr	r2, [pc, #248]	@ (8007240 <SFDP_BuildGenericDriver+0x31c>)
 8007148:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800714c:	fb03 f202 	mul.w	r2, r3, r2
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  Object->sfpd_private.DriverInfo.EraseChipTiming   = JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_count + 1u)* chip_erase_unit[JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_units];
 8007156:	4b39      	ldr	r3, [pc, #228]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8007158:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800715c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007160:	b2db      	uxtb	r3, r3
 8007162:	461a      	mov	r2, r3
 8007164:	4b35      	ldr	r3, [pc, #212]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8007166:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800716a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800716e:	b2db      	uxtb	r3, r3
 8007170:	3301      	adds	r3, #1
 8007172:	fb02 f303 	mul.w	r3, r2, r3
 8007176:	4a31      	ldr	r2, [pc, #196]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8007178:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 800717c:	f3c2 1241 	ubfx	r2, r2, #5, #2
 8007180:	b2d2      	uxtb	r2, r2
 8007182:	4611      	mov	r1, r2
 8007184:	4a2f      	ldr	r2, [pc, #188]	@ (8007244 <SFDP_BuildGenericDriver+0x320>)
 8007186:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800718a:	fb03 f202 	mul.w	r2, r3, r2
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
   *   WIP/WEL : write in progress/ write enable management
   * ------------------------------------------------------
   */
  /* This bit definition is maintained for legacy compatibility only. New system implementations
  should refer to 6.4.19 for a full definition of volatile and non-volatile behavior. */
  Object->sfpd_private.DriverInfo.ReadWELCommand = 0x05;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2205      	movs	r2, #5
 8007198:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
  Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x05;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2205      	movs	r2, #5
 80071a0:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  if (JEDEC_Basic.Params.Param_DWORD.D1.WriteEnableInstructionVolatileRegister == 0u)
 80071a4:	4b25      	ldr	r3, [pc, #148]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 80071a6:	791b      	ldrb	r3, [r3, #4]
 80071a8:	f003 0310 	and.w	r3, r3, #16
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d104      	bne.n	80071bc <SFDP_BuildGenericDriver+0x298>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x50U;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2250      	movs	r2, #80	@ 0x50
 80071b6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80071ba:	e003      	b.n	80071c4 <SFDP_BuildGenericDriver+0x2a0>
  }
  else
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06U;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2206      	movs	r2, #6
 80071c0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
  /* Volatile or Non-Volatile Register and Write Enable Instruction for Status Register 1
  The instruction 01h is typically used to write status register 1 which contains Block Protection (BP) and other bits. Status register 1 is written by the first data byte following the instruction 01h. The protection bits must be written to zero to enable writes/erases to the device.
  This field describes how to modify the writable bits in status register 1 in either a volatile or non-volatile manner. Bits 1:0 in status register 1 are de-facto standard write enable and busy status and are excluded from the definitions below.
  */
  /* xxx_xxx1b: Non-Volatile Status Register 1, powers-up to last written value, use instruction 06h to enable write */
  if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x1u) != 0u)
 80071c4:	4b1d      	ldr	r3, [pc, #116]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 80071c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071ca:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d004      	beq.n	80071e2 <SFDP_BuildGenericDriver+0x2be>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2206      	movs	r2, #6
 80071dc:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80071e0:	e046      	b.n	8007270 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_xx1xb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 06h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x02u) != 0u)
 80071e2:	4b16      	ldr	r3, [pc, #88]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 80071e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071e8:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d004      	beq.n	8007200 <SFDP_BuildGenericDriver+0x2dc>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2206      	movs	r2, #6
 80071fa:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80071fe:	e037      	b.n	8007270 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_x1xxb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 50h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x04u) != 0u)
 8007200:	4b0e      	ldr	r3, [pc, #56]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8007202:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007206:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800720a:	b2db      	uxtb	r3, r3
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d004      	beq.n	800721e <SFDP_BuildGenericDriver+0x2fa>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x50;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2250      	movs	r2, #80	@ 0x50
 8007218:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800721c:	e028      	b.n	8007270 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_1xxxb: Non-Volatile/Volatile status register 1 powers-up to last written value in the non-volatile status register,
  use instruction 06h to enable write to non-volatile status register. Volatile status register may be activated after
  power-up to override the non-volatile status register, use instruction 50h to enable write and activate the volatile
  status register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x08u) != 0u)
 800721e:	4b07      	ldr	r3, [pc, #28]	@ (800723c <SFDP_BuildGenericDriver+0x318>)
 8007220:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007224:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8007228:	b2db      	uxtb	r3, r3
 800722a:	f003 0308 	and.w	r3, r3, #8
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00a      	beq.n	8007248 <SFDP_BuildGenericDriver+0x324>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2206      	movs	r2, #6
 8007236:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800723a:	e019      	b.n	8007270 <SFDP_BuildGenericDriver+0x34c>
 800723c:	240001b0 	.word	0x240001b0
 8007240:	080085d8 	.word	0x080085d8
 8007244:	080085e0 	.word	0x080085e0
  }
  /* xx1_xxxxb: Status Register 1 contains a mix of volatile and non-volatile bits. The 06h instruction is used to
  enable writing of the register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x10u) != 0u)
 8007248:	4b66      	ldr	r3, [pc, #408]	@ (80073e4 <SFDP_BuildGenericDriver+0x4c0>)
 800724a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800724e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8007252:	b2db      	uxtb	r3, r3
 8007254:	f003 0310 	and.w	r3, r3, #16
 8007258:	2b00      	cmp	r3, #0
 800725a:	d004      	beq.n	8007266 <SFDP_BuildGenericDriver+0x342>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2206      	movs	r2, #6
 8007260:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8007264:	e004      	b.n	8007270 <SFDP_BuildGenericDriver+0x34c>
  1xx_xxxxb: Reserved
  NOTE If the status register is read-only then this field will contain all zeros in bits 4:0.
  */
  else
  {
    retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D16;
 8007266:	230a      	movs	r3, #10
 8007268:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 800726c:	f000 bc04 	b.w	8007a78 <SFDP_BuildGenericDriver+0xb54>
  }

  if(0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007276:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800727a:	2b00      	cmp	r3, #0
 800727c:	d078      	beq.n	8007370 <SFDP_BuildGenericDriver+0x44c>
  {
    /* WIP */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitAvailable)
 800727e:	4b5a      	ldr	r3, [pc, #360]	@ (80073e8 <SFDP_BuildGenericDriver+0x4c4>)
 8007280:	7cdb      	ldrb	r3, [r3, #19]
 8007282:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d034      	beq.n	80072f6 <SFDP_BuildGenericDriver+0x3d2>
    {
      Object->sfpd_private.DriverInfo.ReadWIPCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.CommandReadAccess;
 800728c:	4b56      	ldr	r3, [pc, #344]	@ (80073e8 <SFDP_BuildGenericDriver+0x4c4>)
 800728e:	7c5a      	ldrb	r2, [r3, #17]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
      Object->sfpd_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
 8007296:	4b54      	ldr	r3, [pc, #336]	@ (80073e8 <SFDP_BuildGenericDriver+0x4c4>)
 8007298:	7cdb      	ldrb	r3, [r3, #19]
 800729a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	461a      	mov	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
      Object->sfpd_private.DriverInfo.WIPBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.WIPpolarity;
 80072a8:	4b4f      	ldr	r3, [pc, #316]	@ (80073e8 <SFDP_BuildGenericDriver+0x4c4>)
 80072aa:	7cdb      	ldrb	r3, [r3, #19]
 80072ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	461a      	mov	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
      Object->sfpd_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
 80072ba:	4b4b      	ldr	r3, [pc, #300]	@ (80073e8 <SFDP_BuildGenericDriver+0x4c4>)
 80072bc:	7cdb      	ldrb	r3, [r3, #19]
 80072be:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	461a      	mov	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
      
      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
 80072cc:	4b46      	ldr	r3, [pc, #280]	@ (80073e8 <SFDP_BuildGenericDriver+0x4c4>)
 80072ce:	7cdb      	ldrb	r3, [r3, #19]
 80072d0:	f003 0310 	and.w	r3, r3, #16
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d009      	beq.n	80072ee <SFDP_BuildGenericDriver+0x3ca>
      {
        /* Address management */
        Object->sfpd_private.DriverInfo.WIPAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.LocalAddressForWIP;
 80072da:	4b43      	ldr	r3, [pc, #268]	@ (80073e8 <SFDP_BuildGenericDriver+0x4c4>)
 80072dc:	7cdb      	ldrb	r3, [r3, #19]
 80072de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	461a      	mov	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
 80072ec:	e003      	b.n	80072f6 <SFDP_BuildGenericDriver+0x3d2>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfpd_private.DriverInfo.WIPAddress = EXTMEM_ADDRESS_NONE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	22ff      	movs	r2, #255	@ 0xff
 80072f2:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
      }
    }

    /* WEL */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D6.WELBitAvailable)
 80072f6:	4b3c      	ldr	r3, [pc, #240]	@ (80073e8 <SFDP_BuildGenericDriver+0x4c4>)
 80072f8:	7ddb      	ldrb	r3, [r3, #23]
 80072fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d073      	beq.n	80073ec <SFDP_BuildGenericDriver+0x4c8>
    {
      Object->sfpd_private.DriverInfo.ReadWELCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.CommandReadAccess;
 8007304:	4b38      	ldr	r3, [pc, #224]	@ (80073e8 <SFDP_BuildGenericDriver+0x4c4>)
 8007306:	7d5a      	ldrb	r2, [r3, #21]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
      Object->sfpd_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
 800730e:	4b36      	ldr	r3, [pc, #216]	@ (80073e8 <SFDP_BuildGenericDriver+0x4c4>)
 8007310:	7ddb      	ldrb	r3, [r3, #23]
 8007312:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007316:	b2db      	uxtb	r3, r3
 8007318:	461a      	mov	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfpd_private.DriverInfo.WELBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELpolarity;
 8007320:	4b31      	ldr	r3, [pc, #196]	@ (80073e8 <SFDP_BuildGenericDriver+0x4c4>)
 8007322:	7ddb      	ldrb	r3, [r3, #23]
 8007324:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007328:	b2db      	uxtb	r3, r3
 800732a:	461a      	mov	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
      Object->sfpd_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
 8007332:	4b2d      	ldr	r3, [pc, #180]	@ (80073e8 <SFDP_BuildGenericDriver+0x4c4>)
 8007334:	7ddb      	ldrb	r3, [r3, #23]
 8007336:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800733a:	b2db      	uxtb	r3, r3
 800733c:	461a      	mov	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72

      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
 8007344:	4b28      	ldr	r3, [pc, #160]	@ (80073e8 <SFDP_BuildGenericDriver+0x4c4>)
 8007346:	7cdb      	ldrb	r3, [r3, #19]
 8007348:	f003 0310 	and.w	r3, r3, #16
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d009      	beq.n	8007366 <SFDP_BuildGenericDriver+0x442>
      {
        /* Address management */
        Object->sfpd_private.DriverInfo.WELAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELLocalAddress;
 8007352:	4b25      	ldr	r3, [pc, #148]	@ (80073e8 <SFDP_BuildGenericDriver+0x4c4>)
 8007354:	7ddb      	ldrb	r3, [r3, #23]
 8007356:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800735a:	b2db      	uxtb	r3, r3
 800735c:	461a      	mov	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8007364:	e042      	b.n	80073ec <SFDP_BuildGenericDriver+0x4c8>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfpd_private.DriverInfo.WELAddress = EXTMEM_ADDRESS_NONE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	22ff      	movs	r2, #255	@ 0xff
 800736a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 800736e:	e03d      	b.n	80073ec <SFDP_BuildGenericDriver+0x4c8>
      }
    }
  }
  else
  {
      Object->sfpd_private.DriverInfo.WELPosition     = 1;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfpd_private.DriverInfo.WELBusyPolarity = 0;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73

      /*
       *   WIP : Status register read management
       *         Basic D14 Status register Polling device Busy
       */
      if(0x01u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x01u))
 8007380:	4b18      	ldr	r3, [pc, #96]	@ (80073e4 <SFDP_BuildGenericDriver+0x4c0>)
 8007382:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007386:	f3c3 0385 	ubfx	r3, r3, #2, #6
 800738a:	b2db      	uxtb	r3, r3
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00c      	beq.n	80073ae <SFDP_BuildGenericDriver+0x48a>
      {
        /* xx_xxx1b: Use of legacy polling is supported by reading the Status Register with 05h instruction
        and checking WIP bit[0] (0=ready; 1=busy). */
        Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x05;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2205      	movs	r2, #5
 8007398:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfpd_private.DriverInfo.WIPPosition = 0u;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfpd_private.DriverInfo.WIPBusyPolarity = 0u;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
 80073ac:	e01e      	b.n	80073ec <SFDP_BuildGenericDriver+0x4c8>
      } else if (0x02u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x02u))
 80073ae:	4b0d      	ldr	r3, [pc, #52]	@ (80073e4 <SFDP_BuildGenericDriver+0x4c0>)
 80073b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80073b4:	f3c3 0385 	ubfx	r3, r3, #2, #6
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00c      	beq.n	80073dc <SFDP_BuildGenericDriver+0x4b8>
      {
        /* xx_xx1xb: Bit 7 of the Flag Status Register may be polled any time a Program, Erase, Suspend/Resume
        command is issued, or after a Reset command while the device is busy. The read instruction is 70h.
        Flag Status Register bit definitions: bit[7]: Program or erase controller status (0=busy; 1=ready)*/
        Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x70;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2270      	movs	r2, #112	@ 0x70
 80073c6:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfpd_private.DriverInfo.WIPPosition = 7u;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2207      	movs	r2, #7
 80073ce:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfpd_private.DriverInfo.WIPBusyPolarity = 0u;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
 80073da:	e007      	b.n	80073ec <SFDP_BuildGenericDriver+0x4c8>
      } else
      {
          retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D14;
 80073dc:	2309      	movs	r3, #9
 80073de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 80073e2:	e349      	b.n	8007a78 <SFDP_BuildGenericDriver+0xb54>
 80073e4:	240001b0 	.word	0x240001b0
 80073e8:	24000230 	.word	0x24000230
      }
  }

  /* Set default value for instruction */
  Object->sfpd_private.DriverInfo.ReadInstruction     = 0x03U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2203      	movs	r2, #3
 80073f0:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76

  /* ---------------------------------------------------
   *  command based on SFPD_PARAMID_BASIC_SPIPROTOCOL
   * ---------------------------------------------------
   */
  if (Object->sfpd_private.Sfdp_table_mask == (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL) 
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073fa:	2b08      	cmp	r3, #8
 80073fc:	f040 80a9 	bne.w	8007552 <SFDP_BuildGenericDriver+0x62e>
  {
    dummyCycles = 0;
 8007400:	2300      	movs	r3, #0
 8007402:	617b      	str	r3, [r7, #20]
    Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

    if (Object->sfpd_private.Config > EXTMEM_LINK_CONFIG_1LINE)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007412:	2b00      	cmp	r3, #0
 8007414:	d04c      	beq.n	80074b0 <SFDP_BuildGenericDriver+0x58c>
    {
      /* control if read 1s1s2s is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction != 0u)
 8007416:	4bb4      	ldr	r3, [pc, #720]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 8007418:	7c5b      	ldrb	r3, [r3, #17]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d015      	beq.n	800744a <SFDP_BuildGenericDriver+0x526>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_ModeClock;
 800741e:	4bb2      	ldr	r3, [pc, #712]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 8007420:	7c1b      	ldrb	r3, [r3, #16]
 8007422:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007426:	b2db      	uxtb	r3, r3
 8007428:	461a      	mov	r2, r3
 800742a:	4baf      	ldr	r3, [pc, #700]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 800742c:	7c1b      	ldrb	r3, [r3, #16]
 800742e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8007432:	b2db      	uxtb	r3, r3
 8007434:	4413      	add	r3, r2
 8007436:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction;
 8007438:	4bab      	ldr	r3, [pc, #684]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 800743a:	7c5a      	ldrb	r2, [r3, #17]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S2S;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* control if read 1S2S2S is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction != 0u)
 800744a:	4ba7      	ldr	r3, [pc, #668]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 800744c:	7cdb      	ldrb	r3, [r3, #19]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d015      	beq.n	800747e <SFDP_BuildGenericDriver+0x55a>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_ModeClock;
 8007452:	4ba5      	ldr	r3, [pc, #660]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 8007454:	7c9b      	ldrb	r3, [r3, #18]
 8007456:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800745a:	b2db      	uxtb	r3, r3
 800745c:	461a      	mov	r2, r3
 800745e:	4ba2      	ldr	r3, [pc, #648]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 8007460:	7c9b      	ldrb	r3, [r3, #18]
 8007462:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8007466:	b2db      	uxtb	r3, r3
 8007468:	4413      	add	r3, r2
 800746a:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction;
 800746c:	4b9e      	ldr	r3, [pc, #632]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 800746e:	7cda      	ldrb	r2, [r3, #19]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S2S2S;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2202      	movs	r2, #2
 800747a:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* The memory work only in 2S2S2S */
      if (JEDEC_Basic.Params.Param_DWORD.D5._2S2S2S_FastReadSupport != 0u)
 800747e:	4b9a      	ldr	r3, [pc, #616]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 8007480:	7d1b      	ldrb	r3, [r3, #20]
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	d011      	beq.n	80074b0 <SFDP_BuildGenericDriver+0x58c>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_ModeClock;
 800748c:	4b96      	ldr	r3, [pc, #600]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 800748e:	7e9b      	ldrb	r3, [r3, #26]
 8007490:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007494:	b2db      	uxtb	r3, r3
 8007496:	461a      	mov	r2, r3
 8007498:	4b93      	ldr	r3, [pc, #588]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 800749a:	7e9b      	ldrb	r3, [r3, #26]
 800749c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	4413      	add	r3, r2
 80074a4:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_FastReadInstruction;
 80074a6:	4b90      	ldr	r3, [pc, #576]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 80074a8:	7eda      	ldrb	r2, [r3, #27]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      }
    }

    /* the command set is only based on this table */
    /* determine the best line configuration */
    if (Object->sfpd_private.Config > EXTMEM_LINK_CONFIG_2LINES)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d92c      	bls.n	8007514 <SFDP_BuildGenericDriver+0x5f0>
    {
      if (JEDEC_Basic.Params.Param_DWORD.D5._4S4S4S_FastReadSupport != 0u)
 80074ba:	4b8b      	ldr	r3, [pc, #556]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 80074bc:	7d1b      	ldrb	r3, [r3, #20]
 80074be:	f003 0310 	and.w	r3, r3, #16
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d020      	beq.n	800750a <SFDP_BuildGenericDriver+0x5e6>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_ModeClock;
 80074c8:	4b87      	ldr	r3, [pc, #540]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 80074ca:	7f9b      	ldrb	r3, [r3, #30]
 80074cc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	461a      	mov	r2, r3
 80074d4:	4b84      	ldr	r3, [pc, #528]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 80074d6:	7f9b      	ldrb	r3, [r3, #30]
 80074d8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	4413      	add	r3, r2
 80074e0:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_FastReadInstruction;
 80074e2:	4b81      	ldr	r3, [pc, #516]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 80074e4:	7fda      	ldrb	r2, [r3, #31]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_4S4S4S;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2204      	movs	r2, #4
 80074f0:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        
        retr = JEDEC_Basic_Manage4S4S4SEnableSequence(Object);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fea7 	bl	8008248 <JEDEC_Basic_Manage4S4S4SEnableSequence>
 80074fa:	4603      	mov	r3, r0
 80074fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ( retr != EXTMEM_SFDP_OK)
 8007500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007504:	2b00      	cmp	r3, #0
 8007506:	f040 82b4 	bne.w	8007a72 <SFDP_BuildGenericDriver+0xb4e>
      }
      else /* other configuration with more 4 lines */
      {
        /* not yet handled */
      }
      SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfpd_private.SALObject, (uint8_t)dummyCycles);
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	b2da      	uxtb	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    }

    /* Configure the link */
    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f103 0008 	add.w	r0, r3, #8
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	3364      	adds	r3, #100	@ 0x64
 800751e:	461a      	mov	r2, r3
 8007520:	2100      	movs	r1, #0
 8007522:	f7fe fd89 	bl	8006038 <SAL_XSPI_MemoryConfig>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <SFDP_BuildGenericDriver+0x610>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 800752c:	230c      	movs	r3, #12
 800752e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8007532:	e2a1      	b.n	8007a78 <SFDP_BuildGenericDriver+0xb54>
    }

    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, &dummyCycles))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3308      	adds	r3, #8
 8007538:	f107 0214 	add.w	r2, r7, #20
 800753c:	2101      	movs	r1, #1
 800753e:	4618      	mov	r0, r3
 8007540:	f7fe fd7a 	bl	8006038 <SAL_XSPI_MemoryConfig>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <SFDP_BuildGenericDriver+0x62e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 800754a:	230c      	movs	r3, #12
 800754c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8007550:	e292      	b.n	8007a78 <SFDP_BuildGenericDriver+0xb54>

     If an octal DDR table is present and the target is 8D8D8D,
     when switch in octal DDR mode
     -------------------------------------------------------------------------------------------------------------------
  */
  if (((uint32_t)SFPD_PARAMID_OCTAL_DDR == (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_OCTAL_DDR)) 
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007558:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d069      	beq.n	8007634 <SFDP_BuildGenericDriver+0x710>
      && (EXTMEM_LINK_CONFIG_8LINES == Object->sfpd_private.Config))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007566:	2b03      	cmp	r3, #3
 8007568:	d164      	bne.n	8007634 <SFDP_BuildGenericDriver+0x710>
  {
    /* check if we are not already in octal mode */
    if (PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8007570:	2b09      	cmp	r3, #9
 8007572:	d103      	bne.n	800757c <SFDP_BuildGenericDriver+0x658>
    {
      flag4bitAddress = 1u;
 8007574:	2301      	movs	r3, #1
 8007576:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800757a:	e03a      	b.n	80075f2 <SFDP_BuildGenericDriver+0x6ce>
    }
    else
    {
      /* Execute the flash command sequence to switch in octal DDR */
      if (EXTMEM_SFDP_OK == sfpd_enter_octal_mode(Object))
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fbdb 	bl	8007d38 <sfpd_enter_octal_mode>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d134      	bne.n	80075f2 <SFDP_BuildGenericDriver+0x6ce>
      {
        /* switch the memory interface configuration according the Access protocol field */
        flag4bitAddress = 1u;
 8007588:	2301      	movs	r3, #1
 800758a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_8D8D8D;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2209      	movs	r2, #9
 8007592:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        
        /* update the physical link */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f103 0008 	add.w	r0, r3, #8
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	3364      	adds	r3, #100	@ 0x64
 80075a0:	461a      	mov	r2, r3
 80075a2:	2100      	movs	r1, #0
 80075a4:	f7fe fd48 	bl	8006038 <SAL_XSPI_MemoryConfig>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <SFDP_BuildGenericDriver+0x692>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 80075ae:	230c      	movs	r3, #12
 80075b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 80075b4:	e260      	b.n	8007a78 <SFDP_BuildGenericDriver+0xb54>
        }
        
        if (Object->sfpd_private.Sfdp_AccessProtocol == 0xFDu)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80075bc:	2bfd      	cmp	r3, #253	@ 0xfd
 80075be:	d109      	bne.n	80075d4 <SFDP_BuildGenericDriver+0x6b0>
        {
          /* set 20 wait state */
          dummyCycles = 20;
 80075c0:	2314      	movs	r3, #20
 80075c2:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3308      	adds	r3, #8
 80075c8:	f107 0214 	add.w	r2, r7, #20
 80075cc:	2101      	movs	r1, #1
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fe fd32 	bl	8006038 <SAL_XSPI_MemoryConfig>
        }
        if (Object->sfpd_private.Sfdp_AccessProtocol == 0xFEu)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80075da:	2bfe      	cmp	r3, #254	@ 0xfe
 80075dc:	d109      	bne.n	80075f2 <SFDP_BuildGenericDriver+0x6ce>
        {
          /* set 8 wait state */
          dummyCycles = 8;
 80075de:	2308      	movs	r3, #8
 80075e0:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3308      	adds	r3, #8
 80075e6:	f107 0214 	add.w	r2, r7, #20
 80075ea:	2101      	movs	r1, #1
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fe fd23 	bl	8006038 <SAL_XSPI_MemoryConfig>
        /* an error occurs when trying to switch the mode                        */
        /* when continue the process and check if another mode could be targeted */
      }
    }

    if ((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)) &&
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075f8:	f003 0308 	and.w	r3, r3, #8
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d019      	beq.n	8007634 <SFDP_BuildGenericDriver+0x710>
        (JEDEC_Basic.size > 16u))
 8007600:	4b39      	ldr	r3, [pc, #228]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 8007602:	681b      	ldr	r3, [r3, #0]
    if ((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)) &&
 8007604:	2b10      	cmp	r3, #16
 8007606:	d915      	bls.n	8007634 <SFDP_BuildGenericDriver+0x710>
    {
      /* check octal information to determine */
      /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
      /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
      /* 0b11 Command and Command Extension forms a 16 bit command word */
      if (JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension > 1u)
 8007608:	4b37      	ldr	r3, [pc, #220]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 800760a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800760e:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b01      	cmp	r3, #1
 8007616:	d903      	bls.n	8007620 <SFDP_BuildGenericDriver+0x6fc>
      {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 8007618:	230f      	movs	r3, #15
 800761a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 800761e:	e22b      	b.n	8007a78 <SFDP_BuildGenericDriver+0xb54>
      }
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfpd_private.SALObject, (uint8_t)JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension);
 8007620:	4b31      	ldr	r3, [pc, #196]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 8007622:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8007626:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800762a:	b2db      	uxtb	r3, r3
 800762c:	461a      	mov	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }
  }

  if ((Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION) == (uint32_t)SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800763a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 813c 	beq.w	80078bc <SFDP_BuildGenericDriver+0x998>
  {
    if (0u == flag4bitAddress)
 8007644:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007648:	2b00      	cmp	r3, #0
 800764a:	f040 809e 	bne.w	800778a <SFDP_BuildGenericDriver+0x866>
    {
      /* xxxx_xxx1b: issue instruction B7h (preceding write enable not required) */
      if (0x01u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x01u))
 800764e:	4b26      	ldr	r3, [pc, #152]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 8007650:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b00      	cmp	r3, #0
 800765a:	d01c      	beq.n	8007696 <SFDP_BuildGenericDriver+0x772>
      {
        /* send command to enter 4bit@ mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,0xB7, NULL, 0))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f103 0008 	add.w	r0, r3, #8
 8007662:	2300      	movs	r3, #0
 8007664:	2200      	movs	r2, #0
 8007666:	21b7      	movs	r1, #183	@ 0xb7
 8007668:	f7fe ff98 	bl	800659c <SAL_XSPI_CommandSendData>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <SFDP_BuildGenericDriver+0x756>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007672:	230c      	movs	r3, #12
 8007674:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 8007678:	e1fe      	b.n	8007a78 <SFDP_BuildGenericDriver+0xb54>
        }

        /* Set 4Bit addressing on PHY side */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_ADDRESS_4BITS, NULL))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	3308      	adds	r3, #8
 800767e:	2200      	movs	r2, #0
 8007680:	2102      	movs	r1, #2
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe fcd8 	bl	8006038 <SAL_XSPI_MemoryConfig>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d06b      	beq.n	8007766 <SFDP_BuildGenericDriver+0x842>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 800768e:	230c      	movs	r3, #12
 8007690:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 8007694:	e1f0      	b.n	8007a78 <SFDP_BuildGenericDriver+0xb54>
        }

        /* flag4bitAddress = 1u; this settings is not needed because variable is no more used */
      }
      /* xxxx_xx1xb: issue write enable instruction 06h, then issue instruction B7h */
      else if (0x2u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x2u))
 8007696:	4b14      	ldr	r3, [pc, #80]	@ (80076e8 <SFDP_BuildGenericDriver+0x7c4>)
 8007698:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d04e      	beq.n	8007742 <SFDP_BuildGenericDriver+0x81e>
      {
        /* send command to write enable */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f103 0008 	add.w	r0, r3, #8
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 80076b0:	2300      	movs	r3, #0
 80076b2:	2200      	movs	r2, #0
 80076b4:	f7fe ff72 	bl	800659c <SAL_XSPI_CommandSendData>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <SFDP_BuildGenericDriver+0x7a2>
                                           Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 80076be:	230c      	movs	r3, #12
 80076c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 80076c4:	e1d8      	b.n	8007a78 <SFDP_BuildGenericDriver+0xb54>
        }

        /* control the write enable */
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f103 0008 	add.w	r0, r3, #8
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                            Object->sfpd_private.DriverInfo.ReadWELCommand,
                                            Object->sfpd_private.DriverInfo.WELAddress,
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 80076d8:	461d      	mov	r5, r3
                                            ((Object->sfpd_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfpd_private.DriverInfo.WELPosition,
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d103      	bne.n	80076ec <SFDP_BuildGenericDriver+0x7c8>
 80076e4:	2301      	movs	r3, #1
 80076e6:	e002      	b.n	80076ee <SFDP_BuildGenericDriver+0x7ca>
 80076e8:	240001b0 	.word	0x240001b0
 80076ec:	2300      	movs	r3, #0
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
 80076f4:	4093      	lsls	r3, r2
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 80076f6:	b2da      	uxtb	r2, r3
                                            1u << Object->sfpd_private.DriverInfo.WELPosition,
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80076fe:	461c      	mov	r4, r3
 8007700:	2301      	movs	r3, #1
 8007702:	40a3      	lsls	r3, r4
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8007704:	b2db      	uxtb	r3, r3
 8007706:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800770a:	9401      	str	r4, [sp, #4]
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	4613      	mov	r3, r2
 8007710:	462a      	mov	r2, r5
 8007712:	f7ff f838 	bl	8006786 <SAL_XSPI_CheckStatusRegister>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <SFDP_BuildGenericDriver+0x800>
                                            1000))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 800771c:	230c      	movs	r3, #12
 800771e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 8007722:	e1a9      	b.n	8007a78 <SFDP_BuildGenericDriver+0xb54>
        }

        /* send command to enter 4bit@ mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0xB7, NULL, 0u))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f103 0008 	add.w	r0, r3, #8
 800772a:	2300      	movs	r3, #0
 800772c:	2200      	movs	r2, #0
 800772e:	21b7      	movs	r1, #183	@ 0xb7
 8007730:	f7fe ff34 	bl	800659c <SAL_XSPI_CommandSendData>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d015      	beq.n	8007766 <SFDP_BuildGenericDriver+0x842>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 800773a:	230c      	movs	r3, #12
 800773c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8007740:	e19a      	b.n	8007a78 <SFDP_BuildGenericDriver+0xb54>
        }
      }
      /* x1xx_xxxxb: Always operates in 4-Byte address mode */
      else if (0x40u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x40u))
 8007742:	4ba3      	ldr	r3, [pc, #652]	@ (80079d0 <SFDP_BuildGenericDriver+0xaac>)
 8007744:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10a      	bne.n	8007766 <SFDP_BuildGenericDriver+0x842>
      {
        /* nothing to do */
        /* flag4bitAddress = 1u; this settings is not needed because variable is no more used */
      }
      /* xx1x_xxxxb: Supports dedicated 4-Byte address instruction set. Consult vendor data sheet for the instruction set definition.*/
      else if (0x20u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x20u))
 8007750:	4b9f      	ldr	r3, [pc, #636]	@ (80079d0 <SFDP_BuildGenericDriver+0xaac>)
 8007752:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007756:	f003 0320 	and.w	r3, r3, #32
 800775a:	2b00      	cmp	r3, #0
 800775c:	d103      	bne.n	8007766 <SFDP_BuildGenericDriver+0x842>
        /* xxxx_x1xxb: 8-bit volatile extended address register used to define A[31:24] bits. Read with instruction C8h. Write instruction is C5h with 1 byte of data. Select the active 128 Mbit memory segment by setting the appropriate A[31:24] bits and use 3-Byte addressing.
           xxxx_1xxxb: 8-bit volatile bank register used to define A[30:A24] bits. MSB (bit[7]) is used to enable/disable 4-byte address mode. When MSB is set to 1, 4-byte address mode is active and A[30:24] bits are don not care. Read with instruction 16h. Write instruction is 17h with 1 byte of data. When MSB is cleared to 0, select the active 128 Mbit segment by setting the appropriate A[30:24] bits and use 3-Byte addressing.
           xxx1_xxxxb: A 16-bit nonvolatile configuration register controls 3-Byte/4-Byte address mode. Read instruction is B5h. Bit[0] controls address mode [0=3-Byte;1=4-Byte]. Write configuration register instruction is B1h, data length is 2 bytes.
        */
      else {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 800775e:	230f      	movs	r3, #15
 8007760:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8007764:	e188      	b.n	8007a78 <SFDP_BuildGenericDriver+0xb54>

      }

      /* Set 4Bit addressing on PHY side */
      if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_ADDRESS_4BITS, NULL))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	3308      	adds	r3, #8
 800776a:	2200      	movs	r2, #0
 800776c:	2102      	movs	r1, #2
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe fc62 	bl	8006038 <SAL_XSPI_MemoryConfig>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <SFDP_BuildGenericDriver+0x85e>
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
 800777a:	230c      	movs	r3, #12
 800777c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8007780:	e17a      	b.n	8007a78 <SFDP_BuildGenericDriver+0xb54>
      }
      
      /* Set the read function for 4Bit Address */
      Object->sfpd_private.DriverInfo.ReadInstruction = 0x13U;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2213      	movs	r2, #19
 8007786:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if ((EXTMEM_LINK_CONFIG_8LINES == Object->sfpd_private.Config) && (PHY_LINK_1S1S1S == Object->sfpd_private.DriverInfo.SpiPhyLink))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007790:	2b03      	cmp	r3, #3
 8007792:	d12e      	bne.n	80077f2 <SFDP_BuildGenericDriver+0x8ce>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800779a:	2b00      	cmp	r3, #0
 800779c:	d129      	bne.n	80077f2 <SFDP_BuildGenericDriver+0x8ce>
    {
      /* check if we can switch to if the config is still 1S8S8S */
      if ((0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)  && (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand))
 800779e:	4b8d      	ldr	r3, [pc, #564]	@ (80079d4 <SFDP_BuildGenericDriver+0xab0>)
 80077a0:	789b      	ldrb	r3, [r3, #2]
 80077a2:	f003 0320 	and.w	r3, r3, #32
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d022      	beq.n	80077f2 <SFDP_BuildGenericDriver+0x8ce>
 80077ac:	4b89      	ldr	r3, [pc, #548]	@ (80079d4 <SFDP_BuildGenericDriver+0xab0>)
 80077ae:	78db      	ldrb	r3, [r3, #3]
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d01b      	beq.n	80077f2 <SFDP_BuildGenericDriver+0x8ce>
      {
        /* Patch micron write command 0x81 @0x0 0xE7 */
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S8S8S;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2207      	movs	r2, #7
 80077be:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f103 0008 	add.w	r0, r3, #8
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	3364      	adds	r3, #100	@ 0x64
 80077cc:	461a      	mov	r2, r3
 80077ce:	2100      	movs	r1, #0
 80077d0:	f7fe fc32 	bl	8006038 <SAL_XSPI_MemoryConfig>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <SFDP_BuildGenericDriver+0x8be>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 80077da:	230c      	movs	r3, #12
 80077dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 80077e0:	e14a      	b.n	8007a78 <SFDP_BuildGenericDriver+0xb54>
        }
        Object->sfpd_private.DriverInfo.ReadInstruction = 0xCC;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	22cc      	movs	r2, #204	@ 0xcc
 80077e6:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x8E;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	228e      	movs	r2, #142	@ 0x8e
 80077ee:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75

    /*
      need to be study more; it seems that macromix used it to define the command maybe because only one mode is
      supported in their case
    */
    if ((Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) || 
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80077f8:	2b09      	cmp	r3, #9
 80077fa:	d004      	beq.n	8007806 <SFDP_BuildGenericDriver+0x8e2>
        (Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_1S1S1S))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
    if ((Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) || 
 8007802:	2b00      	cmp	r3, #0
 8007804:	d120      	bne.n	8007848 <SFDP_BuildGenericDriver+0x924>
    {
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_PageProgramCommand) {Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x12u;}
 8007806:	4b73      	ldr	r3, [pc, #460]	@ (80079d4 <SFDP_BuildGenericDriver+0xab0>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b00      	cmp	r3, #0
 8007812:	d003      	beq.n	800781c <SFDP_BuildGenericDriver+0x8f8>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2212      	movs	r2, #18
 8007818:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_ReadCommand)        {Object->sfpd_private.DriverInfo.ReadInstruction        = 0x13u;}
 800781c:	4b6d      	ldr	r3, [pc, #436]	@ (80079d4 <SFDP_BuildGenericDriver+0xab0>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <SFDP_BuildGenericDriver+0x90e>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2213      	movs	r2, #19
 800782e:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_FastReadCommand)    {Object->sfpd_private.DriverInfo.ReadInstruction        = 0x0Cu;}
 8007832:	4b68      	ldr	r3, [pc, #416]	@ (80079d4 <SFDP_BuildGenericDriver+0xab0>)
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <SFDP_BuildGenericDriver+0x924>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	220c      	movs	r2, #12
 8007844:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }
    
    if (Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8S8D8D) 
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800784e:	2b08      	cmp	r3, #8
 8007850:	d120      	bne.n	8007894 <SFDP_BuildGenericDriver+0x970>
    {
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand) {Object->sfpd_private.DriverInfo.PageProgramInstruction  = 0x02u;}
 8007852:	4b60      	ldr	r3, [pc, #384]	@ (80079d4 <SFDP_BuildGenericDriver+0xab0>)
 8007854:	78db      	ldrb	r3, [r3, #3]
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d003      	beq.n	8007868 <SFDP_BuildGenericDriver+0x944>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)    {Object->sfpd_private.DriverInfo.ReadInstruction         = 0xCCu;}
 8007868:	4b5a      	ldr	r3, [pc, #360]	@ (80079d4 <SFDP_BuildGenericDriver+0xab0>)
 800786a:	789b      	ldrb	r3, [r3, #2]
 800786c:	f003 0320 	and.w	r3, r3, #32
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <SFDP_BuildGenericDriver+0x95a>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	22cc      	movs	r2, #204	@ 0xcc
 800787a:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8D8D_DTRReadCommand)     {Object->sfpd_private.DriverInfo.ReadInstruction         = 0xFDu;}
 800787e:	4b55      	ldr	r3, [pc, #340]	@ (80079d4 <SFDP_BuildGenericDriver+0xab0>)
 8007880:	789b      	ldrb	r3, [r3, #2]
 8007882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007886:	b2db      	uxtb	r3, r3
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <SFDP_BuildGenericDriver+0x970>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	22fd      	movs	r2, #253	@ 0xfd
 8007890:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    Object->sfpd_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType1;
 8007894:	4b4f      	ldr	r3, [pc, #316]	@ (80079d4 <SFDP_BuildGenericDriver+0xab0>)
 8007896:	791a      	ldrb	r2, [r3, #4]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    Object->sfpd_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType2;
 800789e:	4b4d      	ldr	r3, [pc, #308]	@ (80079d4 <SFDP_BuildGenericDriver+0xab0>)
 80078a0:	795a      	ldrb	r2, [r3, #5]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
    Object->sfpd_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType3;
 80078a8:	4b4a      	ldr	r3, [pc, #296]	@ (80079d4 <SFDP_BuildGenericDriver+0xab0>)
 80078aa:	799a      	ldrb	r2, [r3, #6]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Object->sfpd_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType4;
 80078b2:	4b48      	ldr	r3, [pc, #288]	@ (80079d4 <SFDP_BuildGenericDriver+0xab0>)
 80078b4:	79da      	ldrb	r2, [r3, #7]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
  }

  if(((uint32_t)SFPD_PARAMID_XSPI_V1_0 == (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_XSPI_V1_0))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 80d5 	beq.w	8007a76 <SFDP_BuildGenericDriver+0xb52>
      && 
      ((PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
      && 
 80078d2:	2b09      	cmp	r3, #9
 80078d4:	d005      	beq.n	80078e2 <SFDP_BuildGenericDriver+0x9be>
      ((PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80078dc:	2b08      	cmp	r3, #8
 80078de:	f040 80ca 	bne.w	8007a76 <SFDP_BuildGenericDriver+0xb52>
  {
    uint32_t ClockOut = 0u;
 80078e2:	2300      	movs	r3, #0
 80078e4:	60fb      	str	r3, [r7, #12]
    uint32_t MaxFreqMhz;
    /* Read command */
    if (0u != JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand)
 80078e6:	4b3c      	ldr	r3, [pc, #240]	@ (80079d8 <SFDP_BuildGenericDriver+0xab4>)
 80078e8:	785b      	ldrb	r3, [r3, #1]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d004      	beq.n	80078f8 <SFDP_BuildGenericDriver+0x9d4>
    {
      Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand;
 80078ee:	4b3a      	ldr	r3, [pc, #232]	@ (80079d8 <SFDP_BuildGenericDriver+0xab4>)
 80078f0:	785a      	ldrb	r2, [r3, #1]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }
    
    if (JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle != 0u)
 80078f8:	4b37      	ldr	r3, [pc, #220]	@ (80079d8 <SFDP_BuildGenericDriver+0xab4>)
 80078fa:	7d1b      	ldrb	r3, [r3, #20]
 80078fc:	f003 031f 	and.w	r3, r3, #31
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00d      	beq.n	8007922 <SFDP_BuildGenericDriver+0x9fe>
    {
      /* Set the default dummy cycle of this mode */
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle;
 8007906:	4b34      	ldr	r3, [pc, #208]	@ (80079d8 <SFDP_BuildGenericDriver+0xab4>)
 8007908:	7d1b      	ldrb	r3, [r3, #20]
 800790a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800790e:	b2db      	uxtb	r3, r3
 8007910:	617b      	str	r3, [r7, #20]
      (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	3308      	adds	r3, #8
 8007916:	f107 0214 	add.w	r2, r7, #20
 800791a:	2101      	movs	r1, #1
 800791c:	4618      	mov	r0, r3
 800791e:	f7fe fb8b 	bl	8006038 <SAL_XSPI_MemoryConfig>
    }

    /* adapt the memory freq according its capabilities */
    MaxFreqMhz = sfdp_getfrequencevalue(JEDEC_Basic.Params.Param_DWORD.D20._8D8D8D_MaximunSpeedWithStrobe);
 8007922:	4b2b      	ldr	r3, [pc, #172]	@ (80079d0 <SFDP_BuildGenericDriver+0xaac>)
 8007924:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8007928:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800792c:	b2db      	uxtb	r3, r3
 800792e:	4618      	mov	r0, r3
 8007930:	f000 f8e8 	bl	8007b04 <sfdp_getfrequencevalue>
 8007934:	61f8      	str	r0, [r7, #28]
    if (MaxFreqMhz > Object->sfpd_private.DriverInfo.ClockIn)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800793a:	69fa      	ldr	r2, [r7, #28]
 800793c:	429a      	cmp	r2, r3
 800793e:	d902      	bls.n	8007946 <SFDP_BuildGenericDriver+0xa22>
    {
      /* Adjust the frequence with the ClokcIn */ 
      MaxFreqMhz = Object->sfpd_private.DriverInfo.ClockIn;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007944:	61fb      	str	r3, [r7, #28]
    }

    /* Update the clock to be aligned with selected configuration */
    if(HAL_OK != SAL_XSPI_SetClock(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.ClockIn, MaxFreqMhz, &ClockOut))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f103 0008 	add.w	r0, r3, #8
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8007950:	f107 030c 	add.w	r3, r7, #12
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	f7fe fafd 	bl	8005f54 <SAL_XSPI_SetClock>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <SFDP_BuildGenericDriver+0xa44>
    {
      retr = EXTMEM_SFDP_ERROR_SETCLOCK;
 8007960:	230d      	movs	r3, #13
 8007962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8007966:	e087      	b.n	8007a78 <SFDP_BuildGenericDriver+0xb54>
    }
    *FreqUpdated = 1u; /* Used to indicate that the clock configuration has been updated */
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2201      	movs	r2, #1
 800796c:	701a      	strb	r2, [r3, #0]
    
    /* get the dummy cycle value according the real output clock */
    if ((ClockOut >= CLOCK_200MHZ) && (JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle != 0u))
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4a1a      	ldr	r2, [pc, #104]	@ (80079dc <SFDP_BuildGenericDriver+0xab8>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d913      	bls.n	800799e <SFDP_BuildGenericDriver+0xa7a>
 8007976:	4b18      	ldr	r3, [pc, #96]	@ (80079d8 <SFDP_BuildGenericDriver+0xab4>)
 8007978:	899b      	ldrh	r3, [r3, #12]
 800797a:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 800797e:	b29b      	uxth	r3, r3
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00c      	beq.n	800799e <SFDP_BuildGenericDriver+0xa7a>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle;
 8007984:	4b14      	ldr	r3, [pc, #80]	@ (80079d8 <SFDP_BuildGenericDriver+0xab4>)
 8007986:	899b      	ldrh	r3, [r3, #12]
 8007988:	f3c3 13c4 	ubfx	r3, r3, #7, #5
 800798c:	b2db      	uxtb	r3, r3
 800798e:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_ConfigPattern;
 8007990:	4b11      	ldr	r3, [pc, #68]	@ (80079d8 <SFDP_BuildGenericDriver+0xab4>)
 8007992:	7b1b      	ldrb	r3, [r3, #12]
 8007994:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8007998:	b2db      	uxtb	r3, r3
 800799a:	623b      	str	r3, [r7, #32]
 800799c:	e046      	b.n	8007a2c <SFDP_BuildGenericDriver+0xb08>
    }
    else if ((ClockOut >= CLOCK_166MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle != 0u))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4a0f      	ldr	r2, [pc, #60]	@ (80079e0 <SFDP_BuildGenericDriver+0xabc>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d91e      	bls.n	80079e4 <SFDP_BuildGenericDriver+0xac0>
 80079a6:	4b0c      	ldr	r3, [pc, #48]	@ (80079d8 <SFDP_BuildGenericDriver+0xab4>)
 80079a8:	7cdb      	ldrb	r3, [r3, #19]
 80079aa:	f023 0307 	bic.w	r3, r3, #7
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d017      	beq.n	80079e4 <SFDP_BuildGenericDriver+0xac0>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle;
 80079b4:	4b08      	ldr	r3, [pc, #32]	@ (80079d8 <SFDP_BuildGenericDriver+0xab4>)
 80079b6:	7cdb      	ldrb	r3, [r3, #19]
 80079b8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_ConfigPattern;
 80079c0:	4b05      	ldr	r3, [pc, #20]	@ (80079d8 <SFDP_BuildGenericDriver+0xab4>)
 80079c2:	8a5b      	ldrh	r3, [r3, #18]
 80079c4:	f3c3 1384 	ubfx	r3, r3, #6, #5
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	623b      	str	r3, [r7, #32]
 80079cc:	e02e      	b.n	8007a2c <SFDP_BuildGenericDriver+0xb08>
 80079ce:	bf00      	nop
 80079d0:	240001b0 	.word	0x240001b0
 80079d4:	24000210 	.word	0x24000210
 80079d8:	24000218 	.word	0x24000218
 80079dc:	0bebc1ff 	.word	0x0bebc1ff
 80079e0:	09e4f57f 	.word	0x09e4f57f
    }
    else if ((ClockOut >= CLOCK_133MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle != 0u))
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4a27      	ldr	r2, [pc, #156]	@ (8007a84 <SFDP_BuildGenericDriver+0xb60>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d913      	bls.n	8007a14 <SFDP_BuildGenericDriver+0xaf0>
 80079ec:	4b26      	ldr	r3, [pc, #152]	@ (8007a88 <SFDP_BuildGenericDriver+0xb64>)
 80079ee:	7c9b      	ldrb	r3, [r3, #18]
 80079f0:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00c      	beq.n	8007a14 <SFDP_BuildGenericDriver+0xaf0>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle;
 80079fa:	4b23      	ldr	r3, [pc, #140]	@ (8007a88 <SFDP_BuildGenericDriver+0xb64>)
 80079fc:	7c9b      	ldrb	r3, [r3, #18]
 80079fe:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_ConfigPattern;
 8007a06:	4b20      	ldr	r3, [pc, #128]	@ (8007a88 <SFDP_BuildGenericDriver+0xb64>)
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	f3c3 3304 	ubfx	r3, r3, #12, #5
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	623b      	str	r3, [r7, #32]
 8007a12:	e00b      	b.n	8007a2c <SFDP_BuildGenericDriver+0xb08>
    }
    else /* if (ClockOut =< 100Mhz) */
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_DummyCycle;
 8007a14:	4b1c      	ldr	r3, [pc, #112]	@ (8007a88 <SFDP_BuildGenericDriver+0xb64>)
 8007a16:	8a1b      	ldrh	r3, [r3, #16]
 8007a18:	f3c3 13c4 	ubfx	r3, r3, #7, #5
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_ConfigPattern;
 8007a20:	4b19      	ldr	r3, [pc, #100]	@ (8007a88 <SFDP_BuildGenericDriver+0xb64>)
 8007a22:	7c1b      	ldrb	r3, [r3, #16]
 8007a24:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	623b      	str	r3, [r7, #32]
    }
    
    /* Write the dummy cycle value in the configuration register using information coming from SCCR Map */
    if((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d017      	beq.n	8007a6a <SFDP_BuildGenericDriver+0xb46>
	  && (0u != JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable))
 8007a3a:	4b14      	ldr	r3, [pc, #80]	@ (8007a8c <SFDP_BuildGenericDriver+0xb68>)
 8007a3c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007a40:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00f      	beq.n	8007a6a <SFDP_BuildGenericDriver+0xb46>
    {
      /* Update the frequence with MaxFreqMhz information */
      if( sfpd_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
 8007a4a:	6a39      	ldr	r1, [r7, #32]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fa5d 	bl	8007f0c <sfpd_set_dummycycle>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10f      	bne.n	8007a78 <SFDP_BuildGenericDriver+0xb54>
      {
        /* Set the dummy cycle corresponding */
        (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	f107 0214 	add.w	r2, r7, #20
 8007a60:	2101      	movs	r1, #1
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fe fae8 	bl	8006038 <SAL_XSPI_MemoryConfig>
      if( sfpd_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
 8007a68:	e006      	b.n	8007a78 <SFDP_BuildGenericDriver+0xb54>
      }
    }
    else
    {
      retr = EXTMEM_SFDP_ERROR_CONFIGDUMMY;
 8007a6a:	230e      	movs	r3, #14
 8007a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8007a70:	e002      	b.n	8007a78 <SFDP_BuildGenericDriver+0xb54>
          goto error;
 8007a72:	bf00      	nop
 8007a74:	e000      	b.n	8007a78 <SFDP_BuildGenericDriver+0xb54>
    }
  }

error :
 8007a76:	bf00      	nop
  return retr;
 8007a78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3728      	adds	r7, #40	@ 0x28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bdb0      	pop	{r4, r5, r7, pc}
 8007a84:	07ed6b3f 	.word	0x07ed6b3f
 8007a88:	24000218 	.word	0x24000218
 8007a8c:	24000230 	.word	0x24000230

08007a90 <driver_check_FlagBUSY>:


EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef driver_check_FlagBUSY(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject, uint32_t Timeout)
{
 8007a90:	b5b0      	push	{r4, r5, r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af02      	add	r7, sp, #8
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUSY;
 8007a9a:	23fb      	movs	r3, #251	@ 0xfb
 8007a9c:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR((uint8_t *)__func__)
  if (0u != SFDPObject->sfpd_private.DriverInfo.ReadWIPCommand)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d026      	beq.n	8007af6 <driver_check_FlagBUSY+0x66>
  {
    /* check if the busy flag is enabled */
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f103 0008 	add.w	r0, r3, #8
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
                                               SFDPObject->sfpd_private.DriverInfo.ReadWIPCommand,
                                               SFDPObject->sfpd_private.DriverInfo.WIPAddress,
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 8007aba:	461d      	mov	r5, r3
                                               SFDPObject->sfpd_private.DriverInfo.WIPBusyPolarity << SFDPObject->sfpd_private.DriverInfo.WIPPosition,
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 8007aca:	fa02 f303 	lsl.w	r3, r2, r3
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 8007ace:	b2dc      	uxtb	r4, r3
                                               1u << SFDPObject->sfpd_private.DriverInfo.WIPPosition,
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	2301      	movs	r3, #1
 8007ada:	4093      	lsls	r3, r2
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	9201      	str	r2, [sp, #4]
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	4623      	mov	r3, r4
 8007ae6:	462a      	mov	r2, r5
 8007ae8:	f7fe fe4d 	bl	8006786 <SAL_XSPI_CheckStatusRegister>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <driver_check_FlagBUSY+0x66>
                                               Timeout))
    {
      retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]
    }
  }
  return retr;
 8007af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007b04 <sfdp_getfrequencevalue>:
 * @brief this function returns the frequence corresponding to a frequecy
 * @param BitField bit field value
 * @return frequency value
 */
uint32_t sfdp_getfrequencevalue(uint32_t BitField)
{
 8007b04:	b4b0      	push	{r4, r5, r7}
 8007b06:	b08b      	sub	sp, #44	@ 0x2c
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  const uint16_t freqMhz_table[] = { 0x0, 33, 50, 66, 80, 100, 133, 166, 200, 250, 266, 333, 400 };
 8007b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8007b48 <sfdp_getfrequencevalue+0x44>)
 8007b0e:	f107 040c 	add.w	r4, r7, #12
 8007b12:	461d      	mov	r5, r3
 8007b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007b1c:	c403      	stmia	r4!, {r0, r1}
 8007b1e:	8022      	strh	r2, [r4, #0]
  SFDP_DEBUG_STR(__func__);

  if (BitField < 0b1010u)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b09      	cmp	r3, #9
 8007b24:	d80a      	bhi.n	8007b3c <sfdp_getfrequencevalue+0x38>
  {
    return (uint32_t)freqMhz_table[BitField]* 1000000u;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	005b      	lsls	r3, r3, #1
 8007b2a:	3328      	adds	r3, #40	@ 0x28
 8007b2c:	443b      	add	r3, r7
 8007b2e:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8007b32:	461a      	mov	r2, r3
 8007b34:	4b05      	ldr	r3, [pc, #20]	@ (8007b4c <sfdp_getfrequencevalue+0x48>)
 8007b36:	fb02 f303 	mul.w	r3, r2, r3
 8007b3a:	e000      	b.n	8007b3e <sfdp_getfrequencevalue+0x3a>
  }
  return 0; /* the max frequency is unknown */
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	372c      	adds	r7, #44	@ 0x2c
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bcb0      	pop	{r4, r5, r7}
 8007b46:	4770      	bx	lr
 8007b48:	080085bc 	.word	0x080085bc
 8007b4c:	000f4240 	.word	0x000f4240

08007b50 <sfdp_get_paraminfo>:
 * @param sfdp_adress address of the SFDP table
 * @param sfdp_param_info pointer on parameter info
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfdp_get_paraminfo(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t sfdp_adress, SFDP_ParameterTableTypeDef *Param_info)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	77fb      	strb	r3, [r7, #31]
  SFDP_ParameterHeaderTypeDef sfdp_param_header = {0};
 8007b60:	f107 0314 	add.w	r3, r7, #20
 8007b64:	2200      	movs	r2, #0
 8007b66:	601a      	str	r2, [r3, #0]
 8007b68:	605a      	str	r2, [r3, #4]
  SFDP_DEBUG_STR(__func__);

  /* send the SFDP command to read the header */
  if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, sfdp_adress, 
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f103 0008 	add.w	r0, r3, #8
 8007b70:	f107 0214 	add.w	r2, r7, #20
 8007b74:	2308      	movs	r3, #8
 8007b76:	68b9      	ldr	r1, [r7, #8]
 8007b78:	f7fe fbb0 	bl	80062dc <SAL_XSPI_GetSFDP>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <sfdp_get_paraminfo+0x38>
                                (uint8_t*)&sfdp_param_header, SFDP_PARAM_HEADER_SIZE))
  {
    retr = EXTMEM_SFDP_ERROR_SFPDREAD;
 8007b82:	2303      	movs	r3, #3
 8007b84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b86:	e0d1      	b.n	8007d2c <sfdp_get_paraminfo+0x1dc>
  }

  Param_info->type = SFPD_PARAMID_UNKNOWN;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	601a      	str	r2, [r3, #0]
  Param_info->size = sfdp_param_header.Length ;
 8007b8e:	7dfa      	ldrb	r2, [r7, #23]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	721a      	strb	r2, [r3, #8]
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
 8007b94:	7ebb      	ldrb	r3, [r7, #26]
 8007b96:	041a      	lsls	r2, r3, #16
                        |((uint32_t)sfdp_param_header.TableAddressPointer[1u] << 8u)
 8007b98:	7e7b      	ldrb	r3, [r7, #25]
 8007b9a:	021b      	lsls	r3, r3, #8
 8007b9c:	4313      	orrs	r3, r2
                        |((uint32_t)sfdp_param_header.TableAddressPointer[0u]));
 8007b9e:	7e3a      	ldrb	r2, [r7, #24]
 8007ba0:	431a      	orrs	r2, r3
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	605a      	str	r2, [r3, #4]

  if ((sfdp_param_header.ID_msb > 0x00u) && (sfdp_param_header.ID_msb < 0x80u))
 8007ba6:	7efb      	ldrb	r3, [r7, #27]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d010      	beq.n	8007bce <sfdp_get_paraminfo+0x7e>
 8007bac:	7efb      	ldrb	r3, [r7, #27]
 8007bae:	b25b      	sxtb	r3, r3
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	db0c      	blt.n	8007bce <sfdp_get_paraminfo+0x7e>
  {
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
 8007bb4:	7efb      	ldrb	r3, [r7, #27]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <sfdp_get_paraminfo+0x76>
    {
      Param_info->type = SFPD_PARAMID_VENDOR;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
 8007bc4:	e0b2      	b.n	8007d2c <sfdp_get_paraminfo+0x1dc>
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_VENDOR");
    }
    else
    {
      Param_info->type = SFPD_PARAMID_FUNCTION_VENDOR;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2202      	movs	r2, #2
 8007bca:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
 8007bcc:	e0ae      	b.n	8007d2c <sfdp_get_paraminfo+0x1dc>
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_FUNCTION_VENDOR");
    }
  }
  else
  {
    if((sfdp_param_header.ID_lsb & 0x01u) == 0x00u)
 8007bce:	7d3b      	ldrb	r3, [r7, #20]
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d102      	bne.n	8007bde <sfdp_get_paraminfo+0x8e>
    {
      Param_info->type = SFPD_PARAMID_FUNCTION_JEDEC;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2204      	movs	r2, #4
 8007bdc:	601a      	str	r2, [r3, #0]
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_FUNCTION_JEDEC");
    }

    if((0xFFu == sfdp_param_header.ID_msb))
 8007bde:	7efb      	ldrb	r3, [r7, #27]
 8007be0:	2bff      	cmp	r3, #255	@ 0xff
 8007be2:	f040 80a2 	bne.w	8007d2a <sfdp_get_paraminfo+0x1da>
    {
      switch(sfdp_param_header.ID_lsb)
 8007be6:	7d3b      	ldrb	r3, [r7, #20]
 8007be8:	2b0f      	cmp	r3, #15
 8007bea:	dc4b      	bgt.n	8007c84 <sfdp_get_paraminfo+0x134>
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	da23      	bge.n	8007c38 <sfdp_get_paraminfo+0xe8>
        Param_info->type = SFPD_PARAMID_RESERVED;
        SFDP_DEBUG_STR("-> info SFPD_PARAMID_RESERVED");
        break;
      default :
        SFDP_DEBUG_STR("-> info SFPD_PARAMID_????");
        break;
 8007bf0:	e09a      	b.n	8007d28 <sfdp_get_paraminfo+0x1d8>
      switch(sfdp_param_header.ID_lsb)
 8007bf2:	3b81      	subs	r3, #129	@ 0x81
 8007bf4:	2b0d      	cmp	r3, #13
 8007bf6:	f200 8097 	bhi.w	8007d28 <sfdp_get_paraminfo+0x1d8>
 8007bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8007c00 <sfdp_get_paraminfo+0xb0>)
 8007bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c00:	08007ca5 	.word	0x08007ca5
 8007c04:	08007d29 	.word	0x08007d29
 8007c08:	08007d29 	.word	0x08007d29
 8007c0c:	08007cb5 	.word	0x08007cb5
 8007c10:	08007d29 	.word	0x08007d29
 8007c14:	08007d29 	.word	0x08007d29
 8007c18:	08007ccf 	.word	0x08007ccf
 8007c1c:	08007cd9 	.word	0x08007cd9
 8007c20:	08007d29 	.word	0x08007d29
 8007c24:	08007d29 	.word	0x08007d29
 8007c28:	08007cf7 	.word	0x08007cf7
 8007c2c:	08007d29 	.word	0x08007d29
 8007c30:	08007d0b 	.word	0x08007d0b
 8007c34:	08007d15 	.word	0x08007d15
 8007c38:	2b0f      	cmp	r3, #15
 8007c3a:	d875      	bhi.n	8007d28 <sfdp_get_paraminfo+0x1d8>
 8007c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c44 <sfdp_get_paraminfo+0xf4>)
 8007c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c42:	bf00      	nop
 8007c44:	08007c8f 	.word	0x08007c8f
 8007c48:	08007d29 	.word	0x08007d29
 8007c4c:	08007d29 	.word	0x08007d29
 8007c50:	08007cad 	.word	0x08007cad
 8007c54:	08007d29 	.word	0x08007d29
 8007c58:	08007cbd 	.word	0x08007cbd
 8007c5c:	08007cc5 	.word	0x08007cc5
 8007c60:	08007d29 	.word	0x08007d29
 8007c64:	08007d29 	.word	0x08007d29
 8007c68:	08007ce3 	.word	0x08007ce3
 8007c6c:	08007ced 	.word	0x08007ced
 8007c70:	08007d29 	.word	0x08007d29
 8007c74:	08007d01 	.word	0x08007d01
 8007c78:	08007d29 	.word	0x08007d29
 8007c7c:	08007d29 	.word	0x08007d29
 8007c80:	08007d1f 	.word	0x08007d1f
 8007c84:	2b8e      	cmp	r3, #142	@ 0x8e
 8007c86:	dc4f      	bgt.n	8007d28 <sfdp_get_paraminfo+0x1d8>
 8007c88:	2b81      	cmp	r3, #129	@ 0x81
 8007c8a:	dab2      	bge.n	8007bf2 <sfdp_get_paraminfo+0xa2>
        break;
 8007c8c:	e04c      	b.n	8007d28 <sfdp_get_paraminfo+0x1d8>
        Param_info->type = SFPD_PARAMID_BASIC_SPIPROTOCOL;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2208      	movs	r2, #8
 8007c92:	601a      	str	r2, [r3, #0]
        Param_info->size = ((sfdp_param_header.Length ) < SFPD_PARAMS_BASIC_TABLE_DEFAULTSIZE) ? SFPD_PARAMS_BASIC_TABLE_DEFAULTSIZE : sfdp_param_header.Length;
 8007c94:	7dfb      	ldrb	r3, [r7, #23]
 8007c96:	2b10      	cmp	r3, #16
 8007c98:	bf38      	it	cc
 8007c9a:	2310      	movcc	r3, #16
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	721a      	strb	r2, [r3, #8]
        break;
 8007ca2:	e042      	b.n	8007d2a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_SECTORMAP;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2210      	movs	r2, #16
 8007ca8:	601a      	str	r2, [r3, #0]
        break;
 8007caa:	e03e      	b.n	8007d2a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_RPMC;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	601a      	str	r2, [r3, #0]
        break;
 8007cb2:	e03a      	b.n	8007d2a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2240      	movs	r2, #64	@ 0x40
 8007cb8:	601a      	str	r2, [r3, #0]
        break;
 8007cba:	e036      	b.n	8007d2a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_XSPI_V1_0;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2280      	movs	r2, #128	@ 0x80
 8007cc0:	601a      	str	r2, [r3, #0]
        break;
 8007cc2:	e032      	b.n	8007d2a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_XSPI_V2_0;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cca:	601a      	str	r2, [r3, #0]
        break;
 8007ccc:	e02d      	b.n	8007d2a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cd4:	601a      	str	r2, [r3, #0]
        break;
 8007cd6:	e028      	b.n	8007d2a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP_MULTICHIP;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007cde:	601a      	str	r2, [r3, #0]
        break;
 8007ce0:	e023      	b.n	8007d2a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_XSPI_V2_0;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ce8:	601a      	str	r2, [r3, #0]
        break;
 8007cea:	e01e      	b.n	8007d2a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_OCTAL_DDR;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007cf2:	601a      	str	r2, [r3, #0]
        break;
 8007cf4:	e019      	b.n	8007d2a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_MSPT;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007cfc:	601a      	str	r2, [r3, #0]
        break;
 8007cfe:	e014      	b.n	8007d2a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_X4QUAD_DS;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007d06:	601a      	str	r2, [r3, #0]
        break;
 8007d08:	e00f      	b.n	8007d2a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_QUAD_DDR;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007d10:	601a      	str	r2, [r3, #0]
        break;
 8007d12:	e00a      	b.n	8007d2a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_SECURE_PACKET_READ_WRITE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007d1a:	601a      	str	r2, [r3, #0]
        break;
 8007d1c:	e005      	b.n	8007d2a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_RESERVED;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007d24:	601a      	str	r2, [r3, #0]
        break;
 8007d26:	e000      	b.n	8007d2a <sfdp_get_paraminfo+0x1da>
        break;
 8007d28:	bf00      	nop
    {
      SFDP_DEBUG_STR("-> the table is not conform to JEDEC standard");
    }
  }
  
error:
 8007d2a:	bf00      	nop
  return retr;
 8007d2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3720      	adds	r7, #32
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop

08007d38 <sfpd_enter_octal_mode>:
 * @brief this function executes the octal DDR table to enter octal DDR mode
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfpd_enter_octal_mode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 8007d38:	b590      	push	{r4, r7, lr}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	73fb      	strb	r3, [r7, #15]
  uint8_t data[7];
  SFDP_DEBUG_STR(__func__);
  /* D1-D2 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D1.LenghtCommand)
 8007d44:	4b70      	ldr	r3, [pc, #448]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007d46:	78db      	ldrb	r3, [r3, #3]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d032      	beq.n	8007db2 <sfpd_enter_octal_mode+0x7a>
  {
     data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte1CommandSequence;
 8007d4c:	4b6e      	ldr	r3, [pc, #440]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007d4e:	789b      	ldrb	r3, [r3, #2]
 8007d50:	723b      	strb	r3, [r7, #8]
     data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte2CommandSequence;
 8007d52:	4b6d      	ldr	r3, [pc, #436]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007d54:	785b      	ldrb	r3, [r3, #1]
 8007d56:	727b      	strb	r3, [r7, #9]
     data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte3CommandSequence;
 8007d58:	4b6b      	ldr	r3, [pc, #428]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	72bb      	strb	r3, [r7, #10]
     data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte4CommandSequence;
 8007d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007d60:	79db      	ldrb	r3, [r3, #7]
 8007d62:	72fb      	strb	r3, [r7, #11]
     data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte5CommandSequence;
 8007d64:	4b68      	ldr	r3, [pc, #416]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007d66:	799b      	ldrb	r3, [r3, #6]
 8007d68:	733b      	strb	r3, [r7, #12]
     data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte6CommandSequence;
 8007d6a:	4b67      	ldr	r3, [pc, #412]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007d6c:	795b      	ldrb	r3, [r3, #5]
 8007d6e:	737b      	strb	r3, [r7, #13]
     data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte7CommandSequence;
 8007d70:	4b65      	ldr	r3, [pc, #404]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007d72:	791b      	ldrb	r3, [r3, #4]
 8007d74:	73bb      	strb	r3, [r7, #14]

     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f103 0008 	add.w	r0, r3, #8
 8007d7c:	7a39      	ldrb	r1, [r7, #8]
                                        (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D1.LenghtCommand - 1u)))
 8007d7e:	4b62      	ldr	r3, [pc, #392]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007d80:	78db      	ldrb	r3, [r3, #3]
     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8007d82:	3b01      	subs	r3, #1
 8007d84:	b29c      	uxth	r4, r3
 8007d86:	f107 0308 	add.w	r3, r7, #8
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	4623      	mov	r3, r4
 8007d8e:	f7fe fc05 	bl	800659c <SAL_XSPI_CommandSendData>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <sfpd_enter_octal_mode+0x66>
     {
       retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 8007d98:	230b      	movs	r3, #11
 8007d9a:	73fb      	strb	r3, [r7, #15]
       goto error;
 8007d9c:	e0af      	b.n	8007efe <sfpd_enter_octal_mode+0x1c6>
     }

    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 8007d9e:	2164      	movs	r1, #100	@ 0x64
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7ff fe75 	bl	8007a90 <driver_check_FlagBUSY>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d002      	beq.n	8007db2 <sfpd_enter_octal_mode+0x7a>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007dac:	230c      	movs	r3, #12
 8007dae:	73fb      	strb	r3, [r7, #15]
      goto error;
 8007db0:	e0a5      	b.n	8007efe <sfpd_enter_octal_mode+0x1c6>
    }
  }
  
  /* D3-D4 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D3.LenghtCommand)
 8007db2:	4b55      	ldr	r3, [pc, #340]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007db4:	7adb      	ldrb	r3, [r3, #11]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d032      	beq.n	8007e20 <sfpd_enter_octal_mode+0xe8>
  {
     data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte1CommandSequence;
 8007dba:	4b53      	ldr	r3, [pc, #332]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007dbc:	7a9b      	ldrb	r3, [r3, #10]
 8007dbe:	723b      	strb	r3, [r7, #8]
     data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte2CommandSequence;
 8007dc0:	4b51      	ldr	r3, [pc, #324]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007dc2:	7a5b      	ldrb	r3, [r3, #9]
 8007dc4:	727b      	strb	r3, [r7, #9]
     data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte3CommandSequence;
 8007dc6:	4b50      	ldr	r3, [pc, #320]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007dc8:	7a1b      	ldrb	r3, [r3, #8]
 8007dca:	72bb      	strb	r3, [r7, #10]
     data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte4CommandSequence;
 8007dcc:	4b4e      	ldr	r3, [pc, #312]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007dce:	7bdb      	ldrb	r3, [r3, #15]
 8007dd0:	72fb      	strb	r3, [r7, #11]
     data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte5CommandSequence;
 8007dd2:	4b4d      	ldr	r3, [pc, #308]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007dd4:	7b9b      	ldrb	r3, [r3, #14]
 8007dd6:	733b      	strb	r3, [r7, #12]
     data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte6CommandSequence;
 8007dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007dda:	7b5b      	ldrb	r3, [r3, #13]
 8007ddc:	737b      	strb	r3, [r7, #13]
     data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte7CommandSequence;
 8007dde:	4b4a      	ldr	r3, [pc, #296]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007de0:	7b1b      	ldrb	r3, [r3, #12]
 8007de2:	73bb      	strb	r3, [r7, #14]

     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f103 0008 	add.w	r0, r3, #8
 8007dea:	7a39      	ldrb	r1, [r7, #8]
                                            (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D3.LenghtCommand - 1u)))
 8007dec:	4b46      	ldr	r3, [pc, #280]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007dee:	7adb      	ldrb	r3, [r3, #11]
     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8007df0:	3b01      	subs	r3, #1
 8007df2:	b29c      	uxth	r4, r3
 8007df4:	f107 0308 	add.w	r3, r7, #8
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	4623      	mov	r3, r4
 8007dfc:	f7fe fbce 	bl	800659c <SAL_XSPI_CommandSendData>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d002      	beq.n	8007e0c <sfpd_enter_octal_mode+0xd4>
     {
       retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 8007e06:	230b      	movs	r3, #11
 8007e08:	73fb      	strb	r3, [r7, #15]
       goto error;
 8007e0a:	e078      	b.n	8007efe <sfpd_enter_octal_mode+0x1c6>
     }
     
    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 8007e0c:	2164      	movs	r1, #100	@ 0x64
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7ff fe3e 	bl	8007a90 <driver_check_FlagBUSY>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d002      	beq.n	8007e20 <sfpd_enter_octal_mode+0xe8>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007e1a:	230c      	movs	r3, #12
 8007e1c:	73fb      	strb	r3, [r7, #15]
      goto error;
 8007e1e:	e06e      	b.n	8007efe <sfpd_enter_octal_mode+0x1c6>
    }
  }

  /* D5-D6 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D5.LenghtCommand)
 8007e20:	4b39      	ldr	r3, [pc, #228]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007e22:	7cdb      	ldrb	r3, [r3, #19]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d032      	beq.n	8007e8e <sfpd_enter_octal_mode+0x156>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte1CommandSequence;
 8007e28:	4b37      	ldr	r3, [pc, #220]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007e2a:	7c9b      	ldrb	r3, [r3, #18]
 8007e2c:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte2CommandSequence;
 8007e2e:	4b36      	ldr	r3, [pc, #216]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007e30:	7c5b      	ldrb	r3, [r3, #17]
 8007e32:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte3CommandSequence;
 8007e34:	4b34      	ldr	r3, [pc, #208]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007e36:	7c1b      	ldrb	r3, [r3, #16]
 8007e38:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte4CommandSequence;
 8007e3a:	4b33      	ldr	r3, [pc, #204]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007e3c:	7ddb      	ldrb	r3, [r3, #23]
 8007e3e:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte5CommandSequence;
 8007e40:	4b31      	ldr	r3, [pc, #196]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007e42:	7d9b      	ldrb	r3, [r3, #22]
 8007e44:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte6CommandSequence;
 8007e46:	4b30      	ldr	r3, [pc, #192]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007e48:	7d5b      	ldrb	r3, [r3, #21]
 8007e4a:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte7CommandSequence;
 8007e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007e4e:	7d1b      	ldrb	r3, [r3, #20]
 8007e50:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f103 0008 	add.w	r0, r3, #8
 8007e58:	7a39      	ldrb	r1, [r7, #8]
                                       (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D5.LenghtCommand - 1u)))
 8007e5a:	4b2b      	ldr	r3, [pc, #172]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007e5c:	7cdb      	ldrb	r3, [r3, #19]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	b29c      	uxth	r4, r3
 8007e62:	f107 0308 	add.w	r3, r7, #8
 8007e66:	1c5a      	adds	r2, r3, #1
 8007e68:	4623      	mov	r3, r4
 8007e6a:	f7fe fb97 	bl	800659c <SAL_XSPI_CommandSendData>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <sfpd_enter_octal_mode+0x142>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 8007e74:	230b      	movs	r3, #11
 8007e76:	73fb      	strb	r3, [r7, #15]
      goto error;
 8007e78:	e041      	b.n	8007efe <sfpd_enter_octal_mode+0x1c6>
    }

     /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 8007e7a:	2164      	movs	r1, #100	@ 0x64
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7ff fe07 	bl	8007a90 <driver_check_FlagBUSY>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <sfpd_enter_octal_mode+0x156>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007e88:	230c      	movs	r3, #12
 8007e8a:	73fb      	strb	r3, [r7, #15]
      goto error;
 8007e8c:	e037      	b.n	8007efe <sfpd_enter_octal_mode+0x1c6>
    }
  }

  /* D7-D8 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D7.LenghtCommand)
 8007e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007e90:	7edb      	ldrb	r3, [r3, #27]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d032      	beq.n	8007efc <sfpd_enter_octal_mode+0x1c4>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte1CommandSequence;
 8007e96:	4b1c      	ldr	r3, [pc, #112]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007e98:	7e9b      	ldrb	r3, [r3, #26]
 8007e9a:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte2CommandSequence;
 8007e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007e9e:	7e5b      	ldrb	r3, [r3, #25]
 8007ea0:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte3CommandSequence;
 8007ea2:	4b19      	ldr	r3, [pc, #100]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007ea4:	7e1b      	ldrb	r3, [r3, #24]
 8007ea6:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte4CommandSequence;
 8007ea8:	4b17      	ldr	r3, [pc, #92]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007eaa:	7fdb      	ldrb	r3, [r3, #31]
 8007eac:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte5CommandSequence;
 8007eae:	4b16      	ldr	r3, [pc, #88]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007eb0:	7f9b      	ldrb	r3, [r3, #30]
 8007eb2:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte6CommandSequence;
 8007eb4:	4b14      	ldr	r3, [pc, #80]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007eb6:	7f5b      	ldrb	r3, [r3, #29]
 8007eb8:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte7CommandSequence;
 8007eba:	4b13      	ldr	r3, [pc, #76]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007ebc:	7f1b      	ldrb	r3, [r3, #28]
 8007ebe:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f103 0008 	add.w	r0, r3, #8
 8007ec6:	7a39      	ldrb	r1, [r7, #8]
                                       (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D7.LenghtCommand - 1u)))
 8007ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8007f08 <sfpd_enter_octal_mode+0x1d0>)
 8007eca:	7edb      	ldrb	r3, [r3, #27]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	b29c      	uxth	r4, r3
 8007ed0:	f107 0308 	add.w	r3, r7, #8
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	4623      	mov	r3, r4
 8007ed8:	f7fe fb60 	bl	800659c <SAL_XSPI_CommandSendData>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d002      	beq.n	8007ee8 <sfpd_enter_octal_mode+0x1b0>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 8007ee2:	230b      	movs	r3, #11
 8007ee4:	73fb      	strb	r3, [r7, #15]
      goto error;
 8007ee6:	e00a      	b.n	8007efe <sfpd_enter_octal_mode+0x1c6>
    }

    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 8007ee8:	2164      	movs	r1, #100	@ 0x64
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7ff fdd0 	bl	8007a90 <driver_check_FlagBUSY>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d002      	beq.n	8007efc <sfpd_enter_octal_mode+0x1c4>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007ef6:	230c      	movs	r3, #12
 8007ef8:	73fb      	strb	r3, [r7, #15]
      goto error;
 8007efa:	e000      	b.n	8007efe <sfpd_enter_octal_mode+0x1c6>
    }
  }

error:
 8007efc:	bf00      	nop
  return retr;
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd90      	pop	{r4, r7, pc}
 8007f08:	240002a0 	.word	0x240002a0

08007f0c <sfpd_set_dummycycle>:
 * @brief this function writes the config register to set dummy cycle
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfpd_set_dummycycle(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t DummyValue)
{
 8007f0c:	b5b0      	push	{r4, r5, r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af02      	add	r7, sp, #8
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
const uint8_t MaskWaitStateValue[4] = { 0x3u, 0x7u, 0xFu, 0x1Fu };
 8007f16:	4b6d      	ldr	r3, [pc, #436]	@ (80080cc <sfpd_set_dummycycle+0x1c0>)
 8007f18:	60fb      	str	r3, [r7, #12]
SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	75fb      	strb	r3, [r7, #23]
uint8_t localValue[2] = { 0 };
 8007f1e:	2300      	movs	r3, #0
 8007f20:	813b      	strh	r3, [r7, #8]
uint32_t Address;

  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
 8007f22:	4b6b      	ldr	r3, [pc, #428]	@ (80080d0 <sfpd_set_dummycycle+0x1c4>)
 8007f24:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007f28:	f003 0310 	and.w	r3, r3, #16
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10a      	bne.n	8007f48 <sfpd_set_dummycycle+0x3c>
    (JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable == 1u))
 8007f32:	4b67      	ldr	r3, [pc, #412]	@ (80080d0 <sfpd_set_dummycycle+0x1c4>)
 8007f34:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007f38:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007f3c:	b2db      	uxtb	r3, r3
  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d002      	beq.n	8007f48 <sfpd_set_dummycycle+0x3c>
  {
    /* Not yet supported */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007f42:	230c      	movs	r3, #12
 8007f44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f46:	e0bb      	b.n	80080c0 <sfpd_set_dummycycle+0x1b4>
  }
  
  /* Compute the Address */
  if (JEDEC_SCCR_Map.Param_DWORD.D9.LocalAddress == 1u)
 8007f48:	4b61      	ldr	r3, [pc, #388]	@ (80080d0 <sfpd_set_dummycycle+0x1c4>)
 8007f4a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007f4e:	f003 0308 	and.w	r3, r3, #8
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d005      	beq.n	8007f64 <sfpd_set_dummycycle+0x58>
  { 
    Address = JEDEC_SCCR_Map.Param_DWORD.D9.AdressRegisterOrModesSupported << 8;
 8007f58:	4b5d      	ldr	r3, [pc, #372]	@ (80080d0 <sfpd_set_dummycycle+0x1c4>)
 8007f5a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8007f5e:	021b      	lsls	r3, r3, #8
 8007f60:	613b      	str	r3, [r7, #16]
 8007f62:	e001      	b.n	8007f68 <sfpd_set_dummycycle+0x5c>
  }
  else
  {
    /* patch no really universal */
    Address = 1; 
 8007f64:	2301      	movs	r3, #1
 8007f66:	613b      	str	r3, [r7, #16]
  }
    
  /* Read the configuration */
  if (HAL_OK != SAL_XSPI_CommandSendReadAddress(&Object->sfpd_private.SALObject, 
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f103 0008 	add.w	r0, r3, #8
 8007f6e:	4b58      	ldr	r3, [pc, #352]	@ (80080d0 <sfpd_set_dummycycle+0x1c4>)
 8007f70:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
 8007f74:	f107 0308 	add.w	r3, r7, #8
 8007f78:	2202      	movs	r2, #2
 8007f7a:	9200      	str	r2, [sp, #0]
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	f7fe fbb5 	bl	80066ec <SAL_XSPI_CommandSendReadAddress>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <sfpd_set_dummycycle+0x82>
                   (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess, 
                   Address, 
                   (uint8_t *)localValue, 
                   2u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007f88:	230c      	movs	r3, #12
 8007f8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f8c:	e098      	b.n	80080c0 <sfpd_set_dummycycle+0x1b4>
  }
      
  /* send command to write enable */
  if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f103 0008 	add.w	r0, r3, #8
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f7fe fafd 	bl	800659c <SAL_XSPI_CommandSendData>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <sfpd_set_dummycycle+0xa2>
                                     Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007fa8:	230c      	movs	r3, #12
 8007faa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007fac:	e088      	b.n	80080c0 <sfpd_set_dummycycle+0x1b4>
  }

  /* control the write enable */
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f103 0008 	add.w	r0, r3, #8
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                            Object->sfpd_private.DriverInfo.ReadWELCommand,
                                            Object->sfpd_private.DriverInfo.WELAddress,
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8007fc0:	461d      	mov	r5, r3
                                            ((Object->sfpd_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfpd_private.DriverInfo.WELPosition,
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <sfpd_set_dummycycle+0xc4>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e000      	b.n	8007fd2 <sfpd_set_dummycycle+0xc6>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
 8007fd8:	4093      	lsls	r3, r2
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8007fda:	b2da      	uxtb	r2, r3
                                            1u << Object->sfpd_private.DriverInfo.WELPosition,
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8007fe2:	461c      	mov	r4, r3
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	40a3      	lsls	r3, r4
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8007fee:	9401      	str	r4, [sp, #4]
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	462a      	mov	r2, r5
 8007ff6:	f7fe fbc6 	bl	8006786 <SAL_XSPI_CheckStatusRegister>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <sfpd_set_dummycycle+0xfa>
                                            1000))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008000:	230c      	movs	r3, #12
 8008002:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008004:	e05c      	b.n	80080c0 <sfpd_set_dummycycle+0x1b4>
  }
    
  /* clear the value */
  localValue[0] = localValue[0] & ~(MaskWaitStateValue[JEDEC_SCCR_Map.Param_DWORD.D9.NumberBitsUsedToSetWaitStates] << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
 8008006:	7a3b      	ldrb	r3, [r7, #8]
 8008008:	b25a      	sxtb	r2, r3
 800800a:	4b31      	ldr	r3, [pc, #196]	@ (80080d0 <sfpd_set_dummycycle+0x1c4>)
 800800c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008010:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8008014:	b2db      	uxtb	r3, r3
 8008016:	3318      	adds	r3, #24
 8008018:	443b      	add	r3, r7
 800801a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800801e:	4619      	mov	r1, r3
 8008020:	4b2b      	ldr	r3, [pc, #172]	@ (80080d0 <sfpd_set_dummycycle+0x1c4>)
 8008022:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008026:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800802a:	b2db      	uxtb	r3, r3
 800802c:	fa01 f303 	lsl.w	r3, r1, r3
 8008030:	b25b      	sxtb	r3, r3
 8008032:	43db      	mvns	r3, r3
 8008034:	b25b      	sxtb	r3, r3
 8008036:	4013      	ands	r3, r2
 8008038:	b25b      	sxtb	r3, r3
 800803a:	b2db      	uxtb	r3, r3
 800803c:	723b      	strb	r3, [r7, #8]
                                    
  /* Apply the value with the mask */
  localValue[0] =  localValue[0] | (uint8_t)(DummyValue << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
 800803e:	7a3a      	ldrb	r2, [r7, #8]
 8008040:	4b23      	ldr	r3, [pc, #140]	@ (80080d0 <sfpd_set_dummycycle+0x1c4>)
 8008042:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008046:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800804a:	b2db      	uxtb	r3, r3
 800804c:	4619      	mov	r1, r3
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	408b      	lsls	r3, r1
 8008052:	b2db      	uxtb	r3, r3
 8008054:	4313      	orrs	r3, r2
 8008056:	b2db      	uxtb	r3, r3
 8008058:	723b      	strb	r3, [r7, #8]
  localValue[1] = localValue[0];
 800805a:	7a3b      	ldrb	r3, [r7, #8]
 800805c:	727b      	strb	r3, [r7, #9]
     
  /* Write de configuration */
  if (HAL_OK != SAL_XSPI_Write(&Object->sfpd_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandWriteAccess, Address, (uint8_t *)localValue, 2u))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f103 0008 	add.w	r0, r3, #8
 8008064:	4b1a      	ldr	r3, [pc, #104]	@ (80080d0 <sfpd_set_dummycycle+0x1c4>)
 8008066:	f893 1020 	ldrb.w	r1, [r3, #32]
 800806a:	f107 0308 	add.w	r3, r7, #8
 800806e:	2202      	movs	r2, #2
 8008070:	9200      	str	r2, [sp, #0]
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	f7fe fa49 	bl	800650a <SAL_XSPI_Write>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <sfpd_set_dummycycle+0x178>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 800807e:	230c      	movs	r3, #12
 8008080:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008082:	e01d      	b.n	80080c0 <sfpd_set_dummycycle+0x1b4>
  }

  /* wait for busy flag clear */
  if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 8008084:	2164      	movs	r1, #100	@ 0x64
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7ff fd02 	bl	8007a90 <driver_check_FlagBUSY>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d002      	beq.n	8008098 <sfpd_set_dummycycle+0x18c>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008092:	230c      	movs	r3, #12
 8008094:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008096:	e013      	b.n	80080c0 <sfpd_set_dummycycle+0x1b4>
  }

  /* Read the configuration, line can be removed it is only used for debug purpose */
  if (HAL_OK != SAL_XSPI_Read(&Object->sfpd_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess, Address, (uint8_t *)localValue, 2u))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f103 0008 	add.w	r0, r3, #8
 800809e:	4b0c      	ldr	r3, [pc, #48]	@ (80080d0 <sfpd_set_dummycycle+0x1c4>)
 80080a0:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
 80080a4:	f107 0308 	add.w	r3, r7, #8
 80080a8:	2202      	movs	r2, #2
 80080aa:	9200      	str	r2, [sp, #0]
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	f7fe f9c4 	bl	800643a <SAL_XSPI_Read>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <sfpd_set_dummycycle+0x1b2>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 80080b8:	230c      	movs	r3, #12
 80080ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80080bc:	e000      	b.n	80080c0 <sfpd_set_dummycycle+0x1b4>
  }	
  
error :
 80080be:	bf00      	nop
  return retr;  
 80080c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3718      	adds	r7, #24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bdb0      	pop	{r4, r5, r7, pc}
 80080ca:	bf00      	nop
 80080cc:	1f0f0703 	.word	0x1f0f0703
 80080d0:	24000230 	.word	0x24000230

080080d4 <JEDEC_Basic_ManageQuadEnableRequierement>:
          JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequierment parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_ManageQuadEnableRequierement(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 80080dc:	230f      	movs	r3, #15
 80080de:	73fb      	strb	r3, [r7, #15]
  uint8_t localValue[2];  
  
  /* switch the mode in QSPI if available */
  switch (JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequierment & 0x7u)
 80080e0:	4b58      	ldr	r3, [pc, #352]	@ (8008244 <JEDEC_Basic_ManageQuadEnableRequierement+0x170>)
 80080e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080e6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b07      	cmp	r3, #7
 80080ee:	f200 80a1 	bhi.w	8008234 <JEDEC_Basic_ManageQuadEnableRequierement+0x160>
 80080f2:	a201      	add	r2, pc, #4	@ (adr r2, 80080f8 <JEDEC_Basic_ManageQuadEnableRequierement+0x24>)
 80080f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f8:	08008235 	.word	0x08008235
 80080fc:	08008235 	.word	0x08008235
 8008100:	08008119 	.word	0x08008119
 8008104:	08008235 	.word	0x08008235
 8008108:	08008199 	.word	0x08008199
 800810c:	08008235 	.word	0x08008235
 8008110:	08008235 	.word	0x08008235
 8008114:	08008235 	.word	0x08008235
              */
    break;
  case 0x2u: {/* 010b: QE is bit 6 of status register 1. It is set via Write Status with one data byte where bit 6 is one. 
                 It is cleared via Write Status with one data byte where bit 6 is zero..*/
    /* 1 - set the write enable */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f103 0008 	add.w	r0, r3, #8
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 8008124:	2300      	movs	r3, #0
 8008126:	2200      	movs	r2, #0
 8008128:	f7fe fa8c 	bl	8006644 <SAL_XSPI_SendReadCommand>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <JEDEC_Basic_ManageQuadEnableRequierement+0x64>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008132:	230c      	movs	r3, #12
 8008134:	73fb      	strb	r3, [r7, #15]
      goto error;
 8008136:	e080      	b.n	800823a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* 2 - read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5u, (uint8_t *)&localValue[0], 1u))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f103 0008 	add.w	r0, r3, #8
 800813e:	f107 020c 	add.w	r2, r7, #12
 8008142:	2301      	movs	r3, #1
 8008144:	2105      	movs	r1, #5
 8008146:	f7fe fa7d 	bl	8006644 <SAL_XSPI_SendReadCommand>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d002      	beq.n	8008156 <JEDEC_Basic_ManageQuadEnableRequierement+0x82>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008150:	230c      	movs	r3, #12
 8008152:	73fb      	strb	r3, [r7, #15]
      goto error;
 8008154:	e071      	b.n	800823a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* 3 - update the status register to enable QPI mode*/
    localValue[0] = localValue[0] | 0x40u;
 8008156:	7b3b      	ldrb	r3, [r7, #12]
 8008158:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800815c:	b2db      	uxtb	r3, r3
 800815e:	733b      	strb	r3, [r7, #12]
    
    /* 4 - write the status register with QPI mode to 1 */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 1u))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f103 0008 	add.w	r0, r3, #8
 8008166:	f107 020c 	add.w	r2, r7, #12
 800816a:	2301      	movs	r3, #1
 800816c:	2101      	movs	r1, #1
 800816e:	f7fe fa15 	bl	800659c <SAL_XSPI_CommandSendData>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d002      	beq.n	800817e <JEDEC_Basic_ManageQuadEnableRequierement+0xaa>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008178:	230c      	movs	r3, #12
 800817a:	73fb      	strb	r3, [r7, #15]
      goto error;
 800817c:	e05d      	b.n	800823a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
 800817e:	2164      	movs	r1, #100	@ 0x64
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7ff fc85 	bl	8007a90 <driver_check_FlagBUSY>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <JEDEC_Basic_ManageQuadEnableRequierement+0xbe>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 800818c:	230c      	movs	r3, #12
 800818e:	73fb      	strb	r3, [r7, #15]
      goto error;
 8008190:	e053      	b.n	800823a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    retr = EXTMEM_SFDP_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	73fb      	strb	r3, [r7, #15]
    break;
 8008196:	e050      	b.n	800823a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
  case 0x4u:{ /* 100b: QE is bit 1 of status register 2. It is set via Write Status with two data bytes where bit 1 of the second byte is one. 
                It is cleared via Write Status with two data bytes where bit 1 of the second byte is zero. 
                In contrast to the 001b code, writing one byte to the status register does not modify status register 2.*/
   
    /* read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f103 0008 	add.w	r0, r3, #8
 800819e:	f107 020c 	add.w	r2, r7, #12
 80081a2:	2302      	movs	r3, #2
 80081a4:	2105      	movs	r1, #5
 80081a6:	f7fe fa4d 	bl	8006644 <SAL_XSPI_SendReadCommand>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <JEDEC_Basic_ManageQuadEnableRequierement+0xe2>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80081b0:	230c      	movs	r3, #12
 80081b2:	73fb      	strb	r3, [r7, #15]
      goto error;
 80081b4:	e041      	b.n	800823a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* update the status register */
    localValue[1] |= 2u;
 80081b6:	7b7b      	ldrb	r3, [r7, #13]
 80081b8:	f043 0302 	orr.w	r3, r3, #2
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	737b      	strb	r3, [r7, #13]
    
    /* WEL */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f103 0008 	add.w	r0, r3, #8
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 80081cc:	2300      	movs	r3, #0
 80081ce:	2200      	movs	r2, #0
 80081d0:	f7fe fa38 	bl	8006644 <SAL_XSPI_SendReadCommand>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d002      	beq.n	80081e0 <JEDEC_Basic_ManageQuadEnableRequierement+0x10c>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80081da:	230c      	movs	r3, #12
 80081dc:	73fb      	strb	r3, [r7, #15]
      goto error;
 80081de:	e02c      	b.n	800823a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* write the status register */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 2u))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f103 0008 	add.w	r0, r3, #8
 80081e6:	f107 020c 	add.w	r2, r7, #12
 80081ea:	2302      	movs	r3, #2
 80081ec:	2101      	movs	r1, #1
 80081ee:	f7fe f9d5 	bl	800659c <SAL_XSPI_CommandSendData>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d002      	beq.n	80081fe <JEDEC_Basic_ManageQuadEnableRequierement+0x12a>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80081f8:	230c      	movs	r3, #12
 80081fa:	73fb      	strb	r3, [r7, #15]
      goto error;
 80081fc:	e01d      	b.n	800823a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
 80081fe:	2164      	movs	r1, #100	@ 0x64
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff fc45 	bl	8007a90 <driver_check_FlagBUSY>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d002      	beq.n	8008212 <JEDEC_Basic_ManageQuadEnableRequierement+0x13e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 800820c:	230c      	movs	r3, #12
 800820e:	73fb      	strb	r3, [r7, #15]
      goto error;
 8008210:	e013      	b.n	800823a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* Optional : only for control read the status register and check write operation is OK */
    localValue[1] = 0xFF;
 8008212:	23ff      	movs	r3, #255	@ 0xff
 8008214:	737b      	strb	r3, [r7, #13]
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f103 0008 	add.w	r0, r3, #8
 800821c:	f107 020c 	add.w	r2, r7, #12
 8008220:	2302      	movs	r3, #2
 8008222:	2105      	movs	r1, #5
 8008224:	f7fe fa0e 	bl	8006644 <SAL_XSPI_SendReadCommand>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d004      	beq.n	8008238 <JEDEC_Basic_ManageQuadEnableRequierement+0x164>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 800822e:	230c      	movs	r3, #12
 8008230:	73fb      	strb	r3, [r7, #15]
      goto error;
 8008232:	e002      	b.n	800823a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
  case 0x6u: /* 110b: QE is bit 1 of the status register 2. Status register 1 is read using Read Status instruction 05h. Status register 2 is read using instruction 35h, and status register 3 is read using instruction 15h. QE is set via Write Status Register instruction 31h with one data byte where bit 1 is one. It is cleared via Write Status Register instruction 31h with one data byte where bit 1 is zero.*/
    break;
  case 0x7u: /*111b: Reserved */
    break;
  default :/* Added for Misra */
    break;
 8008234:	bf00      	nop
 8008236:	e000      	b.n	800823a <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    break;
 8008238:	bf00      	nop
  }
error :  
  return retr;
 800823a:	7bfb      	ldrb	r3, [r7, #15]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	240001b0 	.word	0x240001b0

08008248 <JEDEC_Basic_Manage4S4S4SEnableSequence>:
          JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_Manage4S4S4SEnableSequence(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 8008250:	230f      	movs	r3, #15
 8008252:	73fb      	strb	r3, [r7, #15]
  uint8_t instruction = 0x00u;
 8008254:	2300      	movs	r3, #0
 8008256:	73bb      	strb	r3, [r7, #14]
    /* 4-4-4 mode enable sequences, This field describes the supported methods to enter 4-4-4 mode from 1-1-1 mode */
    /* x_xxx1b: set QE per QER description above, then issue instruction 38h */
    if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x1u) == 0x1u)
 8008258:	4b19      	ldr	r3, [pc, #100]	@ (80082c0 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x78>)
 800825a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800825c:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8008260:	b2db      	uxtb	r3, r3
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	2b00      	cmp	r3, #0
 8008268:	d007      	beq.n	800827a <JEDEC_Basic_Manage4S4S4SEnableSequence+0x32>
    {
      retr = JEDEC_Basic_ManageQuadEnableRequierement(Object);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7ff ff32 	bl	80080d4 <JEDEC_Basic_ManageQuadEnableRequierement>
 8008270:	4603      	mov	r3, r0
 8008272:	73fb      	strb	r3, [r7, #15]
      instruction = 0x38u;
 8008274:	2338      	movs	r3, #56	@ 0x38
 8008276:	73bb      	strb	r3, [r7, #14]
 8008278:	e00c      	b.n	8008294 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x4c>
    }
    /* x_x1xxb: issue instruction 35h */
    else if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x4u) == 0x4u)
 800827a:	4b11      	ldr	r3, [pc, #68]	@ (80082c0 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x78>)
 800827c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800827e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8008282:	b2db      	uxtb	r3, r3
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x4c>
    {
      retr = EXTMEM_SFDP_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	73fb      	strb	r3, [r7, #15]
      instruction = 0x35u;
 8008290:	2335      	movs	r3, #53	@ 0x35
 8008292:	73bb      	strb	r3, [r7, #14]
device uses a read-modify-write sequence of operations:
Read Volatile Enhanced Configuration Register using instruction 65h, no address is required, set bit 7 to 1.
Write Volatile Enhanced Configuration Register using instruction 61h, no address is required. This configuration is volatile.
NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 enable sequence is issued.
*/
    if ((retr == EXTMEM_SFDP_OK) && (instruction != 0u))
 8008294:	7bfb      	ldrb	r3, [r7, #15]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10c      	bne.n	80082b4 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x6c>
 800829a:	7bbb      	ldrb	r3, [r7, #14]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d009      	beq.n	80082b4 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x6c>
    {
        (void)SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, instruction, NULL, 0u);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f103 0008 	add.w	r0, r3, #8
 80082a6:	7bb9      	ldrb	r1, [r7, #14]
 80082a8:	2300      	movs	r3, #0
 80082aa:	2200      	movs	r2, #0
 80082ac:	f7fe f9ca 	bl	8006644 <SAL_XSPI_SendReadCommand>
        /* @note on memory W25Q64JV the command 38h does not exist so the control on command execution has been removed */
        retr = EXTMEM_SFDP_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	73fb      	strb	r3, [r7, #15]
    
    // x1xxb: device uses a read-modify-write sequence of operations: read configuration using instruction 65h followed by address 800003h, clear bit 6, write configuration using instruction 71h followed by address 800003h.. This configuration is volatile.
    // 1xxxb: issue the Soft Reset 66/99 sequence, see 6.4.19
    // NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 disable sequence is issued.
  
  return retr;
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	240001b0 	.word	0x240001b0

080082c4 <CheckSFDP_Signature>:
 * @param Object memory Object
 * @param Signature value of the SFDP signature
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef CheckSFDP_Signature(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t Signature )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 80082ce:	2304      	movs	r3, #4
 80082d0:	73fb      	strb	r3, [r7, #15]
  
  /* check the magic number */
  switch(Signature)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	4a0e      	ldr	r2, [pc, #56]	@ (8008310 <CheckSFDP_Signature+0x4c>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d006      	beq.n	80082e8 <CheckSFDP_Signature+0x24>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	4a0d      	ldr	r2, [pc, #52]	@ (8008314 <CheckSFDP_Signature+0x50>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d10e      	bne.n	8008300 <CheckSFDP_Signature+0x3c>
  {
  case SFDP_SIGNATURE :
    SFDP_DEBUG_STR("signature of the header: OK");
    retr = EXTMEM_SFDP_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73fb      	strb	r3, [r7, #15]
    break;
 80082e6:	e00e      	b.n	8008306 <CheckSFDP_Signature+0x42>
  case 0x44505346U :
    SFDP_DEBUG_STR("signature of the header: KO inverted data order");
    /* Change the Mtype settings */
    if (HAL_OK == SAL_XSPI_UpdateMemoryType(&Object->sfpd_private.SALObject, SAL_XSPI_ORDERINVERTED))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3308      	adds	r3, #8
 80082ec:	2100      	movs	r1, #0
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fe fb3d 	bl	800696e <SAL_XSPI_UpdateMemoryType>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d104      	bne.n	8008304 <CheckSFDP_Signature+0x40>
    {
      retr = EXTMEM_SFDP_ERROR_SIGNATUREMTYPE;
 80082fa:	2305      	movs	r3, #5
 80082fc:	73fb      	strb	r3, [r7, #15]
    }
    break;
 80082fe:	e001      	b.n	8008304 <CheckSFDP_Signature+0x40>
  default :
    SFDP_DEBUG_STR("signature of the header: KO");
    break;
 8008300:	bf00      	nop
 8008302:	e000      	b.n	8008306 <CheckSFDP_Signature+0x42>
    break;
 8008304:	bf00      	nop
  }
  return retr;
 8008306:	7bfb      	ldrb	r3, [r7, #15]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	44505346 	.word	0x44505346
 8008314:	50444653 	.word	0x50444653

08008318 <EXTMEM_DRIVER_NOR_SFDP_Init>:
/** @defgroup DRIVER_SFDP_Exported_Functions DRIVER SFDP Exported Functions
  * @{
  */

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Init(void *Peripheral, EXTMEM_LinkConfig_TypeDef Config, uint32_t ClockInput, EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08a      	sub	sp, #40	@ 0x28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	607a      	str	r2, [r7, #4]
 8008322:	603b      	str	r3, [r7, #0]
 8008324:	460b      	mov	r3, r1
 8008326:	72fb      	strb	r3, [r7, #11]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 8008328:	2300      	movs	r3, #0
 800832a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  SFPD_HeaderTypeDef JEDEC_SFDP_Header;
  uint8_t FreqUpdate = 0u;
 800832e:	2300      	movs	r3, #0
 8008330:	76fb      	strb	r3, [r7, #27]
  uint8_t DataID[6];
  uint32_t ClockOut;

  /* reset data of SFDPObject to zero */
  SFDP_DEBUG_STR("1 - reset data SFDPObject to zero")
  (void)memset((void *)&SFDPObject->sfpd_private, 0x0, sizeof(SFDPObject->sfpd_private));
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	3308      	adds	r3, #8
 8008336:	2298      	movs	r2, #152	@ 0x98
 8008338:	2100      	movs	r1, #0
 800833a:	4618      	mov	r0, r3
 800833c:	f000 f8ec 	bl	8008518 <memset>

  /* initialize the SFDPObject */
  SFDP_DEBUG_STR("2 - initialize the SFDPObject")
  SFDPObject->sfpd_private.Config = Config;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	7afa      	ldrb	r2, [r7, #11]
 8008344:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  SFDPObject->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  SFDPObject->sfpd_private.DriverInfo.ClockIn = ClockInput;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	669a      	str	r2, [r3, #104]	@ 0x68
  SAL_XSPI_SET_SFDPDUMMYCYLE(SFDPObject->sfpd_private.SALObject, 8);
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2208      	movs	r2, #8
 800835a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* set memory speed to 50Mhz maximum */
  SFDP_DEBUG_STR("3 - set memory link and speed to 50Mhz maximum")
  (void)SAL_XSPI_Init(&SFDPObject->sfpd_private.SALObject, Peripheral);
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	3308      	adds	r3, #8
 8008362:	68f9      	ldr	r1, [r7, #12]
 8008364:	4618      	mov	r0, r3
 8008366:	f7fd fe34 	bl	8005fd2 <SAL_XSPI_Init>
  (void)SAL_XSPI_SetClock(&SFDPObject->sfpd_private.SALObject, ClockInput, DRIVER_SFDP_DEFAULT_CLOCK, &ClockOut);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	f103 0008 	add.w	r0, r3, #8
 8008370:	f107 0310 	add.w	r3, r7, #16
 8008374:	4a44      	ldr	r2, [pc, #272]	@ (8008488 <EXTMEM_DRIVER_NOR_SFDP_Init+0x170>)
 8008376:	6879      	ldr	r1, [r7, #4]
 8008378:	f7fd fdec 	bl	8005f54 <SAL_XSPI_SetClock>

  /* Abort any ongoing XSPI action */
  (void)SAL_XSPI_DisableMapMode(&SFDPObject->sfpd_private.SALObject);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	3308      	adds	r3, #8
 8008380:	4618      	mov	r0, r3
 8008382:	f7fe fae3 	bl	800694c <SAL_XSPI_DisableMapMode>

  /* analyse the SFPD structure to get driver information */
  SFDP_DEBUG_STR("4 - analyse the SFPD structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
 8008386:	f107 031c 	add.w	r3, r7, #28
 800838a:	4619      	mov	r1, r3
 800838c:	6838      	ldr	r0, [r7, #0]
 800838e:	f7fe fbb3 	bl	8006af8 <SFDP_GetHeader>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d003      	beq.n	80083a0 <EXTMEM_DRIVER_NOR_SFDP_Init+0x88>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only performed in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
 8008398:	23ff      	movs	r3, #255	@ 0xff
 800839a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 800839e:	e06c      	b.n	800847a <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* Reset the memory */
  SFDP_DEBUG_STR("5 - reset the memory")
  if(EXTMEM_SFDP_OK != SFDP_MemoryReset(SFDPObject))
 80083a0:	6838      	ldr	r0, [r7, #0]
 80083a2:	f7fe fce3 	bl	8006d6c <SFDP_MemoryReset>
     */
    SFDP_DEBUG_STR("ERROR::on the call of SFDP_MemoryReset but no error returned")
  }

  /* wait few ms after the reset operation, this is done to avoid issue on SFDP read */
  HAL_Delay(10);
 80083a6:	200a      	movs	r0, #10
 80083a8:	f7f8 fb38 	bl	8000a1c <HAL_Delay>

  /* analyse the SFPD structure to get driver information after the reset */
  SFDP_DEBUG_STR("6 - analyse the SFPD structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
 80083ac:	f107 031c 	add.w	r3, r7, #28
 80083b0:	4619      	mov	r1, r3
 80083b2:	6838      	ldr	r0, [r7, #0]
 80083b4:	f7fe fba0 	bl	8006af8 <SFDP_GetHeader>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <EXTMEM_DRIVER_NOR_SFDP_Init+0xae>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only perform in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
 80083be:	23ff      	movs	r3, #255	@ 0xff
 80083c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 80083c4:	e059      	b.n	800847a <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* Save information from the SFDP table */
  SFDPObject->sfpd_private.Sfdp_param_number = JEDEC_SFDP_Header.param_number;
 80083c6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
  SFDPObject->sfpd_private.Sfdp_AccessProtocol = JEDEC_SFDP_Header.AccessProtocol;
 80083d0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d

  /* read the flash ID */
  SFDP_DEBUG_STR("7 - read the flash ID")
  (void)SAL_XSPI_GetId(&SFDPObject->sfpd_private.SALObject, DataID, 4);
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	3308      	adds	r3, #8
 80083de:	f107 0114 	add.w	r1, r7, #20
 80083e2:	2204      	movs	r2, #4
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fd ffd5 	bl	8006394 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

  /* keep manufacturer information, it could be used to help in
     building of consistent driver */
  SFDPObject->sfpd_private.ManuID = DataID[0];
 80083ea:	7d3a      	ldrb	r2, [r7, #20]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* get the SFDP data */
  SFDP_DEBUG_STR("8 - collect the SFDP data")
  if(EXTMEM_SFDP_OK != SFDP_CollectData(SFDPObject))
 80083f2:	6838      	ldr	r0, [r7, #0]
 80083f4:	f7fe fbde 	bl	8006bb4 <SFDP_CollectData>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d003      	beq.n	8008406 <EXTMEM_DRIVER_NOR_SFDP_Init+0xee>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
 80083fe:	23ff      	movs	r3, #255	@ 0xff
 8008400:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 8008404:	e039      	b.n	800847a <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* setup the generic driver information and prepare the physical layer */
  SFDP_DEBUG_STR("9 - build the generic driver information and prepare the physical layer")
  if(EXTMEM_SFDP_OK !=  SFDP_BuildGenericDriver(SFDPObject, &FreqUpdate))
 8008406:	f107 031b 	add.w	r3, r7, #27
 800840a:	4619      	mov	r1, r3
 800840c:	6838      	ldr	r0, [r7, #0]
 800840e:	f7fe fd89 	bl	8006f24 <SFDP_BuildGenericDriver>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d003      	beq.n	8008420 <EXTMEM_DRIVER_NOR_SFDP_Init+0x108>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD;
 8008418:	23fd      	movs	r3, #253	@ 0xfd
 800841a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 800841e:	e02c      	b.n	800847a <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  SFDP_DEBUG_STR("10 - adjust the frequency if required")
  if ((FreqUpdate == 0u) && (SFDPObject->sfdp_public.MaxFreq != 0u))
 8008420:	7efb      	ldrb	r3, [r7, #27]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10d      	bne.n	8008442 <EXTMEM_DRIVER_NOR_SFDP_Init+0x12a>
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d009      	beq.n	8008442 <EXTMEM_DRIVER_NOR_SFDP_Init+0x12a>
  {
    (void)SAL_XSPI_SetClock(&SFDPObject->sfpd_private.SALObject, ClockInput, SFDPObject->sfdp_public.MaxFreq, &ClockOut);
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	f103 0008 	add.w	r0, r3, #8
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	f107 0310 	add.w	r3, r7, #16
 800843c:	6879      	ldr	r1, [r7, #4]
 800843e:	f7fd fd89 	bl	8005f54 <SAL_XSPI_SetClock>
    SFDP_DEBUG_STR("--> new freq configured");
  }

  SFDP_DEBUG_STR("11 - read again the SFDP header to adjust memory type if necessary")
  if(EXTMEM_SFDP_OK != SFDP_ReadHeader(SFDPObject, &JEDEC_SFDP_Header))
 8008442:	f107 031c 	add.w	r3, r7, #28
 8008446:	4619      	mov	r1, r3
 8008448:	6838      	ldr	r0, [r7, #0]
 800844a:	f7fe fb17 	bl	8006a7c <SFDP_ReadHeader>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d003      	beq.n	800845c <EXTMEM_DRIVER_NOR_SFDP_Init+0x144>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_MEMTYPE_CHECK")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MEMTYPE_CHECK;
 8008454:	23f2      	movs	r3, #242	@ 0xf2
 8008456:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 800845a:	e00e      	b.n	800847a <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  (void)memset(DataID, 0xAA, sizeof(DataID));
 800845c:	f107 0314 	add.w	r3, r7, #20
 8008460:	2206      	movs	r2, #6
 8008462:	21aa      	movs	r1, #170	@ 0xaa
 8008464:	4618      	mov	r0, r3
 8008466:	f000 f857 	bl	8008518 <memset>
  (void)SAL_XSPI_GetId(&SFDPObject->sfpd_private.SALObject, DataID, 4);
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	3308      	adds	r3, #8
 800846e:	f107 0114 	add.w	r1, r7, #20
 8008472:	2204      	movs	r2, #4
 8008474:	4618      	mov	r0, r3
 8008476:	f7fd ff8d 	bl	8006394 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

error:
  return retr;
 800847a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800847e:	4618      	mov	r0, r3
 8008480:	3728      	adds	r7, #40	@ 0x28
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	02faf080 	.word	0x02faf080

0800848c <EXTMEM_DRIVER_NOR_SFDP_DeInit>:

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_DeInit(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  SFDPObject->sfpd_private.FlashSize = 0;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  return EXTMEM_DRIVER_NOR_SFDP_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>:
error:
  return retr;
}

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 80084aa:	b590      	push	{r4, r7, lr}
 80084ac:	b087      	sub	sp, #28
 80084ae:	af02      	add	r7, sp, #8
 80084b0:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	73fb      	strb	r3, [r7, #15]

  /* enter the mapped mode */
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction,
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f103 0008 	add.w	r0, r3, #8
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 1076 	ldrb.w	r1, [r3, #118]	@ 0x76
                                        (uint8_t)SFDPObject->sfpd_private.SALObject.Commandbase.DummyCycles,
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction,
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80084ce:	2400      	movs	r4, #0
 80084d0:	9400      	str	r4, [sp, #0]
 80084d2:	f7fe f9c4 	bl	800685e <SAL_XSPI_EnableMapMode>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode+0x36>
                                        SFDPObject->sfpd_private.DriverInfo.PageProgramInstruction, 0))
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
 80084dc:	23f3      	movs	r3, #243	@ 0xf3
 80084de:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
 80084e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd90      	pop	{r4, r7, pc}

080084ec <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>:

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	73fb      	strb	r3, [r7, #15]

  /* exit the mapped mode */
  if (HAL_OK != SAL_XSPI_DisableMapMode(&SFDPObject->sfpd_private.SALObject))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	3308      	adds	r3, #8
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7fe fa25 	bl	800694c <SAL_XSPI_DisableMapMode>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d001      	beq.n	800850c <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode+0x20>
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
 8008508:	23f3      	movs	r3, #243	@ 0xf3
 800850a:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
 800850c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <memset>:
 8008518:	4402      	add	r2, r0
 800851a:	4603      	mov	r3, r0
 800851c:	4293      	cmp	r3, r2
 800851e:	d100      	bne.n	8008522 <memset+0xa>
 8008520:	4770      	bx	lr
 8008522:	f803 1b01 	strb.w	r1, [r3], #1
 8008526:	e7f9      	b.n	800851c <memset+0x4>

08008528 <__libc_init_array>:
 8008528:	b570      	push	{r4, r5, r6, lr}
 800852a:	4d0d      	ldr	r5, [pc, #52]	@ (8008560 <__libc_init_array+0x38>)
 800852c:	4c0d      	ldr	r4, [pc, #52]	@ (8008564 <__libc_init_array+0x3c>)
 800852e:	1b64      	subs	r4, r4, r5
 8008530:	10a4      	asrs	r4, r4, #2
 8008532:	2600      	movs	r6, #0
 8008534:	42a6      	cmp	r6, r4
 8008536:	d109      	bne.n	800854c <__libc_init_array+0x24>
 8008538:	4d0b      	ldr	r5, [pc, #44]	@ (8008568 <__libc_init_array+0x40>)
 800853a:	4c0c      	ldr	r4, [pc, #48]	@ (800856c <__libc_init_array+0x44>)
 800853c:	f000 f826 	bl	800858c <_init>
 8008540:	1b64      	subs	r4, r4, r5
 8008542:	10a4      	asrs	r4, r4, #2
 8008544:	2600      	movs	r6, #0
 8008546:	42a6      	cmp	r6, r4
 8008548:	d105      	bne.n	8008556 <__libc_init_array+0x2e>
 800854a:	bd70      	pop	{r4, r5, r6, pc}
 800854c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008550:	4798      	blx	r3
 8008552:	3601      	adds	r6, #1
 8008554:	e7ee      	b.n	8008534 <__libc_init_array+0xc>
 8008556:	f855 3b04 	ldr.w	r3, [r5], #4
 800855a:	4798      	blx	r3
 800855c:	3601      	adds	r6, #1
 800855e:	e7f2      	b.n	8008546 <__libc_init_array+0x1e>
 8008560:	080085f0 	.word	0x080085f0
 8008564:	080085f0 	.word	0x080085f0
 8008568:	080085f0 	.word	0x080085f0
 800856c:	080085f4 	.word	0x080085f4

08008570 <memcpy>:
 8008570:	440a      	add	r2, r1
 8008572:	4291      	cmp	r1, r2
 8008574:	f100 33ff 	add.w	r3, r0, #4294967295
 8008578:	d100      	bne.n	800857c <memcpy+0xc>
 800857a:	4770      	bx	lr
 800857c:	b510      	push	{r4, lr}
 800857e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008582:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008586:	4291      	cmp	r1, r2
 8008588:	d1f9      	bne.n	800857e <memcpy+0xe>
 800858a:	bd10      	pop	{r4, pc}

0800858c <_init>:
 800858c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858e:	bf00      	nop
 8008590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008592:	bc08      	pop	{r3}
 8008594:	469e      	mov	lr, r3
 8008596:	4770      	bx	lr

08008598 <_fini>:
 8008598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859a:	bf00      	nop
 800859c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800859e:	bc08      	pop	{r3}
 80085a0:	469e      	mov	lr, r3
 80085a2:	4770      	bx	lr
